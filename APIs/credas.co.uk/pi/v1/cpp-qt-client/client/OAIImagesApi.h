/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICredas_Api_Models_Errors_ErrorResponse.h"
#include "OAICredas_Api_Models_Images_AddIdDocumentImageRequest.h"
#include "OAICredas_Api_Models_Images_AddIdDocumentImageResponse.h"
#include "OAICredas_Api_Models_Images_AddLivenessImageRequest.h"
#include "OAICredas_Api_Models_Images_AddSelfieImageRequest.h"
#include "OAICredas_Api_Models_Images_AddSelfieImageResponse.h"
#include "OAICredas_Api_Models_Images_GetIdDocumentImageResponse.h"
#include "OAICredas_Api_Models_Images_GetLivenessImageResponse.h"
#include "OAICredas_Api_Models_Images_GetLivenessPerformedImageResponse.h"
#include "OAICredas_Api_Models_Images_GetSelfieImageResponse.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_images_add_id_document_image_request OAICredas_Api_Models_Images_AddIdDocumentImageRequest [optional]
    */
    virtual void addIdDocumentImage(const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Images_AddIdDocumentImageRequest> &oai_credas_api_models_images_add_id_document_image_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Images_AddIdDocumentImageRequest>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_images_add_liveness_image_request OAICredas_Api_Models_Images_AddLivenessImageRequest [optional]
    */
    virtual void addLivenessImage(const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Images_AddLivenessImageRequest> &oai_credas_api_models_images_add_liveness_image_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Images_AddLivenessImageRequest>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_images_add_selfie_image_request OAICredas_Api_Models_Images_AddSelfieImageRequest [optional]
    */
    virtual void addSelfieImage(const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Images_AddSelfieImageRequest> &oai_credas_api_models_images_add_selfie_image_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Images_AddSelfieImageRequest>());

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getIdDocumentImages(const QString &registration_id, const QString &apikey);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getLivenessImage(const QString &registration_id, const QString &apikey);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getLivenessPerformedImage(const QString &registration_id, const QString &apikey);

    /**
    * @param[in]  scan_id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getScanReportPdf(const QString &scan_id, const QString &apikey);

    /**
    * @param[in]  registration_id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getSelfieImage(const QString &registration_id, const QString &apikey);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addIdDocumentImageCallback(OAIHttpRequestWorker *worker);
    void addLivenessImageCallback(OAIHttpRequestWorker *worker);
    void addSelfieImageCallback(OAIHttpRequestWorker *worker);
    void getIdDocumentImagesCallback(OAIHttpRequestWorker *worker);
    void getLivenessImageCallback(OAIHttpRequestWorker *worker);
    void getLivenessPerformedImageCallback(OAIHttpRequestWorker *worker);
    void getScanReportPdfCallback(OAIHttpRequestWorker *worker);
    void getSelfieImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addIdDocumentImageSignal(OAICredas_Api_Models_Images_AddIdDocumentImageResponse summary);
    void addLivenessImageSignal();
    void addSelfieImageSignal(OAICredas_Api_Models_Images_AddSelfieImageResponse summary);
    void getIdDocumentImagesSignal(QList<OAICredas_Api_Models_Images_GetIdDocumentImageResponse> summary);
    void getLivenessImageSignal(OAICredas_Api_Models_Images_GetLivenessImageResponse summary);
    void getLivenessPerformedImageSignal(OAICredas_Api_Models_Images_GetLivenessPerformedImageResponse summary);
    void getScanReportPdfSignal(QByteArray summary);
    void getSelfieImageSignal(OAICredas_Api_Models_Images_GetSelfieImageResponse summary);


    void addIdDocumentImageSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Images_AddIdDocumentImageResponse summary);
    void addLivenessImageSignalFull(OAIHttpRequestWorker *worker);
    void addSelfieImageSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Images_AddSelfieImageResponse summary);
    void getIdDocumentImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAICredas_Api_Models_Images_GetIdDocumentImageResponse> summary);
    void getLivenessImageSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Images_GetLivenessImageResponse summary);
    void getLivenessPerformedImageSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Images_GetLivenessPerformedImageResponse summary);
    void getScanReportPdfSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void getSelfieImageSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Images_GetSelfieImageResponse summary);

    Q_DECL_DEPRECATED_X("Use addIdDocumentImageSignalError() instead")
    void addIdDocumentImageSignalE(OAICredas_Api_Models_Images_AddIdDocumentImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addIdDocumentImageSignalError(OAICredas_Api_Models_Images_AddIdDocumentImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLivenessImageSignalError() instead")
    void addLivenessImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLivenessImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addSelfieImageSignalError() instead")
    void addSelfieImageSignalE(OAICredas_Api_Models_Images_AddSelfieImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSelfieImageSignalError(OAICredas_Api_Models_Images_AddSelfieImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdDocumentImagesSignalError() instead")
    void getIdDocumentImagesSignalE(QList<OAICredas_Api_Models_Images_GetIdDocumentImageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdDocumentImagesSignalError(QList<OAICredas_Api_Models_Images_GetIdDocumentImageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLivenessImageSignalError() instead")
    void getLivenessImageSignalE(OAICredas_Api_Models_Images_GetLivenessImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLivenessImageSignalError(OAICredas_Api_Models_Images_GetLivenessImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLivenessPerformedImageSignalError() instead")
    void getLivenessPerformedImageSignalE(OAICredas_Api_Models_Images_GetLivenessPerformedImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLivenessPerformedImageSignalError(OAICredas_Api_Models_Images_GetLivenessPerformedImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScanReportPdfSignalError() instead")
    void getScanReportPdfSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScanReportPdfSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfieImageSignalError() instead")
    void getSelfieImageSignalE(OAICredas_Api_Models_Images_GetSelfieImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfieImageSignalError(OAICredas_Api_Models_Images_GetSelfieImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addIdDocumentImageSignalErrorFull() instead")
    void addIdDocumentImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addIdDocumentImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLivenessImageSignalErrorFull() instead")
    void addLivenessImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLivenessImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addSelfieImageSignalErrorFull() instead")
    void addSelfieImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSelfieImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIdDocumentImagesSignalErrorFull() instead")
    void getIdDocumentImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIdDocumentImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLivenessImageSignalErrorFull() instead")
    void getLivenessImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLivenessImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLivenessPerformedImageSignalErrorFull() instead")
    void getLivenessPerformedImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLivenessPerformedImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScanReportPdfSignalErrorFull() instead")
    void getScanReportPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScanReportPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfieImageSignalErrorFull() instead")
    void getSelfieImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfieImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
