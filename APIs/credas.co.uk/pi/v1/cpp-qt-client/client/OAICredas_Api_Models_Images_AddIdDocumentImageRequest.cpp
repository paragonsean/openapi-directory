/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICredas_Api_Models_Images_AddIdDocumentImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICredas_Api_Models_Images_AddIdDocumentImageRequest::OAICredas_Api_Models_Images_AddIdDocumentImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICredas_Api_Models_Images_AddIdDocumentImageRequest::OAICredas_Api_Models_Images_AddIdDocumentImageRequest() {
    this->initializeModel();
}

OAICredas_Api_Models_Images_AddIdDocumentImageRequest::~OAICredas_Api_Models_Images_AddIdDocumentImageRequest() {}

void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::initializeModel() {

    m_document_parameters_isSet = false;
    m_document_parameters_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_image_data_isSet = false;
    m_image_data_isValid = false;

    m_registration_id_isSet = false;
    m_registration_id_isValid = false;
}

void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::fromJsonObject(QJsonObject json) {

    m_document_parameters_isValid = ::OpenAPI::fromJsonValue(m_document_parameters, json[QString("documentParameters")]);
    m_document_parameters_isSet = !json[QString("documentParameters")].isNull() && m_document_parameters_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_image_data_isValid = ::OpenAPI::fromJsonValue(m_image_data, json[QString("imageData")]);
    m_image_data_isSet = !json[QString("imageData")].isNull() && m_image_data_isValid;

    m_registration_id_isValid = ::OpenAPI::fromJsonValue(m_registration_id, json[QString("registrationId")]);
    m_registration_id_isSet = !json[QString("registrationId")].isNull() && m_registration_id_isValid;
}

QString OAICredas_Api_Models_Images_AddIdDocumentImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICredas_Api_Models_Images_AddIdDocumentImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_parameters.size() > 0) {
        obj.insert(QString("documentParameters"), ::OpenAPI::toJsonValue(m_document_parameters));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_image_data_isSet) {
        obj.insert(QString("imageData"), ::OpenAPI::toJsonValue(m_image_data));
    }
    if (m_registration_id_isSet) {
        obj.insert(QString("registrationId"), ::OpenAPI::toJsonValue(m_registration_id));
    }
    return obj;
}

QList<OAICredas_Api_Models_Registrations_KeyValueItem> OAICredas_Api_Models_Images_AddIdDocumentImageRequest::getDocumentParameters() const {
    return m_document_parameters;
}
void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::setDocumentParameters(const QList<OAICredas_Api_Models_Registrations_KeyValueItem> &document_parameters) {
    m_document_parameters = document_parameters;
    m_document_parameters_isSet = true;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_document_parameters_Set() const{
    return m_document_parameters_isSet;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_document_parameters_Valid() const{
    return m_document_parameters_isValid;
}

qint32 OAICredas_Api_Models_Images_AddIdDocumentImageRequest::getDocumentType() const {
    return m_document_type;
}
void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::setDocumentType(const qint32 &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAICredas_Api_Models_Images_AddIdDocumentImageRequest::getImageData() const {
    return m_image_data;
}
void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::setImageData(const QString &image_data) {
    m_image_data = image_data;
    m_image_data_isSet = true;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_image_data_Set() const{
    return m_image_data_isSet;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_image_data_Valid() const{
    return m_image_data_isValid;
}

QString OAICredas_Api_Models_Images_AddIdDocumentImageRequest::getRegistrationId() const {
    return m_registration_id;
}
void OAICredas_Api_Models_Images_AddIdDocumentImageRequest::setRegistrationId(const QString &registration_id) {
    m_registration_id = registration_id;
    m_registration_id_isSet = true;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_registration_id_Set() const{
    return m_registration_id_isSet;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::is_registration_id_Valid() const{
    return m_registration_id_isValid;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICredas_Api_Models_Images_AddIdDocumentImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_type_isValid && m_image_data_isValid && m_registration_id_isValid && true;
}

} // namespace OpenAPI
