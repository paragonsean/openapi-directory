/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsBankAccountsAccountVerificationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsBankAccountsAccountVerificationResponse {
  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_FORENAME = "Forename";
  @SerializedName(SERIALIZED_NAME_FORENAME)
  private String forename;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_POST_CODE = "PostCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public static final String SERIALIZED_NAME_SURNAME = "Surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Valid &#x3D; 2, Invalid &#x3D; 3, SevenDigitsMatched &#x3D; 4, SixDigitsMatched &#x3D; 5
   */
  @JsonAdapter(AccountNumberValidationEnum.Adapter.class)
  public enum AccountNumberValidationEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    AccountNumberValidationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountNumberValidationEnum fromValue(Integer value) {
      for (AccountNumberValidationEnum b : AccountNumberValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountNumberValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountNumberValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountNumberValidationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AccountNumberValidationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      AccountNumberValidationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_VALIDATION = "accountNumberValidation";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_VALIDATION)
  private AccountNumberValidationEnum accountNumberValidation;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_VALIDATION_TEXT = "accountNumberValidationText";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_VALIDATION_TEXT)
  private String accountNumberValidationText;

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Live &#x3D; 2, ClosedOrSettled &#x3D; 3
   */
  @JsonAdapter(AccountStatusEnum.Adapter.class)
  public enum AccountStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    AccountStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountStatusEnum fromValue(Integer value) {
      for (AccountStatusEnum b : AccountStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AccountStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      AccountStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS = "accountStatus";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS)
  private AccountStatusEnum accountStatus;

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS_TEXT = "accountStatusText";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS_TEXT)
  private String accountStatusText;

  public static final String SERIALIZED_NAME_ACCOUNT_VALID = "accountValid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_VALID)
  private Boolean accountValid;

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, CurrentAddress &#x3D; 2, PreviousAddress &#x3D; 3, ForwardingAddress &#x3D; 4
   */
  @JsonAdapter(AddressValidationEnum.Adapter.class)
  public enum AddressValidationEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    AddressValidationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressValidationEnum fromValue(Integer value) {
      for (AddressValidationEnum b : AddressValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressValidationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AddressValidationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      AddressValidationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_VALIDATION = "addressValidation";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VALIDATION)
  private AddressValidationEnum addressValidation;

  public static final String SERIALIZED_NAME_ADDRESS_VALIDATION_TEXT = "addressValidationText";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VALIDATION_TEXT)
  private String addressValidationText;

  public static final String SERIALIZED_NAME_CHECK_DATE = "checkDate";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private OffsetDateTime checkDate;

  public static final String SERIALIZED_NAME_CHECK_ID = "checkId";
  @SerializedName(SERIALIZED_NAME_CHECK_ID)
  private UUID checkId;

  /**
   * Unknown &#x3D; 0, Pass &#x3D; 1, Refer &#x3D; 2, Fail &#x3D; 3
   */
  @JsonAdapter(CheckStatusEnum.Adapter.class)
  public enum CheckStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    CheckStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckStatusEnum fromValue(Integer value) {
      for (CheckStatusEnum b : CheckStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CheckStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      CheckStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHECK_STATUS = "checkStatus";
  @SerializedName(SERIALIZED_NAME_CHECK_STATUS)
  private CheckStatusEnum checkStatus;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Boolean error;

  public static final String SERIALIZED_NAME_HAS_BEEN_OVERRIDDEN = "hasBeenOverridden";
  @SerializedName(SERIALIZED_NAME_HAS_BEEN_OVERRIDDEN)
  private Boolean hasBeenOverridden;

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Valid &#x3D; 2
   */
  @JsonAdapter(NameValidationEnum.Adapter.class)
  public enum NameValidationEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    NameValidationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameValidationEnum fromValue(Integer value) {
      for (NameValidationEnum b : NameValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameValidationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return NameValidationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      NameValidationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_VALIDATION = "nameValidation";
  @SerializedName(SERIALIZED_NAME_NAME_VALIDATION)
  private NameValidationEnum nameValidation;

  public static final String SERIALIZED_NAME_NAME_VALIDATION_TEXT = "nameValidationText";
  @SerializedName(SERIALIZED_NAME_NAME_VALIDATION_TEXT)
  private String nameValidationText;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_SORTCODE = "sortcode";
  @SerializedName(SERIALIZED_NAME_SORTCODE)
  private String sortcode;

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Valid &#x3D; 2, Invalid &#x3D; 3, FiveDigitsMatched &#x3D; 4
   */
  @JsonAdapter(SortcodeValidationEnum.Adapter.class)
  public enum SortcodeValidationEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    SortcodeValidationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortcodeValidationEnum fromValue(Integer value) {
      for (SortcodeValidationEnum b : SortcodeValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortcodeValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortcodeValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortcodeValidationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SortcodeValidationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      SortcodeValidationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORTCODE_VALIDATION = "sortcodeValidation";
  @SerializedName(SERIALIZED_NAME_SORTCODE_VALIDATION)
  private SortcodeValidationEnum sortcodeValidation;

  public static final String SERIALIZED_NAME_SORTCODE_VALIDATION_TEXT = "sortcodeValidationText";
  @SerializedName(SERIALIZED_NAME_SORTCODE_VALIDATION_TEXT)
  private String sortcodeValidationText;

  public CredasApiModelsBankAccountsAccountVerificationResponse() {
  }

  public CredasApiModelsBankAccountsAccountVerificationResponse(
     String accountNumberValidationText, 
     String accountStatusText, 
     String addressValidationText, 
     String nameValidationText, 
     String sortcodeValidationText
  ) {
    this();
    this.accountNumberValidationText = accountNumberValidationText;
    this.accountStatusText = accountStatusText;
    this.addressValidationText = addressValidationText;
    this.nameValidationText = nameValidationText;
    this.sortcodeValidationText = sortcodeValidationText;
  }

  public CredasApiModelsBankAccountsAccountVerificationResponse address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Get address1
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse forename(String forename) {
    this.forename = forename;
    return this;
  }

  /**
   * Get forename
   * @return forename
   */
  @javax.annotation.Nullable
  public String getForename() {
    return forename;
  }

  public void setForename(String forename) {
    this.forename = forename;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse postCode(String postCode) {
    this.postCode = postCode;
    return this;
  }

  /**
   * Get postCode
   * @return postCode
   */
  @javax.annotation.Nullable
  public String getPostCode() {
    return postCode;
  }

  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nullable
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Get accountNumber
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse accountNumberValidation(AccountNumberValidationEnum accountNumberValidation) {
    this.accountNumberValidation = accountNumberValidation;
    return this;
  }

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Valid &#x3D; 2, Invalid &#x3D; 3, SevenDigitsMatched &#x3D; 4, SixDigitsMatched &#x3D; 5
   * @return accountNumberValidation
   */
  @javax.annotation.Nullable
  public AccountNumberValidationEnum getAccountNumberValidation() {
    return accountNumberValidation;
  }

  public void setAccountNumberValidation(AccountNumberValidationEnum accountNumberValidation) {
    this.accountNumberValidation = accountNumberValidation;
  }


  /**
   * Get accountNumberValidationText
   * @return accountNumberValidationText
   */
  @javax.annotation.Nullable
  public String getAccountNumberValidationText() {
    return accountNumberValidationText;
  }



  public CredasApiModelsBankAccountsAccountVerificationResponse accountStatus(AccountStatusEnum accountStatus) {
    this.accountStatus = accountStatus;
    return this;
  }

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Live &#x3D; 2, ClosedOrSettled &#x3D; 3
   * @return accountStatus
   */
  @javax.annotation.Nullable
  public AccountStatusEnum getAccountStatus() {
    return accountStatus;
  }

  public void setAccountStatus(AccountStatusEnum accountStatus) {
    this.accountStatus = accountStatus;
  }


  /**
   * Get accountStatusText
   * @return accountStatusText
   */
  @javax.annotation.Nullable
  public String getAccountStatusText() {
    return accountStatusText;
  }



  public CredasApiModelsBankAccountsAccountVerificationResponse accountValid(Boolean accountValid) {
    this.accountValid = accountValid;
    return this;
  }

  /**
   * Get accountValid
   * @return accountValid
   */
  @javax.annotation.Nullable
  public Boolean getAccountValid() {
    return accountValid;
  }

  public void setAccountValid(Boolean accountValid) {
    this.accountValid = accountValid;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse addressValidation(AddressValidationEnum addressValidation) {
    this.addressValidation = addressValidation;
    return this;
  }

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, CurrentAddress &#x3D; 2, PreviousAddress &#x3D; 3, ForwardingAddress &#x3D; 4
   * @return addressValidation
   */
  @javax.annotation.Nullable
  public AddressValidationEnum getAddressValidation() {
    return addressValidation;
  }

  public void setAddressValidation(AddressValidationEnum addressValidation) {
    this.addressValidation = addressValidation;
  }


  /**
   * Get addressValidationText
   * @return addressValidationText
   */
  @javax.annotation.Nullable
  public String getAddressValidationText() {
    return addressValidationText;
  }



  public CredasApiModelsBankAccountsAccountVerificationResponse checkDate(OffsetDateTime checkDate) {
    this.checkDate = checkDate;
    return this;
  }

  /**
   * Get checkDate
   * @return checkDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCheckDate() {
    return checkDate;
  }

  public void setCheckDate(OffsetDateTime checkDate) {
    this.checkDate = checkDate;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse checkId(UUID checkId) {
    this.checkId = checkId;
    return this;
  }

  /**
   * Get checkId
   * @return checkId
   */
  @javax.annotation.Nullable
  public UUID getCheckId() {
    return checkId;
  }

  public void setCheckId(UUID checkId) {
    this.checkId = checkId;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse checkStatus(CheckStatusEnum checkStatus) {
    this.checkStatus = checkStatus;
    return this;
  }

  /**
   * Unknown &#x3D; 0, Pass &#x3D; 1, Refer &#x3D; 2, Fail &#x3D; 3
   * @return checkStatus
   */
  @javax.annotation.Nullable
  public CheckStatusEnum getCheckStatus() {
    return checkStatus;
  }

  public void setCheckStatus(CheckStatusEnum checkStatus) {
    this.checkStatus = checkStatus;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse error(Boolean error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Boolean getError() {
    return error;
  }

  public void setError(Boolean error) {
    this.error = error;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse hasBeenOverridden(Boolean hasBeenOverridden) {
    this.hasBeenOverridden = hasBeenOverridden;
    return this;
  }

  /**
   * Get hasBeenOverridden
   * @return hasBeenOverridden
   */
  @javax.annotation.Nullable
  public Boolean getHasBeenOverridden() {
    return hasBeenOverridden;
  }

  public void setHasBeenOverridden(Boolean hasBeenOverridden) {
    this.hasBeenOverridden = hasBeenOverridden;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse nameValidation(NameValidationEnum nameValidation) {
    this.nameValidation = nameValidation;
    return this;
  }

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Valid &#x3D; 2
   * @return nameValidation
   */
  @javax.annotation.Nullable
  public NameValidationEnum getNameValidation() {
    return nameValidation;
  }

  public void setNameValidation(NameValidationEnum nameValidation) {
    this.nameValidation = nameValidation;
  }


  /**
   * Get nameValidationText
   * @return nameValidationText
   */
  @javax.annotation.Nullable
  public String getNameValidationText() {
    return nameValidationText;
  }



  public CredasApiModelsBankAccountsAccountVerificationResponse referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse sortcode(String sortcode) {
    this.sortcode = sortcode;
    return this;
  }

  /**
   * Get sortcode
   * @return sortcode
   */
  @javax.annotation.Nullable
  public String getSortcode() {
    return sortcode;
  }

  public void setSortcode(String sortcode) {
    this.sortcode = sortcode;
  }


  public CredasApiModelsBankAccountsAccountVerificationResponse sortcodeValidation(SortcodeValidationEnum sortcodeValidation) {
    this.sortcodeValidation = sortcodeValidation;
    return this;
  }

  /**
   * Unknown &#x3D; 0, NoMatch &#x3D; 1, Valid &#x3D; 2, Invalid &#x3D; 3, FiveDigitsMatched &#x3D; 4
   * @return sortcodeValidation
   */
  @javax.annotation.Nullable
  public SortcodeValidationEnum getSortcodeValidation() {
    return sortcodeValidation;
  }

  public void setSortcodeValidation(SortcodeValidationEnum sortcodeValidation) {
    this.sortcodeValidation = sortcodeValidation;
  }


  /**
   * Get sortcodeValidationText
   * @return sortcodeValidationText
   */
  @javax.annotation.Nullable
  public String getSortcodeValidationText() {
    return sortcodeValidationText;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsBankAccountsAccountVerificationResponse credasApiModelsBankAccountsAccountVerificationResponse = (CredasApiModelsBankAccountsAccountVerificationResponse) o;
    return Objects.equals(this.address1, credasApiModelsBankAccountsAccountVerificationResponse.address1) &&
        Objects.equals(this.city, credasApiModelsBankAccountsAccountVerificationResponse.city) &&
        Objects.equals(this.forename, credasApiModelsBankAccountsAccountVerificationResponse.forename) &&
        Objects.equals(this.middleName, credasApiModelsBankAccountsAccountVerificationResponse.middleName) &&
        Objects.equals(this.postCode, credasApiModelsBankAccountsAccountVerificationResponse.postCode) &&
        Objects.equals(this.surname, credasApiModelsBankAccountsAccountVerificationResponse.surname) &&
        Objects.equals(this.accountNumber, credasApiModelsBankAccountsAccountVerificationResponse.accountNumber) &&
        Objects.equals(this.accountNumberValidation, credasApiModelsBankAccountsAccountVerificationResponse.accountNumberValidation) &&
        Objects.equals(this.accountNumberValidationText, credasApiModelsBankAccountsAccountVerificationResponse.accountNumberValidationText) &&
        Objects.equals(this.accountStatus, credasApiModelsBankAccountsAccountVerificationResponse.accountStatus) &&
        Objects.equals(this.accountStatusText, credasApiModelsBankAccountsAccountVerificationResponse.accountStatusText) &&
        Objects.equals(this.accountValid, credasApiModelsBankAccountsAccountVerificationResponse.accountValid) &&
        Objects.equals(this.addressValidation, credasApiModelsBankAccountsAccountVerificationResponse.addressValidation) &&
        Objects.equals(this.addressValidationText, credasApiModelsBankAccountsAccountVerificationResponse.addressValidationText) &&
        Objects.equals(this.checkDate, credasApiModelsBankAccountsAccountVerificationResponse.checkDate) &&
        Objects.equals(this.checkId, credasApiModelsBankAccountsAccountVerificationResponse.checkId) &&
        Objects.equals(this.checkStatus, credasApiModelsBankAccountsAccountVerificationResponse.checkStatus) &&
        Objects.equals(this.error, credasApiModelsBankAccountsAccountVerificationResponse.error) &&
        Objects.equals(this.hasBeenOverridden, credasApiModelsBankAccountsAccountVerificationResponse.hasBeenOverridden) &&
        Objects.equals(this.nameValidation, credasApiModelsBankAccountsAccountVerificationResponse.nameValidation) &&
        Objects.equals(this.nameValidationText, credasApiModelsBankAccountsAccountVerificationResponse.nameValidationText) &&
        Objects.equals(this.referenceId, credasApiModelsBankAccountsAccountVerificationResponse.referenceId) &&
        Objects.equals(this.sortcode, credasApiModelsBankAccountsAccountVerificationResponse.sortcode) &&
        Objects.equals(this.sortcodeValidation, credasApiModelsBankAccountsAccountVerificationResponse.sortcodeValidation) &&
        Objects.equals(this.sortcodeValidationText, credasApiModelsBankAccountsAccountVerificationResponse.sortcodeValidationText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, city, forename, middleName, postCode, surname, accountNumber, accountNumberValidation, accountNumberValidationText, accountStatus, accountStatusText, accountValid, addressValidation, addressValidationText, checkDate, checkId, checkStatus, error, hasBeenOverridden, nameValidation, nameValidationText, referenceId, sortcode, sortcodeValidation, sortcodeValidationText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsBankAccountsAccountVerificationResponse {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    forename: ").append(toIndentedString(forename)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountNumberValidation: ").append(toIndentedString(accountNumberValidation)).append("\n");
    sb.append("    accountNumberValidationText: ").append(toIndentedString(accountNumberValidationText)).append("\n");
    sb.append("    accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
    sb.append("    accountStatusText: ").append(toIndentedString(accountStatusText)).append("\n");
    sb.append("    accountValid: ").append(toIndentedString(accountValid)).append("\n");
    sb.append("    addressValidation: ").append(toIndentedString(addressValidation)).append("\n");
    sb.append("    addressValidationText: ").append(toIndentedString(addressValidationText)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    checkId: ").append(toIndentedString(checkId)).append("\n");
    sb.append("    checkStatus: ").append(toIndentedString(checkStatus)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    hasBeenOverridden: ").append(toIndentedString(hasBeenOverridden)).append("\n");
    sb.append("    nameValidation: ").append(toIndentedString(nameValidation)).append("\n");
    sb.append("    nameValidationText: ").append(toIndentedString(nameValidationText)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    sortcode: ").append(toIndentedString(sortcode)).append("\n");
    sb.append("    sortcodeValidation: ").append(toIndentedString(sortcodeValidation)).append("\n");
    sb.append("    sortcodeValidationText: ").append(toIndentedString(sortcodeValidationText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address1");
    openapiFields.add("City");
    openapiFields.add("Forename");
    openapiFields.add("MiddleName");
    openapiFields.add("PostCode");
    openapiFields.add("Surname");
    openapiFields.add("accountNumber");
    openapiFields.add("accountNumberValidation");
    openapiFields.add("accountNumberValidationText");
    openapiFields.add("accountStatus");
    openapiFields.add("accountStatusText");
    openapiFields.add("accountValid");
    openapiFields.add("addressValidation");
    openapiFields.add("addressValidationText");
    openapiFields.add("checkDate");
    openapiFields.add("checkId");
    openapiFields.add("checkStatus");
    openapiFields.add("error");
    openapiFields.add("hasBeenOverridden");
    openapiFields.add("nameValidation");
    openapiFields.add("nameValidationText");
    openapiFields.add("referenceId");
    openapiFields.add("sortcode");
    openapiFields.add("sortcodeValidation");
    openapiFields.add("sortcodeValidationText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsBankAccountsAccountVerificationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsBankAccountsAccountVerificationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsBankAccountsAccountVerificationResponse is not found in the empty JSON string", CredasApiModelsBankAccountsAccountVerificationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsBankAccountsAccountVerificationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsBankAccountsAccountVerificationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Forename") != null && !jsonObj.get("Forename").isJsonNull()) && !jsonObj.get("Forename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Forename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Forename").toString()));
      }
      if ((jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if ((jsonObj.get("PostCode") != null && !jsonObj.get("PostCode").isJsonNull()) && !jsonObj.get("PostCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PostCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PostCode").toString()));
      }
      if ((jsonObj.get("Surname") != null && !jsonObj.get("Surname").isJsonNull()) && !jsonObj.get("Surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Surname").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      // validate the optional field `accountNumberValidation`
      if (jsonObj.get("accountNumberValidation") != null && !jsonObj.get("accountNumberValidation").isJsonNull()) {
        AccountNumberValidationEnum.validateJsonElement(jsonObj.get("accountNumberValidation"));
      }
      if ((jsonObj.get("accountNumberValidationText") != null && !jsonObj.get("accountNumberValidationText").isJsonNull()) && !jsonObj.get("accountNumberValidationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumberValidationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumberValidationText").toString()));
      }
      // validate the optional field `accountStatus`
      if (jsonObj.get("accountStatus") != null && !jsonObj.get("accountStatus").isJsonNull()) {
        AccountStatusEnum.validateJsonElement(jsonObj.get("accountStatus"));
      }
      if ((jsonObj.get("accountStatusText") != null && !jsonObj.get("accountStatusText").isJsonNull()) && !jsonObj.get("accountStatusText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountStatusText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountStatusText").toString()));
      }
      // validate the optional field `addressValidation`
      if (jsonObj.get("addressValidation") != null && !jsonObj.get("addressValidation").isJsonNull()) {
        AddressValidationEnum.validateJsonElement(jsonObj.get("addressValidation"));
      }
      if ((jsonObj.get("addressValidationText") != null && !jsonObj.get("addressValidationText").isJsonNull()) && !jsonObj.get("addressValidationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressValidationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressValidationText").toString()));
      }
      if ((jsonObj.get("checkId") != null && !jsonObj.get("checkId").isJsonNull()) && !jsonObj.get("checkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkId").toString()));
      }
      // validate the optional field `checkStatus`
      if (jsonObj.get("checkStatus") != null && !jsonObj.get("checkStatus").isJsonNull()) {
        CheckStatusEnum.validateJsonElement(jsonObj.get("checkStatus"));
      }
      // validate the optional field `nameValidation`
      if (jsonObj.get("nameValidation") != null && !jsonObj.get("nameValidation").isJsonNull()) {
        NameValidationEnum.validateJsonElement(jsonObj.get("nameValidation"));
      }
      if ((jsonObj.get("nameValidationText") != null && !jsonObj.get("nameValidationText").isJsonNull()) && !jsonObj.get("nameValidationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameValidationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameValidationText").toString()));
      }
      if ((jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonNull()) && !jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if ((jsonObj.get("sortcode") != null && !jsonObj.get("sortcode").isJsonNull()) && !jsonObj.get("sortcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortcode").toString()));
      }
      // validate the optional field `sortcodeValidation`
      if (jsonObj.get("sortcodeValidation") != null && !jsonObj.get("sortcodeValidation").isJsonNull()) {
        SortcodeValidationEnum.validateJsonElement(jsonObj.get("sortcodeValidation"));
      }
      if ((jsonObj.get("sortcodeValidationText") != null && !jsonObj.get("sortcodeValidationText").isJsonNull()) && !jsonObj.get("sortcodeValidationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortcodeValidationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortcodeValidationText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsBankAccountsAccountVerificationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsBankAccountsAccountVerificationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsBankAccountsAccountVerificationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsBankAccountsAccountVerificationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsBankAccountsAccountVerificationResponse>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsBankAccountsAccountVerificationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsBankAccountsAccountVerificationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsBankAccountsAccountVerificationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsBankAccountsAccountVerificationResponse
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsBankAccountsAccountVerificationResponse
   */
  public static CredasApiModelsBankAccountsAccountVerificationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsBankAccountsAccountVerificationResponse.class);
  }

  /**
   * Convert an instance of CredasApiModelsBankAccountsAccountVerificationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

