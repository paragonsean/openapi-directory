/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CredasApiModelsErrorsErrorResponse;
import org.openapitools.client.model.CredasApiModelsImagesAddIdDocumentImageRequest;
import org.openapitools.client.model.CredasApiModelsImagesAddIdDocumentImageResponse;
import org.openapitools.client.model.CredasApiModelsImagesAddLivenessImageRequest;
import org.openapitools.client.model.CredasApiModelsImagesAddSelfieImageRequest;
import org.openapitools.client.model.CredasApiModelsImagesAddSelfieImageResponse;
import org.openapitools.client.model.CredasApiModelsImagesGetIdDocumentImageResponse;
import org.openapitools.client.model.CredasApiModelsImagesGetLivenessImageResponse;
import org.openapitools.client.model.CredasApiModelsImagesGetLivenessPerformedImageResponse;
import org.openapitools.client.model.CredasApiModelsImagesGetSelfieImageResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addIdDocumentImage
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddIdDocumentImageRequest Object containing the id document image and registration id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the processed id document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIdDocumentImageCall(String apikey, CredasApiModelsImagesAddIdDocumentImageRequest credasApiModelsImagesAddIdDocumentImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsImagesAddIdDocumentImageRequest;

        // create path and map variables
        String localVarPath = "/api/images/id-document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIdDocumentImageValidateBeforeCall(String apikey, CredasApiModelsImagesAddIdDocumentImageRequest credasApiModelsImagesAddIdDocumentImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling addIdDocumentImage(Async)");
        }

        return addIdDocumentImageCall(apikey, credasApiModelsImagesAddIdDocumentImageRequest, _callback);

    }

    /**
     * Add an id document image to the specified registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddIdDocumentImageRequest Object containing the id document image and registration id. (optional)
     * @return CredasApiModelsImagesAddIdDocumentImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the processed id document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsImagesAddIdDocumentImageResponse addIdDocumentImage(String apikey, CredasApiModelsImagesAddIdDocumentImageRequest credasApiModelsImagesAddIdDocumentImageRequest) throws ApiException {
        ApiResponse<CredasApiModelsImagesAddIdDocumentImageResponse> localVarResp = addIdDocumentImageWithHttpInfo(apikey, credasApiModelsImagesAddIdDocumentImageRequest);
        return localVarResp.getData();
    }

    /**
     * Add an id document image to the specified registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddIdDocumentImageRequest Object containing the id document image and registration id. (optional)
     * @return ApiResponse&lt;CredasApiModelsImagesAddIdDocumentImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the processed id document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsImagesAddIdDocumentImageResponse> addIdDocumentImageWithHttpInfo(String apikey, CredasApiModelsImagesAddIdDocumentImageRequest credasApiModelsImagesAddIdDocumentImageRequest) throws ApiException {
        okhttp3.Call localVarCall = addIdDocumentImageValidateBeforeCall(apikey, credasApiModelsImagesAddIdDocumentImageRequest, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesAddIdDocumentImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an id document image to the specified registration. (asynchronously)
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddIdDocumentImageRequest Object containing the id document image and registration id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the processed id document. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIdDocumentImageAsync(String apikey, CredasApiModelsImagesAddIdDocumentImageRequest credasApiModelsImagesAddIdDocumentImageRequest, final ApiCallback<CredasApiModelsImagesAddIdDocumentImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIdDocumentImageValidateBeforeCall(apikey, credasApiModelsImagesAddIdDocumentImageRequest, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesAddIdDocumentImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLivenessImage
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddLivenessImageRequest Object containing the liveness image and registration id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response indicating a successful action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLivenessImageCall(String apikey, CredasApiModelsImagesAddLivenessImageRequest credasApiModelsImagesAddLivenessImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsImagesAddLivenessImageRequest;

        // create path and map variables
        String localVarPath = "/api/images/liveness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLivenessImageValidateBeforeCall(String apikey, CredasApiModelsImagesAddLivenessImageRequest credasApiModelsImagesAddLivenessImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling addLivenessImage(Async)");
        }

        return addLivenessImageCall(apikey, credasApiModelsImagesAddLivenessImageRequest, _callback);

    }

    /**
     * Add a liveness image (UAP) to the specified registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddLivenessImageRequest Object containing the liveness image and registration id. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response indicating a successful action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void addLivenessImage(String apikey, CredasApiModelsImagesAddLivenessImageRequest credasApiModelsImagesAddLivenessImageRequest) throws ApiException {
        addLivenessImageWithHttpInfo(apikey, credasApiModelsImagesAddLivenessImageRequest);
    }

    /**
     * Add a liveness image (UAP) to the specified registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddLivenessImageRequest Object containing the liveness image and registration id. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response indicating a successful action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addLivenessImageWithHttpInfo(String apikey, CredasApiModelsImagesAddLivenessImageRequest credasApiModelsImagesAddLivenessImageRequest) throws ApiException {
        okhttp3.Call localVarCall = addLivenessImageValidateBeforeCall(apikey, credasApiModelsImagesAddLivenessImageRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a liveness image (UAP) to the specified registration. (asynchronously)
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddLivenessImageRequest Object containing the liveness image and registration id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response indicating a successful action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLivenessImageAsync(String apikey, CredasApiModelsImagesAddLivenessImageRequest credasApiModelsImagesAddLivenessImageRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLivenessImageValidateBeforeCall(apikey, credasApiModelsImagesAddLivenessImageRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addSelfieImage
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddSelfieImageRequest Object containing the selfie image and registration id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of uploading selfie image; including liveness check indicator. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSelfieImageCall(String apikey, CredasApiModelsImagesAddSelfieImageRequest credasApiModelsImagesAddSelfieImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsImagesAddSelfieImageRequest;

        // create path and map variables
        String localVarPath = "/api/images/selfie";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSelfieImageValidateBeforeCall(String apikey, CredasApiModelsImagesAddSelfieImageRequest credasApiModelsImagesAddSelfieImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling addSelfieImage(Async)");
        }

        return addSelfieImageCall(apikey, credasApiModelsImagesAddSelfieImageRequest, _callback);

    }

    /**
     * Add a selfie image to the registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddSelfieImageRequest Object containing the selfie image and registration id. (optional)
     * @return CredasApiModelsImagesAddSelfieImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of uploading selfie image; including liveness check indicator. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsImagesAddSelfieImageResponse addSelfieImage(String apikey, CredasApiModelsImagesAddSelfieImageRequest credasApiModelsImagesAddSelfieImageRequest) throws ApiException {
        ApiResponse<CredasApiModelsImagesAddSelfieImageResponse> localVarResp = addSelfieImageWithHttpInfo(apikey, credasApiModelsImagesAddSelfieImageRequest);
        return localVarResp.getData();
    }

    /**
     * Add a selfie image to the registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddSelfieImageRequest Object containing the selfie image and registration id. (optional)
     * @return ApiResponse&lt;CredasApiModelsImagesAddSelfieImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of uploading selfie image; including liveness check indicator. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsImagesAddSelfieImageResponse> addSelfieImageWithHttpInfo(String apikey, CredasApiModelsImagesAddSelfieImageRequest credasApiModelsImagesAddSelfieImageRequest) throws ApiException {
        okhttp3.Call localVarCall = addSelfieImageValidateBeforeCall(apikey, credasApiModelsImagesAddSelfieImageRequest, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesAddSelfieImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a selfie image to the registration. (asynchronously)
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsImagesAddSelfieImageRequest Object containing the selfie image and registration id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of uploading selfie image; including liveness check indicator. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSelfieImageAsync(String apikey, CredasApiModelsImagesAddSelfieImageRequest credasApiModelsImagesAddSelfieImageRequest, final ApiCallback<CredasApiModelsImagesAddSelfieImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSelfieImageValidateBeforeCall(apikey, credasApiModelsImagesAddSelfieImageRequest, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesAddSelfieImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIdDocumentImages
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the id documents associated with the registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdDocumentImagesCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/id-document/{registrationId}"
            .replace("{" + "registrationId" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdDocumentImagesValidateBeforeCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling getIdDocumentImages(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getIdDocumentImages(Async)");
        }

        return getIdDocumentImagesCall(registrationId, apikey, _callback);

    }

    /**
     * Get all id document images associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return List&lt;CredasApiModelsImagesGetIdDocumentImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the id documents associated with the registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public List<CredasApiModelsImagesGetIdDocumentImageResponse> getIdDocumentImages(UUID registrationId, String apikey) throws ApiException {
        ApiResponse<List<CredasApiModelsImagesGetIdDocumentImageResponse>> localVarResp = getIdDocumentImagesWithHttpInfo(registrationId, apikey);
        return localVarResp.getData();
    }

    /**
     * Get all id document images associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;List&lt;CredasApiModelsImagesGetIdDocumentImageResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the id documents associated with the registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CredasApiModelsImagesGetIdDocumentImageResponse>> getIdDocumentImagesWithHttpInfo(UUID registrationId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getIdDocumentImagesValidateBeforeCall(registrationId, apikey, null);
        Type localVarReturnType = new TypeToken<List<CredasApiModelsImagesGetIdDocumentImageResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all id document images associated with a registration. (asynchronously)
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the id documents associated with the registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdDocumentImagesAsync(UUID registrationId, String apikey, final ApiCallback<List<CredasApiModelsImagesGetIdDocumentImageResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdDocumentImagesValidateBeforeCall(registrationId, apikey, _callback);
        Type localVarReturnType = new TypeToken<List<CredasApiModelsImagesGetIdDocumentImageResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLivenessImage
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLivenessImageCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/liveness/{registrationId}"
            .replace("{" + "registrationId" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivenessImageValidateBeforeCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling getLivenessImage(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getLivenessImage(Async)");
        }

        return getLivenessImageCall(registrationId, apikey, _callback);

    }

    /**
     * Retrieve the liveness action image (UAP) associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsImagesGetLivenessImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsImagesGetLivenessImageResponse getLivenessImage(UUID registrationId, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsImagesGetLivenessImageResponse> localVarResp = getLivenessImageWithHttpInfo(registrationId, apikey);
        return localVarResp.getData();
    }

    /**
     * Retrieve the liveness action image (UAP) associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsImagesGetLivenessImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsImagesGetLivenessImageResponse> getLivenessImageWithHttpInfo(UUID registrationId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getLivenessImageValidateBeforeCall(registrationId, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesGetLivenessImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the liveness action image (UAP) associated with a registration. (asynchronously)
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLivenessImageAsync(UUID registrationId, String apikey, final ApiCallback<CredasApiModelsImagesGetLivenessImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivenessImageValidateBeforeCall(registrationId, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesGetLivenessImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLivenessPerformedImage
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness performed image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the liveness performed image doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLivenessPerformedImageCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/liveness-performed/{registrationId}"
            .replace("{" + "registrationId" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivenessPerformedImageValidateBeforeCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling getLivenessPerformedImage(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getLivenessPerformedImage(Async)");
        }

        return getLivenessPerformedImageCall(registrationId, apikey, _callback);

    }

    /**
     * Retrieve the liveness performed image associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsImagesGetLivenessPerformedImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness performed image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the liveness performed image doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsImagesGetLivenessPerformedImageResponse getLivenessPerformedImage(UUID registrationId, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsImagesGetLivenessPerformedImageResponse> localVarResp = getLivenessPerformedImageWithHttpInfo(registrationId, apikey);
        return localVarResp.getData();
    }

    /**
     * Retrieve the liveness performed image associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsImagesGetLivenessPerformedImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness performed image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the liveness performed image doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsImagesGetLivenessPerformedImageResponse> getLivenessPerformedImageWithHttpInfo(UUID registrationId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getLivenessPerformedImageValidateBeforeCall(registrationId, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesGetLivenessPerformedImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the liveness performed image associated with a registration. (asynchronously)
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing Liveness performed image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the liveness performed image doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLivenessPerformedImageAsync(UUID registrationId, String apikey, final ApiCallback<CredasApiModelsImagesGetLivenessPerformedImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivenessPerformedImageValidateBeforeCall(registrationId, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesGetLivenessPerformedImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScanReportPdf
     * @param scanId Id of the individual scanned document (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing detail analysis of scanned documents as a byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If scan matching the scanId was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanReportPdfCall(UUID scanId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/scan-report-pdf/{scanId}"
            .replace("{" + "scanId" + "}", localVarApiClient.escapeString(scanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScanReportPdfValidateBeforeCall(UUID scanId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanId' is set
        if (scanId == null) {
            throw new ApiException("Missing the required parameter 'scanId' when calling getScanReportPdf(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getScanReportPdf(Async)");
        }

        return getScanReportPdfCall(scanId, apikey, _callback);

    }

    /**
     * Returns a detailed report on the analysis that has taken place of a scanned document
     * 
     * @param scanId Id of the individual scanned document (required)
     * @param apikey ApiKey supplied. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing detail analysis of scanned documents as a byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If scan matching the scanId was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getScanReportPdf(UUID scanId, String apikey) throws ApiException {
        ApiResponse<byte[]> localVarResp = getScanReportPdfWithHttpInfo(scanId, apikey);
        return localVarResp.getData();
    }

    /**
     * Returns a detailed report on the analysis that has taken place of a scanned document
     * 
     * @param scanId Id of the individual scanned document (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing detail analysis of scanned documents as a byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If scan matching the scanId was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getScanReportPdfWithHttpInfo(UUID scanId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getScanReportPdfValidateBeforeCall(scanId, apikey, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a detailed report on the analysis that has taken place of a scanned document (asynchronously)
     * 
     * @param scanId Id of the individual scanned document (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing detail analysis of scanned documents as a byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If scan matching the scanId was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanReportPdfAsync(UUID scanId, String apikey, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScanReportPdfValidateBeforeCall(scanId, apikey, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfieImage
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the selfie image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfieImageCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/selfie/{registrationId}"
            .replace("{" + "registrationId" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfieImageValidateBeforeCall(UUID registrationId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling getSelfieImage(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getSelfieImage(Async)");
        }

        return getSelfieImageCall(registrationId, apikey, _callback);

    }

    /**
     * Retrieve the selfie image associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsImagesGetSelfieImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the selfie image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsImagesGetSelfieImageResponse getSelfieImage(UUID registrationId, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsImagesGetSelfieImageResponse> localVarResp = getSelfieImageWithHttpInfo(registrationId, apikey);
        return localVarResp.getData();
    }

    /**
     * Retrieve the selfie image associated with a registration.
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsImagesGetSelfieImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the selfie image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsImagesGetSelfieImageResponse> getSelfieImageWithHttpInfo(UUID registrationId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getSelfieImageValidateBeforeCall(registrationId, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesGetSelfieImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the selfie image associated with a registration. (asynchronously)
     * 
     * @param registrationId The id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the selfie image details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfieImageAsync(UUID registrationId, String apikey, final ApiCallback<CredasApiModelsImagesGetSelfieImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfieImageValidateBeforeCall(registrationId, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsImagesGetSelfieImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
