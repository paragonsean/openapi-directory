/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CredasApiModelsCompaniesCompanyDetail;
import org.openapitools.client.model.CredasApiModelsErrorsErrorResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompaniesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompaniesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompaniesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCompany
     * @param companyId  (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanyCall(UUID companyId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/companies/{companyId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyValidateBeforeCall(UUID companyId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompany(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getCompany(Async)");
        }

        return getCompanyCall(companyId, apikey, _callback);

    }

    /**
     * 
     * 
     * @param companyId  (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsCompaniesCompanyDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsCompaniesCompanyDetail getCompany(UUID companyId, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsCompaniesCompanyDetail> localVarResp = getCompanyWithHttpInfo(companyId, apikey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param companyId  (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsCompaniesCompanyDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsCompaniesCompanyDetail> getCompanyWithHttpInfo(UUID companyId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(companyId, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsCompaniesCompanyDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param companyId  (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanyAsync(UUID companyId, String apikey, final ApiCallback<CredasApiModelsCompaniesCompanyDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(companyId, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsCompaniesCompanyDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCompany
     * @param apikey ApiKey supplied. (required)
     * @param companyNumber The company registration number of the company that should be searched. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompanyCall(String apikey, String companyNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyNumber", companyNumber));
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCompanyValidateBeforeCall(String apikey, String companyNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling searchCompany(Async)");
        }

        return searchCompanyCall(apikey, companyNumber, _callback);

    }

    /**
     * Searches for a company based on its Company Number and returns its details.
     * If a company appears multiple times within the structure, it will only be detailed in full (i.e. with significant ownership details) in its first instance. Subsequent instances will be               marked as duplicates.              Whilst duplicate instances of companies can and will be identified, it is not possible to categorically identify duplicated people.
     * @param apikey ApiKey supplied. (required)
     * @param companyNumber The company registration number of the company that should be searched. (optional)
     * @return CredasApiModelsCompaniesCompanyDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsCompaniesCompanyDetail searchCompany(String apikey, String companyNumber) throws ApiException {
        ApiResponse<CredasApiModelsCompaniesCompanyDetail> localVarResp = searchCompanyWithHttpInfo(apikey, companyNumber);
        return localVarResp.getData();
    }

    /**
     * Searches for a company based on its Company Number and returns its details.
     * If a company appears multiple times within the structure, it will only be detailed in full (i.e. with significant ownership details) in its first instance. Subsequent instances will be               marked as duplicates.              Whilst duplicate instances of companies can and will be identified, it is not possible to categorically identify duplicated people.
     * @param apikey ApiKey supplied. (required)
     * @param companyNumber The company registration number of the company that should be searched. (optional)
     * @return ApiResponse&lt;CredasApiModelsCompaniesCompanyDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsCompaniesCompanyDetail> searchCompanyWithHttpInfo(String apikey, String companyNumber) throws ApiException {
        okhttp3.Call localVarCall = searchCompanyValidateBeforeCall(apikey, companyNumber, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsCompaniesCompanyDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for a company based on its Company Number and returns its details. (asynchronously)
     * If a company appears multiple times within the structure, it will only be detailed in full (i.e. with significant ownership details) in its first instance. Subsequent instances will be               marked as duplicates.              Whilst duplicate instances of companies can and will be identified, it is not possible to categorically identify duplicated people.
     * @param apikey ApiKey supplied. (required)
     * @param companyNumber The company registration number of the company that should be searched. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> If the consumer doesn&#39;t have the required permission to use the endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompanyAsync(String apikey, String companyNumber, final ApiCallback<CredasApiModelsCompaniesCompanyDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCompanyValidateBeforeCall(apikey, companyNumber, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsCompaniesCompanyDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
