/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsImagesAddIdDocumentImageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsImagesAddIdDocumentImageResponse {
  /**
   * Active &#x3D; 1, Deleted &#x3D; 2, UnderReview &#x3D; 3
   */
  @JsonAdapter(DocumentStatusEnum.Adapter.class)
  public enum DocumentStatusEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    DocumentStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentStatusEnum fromValue(Integer value) {
      for (DocumentStatusEnum b : DocumentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DocumentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DocumentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_STATUS = "documentStatus";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_STATUS)
  private DocumentStatusEnum documentStatus;

  /**
   * Unknown &#x3D; 0, Passport &#x3D; 1, DrivingLicense &#x3D; 2, IdentificationCard &#x3D; 3, TaxLetter &#x3D; 4, NIC_Letter &#x3D; 5, TV_Licence &#x3D; 6, UtilityBill &#x3D; 7, HighRiskWorkLicence &#x3D; 8, TravelPermit &#x3D; 9, BankLetter &#x3D; 10, BenefitLetter &#x3D; 11, BankStatement &#x3D; 12, NINO_Letter &#x3D; 13, CouncilTax &#x3D; 14, ResidentPermit &#x3D; 15, PhotoCard &#x3D; 16, RepaymentLetter &#x3D; 17, Invoice &#x3D; 18, Visa &#x3D; 19, AgeIdentificationCard &#x3D; 20, MedicareCard &#x3D; 21, MilitaryIdentificationCard &#x3D; 22, UtilityLetter &#x3D; 23, CouncilDocument &#x3D; 24, JobLicence &#x3D; 25, MembershipIDCard &#x3D; 26, MilitaryIDCard &#x3D; 27, ProofOfAgeCard &#x3D; 28, TravelPermitNew &#x3D; 29, WeaponsLicence &#x3D; 30, AccountStatement &#x3D; 41, TenancyAgreement &#x3D; 42, BankDocument &#x3D; 43, BankLetterNew &#x3D; 44, BankStatementNew &#x3D; 45, BenefitLetterNew &#x3D; 46, CouncilDocumentNew &#x3D; 48, CouncilLetter &#x3D; 49, CouncilTaxNew &#x3D; 50, DWPDocument &#x3D; 51, HMRCDocument &#x3D; 52, InformationSheet &#x3D; 53, InsuranceDocument &#x3D; 54, InsuranceLetter &#x3D; 55, InvoiceNew &#x3D; 56, NICLetter &#x3D; 57, NINOLetter &#x3D; 58, OfficialDocument &#x3D; 59, OfficialLetter &#x3D; 60, RepaymentLetterNew &#x3D; 61, TaxLetterNew &#x3D; 62, TaxStatement &#x3D; 63, TelBill &#x3D; 64, TelLetter &#x3D; 65, TelecommunicationDocument &#x3D; 66, TVLicence &#x3D; 67, UniversityLetter &#x3D; 68, UtilityBillNew &#x3D; 69, UtilityDocument &#x3D; 70, UtilityLetterNew &#x3D; 71, WaterBill &#x3D; 72, WaterDocument &#x3D; 73, HighRiskWorkLicenceNew &#x3D; 74, PhotoCardNew &#x3D; 75, MedicareCardNew &#x3D; 76, Certificate &#x3D; 77
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77);

    private Integer value;

    DocumentTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(Integer value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_FACIAL_MATCH = "facialMatch";
  @SerializedName(SERIALIZED_NAME_FACIAL_MATCH)
  private Boolean facialMatch;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_REG_CODE = "regCode";
  @SerializedName(SERIALIZED_NAME_REG_CODE)
  private String regCode;

  public CredasApiModelsImagesAddIdDocumentImageResponse() {
  }

  public CredasApiModelsImagesAddIdDocumentImageResponse documentStatus(DocumentStatusEnum documentStatus) {
    this.documentStatus = documentStatus;
    return this;
  }

  /**
   * Active &#x3D; 1, Deleted &#x3D; 2, UnderReview &#x3D; 3
   * @return documentStatus
   */
  @javax.annotation.Nonnull
  public DocumentStatusEnum getDocumentStatus() {
    return documentStatus;
  }

  public void setDocumentStatus(DocumentStatusEnum documentStatus) {
    this.documentStatus = documentStatus;
  }


  public CredasApiModelsImagesAddIdDocumentImageResponse documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Unknown &#x3D; 0, Passport &#x3D; 1, DrivingLicense &#x3D; 2, IdentificationCard &#x3D; 3, TaxLetter &#x3D; 4, NIC_Letter &#x3D; 5, TV_Licence &#x3D; 6, UtilityBill &#x3D; 7, HighRiskWorkLicence &#x3D; 8, TravelPermit &#x3D; 9, BankLetter &#x3D; 10, BenefitLetter &#x3D; 11, BankStatement &#x3D; 12, NINO_Letter &#x3D; 13, CouncilTax &#x3D; 14, ResidentPermit &#x3D; 15, PhotoCard &#x3D; 16, RepaymentLetter &#x3D; 17, Invoice &#x3D; 18, Visa &#x3D; 19, AgeIdentificationCard &#x3D; 20, MedicareCard &#x3D; 21, MilitaryIdentificationCard &#x3D; 22, UtilityLetter &#x3D; 23, CouncilDocument &#x3D; 24, JobLicence &#x3D; 25, MembershipIDCard &#x3D; 26, MilitaryIDCard &#x3D; 27, ProofOfAgeCard &#x3D; 28, TravelPermitNew &#x3D; 29, WeaponsLicence &#x3D; 30, AccountStatement &#x3D; 41, TenancyAgreement &#x3D; 42, BankDocument &#x3D; 43, BankLetterNew &#x3D; 44, BankStatementNew &#x3D; 45, BenefitLetterNew &#x3D; 46, CouncilDocumentNew &#x3D; 48, CouncilLetter &#x3D; 49, CouncilTaxNew &#x3D; 50, DWPDocument &#x3D; 51, HMRCDocument &#x3D; 52, InformationSheet &#x3D; 53, InsuranceDocument &#x3D; 54, InsuranceLetter &#x3D; 55, InvoiceNew &#x3D; 56, NICLetter &#x3D; 57, NINOLetter &#x3D; 58, OfficialDocument &#x3D; 59, OfficialLetter &#x3D; 60, RepaymentLetterNew &#x3D; 61, TaxLetterNew &#x3D; 62, TaxStatement &#x3D; 63, TelBill &#x3D; 64, TelLetter &#x3D; 65, TelecommunicationDocument &#x3D; 66, TVLicence &#x3D; 67, UniversityLetter &#x3D; 68, UtilityBillNew &#x3D; 69, UtilityDocument &#x3D; 70, UtilityLetterNew &#x3D; 71, WaterBill &#x3D; 72, WaterDocument &#x3D; 73, HighRiskWorkLicenceNew &#x3D; 74, PhotoCardNew &#x3D; 75, MedicareCardNew &#x3D; 76, Certificate &#x3D; 77
   * @return documentType
   */
  @javax.annotation.Nonnull
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public CredasApiModelsImagesAddIdDocumentImageResponse facialMatch(Boolean facialMatch) {
    this.facialMatch = facialMatch;
    return this;
  }

  /**
   * Get facialMatch
   * @return facialMatch
   */
  @javax.annotation.Nonnull
  public Boolean getFacialMatch() {
    return facialMatch;
  }

  public void setFacialMatch(Boolean facialMatch) {
    this.facialMatch = facialMatch;
  }


  public CredasApiModelsImagesAddIdDocumentImageResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public CredasApiModelsImagesAddIdDocumentImageResponse regCode(String regCode) {
    this.regCode = regCode;
    return this;
  }

  /**
   * Get regCode
   * @return regCode
   */
  @javax.annotation.Nonnull
  public String getRegCode() {
    return regCode;
  }

  public void setRegCode(String regCode) {
    this.regCode = regCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsImagesAddIdDocumentImageResponse credasApiModelsImagesAddIdDocumentImageResponse = (CredasApiModelsImagesAddIdDocumentImageResponse) o;
    return Objects.equals(this.documentStatus, credasApiModelsImagesAddIdDocumentImageResponse.documentStatus) &&
        Objects.equals(this.documentType, credasApiModelsImagesAddIdDocumentImageResponse.documentType) &&
        Objects.equals(this.facialMatch, credasApiModelsImagesAddIdDocumentImageResponse.facialMatch) &&
        Objects.equals(this.id, credasApiModelsImagesAddIdDocumentImageResponse.id) &&
        Objects.equals(this.regCode, credasApiModelsImagesAddIdDocumentImageResponse.regCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentStatus, documentType, facialMatch, id, regCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsImagesAddIdDocumentImageResponse {\n");
    sb.append("    documentStatus: ").append(toIndentedString(documentStatus)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    facialMatch: ").append(toIndentedString(facialMatch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    regCode: ").append(toIndentedString(regCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentStatus");
    openapiFields.add("documentType");
    openapiFields.add("facialMatch");
    openapiFields.add("id");
    openapiFields.add("regCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentStatus");
    openapiRequiredFields.add("documentType");
    openapiRequiredFields.add("facialMatch");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("regCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsImagesAddIdDocumentImageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsImagesAddIdDocumentImageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsImagesAddIdDocumentImageResponse is not found in the empty JSON string", CredasApiModelsImagesAddIdDocumentImageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsImagesAddIdDocumentImageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsImagesAddIdDocumentImageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredasApiModelsImagesAddIdDocumentImageResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `documentStatus`
      DocumentStatusEnum.validateJsonElement(jsonObj.get("documentStatus"));
      // validate the required field `documentType`
      DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("regCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsImagesAddIdDocumentImageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsImagesAddIdDocumentImageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsImagesAddIdDocumentImageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsImagesAddIdDocumentImageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsImagesAddIdDocumentImageResponse>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsImagesAddIdDocumentImageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsImagesAddIdDocumentImageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsImagesAddIdDocumentImageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsImagesAddIdDocumentImageResponse
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsImagesAddIdDocumentImageResponse
   */
  public static CredasApiModelsImagesAddIdDocumentImageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsImagesAddIdDocumentImageResponse.class);
  }

  /**
   * Convert an instance of CredasApiModelsImagesAddIdDocumentImageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

