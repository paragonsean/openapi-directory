/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsRegistrationsIdDocumentSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsRegistrationsIdDocumentSummary {
  public static final String SERIALIZED_NAME_ADDRESS_CITY = "addressCity";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_FULL = "addressFull";
  @SerializedName(SERIALIZED_NAME_ADDRESS_FULL)
  private String addressFull;

  public static final String SERIALIZED_NAME_ADDRESS_POSTCODE = "addressPostcode";
  @SerializedName(SERIALIZED_NAME_ADDRESS_POSTCODE)
  private String addressPostcode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private OffsetDateTime dateOfBirth;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Unknown &#x3D; 0, Passed &#x3D; 1, Refer &#x3D; 2, Expired &#x3D; 3, NotSupported &#x3D; 4, Undefined &#x3D; 5, Fail &#x3D; 10, NotPerformed &#x3D; 11
   */
  @JsonAdapter(DocumentAnalysisResultEnum.Adapter.class)
  public enum DocumentAnalysisResultEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_10(10),
    
    NUMBER_11(11);

    private Integer value;

    DocumentAnalysisResultEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentAnalysisResultEnum fromValue(Integer value) {
      for (DocumentAnalysisResultEnum b : DocumentAnalysisResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentAnalysisResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentAnalysisResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentAnalysisResultEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DocumentAnalysisResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DocumentAnalysisResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_ANALYSIS_RESULT = "documentAnalysisResult";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ANALYSIS_RESULT)
  private DocumentAnalysisResultEnum documentAnalysisResult;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  /**
   * Front &#x3D; 1, Back &#x3D; 2
   */
  @JsonAdapter(DocumentSideEnum.Adapter.class)
  public enum DocumentSideEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    DocumentSideEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentSideEnum fromValue(Integer value) {
      for (DocumentSideEnum b : DocumentSideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentSideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentSideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentSideEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DocumentSideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DocumentSideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_SIDE = "documentSide";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SIDE)
  private DocumentSideEnum documentSide;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private OffsetDateTime expiryDate;

  public static final String SERIALIZED_NAME_FACIAL_MATCH = "facialMatch";
  @SerializedName(SERIALIZED_NAME_FACIAL_MATCH)
  private Boolean facialMatch;

  public static final String SERIALIZED_NAME_FORENAME = "forename";
  @SerializedName(SERIALIZED_NAME_FORENAME)
  private String forename;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_UNDER_REVIEW = "isUnderReview";
  @SerializedName(SERIALIZED_NAME_IS_UNDER_REVIEW)
  private Boolean isUnderReview;

  public static final String SERIALIZED_NAME_MANUALLY_VERIFIED = "manuallyVerified";
  @SerializedName(SERIALIZED_NAME_MANUALLY_VERIFIED)
  private Boolean manuallyVerified;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_MRZ1 = "mrz1";
  @SerializedName(SERIALIZED_NAME_MRZ1)
  private String mrz1;

  public static final String SERIALIZED_NAME_MRZ2 = "mrz2";
  @SerializedName(SERIALIZED_NAME_MRZ2)
  private String mrz2;

  public static final String SERIALIZED_NAME_MRZ3 = "mrz3";
  @SerializedName(SERIALIZED_NAME_MRZ3)
  private String mrz3;

  public static final String SERIALIZED_NAME_NAME_CHECK = "nameCheck";
  @SerializedName(SERIALIZED_NAME_NAME_CHECK)
  private Boolean nameCheck;

  /**
   * Unknown &#x3D; 0, Automatic &#x3D; 1, Manual &#x3D; 2
   */
  @JsonAdapter(NameCheckMethodEnum.Adapter.class)
  public enum NameCheckMethodEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    NameCheckMethodEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameCheckMethodEnum fromValue(Integer value) {
      for (NameCheckMethodEnum b : NameCheckMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameCheckMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameCheckMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameCheckMethodEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return NameCheckMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      NameCheckMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_CHECK_METHOD = "nameCheckMethod";
  @SerializedName(SERIALIZED_NAME_NAME_CHECK_METHOD)
  private NameCheckMethodEnum nameCheckMethod;

  public static final String SERIALIZED_NAME_NFC_CHECK = "nfcCheck";
  @SerializedName(SERIALIZED_NAME_NFC_CHECK)
  private Boolean nfcCheck;

  /**
   * Unknown &#x3D; 0, Passed &#x3D; 1, Failed &#x3D; 2, NotAttempted &#x3D; 3, Skipped &#x3D; 4, Unavailable &#x3D; 5, NotAllowed &#x3D; 6, NotTrusted &#x3D; 7, NotApplicable &#x3D; 8, Expired &#x3D; 9, UnavailableWebJourney &#x3D; 10
   */
  @JsonAdapter(NfcReadStatusEnum.Adapter.class)
  public enum NfcReadStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10);

    private Integer value;

    NfcReadStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NfcReadStatusEnum fromValue(Integer value) {
      for (NfcReadStatusEnum b : NfcReadStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NfcReadStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NfcReadStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NfcReadStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return NfcReadStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      NfcReadStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NFC_READ_STATUS = "nfcReadStatus";
  @SerializedName(SERIALIZED_NAME_NFC_READ_STATUS)
  private NfcReadStatusEnum nfcReadStatus;

  public static final String SERIALIZED_NAME_PRIMARY_SCAN_ID = "primaryScanId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SCAN_ID)
  private UUID primaryScanId;

  /**
   * Indicates the verification status of the document itself by combining visual analysis and NFC verification results. &lt;/br&gt;Note that this may be a pass even if facial or name matches have failed.&lt;br /&gt;  values&#x3D;&gt; Unknown &#x3D; 0, Pass &#x3D; 1, Refer &#x3D; 2, Fail &#x3D; 3
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public CredasApiModelsRegistrationsIdDocumentSummary() {
  }

  public CredasApiModelsRegistrationsIdDocumentSummary addressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  /**
   * Get addressCity
   * @return addressCity
   */
  @javax.annotation.Nullable
  public String getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary addressFull(String addressFull) {
    this.addressFull = addressFull;
    return this;
  }

  /**
   * Get addressFull
   * @return addressFull
   */
  @javax.annotation.Nullable
  public String getAddressFull() {
    return addressFull;
  }

  public void setAddressFull(String addressFull) {
    this.addressFull = addressFull;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary addressPostcode(String addressPostcode) {
    this.addressPostcode = addressPostcode;
    return this;
  }

  /**
   * Get addressPostcode
   * @return addressPostcode
   */
  @javax.annotation.Nullable
  public String getAddressPostcode() {
    return addressPostcode;
  }

  public void setAddressPostcode(String addressPostcode) {
    this.addressPostcode = addressPostcode;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary dateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(OffsetDateTime dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary documentAnalysisResult(DocumentAnalysisResultEnum documentAnalysisResult) {
    this.documentAnalysisResult = documentAnalysisResult;
    return this;
  }

  /**
   * Unknown &#x3D; 0, Passed &#x3D; 1, Refer &#x3D; 2, Expired &#x3D; 3, NotSupported &#x3D; 4, Undefined &#x3D; 5, Fail &#x3D; 10, NotPerformed &#x3D; 11
   * @return documentAnalysisResult
   */
  @javax.annotation.Nullable
  public DocumentAnalysisResultEnum getDocumentAnalysisResult() {
    return documentAnalysisResult;
  }

  public void setDocumentAnalysisResult(DocumentAnalysisResultEnum documentAnalysisResult) {
    this.documentAnalysisResult = documentAnalysisResult;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Get documentNumber
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary documentSide(DocumentSideEnum documentSide) {
    this.documentSide = documentSide;
    return this;
  }

  /**
   * Front &#x3D; 1, Back &#x3D; 2
   * @return documentSide
   */
  @javax.annotation.Nullable
  public DocumentSideEnum getDocumentSide() {
    return documentSide;
  }

  public void setDocumentSide(DocumentSideEnum documentSide) {
    this.documentSide = documentSide;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary expiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Get expiryDate
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary facialMatch(Boolean facialMatch) {
    this.facialMatch = facialMatch;
    return this;
  }

  /**
   * Get facialMatch
   * @return facialMatch
   */
  @javax.annotation.Nonnull
  public Boolean getFacialMatch() {
    return facialMatch;
  }

  public void setFacialMatch(Boolean facialMatch) {
    this.facialMatch = facialMatch;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary forename(String forename) {
    this.forename = forename;
    return this;
  }

  /**
   * Get forename
   * @return forename
   */
  @javax.annotation.Nullable
  public String getForename() {
    return forename;
  }

  public void setForename(String forename) {
    this.forename = forename;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary isUnderReview(Boolean isUnderReview) {
    this.isUnderReview = isUnderReview;
    return this;
  }

  /**
   * Get isUnderReview
   * @return isUnderReview
   */
  @javax.annotation.Nullable
  public Boolean getIsUnderReview() {
    return isUnderReview;
  }

  public void setIsUnderReview(Boolean isUnderReview) {
    this.isUnderReview = isUnderReview;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary manuallyVerified(Boolean manuallyVerified) {
    this.manuallyVerified = manuallyVerified;
    return this;
  }

  /**
   * Get manuallyVerified
   * @return manuallyVerified
   */
  @javax.annotation.Nullable
  public Boolean getManuallyVerified() {
    return manuallyVerified;
  }

  public void setManuallyVerified(Boolean manuallyVerified) {
    this.manuallyVerified = manuallyVerified;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary mrz1(String mrz1) {
    this.mrz1 = mrz1;
    return this;
  }

  /**
   * Get mrz1
   * @return mrz1
   */
  @javax.annotation.Nullable
  public String getMrz1() {
    return mrz1;
  }

  public void setMrz1(String mrz1) {
    this.mrz1 = mrz1;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary mrz2(String mrz2) {
    this.mrz2 = mrz2;
    return this;
  }

  /**
   * Get mrz2
   * @return mrz2
   */
  @javax.annotation.Nullable
  public String getMrz2() {
    return mrz2;
  }

  public void setMrz2(String mrz2) {
    this.mrz2 = mrz2;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary mrz3(String mrz3) {
    this.mrz3 = mrz3;
    return this;
  }

  /**
   * Get mrz3
   * @return mrz3
   */
  @javax.annotation.Nullable
  public String getMrz3() {
    return mrz3;
  }

  public void setMrz3(String mrz3) {
    this.mrz3 = mrz3;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary nameCheck(Boolean nameCheck) {
    this.nameCheck = nameCheck;
    return this;
  }

  /**
   * Get nameCheck
   * @return nameCheck
   */
  @javax.annotation.Nonnull
  public Boolean getNameCheck() {
    return nameCheck;
  }

  public void setNameCheck(Boolean nameCheck) {
    this.nameCheck = nameCheck;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary nameCheckMethod(NameCheckMethodEnum nameCheckMethod) {
    this.nameCheckMethod = nameCheckMethod;
    return this;
  }

  /**
   * Unknown &#x3D; 0, Automatic &#x3D; 1, Manual &#x3D; 2
   * @return nameCheckMethod
   */
  @javax.annotation.Nonnull
  public NameCheckMethodEnum getNameCheckMethod() {
    return nameCheckMethod;
  }

  public void setNameCheckMethod(NameCheckMethodEnum nameCheckMethod) {
    this.nameCheckMethod = nameCheckMethod;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary nfcCheck(Boolean nfcCheck) {
    this.nfcCheck = nfcCheck;
    return this;
  }

  /**
   * Get nfcCheck
   * @return nfcCheck
   */
  @javax.annotation.Nonnull
  public Boolean getNfcCheck() {
    return nfcCheck;
  }

  public void setNfcCheck(Boolean nfcCheck) {
    this.nfcCheck = nfcCheck;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary nfcReadStatus(NfcReadStatusEnum nfcReadStatus) {
    this.nfcReadStatus = nfcReadStatus;
    return this;
  }

  /**
   * Unknown &#x3D; 0, Passed &#x3D; 1, Failed &#x3D; 2, NotAttempted &#x3D; 3, Skipped &#x3D; 4, Unavailable &#x3D; 5, NotAllowed &#x3D; 6, NotTrusted &#x3D; 7, NotApplicable &#x3D; 8, Expired &#x3D; 9, UnavailableWebJourney &#x3D; 10
   * @return nfcReadStatus
   */
  @javax.annotation.Nonnull
  public NfcReadStatusEnum getNfcReadStatus() {
    return nfcReadStatus;
  }

  public void setNfcReadStatus(NfcReadStatusEnum nfcReadStatus) {
    this.nfcReadStatus = nfcReadStatus;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary primaryScanId(UUID primaryScanId) {
    this.primaryScanId = primaryScanId;
    return this;
  }

  /**
   * Get primaryScanId
   * @return primaryScanId
   */
  @javax.annotation.Nullable
  public UUID getPrimaryScanId() {
    return primaryScanId;
  }

  public void setPrimaryScanId(UUID primaryScanId) {
    this.primaryScanId = primaryScanId;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Indicates the verification status of the document itself by combining visual analysis and NFC verification results. &lt;/br&gt;Note that this may be a pass even if facial or name matches have failed.&lt;br /&gt;  values&#x3D;&gt; Unknown &#x3D; 0, Pass &#x3D; 1, Refer &#x3D; 2, Fail &#x3D; 3
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CredasApiModelsRegistrationsIdDocumentSummary surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nullable
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsRegistrationsIdDocumentSummary credasApiModelsRegistrationsIdDocumentSummary = (CredasApiModelsRegistrationsIdDocumentSummary) o;
    return Objects.equals(this.addressCity, credasApiModelsRegistrationsIdDocumentSummary.addressCity) &&
        Objects.equals(this.addressFull, credasApiModelsRegistrationsIdDocumentSummary.addressFull) &&
        Objects.equals(this.addressPostcode, credasApiModelsRegistrationsIdDocumentSummary.addressPostcode) &&
        Objects.equals(this.country, credasApiModelsRegistrationsIdDocumentSummary.country) &&
        Objects.equals(this.countryCode, credasApiModelsRegistrationsIdDocumentSummary.countryCode) &&
        Objects.equals(this.dateCreated, credasApiModelsRegistrationsIdDocumentSummary.dateCreated) &&
        Objects.equals(this.dateOfBirth, credasApiModelsRegistrationsIdDocumentSummary.dateOfBirth) &&
        Objects.equals(this.description, credasApiModelsRegistrationsIdDocumentSummary.description) &&
        Objects.equals(this.documentAnalysisResult, credasApiModelsRegistrationsIdDocumentSummary.documentAnalysisResult) &&
        Objects.equals(this.documentNumber, credasApiModelsRegistrationsIdDocumentSummary.documentNumber) &&
        Objects.equals(this.documentSide, credasApiModelsRegistrationsIdDocumentSummary.documentSide) &&
        Objects.equals(this.expiryDate, credasApiModelsRegistrationsIdDocumentSummary.expiryDate) &&
        Objects.equals(this.facialMatch, credasApiModelsRegistrationsIdDocumentSummary.facialMatch) &&
        Objects.equals(this.forename, credasApiModelsRegistrationsIdDocumentSummary.forename) &&
        Objects.equals(this.fullName, credasApiModelsRegistrationsIdDocumentSummary.fullName) &&
        Objects.equals(this.id, credasApiModelsRegistrationsIdDocumentSummary.id) &&
        Objects.equals(this.isUnderReview, credasApiModelsRegistrationsIdDocumentSummary.isUnderReview) &&
        Objects.equals(this.manuallyVerified, credasApiModelsRegistrationsIdDocumentSummary.manuallyVerified) &&
        Objects.equals(this.middleName, credasApiModelsRegistrationsIdDocumentSummary.middleName) &&
        Objects.equals(this.mrz1, credasApiModelsRegistrationsIdDocumentSummary.mrz1) &&
        Objects.equals(this.mrz2, credasApiModelsRegistrationsIdDocumentSummary.mrz2) &&
        Objects.equals(this.mrz3, credasApiModelsRegistrationsIdDocumentSummary.mrz3) &&
        Objects.equals(this.nameCheck, credasApiModelsRegistrationsIdDocumentSummary.nameCheck) &&
        Objects.equals(this.nameCheckMethod, credasApiModelsRegistrationsIdDocumentSummary.nameCheckMethod) &&
        Objects.equals(this.nfcCheck, credasApiModelsRegistrationsIdDocumentSummary.nfcCheck) &&
        Objects.equals(this.nfcReadStatus, credasApiModelsRegistrationsIdDocumentSummary.nfcReadStatus) &&
        Objects.equals(this.primaryScanId, credasApiModelsRegistrationsIdDocumentSummary.primaryScanId) &&
        Objects.equals(this.status, credasApiModelsRegistrationsIdDocumentSummary.status) &&
        Objects.equals(this.surname, credasApiModelsRegistrationsIdDocumentSummary.surname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressCity, addressFull, addressPostcode, country, countryCode, dateCreated, dateOfBirth, description, documentAnalysisResult, documentNumber, documentSide, expiryDate, facialMatch, forename, fullName, id, isUnderReview, manuallyVerified, middleName, mrz1, mrz2, mrz3, nameCheck, nameCheckMethod, nfcCheck, nfcReadStatus, primaryScanId, status, surname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsRegistrationsIdDocumentSummary {\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressFull: ").append(toIndentedString(addressFull)).append("\n");
    sb.append("    addressPostcode: ").append(toIndentedString(addressPostcode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentAnalysisResult: ").append(toIndentedString(documentAnalysisResult)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    documentSide: ").append(toIndentedString(documentSide)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    facialMatch: ").append(toIndentedString(facialMatch)).append("\n");
    sb.append("    forename: ").append(toIndentedString(forename)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isUnderReview: ").append(toIndentedString(isUnderReview)).append("\n");
    sb.append("    manuallyVerified: ").append(toIndentedString(manuallyVerified)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    mrz1: ").append(toIndentedString(mrz1)).append("\n");
    sb.append("    mrz2: ").append(toIndentedString(mrz2)).append("\n");
    sb.append("    mrz3: ").append(toIndentedString(mrz3)).append("\n");
    sb.append("    nameCheck: ").append(toIndentedString(nameCheck)).append("\n");
    sb.append("    nameCheckMethod: ").append(toIndentedString(nameCheckMethod)).append("\n");
    sb.append("    nfcCheck: ").append(toIndentedString(nfcCheck)).append("\n");
    sb.append("    nfcReadStatus: ").append(toIndentedString(nfcReadStatus)).append("\n");
    sb.append("    primaryScanId: ").append(toIndentedString(primaryScanId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressCity");
    openapiFields.add("addressFull");
    openapiFields.add("addressPostcode");
    openapiFields.add("country");
    openapiFields.add("countryCode");
    openapiFields.add("dateCreated");
    openapiFields.add("dateOfBirth");
    openapiFields.add("description");
    openapiFields.add("documentAnalysisResult");
    openapiFields.add("documentNumber");
    openapiFields.add("documentSide");
    openapiFields.add("expiryDate");
    openapiFields.add("facialMatch");
    openapiFields.add("forename");
    openapiFields.add("fullName");
    openapiFields.add("id");
    openapiFields.add("isUnderReview");
    openapiFields.add("manuallyVerified");
    openapiFields.add("middleName");
    openapiFields.add("mrz1");
    openapiFields.add("mrz2");
    openapiFields.add("mrz3");
    openapiFields.add("nameCheck");
    openapiFields.add("nameCheckMethod");
    openapiFields.add("nfcCheck");
    openapiFields.add("nfcReadStatus");
    openapiFields.add("primaryScanId");
    openapiFields.add("status");
    openapiFields.add("surname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("facialMatch");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("nameCheck");
    openapiRequiredFields.add("nameCheckMethod");
    openapiRequiredFields.add("nfcCheck");
    openapiRequiredFields.add("nfcReadStatus");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsRegistrationsIdDocumentSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsRegistrationsIdDocumentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsRegistrationsIdDocumentSummary is not found in the empty JSON string", CredasApiModelsRegistrationsIdDocumentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsRegistrationsIdDocumentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsRegistrationsIdDocumentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredasApiModelsRegistrationsIdDocumentSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressCity") != null && !jsonObj.get("addressCity").isJsonNull()) && !jsonObj.get("addressCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressCity").toString()));
      }
      if ((jsonObj.get("addressFull") != null && !jsonObj.get("addressFull").isJsonNull()) && !jsonObj.get("addressFull").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressFull` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressFull").toString()));
      }
      if ((jsonObj.get("addressPostcode") != null && !jsonObj.get("addressPostcode").isJsonNull()) && !jsonObj.get("addressPostcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPostcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPostcode").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `documentAnalysisResult`
      if (jsonObj.get("documentAnalysisResult") != null && !jsonObj.get("documentAnalysisResult").isJsonNull()) {
        DocumentAnalysisResultEnum.validateJsonElement(jsonObj.get("documentAnalysisResult"));
      }
      if ((jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      // validate the optional field `documentSide`
      if (jsonObj.get("documentSide") != null && !jsonObj.get("documentSide").isJsonNull()) {
        DocumentSideEnum.validateJsonElement(jsonObj.get("documentSide"));
      }
      if ((jsonObj.get("forename") != null && !jsonObj.get("forename").isJsonNull()) && !jsonObj.get("forename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forename").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("mrz1") != null && !jsonObj.get("mrz1").isJsonNull()) && !jsonObj.get("mrz1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mrz1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mrz1").toString()));
      }
      if ((jsonObj.get("mrz2") != null && !jsonObj.get("mrz2").isJsonNull()) && !jsonObj.get("mrz2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mrz2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mrz2").toString()));
      }
      if ((jsonObj.get("mrz3") != null && !jsonObj.get("mrz3").isJsonNull()) && !jsonObj.get("mrz3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mrz3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mrz3").toString()));
      }
      // validate the required field `nameCheckMethod`
      NameCheckMethodEnum.validateJsonElement(jsonObj.get("nameCheckMethod"));
      // validate the required field `nfcReadStatus`
      NfcReadStatusEnum.validateJsonElement(jsonObj.get("nfcReadStatus"));
      if ((jsonObj.get("primaryScanId") != null && !jsonObj.get("primaryScanId").isJsonNull()) && !jsonObj.get("primaryScanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryScanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryScanId").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsRegistrationsIdDocumentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsRegistrationsIdDocumentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsRegistrationsIdDocumentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsRegistrationsIdDocumentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsRegistrationsIdDocumentSummary>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsRegistrationsIdDocumentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsRegistrationsIdDocumentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsRegistrationsIdDocumentSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsRegistrationsIdDocumentSummary
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsRegistrationsIdDocumentSummary
   */
  public static CredasApiModelsRegistrationsIdDocumentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsRegistrationsIdDocumentSummary.class);
  }

  /**
   * Convert an instance of CredasApiModelsRegistrationsIdDocumentSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

