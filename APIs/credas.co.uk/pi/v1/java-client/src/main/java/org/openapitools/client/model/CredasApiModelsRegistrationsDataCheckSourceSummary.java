/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CredasApiModelsDataCheckAddress;
import org.openapitools.client.model.CredasApiModelsDataCheckCheckRemark;
import org.openapitools.client.model.CredasApiModelsDataCheckPepSanctionsPepSanctionItem;
import org.openapitools.client.model.CredasApiModelsDataCheckPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsRegistrationsDataCheckSourceSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsRegistrationsDataCheckSourceSummary {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private CredasApiModelsDataCheckAddress address;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_HAS_BEEN_OVERRIDDEN = "hasBeenOverridden";
  @SerializedName(SERIALIZED_NAME_HAS_BEEN_OVERRIDDEN)
  private Boolean hasBeenOverridden;

  public static final String SERIALIZED_NAME_HAS_PEP_SANCTIONS_DATA = "hasPepSanctionsData";
  @SerializedName(SERIALIZED_NAME_HAS_PEP_SANCTIONS_DATA)
  private Boolean hasPepSanctionsData;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PEP_SANCTIONS_DATA = "pepSanctionsData";
  @SerializedName(SERIALIZED_NAME_PEP_SANCTIONS_DATA)
  private List<CredasApiModelsDataCheckPepSanctionsPepSanctionItem> pepSanctionsData = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private CredasApiModelsDataCheckPerson person;

  public static final String SERIALIZED_NAME_REMARKS = "remarks";
  @SerializedName(SERIALIZED_NAME_REMARKS)
  private List<CredasApiModelsDataCheckCheckRemark> remarks = new ArrayList<>();

  /**
   * Unknown &#x3D; 0, EditedElectoralRollUk &#x3D; 1, LandlineAppendUk &#x3D; 2, MortalityUk &#x3D; 3, CreaditHeaderAmlUk &#x3D; 4, NcoaAlertFlagUk &#x3D; 5, NcoaAlertFullUk &#x3D; 6, SanctionsEnhancedInternational &#x3D; 7, PepEnhancedInternational &#x3D; 8, NationalIdentityRegisterUk &#x3D; 9, LandRegistry &#x3D; 10
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10);

    private Integer value;

    SourceTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(Integer value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  /**
   * Unknown &#x3D; 0, Pass &#x3D; 1, Refer &#x3D; 2, Fail &#x3D; 3
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public CredasApiModelsRegistrationsDataCheckSourceSummary() {
  }

  public CredasApiModelsRegistrationsDataCheckSourceSummary(
     Boolean hasPepSanctionsData
  ) {
    this();
    this.hasPepSanctionsData = hasPepSanctionsData;
  }

  public CredasApiModelsRegistrationsDataCheckSourceSummary address(CredasApiModelsDataCheckAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public CredasApiModelsDataCheckAddress getAddress() {
    return address;
  }

  public void setAddress(CredasApiModelsDataCheckAddress address) {
    this.address = address;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary hasBeenOverridden(Boolean hasBeenOverridden) {
    this.hasBeenOverridden = hasBeenOverridden;
    return this;
  }

  /**
   * Get hasBeenOverridden
   * @return hasBeenOverridden
   */
  @javax.annotation.Nullable
  public Boolean getHasBeenOverridden() {
    return hasBeenOverridden;
  }

  public void setHasBeenOverridden(Boolean hasBeenOverridden) {
    this.hasBeenOverridden = hasBeenOverridden;
  }


  /**
   * Get hasPepSanctionsData
   * @return hasPepSanctionsData
   */
  @javax.annotation.Nullable
  public Boolean getHasPepSanctionsData() {
    return hasPepSanctionsData;
  }



  public CredasApiModelsRegistrationsDataCheckSourceSummary label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary pepSanctionsData(List<CredasApiModelsDataCheckPepSanctionsPepSanctionItem> pepSanctionsData) {
    this.pepSanctionsData = pepSanctionsData;
    return this;
  }

  public CredasApiModelsRegistrationsDataCheckSourceSummary addPepSanctionsDataItem(CredasApiModelsDataCheckPepSanctionsPepSanctionItem pepSanctionsDataItem) {
    if (this.pepSanctionsData == null) {
      this.pepSanctionsData = new ArrayList<>();
    }
    this.pepSanctionsData.add(pepSanctionsDataItem);
    return this;
  }

  /**
   * Get pepSanctionsData
   * @return pepSanctionsData
   */
  @javax.annotation.Nullable
  public List<CredasApiModelsDataCheckPepSanctionsPepSanctionItem> getPepSanctionsData() {
    return pepSanctionsData;
  }

  public void setPepSanctionsData(List<CredasApiModelsDataCheckPepSanctionsPepSanctionItem> pepSanctionsData) {
    this.pepSanctionsData = pepSanctionsData;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary person(CredasApiModelsDataCheckPerson person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nullable
  public CredasApiModelsDataCheckPerson getPerson() {
    return person;
  }

  public void setPerson(CredasApiModelsDataCheckPerson person) {
    this.person = person;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary remarks(List<CredasApiModelsDataCheckCheckRemark> remarks) {
    this.remarks = remarks;
    return this;
  }

  public CredasApiModelsRegistrationsDataCheckSourceSummary addRemarksItem(CredasApiModelsDataCheckCheckRemark remarksItem) {
    if (this.remarks == null) {
      this.remarks = new ArrayList<>();
    }
    this.remarks.add(remarksItem);
    return this;
  }

  /**
   * Get remarks
   * @return remarks
   */
  @javax.annotation.Nullable
  public List<CredasApiModelsDataCheckCheckRemark> getRemarks() {
    return remarks;
  }

  public void setRemarks(List<CredasApiModelsDataCheckCheckRemark> remarks) {
    this.remarks = remarks;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Unknown &#x3D; 0, EditedElectoralRollUk &#x3D; 1, LandlineAppendUk &#x3D; 2, MortalityUk &#x3D; 3, CreaditHeaderAmlUk &#x3D; 4, NcoaAlertFlagUk &#x3D; 5, NcoaAlertFullUk &#x3D; 6, SanctionsEnhancedInternational &#x3D; 7, PepEnhancedInternational &#x3D; 8, NationalIdentityRegisterUk &#x3D; 9, LandRegistry &#x3D; 10
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public CredasApiModelsRegistrationsDataCheckSourceSummary status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Unknown &#x3D; 0, Pass &#x3D; 1, Refer &#x3D; 2, Fail &#x3D; 3
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsRegistrationsDataCheckSourceSummary credasApiModelsRegistrationsDataCheckSourceSummary = (CredasApiModelsRegistrationsDataCheckSourceSummary) o;
    return Objects.equals(this.address, credasApiModelsRegistrationsDataCheckSourceSummary.address) &&
        Objects.equals(this.dateCreated, credasApiModelsRegistrationsDataCheckSourceSummary.dateCreated) &&
        Objects.equals(this.hasBeenOverridden, credasApiModelsRegistrationsDataCheckSourceSummary.hasBeenOverridden) &&
        Objects.equals(this.hasPepSanctionsData, credasApiModelsRegistrationsDataCheckSourceSummary.hasPepSanctionsData) &&
        Objects.equals(this.label, credasApiModelsRegistrationsDataCheckSourceSummary.label) &&
        Objects.equals(this.pepSanctionsData, credasApiModelsRegistrationsDataCheckSourceSummary.pepSanctionsData) &&
        Objects.equals(this.person, credasApiModelsRegistrationsDataCheckSourceSummary.person) &&
        Objects.equals(this.remarks, credasApiModelsRegistrationsDataCheckSourceSummary.remarks) &&
        Objects.equals(this.sourceType, credasApiModelsRegistrationsDataCheckSourceSummary.sourceType) &&
        Objects.equals(this.status, credasApiModelsRegistrationsDataCheckSourceSummary.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, dateCreated, hasBeenOverridden, hasPepSanctionsData, label, pepSanctionsData, person, remarks, sourceType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsRegistrationsDataCheckSourceSummary {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    hasBeenOverridden: ").append(toIndentedString(hasBeenOverridden)).append("\n");
    sb.append("    hasPepSanctionsData: ").append(toIndentedString(hasPepSanctionsData)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    pepSanctionsData: ").append(toIndentedString(pepSanctionsData)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    remarks: ").append(toIndentedString(remarks)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("dateCreated");
    openapiFields.add("hasBeenOverridden");
    openapiFields.add("hasPepSanctionsData");
    openapiFields.add("label");
    openapiFields.add("pepSanctionsData");
    openapiFields.add("person");
    openapiFields.add("remarks");
    openapiFields.add("sourceType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsRegistrationsDataCheckSourceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsRegistrationsDataCheckSourceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsRegistrationsDataCheckSourceSummary is not found in the empty JSON string", CredasApiModelsRegistrationsDataCheckSourceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsRegistrationsDataCheckSourceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsRegistrationsDataCheckSourceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        CredasApiModelsDataCheckAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (jsonObj.get("pepSanctionsData") != null && !jsonObj.get("pepSanctionsData").isJsonNull()) {
        JsonArray jsonArraypepSanctionsData = jsonObj.getAsJsonArray("pepSanctionsData");
        if (jsonArraypepSanctionsData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pepSanctionsData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pepSanctionsData` to be an array in the JSON string but got `%s`", jsonObj.get("pepSanctionsData").toString()));
          }

          // validate the optional field `pepSanctionsData` (array)
          for (int i = 0; i < jsonArraypepSanctionsData.size(); i++) {
            CredasApiModelsDataCheckPepSanctionsPepSanctionItem.validateJsonElement(jsonArraypepSanctionsData.get(i));
          };
        }
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        CredasApiModelsDataCheckPerson.validateJsonElement(jsonObj.get("person"));
      }
      if (jsonObj.get("remarks") != null && !jsonObj.get("remarks").isJsonNull()) {
        JsonArray jsonArrayremarks = jsonObj.getAsJsonArray("remarks");
        if (jsonArrayremarks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remarks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remarks` to be an array in the JSON string but got `%s`", jsonObj.get("remarks").toString()));
          }

          // validate the optional field `remarks` (array)
          for (int i = 0; i < jsonArrayremarks.size(); i++) {
            CredasApiModelsDataCheckCheckRemark.validateJsonElement(jsonArrayremarks.get(i));
          };
        }
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("sourceType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsRegistrationsDataCheckSourceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsRegistrationsDataCheckSourceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsRegistrationsDataCheckSourceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsRegistrationsDataCheckSourceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsRegistrationsDataCheckSourceSummary>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsRegistrationsDataCheckSourceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsRegistrationsDataCheckSourceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsRegistrationsDataCheckSourceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsRegistrationsDataCheckSourceSummary
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsRegistrationsDataCheckSourceSummary
   */
  public static CredasApiModelsRegistrationsDataCheckSourceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsRegistrationsDataCheckSourceSummary.class);
  }

  /**
   * Convert an instance of CredasApiModelsRegistrationsDataCheckSourceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

