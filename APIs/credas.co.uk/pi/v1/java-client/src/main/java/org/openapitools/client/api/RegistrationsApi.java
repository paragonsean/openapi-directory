/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CredasApiModelsErrorsErrorResponse;
import org.openapitools.client.model.CredasApiModelsRegistrationsAddInstantRegistrationRequest;
import org.openapitools.client.model.CredasApiModelsRegistrationsAddInstantRegistrationResponse;
import org.openapitools.client.model.CredasApiModelsRegistrationsAddRegistrationRequest;
import org.openapitools.client.model.CredasApiModelsRegistrationsAddRegistrationResponse;
import org.openapitools.client.model.CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse;
import org.openapitools.client.model.CredasApiModelsRegistrationsPagedRegistrationSummary;
import org.openapitools.client.model.CredasApiModelsRegistrationsRegistrationSettings;
import org.openapitools.client.model.CredasApiModelsRegistrationsRegistrationSummary;
import org.openapitools.client.model.CredasApiModelsRegistrationsSupportedIdDocument;
import org.openapitools.client.model.CredasApiModelsRegistrationsUpdateContactDetailsRequest;
import org.openapitools.client.model.CredasApiModelsRegistrationsUpdateRegistrationStatusRequest;
import org.openapitools.client.model.CredasApiModelsStatusOverridesOverrideCheckStatusRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addInstantRegistration
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddInstantRegistrationRequest The Credas.Api.Models.Registrations.AddInstantRegistrationRequest object containing required data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the document information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInstantRegistrationCall(String apikey, CredasApiModelsRegistrationsAddInstantRegistrationRequest credasApiModelsRegistrationsAddInstantRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsRegistrationsAddInstantRegistrationRequest;

        // create path and map variables
        String localVarPath = "/api/registrations/instant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInstantRegistrationValidateBeforeCall(String apikey, CredasApiModelsRegistrationsAddInstantRegistrationRequest credasApiModelsRegistrationsAddInstantRegistrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling addInstantRegistration(Async)");
        }

        return addInstantRegistrationCall(apikey, credasApiModelsRegistrationsAddInstantRegistrationRequest, _callback);

    }

    /**
     * Creates new registration record, adds an ID document and optional selfie image in one go.
     * It&#39;s designed to provide a quick integration path for external systems which capture these details.
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddInstantRegistrationRequest The Credas.Api.Models.Registrations.AddInstantRegistrationRequest object containing required data. (optional)
     * @return CredasApiModelsRegistrationsAddInstantRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the document information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsAddInstantRegistrationResponse addInstantRegistration(String apikey, CredasApiModelsRegistrationsAddInstantRegistrationRequest credasApiModelsRegistrationsAddInstantRegistrationRequest) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsAddInstantRegistrationResponse> localVarResp = addInstantRegistrationWithHttpInfo(apikey, credasApiModelsRegistrationsAddInstantRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new registration record, adds an ID document and optional selfie image in one go.
     * It&#39;s designed to provide a quick integration path for external systems which capture these details.
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddInstantRegistrationRequest The Credas.Api.Models.Registrations.AddInstantRegistrationRequest object containing required data. (optional)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsAddInstantRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the document information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsAddInstantRegistrationResponse> addInstantRegistrationWithHttpInfo(String apikey, CredasApiModelsRegistrationsAddInstantRegistrationRequest credasApiModelsRegistrationsAddInstantRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = addInstantRegistrationValidateBeforeCall(apikey, credasApiModelsRegistrationsAddInstantRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsAddInstantRegistrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new registration record, adds an ID document and optional selfie image in one go. (asynchronously)
     * It&#39;s designed to provide a quick integration path for external systems which capture these details.
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddInstantRegistrationRequest The Credas.Api.Models.Registrations.AddInstantRegistrationRequest object containing required data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the document information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInstantRegistrationAsync(String apikey, CredasApiModelsRegistrationsAddInstantRegistrationRequest credasApiModelsRegistrationsAddInstantRegistrationRequest, final ApiCallback<CredasApiModelsRegistrationsAddInstantRegistrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInstantRegistrationValidateBeforeCall(apikey, credasApiModelsRegistrationsAddInstantRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsAddInstantRegistrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRegistration
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddRegistrationRequest Object containing registration details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of newly added registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRegistrationCall(String apikey, CredasApiModelsRegistrationsAddRegistrationRequest credasApiModelsRegistrationsAddRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsRegistrationsAddRegistrationRequest;

        // create path and map variables
        String localVarPath = "/api/registrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRegistrationValidateBeforeCall(String apikey, CredasApiModelsRegistrationsAddRegistrationRequest credasApiModelsRegistrationsAddRegistrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling addRegistration(Async)");
        }

        return addRegistrationCall(apikey, credasApiModelsRegistrationsAddRegistrationRequest, _callback);

    }

    /**
     * Creates new registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddRegistrationRequest Object containing registration details. (optional)
     * @return CredasApiModelsRegistrationsAddRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of newly added registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsAddRegistrationResponse addRegistration(String apikey, CredasApiModelsRegistrationsAddRegistrationRequest credasApiModelsRegistrationsAddRegistrationRequest) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsAddRegistrationResponse> localVarResp = addRegistrationWithHttpInfo(apikey, credasApiModelsRegistrationsAddRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * Creates new registration.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddRegistrationRequest Object containing registration details. (optional)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsAddRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of newly added registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsAddRegistrationResponse> addRegistrationWithHttpInfo(String apikey, CredasApiModelsRegistrationsAddRegistrationRequest credasApiModelsRegistrationsAddRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = addRegistrationValidateBeforeCall(apikey, credasApiModelsRegistrationsAddRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsAddRegistrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates new registration. (asynchronously)
     * 
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsAddRegistrationRequest Object containing registration details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of newly added registration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error code meaning that the operation was aborted due to insufficient credits. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRegistrationAsync(String apikey, CredasApiModelsRegistrationsAddRegistrationRequest credasApiModelsRegistrationsAddRegistrationRequest, final ApiCallback<CredasApiModelsRegistrationsAddRegistrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRegistrationValidateBeforeCall(apikey, credasApiModelsRegistrationsAddRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsAddRegistrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRegistrationsIdPdfExportSectionsGet
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param comments  (optional)
     * @param contactDetails  (optional)
     * @param standardChecks  (optional)
     * @param pepSanctionChecks  (optional)
     * @param proofOfOwnership  (optional)
     * @param bankAccountCheck  (optional)
     * @param creditStatusCheck  (optional)
     * @param liveness  (optional)
     * @param excludeSelfie  (optional)
     * @param excludeIDDocuments  (optional)
     * @param diATFSection  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRegistrationsIdPdfExportSectionsGetCall(UUID id, String apikey, Boolean comments, Boolean contactDetails, Boolean standardChecks, Boolean pepSanctionChecks, Boolean proofOfOwnership, Boolean bankAccountCheck, Boolean creditStatusCheck, Boolean liveness, Boolean excludeSelfie, Boolean excludeIDDocuments, Boolean diATFSection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/pdf-export-sections"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (comments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Comments", comments));
        }

        if (contactDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContactDetails", contactDetails));
        }

        if (standardChecks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StandardChecks", standardChecks));
        }

        if (pepSanctionChecks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PepSanctionChecks", pepSanctionChecks));
        }

        if (proofOfOwnership != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProofOfOwnership", proofOfOwnership));
        }

        if (bankAccountCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BankAccountCheck", bankAccountCheck));
        }

        if (creditStatusCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CreditStatusCheck", creditStatusCheck));
        }

        if (liveness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Liveness", liveness));
        }

        if (excludeSelfie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeSelfie", excludeSelfie));
        }

        if (excludeIDDocuments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeIDDocuments", excludeIDDocuments));
        }

        if (diATFSection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DIATFSection", diATFSection));
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRegistrationsIdPdfExportSectionsGetValidateBeforeCall(UUID id, String apikey, Boolean comments, Boolean contactDetails, Boolean standardChecks, Boolean pepSanctionChecks, Boolean proofOfOwnership, Boolean bankAccountCheck, Boolean creditStatusCheck, Boolean liveness, Boolean excludeSelfie, Boolean excludeIDDocuments, Boolean diATFSection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRegistrationsIdPdfExportSectionsGet(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling apiRegistrationsIdPdfExportSectionsGet(Async)");
        }

        return apiRegistrationsIdPdfExportSectionsGetCall(id, apikey, comments, contactDetails, standardChecks, pepSanctionChecks, proofOfOwnership, bankAccountCheck, creditStatusCheck, liveness, excludeSelfie, excludeIDDocuments, diATFSection, _callback);

    }

    /**
     * Returns a PDF report for a given registration containing specified sections
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param comments  (optional)
     * @param contactDetails  (optional)
     * @param standardChecks  (optional)
     * @param pepSanctionChecks  (optional)
     * @param proofOfOwnership  (optional)
     * @param bankAccountCheck  (optional)
     * @param creditStatusCheck  (optional)
     * @param liveness  (optional)
     * @param excludeSelfie  (optional)
     * @param excludeIDDocuments  (optional)
     * @param diATFSection  (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public byte[] apiRegistrationsIdPdfExportSectionsGet(UUID id, String apikey, Boolean comments, Boolean contactDetails, Boolean standardChecks, Boolean pepSanctionChecks, Boolean proofOfOwnership, Boolean bankAccountCheck, Boolean creditStatusCheck, Boolean liveness, Boolean excludeSelfie, Boolean excludeIDDocuments, Boolean diATFSection) throws ApiException {
        ApiResponse<byte[]> localVarResp = apiRegistrationsIdPdfExportSectionsGetWithHttpInfo(id, apikey, comments, contactDetails, standardChecks, pepSanctionChecks, proofOfOwnership, bankAccountCheck, creditStatusCheck, liveness, excludeSelfie, excludeIDDocuments, diATFSection);
        return localVarResp.getData();
    }

    /**
     * Returns a PDF report for a given registration containing specified sections
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param comments  (optional)
     * @param contactDetails  (optional)
     * @param standardChecks  (optional)
     * @param pepSanctionChecks  (optional)
     * @param proofOfOwnership  (optional)
     * @param bankAccountCheck  (optional)
     * @param creditStatusCheck  (optional)
     * @param liveness  (optional)
     * @param excludeSelfie  (optional)
     * @param excludeIDDocuments  (optional)
     * @param diATFSection  (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> apiRegistrationsIdPdfExportSectionsGetWithHttpInfo(UUID id, String apikey, Boolean comments, Boolean contactDetails, Boolean standardChecks, Boolean pepSanctionChecks, Boolean proofOfOwnership, Boolean bankAccountCheck, Boolean creditStatusCheck, Boolean liveness, Boolean excludeSelfie, Boolean excludeIDDocuments, Boolean diATFSection) throws ApiException {
        okhttp3.Call localVarCall = apiRegistrationsIdPdfExportSectionsGetValidateBeforeCall(id, apikey, comments, contactDetails, standardChecks, pepSanctionChecks, proofOfOwnership, bankAccountCheck, creditStatusCheck, liveness, excludeSelfie, excludeIDDocuments, diATFSection, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a PDF report for a given registration containing specified sections (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param comments  (optional)
     * @param contactDetails  (optional)
     * @param standardChecks  (optional)
     * @param pepSanctionChecks  (optional)
     * @param proofOfOwnership  (optional)
     * @param bankAccountCheck  (optional)
     * @param creditStatusCheck  (optional)
     * @param liveness  (optional)
     * @param excludeSelfie  (optional)
     * @param excludeIDDocuments  (optional)
     * @param diATFSection  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRegistrationsIdPdfExportSectionsGetAsync(UUID id, String apikey, Boolean comments, Boolean contactDetails, Boolean standardChecks, Boolean pepSanctionChecks, Boolean proofOfOwnership, Boolean bankAccountCheck, Boolean creditStatusCheck, Boolean liveness, Boolean excludeSelfie, Boolean excludeIDDocuments, Boolean diATFSection, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRegistrationsIdPdfExportSectionsGetValidateBeforeCall(id, apikey, comments, contactDetails, standardChecks, pepSanctionChecks, proofOfOwnership, bankAccountCheck, creditStatusCheck, liveness, excludeSelfie, excludeIDDocuments, diATFSection, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkSubmittedIdDocuments
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the result of the document check. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkSubmittedIdDocumentsCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/check-submitted-id-documents"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSubmittedIdDocumentsValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling checkSubmittedIdDocuments(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling checkSubmittedIdDocuments(Async)");
        }

        return checkSubmittedIdDocumentsCall(id, apikey, _callback);

    }

    /**
     * Checks if submitted documents are sufficient to complete registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the result of the document check. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse checkSubmittedIdDocuments(UUID id, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse> localVarResp = checkSubmittedIdDocumentsWithHttpInfo(id, apikey);
        return localVarResp.getData();
    }

    /**
     * Checks if submitted documents are sufficient to complete registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the result of the document check. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse> checkSubmittedIdDocumentsWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = checkSubmittedIdDocumentsValidateBeforeCall(id, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks if submitted documents are sufficient to complete registration. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response with object containing the result of the document check. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkSubmittedIdDocumentsAsync(UUID id, String apikey, final ApiCallback<CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSubmittedIdDocumentsValidateBeforeCall(id, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationPdfExport
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationPdfExportCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/pdf-export"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationPdfExportValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRegistrationPdfExport(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationPdfExport(Async)");
        }

        return getRegistrationPdfExportCall(id, apikey, _callback);

    }

    /**
     * Returns PDF export for a given registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getRegistrationPdfExport(UUID id, String apikey) throws ApiException {
        ApiResponse<byte[]> localVarResp = getRegistrationPdfExportWithHttpInfo(id, apikey);
        return localVarResp.getData();
    }

    /**
     * Returns PDF export for a given registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getRegistrationPdfExportWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationPdfExportValidateBeforeCall(id, apikey, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns PDF export for a given registration. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing registration extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationPdfExportAsync(UUID id, String apikey, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationPdfExportValidateBeforeCall(id, apikey, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationSearch
     * @param apikey ApiKey supplied. (required)
     * @param pageNum Zero-based page number to retrieve. (optional, default to 0)
     * @param pageSize Number of records to return on each request (Maximum value is 50). (optional, default to 50)
     * @param forename Search by forename. (optional)
     * @param surname Search by surname. (optional)
     * @param email Search by user email. (optional)
     * @param dob Date of birth in (yyyy-MM-dd) format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSearchCall(String apikey, Integer pageNum, Integer pageSize, String forename, String surname, String email, String dob, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (forename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forename", forename));
        }

        if (surname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surname", surname));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (dob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dob", dob));
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationSearchValidateBeforeCall(String apikey, Integer pageNum, Integer pageSize, String forename, String surname, String email, String dob, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationSearch(Async)");
        }

        return getRegistrationSearchCall(apikey, pageNum, pageSize, forename, surname, email, dob, _callback);

    }

    /**
     * Gets paged registration list by search criteria or nothing if there are no matching fields.  Optional parameters may be appended to the query string.  Maximum page size is 50.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param pageNum Zero-based page number to retrieve. (optional, default to 0)
     * @param pageSize Number of records to return on each request (Maximum value is 50). (optional, default to 50)
     * @param forename Search by forename. (optional)
     * @param surname Search by surname. (optional)
     * @param email Search by user email. (optional)
     * @param dob Date of birth in (yyyy-MM-dd) format (optional)
     * @return CredasApiModelsRegistrationsPagedRegistrationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsPagedRegistrationSummary getRegistrationSearch(String apikey, Integer pageNum, Integer pageSize, String forename, String surname, String email, String dob) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsPagedRegistrationSummary> localVarResp = getRegistrationSearchWithHttpInfo(apikey, pageNum, pageSize, forename, surname, email, dob);
        return localVarResp.getData();
    }

    /**
     * Gets paged registration list by search criteria or nothing if there are no matching fields.  Optional parameters may be appended to the query string.  Maximum page size is 50.
     * 
     * @param apikey ApiKey supplied. (required)
     * @param pageNum Zero-based page number to retrieve. (optional, default to 0)
     * @param pageSize Number of records to return on each request (Maximum value is 50). (optional, default to 50)
     * @param forename Search by forename. (optional)
     * @param surname Search by surname. (optional)
     * @param email Search by user email. (optional)
     * @param dob Date of birth in (yyyy-MM-dd) format (optional)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsPagedRegistrationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsPagedRegistrationSummary> getRegistrationSearchWithHttpInfo(String apikey, Integer pageNum, Integer pageSize, String forename, String surname, String email, String dob) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationSearchValidateBeforeCall(apikey, pageNum, pageSize, forename, surname, email, dob, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsPagedRegistrationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets paged registration list by search criteria or nothing if there are no matching fields.  Optional parameters may be appended to the query string.  Maximum page size is 50. (asynchronously)
     * 
     * @param apikey ApiKey supplied. (required)
     * @param pageNum Zero-based page number to retrieve. (optional, default to 0)
     * @param pageSize Number of records to return on each request (Maximum value is 50). (optional, default to 50)
     * @param forename Search by forename. (optional)
     * @param surname Search by surname. (optional)
     * @param email Search by user email. (optional)
     * @param dob Date of birth in (yyyy-MM-dd) format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object list. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSearchAsync(String apikey, Integer pageNum, Integer pageSize, String forename, String surname, String email, String dob, final ApiCallback<CredasApiModelsRegistrationsPagedRegistrationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationSearchValidateBeforeCall(apikey, pageNum, pageSize, forename, surname, email, dob, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsPagedRegistrationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationSettings
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSettingsCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationSettingsValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRegistrationSettings(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationSettings(Async)");
        }

        return getRegistrationSettingsCall(id, apikey, _callback);

    }

    /**
     * Gets registration settings or nothing if there are no settings associated with the registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void getRegistrationSettings(UUID id, String apikey) throws ApiException {
        getRegistrationSettingsWithHttpInfo(id, apikey);
    }

    /**
     * Gets registration settings or nothing if there are no settings associated with the registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getRegistrationSettingsWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationSettingsValidateBeforeCall(id, apikey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets registration settings or nothing if there are no settings associated with the registration. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSettingsAsync(UUID id, String apikey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationSettingsValidateBeforeCall(id, apikey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationSummariesByReferenceId
     * @param referenceId ReferenceId - from external system to match Registrations on. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of Registration summary objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSummariesByReferenceIdCall(String referenceId, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/referenceid/{referenceId}/summary"
            .replace("{" + "referenceId" + "}", localVarApiClient.escapeString(referenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationSummariesByReferenceIdValidateBeforeCall(String referenceId, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling getRegistrationSummariesByReferenceId(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationSummariesByReferenceId(Async)");
        }

        return getRegistrationSummariesByReferenceIdCall(referenceId, apikey, _callback);

    }

    /**
     * Finds registrations by the ReferenceId.
     * 
     * @param referenceId ReferenceId - from external system to match Registrations on. (required)
     * @param apikey ApiKey supplied. (required)
     * @return List&lt;CredasApiModelsRegistrationsRegistrationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of Registration summary objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public List<CredasApiModelsRegistrationsRegistrationSummary> getRegistrationSummariesByReferenceId(String referenceId, String apikey) throws ApiException {
        ApiResponse<List<CredasApiModelsRegistrationsRegistrationSummary>> localVarResp = getRegistrationSummariesByReferenceIdWithHttpInfo(referenceId, apikey);
        return localVarResp.getData();
    }

    /**
     * Finds registrations by the ReferenceId.
     * 
     * @param referenceId ReferenceId - from external system to match Registrations on. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;List&lt;CredasApiModelsRegistrationsRegistrationSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of Registration summary objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CredasApiModelsRegistrationsRegistrationSummary>> getRegistrationSummariesByReferenceIdWithHttpInfo(String referenceId, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationSummariesByReferenceIdValidateBeforeCall(referenceId, apikey, null);
        Type localVarReturnType = new TypeToken<List<CredasApiModelsRegistrationsRegistrationSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds registrations by the ReferenceId. (asynchronously)
     * 
     * @param referenceId ReferenceId - from external system to match Registrations on. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of Registration summary objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSummariesByReferenceIdAsync(String referenceId, String apikey, final ApiCallback<List<CredasApiModelsRegistrationsRegistrationSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationSummariesByReferenceIdValidateBeforeCall(referenceId, apikey, _callback);
        Type localVarReturnType = new TypeToken<List<CredasApiModelsRegistrationsRegistrationSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationSummary
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSummaryCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/summary"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationSummaryValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRegistrationSummary(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationSummary(Async)");
        }

        return getRegistrationSummaryCall(id, apikey, _callback);

    }

    /**
     * Finds a registration by the Id.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsRegistrationsRegistrationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsRegistrationSummary getRegistrationSummary(UUID id, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsRegistrationSummary> localVarResp = getRegistrationSummaryWithHttpInfo(id, apikey);
        return localVarResp.getData();
    }

    /**
     * Finds a registration by the Id.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsRegistrationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsRegistrationSummary> getRegistrationSummaryWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationSummaryValidateBeforeCall(id, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsRegistrationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds a registration by the Id. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSummaryAsync(UUID id, String apikey, final ApiCallback<CredasApiModelsRegistrationsRegistrationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationSummaryValidateBeforeCall(id, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsRegistrationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationSummaryByRegCode
     * @param regCode RegCode - short unique identifier. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSummaryByRegCodeCall(String regCode, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/regcode/{regCode}/summary"
            .replace("{" + "regCode" + "}", localVarApiClient.escapeString(regCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationSummaryByRegCodeValidateBeforeCall(String regCode, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'regCode' is set
        if (regCode == null) {
            throw new ApiException("Missing the required parameter 'regCode' when calling getRegistrationSummaryByRegCode(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationSummaryByRegCode(Async)");
        }

        return getRegistrationSummaryByRegCodeCall(regCode, apikey, _callback);

    }

    /**
     * Finds a registration by the RegCode.
     * 
     * @param regCode RegCode - short unique identifier. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsRegistrationsRegistrationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsRegistrationSummary getRegistrationSummaryByRegCode(String regCode, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsRegistrationSummary> localVarResp = getRegistrationSummaryByRegCodeWithHttpInfo(regCode, apikey);
        return localVarResp.getData();
    }

    /**
     * Finds a registration by the RegCode.
     * 
     * @param regCode RegCode - short unique identifier. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsRegistrationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsRegistrationSummary> getRegistrationSummaryByRegCodeWithHttpInfo(String regCode, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationSummaryByRegCodeValidateBeforeCall(regCode, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsRegistrationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds a registration by the RegCode. (asynchronously)
     * 
     * @param regCode RegCode - short unique identifier. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration summary object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the RegCode was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSummaryByRegCodeAsync(String regCode, String apikey, final ApiCallback<CredasApiModelsRegistrationsRegistrationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationSummaryByRegCodeValidateBeforeCall(regCode, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsRegistrationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationSupportedIdDocuments
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported id document objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSupportedIdDocumentsCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/supported-id-documents"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationSupportedIdDocumentsValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRegistrationSupportedIdDocuments(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getRegistrationSupportedIdDocuments(Async)");
        }

        return getRegistrationSupportedIdDocumentsCall(id, apikey, _callback);

    }

    /**
     * Get a list of supported id document for the specified registration id.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return CredasApiModelsRegistrationsSupportedIdDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported id document objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public CredasApiModelsRegistrationsSupportedIdDocument getRegistrationSupportedIdDocuments(UUID id, String apikey) throws ApiException {
        ApiResponse<CredasApiModelsRegistrationsSupportedIdDocument> localVarResp = getRegistrationSupportedIdDocumentsWithHttpInfo(id, apikey);
        return localVarResp.getData();
    }

    /**
     * Get a list of supported id document for the specified registration id.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;CredasApiModelsRegistrationsSupportedIdDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported id document objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredasApiModelsRegistrationsSupportedIdDocument> getRegistrationSupportedIdDocumentsWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationSupportedIdDocumentsValidateBeforeCall(id, apikey, null);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsSupportedIdDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of supported id document for the specified registration id. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported id document objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationSupportedIdDocumentsAsync(UUID id, String apikey, final ApiCallback<CredasApiModelsRegistrationsSupportedIdDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationSupportedIdDocumentsValidateBeforeCall(id, apikey, _callback);
        Type localVarReturnType = new TypeToken<CredasApiModelsRegistrationsSupportedIdDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShareCodePdfExport
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing settlement status information extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShareCodePdfExportCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/pdf-settlement-status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShareCodePdfExportValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getShareCodePdfExport(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getShareCodePdfExport(Async)");
        }

        return getShareCodePdfExportCall(id, apikey, _callback);

    }

    /**
     * Returns settlement status PDF (Share Code) for a given registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing settlement status information extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getShareCodePdfExport(UUID id, String apikey) throws ApiException {
        ApiResponse<byte[]> localVarResp = getShareCodePdfExportWithHttpInfo(id, apikey);
        return localVarResp.getData();
    }

    /**
     * Returns settlement status PDF (Share Code) for a given registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing settlement status information extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getShareCodePdfExportWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = getShareCodePdfExportValidateBeforeCall(id, apikey, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns settlement status PDF (Share Code) for a given registration. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF document containing settlement status information extract as byte stream. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShareCodePdfExportAsync(UUID id, String apikey, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShareCodePdfExportValidateBeforeCall(id, apikey, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for overrideCheckStatus
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsStatusOverridesOverrideCheckStatusRequest Request data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overrideCheckStatusCall(UUID id, String apikey, CredasApiModelsStatusOverridesOverrideCheckStatusRequest credasApiModelsStatusOverridesOverrideCheckStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsStatusOverridesOverrideCheckStatusRequest;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/override-check-status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overrideCheckStatusValidateBeforeCall(UUID id, String apikey, CredasApiModelsStatusOverridesOverrideCheckStatusRequest credasApiModelsStatusOverridesOverrideCheckStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling overrideCheckStatus(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling overrideCheckStatus(Async)");
        }

        return overrideCheckStatusCall(id, apikey, credasApiModelsStatusOverridesOverrideCheckStatusRequest, _callback);

    }

    /**
     * Sets an override for a specific check on the registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsStatusOverridesOverrideCheckStatusRequest Request data. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void overrideCheckStatus(UUID id, String apikey, CredasApiModelsStatusOverridesOverrideCheckStatusRequest credasApiModelsStatusOverridesOverrideCheckStatusRequest) throws ApiException {
        overrideCheckStatusWithHttpInfo(id, apikey, credasApiModelsStatusOverridesOverrideCheckStatusRequest);
    }

    /**
     * Sets an override for a specific check on the registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsStatusOverridesOverrideCheckStatusRequest Request data. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> overrideCheckStatusWithHttpInfo(UUID id, String apikey, CredasApiModelsStatusOverridesOverrideCheckStatusRequest credasApiModelsStatusOverridesOverrideCheckStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = overrideCheckStatusValidateBeforeCall(id, apikey, credasApiModelsStatusOverridesOverrideCheckStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets an override for a specific check on the registration. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsStatusOverridesOverrideCheckStatusRequest Request data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call overrideCheckStatusAsync(UUID id, String apikey, CredasApiModelsStatusOverridesOverrideCheckStatusRequest credasApiModelsStatusOverridesOverrideCheckStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = overrideCheckStatusValidateBeforeCall(id, apikey, credasApiModelsStatusOverridesOverrideCheckStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendInvitation
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation sent. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendInvitationCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/resend-invitation"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendInvitationValidateBeforeCall(UUID id, String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resendInvitation(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling resendInvitation(Async)");
        }

        return resendInvitationCall(id, apikey, _callback);

    }

    /**
     * Resends any invitation for the specified registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation sent. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void resendInvitation(UUID id, String apikey) throws ApiException {
        resendInvitationWithHttpInfo(id, apikey);
    }

    /**
     * Resends any invitation for the specified registration.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation sent. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendInvitationWithHttpInfo(UUID id, String apikey) throws ApiException {
        okhttp3.Call localVarCall = resendInvitationValidateBeforeCall(id, apikey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resends any invitation for the specified registration. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation sent. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendInvitationAsync(UUID id, String apikey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendInvitationValidateBeforeCall(id, apikey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContactDetails
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateContactDetailsRequest Object containing contact details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration contact details updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactDetailsCall(UUID id, String apikey, CredasApiModelsRegistrationsUpdateContactDetailsRequest credasApiModelsRegistrationsUpdateContactDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsRegistrationsUpdateContactDetailsRequest;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/contact-details"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactDetailsValidateBeforeCall(UUID id, String apikey, CredasApiModelsRegistrationsUpdateContactDetailsRequest credasApiModelsRegistrationsUpdateContactDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContactDetails(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling updateContactDetails(Async)");
        }

        return updateContactDetailsCall(id, apikey, credasApiModelsRegistrationsUpdateContactDetailsRequest, _callback);

    }

    /**
     * Updates a registration&#39;s contact details.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateContactDetailsRequest Object containing contact details. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration contact details updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void updateContactDetails(UUID id, String apikey, CredasApiModelsRegistrationsUpdateContactDetailsRequest credasApiModelsRegistrationsUpdateContactDetailsRequest) throws ApiException {
        updateContactDetailsWithHttpInfo(id, apikey, credasApiModelsRegistrationsUpdateContactDetailsRequest);
    }

    /**
     * Updates a registration&#39;s contact details.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateContactDetailsRequest Object containing contact details. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration contact details updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateContactDetailsWithHttpInfo(UUID id, String apikey, CredasApiModelsRegistrationsUpdateContactDetailsRequest credasApiModelsRegistrationsUpdateContactDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateContactDetailsValidateBeforeCall(id, apikey, credasApiModelsRegistrationsUpdateContactDetailsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a registration&#39;s contact details. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateContactDetailsRequest Object containing contact details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration contact details updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactDetailsAsync(UUID id, String apikey, CredasApiModelsRegistrationsUpdateContactDetailsRequest credasApiModelsRegistrationsUpdateContactDetailsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactDetailsValidateBeforeCall(id, apikey, credasApiModelsRegistrationsUpdateContactDetailsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRegistrationSettings
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsRegistrationSettings Object containing registration settings. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegistrationSettingsCall(UUID id, String apikey, CredasApiModelsRegistrationsRegistrationSettings credasApiModelsRegistrationsRegistrationSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsRegistrationsRegistrationSettings;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrationSettingsValidateBeforeCall(UUID id, String apikey, CredasApiModelsRegistrationsRegistrationSettings credasApiModelsRegistrationsRegistrationSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRegistrationSettings(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling updateRegistrationSettings(Async)");
        }

        return updateRegistrationSettingsCall(id, apikey, credasApiModelsRegistrationsRegistrationSettings, _callback);

    }

    /**
     * Updates registration settings.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsRegistrationSettings Object containing registration settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void updateRegistrationSettings(UUID id, String apikey, CredasApiModelsRegistrationsRegistrationSettings credasApiModelsRegistrationsRegistrationSettings) throws ApiException {
        updateRegistrationSettingsWithHttpInfo(id, apikey, credasApiModelsRegistrationsRegistrationSettings);
    }

    /**
     * Updates registration settings.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsRegistrationSettings Object containing registration settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRegistrationSettingsWithHttpInfo(UUID id, String apikey, CredasApiModelsRegistrationsRegistrationSettings credasApiModelsRegistrationsRegistrationSettings) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrationSettingsValidateBeforeCall(id, apikey, credasApiModelsRegistrationsRegistrationSettings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates registration settings. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsRegistrationSettings Object containing registration settings. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration settings updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If requesting entity have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If registration matching the Id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegistrationSettingsAsync(UUID id, String apikey, CredasApiModelsRegistrationsRegistrationSettings credasApiModelsRegistrationsRegistrationSettings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrationSettingsValidateBeforeCall(id, apikey, credasApiModelsRegistrationsRegistrationSettings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRegistrationStatus
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateRegistrationStatusRequest Request object containing the details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the registration was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegistrationStatusCall(UUID id, String apikey, CredasApiModelsRegistrationsUpdateRegistrationStatusRequest credasApiModelsRegistrationsUpdateRegistrationStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credasApiModelsRegistrationsUpdateRegistrationStatusRequest;

        // create path and map variables
        String localVarPath = "/api/registrations/{id}/status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/*+xml",
            "application/json",
            "application/json-patch+json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistrationStatusValidateBeforeCall(UUID id, String apikey, CredasApiModelsRegistrationsUpdateRegistrationStatusRequest credasApiModelsRegistrationsUpdateRegistrationStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRegistrationStatus(Async)");
        }

        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling updateRegistrationStatus(Async)");
        }

        return updateRegistrationStatusCall(id, apikey, credasApiModelsRegistrationsUpdateRegistrationStatusRequest, _callback);

    }

    /**
     * Updates the status of the registration to one specified in the request.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateRegistrationStatusRequest Request object containing the details. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the registration was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public void updateRegistrationStatus(UUID id, String apikey, CredasApiModelsRegistrationsUpdateRegistrationStatusRequest credasApiModelsRegistrationsUpdateRegistrationStatusRequest) throws ApiException {
        updateRegistrationStatusWithHttpInfo(id, apikey, credasApiModelsRegistrationsUpdateRegistrationStatusRequest);
    }

    /**
     * Updates the status of the registration to one specified in the request.
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateRegistrationStatusRequest Request object containing the details. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the registration was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRegistrationStatusWithHttpInfo(UUID id, String apikey, CredasApiModelsRegistrationsUpdateRegistrationStatusRequest credasApiModelsRegistrationsUpdateRegistrationStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRegistrationStatusValidateBeforeCall(id, apikey, credasApiModelsRegistrationsUpdateRegistrationStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the status of the registration to one specified in the request. (asynchronously)
     * 
     * @param id Id of the registration. (required)
     * @param apikey ApiKey supplied. (required)
     * @param credasApiModelsRegistrationsUpdateRegistrationStatusRequest Request object containing the details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the service was supplied invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If credentials supplied were invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the registration was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If an unexpected exception occurred whilst processing the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegistrationStatusAsync(UUID id, String apikey, CredasApiModelsRegistrationsUpdateRegistrationStatusRequest credasApiModelsRegistrationsUpdateRegistrationStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistrationStatusValidateBeforeCall(id, apikey, credasApiModelsRegistrationsUpdateRegistrationStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
