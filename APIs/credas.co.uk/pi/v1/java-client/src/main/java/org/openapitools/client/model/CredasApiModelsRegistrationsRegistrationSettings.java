/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsRegistrationsRegistrationSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsRegistrationsRegistrationSettings {
  public static final String SERIALIZED_NAME_CAPTURE_PERSONAL_DETAILS = "capturePersonalDetails";
  @SerializedName(SERIALIZED_NAME_CAPTURE_PERSONAL_DETAILS)
  private Boolean capturePersonalDetails;

  /**
   * Fuzzy &#x3D; 1, Strict &#x3D; 2
   */
  @JsonAdapter(NameMatchRoutineEnum.Adapter.class)
  public enum NameMatchRoutineEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    NameMatchRoutineEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameMatchRoutineEnum fromValue(Integer value) {
      for (NameMatchRoutineEnum b : NameMatchRoutineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameMatchRoutineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameMatchRoutineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameMatchRoutineEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return NameMatchRoutineEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      NameMatchRoutineEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_MATCH_ROUTINE = "nameMatchRoutine";
  @SerializedName(SERIALIZED_NAME_NAME_MATCH_ROUTINE)
  private NameMatchRoutineEnum nameMatchRoutine;

  /**
   * Gets or Sets requiredChecks
   */
  @JsonAdapter(RequiredChecksEnum.Adapter.class)
  public enum RequiredChecksEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8);

    private Integer value;

    RequiredChecksEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredChecksEnum fromValue(Integer value) {
      for (RequiredChecksEnum b : RequiredChecksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiredChecksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredChecksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredChecksEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return RequiredChecksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      RequiredChecksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED_CHECKS = "requiredChecks";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CHECKS)
  private List<RequiredChecksEnum> requiredChecks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_EMAIL_STEP = "skipEmailStep";
  @SerializedName(SERIALIZED_NAME_SKIP_EMAIL_STEP)
  private Boolean skipEmailStep;

  public CredasApiModelsRegistrationsRegistrationSettings() {
  }

  public CredasApiModelsRegistrationsRegistrationSettings capturePersonalDetails(Boolean capturePersonalDetails) {
    this.capturePersonalDetails = capturePersonalDetails;
    return this;
  }

  /**
   * Get capturePersonalDetails
   * @return capturePersonalDetails
   */
  @javax.annotation.Nullable
  public Boolean getCapturePersonalDetails() {
    return capturePersonalDetails;
  }

  public void setCapturePersonalDetails(Boolean capturePersonalDetails) {
    this.capturePersonalDetails = capturePersonalDetails;
  }


  public CredasApiModelsRegistrationsRegistrationSettings nameMatchRoutine(NameMatchRoutineEnum nameMatchRoutine) {
    this.nameMatchRoutine = nameMatchRoutine;
    return this;
  }

  /**
   * Fuzzy &#x3D; 1, Strict &#x3D; 2
   * @return nameMatchRoutine
   */
  @javax.annotation.Nullable
  public NameMatchRoutineEnum getNameMatchRoutine() {
    return nameMatchRoutine;
  }

  public void setNameMatchRoutine(NameMatchRoutineEnum nameMatchRoutine) {
    this.nameMatchRoutine = nameMatchRoutine;
  }


  public CredasApiModelsRegistrationsRegistrationSettings requiredChecks(List<RequiredChecksEnum> requiredChecks) {
    this.requiredChecks = requiredChecks;
    return this;
  }

  public CredasApiModelsRegistrationsRegistrationSettings addRequiredChecksItem(RequiredChecksEnum requiredChecksItem) {
    if (this.requiredChecks == null) {
      this.requiredChecks = new ArrayList<>();
    }
    this.requiredChecks.add(requiredChecksItem);
    return this;
  }

  /**
   * The value of required checks determines what checks are performed. &lt;br/&gt;Unknown &#x3D; 0,Id Documents &#x3D; 1, Standard Checks &#x3D; 2, International Sanctions and Pep &#x3D; 3, Credit Status Check &#x3D; 4, Bank Account Check &#x3D; 5, Proof of Ownership &#x3D; 6, Right to Work &#x3D; 7, Right to Rent &#x3D; 8&lt;br /&gt;
   * @return requiredChecks
   */
  @javax.annotation.Nullable
  public List<RequiredChecksEnum> getRequiredChecks() {
    return requiredChecks;
  }

  public void setRequiredChecks(List<RequiredChecksEnum> requiredChecks) {
    this.requiredChecks = requiredChecks;
  }


  public CredasApiModelsRegistrationsRegistrationSettings skipEmailStep(Boolean skipEmailStep) {
    this.skipEmailStep = skipEmailStep;
    return this;
  }

  /**
   * Get skipEmailStep
   * @return skipEmailStep
   */
  @javax.annotation.Nullable
  public Boolean getSkipEmailStep() {
    return skipEmailStep;
  }

  public void setSkipEmailStep(Boolean skipEmailStep) {
    this.skipEmailStep = skipEmailStep;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsRegistrationsRegistrationSettings credasApiModelsRegistrationsRegistrationSettings = (CredasApiModelsRegistrationsRegistrationSettings) o;
    return Objects.equals(this.capturePersonalDetails, credasApiModelsRegistrationsRegistrationSettings.capturePersonalDetails) &&
        Objects.equals(this.nameMatchRoutine, credasApiModelsRegistrationsRegistrationSettings.nameMatchRoutine) &&
        Objects.equals(this.requiredChecks, credasApiModelsRegistrationsRegistrationSettings.requiredChecks) &&
        Objects.equals(this.skipEmailStep, credasApiModelsRegistrationsRegistrationSettings.skipEmailStep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capturePersonalDetails, nameMatchRoutine, requiredChecks, skipEmailStep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsRegistrationsRegistrationSettings {\n");
    sb.append("    capturePersonalDetails: ").append(toIndentedString(capturePersonalDetails)).append("\n");
    sb.append("    nameMatchRoutine: ").append(toIndentedString(nameMatchRoutine)).append("\n");
    sb.append("    requiredChecks: ").append(toIndentedString(requiredChecks)).append("\n");
    sb.append("    skipEmailStep: ").append(toIndentedString(skipEmailStep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capturePersonalDetails");
    openapiFields.add("nameMatchRoutine");
    openapiFields.add("requiredChecks");
    openapiFields.add("skipEmailStep");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsRegistrationsRegistrationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsRegistrationsRegistrationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsRegistrationsRegistrationSettings is not found in the empty JSON string", CredasApiModelsRegistrationsRegistrationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsRegistrationsRegistrationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsRegistrationsRegistrationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `nameMatchRoutine`
      if (jsonObj.get("nameMatchRoutine") != null && !jsonObj.get("nameMatchRoutine").isJsonNull()) {
        NameMatchRoutineEnum.validateJsonElement(jsonObj.get("nameMatchRoutine"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredChecks") != null && !jsonObj.get("requiredChecks").isJsonNull() && !jsonObj.get("requiredChecks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredChecks` to be an array in the JSON string but got `%s`", jsonObj.get("requiredChecks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsRegistrationsRegistrationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsRegistrationsRegistrationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsRegistrationsRegistrationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsRegistrationsRegistrationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsRegistrationsRegistrationSettings>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsRegistrationsRegistrationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsRegistrationsRegistrationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsRegistrationsRegistrationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsRegistrationsRegistrationSettings
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsRegistrationsRegistrationSettings
   */
  public static CredasApiModelsRegistrationsRegistrationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsRegistrationsRegistrationSettings.class);
  }

  /**
   * Convert an instance of CredasApiModelsRegistrationsRegistrationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

