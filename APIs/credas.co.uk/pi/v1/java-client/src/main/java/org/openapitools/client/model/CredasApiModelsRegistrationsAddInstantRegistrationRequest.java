/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.CredasApiModelsRegistrationsKeyValueItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsRegistrationsAddInstantRegistrationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsRegistrationsAddInstantRegistrationRequest {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_DOCUMENT_PARAMETERS = "documentParameters";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PARAMETERS)
  private List<CredasApiModelsRegistrationsKeyValueItem> documentParameters = new ArrayList<>();

  /**
   * Other &#x3D; 0, Passport &#x3D; 1, DrivingLicence &#x3D; 2, Visa &#x3D; 3, CscsCard &#x3D; 4, HomeOfficeLetter &#x3D; 5, BirthCertificate &#x3D; 6, NationalIdCard &#x3D; 7, ResidencePermit &#x3D; 9, UtilityBill &#x3D; 11
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11);

    private Integer value;

    DocumentTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(Integer value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_FORENAME = "forename";
  @SerializedName(SERIALIZED_NAME_FORENAME)
  private String forename;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<CredasApiModelsRegistrationsKeyValueItem> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_REG_TYPE_ID = "regTypeId";
  @SerializedName(SERIALIZED_NAME_REG_TYPE_ID)
  private UUID regTypeId;

  public static final String SERIALIZED_NAME_SELFIE = "selfie";
  @SerializedName(SERIALIZED_NAME_SELFIE)
  private String selfie;

  public static final String SERIALIZED_NAME_SIGNIFICANT_PERSON_ID = "significantPersonId";
  @SerializedName(SERIALIZED_NAME_SIGNIFICANT_PERSON_ID)
  private UUID significantPersonId;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public CredasApiModelsRegistrationsAddInstantRegistrationRequest() {
  }

  public CredasApiModelsRegistrationsAddInstantRegistrationRequest document(String document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nonnull
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest documentParameters(List<CredasApiModelsRegistrationsKeyValueItem> documentParameters) {
    this.documentParameters = documentParameters;
    return this;
  }

  public CredasApiModelsRegistrationsAddInstantRegistrationRequest addDocumentParametersItem(CredasApiModelsRegistrationsKeyValueItem documentParametersItem) {
    if (this.documentParameters == null) {
      this.documentParameters = new ArrayList<>();
    }
    this.documentParameters.add(documentParametersItem);
    return this;
  }

  /**
   * Get documentParameters
   * @return documentParameters
   */
  @javax.annotation.Nullable
  public List<CredasApiModelsRegistrationsKeyValueItem> getDocumentParameters() {
    return documentParameters;
  }

  public void setDocumentParameters(List<CredasApiModelsRegistrationsKeyValueItem> documentParameters) {
    this.documentParameters = documentParameters;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Other &#x3D; 0, Passport &#x3D; 1, DrivingLicence &#x3D; 2, Visa &#x3D; 3, CscsCard &#x3D; 4, HomeOfficeLetter &#x3D; 5, BirthCertificate &#x3D; 6, NationalIdCard &#x3D; 7, ResidencePermit &#x3D; 9, UtilityBill &#x3D; 11
   * @return documentType
   */
  @javax.annotation.Nonnull
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest forename(String forename) {
    this.forename = forename;
    return this;
  }

  /**
   * Get forename
   * @return forename
   */
  @javax.annotation.Nonnull
  public String getForename() {
    return forename;
  }

  public void setForename(String forename) {
    this.forename = forename;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Get middleName
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest parameters(List<CredasApiModelsRegistrationsKeyValueItem> parameters) {
    this.parameters = parameters;
    return this;
  }

  public CredasApiModelsRegistrationsAddInstantRegistrationRequest addParametersItem(CredasApiModelsRegistrationsKeyValueItem parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<CredasApiModelsRegistrationsKeyValueItem> getParameters() {
    return parameters;
  }

  public void setParameters(List<CredasApiModelsRegistrationsKeyValueItem> parameters) {
    this.parameters = parameters;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest regTypeId(UUID regTypeId) {
    this.regTypeId = regTypeId;
    return this;
  }

  /**
   * Get regTypeId
   * @return regTypeId
   */
  @javax.annotation.Nonnull
  public UUID getRegTypeId() {
    return regTypeId;
  }

  public void setRegTypeId(UUID regTypeId) {
    this.regTypeId = regTypeId;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest selfie(String selfie) {
    this.selfie = selfie;
    return this;
  }

  /**
   * Get selfie
   * @return selfie
   */
  @javax.annotation.Nullable
  public String getSelfie() {
    return selfie;
  }

  public void setSelfie(String selfie) {
    this.selfie = selfie;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest significantPersonId(UUID significantPersonId) {
    this.significantPersonId = significantPersonId;
    return this;
  }

  /**
   * Get significantPersonId
   * @return significantPersonId
   */
  @javax.annotation.Nullable
  public UUID getSignificantPersonId() {
    return significantPersonId;
  }

  public void setSignificantPersonId(UUID significantPersonId) {
    this.significantPersonId = significantPersonId;
  }


  public CredasApiModelsRegistrationsAddInstantRegistrationRequest surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nonnull
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsRegistrationsAddInstantRegistrationRequest credasApiModelsRegistrationsAddInstantRegistrationRequest = (CredasApiModelsRegistrationsAddInstantRegistrationRequest) o;
    return Objects.equals(this.document, credasApiModelsRegistrationsAddInstantRegistrationRequest.document) &&
        Objects.equals(this.documentParameters, credasApiModelsRegistrationsAddInstantRegistrationRequest.documentParameters) &&
        Objects.equals(this.documentType, credasApiModelsRegistrationsAddInstantRegistrationRequest.documentType) &&
        Objects.equals(this.forename, credasApiModelsRegistrationsAddInstantRegistrationRequest.forename) &&
        Objects.equals(this.middleName, credasApiModelsRegistrationsAddInstantRegistrationRequest.middleName) &&
        Objects.equals(this.parameters, credasApiModelsRegistrationsAddInstantRegistrationRequest.parameters) &&
        Objects.equals(this.referenceId, credasApiModelsRegistrationsAddInstantRegistrationRequest.referenceId) &&
        Objects.equals(this.regTypeId, credasApiModelsRegistrationsAddInstantRegistrationRequest.regTypeId) &&
        Objects.equals(this.selfie, credasApiModelsRegistrationsAddInstantRegistrationRequest.selfie) &&
        Objects.equals(this.significantPersonId, credasApiModelsRegistrationsAddInstantRegistrationRequest.significantPersonId) &&
        Objects.equals(this.surname, credasApiModelsRegistrationsAddInstantRegistrationRequest.surname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, documentParameters, documentType, forename, middleName, parameters, referenceId, regTypeId, selfie, significantPersonId, surname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsRegistrationsAddInstantRegistrationRequest {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    documentParameters: ").append(toIndentedString(documentParameters)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    forename: ").append(toIndentedString(forename)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    regTypeId: ").append(toIndentedString(regTypeId)).append("\n");
    sb.append("    selfie: ").append(toIndentedString(selfie)).append("\n");
    sb.append("    significantPersonId: ").append(toIndentedString(significantPersonId)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("documentParameters");
    openapiFields.add("documentType");
    openapiFields.add("forename");
    openapiFields.add("middleName");
    openapiFields.add("parameters");
    openapiFields.add("referenceId");
    openapiFields.add("regTypeId");
    openapiFields.add("selfie");
    openapiFields.add("significantPersonId");
    openapiFields.add("surname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document");
    openapiRequiredFields.add("documentType");
    openapiRequiredFields.add("forename");
    openapiRequiredFields.add("regTypeId");
    openapiRequiredFields.add("surname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsRegistrationsAddInstantRegistrationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsRegistrationsAddInstantRegistrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsRegistrationsAddInstantRegistrationRequest is not found in the empty JSON string", CredasApiModelsRegistrationsAddInstantRegistrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsRegistrationsAddInstantRegistrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsRegistrationsAddInstantRegistrationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredasApiModelsRegistrationsAddInstantRegistrationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if (jsonObj.get("documentParameters") != null && !jsonObj.get("documentParameters").isJsonNull()) {
        JsonArray jsonArraydocumentParameters = jsonObj.getAsJsonArray("documentParameters");
        if (jsonArraydocumentParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentParameters` to be an array in the JSON string but got `%s`", jsonObj.get("documentParameters").toString()));
          }

          // validate the optional field `documentParameters` (array)
          for (int i = 0; i < jsonArraydocumentParameters.size(); i++) {
            CredasApiModelsRegistrationsKeyValueItem.validateJsonElement(jsonArraydocumentParameters.get(i));
          };
        }
      }
      // validate the required field `documentType`
      DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      if (!jsonObj.get("forename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forename").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            CredasApiModelsRegistrationsKeyValueItem.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      if ((jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonNull()) && !jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if (!jsonObj.get("regTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regTypeId").toString()));
      }
      if ((jsonObj.get("selfie") != null && !jsonObj.get("selfie").isJsonNull()) && !jsonObj.get("selfie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfie").toString()));
      }
      if ((jsonObj.get("significantPersonId") != null && !jsonObj.get("significantPersonId").isJsonNull()) && !jsonObj.get("significantPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `significantPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("significantPersonId").toString()));
      }
      if (!jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsRegistrationsAddInstantRegistrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsRegistrationsAddInstantRegistrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsRegistrationsAddInstantRegistrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsRegistrationsAddInstantRegistrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsRegistrationsAddInstantRegistrationRequest>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsRegistrationsAddInstantRegistrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsRegistrationsAddInstantRegistrationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsRegistrationsAddInstantRegistrationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsRegistrationsAddInstantRegistrationRequest
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsRegistrationsAddInstantRegistrationRequest
   */
  public static CredasApiModelsRegistrationsAddInstantRegistrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsRegistrationsAddInstantRegistrationRequest.class);
  }

  /**
   * Convert an instance of CredasApiModelsRegistrationsAddInstantRegistrationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

