/*
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.CredasApiModelsDataCheckAddress;
import org.openapitools.client.model.CredasApiModelsDataCheckPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CredasApiModelsDataCheckAddDataCheckRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:15.246346-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CredasApiModelsDataCheckAddDataCheckRequest {
  /**
   * The value of checkType dictates what checks are performed. &lt;br/&gt;The StandardAml check (value &#x3D; 1) will check DOB &amp; Mortality. &lt;br/&gt;The InternationalPepSanctions check (value &#x3D; 3) will check just International PEP &amp; Sanctions. &lt;br/&gt;The EnhancedAml check (value &#x3D; 2) will perform both these checks and is equivalent to making two calls with values of 1 then 3 and will be charged accordingly. &lt;br /&gt;  values&#x3D;&gt; None &#x3D; 0, StandardAml &#x3D; 1, EnhancedAml &#x3D; 2, InternationalPepSanctions &#x3D; 3
   */
  @JsonAdapter(CheckTypeEnum.Adapter.class)
  public enum CheckTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    CheckTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckTypeEnum fromValue(Integer value) {
      for (CheckTypeEnum b : CheckTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CheckTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      CheckTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHECK_TYPE = "checkType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private CheckTypeEnum checkType;

  public static final String SERIALIZED_NAME_CURRENT_ADDRESS = "currentAddress";
  @SerializedName(SERIALIZED_NAME_CURRENT_ADDRESS)
  private CredasApiModelsDataCheckAddress currentAddress;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private CredasApiModelsDataCheckPerson person;

  public static final String SERIALIZED_NAME_REG_ENTRY_ID = "regEntryId";
  @SerializedName(SERIALIZED_NAME_REG_ENTRY_ID)
  private UUID regEntryId;

  public CredasApiModelsDataCheckAddDataCheckRequest() {
  }

  public CredasApiModelsDataCheckAddDataCheckRequest checkType(CheckTypeEnum checkType) {
    this.checkType = checkType;
    return this;
  }

  /**
   * The value of checkType dictates what checks are performed. &lt;br/&gt;The StandardAml check (value &#x3D; 1) will check DOB &amp; Mortality. &lt;br/&gt;The InternationalPepSanctions check (value &#x3D; 3) will check just International PEP &amp; Sanctions. &lt;br/&gt;The EnhancedAml check (value &#x3D; 2) will perform both these checks and is equivalent to making two calls with values of 1 then 3 and will be charged accordingly. &lt;br /&gt;  values&#x3D;&gt; None &#x3D; 0, StandardAml &#x3D; 1, EnhancedAml &#x3D; 2, InternationalPepSanctions &#x3D; 3
   * @return checkType
   */
  @javax.annotation.Nonnull
  public CheckTypeEnum getCheckType() {
    return checkType;
  }

  public void setCheckType(CheckTypeEnum checkType) {
    this.checkType = checkType;
  }


  public CredasApiModelsDataCheckAddDataCheckRequest currentAddress(CredasApiModelsDataCheckAddress currentAddress) {
    this.currentAddress = currentAddress;
    return this;
  }

  /**
   * Get currentAddress
   * @return currentAddress
   */
  @javax.annotation.Nonnull
  public CredasApiModelsDataCheckAddress getCurrentAddress() {
    return currentAddress;
  }

  public void setCurrentAddress(CredasApiModelsDataCheckAddress currentAddress) {
    this.currentAddress = currentAddress;
  }


  public CredasApiModelsDataCheckAddDataCheckRequest person(CredasApiModelsDataCheckPerson person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nonnull
  public CredasApiModelsDataCheckPerson getPerson() {
    return person;
  }

  public void setPerson(CredasApiModelsDataCheckPerson person) {
    this.person = person;
  }


  public CredasApiModelsDataCheckAddDataCheckRequest regEntryId(UUID regEntryId) {
    this.regEntryId = regEntryId;
    return this;
  }

  /**
   * Get regEntryId
   * @return regEntryId
   */
  @javax.annotation.Nonnull
  public UUID getRegEntryId() {
    return regEntryId;
  }

  public void setRegEntryId(UUID regEntryId) {
    this.regEntryId = regEntryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredasApiModelsDataCheckAddDataCheckRequest credasApiModelsDataCheckAddDataCheckRequest = (CredasApiModelsDataCheckAddDataCheckRequest) o;
    return Objects.equals(this.checkType, credasApiModelsDataCheckAddDataCheckRequest.checkType) &&
        Objects.equals(this.currentAddress, credasApiModelsDataCheckAddDataCheckRequest.currentAddress) &&
        Objects.equals(this.person, credasApiModelsDataCheckAddDataCheckRequest.person) &&
        Objects.equals(this.regEntryId, credasApiModelsDataCheckAddDataCheckRequest.regEntryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkType, currentAddress, person, regEntryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredasApiModelsDataCheckAddDataCheckRequest {\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("    currentAddress: ").append(toIndentedString(currentAddress)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    regEntryId: ").append(toIndentedString(regEntryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkType");
    openapiFields.add("currentAddress");
    openapiFields.add("person");
    openapiFields.add("regEntryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("checkType");
    openapiRequiredFields.add("currentAddress");
    openapiRequiredFields.add("person");
    openapiRequiredFields.add("regEntryId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredasApiModelsDataCheckAddDataCheckRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredasApiModelsDataCheckAddDataCheckRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredasApiModelsDataCheckAddDataCheckRequest is not found in the empty JSON string", CredasApiModelsDataCheckAddDataCheckRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredasApiModelsDataCheckAddDataCheckRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredasApiModelsDataCheckAddDataCheckRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredasApiModelsDataCheckAddDataCheckRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `checkType`
      CheckTypeEnum.validateJsonElement(jsonObj.get("checkType"));
      // validate the required field `currentAddress`
      CredasApiModelsDataCheckAddress.validateJsonElement(jsonObj.get("currentAddress"));
      // validate the required field `person`
      CredasApiModelsDataCheckPerson.validateJsonElement(jsonObj.get("person"));
      if (!jsonObj.get("regEntryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regEntryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regEntryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredasApiModelsDataCheckAddDataCheckRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredasApiModelsDataCheckAddDataCheckRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredasApiModelsDataCheckAddDataCheckRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredasApiModelsDataCheckAddDataCheckRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CredasApiModelsDataCheckAddDataCheckRequest>() {
           @Override
           public void write(JsonWriter out, CredasApiModelsDataCheckAddDataCheckRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredasApiModelsDataCheckAddDataCheckRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredasApiModelsDataCheckAddDataCheckRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredasApiModelsDataCheckAddDataCheckRequest
   * @throws IOException if the JSON string is invalid with respect to CredasApiModelsDataCheckAddDataCheckRequest
   */
  public static CredasApiModelsDataCheckAddDataCheckRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredasApiModelsDataCheckAddDataCheckRequest.class);
  }

  /**
   * Convert an instance of CredasApiModelsDataCheckAddDataCheckRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

