/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CredasApiModelsErrorsErrorResponse from '../model/CredasApiModelsErrorsErrorResponse';
import CredasApiModelsRegistrationsAddInstantRegistrationRequest from '../model/CredasApiModelsRegistrationsAddInstantRegistrationRequest';
import CredasApiModelsRegistrationsAddInstantRegistrationResponse from '../model/CredasApiModelsRegistrationsAddInstantRegistrationResponse';
import CredasApiModelsRegistrationsAddRegistrationRequest from '../model/CredasApiModelsRegistrationsAddRegistrationRequest';
import CredasApiModelsRegistrationsAddRegistrationResponse from '../model/CredasApiModelsRegistrationsAddRegistrationResponse';
import CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse from '../model/CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse';
import CredasApiModelsRegistrationsPagedRegistrationSummary from '../model/CredasApiModelsRegistrationsPagedRegistrationSummary';
import CredasApiModelsRegistrationsRegistrationSettings from '../model/CredasApiModelsRegistrationsRegistrationSettings';
import CredasApiModelsRegistrationsRegistrationSummary from '../model/CredasApiModelsRegistrationsRegistrationSummary';
import CredasApiModelsRegistrationsSupportedIdDocument from '../model/CredasApiModelsRegistrationsSupportedIdDocument';
import CredasApiModelsRegistrationsUpdateContactDetailsRequest from '../model/CredasApiModelsRegistrationsUpdateContactDetailsRequest';
import CredasApiModelsRegistrationsUpdateRegistrationStatusRequest from '../model/CredasApiModelsRegistrationsUpdateRegistrationStatusRequest';
import CredasApiModelsStatusOverridesOverrideCheckStatusRequest from '../model/CredasApiModelsStatusOverridesOverrideCheckStatusRequest';

/**
* Registrations service.
* @module api/RegistrationsApi
* @version v1
*/
export default class RegistrationsApi {

    /**
    * Constructs a new RegistrationsApi. 
    * @alias module:api/RegistrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addInstantRegistration operation.
     * @callback module:api/RegistrationsApi~addInstantRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsAddInstantRegistrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new registration record, adds an ID document and optional selfie image in one go.
     * It's designed to provide a quick integration path for external systems which capture these details.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsRegistrationsAddInstantRegistrationRequest} [credasApiModelsRegistrationsAddInstantRegistrationRequest] The Credas.Api.Models.Registrations.AddInstantRegistrationRequest object containing required data.
     * @param {module:api/RegistrationsApi~addInstantRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsAddInstantRegistrationResponse}
     */
    addInstantRegistration(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsRegistrationsAddInstantRegistrationRequest'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addInstantRegistration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsAddInstantRegistrationResponse;
      return this.apiClient.callApi(
        '/api/registrations/instant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRegistration operation.
     * @callback module:api/RegistrationsApi~addRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsAddRegistrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsRegistrationsAddRegistrationRequest} [credasApiModelsRegistrationsAddRegistrationRequest] Object containing registration details.
     * @param {module:api/RegistrationsApi~addRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsAddRegistrationResponse}
     */
    addRegistration(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsRegistrationsAddRegistrationRequest'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addRegistration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsAddRegistrationResponse;
      return this.apiClient.callApi(
        '/api/registrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRegistrationsIdPdfExportSectionsGet operation.
     * @callback module:api/RegistrationsApi~apiRegistrationsIdPdfExportSectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a PDF report for a given registration containing specified sections
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [comments] 
     * @param {Boolean} [contactDetails] 
     * @param {Boolean} [standardChecks] 
     * @param {Boolean} [pepSanctionChecks] 
     * @param {Boolean} [proofOfOwnership] 
     * @param {Boolean} [bankAccountCheck] 
     * @param {Boolean} [creditStatusCheck] 
     * @param {Boolean} [liveness] 
     * @param {Boolean} [excludeSelfie] 
     * @param {Boolean} [excludeIDDocuments] 
     * @param {Boolean} [dIATFSection] 
     * @param {module:api/RegistrationsApi~apiRegistrationsIdPdfExportSectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    apiRegistrationsIdPdfExportSectionsGet(id, apikey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRegistrationsIdPdfExportSectionsGet");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling apiRegistrationsIdPdfExportSectionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Comments': opts['comments'],
        'ContactDetails': opts['contactDetails'],
        'StandardChecks': opts['standardChecks'],
        'PepSanctionChecks': opts['pepSanctionChecks'],
        'ProofOfOwnership': opts['proofOfOwnership'],
        'BankAccountCheck': opts['bankAccountCheck'],
        'CreditStatusCheck': opts['creditStatusCheck'],
        'Liveness': opts['liveness'],
        'ExcludeSelfie': opts['excludeSelfie'],
        'ExcludeIDDocuments': opts['excludeIDDocuments'],
        'DIATFSection': opts['dIATFSection']
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/registrations/{id}/pdf-export-sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkSubmittedIdDocuments operation.
     * @callback module:api/RegistrationsApi~checkSubmittedIdDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if submitted documents are sufficient to complete registration.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~checkSubmittedIdDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse}
     */
    checkSubmittedIdDocuments(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkSubmittedIdDocuments");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling checkSubmittedIdDocuments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse;
      return this.apiClient.callApi(
        '/api/registrations/{id}/check-submitted-id-documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationPdfExport operation.
     * @callback module:api/RegistrationsApi~getRegistrationPdfExportCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns PDF export for a given registration.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getRegistrationPdfExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getRegistrationPdfExport(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRegistrationPdfExport");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationPdfExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/registrations/{id}/pdf-export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationSearch operation.
     * @callback module:api/RegistrationsApi~getRegistrationSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsPagedRegistrationSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets paged registration list by search criteria or nothing if there are no matching fields.  Optional parameters may be appended to the query string.  Maximum page size is 50.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageNum = 0)] Zero-based page number to retrieve.
     * @param {Number} [pageSize = 50)] Number of records to return on each request (Maximum value is 50).
     * @param {String} [forename] Search by forename.
     * @param {String} [surname] Search by surname.
     * @param {String} [email] Search by user email.
     * @param {String} [dob] Date of birth in (yyyy-MM-dd) format
     * @param {module:api/RegistrationsApi~getRegistrationSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsPagedRegistrationSummary}
     */
    getRegistrationSearch(apikey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'pageNum': opts['pageNum'],
        'pageSize': opts['pageSize'],
        'forename': opts['forename'],
        'surname': opts['surname'],
        'email': opts['email'],
        'dob': opts['dob']
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsPagedRegistrationSummary;
      return this.apiClient.callApi(
        '/api/registrations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationSettings operation.
     * @callback module:api/RegistrationsApi~getRegistrationSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets registration settings or nothing if there are no settings associated with the registration.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getRegistrationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRegistrationSettings(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRegistrationSettings");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/registrations/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationSummariesByReferenceId operation.
     * @callback module:api/RegistrationsApi~getRegistrationSummariesByReferenceIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CredasApiModelsRegistrationsRegistrationSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds registrations by the ReferenceId.
     * @param {String} referenceId ReferenceId - from external system to match Registrations on.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getRegistrationSummariesByReferenceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CredasApiModelsRegistrationsRegistrationSummary>}
     */
    getRegistrationSummariesByReferenceId(referenceId, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'referenceId' is set
      if (referenceId === undefined || referenceId === null) {
        throw new Error("Missing the required parameter 'referenceId' when calling getRegistrationSummariesByReferenceId");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationSummariesByReferenceId");
      }

      let pathParams = {
        'referenceId': referenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [CredasApiModelsRegistrationsRegistrationSummary];
      return this.apiClient.callApi(
        '/api/registrations/referenceid/{referenceId}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationSummary operation.
     * @callback module:api/RegistrationsApi~getRegistrationSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsRegistrationSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds a registration by the Id.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getRegistrationSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsRegistrationSummary}
     */
    getRegistrationSummary(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRegistrationSummary");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationSummary");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsRegistrationSummary;
      return this.apiClient.callApi(
        '/api/registrations/{id}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationSummaryByRegCode operation.
     * @callback module:api/RegistrationsApi~getRegistrationSummaryByRegCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsRegistrationSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds a registration by the RegCode.
     * @param {String} regCode RegCode - short unique identifier.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getRegistrationSummaryByRegCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsRegistrationSummary}
     */
    getRegistrationSummaryByRegCode(regCode, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'regCode' is set
      if (regCode === undefined || regCode === null) {
        throw new Error("Missing the required parameter 'regCode' when calling getRegistrationSummaryByRegCode");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationSummaryByRegCode");
      }

      let pathParams = {
        'regCode': regCode
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsRegistrationSummary;
      return this.apiClient.callApi(
        '/api/registrations/regcode/{regCode}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistrationSupportedIdDocuments operation.
     * @callback module:api/RegistrationsApi~getRegistrationSupportedIdDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsRegistrationsSupportedIdDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of supported id document for the specified registration id.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getRegistrationSupportedIdDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsRegistrationsSupportedIdDocument}
     */
    getRegistrationSupportedIdDocuments(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRegistrationSupportedIdDocuments");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getRegistrationSupportedIdDocuments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsRegistrationsSupportedIdDocument;
      return this.apiClient.callApi(
        '/api/registrations/{id}/supported-id-documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShareCodePdfExport operation.
     * @callback module:api/RegistrationsApi~getShareCodePdfExportCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns settlement status PDF (Share Code) for a given registration.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~getShareCodePdfExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getShareCodePdfExport(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getShareCodePdfExport");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getShareCodePdfExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/registrations/{id}/pdf-settlement-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the overrideCheckStatus operation.
     * @callback module:api/RegistrationsApi~overrideCheckStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an override for a specific check on the registration.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsStatusOverridesOverrideCheckStatusRequest} [credasApiModelsStatusOverridesOverrideCheckStatusRequest] Request data.
     * @param {module:api/RegistrationsApi~overrideCheckStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    overrideCheckStatus(id, apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsStatusOverridesOverrideCheckStatusRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling overrideCheckStatus");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling overrideCheckStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/registrations/{id}/override-check-status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendInvitation operation.
     * @callback module:api/RegistrationsApi~resendInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resends any invitation for the specified registration.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/RegistrationsApi~resendInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendInvitation(id, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resendInvitation");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling resendInvitation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/registrations/{id}/resend-invitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactDetails operation.
     * @callback module:api/RegistrationsApi~updateContactDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a registration's contact details.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsRegistrationsUpdateContactDetailsRequest} [credasApiModelsRegistrationsUpdateContactDetailsRequest] Object containing contact details.
     * @param {module:api/RegistrationsApi~updateContactDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateContactDetails(id, apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsRegistrationsUpdateContactDetailsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateContactDetails");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling updateContactDetails");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/registrations/{id}/contact-details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegistrationSettings operation.
     * @callback module:api/RegistrationsApi~updateRegistrationSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates registration settings.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsRegistrationsRegistrationSettings} [credasApiModelsRegistrationsRegistrationSettings] Object containing registration settings.
     * @param {module:api/RegistrationsApi~updateRegistrationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRegistrationSettings(id, apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsRegistrationsRegistrationSettings'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRegistrationSettings");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling updateRegistrationSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/registrations/{id}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegistrationStatus operation.
     * @callback module:api/RegistrationsApi~updateRegistrationStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of the registration to one specified in the request.
     * @param {String} id Id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsRegistrationsUpdateRegistrationStatusRequest} [credasApiModelsRegistrationsUpdateRegistrationStatusRequest] Request object containing the details.
     * @param {module:api/RegistrationsApi~updateRegistrationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRegistrationStatus(id, apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsRegistrationsUpdateRegistrationStatusRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRegistrationStatus");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling updateRegistrationStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/registrations/{id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
