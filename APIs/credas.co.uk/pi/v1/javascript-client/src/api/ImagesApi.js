/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CredasApiModelsErrorsErrorResponse from '../model/CredasApiModelsErrorsErrorResponse';
import CredasApiModelsImagesAddIdDocumentImageRequest from '../model/CredasApiModelsImagesAddIdDocumentImageRequest';
import CredasApiModelsImagesAddIdDocumentImageResponse from '../model/CredasApiModelsImagesAddIdDocumentImageResponse';
import CredasApiModelsImagesAddLivenessImageRequest from '../model/CredasApiModelsImagesAddLivenessImageRequest';
import CredasApiModelsImagesAddSelfieImageRequest from '../model/CredasApiModelsImagesAddSelfieImageRequest';
import CredasApiModelsImagesAddSelfieImageResponse from '../model/CredasApiModelsImagesAddSelfieImageResponse';
import CredasApiModelsImagesGetIdDocumentImageResponse from '../model/CredasApiModelsImagesGetIdDocumentImageResponse';
import CredasApiModelsImagesGetLivenessImageResponse from '../model/CredasApiModelsImagesGetLivenessImageResponse';
import CredasApiModelsImagesGetLivenessPerformedImageResponse from '../model/CredasApiModelsImagesGetLivenessPerformedImageResponse';
import CredasApiModelsImagesGetSelfieImageResponse from '../model/CredasApiModelsImagesGetSelfieImageResponse';

/**
* Images service.
* @module api/ImagesApi
* @version v1
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addIdDocumentImage operation.
     * @callback module:api/ImagesApi~addIdDocumentImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsImagesAddIdDocumentImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an id document image to the specified registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsImagesAddIdDocumentImageRequest} [credasApiModelsImagesAddIdDocumentImageRequest] Object containing the id document image and registration id.
     * @param {module:api/ImagesApi~addIdDocumentImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsImagesAddIdDocumentImageResponse}
     */
    addIdDocumentImage(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsImagesAddIdDocumentImageRequest'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addIdDocumentImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsImagesAddIdDocumentImageResponse;
      return this.apiClient.callApi(
        '/api/images/id-document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addLivenessImage operation.
     * @callback module:api/ImagesApi~addLivenessImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a liveness image (UAP) to the specified registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsImagesAddLivenessImageRequest} [credasApiModelsImagesAddLivenessImageRequest] Object containing the liveness image and registration id.
     * @param {module:api/ImagesApi~addLivenessImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLivenessImage(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsImagesAddLivenessImageRequest'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addLivenessImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/images/liveness', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addSelfieImage operation.
     * @callback module:api/ImagesApi~addSelfieImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsImagesAddSelfieImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a selfie image to the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {Object} opts Optional parameters
     * @param {module:model/CredasApiModelsImagesAddSelfieImageRequest} [credasApiModelsImagesAddSelfieImageRequest] Object containing the selfie image and registration id.
     * @param {module:api/ImagesApi~addSelfieImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsImagesAddSelfieImageResponse}
     */
    addSelfieImage(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['credasApiModelsImagesAddSelfieImageRequest'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling addSelfieImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/*+xml', 'application/json', 'application/json-patch+json', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsImagesAddSelfieImageResponse;
      return this.apiClient.callApi(
        '/api/images/selfie', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdDocumentImages operation.
     * @callback module:api/ImagesApi~getIdDocumentImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CredasApiModelsImagesGetIdDocumentImageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all id document images associated with a registration.
     * @param {String} registrationId The id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/ImagesApi~getIdDocumentImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CredasApiModelsImagesGetIdDocumentImageResponse>}
     */
    getIdDocumentImages(registrationId, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getIdDocumentImages");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getIdDocumentImages");
      }

      let pathParams = {
        'registrationId': registrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [CredasApiModelsImagesGetIdDocumentImageResponse];
      return this.apiClient.callApi(
        '/api/images/id-document/{registrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLivenessImage operation.
     * @callback module:api/ImagesApi~getLivenessImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsImagesGetLivenessImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the liveness action image (UAP) associated with a registration.
     * @param {String} registrationId The id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/ImagesApi~getLivenessImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsImagesGetLivenessImageResponse}
     */
    getLivenessImage(registrationId, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getLivenessImage");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getLivenessImage");
      }

      let pathParams = {
        'registrationId': registrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsImagesGetLivenessImageResponse;
      return this.apiClient.callApi(
        '/api/images/liveness/{registrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLivenessPerformedImage operation.
     * @callback module:api/ImagesApi~getLivenessPerformedImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsImagesGetLivenessPerformedImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the liveness performed image associated with a registration.
     * @param {String} registrationId The id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/ImagesApi~getLivenessPerformedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsImagesGetLivenessPerformedImageResponse}
     */
    getLivenessPerformedImage(registrationId, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getLivenessPerformedImage");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getLivenessPerformedImage");
      }

      let pathParams = {
        'registrationId': registrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsImagesGetLivenessPerformedImageResponse;
      return this.apiClient.callApi(
        '/api/images/liveness-performed/{registrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScanReportPdf operation.
     * @callback module:api/ImagesApi~getScanReportPdfCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a detailed report on the analysis that has taken place of a scanned document
     * @param {String} scanId Id of the individual scanned document
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/ImagesApi~getScanReportPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getScanReportPdf(scanId, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling getScanReportPdf");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getScanReportPdf");
      }

      let pathParams = {
        'scanId': scanId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/images/scan-report-pdf/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfieImage operation.
     * @callback module:api/ImagesApi~getSelfieImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CredasApiModelsImagesGetSelfieImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the selfie image associated with a registration.
     * @param {String} registrationId The id of the registration.
     * @param {String} apikey ApiKey supplied.
     * @param {module:api/ImagesApi~getSelfieImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CredasApiModelsImagesGetSelfieImageResponse}
     */
    getSelfieImage(registrationId, apikey, callback) {
      let postBody = null;
      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling getSelfieImage");
      }
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getSelfieImage");
      }

      let pathParams = {
        'registrationId': registrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CredasApiModelsImagesGetSelfieImageResponse;
      return this.apiClient.callApi(
        '/api/images/selfie/{registrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
