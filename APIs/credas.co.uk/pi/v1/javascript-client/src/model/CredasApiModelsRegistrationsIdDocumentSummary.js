/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CredasApiModelsRegistrationsIdDocumentSummary model module.
 * @module model/CredasApiModelsRegistrationsIdDocumentSummary
 * @version v1
 */
class CredasApiModelsRegistrationsIdDocumentSummary {
    /**
     * Constructs a new <code>CredasApiModelsRegistrationsIdDocumentSummary</code>.
     * @alias module:model/CredasApiModelsRegistrationsIdDocumentSummary
     * @param dateCreated {Date} 
     * @param description {String} 
     * @param facialMatch {Boolean} 
     * @param id {String} 
     * @param nameCheck {Boolean} 
     * @param nameCheckMethod {module:model/CredasApiModelsRegistrationsIdDocumentSummary.NameCheckMethodEnum} Unknown = 0, Automatic = 1, Manual = 2
     * @param nfcCheck {Boolean} 
     * @param nfcReadStatus {module:model/CredasApiModelsRegistrationsIdDocumentSummary.NfcReadStatusEnum} Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9, UnavailableWebJourney = 10
     * @param status {module:model/CredasApiModelsRegistrationsIdDocumentSummary.StatusEnum} Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3
     */
    constructor(dateCreated, description, facialMatch, id, nameCheck, nameCheckMethod, nfcCheck, nfcReadStatus, status) { 
        
        CredasApiModelsRegistrationsIdDocumentSummary.initialize(this, dateCreated, description, facialMatch, id, nameCheck, nameCheckMethod, nfcCheck, nfcReadStatus, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateCreated, description, facialMatch, id, nameCheck, nameCheckMethod, nfcCheck, nfcReadStatus, status) { 
        obj['dateCreated'] = dateCreated;
        obj['description'] = description;
        obj['facialMatch'] = facialMatch;
        obj['id'] = id;
        obj['nameCheck'] = nameCheck;
        obj['nameCheckMethod'] = nameCheckMethod;
        obj['nfcCheck'] = nfcCheck;
        obj['nfcReadStatus'] = nfcReadStatus;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>CredasApiModelsRegistrationsIdDocumentSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CredasApiModelsRegistrationsIdDocumentSummary} obj Optional instance to populate.
     * @return {module:model/CredasApiModelsRegistrationsIdDocumentSummary} The populated <code>CredasApiModelsRegistrationsIdDocumentSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CredasApiModelsRegistrationsIdDocumentSummary();

            if (data.hasOwnProperty('addressCity')) {
                obj['addressCity'] = ApiClient.convertToType(data['addressCity'], 'String');
            }
            if (data.hasOwnProperty('addressFull')) {
                obj['addressFull'] = ApiClient.convertToType(data['addressFull'], 'String');
            }
            if (data.hasOwnProperty('addressPostcode')) {
                obj['addressPostcode'] = ApiClient.convertToType(data['addressPostcode'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('documentAnalysisResult')) {
                obj['documentAnalysisResult'] = ApiClient.convertToType(data['documentAnalysisResult'], 'Number');
            }
            if (data.hasOwnProperty('documentNumber')) {
                obj['documentNumber'] = ApiClient.convertToType(data['documentNumber'], 'String');
            }
            if (data.hasOwnProperty('documentSide')) {
                obj['documentSide'] = ApiClient.convertToType(data['documentSide'], 'Number');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('facialMatch')) {
                obj['facialMatch'] = ApiClient.convertToType(data['facialMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('forename')) {
                obj['forename'] = ApiClient.convertToType(data['forename'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isUnderReview')) {
                obj['isUnderReview'] = ApiClient.convertToType(data['isUnderReview'], 'Boolean');
            }
            if (data.hasOwnProperty('manuallyVerified')) {
                obj['manuallyVerified'] = ApiClient.convertToType(data['manuallyVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('mrz1')) {
                obj['mrz1'] = ApiClient.convertToType(data['mrz1'], 'String');
            }
            if (data.hasOwnProperty('mrz2')) {
                obj['mrz2'] = ApiClient.convertToType(data['mrz2'], 'String');
            }
            if (data.hasOwnProperty('mrz3')) {
                obj['mrz3'] = ApiClient.convertToType(data['mrz3'], 'String');
            }
            if (data.hasOwnProperty('nameCheck')) {
                obj['nameCheck'] = ApiClient.convertToType(data['nameCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('nameCheckMethod')) {
                obj['nameCheckMethod'] = ApiClient.convertToType(data['nameCheckMethod'], 'Number');
            }
            if (data.hasOwnProperty('nfcCheck')) {
                obj['nfcCheck'] = ApiClient.convertToType(data['nfcCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('nfcReadStatus')) {
                obj['nfcReadStatus'] = ApiClient.convertToType(data['nfcReadStatus'], 'Number');
            }
            if (data.hasOwnProperty('primaryScanId')) {
                obj['primaryScanId'] = ApiClient.convertToType(data['primaryScanId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CredasApiModelsRegistrationsIdDocumentSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CredasApiModelsRegistrationsIdDocumentSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CredasApiModelsRegistrationsIdDocumentSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressCity'] && !(typeof data['addressCity'] === 'string' || data['addressCity'] instanceof String)) {
            throw new Error("Expected the field `addressCity` to be a primitive type in the JSON string but got " + data['addressCity']);
        }
        // ensure the json data is a string
        if (data['addressFull'] && !(typeof data['addressFull'] === 'string' || data['addressFull'] instanceof String)) {
            throw new Error("Expected the field `addressFull` to be a primitive type in the JSON string but got " + data['addressFull']);
        }
        // ensure the json data is a string
        if (data['addressPostcode'] && !(typeof data['addressPostcode'] === 'string' || data['addressPostcode'] instanceof String)) {
            throw new Error("Expected the field `addressPostcode` to be a primitive type in the JSON string but got " + data['addressPostcode']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['documentNumber'] && !(typeof data['documentNumber'] === 'string' || data['documentNumber'] instanceof String)) {
            throw new Error("Expected the field `documentNumber` to be a primitive type in the JSON string but got " + data['documentNumber']);
        }
        // ensure the json data is a string
        if (data['forename'] && !(typeof data['forename'] === 'string' || data['forename'] instanceof String)) {
            throw new Error("Expected the field `forename` to be a primitive type in the JSON string but got " + data['forename']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['mrz1'] && !(typeof data['mrz1'] === 'string' || data['mrz1'] instanceof String)) {
            throw new Error("Expected the field `mrz1` to be a primitive type in the JSON string but got " + data['mrz1']);
        }
        // ensure the json data is a string
        if (data['mrz2'] && !(typeof data['mrz2'] === 'string' || data['mrz2'] instanceof String)) {
            throw new Error("Expected the field `mrz2` to be a primitive type in the JSON string but got " + data['mrz2']);
        }
        // ensure the json data is a string
        if (data['mrz3'] && !(typeof data['mrz3'] === 'string' || data['mrz3'] instanceof String)) {
            throw new Error("Expected the field `mrz3` to be a primitive type in the JSON string but got " + data['mrz3']);
        }
        // ensure the json data is a string
        if (data['primaryScanId'] && !(typeof data['primaryScanId'] === 'string' || data['primaryScanId'] instanceof String)) {
            throw new Error("Expected the field `primaryScanId` to be a primitive type in the JSON string but got " + data['primaryScanId']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }

        return true;
    }


}

CredasApiModelsRegistrationsIdDocumentSummary.RequiredProperties = ["dateCreated", "description", "facialMatch", "id", "nameCheck", "nameCheckMethod", "nfcCheck", "nfcReadStatus", "status"];

/**
 * @member {String} addressCity
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['addressCity'] = undefined;

/**
 * @member {String} addressFull
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['addressFull'] = undefined;

/**
 * @member {String} addressPostcode
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['addressPostcode'] = undefined;

/**
 * @member {String} country
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['country'] = undefined;

/**
 * @member {String} countryCode
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['countryCode'] = undefined;

/**
 * @member {Date} dateCreated
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateOfBirth
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['dateOfBirth'] = undefined;

/**
 * @member {String} description
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['description'] = undefined;

/**
 * Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11
 * @member {module:model/CredasApiModelsRegistrationsIdDocumentSummary.DocumentAnalysisResultEnum} documentAnalysisResult
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['documentAnalysisResult'] = undefined;

/**
 * @member {String} documentNumber
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['documentNumber'] = undefined;

/**
 * Front = 1, Back = 2
 * @member {module:model/CredasApiModelsRegistrationsIdDocumentSummary.DocumentSideEnum} documentSide
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['documentSide'] = undefined;

/**
 * @member {Date} expiryDate
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['expiryDate'] = undefined;

/**
 * @member {Boolean} facialMatch
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['facialMatch'] = undefined;

/**
 * @member {String} forename
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['forename'] = undefined;

/**
 * @member {String} fullName
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['fullName'] = undefined;

/**
 * @member {String} id
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['id'] = undefined;

/**
 * @member {Boolean} isUnderReview
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['isUnderReview'] = undefined;

/**
 * @member {Boolean} manuallyVerified
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['manuallyVerified'] = undefined;

/**
 * @member {String} middleName
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['middleName'] = undefined;

/**
 * @member {String} mrz1
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['mrz1'] = undefined;

/**
 * @member {String} mrz2
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['mrz2'] = undefined;

/**
 * @member {String} mrz3
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['mrz3'] = undefined;

/**
 * @member {Boolean} nameCheck
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['nameCheck'] = undefined;

/**
 * Unknown = 0, Automatic = 1, Manual = 2
 * @member {module:model/CredasApiModelsRegistrationsIdDocumentSummary.NameCheckMethodEnum} nameCheckMethod
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['nameCheckMethod'] = undefined;

/**
 * @member {Boolean} nfcCheck
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['nfcCheck'] = undefined;

/**
 * Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9, UnavailableWebJourney = 10
 * @member {module:model/CredasApiModelsRegistrationsIdDocumentSummary.NfcReadStatusEnum} nfcReadStatus
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['nfcReadStatus'] = undefined;

/**
 * @member {String} primaryScanId
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['primaryScanId'] = undefined;

/**
 * Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3
 * @member {module:model/CredasApiModelsRegistrationsIdDocumentSummary.StatusEnum} status
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['status'] = undefined;

/**
 * @member {String} surname
 */
CredasApiModelsRegistrationsIdDocumentSummary.prototype['surname'] = undefined;





/**
 * Allowed values for the <code>documentAnalysisResult</code> property.
 * @enum {Number}
 * @readonly
 */
CredasApiModelsRegistrationsIdDocumentSummary['DocumentAnalysisResultEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 11
     * @const
     */
    "11": 11
};


/**
 * Allowed values for the <code>documentSide</code> property.
 * @enum {Number}
 * @readonly
 */
CredasApiModelsRegistrationsIdDocumentSummary['DocumentSideEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};


/**
 * Allowed values for the <code>nameCheckMethod</code> property.
 * @enum {Number}
 * @readonly
 */
CredasApiModelsRegistrationsIdDocumentSummary['NameCheckMethodEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2
};


/**
 * Allowed values for the <code>nfcReadStatus</code> property.
 * @enum {Number}
 * @readonly
 */
CredasApiModelsRegistrationsIdDocumentSummary['NfcReadStatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8,

    /**
     * value: 9
     * @const
     */
    "9": 9,

    /**
     * value: 10
     * @const
     */
    "10": 10
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
CredasApiModelsRegistrationsIdDocumentSummary['StatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3
};



export default CredasApiModelsRegistrationsIdDocumentSummary;

