/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrderRequest;
import org.openapitools.client.model.CustomerTokenCreationRequest;
import org.openapitools.client.model.CustomerTokenCreationResponse;
import org.openapitools.client.model.ErrorV2;
import org.openapitools.client.model.Order;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    /**
     * Cancel an existing authorization
     *
     * Use this API call to cancel/release an authorization. If the &#x60;authorization_token&#x60; received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAuthorizationTest() throws ApiException {
        String authorizationToken = null;
        api.cancelAuthorization(authorizationToken);
        // TODO: test validations
    }

    /**
     * Create a new order
     *
     * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna&#39;s system.&lt;br/&gt;When you have received the &#x60;authorization_token&#x60; for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.&lt;br/&gt;When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](#order-management-api). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        String authorizationToken = null;
        CreateOrderRequest createOrderRequest = null;
        Order response = api.createOrder(authorizationToken, createOrderRequest);
        // TODO: test validations
    }

    /**
     * Generate a consumer token
     *
     * Use this API call to create a Klarna Customer Token.&lt;br/&gt;After having obtained an &#x60;authorization_token&#x60; for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseTokenTest() throws ApiException {
        String authorizationToken = null;
        CustomerTokenCreationRequest customerTokenCreationRequest = null;
        CustomerTokenCreationResponse response = api.purchaseToken(authorizationToken, customerTokenCreationRequest);
        // TODO: test validations
    }

}
