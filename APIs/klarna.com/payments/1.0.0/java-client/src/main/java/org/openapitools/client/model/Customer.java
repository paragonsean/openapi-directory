/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Customer {
  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_LAST_FOUR_SSN = "last_four_ssn";
  @SerializedName(SERIALIZED_NAME_LAST_FOUR_SSN)
  private String lastFourSsn;

  public static final String SERIALIZED_NAME_NATIONAL_IDENTIFICATION_NUMBER = "national_identification_number";
  @SerializedName(SERIALIZED_NAME_NATIONAL_IDENTIFICATION_NUMBER)
  private String nationalIdentificationNumber;

  /**
   * Organization entity type. Only applicable for B2B customers.
   */
  @JsonAdapter(OrganizationEntityTypeEnum.Adapter.class)
  public enum OrganizationEntityTypeEnum {
    LIMITED_COMPANY("LIMITED_COMPANY"),
    
    PUBLIC_LIMITED_COMPANY("PUBLIC_LIMITED_COMPANY"),
    
    ENTREPRENEURIAL_COMPANY("ENTREPRENEURIAL_COMPANY"),
    
    LIMITED_PARTNERSHIP_LIMITED_COMPANY("LIMITED_PARTNERSHIP_LIMITED_COMPANY"),
    
    LIMITED_PARTNERSHIP("LIMITED_PARTNERSHIP"),
    
    GENERAL_PARTNERSHIP("GENERAL_PARTNERSHIP"),
    
    REGISTERED_SOLE_TRADER("REGISTERED_SOLE_TRADER"),
    
    SOLE_TRADER("SOLE_TRADER"),
    
    CIVIL_LAW_PARTNERSHIP("CIVIL_LAW_PARTNERSHIP"),
    
    PUBLIC_INSTITUTION("PUBLIC_INSTITUTION"),
    
    OTHER("OTHER");

    private String value;

    OrganizationEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationEntityTypeEnum fromValue(String value) {
      for (OrganizationEntityTypeEnum b : OrganizationEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganizationEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_ENTITY_TYPE = "organization_entity_type";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ENTITY_TYPE)
  private OrganizationEntityTypeEnum organizationEntityType;

  public static final String SERIALIZED_NAME_ORGANIZATION_REGISTRATION_ID = "organization_registration_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_REGISTRATION_ID)
  private String organizationRegistrationId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VAT_ID = "vat_id";
  @SerializedName(SERIALIZED_NAME_VAT_ID)
  private String vatId;

  public Customer() {
  }

  public Customer dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Customer’s date of birth. The format is ‘yyyy-mm-dd’
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public Customer gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Customer’s gender - ‘male’ or ‘female’
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public Customer lastFourSsn(String lastFourSsn) {
    this.lastFourSsn = lastFourSsn;
    return this;
  }

  /**
   * Last four digits of the customer&#39;s social security number. This value is available for US customers.
   * @return lastFourSsn
   */
  @javax.annotation.Nullable
  public String getLastFourSsn() {
    return lastFourSsn;
  }

  public void setLastFourSsn(String lastFourSsn) {
    this.lastFourSsn = lastFourSsn;
  }


  public Customer nationalIdentificationNumber(String nationalIdentificationNumber) {
    this.nationalIdentificationNumber = nationalIdentificationNumber;
    return this;
  }

  /**
   * The customer&#39;s national identification number. This value is available for EU customers utilizing national identification numbers.
   * @return nationalIdentificationNumber
   */
  @javax.annotation.Nullable
  public String getNationalIdentificationNumber() {
    return nationalIdentificationNumber;
  }

  public void setNationalIdentificationNumber(String nationalIdentificationNumber) {
    this.nationalIdentificationNumber = nationalIdentificationNumber;
  }


  public Customer organizationEntityType(OrganizationEntityTypeEnum organizationEntityType) {
    this.organizationEntityType = organizationEntityType;
    return this;
  }

  /**
   * Organization entity type. Only applicable for B2B customers.
   * @return organizationEntityType
   */
  @javax.annotation.Nullable
  public OrganizationEntityTypeEnum getOrganizationEntityType() {
    return organizationEntityType;
  }

  public void setOrganizationEntityType(OrganizationEntityTypeEnum organizationEntityType) {
    this.organizationEntityType = organizationEntityType;
  }


  public Customer organizationRegistrationId(String organizationRegistrationId) {
    this.organizationRegistrationId = organizationRegistrationId;
    return this;
  }

  /**
   * Organization registration id. Only applicable for B2B customers.
   * @return organizationRegistrationId
   */
  @javax.annotation.Nullable
  public String getOrganizationRegistrationId() {
    return organizationRegistrationId;
  }

  public void setOrganizationRegistrationId(String organizationRegistrationId) {
    this.organizationRegistrationId = organizationRegistrationId;
  }


  public Customer title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Customer’s Title. Allowed values per country: UK - \&quot;Mr\&quot;, \&quot;Ms\&quot; DE - \&quot;Herr\&quot;, \&quot;Frau\&quot; AT: \&quot;Herr, \&quot;Frau\&quot; CH: de-CH: \&quot;Herr, \&quot;Frau\&quot; it-CH: \&quot;Sig.\&quot;, \&quot;Sig.ra\&quot; fr-CH: \&quot;M\&quot;, \&quot;Mme\&quot;  BE: \&quot;Dhr.\&quot;, \&quot;Mevr.\&quot; NL: \&quot;Dhr.\&quot;, \&quot;Mevr.\&quot;
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Customer type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Customer vatId(String vatId) {
    this.vatId = vatId;
    return this;
  }

  /**
   * VAT ID. Only applicable for B2B customers.
   * @return vatId
   */
  @javax.annotation.Nullable
  public String getVatId() {
    return vatId;
  }

  public void setVatId(String vatId) {
    this.vatId = vatId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.dateOfBirth, customer.dateOfBirth) &&
        Objects.equals(this.gender, customer.gender) &&
        Objects.equals(this.lastFourSsn, customer.lastFourSsn) &&
        Objects.equals(this.nationalIdentificationNumber, customer.nationalIdentificationNumber) &&
        Objects.equals(this.organizationEntityType, customer.organizationEntityType) &&
        Objects.equals(this.organizationRegistrationId, customer.organizationRegistrationId) &&
        Objects.equals(this.title, customer.title) &&
        Objects.equals(this.type, customer.type) &&
        Objects.equals(this.vatId, customer.vatId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateOfBirth, gender, lastFourSsn, nationalIdentificationNumber, organizationEntityType, organizationRegistrationId, title, type, vatId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    lastFourSsn: ").append(toIndentedString(lastFourSsn)).append("\n");
    sb.append("    nationalIdentificationNumber: ").append(toIndentedString(nationalIdentificationNumber)).append("\n");
    sb.append("    organizationEntityType: ").append(toIndentedString(organizationEntityType)).append("\n");
    sb.append("    organizationRegistrationId: ").append(toIndentedString(organizationRegistrationId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vatId: ").append(toIndentedString(vatId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_of_birth");
    openapiFields.add("gender");
    openapiFields.add("last_four_ssn");
    openapiFields.add("national_identification_number");
    openapiFields.add("organization_entity_type");
    openapiFields.add("organization_registration_id");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("vat_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Customer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date_of_birth") != null && !jsonObj.get("date_of_birth").isJsonNull()) && !jsonObj.get("date_of_birth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_of_birth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_of_birth").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("last_four_ssn") != null && !jsonObj.get("last_four_ssn").isJsonNull()) && !jsonObj.get("last_four_ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_four_ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_four_ssn").toString()));
      }
      if ((jsonObj.get("national_identification_number") != null && !jsonObj.get("national_identification_number").isJsonNull()) && !jsonObj.get("national_identification_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_identification_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_identification_number").toString()));
      }
      if ((jsonObj.get("organization_entity_type") != null && !jsonObj.get("organization_entity_type").isJsonNull()) && !jsonObj.get("organization_entity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_entity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_entity_type").toString()));
      }
      // validate the optional field `organization_entity_type`
      if (jsonObj.get("organization_entity_type") != null && !jsonObj.get("organization_entity_type").isJsonNull()) {
        OrganizationEntityTypeEnum.validateJsonElement(jsonObj.get("organization_entity_type"));
      }
      if ((jsonObj.get("organization_registration_id") != null && !jsonObj.get("organization_registration_id").isJsonNull()) && !jsonObj.get("organization_registration_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_registration_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_registration_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("vat_id") != null && !jsonObj.get("vat_id").isJsonNull()) && !jsonObj.get("vat_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Customer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Customer
   * @throws IOException if the JSON string is invalid with respect to Customer
   */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

  /**
   * Convert an instance of Customer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

