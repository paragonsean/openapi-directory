/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProductIdentifiers;
import org.openapitools.client.model.Subscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLine {
  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchant_data";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private String merchantData;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_IDENTIFIERS = "product_identifiers";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTIFIERS)
  private ProductIdentifiers productIdentifiers;

  public static final String SERIALIZED_NAME_PRODUCT_URL = "product_url";
  @SerializedName(SERIALIZED_NAME_PRODUCT_URL)
  private String productUrl;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_QUANTITY_UNIT = "quantity_unit";
  @SerializedName(SERIALIZED_NAME_QUANTITY_UNIT)
  private String quantityUnit;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private Subscription subscription;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private Long taxRate;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Long totalAmount;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT = "total_discount_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT)
  private Long totalDiscountAmount;

  public static final String SERIALIZED_NAME_TOTAL_TAX_AMOUNT = "total_tax_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_AMOUNT)
  private Long totalTaxAmount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Long unitPrice;

  public OrderLine() {
  }

  public OrderLine imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won&#39;t even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public OrderLine merchantData(String merchantData) {
    this.merchantData = merchantData;
    return this;
  }

  /**
   * Used for storing merchant&#39;s internal order number or other reference. Pass through field. (max 1024 characters)
   * @return merchantData
   */
  @javax.annotation.Nullable
  public String getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(String merchantData) {
    this.merchantData = merchantData;
  }


  public OrderLine name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Descriptive name of the order line item.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderLine productIdentifiers(ProductIdentifiers productIdentifiers) {
    this.productIdentifiers = productIdentifiers;
    return this;
  }

  /**
   * Get productIdentifiers
   * @return productIdentifiers
   */
  @javax.annotation.Nullable
  public ProductIdentifiers getProductIdentifiers() {
    return productIdentifiers;
  }

  public void setProductIdentifiers(ProductIdentifiers productIdentifiers) {
    this.productIdentifiers = productIdentifiers;
  }


  public OrderLine productUrl(String productUrl) {
    this.productUrl = productUrl;
    return this;
  }

  /**
   * URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)
   * @return productUrl
   */
  @javax.annotation.Nullable
  public String getProductUrl() {
    return productUrl;
  }

  public void setProductUrl(String productUrl) {
    this.productUrl = productUrl;
  }


  public OrderLine quantity(Long quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of the order line item. Must be a non-negative number.
   * minimum: 0
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Long getQuantity() {
    return quantity;
  }

  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public OrderLine quantityUnit(String quantityUnit) {
    this.quantityUnit = quantityUnit;
    return this;
  }

  /**
   * Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.
   * @return quantityUnit
   */
  @javax.annotation.Nullable
  public String getQuantityUnit() {
    return quantityUnit;
  }

  public void setQuantityUnit(String quantityUnit) {
    this.quantityUnit = quantityUnit;
  }


  public OrderLine reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Client facing article number, SKU or similar. Max length is 256 characters.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public OrderLine subscription(Subscription subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Get subscription
   * @return subscription
   */
  @javax.annotation.Nullable
  public Subscription getSubscription() {
    return subscription;
  }

  public void setSubscription(Subscription subscription) {
    this.subscription = subscription;
  }


  public OrderLine taxRate(Long taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 &#x3D; 19%.
   * minimum: 0
   * maximum: 10000
   * @return taxRate
   */
  @javax.annotation.Nullable
  public Long getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(Long taxRate) {
    this.taxRate = taxRate;
  }


  public OrderLine totalAmount(Long totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500&#x3D;25 euros Value &#x3D; (quantity x unit_price) - total_discount_amount.  (max value: 100000000)
   * maximum: 100000000
   * @return totalAmount
   */
  @javax.annotation.Nonnull
  public Long getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Long totalAmount) {
    this.totalAmount = totalAmount;
  }


  public OrderLine totalDiscountAmount(Long totalDiscountAmount) {
    this.totalDiscountAmount = totalDiscountAmount;
    return this;
  }

  /**
   * Non-negative minor units. Includes tax. Eg: 500&#x3D;5 euros
   * minimum: 0
   * @return totalDiscountAmount
   */
  @javax.annotation.Nullable
  public Long getTotalDiscountAmount() {
    return totalDiscountAmount;
  }

  public void setTotalDiscountAmount(Long totalDiscountAmount) {
    this.totalDiscountAmount = totalDiscountAmount;
  }


  public OrderLine totalTaxAmount(Long totalTaxAmount) {
    this.totalTaxAmount = totalTaxAmount;
    return this;
  }

  /**
   * Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.
   * @return totalTaxAmount
   */
  @javax.annotation.Nullable
  public Long getTotalTaxAmount() {
    return totalTaxAmount;
  }

  public void setTotalTaxAmount(Long totalTaxAmount) {
    this.totalTaxAmount = totalTaxAmount;
  }


  public OrderLine type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the order line item. The possible values are:  physical discount shipping_fee sales_tax digital gift_card store_credit surcharge
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OrderLine unitPrice(Long unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
   * maximum: 100000000
   * @return unitPrice
   */
  @javax.annotation.Nonnull
  public Long getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Long unitPrice) {
    this.unitPrice = unitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLine orderLine = (OrderLine) o;
    return Objects.equals(this.imageUrl, orderLine.imageUrl) &&
        Objects.equals(this.merchantData, orderLine.merchantData) &&
        Objects.equals(this.name, orderLine.name) &&
        Objects.equals(this.productIdentifiers, orderLine.productIdentifiers) &&
        Objects.equals(this.productUrl, orderLine.productUrl) &&
        Objects.equals(this.quantity, orderLine.quantity) &&
        Objects.equals(this.quantityUnit, orderLine.quantityUnit) &&
        Objects.equals(this.reference, orderLine.reference) &&
        Objects.equals(this.subscription, orderLine.subscription) &&
        Objects.equals(this.taxRate, orderLine.taxRate) &&
        Objects.equals(this.totalAmount, orderLine.totalAmount) &&
        Objects.equals(this.totalDiscountAmount, orderLine.totalDiscountAmount) &&
        Objects.equals(this.totalTaxAmount, orderLine.totalTaxAmount) &&
        Objects.equals(this.type, orderLine.type) &&
        Objects.equals(this.unitPrice, orderLine.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageUrl, merchantData, name, productIdentifiers, productUrl, quantity, quantityUnit, reference, subscription, taxRate, totalAmount, totalDiscountAmount, totalTaxAmount, type, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLine {\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productIdentifiers: ").append(toIndentedString(productIdentifiers)).append("\n");
    sb.append("    productUrl: ").append(toIndentedString(productUrl)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityUnit: ").append(toIndentedString(quantityUnit)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalDiscountAmount: ").append(toIndentedString(totalDiscountAmount)).append("\n");
    sb.append("    totalTaxAmount: ").append(toIndentedString(totalTaxAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image_url");
    openapiFields.add("merchant_data");
    openapiFields.add("name");
    openapiFields.add("product_identifiers");
    openapiFields.add("product_url");
    openapiFields.add("quantity");
    openapiFields.add("quantity_unit");
    openapiFields.add("reference");
    openapiFields.add("subscription");
    openapiFields.add("tax_rate");
    openapiFields.add("total_amount");
    openapiFields.add("total_discount_amount");
    openapiFields.add("total_tax_amount");
    openapiFields.add("type");
    openapiFields.add("unit_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("total_amount");
    openapiRequiredFields.add("unit_price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLine is not found in the empty JSON string", OrderLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLine.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("merchant_data") != null && !jsonObj.get("merchant_data").isJsonNull()) && !jsonObj.get("merchant_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_data").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `product_identifiers`
      if (jsonObj.get("product_identifiers") != null && !jsonObj.get("product_identifiers").isJsonNull()) {
        ProductIdentifiers.validateJsonElement(jsonObj.get("product_identifiers"));
      }
      if ((jsonObj.get("product_url") != null && !jsonObj.get("product_url").isJsonNull()) && !jsonObj.get("product_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_url").toString()));
      }
      if ((jsonObj.get("quantity_unit") != null && !jsonObj.get("quantity_unit").isJsonNull()) && !jsonObj.get("quantity_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity_unit").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        Subscription.validateJsonElement(jsonObj.get("subscription"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLine.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLine>() {
           @Override
           public void write(JsonWriter out, OrderLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLine
   * @throws IOException if the JSON string is invalid with respect to OrderLine
   */
  public static OrderLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLine.class);
  }

  /**
   * Convert an instance of OrderLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

