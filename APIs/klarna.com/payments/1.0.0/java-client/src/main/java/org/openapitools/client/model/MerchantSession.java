/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.PaymentMethodCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MerchantSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantSession {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "client_token";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_CATEGORIES = "payment_method_categories";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_CATEGORIES)
  private Set<PaymentMethodCategory> paymentMethodCategories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public MerchantSession() {
  }

  public MerchantSession clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Client token to be passed to the JS client while initializing the JS SDK in the next step.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public MerchantSession paymentMethodCategories(Set<PaymentMethodCategory> paymentMethodCategories) {
    this.paymentMethodCategories = paymentMethodCategories;
    return this;
  }

  public MerchantSession addPaymentMethodCategoriesItem(PaymentMethodCategory paymentMethodCategoriesItem) {
    if (this.paymentMethodCategories == null) {
      this.paymentMethodCategories = new LinkedHashSet<>();
    }
    this.paymentMethodCategories.add(paymentMethodCategoriesItem);
    return this;
  }

  /**
   * Available payment method categories for this particular session
   * @return paymentMethodCategories
   */
  @javax.annotation.Nullable
  public Set<PaymentMethodCategory> getPaymentMethodCategories() {
    return paymentMethodCategories;
  }

  public void setPaymentMethodCategories(Set<PaymentMethodCategory> paymentMethodCategories) {
    this.paymentMethodCategories = paymentMethodCategories;
  }


  public MerchantSession sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.
   * @return sessionId
   */
  @javax.annotation.Nonnull
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantSession merchantSession = (MerchantSession) o;
    return Objects.equals(this.clientToken, merchantSession.clientToken) &&
        Objects.equals(this.paymentMethodCategories, merchantSession.paymentMethodCategories) &&
        Objects.equals(this.sessionId, merchantSession.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, paymentMethodCategories, sessionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantSession {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    paymentMethodCategories: ").append(toIndentedString(paymentMethodCategories)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_token");
    openapiFields.add("payment_method_categories");
    openapiFields.add("session_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("client_token");
    openapiRequiredFields.add("session_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantSession is not found in the empty JSON string", MerchantSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantSession.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("client_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_token").toString()));
      }
      if (jsonObj.get("payment_method_categories") != null && !jsonObj.get("payment_method_categories").isJsonNull()) {
        JsonArray jsonArraypaymentMethodCategories = jsonObj.getAsJsonArray("payment_method_categories");
        if (jsonArraypaymentMethodCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_method_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_method_categories` to be an array in the JSON string but got `%s`", jsonObj.get("payment_method_categories").toString()));
          }

          // validate the optional field `payment_method_categories` (array)
          for (int i = 0; i < jsonArraypaymentMethodCategories.size(); i++) {
            PaymentMethodCategory.validateJsonElement(jsonArraypaymentMethodCategories.get(i));
          };
        }
      }
      if (!jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantSession.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantSession>() {
           @Override
           public void write(JsonWriter out, MerchantSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantSession
   * @throws IOException if the JSON string is invalid with respect to MerchantSession
   */
  public static MerchantSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantSession.class);
  }

  /**
   * Convert an instance of MerchantSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

