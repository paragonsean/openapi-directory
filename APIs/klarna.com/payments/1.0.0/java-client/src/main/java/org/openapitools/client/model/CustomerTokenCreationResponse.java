/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.CustomerReadCreateToken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomerTokenCreationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerTokenCreationResponse {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CustomerReadCreateToken customer;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_REFERENCE = "payment_method_reference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_REFERENCE)
  private String paymentMethodReference;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public CustomerTokenCreationResponse() {
  }

  public CustomerTokenCreationResponse billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public CustomerTokenCreationResponse customer(CustomerReadCreateToken customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public CustomerReadCreateToken getCustomer() {
    return customer;
  }

  public void setCustomer(CustomerReadCreateToken customer) {
    this.customer = customer;
  }


  public CustomerTokenCreationResponse paymentMethodReference(String paymentMethodReference) {
    this.paymentMethodReference = paymentMethodReference;
    return this;
  }

  /**
   * Used to connect customers with payment method when it is present.
   * @return paymentMethodReference
   */
  @javax.annotation.Nullable
  public String getPaymentMethodReference() {
    return paymentMethodReference;
  }

  public void setPaymentMethodReference(String paymentMethodReference) {
    this.paymentMethodReference = paymentMethodReference;
  }


  public CustomerTokenCreationResponse redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * URL to redirect the customer to after placing the order. This is a Klarna URL where Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public CustomerTokenCreationResponse tokenId(String tokenId) {
    this.tokenId = tokenId;
    return this;
  }

  /**
   * Generated customer token. This token will be used to create a new order for the subscription using the Create a New order using token API.
   * @return tokenId
   */
  @javax.annotation.Nonnull
  public String getTokenId() {
    return tokenId;
  }

  public void setTokenId(String tokenId) {
    this.tokenId = tokenId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerTokenCreationResponse customerTokenCreationResponse = (CustomerTokenCreationResponse) o;
    return Objects.equals(this.billingAddress, customerTokenCreationResponse.billingAddress) &&
        Objects.equals(this.customer, customerTokenCreationResponse.customer) &&
        Objects.equals(this.paymentMethodReference, customerTokenCreationResponse.paymentMethodReference) &&
        Objects.equals(this.redirectUrl, customerTokenCreationResponse.redirectUrl) &&
        Objects.equals(this.tokenId, customerTokenCreationResponse.tokenId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, customer, paymentMethodReference, redirectUrl, tokenId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerTokenCreationResponse {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    paymentMethodReference: ").append(toIndentedString(paymentMethodReference)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_address");
    openapiFields.add("customer");
    openapiFields.add("payment_method_reference");
    openapiFields.add("redirect_url");
    openapiFields.add("token_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("token_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerTokenCreationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerTokenCreationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerTokenCreationResponse is not found in the empty JSON string", CustomerTokenCreationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerTokenCreationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerTokenCreationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerTokenCreationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billing_address"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        CustomerReadCreateToken.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("payment_method_reference") != null && !jsonObj.get("payment_method_reference").isJsonNull()) && !jsonObj.get("payment_method_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_reference").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerTokenCreationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerTokenCreationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerTokenCreationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerTokenCreationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerTokenCreationResponse>() {
           @Override
           public void write(JsonWriter out, CustomerTokenCreationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerTokenCreationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerTokenCreationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerTokenCreationResponse
   * @throws IOException if the JSON string is invalid with respect to CustomerTokenCreationResponse
   */
  public static CustomerTokenCreationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerTokenCreationResponse.class);
  }

  /**
   * Convert an instance of CustomerTokenCreationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

