/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.CustomerRead;
import org.openapitools.client.model.MerchantUrls;
import org.openapitools.client.model.Options;
import org.openapitools.client.model.OrderLine;
import org.openapitools.client.model.PaymentMethodCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SessionRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionRead {
  /**
   * The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
   */
  @JsonAdapter(AcquiringChannelEnum.Adapter.class)
  public enum AcquiringChannelEnum {
    ECOMMERCE("ECOMMERCE"),
    
    IN_STORE("IN_STORE"),
    
    TELESALES("TELESALES");

    private String value;

    AcquiringChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcquiringChannelEnum fromValue(String value) {
      for (AcquiringChannelEnum b : AcquiringChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcquiringChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcquiringChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcquiringChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcquiringChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcquiringChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACQUIRING_CHANNEL = "acquiring_channel";
  @SerializedName(SERIALIZED_NAME_ACQUIRING_CHANNEL)
  private AcquiringChannelEnum acquiringChannel;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private Attachment attachment;

  public static final String SERIALIZED_NAME_AUTHORIZATION_TOKEN = "authorization_token";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TOKEN)
  private String authorizationToken;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "client_token";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CUSTOM_PAYMENT_METHOD_IDS = "custom_payment_method_ids";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAYMENT_METHOD_IDS)
  private List<String> customPaymentMethodIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CustomerRead customer;

  public static final String SERIALIZED_NAME_DESIGN = "design";
  @SerializedName(SERIALIZED_NAME_DESIGN)
  private String design;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  /**
   * Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customerâ€™s session.
   */
  @JsonAdapter(IntentEnum.Adapter.class)
  public enum IntentEnum {
    BUY("buy"),
    
    TOKENIZE("tokenize"),
    
    BUY_AND_TOKENIZE("buy_and_tokenize");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private IntentEnum intent;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchant_data";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private String merchantData;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE1 = "merchant_reference1";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE1)
  private String merchantReference1;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE2 = "merchant_reference2";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE2)
  private String merchantReference2;

  public static final String SERIALIZED_NAME_MERCHANT_URLS = "merchant_urls";
  @SerializedName(SERIALIZED_NAME_MERCHANT_URLS)
  private MerchantUrls merchantUrls;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  public static final String SERIALIZED_NAME_ORDER_AMOUNT = "order_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_AMOUNT)
  private Long orderAmount;

  public static final String SERIALIZED_NAME_ORDER_LINES = "order_lines";
  @SerializedName(SERIALIZED_NAME_ORDER_LINES)
  private List<OrderLine> orderLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_TAX_AMOUNT = "order_tax_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_TAX_AMOUNT)
  private Long orderTaxAmount;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_CATEGORIES = "payment_method_categories";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_CATEGORIES)
  private Set<PaymentMethodCategory> paymentMethodCategories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PURCHASE_COUNTRY = "purchase_country";
  @SerializedName(SERIALIZED_NAME_PURCHASE_COUNTRY)
  private String purchaseCountry;

  public static final String SERIALIZED_NAME_PURCHASE_CURRENCY = "purchase_currency";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CURRENCY)
  private String purchaseCurrency;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  /**
   * The current status of the session. Possible values: &#39;complete&#39;, &#39;incomplete&#39; where &#39;complete&#39; is set when the order has been placed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    COMPLETE("complete"),
    
    INCOMPLETE("incomplete");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public SessionRead() {
  }

  public SessionRead(
     String authorizationToken, 
     String clientToken, 
     OffsetDateTime expiresAt, 
     Set<PaymentMethodCategory> paymentMethodCategories, 
     StatusEnum status
  ) {
    this();
    this.authorizationToken = authorizationToken;
    this.clientToken = clientToken;
    this.expiresAt = expiresAt;
    this.paymentMethodCategories = paymentMethodCategories;
    this.status = status;
  }

  public SessionRead acquiringChannel(AcquiringChannelEnum acquiringChannel) {
    this.acquiringChannel = acquiringChannel;
    return this;
  }

  /**
   * The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
   * @return acquiringChannel
   */
  @javax.annotation.Nullable
  public AcquiringChannelEnum getAcquiringChannel() {
    return acquiringChannel;
  }

  public void setAcquiringChannel(AcquiringChannelEnum acquiringChannel) {
    this.acquiringChannel = acquiringChannel;
  }


  public SessionRead attachment(Attachment attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public Attachment getAttachment() {
    return attachment;
  }

  public void setAttachment(Attachment attachment) {
    this.attachment = attachment;
  }


  /**
   * Authorization token.
   * @return authorizationToken
   */
  @javax.annotation.Nullable
  public String getAuthorizationToken() {
    return authorizationToken;
  }



  public SessionRead billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  /**
   * Token to be passed to the JS client
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }



  public SessionRead customPaymentMethodIds(List<String> customPaymentMethodIds) {
    this.customPaymentMethodIds = customPaymentMethodIds;
    return this;
  }

  public SessionRead addCustomPaymentMethodIdsItem(String customPaymentMethodIdsItem) {
    if (this.customPaymentMethodIds == null) {
      this.customPaymentMethodIds = new ArrayList<>();
    }
    this.customPaymentMethodIds.add(customPaymentMethodIdsItem);
    return this;
  }

  /**
   * Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
   * @return customPaymentMethodIds
   */
  @javax.annotation.Nullable
  public List<String> getCustomPaymentMethodIds() {
    return customPaymentMethodIds;
  }

  public void setCustomPaymentMethodIds(List<String> customPaymentMethodIds) {
    this.customPaymentMethodIds = customPaymentMethodIds;
  }


  public SessionRead customer(CustomerRead customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public CustomerRead getCustomer() {
    return customer;
  }

  public void setCustomer(CustomerRead customer) {
    this.customer = customer;
  }


  public SessionRead design(String design) {
    this.design = design;
    return this;
  }

  /**
   * Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
   * @return design
   */
  @javax.annotation.Nullable
  public String getDesign() {
    return design;
  }

  public void setDesign(String design) {
    this.design = design;
  }


  /**
   * Session expiration date
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }



  public SessionRead intent(IntentEnum intent) {
    this.intent = intent;
    return this;
  }

  /**
   * Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customerâ€™s session.
   * @return intent
   */
  @javax.annotation.Nullable
  public IntentEnum getIntent() {
    return intent;
  }

  public void setIntent(IntentEnum intent) {
    this.intent = intent;
  }


  public SessionRead locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country. The following values are applicable:  AT: \&quot;de-AT\&quot;, \&quot;de-DE\&quot;, \&quot;en-DE\&quot; BE: \&quot;be-BE\&quot;, \&quot;nl-BE\&quot;, \&quot;fr-BE\&quot;, \&quot;en-BE\&quot; CH: \&quot;it-CH\&quot;, \&quot;de-CH\&quot;, \&quot;fr-CH\&quot;, \&quot;en-CH\&quot; DE: \&quot;de-DE\&quot;, \&quot;de-AT\&quot;, \&quot;en-DE\&quot; DK: \&quot;da-DK\&quot;, \&quot;en-DK\&quot; ES: \&quot;es-ES\&quot;, \&quot;ca-ES\&quot;, \&quot;en-ES\&quot; FI: \&quot;fi-FI\&quot;, \&quot;sv-FI\&quot;, \&quot;en-FI\&quot; GB: \&quot;en-GB\&quot; IT: \&quot;it-IT\&quot;, \&quot;en-IT\&quot; NL: \&quot;nl-NL\&quot;, \&quot;en-NL\&quot; NO: \&quot;nb-NO\&quot;, \&quot;en-NO\&quot; PL: \&quot;pl-PL\&quot;, \&quot;en-PL\&quot; SE: \&quot;sv-SE\&quot;, \&quot;en-SE\&quot; US: \&quot;en-US\&quot;.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public SessionRead merchantData(String merchantData) {
    this.merchantData = merchantData;
    return this;
  }

  /**
   * Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
   * @return merchantData
   */
  @javax.annotation.Nullable
  public String getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(String merchantData) {
    this.merchantData = merchantData;
  }


  public SessionRead merchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
    return this;
  }

  /**
   * Used for storing merchant&#39;s internal order number or other reference.
   * @return merchantReference1
   */
  @javax.annotation.Nullable
  public String getMerchantReference1() {
    return merchantReference1;
  }

  public void setMerchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
  }


  public SessionRead merchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
    return this;
  }

  /**
   * Used for storing merchant&#39;s internal order number or other reference. The value is available in the settlement files. (max 255 characters).
   * @return merchantReference2
   */
  @javax.annotation.Nullable
  public String getMerchantReference2() {
    return merchantReference2;
  }

  public void setMerchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
  }


  public SessionRead merchantUrls(MerchantUrls merchantUrls) {
    this.merchantUrls = merchantUrls;
    return this;
  }

  /**
   * Get merchantUrls
   * @return merchantUrls
   */
  @javax.annotation.Nullable
  public MerchantUrls getMerchantUrls() {
    return merchantUrls;
  }

  public void setMerchantUrls(MerchantUrls merchantUrls) {
    this.merchantUrls = merchantUrls;
  }


  public SessionRead options(Options options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Options getOptions() {
    return options;
  }

  public void setOptions(Options options) {
    this.options = options;
  }


  public SessionRead orderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
    return this;
  }

  /**
   * Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
   * minimum: 0
   * @return orderAmount
   */
  @javax.annotation.Nullable
  public Long getOrderAmount() {
    return orderAmount;
  }

  public void setOrderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
  }


  public SessionRead orderLines(List<OrderLine> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public SessionRead addOrderLinesItem(OrderLine orderLinesItem) {
    if (this.orderLines == null) {
      this.orderLines = new ArrayList<>();
    }
    this.orderLines.add(orderLinesItem);
    return this;
  }

  /**
   * The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
   * @return orderLines
   */
  @javax.annotation.Nullable
  public List<OrderLine> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<OrderLine> orderLines) {
    this.orderLines = orderLines;
  }


  public SessionRead orderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
    return this;
  }

  /**
   * Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
   * minimum: 0
   * @return orderTaxAmount
   */
  @javax.annotation.Nullable
  public Long getOrderTaxAmount() {
    return orderTaxAmount;
  }

  public void setOrderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
  }


  /**
   * Available payment method categories
   * @return paymentMethodCategories
   */
  @javax.annotation.Nullable
  public Set<PaymentMethodCategory> getPaymentMethodCategories() {
    return paymentMethodCategories;
  }



  public SessionRead purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

  /**
   * The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
   * @return purchaseCountry
   */
  @javax.annotation.Nullable
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }


  public SessionRead purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

  /**
   * The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
   * @return purchaseCurrency
   */
  @javax.annotation.Nullable
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }


  public SessionRead shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  /**
   * The current status of the session. Possible values: &#39;complete&#39;, &#39;incomplete&#39; where &#39;complete&#39; is set when the order has been placed.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionRead sessionRead = (SessionRead) o;
    return Objects.equals(this.acquiringChannel, sessionRead.acquiringChannel) &&
        Objects.equals(this.attachment, sessionRead.attachment) &&
        Objects.equals(this.authorizationToken, sessionRead.authorizationToken) &&
        Objects.equals(this.billingAddress, sessionRead.billingAddress) &&
        Objects.equals(this.clientToken, sessionRead.clientToken) &&
        Objects.equals(this.customPaymentMethodIds, sessionRead.customPaymentMethodIds) &&
        Objects.equals(this.customer, sessionRead.customer) &&
        Objects.equals(this.design, sessionRead.design) &&
        Objects.equals(this.expiresAt, sessionRead.expiresAt) &&
        Objects.equals(this.intent, sessionRead.intent) &&
        Objects.equals(this.locale, sessionRead.locale) &&
        Objects.equals(this.merchantData, sessionRead.merchantData) &&
        Objects.equals(this.merchantReference1, sessionRead.merchantReference1) &&
        Objects.equals(this.merchantReference2, sessionRead.merchantReference2) &&
        Objects.equals(this.merchantUrls, sessionRead.merchantUrls) &&
        Objects.equals(this.options, sessionRead.options) &&
        Objects.equals(this.orderAmount, sessionRead.orderAmount) &&
        Objects.equals(this.orderLines, sessionRead.orderLines) &&
        Objects.equals(this.orderTaxAmount, sessionRead.orderTaxAmount) &&
        Objects.equals(this.paymentMethodCategories, sessionRead.paymentMethodCategories) &&
        Objects.equals(this.purchaseCountry, sessionRead.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, sessionRead.purchaseCurrency) &&
        Objects.equals(this.shippingAddress, sessionRead.shippingAddress) &&
        Objects.equals(this.status, sessionRead.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquiringChannel, attachment, authorizationToken, billingAddress, clientToken, customPaymentMethodIds, customer, design, expiresAt, intent, locale, merchantData, merchantReference1, merchantReference2, merchantUrls, options, orderAmount, orderLines, orderTaxAmount, paymentMethodCategories, purchaseCountry, purchaseCurrency, shippingAddress, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionRead {\n");
    sb.append("    acquiringChannel: ").append(toIndentedString(acquiringChannel)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    authorizationToken: ").append(toIndentedString(authorizationToken)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    customPaymentMethodIds: ").append(toIndentedString(customPaymentMethodIds)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    design: ").append(toIndentedString(design)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    paymentMethodCategories: ").append(toIndentedString(paymentMethodCategories)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquiring_channel");
    openapiFields.add("attachment");
    openapiFields.add("authorization_token");
    openapiFields.add("billing_address");
    openapiFields.add("client_token");
    openapiFields.add("custom_payment_method_ids");
    openapiFields.add("customer");
    openapiFields.add("design");
    openapiFields.add("expires_at");
    openapiFields.add("intent");
    openapiFields.add("locale");
    openapiFields.add("merchant_data");
    openapiFields.add("merchant_reference1");
    openapiFields.add("merchant_reference2");
    openapiFields.add("merchant_urls");
    openapiFields.add("options");
    openapiFields.add("order_amount");
    openapiFields.add("order_lines");
    openapiFields.add("order_tax_amount");
    openapiFields.add("payment_method_categories");
    openapiFields.add("purchase_country");
    openapiFields.add("purchase_currency");
    openapiFields.add("shipping_address");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionRead is not found in the empty JSON string", SessionRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquiring_channel") != null && !jsonObj.get("acquiring_channel").isJsonNull()) && !jsonObj.get("acquiring_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiring_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiring_channel").toString()));
      }
      // validate the optional field `acquiring_channel`
      if (jsonObj.get("acquiring_channel") != null && !jsonObj.get("acquiring_channel").isJsonNull()) {
        AcquiringChannelEnum.validateJsonElement(jsonObj.get("acquiring_channel"));
      }
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        Attachment.validateJsonElement(jsonObj.get("attachment"));
      }
      if ((jsonObj.get("authorization_token") != null && !jsonObj.get("authorization_token").isJsonNull()) && !jsonObj.get("authorization_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_token").toString()));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billing_address"));
      }
      if ((jsonObj.get("client_token") != null && !jsonObj.get("client_token").isJsonNull()) && !jsonObj.get("client_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("custom_payment_method_ids") != null && !jsonObj.get("custom_payment_method_ids").isJsonNull() && !jsonObj.get("custom_payment_method_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_payment_method_ids` to be an array in the JSON string but got `%s`", jsonObj.get("custom_payment_method_ids").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        CustomerRead.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("design") != null && !jsonObj.get("design").isJsonNull()) && !jsonObj.get("design").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `design` to be a primitive type in the JSON string but got `%s`", jsonObj.get("design").toString()));
      }
      if ((jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) && !jsonObj.get("intent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intent").toString()));
      }
      // validate the optional field `intent`
      if (jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) {
        IntentEnum.validateJsonElement(jsonObj.get("intent"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("merchant_data") != null && !jsonObj.get("merchant_data").isJsonNull()) && !jsonObj.get("merchant_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_data").toString()));
      }
      if ((jsonObj.get("merchant_reference1") != null && !jsonObj.get("merchant_reference1").isJsonNull()) && !jsonObj.get("merchant_reference1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference1").toString()));
      }
      if ((jsonObj.get("merchant_reference2") != null && !jsonObj.get("merchant_reference2").isJsonNull()) && !jsonObj.get("merchant_reference2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference2").toString()));
      }
      // validate the optional field `merchant_urls`
      if (jsonObj.get("merchant_urls") != null && !jsonObj.get("merchant_urls").isJsonNull()) {
        MerchantUrls.validateJsonElement(jsonObj.get("merchant_urls"));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        Options.validateJsonElement(jsonObj.get("options"));
      }
      if (jsonObj.get("order_lines") != null && !jsonObj.get("order_lines").isJsonNull()) {
        JsonArray jsonArrayorderLines = jsonObj.getAsJsonArray("order_lines");
        if (jsonArrayorderLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_lines` to be an array in the JSON string but got `%s`", jsonObj.get("order_lines").toString()));
          }

          // validate the optional field `order_lines` (array)
          for (int i = 0; i < jsonArrayorderLines.size(); i++) {
            OrderLine.validateJsonElement(jsonArrayorderLines.get(i));
          };
        }
      }
      if (jsonObj.get("payment_method_categories") != null && !jsonObj.get("payment_method_categories").isJsonNull()) {
        JsonArray jsonArraypaymentMethodCategories = jsonObj.getAsJsonArray("payment_method_categories");
        if (jsonArraypaymentMethodCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_method_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_method_categories` to be an array in the JSON string but got `%s`", jsonObj.get("payment_method_categories").toString()));
          }

          // validate the optional field `payment_method_categories` (array)
          for (int i = 0; i < jsonArraypaymentMethodCategories.size(); i++) {
            PaymentMethodCategory.validateJsonElement(jsonArraypaymentMethodCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("purchase_country") != null && !jsonObj.get("purchase_country").isJsonNull()) && !jsonObj.get("purchase_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_country").toString()));
      }
      if ((jsonObj.get("purchase_currency") != null && !jsonObj.get("purchase_currency").isJsonNull()) && !jsonObj.get("purchase_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_currency").toString()));
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shipping_address"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionRead.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionRead>() {
           @Override
           public void write(JsonWriter out, SessionRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionRead
   * @throws IOException if the JSON string is invalid with respect to SessionRead
   */
  public static SessionRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionRead.class);
  }

  /**
   * Convert an instance of SessionRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

