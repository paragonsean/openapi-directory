/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizedPaymentMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErrorV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorV2 {
  public static final String SERIALIZED_NAME_AUTHORIZED_PAYMENT_METHOD = "authorized_payment_method";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_PAYMENT_METHOD)
  private AuthorizedPaymentMethod authorizedPaymentMethod;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlation_id";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_ERROR_CODE = "error_code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGES = "error_messages";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGES)
  private List<String> errorMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRAUD_STATUS = "fraud_status";
  @SerializedName(SERIALIZED_NAME_FRAUD_STATUS)
  private String fraudStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public ErrorV2() {
  }

  public ErrorV2 authorizedPaymentMethod(AuthorizedPaymentMethod authorizedPaymentMethod) {
    this.authorizedPaymentMethod = authorizedPaymentMethod;
    return this;
  }

  /**
   * Get authorizedPaymentMethod
   * @return authorizedPaymentMethod
   */
  @javax.annotation.Nullable
  public AuthorizedPaymentMethod getAuthorizedPaymentMethod() {
    return authorizedPaymentMethod;
  }

  public void setAuthorizedPaymentMethod(AuthorizedPaymentMethod authorizedPaymentMethod) {
    this.authorizedPaymentMethod = authorizedPaymentMethod;
  }


  public ErrorV2 correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * Get correlationId
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public ErrorV2 errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public ErrorV2 errorMessages(List<String> errorMessages) {
    this.errorMessages = errorMessages;
    return this;
  }

  public ErrorV2 addErrorMessagesItem(String errorMessagesItem) {
    if (this.errorMessages == null) {
      this.errorMessages = new ArrayList<>();
    }
    this.errorMessages.add(errorMessagesItem);
    return this;
  }

  /**
   * Get errorMessages
   * @return errorMessages
   */
  @javax.annotation.Nullable
  public List<String> getErrorMessages() {
    return errorMessages;
  }

  public void setErrorMessages(List<String> errorMessages) {
    this.errorMessages = errorMessages;
  }


  public ErrorV2 fraudStatus(String fraudStatus) {
    this.fraudStatus = fraudStatus;
    return this;
  }

  /**
   * Get fraudStatus
   * @return fraudStatus
   */
  @javax.annotation.Nullable
  public String getFraudStatus() {
    return fraudStatus;
  }

  public void setFraudStatus(String fraudStatus) {
    this.fraudStatus = fraudStatus;
  }


  public ErrorV2 reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorV2 errorV2 = (ErrorV2) o;
    return Objects.equals(this.authorizedPaymentMethod, errorV2.authorizedPaymentMethod) &&
        Objects.equals(this.correlationId, errorV2.correlationId) &&
        Objects.equals(this.errorCode, errorV2.errorCode) &&
        Objects.equals(this.errorMessages, errorV2.errorMessages) &&
        Objects.equals(this.fraudStatus, errorV2.fraudStatus) &&
        Objects.equals(this.reason, errorV2.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizedPaymentMethod, correlationId, errorCode, errorMessages, fraudStatus, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorV2 {\n");
    sb.append("    authorizedPaymentMethod: ").append(toIndentedString(authorizedPaymentMethod)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessages: ").append(toIndentedString(errorMessages)).append("\n");
    sb.append("    fraudStatus: ").append(toIndentedString(fraudStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorized_payment_method");
    openapiFields.add("correlation_id");
    openapiFields.add("error_code");
    openapiFields.add("error_messages");
    openapiFields.add("fraud_status");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorV2 is not found in the empty JSON string", ErrorV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorized_payment_method`
      if (jsonObj.get("authorized_payment_method") != null && !jsonObj.get("authorized_payment_method").isJsonNull()) {
        AuthorizedPaymentMethod.validateJsonElement(jsonObj.get("authorized_payment_method"));
      }
      if ((jsonObj.get("correlation_id") != null && !jsonObj.get("correlation_id").isJsonNull()) && !jsonObj.get("correlation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlation_id").toString()));
      }
      if ((jsonObj.get("error_code") != null && !jsonObj.get("error_code").isJsonNull()) && !jsonObj.get("error_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("error_messages") != null && !jsonObj.get("error_messages").isJsonNull() && !jsonObj.get("error_messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_messages` to be an array in the JSON string but got `%s`", jsonObj.get("error_messages").toString()));
      }
      if ((jsonObj.get("fraud_status") != null && !jsonObj.get("fraud_status").isJsonNull()) && !jsonObj.get("fraud_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraud_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fraud_status").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorV2.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorV2>() {
           @Override
           public void write(JsonWriter out, ErrorV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorV2
   * @throws IOException if the JSON string is invalid with respect to ErrorV2
   */
  public static ErrorV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorV2.class);
  }

  /**
   * Convert an instance of ErrorV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

