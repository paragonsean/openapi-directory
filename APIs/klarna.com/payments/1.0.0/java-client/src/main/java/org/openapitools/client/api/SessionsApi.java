/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MerchantSession;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.SessionCreate;
import org.openapitools.client.model.SessionRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCreditSession
     * @param sessionCreate session_request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditSessionCall(SessionCreate sessionCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionCreate;

        // create path and map variables
        String localVarPath = "/payments/v1/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditSessionValidateBeforeCall(SessionCreate sessionCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionCreate' is set
        if (sessionCreate == null) {
            throw new ApiException("Missing the required parameter 'sessionCreate' when calling createCreditSession(Async)");
        }

        return createCreditSessionCall(sessionCreate, _callback);

    }

    /**
     * Create a new payment session
     * Use this API call to create a Klarna Payments session.&lt;br/&gt;When a session is created you will receive the available &#x60;payment_method_categories&#x60; for the session, a &#x60;session_id&#x60; and a &#x60;client_token&#x60;. The &#x60;session_id&#x60; can be used to read or update the session using the REST API. The &#x60;client_token&#x60; should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
     * @param sessionCreate session_request (required)
     * @return MerchantSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantSession createCreditSession(SessionCreate sessionCreate) throws ApiException {
        ApiResponse<MerchantSession> localVarResp = createCreditSessionWithHttpInfo(sessionCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new payment session
     * Use this API call to create a Klarna Payments session.&lt;br/&gt;When a session is created you will receive the available &#x60;payment_method_categories&#x60; for the session, a &#x60;session_id&#x60; and a &#x60;client_token&#x60;. The &#x60;session_id&#x60; can be used to read or update the session using the REST API. The &#x60;client_token&#x60; should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
     * @param sessionCreate session_request (required)
     * @return ApiResponse&lt;MerchantSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantSession> createCreditSessionWithHttpInfo(SessionCreate sessionCreate) throws ApiException {
        okhttp3.Call localVarCall = createCreditSessionValidateBeforeCall(sessionCreate, null);
        Type localVarReturnType = new TypeToken<MerchantSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new payment session (asynchronously)
     * Use this API call to create a Klarna Payments session.&lt;br/&gt;When a session is created you will receive the available &#x60;payment_method_categories&#x60; for the session, a &#x60;session_id&#x60; and a &#x60;client_token&#x60;. The &#x60;session_id&#x60; can be used to read or update the session using the REST API. The &#x60;client_token&#x60; should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
     * @param sessionCreate session_request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditSessionAsync(SessionCreate sessionCreate, final ApiCallback<MerchantSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditSessionValidateBeforeCall(sessionCreate, _callback);
        Type localVarReturnType = new TypeToken<MerchantSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readCreditSession
     * @param sessionId session_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readCreditSessionCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/sessions/{session_id}"
            .replace("{" + "session_id" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readCreditSessionValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling readCreditSession(Async)");
        }

        return readCreditSessionCall(sessionId, _callback);

    }

    /**
     * Read an existing payment session
     * Use this API call to read a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
     * @param sessionId session_id (required)
     * @return SessionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public SessionRead readCreditSession(String sessionId) throws ApiException {
        ApiResponse<SessionRead> localVarResp = readCreditSessionWithHttpInfo(sessionId);
        return localVarResp.getData();
    }

    /**
     * Read an existing payment session
     * Use this API call to read a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
     * @param sessionId session_id (required)
     * @return ApiResponse&lt;SessionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionRead> readCreditSessionWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = readCreditSessionValidateBeforeCall(sessionId, null);
        Type localVarReturnType = new TypeToken<SessionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read an existing payment session (asynchronously)
     * Use this API call to read a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
     * @param sessionId session_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readCreditSessionAsync(String sessionId, final ApiCallback<SessionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = readCreditSessionValidateBeforeCall(sessionId, _callback);
        Type localVarReturnType = new TypeToken<SessionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCreditSession
     * @param sessionId session_id (required)
     * @param session session_request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The session was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to update the session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreditSessionCall(String sessionId, Session session, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = session;

        // create path and map variables
        String localVarPath = "/payments/v1/sessions/{session_id}"
            .replace("{" + "session_id" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCreditSessionValidateBeforeCall(String sessionId, Session session, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling updateCreditSession(Async)");
        }

        // verify the required parameter 'session' is set
        if (session == null) {
            throw new ApiException("Missing the required parameter 'session' when calling updateCreditSession(Async)");
        }

        return updateCreditSessionCall(sessionId, session, _callback);

    }

    /**
     * Update an existing payment session
     * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
     * @param sessionId session_id (required)
     * @param session session_request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The session was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to update the session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void updateCreditSession(String sessionId, Session session) throws ApiException {
        updateCreditSessionWithHttpInfo(sessionId, session);
    }

    /**
     * Update an existing payment session
     * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
     * @param sessionId session_id (required)
     * @param session session_request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The session was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to update the session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCreditSessionWithHttpInfo(String sessionId, Session session) throws ApiException {
        okhttp3.Call localVarCall = updateCreditSessionValidateBeforeCall(sessionId, session, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing payment session (asynchronously)
     * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
     * @param sessionId session_id (required)
     * @param session session_request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The session was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to update the session with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The session does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCreditSessionAsync(String sessionId, Session session, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCreditSessionValidateBeforeCall(sessionId, session, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
