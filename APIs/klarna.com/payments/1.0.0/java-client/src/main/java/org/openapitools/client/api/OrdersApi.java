/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrderRequest;
import org.openapitools.client.model.CustomerTokenCreationRequest;
import org.openapitools.client.model.CustomerTokenCreationResponse;
import org.openapitools.client.model.ErrorV2;
import org.openapitools.client.model.Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelAuthorization
     * @param authorizationToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authorization was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAuthorizationCall(String authorizationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/authorizations/{authorizationToken}"
            .replace("{" + "authorizationToken" + "}", localVarApiClient.escapeString(authorizationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAuthorizationValidateBeforeCall(String authorizationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationToken' is set
        if (authorizationToken == null) {
            throw new ApiException("Missing the required parameter 'authorizationToken' when calling cancelAuthorization(Async)");
        }

        return cancelAuthorizationCall(authorizationToken, _callback);

    }

    /**
     * Cancel an existing authorization
     * Use this API call to cancel/release an authorization. If the &#x60;authorization_token&#x60; received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
     * @param authorizationToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authorization was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelAuthorization(String authorizationToken) throws ApiException {
        cancelAuthorizationWithHttpInfo(authorizationToken);
    }

    /**
     * Cancel an existing authorization
     * Use this API call to cancel/release an authorization. If the &#x60;authorization_token&#x60; received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
     * @param authorizationToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authorization was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelAuthorizationWithHttpInfo(String authorizationToken) throws ApiException {
        okhttp3.Call localVarCall = cancelAuthorizationValidateBeforeCall(authorizationToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel an existing authorization (asynchronously)
     * Use this API call to cancel/release an authorization. If the &#x60;authorization_token&#x60; received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
     * @param authorizationToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The authorization was cancelled successfully. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAuthorizationAsync(String authorizationToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAuthorizationValidateBeforeCall(authorizationToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrder
     * @param authorizationToken  (required)
     * @param createOrderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(String authorizationToken, CreateOrderRequest createOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrderRequest;

        // create path and map variables
        String localVarPath = "/payments/v1/authorizations/{authorizationToken}/order"
            .replace("{" + "authorizationToken" + "}", localVarApiClient.escapeString(authorizationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(String authorizationToken, CreateOrderRequest createOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationToken' is set
        if (authorizationToken == null) {
            throw new ApiException("Missing the required parameter 'authorizationToken' when calling createOrder(Async)");
        }

        return createOrderCall(authorizationToken, createOrderRequest, _callback);

    }

    /**
     * Create a new order
     * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna&#39;s system.&lt;br/&gt;When you have received the &#x60;authorization_token&#x60; for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.&lt;br/&gt;When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](#order-management-api). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
     * @param authorizationToken  (required)
     * @param createOrderRequest  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public Order createOrder(String authorizationToken, CreateOrderRequest createOrderRequest) throws ApiException {
        ApiResponse<Order> localVarResp = createOrderWithHttpInfo(authorizationToken, createOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new order
     * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna&#39;s system.&lt;br/&gt;When you have received the &#x60;authorization_token&#x60; for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.&lt;br/&gt;When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](#order-management-api). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
     * @param authorizationToken  (required)
     * @param createOrderRequest  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createOrderWithHttpInfo(String authorizationToken, CreateOrderRequest createOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(authorizationToken, createOrderRequest, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new order (asynchronously)
     * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna&#39;s system.&lt;br/&gt;When you have received the &#x60;authorization_token&#x60; for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.&lt;br/&gt;When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](#order-management-api). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
     * @param authorizationToken  (required)
     * @param createOrderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Order was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(String authorizationToken, CreateOrderRequest createOrderRequest, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(authorizationToken, createOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchaseToken
     * @param authorizationToken  (required)
     * @param customerTokenCreationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a customer token with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseTokenCall(String authorizationToken, CustomerTokenCreationRequest customerTokenCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerTokenCreationRequest;

        // create path and map variables
        String localVarPath = "/payments/v1/authorizations/{authorizationToken}/customer-token"
            .replace("{" + "authorizationToken" + "}", localVarApiClient.escapeString(authorizationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseTokenValidateBeforeCall(String authorizationToken, CustomerTokenCreationRequest customerTokenCreationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationToken' is set
        if (authorizationToken == null) {
            throw new ApiException("Missing the required parameter 'authorizationToken' when calling purchaseToken(Async)");
        }

        return purchaseTokenCall(authorizationToken, customerTokenCreationRequest, _callback);

    }

    /**
     * Generate a consumer token
     * Use this API call to create a Klarna Customer Token.&lt;br/&gt;After having obtained an &#x60;authorization_token&#x60; for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
     * @param authorizationToken  (required)
     * @param customerTokenCreationRequest  (optional)
     * @return CustomerTokenCreationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a customer token with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public CustomerTokenCreationResponse purchaseToken(String authorizationToken, CustomerTokenCreationRequest customerTokenCreationRequest) throws ApiException {
        ApiResponse<CustomerTokenCreationResponse> localVarResp = purchaseTokenWithHttpInfo(authorizationToken, customerTokenCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a consumer token
     * Use this API call to create a Klarna Customer Token.&lt;br/&gt;After having obtained an &#x60;authorization_token&#x60; for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
     * @param authorizationToken  (required)
     * @param customerTokenCreationRequest  (optional)
     * @return ApiResponse&lt;CustomerTokenCreationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a customer token with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerTokenCreationResponse> purchaseTokenWithHttpInfo(String authorizationToken, CustomerTokenCreationRequest customerTokenCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseTokenValidateBeforeCall(authorizationToken, customerTokenCreationRequest, null);
        Type localVarReturnType = new TypeToken<CustomerTokenCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a consumer token (asynchronously)
     * Use this API call to create a Klarna Customer Token.&lt;br/&gt;After having obtained an &#x60;authorization_token&#x60; for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
     * @param authorizationToken  (required)
     * @param customerTokenCreationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create a customer token with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The authorization does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data in the request does not match the session for the authorization. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchaseTokenAsync(String authorizationToken, CustomerTokenCreationRequest customerTokenCreationRequest, final ApiCallback<CustomerTokenCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseTokenValidateBeforeCall(authorizationToken, customerTokenCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerTokenCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
