/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductIdentifiers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductIdentifiers {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CATEGORY_PATH = "category_path";
  @SerializedName(SERIALIZED_NAME_CATEGORY_PATH)
  private String categoryPath;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_GLOBAL_TRADE_ITEM_NUMBER = "global_trade_item_number";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TRADE_ITEM_NUMBER)
  private String globalTradeItemNumber;

  public static final String SERIALIZED_NAME_MANUFACTURER_PART_NUMBER = "manufacturer_part_number";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_PART_NUMBER)
  private String manufacturerPartNumber;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public ProductIdentifiers() {
  }

  public ProductIdentifiers brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * The product&#39;s brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public ProductIdentifiers categoryPath(String categoryPath) {
    this.categoryPath = categoryPath;
    return this;
  }

  /**
   * The product&#39;s category path as used in the merchant&#39;s webshop. Include the full and most detailed category and separate the segments with &#39; &gt; &#39;
   * @return categoryPath
   */
  @javax.annotation.Nullable
  public String getCategoryPath() {
    return categoryPath;
  }

  public void setCategoryPath(String categoryPath) {
    this.categoryPath = categoryPath;
  }


  public ProductIdentifiers color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Color to be shown to the end customer (max 64 characters).
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public ProductIdentifiers globalTradeItemNumber(String globalTradeItemNumber) {
    this.globalTradeItemNumber = globalTradeItemNumber;
    return this;
  }

  /**
   * The product&#39;s Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible
   * @return globalTradeItemNumber
   */
  @javax.annotation.Nullable
  public String getGlobalTradeItemNumber() {
    return globalTradeItemNumber;
  }

  public void setGlobalTradeItemNumber(String globalTradeItemNumber) {
    this.globalTradeItemNumber = globalTradeItemNumber;
  }


  public ProductIdentifiers manufacturerPartNumber(String manufacturerPartNumber) {
    this.manufacturerPartNumber = manufacturerPartNumber;
    return this;
  }

  /**
   * The product&#39;s Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible
   * @return manufacturerPartNumber
   */
  @javax.annotation.Nullable
  public String getManufacturerPartNumber() {
    return manufacturerPartNumber;
  }

  public void setManufacturerPartNumber(String manufacturerPartNumber) {
    this.manufacturerPartNumber = manufacturerPartNumber;
  }


  public ProductIdentifiers size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Size to be shown to the end customer (max 64 characters).
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductIdentifiers productIdentifiers = (ProductIdentifiers) o;
    return Objects.equals(this.brand, productIdentifiers.brand) &&
        Objects.equals(this.categoryPath, productIdentifiers.categoryPath) &&
        Objects.equals(this.color, productIdentifiers.color) &&
        Objects.equals(this.globalTradeItemNumber, productIdentifiers.globalTradeItemNumber) &&
        Objects.equals(this.manufacturerPartNumber, productIdentifiers.manufacturerPartNumber) &&
        Objects.equals(this.size, productIdentifiers.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, categoryPath, color, globalTradeItemNumber, manufacturerPartNumber, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductIdentifiers {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    categoryPath: ").append(toIndentedString(categoryPath)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    globalTradeItemNumber: ").append(toIndentedString(globalTradeItemNumber)).append("\n");
    sb.append("    manufacturerPartNumber: ").append(toIndentedString(manufacturerPartNumber)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("category_path");
    openapiFields.add("color");
    openapiFields.add("global_trade_item_number");
    openapiFields.add("manufacturer_part_number");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductIdentifiers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductIdentifiers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductIdentifiers is not found in the empty JSON string", ProductIdentifiers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductIdentifiers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductIdentifiers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("category_path") != null && !jsonObj.get("category_path").isJsonNull()) && !jsonObj.get("category_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_path").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("global_trade_item_number") != null && !jsonObj.get("global_trade_item_number").isJsonNull()) && !jsonObj.get("global_trade_item_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `global_trade_item_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("global_trade_item_number").toString()));
      }
      if ((jsonObj.get("manufacturer_part_number") != null && !jsonObj.get("manufacturer_part_number").isJsonNull()) && !jsonObj.get("manufacturer_part_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer_part_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer_part_number").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductIdentifiers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductIdentifiers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductIdentifiers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductIdentifiers.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductIdentifiers>() {
           @Override
           public void write(JsonWriter out, ProductIdentifiers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductIdentifiers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductIdentifiers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductIdentifiers
   * @throws IOException if the JSON string is invalid with respect to ProductIdentifiers
   */
  public static ProductIdentifiers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductIdentifiers.class);
  }

  /**
   * Convert an instance of ProductIdentifiers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

