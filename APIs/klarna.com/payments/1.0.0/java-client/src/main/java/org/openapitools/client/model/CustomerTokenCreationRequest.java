/*
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Customer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomerTokenCreationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:43.189997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerTokenCreationRequest {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Intended use for the token.
   */
  @JsonAdapter(IntendedUseEnum.Adapter.class)
  public enum IntendedUseEnum {
    SUBSCRIPTION("SUBSCRIPTION");

    private String value;

    IntendedUseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntendedUseEnum fromValue(String value) {
      for (IntendedUseEnum b : IntendedUseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntendedUseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntendedUseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntendedUseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntendedUseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntendedUseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTENDED_USE = "intended_use";
  @SerializedName(SERIALIZED_NAME_INTENDED_USE)
  private IntendedUseEnum intendedUse;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_PURCHASE_COUNTRY = "purchase_country";
  @SerializedName(SERIALIZED_NAME_PURCHASE_COUNTRY)
  private String purchaseCountry;

  public static final String SERIALIZED_NAME_PURCHASE_CURRENCY = "purchase_currency";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CURRENCY)
  private String purchaseCurrency;

  public CustomerTokenCreationRequest() {
  }

  public CustomerTokenCreationRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public CustomerTokenCreationRequest customer(Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public CustomerTokenCreationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the purpose of the token.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CustomerTokenCreationRequest intendedUse(IntendedUseEnum intendedUse) {
    this.intendedUse = intendedUse;
    return this;
  }

  /**
   * Intended use for the token.
   * @return intendedUse
   */
  @javax.annotation.Nonnull
  public IntendedUseEnum getIntendedUse() {
    return intendedUse;
  }

  public void setIntendedUse(IntendedUseEnum intendedUse) {
    this.intendedUse = intendedUse;
  }


  public CustomerTokenCreationRequest locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * RFC 1766 customer&#39;s locale.
   * @return locale
   */
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public CustomerTokenCreationRequest purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

  /**
   * ISO 3166 alpha-2 purchase country.
   * @return purchaseCountry
   */
  @javax.annotation.Nonnull
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }


  public CustomerTokenCreationRequest purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

  /**
   * ISO 4217 purchase currency.
   * @return purchaseCurrency
   */
  @javax.annotation.Nonnull
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerTokenCreationRequest customerTokenCreationRequest = (CustomerTokenCreationRequest) o;
    return Objects.equals(this.billingAddress, customerTokenCreationRequest.billingAddress) &&
        Objects.equals(this.customer, customerTokenCreationRequest.customer) &&
        Objects.equals(this.description, customerTokenCreationRequest.description) &&
        Objects.equals(this.intendedUse, customerTokenCreationRequest.intendedUse) &&
        Objects.equals(this.locale, customerTokenCreationRequest.locale) &&
        Objects.equals(this.purchaseCountry, customerTokenCreationRequest.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, customerTokenCreationRequest.purchaseCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, customer, description, intendedUse, locale, purchaseCountry, purchaseCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerTokenCreationRequest {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    intendedUse: ").append(toIndentedString(intendedUse)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_address");
    openapiFields.add("customer");
    openapiFields.add("description");
    openapiFields.add("intended_use");
    openapiFields.add("locale");
    openapiFields.add("purchase_country");
    openapiFields.add("purchase_currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("intended_use");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("purchase_country");
    openapiRequiredFields.add("purchase_currency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerTokenCreationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerTokenCreationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerTokenCreationRequest is not found in the empty JSON string", CustomerTokenCreationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerTokenCreationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerTokenCreationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerTokenCreationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billing_address"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonElement(jsonObj.get("customer"));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("intended_use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intended_use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intended_use").toString()));
      }
      // validate the required field `intended_use`
      IntendedUseEnum.validateJsonElement(jsonObj.get("intended_use"));
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (!jsonObj.get("purchase_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_country").toString()));
      }
      if (!jsonObj.get("purchase_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerTokenCreationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerTokenCreationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerTokenCreationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerTokenCreationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerTokenCreationRequest>() {
           @Override
           public void write(JsonWriter out, CustomerTokenCreationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerTokenCreationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerTokenCreationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerTokenCreationRequest
   * @throws IOException if the JSON string is invalid with respect to CustomerTokenCreationRequest
   */
  public static CustomerTokenCreationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerTokenCreationRequest.class);
  }

  /**
   * Convert an instance of CustomerTokenCreationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

