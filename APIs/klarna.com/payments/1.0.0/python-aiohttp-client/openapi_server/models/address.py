# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attention: str=None, city: str=None, country: str=None, email: str=None, family_name: str=None, given_name: str=None, organization_name: str=None, phone: str=None, postal_code: str=None, region: str=None, street_address: str=None, street_address2: str=None, title: str=None):
        """Address - a model defined in OpenAPI

        :param attention: The attention of this Address.
        :param city: The city of this Address.
        :param country: The country of this Address.
        :param email: The email of this Address.
        :param family_name: The family_name of this Address.
        :param given_name: The given_name of this Address.
        :param organization_name: The organization_name of this Address.
        :param phone: The phone of this Address.
        :param postal_code: The postal_code of this Address.
        :param region: The region of this Address.
        :param street_address: The street_address of this Address.
        :param street_address2: The street_address2 of this Address.
        :param title: The title of this Address.
        """
        self.openapi_types = {
            'attention': str,
            'city': str,
            'country': str,
            'email': str,
            'family_name': str,
            'given_name': str,
            'organization_name': str,
            'phone': str,
            'postal_code': str,
            'region': str,
            'street_address': str,
            'street_address2': str,
            'title': str
        }

        self.attribute_map = {
            'attention': 'attention',
            'city': 'city',
            'country': 'country',
            'email': 'email',
            'family_name': 'family_name',
            'given_name': 'given_name',
            'organization_name': 'organization_name',
            'phone': 'phone',
            'postal_code': 'postal_code',
            'region': 'region',
            'street_address': 'street_address',
            'street_address2': 'street_address2',
            'title': 'title'
        }

        self._attention = attention
        self._city = city
        self._country = country
        self._email = email
        self._family_name = family_name
        self._given_name = given_name
        self._organization_name = organization_name
        self._phone = phone
        self._postal_code = postal_code
        self._region = region
        self._street_address = street_address
        self._street_address2 = street_address2
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attention(self):
        """Gets the attention of this Address.

        ‘Attn.’ (if applicable). Only applicable for B2B customers.

        :return: The attention of this Address.
        :rtype: str
        """
        return self._attention

    @attention.setter
    def attention(self, attention):
        """Sets the attention of this Address.

        ‘Attn.’ (if applicable). Only applicable for B2B customers.

        :param attention: The attention of this Address.
        :type attention: str
        """
        if attention is not None and len(attention) > 99:
            raise ValueError("Invalid value for `attention`, length must be less than or equal to `99`")
        if attention is not None and len(attention) < 0:
            raise ValueError("Invalid value for `attention`, length must be greater than or equal to `0`")

        self._attention = attention

    @property
    def city(self):
        """Gets the city of this Address.

        Customer’s city.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Customer’s city.

        :param city: The city of this Address.
        :type city: str
        """
        if city is not None and len(city) > 99:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `99`")
        if city is not None and len(city) < 0:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `0`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        Customer’s country. This value overrides the purchase country if they are different. Should follow the standard of ISO 3166 alpha-2. E.g. GB, US, DE, SE.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Customer’s country. This value overrides the purchase country if they are different. Should follow the standard of ISO 3166 alpha-2. E.g. GB, US, DE, SE.

        :param country: The country of this Address.
        :type country: str
        """
        if country is not None and not re.search(r'^[A-Za-z]{2,2}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Za-z]{2,2}$/`")

        self._country = country

    @property
    def email(self):
        """Gets the email of this Address.

        Customer’s email address.

        :return: The email of this Address.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Address.

        Customer’s email address.

        :param email: The email of this Address.
        :type email: str
        """
        if email is not None and len(email) > 99:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `99`")
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")

        self._email = email

    @property
    def family_name(self):
        """Gets the family_name of this Address.

        Customers family name in UTF-8 encoding. Cannot be only numbers, must be more than 1 character. Allowed special characters: -'’. More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)

        :return: The family_name of this Address.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Address.

        Customers family name in UTF-8 encoding. Cannot be only numbers, must be more than 1 character. Allowed special characters: -'’. More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)

        :param family_name: The family_name of this Address.
        :type family_name: str
        """
        if family_name is not None and len(family_name) > 99:
            raise ValueError("Invalid value for `family_name`, length must be less than or equal to `99`")
        if family_name is not None and len(family_name) < 0:
            raise ValueError("Invalid value for `family_name`, length must be greater than or equal to `0`")

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this Address.

        Customers given name in UTF-8 encoding. Cannot be only numbers, must be more than 1 character. Allowed special characters: -'’. More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)

        :return: The given_name of this Address.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Address.

        Customers given name in UTF-8 encoding. Cannot be only numbers, must be more than 1 character. Allowed special characters: -'’. More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)

        :param given_name: The given_name of this Address.
        :type given_name: str
        """
        if given_name is not None and len(given_name) > 99:
            raise ValueError("Invalid value for `given_name`, length must be less than or equal to `99`")
        if given_name is not None and len(given_name) < 0:
            raise ValueError("Invalid value for `given_name`, length must be greater than or equal to `0`")

        self._given_name = given_name

    @property
    def organization_name(self):
        """Gets the organization_name of this Address.

        Organization name (if applicable). Only applicable for B2B customers.

        :return: The organization_name of this Address.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this Address.

        Organization name (if applicable). Only applicable for B2B customers.

        :param organization_name: The organization_name of this Address.
        :type organization_name: str
        """
        if organization_name is not None and len(organization_name) > 99:
            raise ValueError("Invalid value for `organization_name`, length must be less than or equal to `99`")
        if organization_name is not None and len(organization_name) < 0:
            raise ValueError("Invalid value for `organization_name`, length must be greater than or equal to `0`")

        self._organization_name = organization_name

    @property
    def phone(self):
        """Gets the phone of this Address.

        Phone number. Preferably a mobile phone number.

        :return: The phone of this Address.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Address.

        Phone number. Preferably a mobile phone number.

        :param phone: The phone of this Address.
        :type phone: str
        """
        if phone is not None and len(phone) > 99:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `99`")
        if phone is not None and len(phone) < 5:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `5`")

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        Customer’s postal code. Validation according to Universal Postal Union addressing systems. E.g. 12345, W1G OPW.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Customer’s postal code. Validation according to Universal Postal Union addressing systems. E.g. 12345, W1G OPW.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 10:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `10`")
        if postal_code is not None and len(postal_code) < 0:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `0`")

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Address.

        Customer’s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc.

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        Customer’s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc.

        :param region: The region of this Address.
        :type region: str
        """
        if region is not None and len(region) > 99:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `99`")
        if region is not None and len(region) < 0:
            raise ValueError("Invalid value for `region`, length must be greater than or equal to `0`")

        self._region = region

    @property
    def street_address(self):
        """Gets the street_address of this Address.

        Customer’s street address. Regional formatting is required, as follows: UK/US/FR: 33 Cavendish Square Rest of EU: De Ruijterkade 7

        :return: The street_address of this Address.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Address.

        Customer’s street address. Regional formatting is required, as follows: UK/US/FR: 33 Cavendish Square Rest of EU: De Ruijterkade 7

        :param street_address: The street_address of this Address.
        :type street_address: str
        """
        if street_address is not None and len(street_address) > 99:
            raise ValueError("Invalid value for `street_address`, length must be less than or equal to `99`")
        if street_address is not None and len(street_address) < 0:
            raise ValueError("Invalid value for `street_address`, length must be greater than or equal to `0`")

        self._street_address = street_address

    @property
    def street_address2(self):
        """Gets the street_address2 of this Address.

        Customer’s street address. Second Line. 

        :return: The street_address2 of this Address.
        :rtype: str
        """
        return self._street_address2

    @street_address2.setter
    def street_address2(self, street_address2):
        """Sets the street_address2 of this Address.

        Customer’s street address. Second Line. 

        :param street_address2: The street_address2 of this Address.
        :type street_address2: str
        """
        if street_address2 is not None and len(street_address2) > 99:
            raise ValueError("Invalid value for `street_address2`, length must be less than or equal to `99`")
        if street_address2 is not None and len(street_address2) < 0:
            raise ValueError("Invalid value for `street_address2`, length must be greater than or equal to `0`")

        self._street_address2 = street_address2

    @property
    def title(self):
        """Gets the title of this Address.

        Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"

        :return: The title of this Address.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Address.

        Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"

        :param title: The title of this Address.
        :type title: str
        """
        if title is not None and len(title) > 20:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `20`")
        if title is not None and len(title) < 0:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `0`")

        self._title = title
