# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_identifiers import ProductIdentifiers
from openapi_server.models.subscription import Subscription
from openapi_server import util


class OrderLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_url: str=None, merchant_data: str=None, name: str=None, product_identifiers: ProductIdentifiers=None, product_url: str=None, quantity: int=None, quantity_unit: str=None, reference: str=None, subscription: Subscription=None, tax_rate: int=None, total_amount: int=None, total_discount_amount: int=None, total_tax_amount: int=None, type: str=None, unit_price: int=None):
        """OrderLine - a model defined in OpenAPI

        :param image_url: The image_url of this OrderLine.
        :param merchant_data: The merchant_data of this OrderLine.
        :param name: The name of this OrderLine.
        :param product_identifiers: The product_identifiers of this OrderLine.
        :param product_url: The product_url of this OrderLine.
        :param quantity: The quantity of this OrderLine.
        :param quantity_unit: The quantity_unit of this OrderLine.
        :param reference: The reference of this OrderLine.
        :param subscription: The subscription of this OrderLine.
        :param tax_rate: The tax_rate of this OrderLine.
        :param total_amount: The total_amount of this OrderLine.
        :param total_discount_amount: The total_discount_amount of this OrderLine.
        :param total_tax_amount: The total_tax_amount of this OrderLine.
        :param type: The type of this OrderLine.
        :param unit_price: The unit_price of this OrderLine.
        """
        self.openapi_types = {
            'image_url': str,
            'merchant_data': str,
            'name': str,
            'product_identifiers': ProductIdentifiers,
            'product_url': str,
            'quantity': int,
            'quantity_unit': str,
            'reference': str,
            'subscription': Subscription,
            'tax_rate': int,
            'total_amount': int,
            'total_discount_amount': int,
            'total_tax_amount': int,
            'type': str,
            'unit_price': int
        }

        self.attribute_map = {
            'image_url': 'image_url',
            'merchant_data': 'merchant_data',
            'name': 'name',
            'product_identifiers': 'product_identifiers',
            'product_url': 'product_url',
            'quantity': 'quantity',
            'quantity_unit': 'quantity_unit',
            'reference': 'reference',
            'subscription': 'subscription',
            'tax_rate': 'tax_rate',
            'total_amount': 'total_amount',
            'total_discount_amount': 'total_discount_amount',
            'total_tax_amount': 'total_tax_amount',
            'type': 'type',
            'unit_price': 'unit_price'
        }

        self._image_url = image_url
        self._merchant_data = merchant_data
        self._name = name
        self._product_identifiers = product_identifiers
        self._product_url = product_url
        self._quantity = quantity
        self._quantity_unit = quantity_unit
        self._reference = reference
        self._subscription = subscription
        self._tax_rate = tax_rate
        self._total_amount = total_amount
        self._total_discount_amount = total_discount_amount
        self._total_tax_amount = total_tax_amount
        self._type = type
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The order_line of this OrderLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_url(self):
        """Gets the image_url of this OrderLine.

        URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.

        :return: The image_url of this OrderLine.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this OrderLine.

        URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.

        :param image_url: The image_url of this OrderLine.
        :type image_url: str
        """
        if image_url is not None and len(image_url) > 1024:
            raise ValueError("Invalid value for `image_url`, length must be less than or equal to `1024`")
        if image_url is not None and len(image_url) < 0:
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `0`")

        self._image_url = image_url

    @property
    def merchant_data(self):
        """Gets the merchant_data of this OrderLine.

        Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)

        :return: The merchant_data of this OrderLine.
        :rtype: str
        """
        return self._merchant_data

    @merchant_data.setter
    def merchant_data(self, merchant_data):
        """Sets the merchant_data of this OrderLine.

        Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)

        :param merchant_data: The merchant_data of this OrderLine.
        :type merchant_data: str
        """
        if merchant_data is not None and len(merchant_data) > 1024:
            raise ValueError("Invalid value for `merchant_data`, length must be less than or equal to `1024`")
        if merchant_data is not None and len(merchant_data) < 0:
            raise ValueError("Invalid value for `merchant_data`, length must be greater than or equal to `0`")

        self._merchant_data = merchant_data

    @property
    def name(self):
        """Gets the name of this OrderLine.

        Descriptive name of the order line item.

        :return: The name of this OrderLine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderLine.

        Descriptive name of the order line item.

        :param name: The name of this OrderLine.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def product_identifiers(self):
        """Gets the product_identifiers of this OrderLine.


        :return: The product_identifiers of this OrderLine.
        :rtype: ProductIdentifiers
        """
        return self._product_identifiers

    @product_identifiers.setter
    def product_identifiers(self, product_identifiers):
        """Sets the product_identifiers of this OrderLine.


        :param product_identifiers: The product_identifiers of this OrderLine.
        :type product_identifiers: ProductIdentifiers
        """

        self._product_identifiers = product_identifiers

    @property
    def product_url(self):
        """Gets the product_url of this OrderLine.

        URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)

        :return: The product_url of this OrderLine.
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this OrderLine.

        URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)

        :param product_url: The product_url of this OrderLine.
        :type product_url: str
        """
        if product_url is not None and len(product_url) > 1024:
            raise ValueError("Invalid value for `product_url`, length must be less than or equal to `1024`")
        if product_url is not None and len(product_url) < 0:
            raise ValueError("Invalid value for `product_url`, length must be greater than or equal to `0`")

        self._product_url = product_url

    @property
    def quantity(self):
        """Gets the quantity of this OrderLine.

        Quantity of the order line item. Must be a non-negative number.

        :return: The quantity of this OrderLine.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLine.

        Quantity of the order line item. Must be a non-negative number.

        :param quantity: The quantity of this OrderLine.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")
        if quantity is not None and quantity < 0:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")

        self._quantity = quantity

    @property
    def quantity_unit(self):
        """Gets the quantity_unit of this OrderLine.

        Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.

        :return: The quantity_unit of this OrderLine.
        :rtype: str
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit):
        """Sets the quantity_unit of this OrderLine.

        Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.

        :param quantity_unit: The quantity_unit of this OrderLine.
        :type quantity_unit: str
        """
        if quantity_unit is not None and len(quantity_unit) > 8:
            raise ValueError("Invalid value for `quantity_unit`, length must be less than or equal to `8`")
        if quantity_unit is not None and len(quantity_unit) < 1:
            raise ValueError("Invalid value for `quantity_unit`, length must be greater than or equal to `1`")

        self._quantity_unit = quantity_unit

    @property
    def reference(self):
        """Gets the reference of this OrderLine.

        Client facing article number, SKU or similar. Max length is 256 characters.

        :return: The reference of this OrderLine.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OrderLine.

        Client facing article number, SKU or similar. Max length is 256 characters.

        :param reference: The reference of this OrderLine.
        :type reference: str
        """
        if reference is not None and len(reference) > 256:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `256`")
        if reference is not None and len(reference) < 0:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `0`")

        self._reference = reference

    @property
    def subscription(self):
        """Gets the subscription of this OrderLine.


        :return: The subscription of this OrderLine.
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this OrderLine.


        :param subscription: The subscription of this OrderLine.
        :type subscription: Subscription
        """

        self._subscription = subscription

    @property
    def tax_rate(self):
        """Gets the tax_rate of this OrderLine.

        Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.

        :return: The tax_rate of this OrderLine.
        :rtype: int
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this OrderLine.

        Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.

        :param tax_rate: The tax_rate of this OrderLine.
        :type tax_rate: int
        """
        if tax_rate is not None and tax_rate > 10000:
            raise ValueError("Invalid value for `tax_rate`, must be a value less than or equal to `10000`")
        if tax_rate is not None and tax_rate < 0:
            raise ValueError("Invalid value for `tax_rate`, must be a value greater than or equal to `0`")

        self._tax_rate = tax_rate

    @property
    def total_amount(self):
        """Gets the total_amount of this OrderLine.

        Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros Value = (quantity x unit_price) - total_discount_amount.  (max value: 100000000)

        :return: The total_amount of this OrderLine.
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this OrderLine.

        Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros Value = (quantity x unit_price) - total_discount_amount.  (max value: 100000000)

        :param total_amount: The total_amount of this OrderLine.
        :type total_amount: int
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")
        if total_amount is not None and total_amount > 100000000:
            raise ValueError("Invalid value for `total_amount`, must be a value less than or equal to `100000000`")

        self._total_amount = total_amount

    @property
    def total_discount_amount(self):
        """Gets the total_discount_amount of this OrderLine.

        Non-negative minor units. Includes tax. Eg: 500=5 euros

        :return: The total_discount_amount of this OrderLine.
        :rtype: int
        """
        return self._total_discount_amount

    @total_discount_amount.setter
    def total_discount_amount(self, total_discount_amount):
        """Sets the total_discount_amount of this OrderLine.

        Non-negative minor units. Includes tax. Eg: 500=5 euros

        :param total_discount_amount: The total_discount_amount of this OrderLine.
        :type total_discount_amount: int
        """
        if total_discount_amount is not None and total_discount_amount < 0:
            raise ValueError("Invalid value for `total_discount_amount`, must be a value greater than or equal to `0`")

        self._total_discount_amount = total_discount_amount

    @property
    def total_tax_amount(self):
        """Gets the total_tax_amount of this OrderLine.

        Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.

        :return: The total_tax_amount of this OrderLine.
        :rtype: int
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount):
        """Sets the total_tax_amount of this OrderLine.

        Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.

        :param total_tax_amount: The total_tax_amount of this OrderLine.
        :type total_tax_amount: int
        """

        self._total_tax_amount = total_tax_amount

    @property
    def type(self):
        """Gets the type of this OrderLine.

        Type of the order line item. The possible values are:  physical discount shipping_fee sales_tax digital gift_card store_credit surcharge

        :return: The type of this OrderLine.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderLine.

        Type of the order line item. The possible values are:  physical discount shipping_fee sales_tax digital gift_card store_credit surcharge

        :param type: The type of this OrderLine.
        :type type: str
        """

        self._type = type

    @property
    def unit_price(self):
        """Gets the unit_price of this OrderLine.

        Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)

        :return: The unit_price of this OrderLine.
        :rtype: int
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this OrderLine.

        Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)

        :param unit_price: The unit_price of this OrderLine.
        :type unit_price: int
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")
        if unit_price is not None and unit_price > 100000000:
            raise ValueError("Invalid value for `unit_price`, must be a value less than or equal to `100000000`")

        self._unit_price = unit_price
