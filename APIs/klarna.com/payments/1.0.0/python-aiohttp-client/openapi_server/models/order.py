# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorized_payment_method import AuthorizedPaymentMethod
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_payment_method: AuthorizedPaymentMethod=None, fraud_status: str=None, order_id: str=None, redirect_url: str=None):
        """Order - a model defined in OpenAPI

        :param authorized_payment_method: The authorized_payment_method of this Order.
        :param fraud_status: The fraud_status of this Order.
        :param order_id: The order_id of this Order.
        :param redirect_url: The redirect_url of this Order.
        """
        self.openapi_types = {
            'authorized_payment_method': AuthorizedPaymentMethod,
            'fraud_status': str,
            'order_id': str,
            'redirect_url': str
        }

        self.attribute_map = {
            'authorized_payment_method': 'authorized_payment_method',
            'fraud_status': 'fraud_status',
            'order_id': 'order_id',
            'redirect_url': 'redirect_url'
        }

        self._authorized_payment_method = authorized_payment_method
        self._fraud_status = fraud_status
        self._order_id = order_id
        self._redirect_url = redirect_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_payment_method(self):
        """Gets the authorized_payment_method of this Order.


        :return: The authorized_payment_method of this Order.
        :rtype: AuthorizedPaymentMethod
        """
        return self._authorized_payment_method

    @authorized_payment_method.setter
    def authorized_payment_method(self, authorized_payment_method):
        """Sets the authorized_payment_method of this Order.


        :param authorized_payment_method: The authorized_payment_method of this Order.
        :type authorized_payment_method: AuthorizedPaymentMethod
        """

        self._authorized_payment_method = authorized_payment_method

    @property
    def fraud_status(self):
        """Gets the fraud_status of this Order.

        Fraud status for the order. Either ACCEPTED or PENDING. If ACCEPTED, the order could be captured. If PENDING, please wait till you receive the notification from Klarna in the notification URL that the order has been approved. You can find additional information here.

        :return: The fraud_status of this Order.
        :rtype: str
        """
        return self._fraud_status

    @fraud_status.setter
    def fraud_status(self, fraud_status):
        """Sets the fraud_status of this Order.

        Fraud status for the order. Either ACCEPTED or PENDING. If ACCEPTED, the order could be captured. If PENDING, please wait till you receive the notification from Klarna in the notification URL that the order has been approved. You can find additional information here.

        :param fraud_status: The fraud_status of this Order.
        :type fraud_status: str
        """

        self._fraud_status = fraud_status

    @property
    def order_id(self):
        """Gets the order_id of this Order.

        Unique order ID of the transaction. This ID will be used for all order management processes.

        :return: The order_id of this Order.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.

        Unique order ID of the transaction. This ID will be used for all order management processes.

        :param order_id: The order_id of this Order.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Order.

        URL to redirect the customer to after placing the order. This is a Klarna URL to which the merchant should redirect the customer to. Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience. It is a spontaneous step and does not harm the customer’s experience.

        :return: The redirect_url of this Order.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Order.

        URL to redirect the customer to after placing the order. This is a Klarna URL to which the merchant should redirect the customer to. Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience. It is a spontaneous step and does not harm the customer’s experience.

        :param redirect_url: The redirect_url of this Order.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url
