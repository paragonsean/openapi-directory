# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.customer_read_create_token import CustomerReadCreateToken
from openapi_server import util


class CustomerTokenCreationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, customer: CustomerReadCreateToken=None, payment_method_reference: str=None, redirect_url: str=None, token_id: str=None):
        """CustomerTokenCreationResponse - a model defined in OpenAPI

        :param billing_address: The billing_address of this CustomerTokenCreationResponse.
        :param customer: The customer of this CustomerTokenCreationResponse.
        :param payment_method_reference: The payment_method_reference of this CustomerTokenCreationResponse.
        :param redirect_url: The redirect_url of this CustomerTokenCreationResponse.
        :param token_id: The token_id of this CustomerTokenCreationResponse.
        """
        self.openapi_types = {
            'billing_address': Address,
            'customer': CustomerReadCreateToken,
            'payment_method_reference': str,
            'redirect_url': str,
            'token_id': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'customer': 'customer',
            'payment_method_reference': 'payment_method_reference',
            'redirect_url': 'redirect_url',
            'token_id': 'token_id'
        }

        self._billing_address = billing_address
        self._customer = customer
        self._payment_method_reference = payment_method_reference
        self._redirect_url = redirect_url
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerTokenCreationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer_token_creation_response of this CustomerTokenCreationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this CustomerTokenCreationResponse.


        :return: The billing_address of this CustomerTokenCreationResponse.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CustomerTokenCreationResponse.


        :param billing_address: The billing_address of this CustomerTokenCreationResponse.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def customer(self):
        """Gets the customer of this CustomerTokenCreationResponse.


        :return: The customer of this CustomerTokenCreationResponse.
        :rtype: CustomerReadCreateToken
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerTokenCreationResponse.


        :param customer: The customer of this CustomerTokenCreationResponse.
        :type customer: CustomerReadCreateToken
        """

        self._customer = customer

    @property
    def payment_method_reference(self):
        """Gets the payment_method_reference of this CustomerTokenCreationResponse.

        Used to connect customers with payment method when it is present.

        :return: The payment_method_reference of this CustomerTokenCreationResponse.
        :rtype: str
        """
        return self._payment_method_reference

    @payment_method_reference.setter
    def payment_method_reference(self, payment_method_reference):
        """Sets the payment_method_reference of this CustomerTokenCreationResponse.

        Used to connect customers with payment method when it is present.

        :param payment_method_reference: The payment_method_reference of this CustomerTokenCreationResponse.
        :type payment_method_reference: str
        """

        self._payment_method_reference = payment_method_reference

    @property
    def redirect_url(self):
        """Gets the redirect_url of this CustomerTokenCreationResponse.

        URL to redirect the customer to after placing the order. This is a Klarna URL where Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience.

        :return: The redirect_url of this CustomerTokenCreationResponse.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this CustomerTokenCreationResponse.

        URL to redirect the customer to after placing the order. This is a Klarna URL where Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience.

        :param redirect_url: The redirect_url of this CustomerTokenCreationResponse.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def token_id(self):
        """Gets the token_id of this CustomerTokenCreationResponse.

        Generated customer token. This token will be used to create a new order for the subscription using the Create a New order using token API.

        :return: The token_id of this CustomerTokenCreationResponse.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this CustomerTokenCreationResponse.

        Generated customer token. This token will be used to create a new order for the subscription using the Create a New order using token API.

        :param token_id: The token_id of this CustomerTokenCreationResponse.
        :type token_id: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")

        self._token_id = token_id
