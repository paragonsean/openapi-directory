# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, content_type: str=None):
        """Attachment - a model defined in OpenAPI

        :param body: The body of this Attachment.
        :param content_type: The content_type of this Attachment.
        """
        self.openapi_types = {
            'body': str,
            'content_type': str
        }

        self.attribute_map = {
            'body': 'body',
            'content_type': 'content_type'
        }

        self._body = body
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Attachment.

        The content of the extra merchant data should be presented as a string inside this property. The body should be an object containing any of the keys and sub-objects described below serialized to JSON. More information on that object can be found [here](https://developers.klarna.com/api/#attachment-schema).

        :return: The body of this Attachment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Attachment.

        The content of the extra merchant data should be presented as a string inside this property. The body should be an object containing any of the keys and sub-objects described below serialized to JSON. More information on that object can be found [here](https://developers.klarna.com/api/#attachment-schema).

        :param body: The body of this Attachment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def content_type(self):
        """Gets the content_type of this Attachment.

        The content type of the body. It is usually represented as \"application/vnd.klarna.internal.emd-v2+json\"

        :return: The content_type of this Attachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Attachment.

        The content type of the body. It is usually represented as \"application/vnd.klarna.internal.emd-v2+json\"

        :param content_type: The content_type of this Attachment.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type
