# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.attachment import Attachment
from openapi_server.models.customer import Customer
from openapi_server.models.merchant_urls import MerchantUrls
from openapi_server.models.options import Options
from openapi_server.models.order_line import OrderLine
from openapi_server.models.payment_method_category import PaymentMethodCategory
import re
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquiring_channel: str=None, attachment: Attachment=None, authorization_token: str=None, billing_address: Address=None, client_token: str=None, custom_payment_method_ids: List[str]=None, customer: Customer=None, design: str=None, expires_at: datetime=None, intent: str=None, locale: str=None, merchant_data: str=None, merchant_reference1: str=None, merchant_reference2: str=None, merchant_urls: MerchantUrls=None, options: Options=None, order_amount: int=None, order_lines: List[OrderLine]=None, order_tax_amount: int=None, payment_method_categories: list[PaymentMethodCategory]=None, purchase_country: str=None, purchase_currency: str=None, shipping_address: Address=None, status: str=None):
        """Session - a model defined in OpenAPI

        :param acquiring_channel: The acquiring_channel of this Session.
        :param attachment: The attachment of this Session.
        :param authorization_token: The authorization_token of this Session.
        :param billing_address: The billing_address of this Session.
        :param client_token: The client_token of this Session.
        :param custom_payment_method_ids: The custom_payment_method_ids of this Session.
        :param customer: The customer of this Session.
        :param design: The design of this Session.
        :param expires_at: The expires_at of this Session.
        :param intent: The intent of this Session.
        :param locale: The locale of this Session.
        :param merchant_data: The merchant_data of this Session.
        :param merchant_reference1: The merchant_reference1 of this Session.
        :param merchant_reference2: The merchant_reference2 of this Session.
        :param merchant_urls: The merchant_urls of this Session.
        :param options: The options of this Session.
        :param order_amount: The order_amount of this Session.
        :param order_lines: The order_lines of this Session.
        :param order_tax_amount: The order_tax_amount of this Session.
        :param payment_method_categories: The payment_method_categories of this Session.
        :param purchase_country: The purchase_country of this Session.
        :param purchase_currency: The purchase_currency of this Session.
        :param shipping_address: The shipping_address of this Session.
        :param status: The status of this Session.
        """
        self.openapi_types = {
            'acquiring_channel': str,
            'attachment': Attachment,
            'authorization_token': str,
            'billing_address': Address,
            'client_token': str,
            'custom_payment_method_ids': List[str],
            'customer': Customer,
            'design': str,
            'expires_at': datetime,
            'intent': str,
            'locale': str,
            'merchant_data': str,
            'merchant_reference1': str,
            'merchant_reference2': str,
            'merchant_urls': MerchantUrls,
            'options': Options,
            'order_amount': int,
            'order_lines': List[OrderLine],
            'order_tax_amount': int,
            'payment_method_categories': list[PaymentMethodCategory],
            'purchase_country': str,
            'purchase_currency': str,
            'shipping_address': Address,
            'status': str
        }

        self.attribute_map = {
            'acquiring_channel': 'acquiring_channel',
            'attachment': 'attachment',
            'authorization_token': 'authorization_token',
            'billing_address': 'billing_address',
            'client_token': 'client_token',
            'custom_payment_method_ids': 'custom_payment_method_ids',
            'customer': 'customer',
            'design': 'design',
            'expires_at': 'expires_at',
            'intent': 'intent',
            'locale': 'locale',
            'merchant_data': 'merchant_data',
            'merchant_reference1': 'merchant_reference1',
            'merchant_reference2': 'merchant_reference2',
            'merchant_urls': 'merchant_urls',
            'options': 'options',
            'order_amount': 'order_amount',
            'order_lines': 'order_lines',
            'order_tax_amount': 'order_tax_amount',
            'payment_method_categories': 'payment_method_categories',
            'purchase_country': 'purchase_country',
            'purchase_currency': 'purchase_currency',
            'shipping_address': 'shipping_address',
            'status': 'status'
        }

        self._acquiring_channel = acquiring_channel
        self._attachment = attachment
        self._authorization_token = authorization_token
        self._billing_address = billing_address
        self._client_token = client_token
        self._custom_payment_method_ids = custom_payment_method_ids
        self._customer = customer
        self._design = design
        self._expires_at = expires_at
        self._intent = intent
        self._locale = locale
        self._merchant_data = merchant_data
        self._merchant_reference1 = merchant_reference1
        self._merchant_reference2 = merchant_reference2
        self._merchant_urls = merchant_urls
        self._options = options
        self._order_amount = order_amount
        self._order_lines = order_lines
        self._order_tax_amount = order_tax_amount
        self._payment_method_categories = payment_method_categories
        self._purchase_country = purchase_country
        self._purchase_currency = purchase_currency
        self._shipping_address = shipping_address
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquiring_channel(self):
        """Gets the acquiring_channel of this Session.

        The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.

        :return: The acquiring_channel of this Session.
        :rtype: str
        """
        return self._acquiring_channel

    @acquiring_channel.setter
    def acquiring_channel(self, acquiring_channel):
        """Sets the acquiring_channel of this Session.

        The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.

        :param acquiring_channel: The acquiring_channel of this Session.
        :type acquiring_channel: str
        """
        allowed_values = ["ECOMMERCE", "IN_STORE", "TELESALES"]  # noqa: E501
        if acquiring_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `acquiring_channel` ({0}), must be one of {1}"
                .format(acquiring_channel, allowed_values)
            )

        self._acquiring_channel = acquiring_channel

    @property
    def attachment(self):
        """Gets the attachment of this Session.


        :return: The attachment of this Session.
        :rtype: Attachment
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Session.


        :param attachment: The attachment of this Session.
        :type attachment: Attachment
        """

        self._attachment = attachment

    @property
    def authorization_token(self):
        """Gets the authorization_token of this Session.

        Authorization token.

        :return: The authorization_token of this Session.
        :rtype: str
        """
        return self._authorization_token

    @authorization_token.setter
    def authorization_token(self, authorization_token):
        """Sets the authorization_token of this Session.

        Authorization token.

        :param authorization_token: The authorization_token of this Session.
        :type authorization_token: str
        """

        self._authorization_token = authorization_token

    @property
    def billing_address(self):
        """Gets the billing_address of this Session.


        :return: The billing_address of this Session.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Session.


        :param billing_address: The billing_address of this Session.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def client_token(self):
        """Gets the client_token of this Session.

        Token to be passed to the JS client

        :return: The client_token of this Session.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this Session.

        Token to be passed to the JS client

        :param client_token: The client_token of this Session.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 4096:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `4096`")
        if client_token is not None and len(client_token) < 0:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `0`")

        self._client_token = client_token

    @property
    def custom_payment_method_ids(self):
        """Gets the custom_payment_method_ids of this Session.

        Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 

        :return: The custom_payment_method_ids of this Session.
        :rtype: List[str]
        """
        return self._custom_payment_method_ids

    @custom_payment_method_ids.setter
    def custom_payment_method_ids(self, custom_payment_method_ids):
        """Sets the custom_payment_method_ids of this Session.

        Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 

        :param custom_payment_method_ids: The custom_payment_method_ids of this Session.
        :type custom_payment_method_ids: List[str]
        """

        self._custom_payment_method_ids = custom_payment_method_ids

    @property
    def customer(self):
        """Gets the customer of this Session.


        :return: The customer of this Session.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Session.


        :param customer: The customer of this Session.
        :type customer: Customer
        """

        self._customer = customer

    @property
    def design(self):
        """Gets the design of this Session.

        Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.

        :return: The design of this Session.
        :rtype: str
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this Session.

        Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.

        :param design: The design of this Session.
        :type design: str
        """

        self._design = design

    @property
    def expires_at(self):
        """Gets the expires_at of this Session.

        Session expiration date

        :return: The expires_at of this Session.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Session.

        Session expiration date

        :param expires_at: The expires_at of this Session.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def intent(self):
        """Gets the intent of this Session.

        Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer’s session.

        :return: The intent of this Session.
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this Session.

        Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer’s session.

        :param intent: The intent of this Session.
        :type intent: str
        """
        allowed_values = ["buy", "tokenize", "buy_and_tokenize"]  # noqa: E501
        if intent not in allowed_values:
            raise ValueError(
                "Invalid value for `intent` ({0}), must be one of {1}"
                .format(intent, allowed_values)
            )

        self._intent = intent

    @property
    def locale(self):
        """Gets the locale of this Session.

        Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country. The following values are applicable:  AT: \"de-AT\", \"de-DE\", \"en-DE\" BE: \"be-BE\", \"nl-BE\", \"fr-BE\", \"en-BE\" CH: \"it-CH\", \"de-CH\", \"fr-CH\", \"en-CH\" DE: \"de-DE\", \"de-AT\", \"en-DE\" DK: \"da-DK\", \"en-DK\" ES: \"es-ES\", \"ca-ES\", \"en-ES\" FI: \"fi-FI\", \"sv-FI\", \"en-FI\" GB: \"en-GB\" IT: \"it-IT\", \"en-IT\" NL: \"nl-NL\", \"en-NL\" NO: \"nb-NO\", \"en-NO\" PL: \"pl-PL\", \"en-PL\" SE: \"sv-SE\", \"en-SE\" US: \"en-US\".

        :return: The locale of this Session.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Session.

        Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country. The following values are applicable:  AT: \"de-AT\", \"de-DE\", \"en-DE\" BE: \"be-BE\", \"nl-BE\", \"fr-BE\", \"en-BE\" CH: \"it-CH\", \"de-CH\", \"fr-CH\", \"en-CH\" DE: \"de-DE\", \"de-AT\", \"en-DE\" DK: \"da-DK\", \"en-DK\" ES: \"es-ES\", \"ca-ES\", \"en-ES\" FI: \"fi-FI\", \"sv-FI\", \"en-FI\" GB: \"en-GB\" IT: \"it-IT\", \"en-IT\" NL: \"nl-NL\", \"en-NL\" NO: \"nb-NO\", \"en-NO\" PL: \"pl-PL\", \"en-PL\" SE: \"sv-SE\", \"en-SE\" US: \"en-US\".

        :param locale: The locale of this Session.
        :type locale: str
        """
        if locale is not None and not re.search(r'^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$', locale):
            raise ValueError("Invalid value for `locale`, must be a follow pattern or equal to `/^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/`")

        self._locale = locale

    @property
    def merchant_data(self):
        """Gets the merchant_data of this Session.

        Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)

        :return: The merchant_data of this Session.
        :rtype: str
        """
        return self._merchant_data

    @merchant_data.setter
    def merchant_data(self, merchant_data):
        """Sets the merchant_data of this Session.

        Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)

        :param merchant_data: The merchant_data of this Session.
        :type merchant_data: str
        """
        if merchant_data is not None and len(merchant_data) > 6000:
            raise ValueError("Invalid value for `merchant_data`, length must be less than or equal to `6000`")
        if merchant_data is not None and len(merchant_data) < 0:
            raise ValueError("Invalid value for `merchant_data`, length must be greater than or equal to `0`")

        self._merchant_data = merchant_data

    @property
    def merchant_reference1(self):
        """Gets the merchant_reference1 of this Session.

        Used for storing merchant's internal order number or other reference.

        :return: The merchant_reference1 of this Session.
        :rtype: str
        """
        return self._merchant_reference1

    @merchant_reference1.setter
    def merchant_reference1(self, merchant_reference1):
        """Sets the merchant_reference1 of this Session.

        Used for storing merchant's internal order number or other reference.

        :param merchant_reference1: The merchant_reference1 of this Session.
        :type merchant_reference1: str
        """
        if merchant_reference1 is not None and len(merchant_reference1) > 255:
            raise ValueError("Invalid value for `merchant_reference1`, length must be less than or equal to `255`")
        if merchant_reference1 is not None and len(merchant_reference1) < 0:
            raise ValueError("Invalid value for `merchant_reference1`, length must be greater than or equal to `0`")

        self._merchant_reference1 = merchant_reference1

    @property
    def merchant_reference2(self):
        """Gets the merchant_reference2 of this Session.

        Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).

        :return: The merchant_reference2 of this Session.
        :rtype: str
        """
        return self._merchant_reference2

    @merchant_reference2.setter
    def merchant_reference2(self, merchant_reference2):
        """Sets the merchant_reference2 of this Session.

        Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).

        :param merchant_reference2: The merchant_reference2 of this Session.
        :type merchant_reference2: str
        """
        if merchant_reference2 is not None and len(merchant_reference2) > 255:
            raise ValueError("Invalid value for `merchant_reference2`, length must be less than or equal to `255`")
        if merchant_reference2 is not None and len(merchant_reference2) < 0:
            raise ValueError("Invalid value for `merchant_reference2`, length must be greater than or equal to `0`")

        self._merchant_reference2 = merchant_reference2

    @property
    def merchant_urls(self):
        """Gets the merchant_urls of this Session.


        :return: The merchant_urls of this Session.
        :rtype: MerchantUrls
        """
        return self._merchant_urls

    @merchant_urls.setter
    def merchant_urls(self, merchant_urls):
        """Sets the merchant_urls of this Session.


        :param merchant_urls: The merchant_urls of this Session.
        :type merchant_urls: MerchantUrls
        """

        self._merchant_urls = merchant_urls

    @property
    def options(self):
        """Gets the options of this Session.


        :return: The options of this Session.
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Session.


        :param options: The options of this Session.
        :type options: Options
        """

        self._options = options

    @property
    def order_amount(self):
        """Gets the order_amount of this Session.

        Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.

        :return: The order_amount of this Session.
        :rtype: int
        """
        return self._order_amount

    @order_amount.setter
    def order_amount(self, order_amount):
        """Sets the order_amount of this Session.

        Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.

        :param order_amount: The order_amount of this Session.
        :type order_amount: int
        """
        if order_amount is not None and order_amount < 0:
            raise ValueError("Invalid value for `order_amount`, must be a value greater than or equal to `0`")

        self._order_amount = order_amount

    @property
    def order_lines(self):
        """Gets the order_lines of this Session.

        The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.

        :return: The order_lines of this Session.
        :rtype: List[OrderLine]
        """
        return self._order_lines

    @order_lines.setter
    def order_lines(self, order_lines):
        """Sets the order_lines of this Session.

        The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.

        :param order_lines: The order_lines of this Session.
        :type order_lines: List[OrderLine]
        """
        if order_lines is not None and len(order_lines) > 1000:
            raise ValueError("Invalid value for `order_lines`, number of items must be less than or equal to `1000`")
        if order_lines is not None and len(order_lines) < 1:
            raise ValueError("Invalid value for `order_lines`, number of items must be greater than or equal to `1`")

        self._order_lines = order_lines

    @property
    def order_tax_amount(self):
        """Gets the order_tax_amount of this Session.

        Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.

        :return: The order_tax_amount of this Session.
        :rtype: int
        """
        return self._order_tax_amount

    @order_tax_amount.setter
    def order_tax_amount(self, order_tax_amount):
        """Sets the order_tax_amount of this Session.

        Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.

        :param order_tax_amount: The order_tax_amount of this Session.
        :type order_tax_amount: int
        """
        if order_tax_amount is not None and order_tax_amount < 0:
            raise ValueError("Invalid value for `order_tax_amount`, must be a value greater than or equal to `0`")

        self._order_tax_amount = order_tax_amount

    @property
    def payment_method_categories(self):
        """Gets the payment_method_categories of this Session.

        Available payment method categories

        :return: The payment_method_categories of this Session.
        :rtype: list[PaymentMethodCategory]
        """
        return self._payment_method_categories

    @payment_method_categories.setter
    def payment_method_categories(self, payment_method_categories):
        """Sets the payment_method_categories of this Session.

        Available payment method categories

        :param payment_method_categories: The payment_method_categories of this Session.
        :type payment_method_categories: list[PaymentMethodCategory]
        """

        self._payment_method_categories = payment_method_categories

    @property
    def purchase_country(self):
        """Gets the purchase_country of this Session.

        The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.

        :return: The purchase_country of this Session.
        :rtype: str
        """
        return self._purchase_country

    @purchase_country.setter
    def purchase_country(self, purchase_country):
        """Sets the purchase_country of this Session.

        The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.

        :param purchase_country: The purchase_country of this Session.
        :type purchase_country: str
        """
        if purchase_country is not None and not re.search(r'^[A-Za-z]{2,2}$', purchase_country):
            raise ValueError("Invalid value for `purchase_country`, must be a follow pattern or equal to `/^[A-Za-z]{2,2}$/`")

        self._purchase_country = purchase_country

    @property
    def purchase_currency(self):
        """Gets the purchase_currency of this Session.

        The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.

        :return: The purchase_currency of this Session.
        :rtype: str
        """
        return self._purchase_currency

    @purchase_currency.setter
    def purchase_currency(self, purchase_currency):
        """Sets the purchase_currency of this Session.

        The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.

        :param purchase_currency: The purchase_currency of this Session.
        :type purchase_currency: str
        """
        if purchase_currency is not None and not re.search(r'^[A-Za-z]{3,3}$', purchase_currency):
            raise ValueError("Invalid value for `purchase_currency`, must be a follow pattern or equal to `/^[A-Za-z]{3,3}$/`")

        self._purchase_currency = purchase_currency

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Session.


        :return: The shipping_address of this Session.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Session.


        :param shipping_address: The shipping_address of this Session.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this Session.

        The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.

        :return: The status of this Session.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Session.

        The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.

        :param status: The status of this Session.
        :type status: str
        """
        allowed_values = ["complete", "incomplete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
