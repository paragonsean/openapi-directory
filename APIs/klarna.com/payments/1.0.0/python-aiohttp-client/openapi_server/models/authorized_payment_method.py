# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizedPaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number_of_days: int=None, number_of_installments: int=None, type: str=None):
        """AuthorizedPaymentMethod - a model defined in OpenAPI

        :param number_of_days: The number_of_days of this AuthorizedPaymentMethod.
        :param number_of_installments: The number_of_installments of this AuthorizedPaymentMethod.
        :param type: The type of this AuthorizedPaymentMethod.
        """
        self.openapi_types = {
            'number_of_days': int,
            'number_of_installments': int,
            'type': str
        }

        self.attribute_map = {
            'number_of_days': 'number_of_days',
            'number_of_installments': 'number_of_installments',
            'type': 'type'
        }

        self._number_of_days = number_of_days
        self._number_of_installments = number_of_installments
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizedPaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authorized_payment_method of this AuthorizedPaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_days(self):
        """Gets the number_of_days of this AuthorizedPaymentMethod.


        :return: The number_of_days of this AuthorizedPaymentMethod.
        :rtype: int
        """
        return self._number_of_days

    @number_of_days.setter
    def number_of_days(self, number_of_days):
        """Sets the number_of_days of this AuthorizedPaymentMethod.


        :param number_of_days: The number_of_days of this AuthorizedPaymentMethod.
        :type number_of_days: int
        """

        self._number_of_days = number_of_days

    @property
    def number_of_installments(self):
        """Gets the number_of_installments of this AuthorizedPaymentMethod.


        :return: The number_of_installments of this AuthorizedPaymentMethod.
        :rtype: int
        """
        return self._number_of_installments

    @number_of_installments.setter
    def number_of_installments(self, number_of_installments):
        """Sets the number_of_installments of this AuthorizedPaymentMethod.


        :param number_of_installments: The number_of_installments of this AuthorizedPaymentMethod.
        :type number_of_installments: int
        """

        self._number_of_installments = number_of_installments

    @property
    def type(self):
        """Gets the type of this AuthorizedPaymentMethod.


        :return: The type of this AuthorizedPaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthorizedPaymentMethod.


        :param type: The type of this AuthorizedPaymentMethod.
        :type type: str
        """
        allowed_values = ["invoice", "fixed_amount", "base_account", "direct_debit", "direct_bank_transfer", "b2b_invoice", "card", "slice_it_by_card", "pay_later_by_card", "pay_by_card", "fixed_sum_credit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
