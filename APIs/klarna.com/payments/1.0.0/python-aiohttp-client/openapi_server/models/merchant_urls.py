# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MerchantUrls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: str=None, confirmation: str=None, notification: str=None, push: str=None):
        """MerchantUrls - a model defined in OpenAPI

        :param authorization: The authorization of this MerchantUrls.
        :param confirmation: The confirmation of this MerchantUrls.
        :param notification: The notification of this MerchantUrls.
        :param push: The push of this MerchantUrls.
        """
        self.openapi_types = {
            'authorization': str,
            'confirmation': str,
            'notification': str,
            'push': str
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'confirmation': 'confirmation',
            'notification': 'notification',
            'push': 'push'
        }

        self._authorization = authorization
        self._confirmation = confirmation
        self._notification = notification
        self._push = push

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantUrls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The merchant_urls of this MerchantUrls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this MerchantUrls.

        URL for receiving the authorization token when payment is completed. Used for Authorization Callback.

        :return: The authorization of this MerchantUrls.
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this MerchantUrls.

        URL for receiving the authorization token when payment is completed. Used for Authorization Callback.

        :param authorization: The authorization of this MerchantUrls.
        :type authorization: str
        """
        if authorization is not None and len(authorization) > 2000:
            raise ValueError("Invalid value for `authorization`, length must be less than or equal to `2000`")
        if authorization is not None and len(authorization) < 0:
            raise ValueError("Invalid value for `authorization`, length must be greater than or equal to `0`")

        self._authorization = authorization

    @property
    def confirmation(self):
        """Gets the confirmation of this MerchantUrls.

        URL of the merchant confirmation page. The consumer will be redirected back to the confirmation page if the consumer is sent to the redirect URL after placing the order. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL(max 2000 characters).

        :return: The confirmation of this MerchantUrls.
        :rtype: str
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this MerchantUrls.

        URL of the merchant confirmation page. The consumer will be redirected back to the confirmation page if the consumer is sent to the redirect URL after placing the order. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL(max 2000 characters).

        :param confirmation: The confirmation of this MerchantUrls.
        :type confirmation: str
        """
        if confirmation is not None and len(confirmation) > 2000:
            raise ValueError("Invalid value for `confirmation`, length must be less than or equal to `2000`")
        if confirmation is not None and len(confirmation) < 0:
            raise ValueError("Invalid value for `confirmation`, length must be greater than or equal to `0`")

        self._confirmation = confirmation

    @property
    def notification(self):
        """Gets the notification of this MerchantUrls.

        URL for notifications on pending orders. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).

        :return: The notification of this MerchantUrls.
        :rtype: str
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this MerchantUrls.

        URL for notifications on pending orders. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).

        :param notification: The notification of this MerchantUrls.
        :type notification: str
        """
        if notification is not None and len(notification) > 2000:
            raise ValueError("Invalid value for `notification`, length must be less than or equal to `2000`")
        if notification is not None and len(notification) < 0:
            raise ValueError("Invalid value for `notification`, length must be greater than or equal to `0`")

        self._notification = notification

    @property
    def push(self):
        """Gets the push of this MerchantUrls.

        URL that will be requested when an order is completed. Should be different than checkout and confirmation URLs. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).

        :return: The push of this MerchantUrls.
        :rtype: str
        """
        return self._push

    @push.setter
    def push(self, push):
        """Sets the push of this MerchantUrls.

        URL that will be requested when an order is completed. Should be different than checkout and confirmation URLs. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).

        :param push: The push of this MerchantUrls.
        :type push: str
        """
        if push is not None and len(push) > 2000:
            raise ValueError("Invalid value for `push`, length must be less than or equal to `2000`")
        if push is not None and len(push) < 0:
            raise ValueError("Invalid value for `push`, length must be greater than or equal to `0`")

        self._push = push
