# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval: str=None, interval_count: int=None, name: str=None):
        """Subscription - a model defined in OpenAPI

        :param interval: The interval of this Subscription.
        :param interval_count: The interval_count of this Subscription.
        :param name: The name of this Subscription.
        """
        self.openapi_types = {
            'interval': str,
            'interval_count': int,
            'name': str
        }

        self.attribute_map = {
            'interval': 'interval',
            'interval_count': 'interval_count',
            'name': 'name'
        }

        self._interval = interval
        self._interval_count = interval_count
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self):
        """Gets the interval of this Subscription.

        The cadence unit for this.

        :return: The interval of this Subscription.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Subscription.

        The cadence unit for this.

        :param interval: The interval of this Subscription.
        :type interval: str
        """
        allowed_values = ["DAY", "WEEK", "MONTH", "YEAR"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def interval_count(self):
        """Gets the interval_count of this Subscription.

        The number of intervals

        :return: The interval_count of this Subscription.
        :rtype: int
        """
        return self._interval_count

    @interval_count.setter
    def interval_count(self, interval_count):
        """Sets the interval_count of this Subscription.

        The number of intervals

        :param interval_count: The interval_count of this Subscription.
        :type interval_count: int
        """
        if interval_count is None:
            raise ValueError("Invalid value for `interval_count`, must not be `None`")
        if interval_count is not None and interval_count < 1:
            raise ValueError("Invalid value for `interval_count`, must be a value greater than or equal to `1`")

        self._interval_count = interval_count

    @property
    def name(self):
        """Gets the name of this Subscription.

        The name of the subscription product

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        The name of the subscription product

        :param name: The name of this Subscription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
