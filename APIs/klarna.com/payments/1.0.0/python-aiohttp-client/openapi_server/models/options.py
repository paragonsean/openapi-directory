# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Options(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_border: str=None, color_border_selected: str=None, color_details: str=None, color_text: str=None, radius_border: str=None):
        """Options - a model defined in OpenAPI

        :param color_border: The color_border of this Options.
        :param color_border_selected: The color_border_selected of this Options.
        :param color_details: The color_details of this Options.
        :param color_text: The color_text of this Options.
        :param radius_border: The radius_border of this Options.
        """
        self.openapi_types = {
            'color_border': str,
            'color_border_selected': str,
            'color_details': str,
            'color_text': str,
            'radius_border': str
        }

        self.attribute_map = {
            'color_border': 'color_border',
            'color_border_selected': 'color_border_selected',
            'color_details': 'color_details',
            'color_text': 'color_text',
            'radius_border': 'radius_border'
        }

        self._color_border = color_border
        self._color_border_selected = color_border_selected
        self._color_details = color_details
        self._color_text = color_text
        self._radius_border = radius_border

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Options':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The options of this Options.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_border(self):
        """Gets the color_border of this Options.

        Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"

        :return: The color_border of this Options.
        :rtype: str
        """
        return self._color_border

    @color_border.setter
    def color_border(self, color_border):
        """Sets the color_border of this Options.

        Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"

        :param color_border: The color_border of this Options.
        :type color_border: str
        """
        if color_border is not None and not re.search(r'^#[A-Fa-f0-9]{6}$', color_border):
            raise ValueError("Invalid value for `color_border`, must be a follow pattern or equal to `/^#[A-Fa-f0-9]{6}$/`")

        self._color_border = color_border

    @property
    def color_border_selected(self):
        """Gets the color_border_selected of this Options.

        Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. \"#FF9900\"

        :return: The color_border_selected of this Options.
        :rtype: str
        """
        return self._color_border_selected

    @color_border_selected.setter
    def color_border_selected(self, color_border_selected):
        """Sets the color_border_selected of this Options.

        Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. \"#FF9900\"

        :param color_border_selected: The color_border_selected of this Options.
        :type color_border_selected: str
        """
        if color_border_selected is not None and not re.search(r'^#[A-Fa-f0-9]{6}$', color_border_selected):
            raise ValueError("Invalid value for `color_border_selected`, must be a follow pattern or equal to `/^#[A-Fa-f0-9]{6}$/`")

        self._color_border_selected = color_border_selected

    @property
    def color_details(self):
        """Gets the color_details of this Options.

        Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"

        :return: The color_details of this Options.
        :rtype: str
        """
        return self._color_details

    @color_details.setter
    def color_details(self, color_details):
        """Sets the color_details of this Options.

        Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"

        :param color_details: The color_details of this Options.
        :type color_details: str
        """
        if color_details is not None and not re.search(r'^#[A-Fa-f0-9]{6}$', color_details):
            raise ValueError("Invalid value for `color_details`, must be a follow pattern or equal to `/^#[A-Fa-f0-9]{6}$/`")

        self._color_details = color_details

    @property
    def color_text(self):
        """Gets the color_text of this Options.

        Color for the texts within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"

        :return: The color_text of this Options.
        :rtype: str
        """
        return self._color_text

    @color_text.setter
    def color_text(self, color_text):
        """Sets the color_text of this Options.

        Color for the texts within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"

        :param color_text: The color_text of this Options.
        :type color_text: str
        """
        if color_text is not None and not re.search(r'^#[A-Fa-f0-9]{6}$', color_text):
            raise ValueError("Invalid value for `color_text`, must be a follow pattern or equal to `/^#[A-Fa-f0-9]{6}$/`")

        self._color_text = color_text

    @property
    def radius_border(self):
        """Gets the radius_border of this Options.

        Radius for the border of elements within the iFrame.

        :return: The radius_border of this Options.
        :rtype: str
        """
        return self._radius_border

    @radius_border.setter
    def radius_border(self, radius_border):
        """Sets the radius_border of this Options.

        Radius for the border of elements within the iFrame.

        :param radius_border: The radius_border of this Options.
        :type radius_border: str
        """

        self._radius_border = radius_border
