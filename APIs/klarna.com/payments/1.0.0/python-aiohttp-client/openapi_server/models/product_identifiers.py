# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductIdentifiers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, category_path: str=None, color: str=None, global_trade_item_number: str=None, manufacturer_part_number: str=None, size: str=None):
        """ProductIdentifiers - a model defined in OpenAPI

        :param brand: The brand of this ProductIdentifiers.
        :param category_path: The category_path of this ProductIdentifiers.
        :param color: The color of this ProductIdentifiers.
        :param global_trade_item_number: The global_trade_item_number of this ProductIdentifiers.
        :param manufacturer_part_number: The manufacturer_part_number of this ProductIdentifiers.
        :param size: The size of this ProductIdentifiers.
        """
        self.openapi_types = {
            'brand': str,
            'category_path': str,
            'color': str,
            'global_trade_item_number': str,
            'manufacturer_part_number': str,
            'size': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'category_path': 'category_path',
            'color': 'color',
            'global_trade_item_number': 'global_trade_item_number',
            'manufacturer_part_number': 'manufacturer_part_number',
            'size': 'size'
        }

        self._brand = brand
        self._category_path = category_path
        self._color = color
        self._global_trade_item_number = global_trade_item_number
        self._manufacturer_part_number = manufacturer_part_number
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductIdentifiers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_identifiers of this ProductIdentifiers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this ProductIdentifiers.

        The product's brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value.

        :return: The brand of this ProductIdentifiers.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ProductIdentifiers.

        The product's brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value.

        :param brand: The brand of this ProductIdentifiers.
        :type brand: str
        """
        if brand is not None and len(brand) > 70:
            raise ValueError("Invalid value for `brand`, length must be less than or equal to `70`")
        if brand is not None and len(brand) < 0:
            raise ValueError("Invalid value for `brand`, length must be greater than or equal to `0`")

        self._brand = brand

    @property
    def category_path(self):
        """Gets the category_path of this ProductIdentifiers.

        The product's category path as used in the merchant's webshop. Include the full and most detailed category and separate the segments with ' > '

        :return: The category_path of this ProductIdentifiers.
        :rtype: str
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this ProductIdentifiers.

        The product's category path as used in the merchant's webshop. Include the full and most detailed category and separate the segments with ' > '

        :param category_path: The category_path of this ProductIdentifiers.
        :type category_path: str
        """
        if category_path is not None and len(category_path) > 750:
            raise ValueError("Invalid value for `category_path`, length must be less than or equal to `750`")
        if category_path is not None and len(category_path) < 0:
            raise ValueError("Invalid value for `category_path`, length must be greater than or equal to `0`")

        self._category_path = category_path

    @property
    def color(self):
        """Gets the color of this ProductIdentifiers.

        Color to be shown to the end customer (max 64 characters).

        :return: The color of this ProductIdentifiers.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ProductIdentifiers.

        Color to be shown to the end customer (max 64 characters).

        :param color: The color of this ProductIdentifiers.
        :type color: str
        """
        if color is not None and len(color) > 64:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `64`")
        if color is not None and len(color) < 0:
            raise ValueError("Invalid value for `color`, length must be greater than or equal to `0`")

        self._color = color

    @property
    def global_trade_item_number(self):
        """Gets the global_trade_item_number of this ProductIdentifiers.

        The product's Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible

        :return: The global_trade_item_number of this ProductIdentifiers.
        :rtype: str
        """
        return self._global_trade_item_number

    @global_trade_item_number.setter
    def global_trade_item_number(self, global_trade_item_number):
        """Sets the global_trade_item_number of this ProductIdentifiers.

        The product's Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible

        :param global_trade_item_number: The global_trade_item_number of this ProductIdentifiers.
        :type global_trade_item_number: str
        """
        if global_trade_item_number is not None and len(global_trade_item_number) > 50:
            raise ValueError("Invalid value for `global_trade_item_number`, length must be less than or equal to `50`")
        if global_trade_item_number is not None and len(global_trade_item_number) < 0:
            raise ValueError("Invalid value for `global_trade_item_number`, length must be greater than or equal to `0`")

        self._global_trade_item_number = global_trade_item_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this ProductIdentifiers.

        The product's Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible

        :return: The manufacturer_part_number of this ProductIdentifiers.
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this ProductIdentifiers.

        The product's Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible

        :param manufacturer_part_number: The manufacturer_part_number of this ProductIdentifiers.
        :type manufacturer_part_number: str
        """
        if manufacturer_part_number is not None and len(manufacturer_part_number) > 70:
            raise ValueError("Invalid value for `manufacturer_part_number`, length must be less than or equal to `70`")
        if manufacturer_part_number is not None and len(manufacturer_part_number) < 0:
            raise ValueError("Invalid value for `manufacturer_part_number`, length must be greater than or equal to `0`")

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def size(self):
        """Gets the size of this ProductIdentifiers.

        Size to be shown to the end customer (max 64 characters).

        :return: The size of this ProductIdentifiers.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ProductIdentifiers.

        Size to be shown to the end customer (max 64 characters).

        :param size: The size of this ProductIdentifiers.
        :type size: str
        """
        if size is not None and len(size) > 64:
            raise ValueError("Invalid value for `size`, length must be less than or equal to `64`")
        if size is not None and len(size) < 0:
            raise ValueError("Invalid value for `size`, length must be greater than or equal to `0`")

        self._size = size
