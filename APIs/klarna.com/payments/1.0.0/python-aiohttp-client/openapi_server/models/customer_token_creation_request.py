# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.customer import Customer
import re
from openapi_server import util


class CustomerTokenCreationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, customer: Customer=None, description: str=None, intended_use: str=None, locale: str=None, purchase_country: str=None, purchase_currency: str=None):
        """CustomerTokenCreationRequest - a model defined in OpenAPI

        :param billing_address: The billing_address of this CustomerTokenCreationRequest.
        :param customer: The customer of this CustomerTokenCreationRequest.
        :param description: The description of this CustomerTokenCreationRequest.
        :param intended_use: The intended_use of this CustomerTokenCreationRequest.
        :param locale: The locale of this CustomerTokenCreationRequest.
        :param purchase_country: The purchase_country of this CustomerTokenCreationRequest.
        :param purchase_currency: The purchase_currency of this CustomerTokenCreationRequest.
        """
        self.openapi_types = {
            'billing_address': Address,
            'customer': Customer,
            'description': str,
            'intended_use': str,
            'locale': str,
            'purchase_country': str,
            'purchase_currency': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'customer': 'customer',
            'description': 'description',
            'intended_use': 'intended_use',
            'locale': 'locale',
            'purchase_country': 'purchase_country',
            'purchase_currency': 'purchase_currency'
        }

        self._billing_address = billing_address
        self._customer = customer
        self._description = description
        self._intended_use = intended_use
        self._locale = locale
        self._purchase_country = purchase_country
        self._purchase_currency = purchase_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerTokenCreationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer_token_creation_request of this CustomerTokenCreationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this CustomerTokenCreationRequest.


        :return: The billing_address of this CustomerTokenCreationRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CustomerTokenCreationRequest.


        :param billing_address: The billing_address of this CustomerTokenCreationRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def customer(self):
        """Gets the customer of this CustomerTokenCreationRequest.


        :return: The customer of this CustomerTokenCreationRequest.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerTokenCreationRequest.


        :param customer: The customer of this CustomerTokenCreationRequest.
        :type customer: Customer
        """

        self._customer = customer

    @property
    def description(self):
        """Gets the description of this CustomerTokenCreationRequest.

        Description of the purpose of the token.

        :return: The description of this CustomerTokenCreationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomerTokenCreationRequest.

        Description of the purpose of the token.

        :param description: The description of this CustomerTokenCreationRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def intended_use(self):
        """Gets the intended_use of this CustomerTokenCreationRequest.

        Intended use for the token.

        :return: The intended_use of this CustomerTokenCreationRequest.
        :rtype: str
        """
        return self._intended_use

    @intended_use.setter
    def intended_use(self, intended_use):
        """Sets the intended_use of this CustomerTokenCreationRequest.

        Intended use for the token.

        :param intended_use: The intended_use of this CustomerTokenCreationRequest.
        :type intended_use: str
        """
        allowed_values = ["SUBSCRIPTION"]  # noqa: E501
        if intended_use not in allowed_values:
            raise ValueError(
                "Invalid value for `intended_use` ({0}), must be one of {1}"
                .format(intended_use, allowed_values)
            )

        self._intended_use = intended_use

    @property
    def locale(self):
        """Gets the locale of this CustomerTokenCreationRequest.

        RFC 1766 customer's locale.

        :return: The locale of this CustomerTokenCreationRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this CustomerTokenCreationRequest.

        RFC 1766 customer's locale.

        :param locale: The locale of this CustomerTokenCreationRequest.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")
        if locale is not None and not re.search(r'^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$', locale):
            raise ValueError("Invalid value for `locale`, must be a follow pattern or equal to `/^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/`")

        self._locale = locale

    @property
    def purchase_country(self):
        """Gets the purchase_country of this CustomerTokenCreationRequest.

        ISO 3166 alpha-2 purchase country.

        :return: The purchase_country of this CustomerTokenCreationRequest.
        :rtype: str
        """
        return self._purchase_country

    @purchase_country.setter
    def purchase_country(self, purchase_country):
        """Sets the purchase_country of this CustomerTokenCreationRequest.

        ISO 3166 alpha-2 purchase country.

        :param purchase_country: The purchase_country of this CustomerTokenCreationRequest.
        :type purchase_country: str
        """
        if purchase_country is None:
            raise ValueError("Invalid value for `purchase_country`, must not be `None`")
        if purchase_country is not None and not re.search(r'^[A-Za-z]{2,2}$', purchase_country):
            raise ValueError("Invalid value for `purchase_country`, must be a follow pattern or equal to `/^[A-Za-z]{2,2}$/`")

        self._purchase_country = purchase_country

    @property
    def purchase_currency(self):
        """Gets the purchase_currency of this CustomerTokenCreationRequest.

        ISO 4217 purchase currency.

        :return: The purchase_currency of this CustomerTokenCreationRequest.
        :rtype: str
        """
        return self._purchase_currency

    @purchase_currency.setter
    def purchase_currency(self, purchase_currency):
        """Sets the purchase_currency of this CustomerTokenCreationRequest.

        ISO 4217 purchase currency.

        :param purchase_currency: The purchase_currency of this CustomerTokenCreationRequest.
        :type purchase_currency: str
        """
        if purchase_currency is None:
            raise ValueError("Invalid value for `purchase_currency`, must not be `None`")
        if purchase_currency is not None and not re.search(r'^[A-Za-z]{3,3}$', purchase_currency):
            raise ValueError("Invalid value for `purchase_currency`, must be a follow pattern or equal to `/^[A-Za-z]{3,3}$/`")

        self._purchase_currency = purchase_currency
