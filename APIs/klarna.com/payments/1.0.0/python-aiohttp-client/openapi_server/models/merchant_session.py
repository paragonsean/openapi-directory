# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_method_category import PaymentMethodCategory
from openapi_server import util


class MerchantSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, payment_method_categories: list[PaymentMethodCategory]=None, session_id: str=None):
        """MerchantSession - a model defined in OpenAPI

        :param client_token: The client_token of this MerchantSession.
        :param payment_method_categories: The payment_method_categories of this MerchantSession.
        :param session_id: The session_id of this MerchantSession.
        """
        self.openapi_types = {
            'client_token': str,
            'payment_method_categories': list[PaymentMethodCategory],
            'session_id': str
        }

        self.attribute_map = {
            'client_token': 'client_token',
            'payment_method_categories': 'payment_method_categories',
            'session_id': 'session_id'
        }

        self._client_token = client_token
        self._payment_method_categories = payment_method_categories
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The merchant_session of this MerchantSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this MerchantSession.

        Client token to be passed to the JS client while initializing the JS SDK in the next step.

        :return: The client_token of this MerchantSession.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this MerchantSession.

        Client token to be passed to the JS client while initializing the JS SDK in the next step.

        :param client_token: The client_token of this MerchantSession.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 4096:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `4096`")
        if client_token is not None and len(client_token) < 0:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `0`")

        self._client_token = client_token

    @property
    def payment_method_categories(self):
        """Gets the payment_method_categories of this MerchantSession.

        Available payment method categories for this particular session

        :return: The payment_method_categories of this MerchantSession.
        :rtype: list[PaymentMethodCategory]
        """
        return self._payment_method_categories

    @payment_method_categories.setter
    def payment_method_categories(self, payment_method_categories):
        """Sets the payment_method_categories of this MerchantSession.

        Available payment method categories for this particular session

        :param payment_method_categories: The payment_method_categories of this MerchantSession.
        :type payment_method_categories: list[PaymentMethodCategory]
        """

        self._payment_method_categories = payment_method_categories

    @property
    def session_id(self):
        """Gets the session_id of this MerchantSession.

        ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.

        :return: The session_id of this MerchantSession.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this MerchantSession.

        ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.

        :param session_id: The session_id of this MerchantSession.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")
        if session_id is not None and len(session_id) > 255:
            raise ValueError("Invalid value for `session_id`, length must be less than or equal to `255`")
        if session_id is not None and len(session_id) < 0:
            raise ValueError("Invalid value for `session_id`, length must be greater than or equal to `0`")

        self._session_id = session_id
