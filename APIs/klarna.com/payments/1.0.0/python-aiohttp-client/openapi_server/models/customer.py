# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: str=None, gender: str=None, last_four_ssn: str=None, national_identification_number: str=None, organization_entity_type: str=None, organization_registration_id: str=None, title: str=None, type: str=None, vat_id: str=None):
        """Customer - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this Customer.
        :param gender: The gender of this Customer.
        :param last_four_ssn: The last_four_ssn of this Customer.
        :param national_identification_number: The national_identification_number of this Customer.
        :param organization_entity_type: The organization_entity_type of this Customer.
        :param organization_registration_id: The organization_registration_id of this Customer.
        :param title: The title of this Customer.
        :param type: The type of this Customer.
        :param vat_id: The vat_id of this Customer.
        """
        self.openapi_types = {
            'date_of_birth': str,
            'gender': str,
            'last_four_ssn': str,
            'national_identification_number': str,
            'organization_entity_type': str,
            'organization_registration_id': str,
            'title': str,
            'type': str,
            'vat_id': str
        }

        self.attribute_map = {
            'date_of_birth': 'date_of_birth',
            'gender': 'gender',
            'last_four_ssn': 'last_four_ssn',
            'national_identification_number': 'national_identification_number',
            'organization_entity_type': 'organization_entity_type',
            'organization_registration_id': 'organization_registration_id',
            'title': 'title',
            'type': 'type',
            'vat_id': 'vat_id'
        }

        self._date_of_birth = date_of_birth
        self._gender = gender
        self._last_four_ssn = last_four_ssn
        self._national_identification_number = national_identification_number
        self._organization_entity_type = organization_entity_type
        self._organization_registration_id = organization_registration_id
        self._title = title
        self._type = type
        self._vat_id = vat_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Customer.

        Customer’s date of birth. The format is ‘yyyy-mm-dd’

        :return: The date_of_birth of this Customer.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Customer.

        Customer’s date of birth. The format is ‘yyyy-mm-dd’

        :param date_of_birth: The date_of_birth of this Customer.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """Gets the gender of this Customer.

        Customer’s gender - ‘male’ or ‘female’

        :return: The gender of this Customer.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Customer.

        Customer’s gender - ‘male’ or ‘female’

        :param gender: The gender of this Customer.
        :type gender: str
        """

        self._gender = gender

    @property
    def last_four_ssn(self):
        """Gets the last_four_ssn of this Customer.

        Last four digits of the customer's social security number. This value is available for US customers.

        :return: The last_four_ssn of this Customer.
        :rtype: str
        """
        return self._last_four_ssn

    @last_four_ssn.setter
    def last_four_ssn(self, last_four_ssn):
        """Sets the last_four_ssn of this Customer.

        Last four digits of the customer's social security number. This value is available for US customers.

        :param last_four_ssn: The last_four_ssn of this Customer.
        :type last_four_ssn: str
        """
        if last_four_ssn is not None and not re.search(r'^([0-9]{4}|[0-9]{9})$', last_four_ssn):
            raise ValueError("Invalid value for `last_four_ssn`, must be a follow pattern or equal to `/^([0-9]{4}|[0-9]{9})$/`")

        self._last_four_ssn = last_four_ssn

    @property
    def national_identification_number(self):
        """Gets the national_identification_number of this Customer.

        The customer's national identification number. This value is available for EU customers utilizing national identification numbers.

        :return: The national_identification_number of this Customer.
        :rtype: str
        """
        return self._national_identification_number

    @national_identification_number.setter
    def national_identification_number(self, national_identification_number):
        """Sets the national_identification_number of this Customer.

        The customer's national identification number. This value is available for EU customers utilizing national identification numbers.

        :param national_identification_number: The national_identification_number of this Customer.
        :type national_identification_number: str
        """

        self._national_identification_number = national_identification_number

    @property
    def organization_entity_type(self):
        """Gets the organization_entity_type of this Customer.

        Organization entity type. Only applicable for B2B customers.

        :return: The organization_entity_type of this Customer.
        :rtype: str
        """
        return self._organization_entity_type

    @organization_entity_type.setter
    def organization_entity_type(self, organization_entity_type):
        """Sets the organization_entity_type of this Customer.

        Organization entity type. Only applicable for B2B customers.

        :param organization_entity_type: The organization_entity_type of this Customer.
        :type organization_entity_type: str
        """
        allowed_values = ["LIMITED_COMPANY", "PUBLIC_LIMITED_COMPANY", "ENTREPRENEURIAL_COMPANY", "LIMITED_PARTNERSHIP_LIMITED_COMPANY", "LIMITED_PARTNERSHIP", "GENERAL_PARTNERSHIP", "REGISTERED_SOLE_TRADER", "SOLE_TRADER", "CIVIL_LAW_PARTNERSHIP", "PUBLIC_INSTITUTION", "OTHER"]  # noqa: E501
        if organization_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_entity_type` ({0}), must be one of {1}"
                .format(organization_entity_type, allowed_values)
            )

        self._organization_entity_type = organization_entity_type

    @property
    def organization_registration_id(self):
        """Gets the organization_registration_id of this Customer.

        Organization registration id. Only applicable for B2B customers.

        :return: The organization_registration_id of this Customer.
        :rtype: str
        """
        return self._organization_registration_id

    @organization_registration_id.setter
    def organization_registration_id(self, organization_registration_id):
        """Sets the organization_registration_id of this Customer.

        Organization registration id. Only applicable for B2B customers.

        :param organization_registration_id: The organization_registration_id of this Customer.
        :type organization_registration_id: str
        """

        self._organization_registration_id = organization_registration_id

    @property
    def title(self):
        """Gets the title of this Customer.

        Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"

        :return: The title of this Customer.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Customer.

        Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"

        :param title: The title of this Customer.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Customer.

        Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.

        :return: The type of this Customer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Customer.

        Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.

        :param type: The type of this Customer.
        :type type: str
        """
        if type is not None and not re.search(r'^(person|organization)$', type):
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/^(person|organization)$/`")

        self._type = type

    @property
    def vat_id(self):
        """Gets the vat_id of this Customer.

        VAT ID. Only applicable for B2B customers.

        :return: The vat_id of this Customer.
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this Customer.

        VAT ID. Only applicable for B2B customers.

        :param vat_id: The vat_id of this Customer.
        :type vat_id: str
        """

        self._vat_id = vat_id
