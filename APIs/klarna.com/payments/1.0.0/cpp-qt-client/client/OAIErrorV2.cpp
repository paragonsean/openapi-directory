/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorV2::OAIErrorV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorV2::OAIErrorV2() {
    this->initializeModel();
}

OAIErrorV2::~OAIErrorV2() {}

void OAIErrorV2::initializeModel() {

    m_authorized_payment_method_isSet = false;
    m_authorized_payment_method_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_messages_isSet = false;
    m_error_messages_isValid = false;

    m_fraud_status_isSet = false;
    m_fraud_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIErrorV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorV2::fromJsonObject(QJsonObject json) {

    m_authorized_payment_method_isValid = ::OpenAPI::fromJsonValue(m_authorized_payment_method, json[QString("authorized_payment_method")]);
    m_authorized_payment_method_isSet = !json[QString("authorized_payment_method")].isNull() && m_authorized_payment_method_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlation_id")]);
    m_correlation_id_isSet = !json[QString("correlation_id")].isNull() && m_correlation_id_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_messages_isValid = ::OpenAPI::fromJsonValue(m_error_messages, json[QString("error_messages")]);
    m_error_messages_isSet = !json[QString("error_messages")].isNull() && m_error_messages_isValid;

    m_fraud_status_isValid = ::OpenAPI::fromJsonValue(m_fraud_status, json[QString("fraud_status")]);
    m_fraud_status_isSet = !json[QString("fraud_status")].isNull() && m_fraud_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIErrorV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorV2::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_payment_method.isSet()) {
        obj.insert(QString("authorized_payment_method"), ::OpenAPI::toJsonValue(m_authorized_payment_method));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlation_id"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_messages.size() > 0) {
        obj.insert(QString("error_messages"), ::OpenAPI::toJsonValue(m_error_messages));
    }
    if (m_fraud_status_isSet) {
        obj.insert(QString("fraud_status"), ::OpenAPI::toJsonValue(m_fraud_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

OAIAuthorized_payment_method OAIErrorV2::getAuthorizedPaymentMethod() const {
    return m_authorized_payment_method;
}
void OAIErrorV2::setAuthorizedPaymentMethod(const OAIAuthorized_payment_method &authorized_payment_method) {
    m_authorized_payment_method = authorized_payment_method;
    m_authorized_payment_method_isSet = true;
}

bool OAIErrorV2::is_authorized_payment_method_Set() const{
    return m_authorized_payment_method_isSet;
}

bool OAIErrorV2::is_authorized_payment_method_Valid() const{
    return m_authorized_payment_method_isValid;
}

QString OAIErrorV2::getCorrelationId() const {
    return m_correlation_id;
}
void OAIErrorV2::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIErrorV2::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIErrorV2::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QString OAIErrorV2::getErrorCode() const {
    return m_error_code;
}
void OAIErrorV2::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIErrorV2::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIErrorV2::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QList<QString> OAIErrorV2::getErrorMessages() const {
    return m_error_messages;
}
void OAIErrorV2::setErrorMessages(const QList<QString> &error_messages) {
    m_error_messages = error_messages;
    m_error_messages_isSet = true;
}

bool OAIErrorV2::is_error_messages_Set() const{
    return m_error_messages_isSet;
}

bool OAIErrorV2::is_error_messages_Valid() const{
    return m_error_messages_isValid;
}

QString OAIErrorV2::getFraudStatus() const {
    return m_fraud_status;
}
void OAIErrorV2::setFraudStatus(const QString &fraud_status) {
    m_fraud_status = fraud_status;
    m_fraud_status_isSet = true;
}

bool OAIErrorV2::is_fraud_status_Set() const{
    return m_fraud_status_isSet;
}

bool OAIErrorV2::is_fraud_status_Valid() const{
    return m_fraud_status_isValid;
}

QString OAIErrorV2::getReason() const {
    return m_reason;
}
void OAIErrorV2::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIErrorV2::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIErrorV2::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIErrorV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
