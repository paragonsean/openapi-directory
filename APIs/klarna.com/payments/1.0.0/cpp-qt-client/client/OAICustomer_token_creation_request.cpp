/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer_token_creation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer_token_creation_request::OAICustomer_token_creation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer_token_creation_request::OAICustomer_token_creation_request() {
    this->initializeModel();
}

OAICustomer_token_creation_request::~OAICustomer_token_creation_request() {}

void OAICustomer_token_creation_request::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_intended_use_isSet = false;
    m_intended_use_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_purchase_country_isSet = false;
    m_purchase_country_isValid = false;

    m_purchase_currency_isSet = false;
    m_purchase_currency_isValid = false;
}

void OAICustomer_token_creation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer_token_creation_request::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_intended_use_isValid = ::OpenAPI::fromJsonValue(m_intended_use, json[QString("intended_use")]);
    m_intended_use_isSet = !json[QString("intended_use")].isNull() && m_intended_use_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_purchase_country_isValid = ::OpenAPI::fromJsonValue(m_purchase_country, json[QString("purchase_country")]);
    m_purchase_country_isSet = !json[QString("purchase_country")].isNull() && m_purchase_country_isValid;

    m_purchase_currency_isValid = ::OpenAPI::fromJsonValue(m_purchase_currency, json[QString("purchase_currency")]);
    m_purchase_currency_isSet = !json[QString("purchase_currency")].isNull() && m_purchase_currency_isValid;
}

QString OAICustomer_token_creation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer_token_creation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_intended_use_isSet) {
        obj.insert(QString("intended_use"), ::OpenAPI::toJsonValue(m_intended_use));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_purchase_country_isSet) {
        obj.insert(QString("purchase_country"), ::OpenAPI::toJsonValue(m_purchase_country));
    }
    if (m_purchase_currency_isSet) {
        obj.insert(QString("purchase_currency"), ::OpenAPI::toJsonValue(m_purchase_currency));
    }
    return obj;
}

OAIAddress OAICustomer_token_creation_request::getBillingAddress() const {
    return m_billing_address;
}
void OAICustomer_token_creation_request::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICustomer_token_creation_request::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICustomer_token_creation_request::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICustomer OAICustomer_token_creation_request::getCustomer() const {
    return m_customer;
}
void OAICustomer_token_creation_request::setCustomer(const OAICustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomer_token_creation_request::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomer_token_creation_request::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICustomer_token_creation_request::getDescription() const {
    return m_description;
}
void OAICustomer_token_creation_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomer_token_creation_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomer_token_creation_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICustomer_token_creation_request::getIntendedUse() const {
    return m_intended_use;
}
void OAICustomer_token_creation_request::setIntendedUse(const QString &intended_use) {
    m_intended_use = intended_use;
    m_intended_use_isSet = true;
}

bool OAICustomer_token_creation_request::is_intended_use_Set() const{
    return m_intended_use_isSet;
}

bool OAICustomer_token_creation_request::is_intended_use_Valid() const{
    return m_intended_use_isValid;
}

QString OAICustomer_token_creation_request::getLocale() const {
    return m_locale;
}
void OAICustomer_token_creation_request::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICustomer_token_creation_request::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICustomer_token_creation_request::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAICustomer_token_creation_request::getPurchaseCountry() const {
    return m_purchase_country;
}
void OAICustomer_token_creation_request::setPurchaseCountry(const QString &purchase_country) {
    m_purchase_country = purchase_country;
    m_purchase_country_isSet = true;
}

bool OAICustomer_token_creation_request::is_purchase_country_Set() const{
    return m_purchase_country_isSet;
}

bool OAICustomer_token_creation_request::is_purchase_country_Valid() const{
    return m_purchase_country_isValid;
}

QString OAICustomer_token_creation_request::getPurchaseCurrency() const {
    return m_purchase_currency;
}
void OAICustomer_token_creation_request::setPurchaseCurrency(const QString &purchase_currency) {
    m_purchase_currency = purchase_currency;
    m_purchase_currency_isSet = true;
}

bool OAICustomer_token_creation_request::is_purchase_currency_Set() const{
    return m_purchase_currency_isSet;
}

bool OAICustomer_token_creation_request::is_purchase_currency_Valid() const{
    return m_purchase_currency_isValid;
}

bool OAICustomer_token_creation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intended_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer_token_creation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_intended_use_isValid && m_locale_isValid && m_purchase_country_isValid && m_purchase_currency_isValid && true;
}

} // namespace OpenAPI
