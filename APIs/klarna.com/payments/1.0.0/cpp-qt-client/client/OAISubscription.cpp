/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_count_isSet = false;
    m_interval_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_interval_count_isValid = ::OpenAPI::fromJsonValue(m_interval_count, json[QString("interval_count")]);
    m_interval_count_isSet = !json[QString("interval_count")].isNull() && m_interval_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_count_isSet) {
        obj.insert(QString("interval_count"), ::OpenAPI::toJsonValue(m_interval_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISubscription::getInterval() const {
    return m_interval;
}
void OAISubscription::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISubscription::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISubscription::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAISubscription::getIntervalCount() const {
    return m_interval_count;
}
void OAISubscription::setIntervalCount(const qint32 &interval_count) {
    m_interval_count = interval_count;
    m_interval_count_isSet = true;
}

bool OAISubscription::is_interval_count_Set() const{
    return m_interval_count_isSet;
}

bool OAISubscription::is_interval_count_Valid() const{
    return m_interval_count_isValid;
}

QString OAISubscription::getName() const {
    return m_name;
}
void OAISubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscription::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_isValid && m_interval_count_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
