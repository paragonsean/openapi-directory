/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_urls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_urls::OAIAsset_urls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_urls::OAIAsset_urls() {
    this->initializeModel();
}

OAIAsset_urls::~OAIAsset_urls() {}

void OAIAsset_urls::initializeModel() {

    m_descriptive_isSet = false;
    m_descriptive_isValid = false;

    m_standard_isSet = false;
    m_standard_isValid = false;
}

void OAIAsset_urls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_urls::fromJsonObject(QJsonObject json) {

    m_descriptive_isValid = ::OpenAPI::fromJsonValue(m_descriptive, json[QString("descriptive")]);
    m_descriptive_isSet = !json[QString("descriptive")].isNull() && m_descriptive_isValid;

    m_standard_isValid = ::OpenAPI::fromJsonValue(m_standard, json[QString("standard")]);
    m_standard_isSet = !json[QString("standard")].isNull() && m_standard_isValid;
}

QString OAIAsset_urls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_urls::asJsonObject() const {
    QJsonObject obj;
    if (m_descriptive_isSet) {
        obj.insert(QString("descriptive"), ::OpenAPI::toJsonValue(m_descriptive));
    }
    if (m_standard_isSet) {
        obj.insert(QString("standard"), ::OpenAPI::toJsonValue(m_standard));
    }
    return obj;
}

QString OAIAsset_urls::getDescriptive() const {
    return m_descriptive;
}
void OAIAsset_urls::setDescriptive(const QString &descriptive) {
    m_descriptive = descriptive;
    m_descriptive_isSet = true;
}

bool OAIAsset_urls::is_descriptive_Set() const{
    return m_descriptive_isSet;
}

bool OAIAsset_urls::is_descriptive_Valid() const{
    return m_descriptive_isValid;
}

QString OAIAsset_urls::getStandard() const {
    return m_standard;
}
void OAIAsset_urls::setStandard(const QString &standard) {
    m_standard = standard;
    m_standard_isSet = true;
}

bool OAIAsset_urls::is_standard_Set() const{
    return m_standard_isSet;
}

bool OAIAsset_urls::is_standard_Valid() const{
    return m_standard_isValid;
}

bool OAIAsset_urls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_descriptive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_urls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
