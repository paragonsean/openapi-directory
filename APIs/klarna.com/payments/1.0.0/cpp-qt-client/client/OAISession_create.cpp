/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession_create.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession_create::OAISession_create(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession_create::OAISession_create() {
    this->initializeModel();
}

OAISession_create::~OAISession_create() {}

void OAISession_create::initializeModel() {

    m_acquiring_channel_isSet = false;
    m_acquiring_channel_isValid = false;

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_authorization_token_isSet = false;
    m_authorization_token_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_custom_payment_method_ids_isSet = false;
    m_custom_payment_method_ids_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_design_isSet = false;
    m_design_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_merchant_data_isSet = false;
    m_merchant_data_isValid = false;

    m_merchant_reference1_isSet = false;
    m_merchant_reference1_isValid = false;

    m_merchant_reference2_isSet = false;
    m_merchant_reference2_isValid = false;

    m_merchant_urls_isSet = false;
    m_merchant_urls_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_order_amount_isSet = false;
    m_order_amount_isValid = false;

    m_order_lines_isSet = false;
    m_order_lines_isValid = false;

    m_order_tax_amount_isSet = false;
    m_order_tax_amount_isValid = false;

    m_payment_method_categories_isSet = false;
    m_payment_method_categories_isValid = false;

    m_purchase_country_isSet = false;
    m_purchase_country_isValid = false;

    m_purchase_currency_isSet = false;
    m_purchase_currency_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISession_create::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession_create::fromJsonObject(QJsonObject json) {

    m_acquiring_channel_isValid = ::OpenAPI::fromJsonValue(m_acquiring_channel, json[QString("acquiring_channel")]);
    m_acquiring_channel_isSet = !json[QString("acquiring_channel")].isNull() && m_acquiring_channel_isValid;

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_authorization_token_isValid = ::OpenAPI::fromJsonValue(m_authorization_token, json[QString("authorization_token")]);
    m_authorization_token_isSet = !json[QString("authorization_token")].isNull() && m_authorization_token_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("client_token")]);
    m_client_token_isSet = !json[QString("client_token")].isNull() && m_client_token_isValid;

    m_custom_payment_method_ids_isValid = ::OpenAPI::fromJsonValue(m_custom_payment_method_ids, json[QString("custom_payment_method_ids")]);
    m_custom_payment_method_ids_isSet = !json[QString("custom_payment_method_ids")].isNull() && m_custom_payment_method_ids_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_design_isValid = ::OpenAPI::fromJsonValue(m_design, json[QString("design")]);
    m_design_isSet = !json[QString("design")].isNull() && m_design_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_merchant_data_isValid = ::OpenAPI::fromJsonValue(m_merchant_data, json[QString("merchant_data")]);
    m_merchant_data_isSet = !json[QString("merchant_data")].isNull() && m_merchant_data_isValid;

    m_merchant_reference1_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference1, json[QString("merchant_reference1")]);
    m_merchant_reference1_isSet = !json[QString("merchant_reference1")].isNull() && m_merchant_reference1_isValid;

    m_merchant_reference2_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference2, json[QString("merchant_reference2")]);
    m_merchant_reference2_isSet = !json[QString("merchant_reference2")].isNull() && m_merchant_reference2_isValid;

    m_merchant_urls_isValid = ::OpenAPI::fromJsonValue(m_merchant_urls, json[QString("merchant_urls")]);
    m_merchant_urls_isSet = !json[QString("merchant_urls")].isNull() && m_merchant_urls_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_order_amount_isValid = ::OpenAPI::fromJsonValue(m_order_amount, json[QString("order_amount")]);
    m_order_amount_isSet = !json[QString("order_amount")].isNull() && m_order_amount_isValid;

    m_order_lines_isValid = ::OpenAPI::fromJsonValue(m_order_lines, json[QString("order_lines")]);
    m_order_lines_isSet = !json[QString("order_lines")].isNull() && m_order_lines_isValid;

    m_order_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_order_tax_amount, json[QString("order_tax_amount")]);
    m_order_tax_amount_isSet = !json[QString("order_tax_amount")].isNull() && m_order_tax_amount_isValid;

    m_payment_method_categories_isValid = ::OpenAPI::fromJsonValue(m_payment_method_categories, json[QString("payment_method_categories")]);
    m_payment_method_categories_isSet = !json[QString("payment_method_categories")].isNull() && m_payment_method_categories_isValid;

    m_purchase_country_isValid = ::OpenAPI::fromJsonValue(m_purchase_country, json[QString("purchase_country")]);
    m_purchase_country_isSet = !json[QString("purchase_country")].isNull() && m_purchase_country_isValid;

    m_purchase_currency_isValid = ::OpenAPI::fromJsonValue(m_purchase_currency, json[QString("purchase_currency")]);
    m_purchase_currency_isSet = !json[QString("purchase_currency")].isNull() && m_purchase_currency_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISession_create::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession_create::asJsonObject() const {
    QJsonObject obj;
    if (m_acquiring_channel_isSet) {
        obj.insert(QString("acquiring_channel"), ::OpenAPI::toJsonValue(m_acquiring_channel));
    }
    if (m_attachment.isSet()) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_authorization_token_isSet) {
        obj.insert(QString("authorization_token"), ::OpenAPI::toJsonValue(m_authorization_token));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("client_token"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_custom_payment_method_ids.size() > 0) {
        obj.insert(QString("custom_payment_method_ids"), ::OpenAPI::toJsonValue(m_custom_payment_method_ids));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_design_isSet) {
        obj.insert(QString("design"), ::OpenAPI::toJsonValue(m_design));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_intent_isSet) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_merchant_data_isSet) {
        obj.insert(QString("merchant_data"), ::OpenAPI::toJsonValue(m_merchant_data));
    }
    if (m_merchant_reference1_isSet) {
        obj.insert(QString("merchant_reference1"), ::OpenAPI::toJsonValue(m_merchant_reference1));
    }
    if (m_merchant_reference2_isSet) {
        obj.insert(QString("merchant_reference2"), ::OpenAPI::toJsonValue(m_merchant_reference2));
    }
    if (m_merchant_urls.isSet()) {
        obj.insert(QString("merchant_urls"), ::OpenAPI::toJsonValue(m_merchant_urls));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_order_amount_isSet) {
        obj.insert(QString("order_amount"), ::OpenAPI::toJsonValue(m_order_amount));
    }
    if (m_order_lines.size() > 0) {
        obj.insert(QString("order_lines"), ::OpenAPI::toJsonValue(m_order_lines));
    }
    if (m_order_tax_amount_isSet) {
        obj.insert(QString("order_tax_amount"), ::OpenAPI::toJsonValue(m_order_tax_amount));
    }
    if (m_payment_method_categories.size() > 0) {
        obj.insert(QString("payment_method_categories"), ::OpenAPI::toJsonValue(m_payment_method_categories));
    }
    if (m_purchase_country_isSet) {
        obj.insert(QString("purchase_country"), ::OpenAPI::toJsonValue(m_purchase_country));
    }
    if (m_purchase_currency_isSet) {
        obj.insert(QString("purchase_currency"), ::OpenAPI::toJsonValue(m_purchase_currency));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISession_create::getAcquiringChannel() const {
    return m_acquiring_channel;
}
void OAISession_create::setAcquiringChannel(const QString &acquiring_channel) {
    m_acquiring_channel = acquiring_channel;
    m_acquiring_channel_isSet = true;
}

bool OAISession_create::is_acquiring_channel_Set() const{
    return m_acquiring_channel_isSet;
}

bool OAISession_create::is_acquiring_channel_Valid() const{
    return m_acquiring_channel_isValid;
}

OAIAttachment OAISession_create::getAttachment() const {
    return m_attachment;
}
void OAISession_create::setAttachment(const OAIAttachment &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAISession_create::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAISession_create::is_attachment_Valid() const{
    return m_attachment_isValid;
}

QString OAISession_create::getAuthorizationToken() const {
    return m_authorization_token;
}
void OAISession_create::setAuthorizationToken(const QString &authorization_token) {
    m_authorization_token = authorization_token;
    m_authorization_token_isSet = true;
}

bool OAISession_create::is_authorization_token_Set() const{
    return m_authorization_token_isSet;
}

bool OAISession_create::is_authorization_token_Valid() const{
    return m_authorization_token_isValid;
}

OAIAddress OAISession_create::getBillingAddress() const {
    return m_billing_address;
}
void OAISession_create::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAISession_create::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAISession_create::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAISession_create::getClientToken() const {
    return m_client_token;
}
void OAISession_create::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAISession_create::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAISession_create::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAISession_create::getCustomPaymentMethodIds() const {
    return m_custom_payment_method_ids;
}
void OAISession_create::setCustomPaymentMethodIds(const QList<QString> &custom_payment_method_ids) {
    m_custom_payment_method_ids = custom_payment_method_ids;
    m_custom_payment_method_ids_isSet = true;
}

bool OAISession_create::is_custom_payment_method_ids_Set() const{
    return m_custom_payment_method_ids_isSet;
}

bool OAISession_create::is_custom_payment_method_ids_Valid() const{
    return m_custom_payment_method_ids_isValid;
}

OAICustomer OAISession_create::getCustomer() const {
    return m_customer;
}
void OAISession_create::setCustomer(const OAICustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAISession_create::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAISession_create::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAISession_create::getDesign() const {
    return m_design;
}
void OAISession_create::setDesign(const QString &design) {
    m_design = design;
    m_design_isSet = true;
}

bool OAISession_create::is_design_Set() const{
    return m_design_isSet;
}

bool OAISession_create::is_design_Valid() const{
    return m_design_isValid;
}

QDateTime OAISession_create::getExpiresAt() const {
    return m_expires_at;
}
void OAISession_create::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAISession_create::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAISession_create::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAISession_create::getIntent() const {
    return m_intent;
}
void OAISession_create::setIntent(const QString &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAISession_create::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAISession_create::is_intent_Valid() const{
    return m_intent_isValid;
}

QString OAISession_create::getLocale() const {
    return m_locale;
}
void OAISession_create::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAISession_create::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAISession_create::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAISession_create::getMerchantData() const {
    return m_merchant_data;
}
void OAISession_create::setMerchantData(const QString &merchant_data) {
    m_merchant_data = merchant_data;
    m_merchant_data_isSet = true;
}

bool OAISession_create::is_merchant_data_Set() const{
    return m_merchant_data_isSet;
}

bool OAISession_create::is_merchant_data_Valid() const{
    return m_merchant_data_isValid;
}

QString OAISession_create::getMerchantReference1() const {
    return m_merchant_reference1;
}
void OAISession_create::setMerchantReference1(const QString &merchant_reference1) {
    m_merchant_reference1 = merchant_reference1;
    m_merchant_reference1_isSet = true;
}

bool OAISession_create::is_merchant_reference1_Set() const{
    return m_merchant_reference1_isSet;
}

bool OAISession_create::is_merchant_reference1_Valid() const{
    return m_merchant_reference1_isValid;
}

QString OAISession_create::getMerchantReference2() const {
    return m_merchant_reference2;
}
void OAISession_create::setMerchantReference2(const QString &merchant_reference2) {
    m_merchant_reference2 = merchant_reference2;
    m_merchant_reference2_isSet = true;
}

bool OAISession_create::is_merchant_reference2_Set() const{
    return m_merchant_reference2_isSet;
}

bool OAISession_create::is_merchant_reference2_Valid() const{
    return m_merchant_reference2_isValid;
}

OAIMerchant_urls OAISession_create::getMerchantUrls() const {
    return m_merchant_urls;
}
void OAISession_create::setMerchantUrls(const OAIMerchant_urls &merchant_urls) {
    m_merchant_urls = merchant_urls;
    m_merchant_urls_isSet = true;
}

bool OAISession_create::is_merchant_urls_Set() const{
    return m_merchant_urls_isSet;
}

bool OAISession_create::is_merchant_urls_Valid() const{
    return m_merchant_urls_isValid;
}

OAIOptions OAISession_create::getOptions() const {
    return m_options;
}
void OAISession_create::setOptions(const OAIOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAISession_create::is_options_Set() const{
    return m_options_isSet;
}

bool OAISession_create::is_options_Valid() const{
    return m_options_isValid;
}

qint64 OAISession_create::getOrderAmount() const {
    return m_order_amount;
}
void OAISession_create::setOrderAmount(const qint64 &order_amount) {
    m_order_amount = order_amount;
    m_order_amount_isSet = true;
}

bool OAISession_create::is_order_amount_Set() const{
    return m_order_amount_isSet;
}

bool OAISession_create::is_order_amount_Valid() const{
    return m_order_amount_isValid;
}

QList<OAIOrder_line> OAISession_create::getOrderLines() const {
    return m_order_lines;
}
void OAISession_create::setOrderLines(const QList<OAIOrder_line> &order_lines) {
    m_order_lines = order_lines;
    m_order_lines_isSet = true;
}

bool OAISession_create::is_order_lines_Set() const{
    return m_order_lines_isSet;
}

bool OAISession_create::is_order_lines_Valid() const{
    return m_order_lines_isValid;
}

qint64 OAISession_create::getOrderTaxAmount() const {
    return m_order_tax_amount;
}
void OAISession_create::setOrderTaxAmount(const qint64 &order_tax_amount) {
    m_order_tax_amount = order_tax_amount;
    m_order_tax_amount_isSet = true;
}

bool OAISession_create::is_order_tax_amount_Set() const{
    return m_order_tax_amount_isSet;
}

bool OAISession_create::is_order_tax_amount_Valid() const{
    return m_order_tax_amount_isValid;
}

QSet<OAIPayment_method_category> OAISession_create::getPaymentMethodCategories() const {
    return m_payment_method_categories;
}
void OAISession_create::setPaymentMethodCategories(const QSet<OAIPayment_method_category> &payment_method_categories) {
    m_payment_method_categories = payment_method_categories;
    m_payment_method_categories_isSet = true;
}

bool OAISession_create::is_payment_method_categories_Set() const{
    return m_payment_method_categories_isSet;
}

bool OAISession_create::is_payment_method_categories_Valid() const{
    return m_payment_method_categories_isValid;
}

QString OAISession_create::getPurchaseCountry() const {
    return m_purchase_country;
}
void OAISession_create::setPurchaseCountry(const QString &purchase_country) {
    m_purchase_country = purchase_country;
    m_purchase_country_isSet = true;
}

bool OAISession_create::is_purchase_country_Set() const{
    return m_purchase_country_isSet;
}

bool OAISession_create::is_purchase_country_Valid() const{
    return m_purchase_country_isValid;
}

QString OAISession_create::getPurchaseCurrency() const {
    return m_purchase_currency;
}
void OAISession_create::setPurchaseCurrency(const QString &purchase_currency) {
    m_purchase_currency = purchase_currency;
    m_purchase_currency_isSet = true;
}

bool OAISession_create::is_purchase_currency_Set() const{
    return m_purchase_currency_isSet;
}

bool OAISession_create::is_purchase_currency_Valid() const{
    return m_purchase_currency_isValid;
}

OAIAddress OAISession_create::getShippingAddress() const {
    return m_shipping_address;
}
void OAISession_create::setShippingAddress(const OAIAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAISession_create::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAISession_create::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAISession_create::getStatus() const {
    return m_status;
}
void OAISession_create::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISession_create::is_status_Set() const{
    return m_status_isSet;
}

bool OAISession_create::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISession_create::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquiring_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_payment_method_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_design_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession_create::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_amount_isValid && m_order_lines_isValid && m_purchase_country_isValid && m_purchase_currency_isValid && true;
}

} // namespace OpenAPI
