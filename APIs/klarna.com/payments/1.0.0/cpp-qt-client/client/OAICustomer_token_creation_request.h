/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomer_token_creation_request.h
 *
 * 
 */

#ifndef OAICustomer_token_creation_request_H
#define OAICustomer_token_creation_request_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAICustomer.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddress;
class OAICustomer;

class OAICustomer_token_creation_request : public OAIObject {
public:
    OAICustomer_token_creation_request();
    OAICustomer_token_creation_request(QString json);
    ~OAICustomer_token_creation_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAddress getBillingAddress() const;
    void setBillingAddress(const OAIAddress &billing_address);
    bool is_billing_address_Set() const;
    bool is_billing_address_Valid() const;

    OAICustomer getCustomer() const;
    void setCustomer(const OAICustomer &customer);
    bool is_customer_Set() const;
    bool is_customer_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getIntendedUse() const;
    void setIntendedUse(const QString &intended_use);
    bool is_intended_use_Set() const;
    bool is_intended_use_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    QString getPurchaseCountry() const;
    void setPurchaseCountry(const QString &purchase_country);
    bool is_purchase_country_Set() const;
    bool is_purchase_country_Valid() const;

    QString getPurchaseCurrency() const;
    void setPurchaseCurrency(const QString &purchase_currency);
    bool is_purchase_currency_Set() const;
    bool is_purchase_currency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAddress m_billing_address;
    bool m_billing_address_isSet;
    bool m_billing_address_isValid;

    OAICustomer m_customer;
    bool m_customer_isSet;
    bool m_customer_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_intended_use;
    bool m_intended_use_isSet;
    bool m_intended_use_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    QString m_purchase_country;
    bool m_purchase_country_isSet;
    bool m_purchase_country_isValid;

    QString m_purchase_currency;
    bool m_purchase_currency_isSet;
    bool m_purchase_currency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomer_token_creation_request)

#endif // OAICustomer_token_creation_request_H
