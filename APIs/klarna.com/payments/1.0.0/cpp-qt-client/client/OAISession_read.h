/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISession_read.h
 *
 * 
 */

#ifndef OAISession_read_H
#define OAISession_read_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIAttachment.h"
#include "OAICustomer_read.h"
#include "OAIMerchant_urls.h"
#include "OAIOptions.h"
#include "OAIOrder_line.h"
#include "OAIPayment_method_category.h"
#include <QDateTime>
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttachment;
class OAIAddress;
class OAICustomer_read;
class OAIMerchant_urls;
class OAIOptions;
class OAIOrder_line;
class OAIPayment_method_category;

class OAISession_read : public OAIObject {
public:
    OAISession_read();
    OAISession_read(QString json);
    ~OAISession_read() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcquiringChannel() const;
    void setAcquiringChannel(const QString &acquiring_channel);
    bool is_acquiring_channel_Set() const;
    bool is_acquiring_channel_Valid() const;

    OAIAttachment getAttachment() const;
    void setAttachment(const OAIAttachment &attachment);
    bool is_attachment_Set() const;
    bool is_attachment_Valid() const;

    QString getAuthorizationToken() const;
    void setAuthorizationToken(const QString &authorization_token);
    bool is_authorization_token_Set() const;
    bool is_authorization_token_Valid() const;

    OAIAddress getBillingAddress() const;
    void setBillingAddress(const OAIAddress &billing_address);
    bool is_billing_address_Set() const;
    bool is_billing_address_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QList<QString> getCustomPaymentMethodIds() const;
    void setCustomPaymentMethodIds(const QList<QString> &custom_payment_method_ids);
    bool is_custom_payment_method_ids_Set() const;
    bool is_custom_payment_method_ids_Valid() const;

    OAICustomer_read getCustomer() const;
    void setCustomer(const OAICustomer_read &customer);
    bool is_customer_Set() const;
    bool is_customer_Valid() const;

    QString getDesign() const;
    void setDesign(const QString &design);
    bool is_design_Set() const;
    bool is_design_Valid() const;

    QDateTime getExpiresAt() const;
    void setExpiresAt(const QDateTime &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    QString getIntent() const;
    void setIntent(const QString &intent);
    bool is_intent_Set() const;
    bool is_intent_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    QString getMerchantData() const;
    void setMerchantData(const QString &merchant_data);
    bool is_merchant_data_Set() const;
    bool is_merchant_data_Valid() const;

    QString getMerchantReference1() const;
    void setMerchantReference1(const QString &merchant_reference1);
    bool is_merchant_reference1_Set() const;
    bool is_merchant_reference1_Valid() const;

    QString getMerchantReference2() const;
    void setMerchantReference2(const QString &merchant_reference2);
    bool is_merchant_reference2_Set() const;
    bool is_merchant_reference2_Valid() const;

    OAIMerchant_urls getMerchantUrls() const;
    void setMerchantUrls(const OAIMerchant_urls &merchant_urls);
    bool is_merchant_urls_Set() const;
    bool is_merchant_urls_Valid() const;

    OAIOptions getOptions() const;
    void setOptions(const OAIOptions &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    qint64 getOrderAmount() const;
    void setOrderAmount(const qint64 &order_amount);
    bool is_order_amount_Set() const;
    bool is_order_amount_Valid() const;

    QList<OAIOrder_line> getOrderLines() const;
    void setOrderLines(const QList<OAIOrder_line> &order_lines);
    bool is_order_lines_Set() const;
    bool is_order_lines_Valid() const;

    qint64 getOrderTaxAmount() const;
    void setOrderTaxAmount(const qint64 &order_tax_amount);
    bool is_order_tax_amount_Set() const;
    bool is_order_tax_amount_Valid() const;

    QSet<OAIPayment_method_category> getPaymentMethodCategories() const;
    void setPaymentMethodCategories(const QSet<OAIPayment_method_category> &payment_method_categories);
    bool is_payment_method_categories_Set() const;
    bool is_payment_method_categories_Valid() const;

    QString getPurchaseCountry() const;
    void setPurchaseCountry(const QString &purchase_country);
    bool is_purchase_country_Set() const;
    bool is_purchase_country_Valid() const;

    QString getPurchaseCurrency() const;
    void setPurchaseCurrency(const QString &purchase_currency);
    bool is_purchase_currency_Set() const;
    bool is_purchase_currency_Valid() const;

    OAIAddress getShippingAddress() const;
    void setShippingAddress(const OAIAddress &shipping_address);
    bool is_shipping_address_Set() const;
    bool is_shipping_address_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acquiring_channel;
    bool m_acquiring_channel_isSet;
    bool m_acquiring_channel_isValid;

    OAIAttachment m_attachment;
    bool m_attachment_isSet;
    bool m_attachment_isValid;

    QString m_authorization_token;
    bool m_authorization_token_isSet;
    bool m_authorization_token_isValid;

    OAIAddress m_billing_address;
    bool m_billing_address_isSet;
    bool m_billing_address_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QList<QString> m_custom_payment_method_ids;
    bool m_custom_payment_method_ids_isSet;
    bool m_custom_payment_method_ids_isValid;

    OAICustomer_read m_customer;
    bool m_customer_isSet;
    bool m_customer_isValid;

    QString m_design;
    bool m_design_isSet;
    bool m_design_isValid;

    QDateTime m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    QString m_intent;
    bool m_intent_isSet;
    bool m_intent_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    QString m_merchant_data;
    bool m_merchant_data_isSet;
    bool m_merchant_data_isValid;

    QString m_merchant_reference1;
    bool m_merchant_reference1_isSet;
    bool m_merchant_reference1_isValid;

    QString m_merchant_reference2;
    bool m_merchant_reference2_isSet;
    bool m_merchant_reference2_isValid;

    OAIMerchant_urls m_merchant_urls;
    bool m_merchant_urls_isSet;
    bool m_merchant_urls_isValid;

    OAIOptions m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    qint64 m_order_amount;
    bool m_order_amount_isSet;
    bool m_order_amount_isValid;

    QList<OAIOrder_line> m_order_lines;
    bool m_order_lines_isSet;
    bool m_order_lines_isValid;

    qint64 m_order_tax_amount;
    bool m_order_tax_amount_isSet;
    bool m_order_tax_amount_isValid;

    QSet<OAIPayment_method_category> m_payment_method_categories;
    bool m_payment_method_categories_isSet;
    bool m_payment_method_categories_isValid;

    QString m_purchase_country;
    bool m_purchase_country_isSet;
    bool m_purchase_country_isValid;

    QString m_purchase_currency;
    bool m_purchase_currency_isSet;
    bool m_purchase_currency_isValid;

    OAIAddress m_shipping_address;
    bool m_shipping_address_isSet;
    bool m_shipping_address_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISession_read)

#endif // OAISession_read_H
