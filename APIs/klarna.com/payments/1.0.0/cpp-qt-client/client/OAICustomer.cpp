/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_last_four_ssn_isSet = false;
    m_last_four_ssn_isValid = false;

    m_national_identification_number_isSet = false;
    m_national_identification_number_isValid = false;

    m_organization_entity_type_isSet = false;
    m_organization_entity_type_isValid = false;

    m_organization_registration_id_isSet = false;
    m_organization_registration_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_id_isSet = false;
    m_vat_id_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("date_of_birth")]);
    m_date_of_birth_isSet = !json[QString("date_of_birth")].isNull() && m_date_of_birth_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_last_four_ssn_isValid = ::OpenAPI::fromJsonValue(m_last_four_ssn, json[QString("last_four_ssn")]);
    m_last_four_ssn_isSet = !json[QString("last_four_ssn")].isNull() && m_last_four_ssn_isValid;

    m_national_identification_number_isValid = ::OpenAPI::fromJsonValue(m_national_identification_number, json[QString("national_identification_number")]);
    m_national_identification_number_isSet = !json[QString("national_identification_number")].isNull() && m_national_identification_number_isValid;

    m_organization_entity_type_isValid = ::OpenAPI::fromJsonValue(m_organization_entity_type, json[QString("organization_entity_type")]);
    m_organization_entity_type_isSet = !json[QString("organization_entity_type")].isNull() && m_organization_entity_type_isValid;

    m_organization_registration_id_isValid = ::OpenAPI::fromJsonValue(m_organization_registration_id, json[QString("organization_registration_id")]);
    m_organization_registration_id_isSet = !json[QString("organization_registration_id")].isNull() && m_organization_registration_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_id_isValid = ::OpenAPI::fromJsonValue(m_vat_id, json[QString("vat_id")]);
    m_vat_id_isSet = !json[QString("vat_id")].isNull() && m_vat_id_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_birth_isSet) {
        obj.insert(QString("date_of_birth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_last_four_ssn_isSet) {
        obj.insert(QString("last_four_ssn"), ::OpenAPI::toJsonValue(m_last_four_ssn));
    }
    if (m_national_identification_number_isSet) {
        obj.insert(QString("national_identification_number"), ::OpenAPI::toJsonValue(m_national_identification_number));
    }
    if (m_organization_entity_type_isSet) {
        obj.insert(QString("organization_entity_type"), ::OpenAPI::toJsonValue(m_organization_entity_type));
    }
    if (m_organization_registration_id_isSet) {
        obj.insert(QString("organization_registration_id"), ::OpenAPI::toJsonValue(m_organization_registration_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_id_isSet) {
        obj.insert(QString("vat_id"), ::OpenAPI::toJsonValue(m_vat_id));
    }
    return obj;
}

QString OAICustomer::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAICustomer::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAICustomer::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAICustomer::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAICustomer::getGender() const {
    return m_gender;
}
void OAICustomer::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAICustomer::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAICustomer::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAICustomer::getLastFourSsn() const {
    return m_last_four_ssn;
}
void OAICustomer::setLastFourSsn(const QString &last_four_ssn) {
    m_last_four_ssn = last_four_ssn;
    m_last_four_ssn_isSet = true;
}

bool OAICustomer::is_last_four_ssn_Set() const{
    return m_last_four_ssn_isSet;
}

bool OAICustomer::is_last_four_ssn_Valid() const{
    return m_last_four_ssn_isValid;
}

QString OAICustomer::getNationalIdentificationNumber() const {
    return m_national_identification_number;
}
void OAICustomer::setNationalIdentificationNumber(const QString &national_identification_number) {
    m_national_identification_number = national_identification_number;
    m_national_identification_number_isSet = true;
}

bool OAICustomer::is_national_identification_number_Set() const{
    return m_national_identification_number_isSet;
}

bool OAICustomer::is_national_identification_number_Valid() const{
    return m_national_identification_number_isValid;
}

QString OAICustomer::getOrganizationEntityType() const {
    return m_organization_entity_type;
}
void OAICustomer::setOrganizationEntityType(const QString &organization_entity_type) {
    m_organization_entity_type = organization_entity_type;
    m_organization_entity_type_isSet = true;
}

bool OAICustomer::is_organization_entity_type_Set() const{
    return m_organization_entity_type_isSet;
}

bool OAICustomer::is_organization_entity_type_Valid() const{
    return m_organization_entity_type_isValid;
}

QString OAICustomer::getOrganizationRegistrationId() const {
    return m_organization_registration_id;
}
void OAICustomer::setOrganizationRegistrationId(const QString &organization_registration_id) {
    m_organization_registration_id = organization_registration_id;
    m_organization_registration_id_isSet = true;
}

bool OAICustomer::is_organization_registration_id_Set() const{
    return m_organization_registration_id_isSet;
}

bool OAICustomer::is_organization_registration_id_Valid() const{
    return m_organization_registration_id_isValid;
}

QString OAICustomer::getTitle() const {
    return m_title;
}
void OAICustomer::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICustomer::is_title_Set() const{
    return m_title_isSet;
}

bool OAICustomer::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICustomer::getType() const {
    return m_type;
}
void OAICustomer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomer::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomer::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICustomer::getVatId() const {
    return m_vat_id;
}
void OAICustomer::setVatId(const QString &vat_id) {
    m_vat_id = vat_id;
    m_vat_id_isSet = true;
}

bool OAICustomer::is_vat_id_Set() const{
    return m_vat_id_isSet;
}

bool OAICustomer::is_vat_id_Valid() const{
    return m_vat_id_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_four_ssn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_identification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
