/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_order_request.h"
#include "OAICustomer_token_creation_request.h"
#include "OAICustomer_token_creation_response.h"
#include "OAIErrorV2.h"
#include "OAIOrder.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization_token QString [required]
    */
    virtual void cancelAuthorization(const QString &authorization_token);

    /**
    * @param[in]  authorization_token QString [required]
    * @param[in]  oai_create_order_request OAICreate_order_request [optional]
    */
    virtual void createOrder(const QString &authorization_token, const ::OpenAPI::OptionalParam<OAICreate_order_request> &oai_create_order_request = ::OpenAPI::OptionalParam<OAICreate_order_request>());

    /**
    * @param[in]  authorization_token QString [required]
    * @param[in]  oai_customer_token_creation_request OAICustomer_token_creation_request [optional]
    */
    virtual void purchaseToken(const QString &authorization_token, const ::OpenAPI::OptionalParam<OAICustomer_token_creation_request> &oai_customer_token_creation_request = ::OpenAPI::OptionalParam<OAICustomer_token_creation_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelAuthorizationCallback(OAIHttpRequestWorker *worker);
    void createOrderCallback(OAIHttpRequestWorker *worker);
    void purchaseTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelAuthorizationSignal();
    void createOrderSignal(OAIOrder summary);
    void purchaseTokenSignal(OAICustomer_token_creation_response summary);


    void cancelAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void createOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void purchaseTokenSignalFull(OAIHttpRequestWorker *worker, OAICustomer_token_creation_response summary);

    Q_DECL_DEPRECATED_X("Use cancelAuthorizationSignalError() instead")
    void cancelAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrderSignalError() instead")
    void createOrderSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseTokenSignalError() instead")
    void purchaseTokenSignalE(OAICustomer_token_creation_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseTokenSignalError(OAICustomer_token_creation_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelAuthorizationSignalErrorFull() instead")
    void cancelAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrderSignalErrorFull() instead")
    void createOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purchaseTokenSignalErrorFull() instead")
    void purchaseTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purchaseTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
