/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer_token_creation_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer_token_creation_response::OAICustomer_token_creation_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer_token_creation_response::OAICustomer_token_creation_response() {
    this->initializeModel();
}

OAICustomer_token_creation_response::~OAICustomer_token_creation_response() {}

void OAICustomer_token_creation_response::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_payment_method_reference_isSet = false;
    m_payment_method_reference_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;
}

void OAICustomer_token_creation_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer_token_creation_response::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_payment_method_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_method_reference, json[QString("payment_method_reference")]);
    m_payment_method_reference_isSet = !json[QString("payment_method_reference")].isNull() && m_payment_method_reference_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("token_id")]);
    m_token_id_isSet = !json[QString("token_id")].isNull() && m_token_id_isValid;
}

QString OAICustomer_token_creation_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer_token_creation_response::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_payment_method_reference_isSet) {
        obj.insert(QString("payment_method_reference"), ::OpenAPI::toJsonValue(m_payment_method_reference));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("token_id"), ::OpenAPI::toJsonValue(m_token_id));
    }
    return obj;
}

OAIAddress OAICustomer_token_creation_response::getBillingAddress() const {
    return m_billing_address;
}
void OAICustomer_token_creation_response::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICustomer_token_creation_response::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICustomer_token_creation_response::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICustomer_read_create_token OAICustomer_token_creation_response::getCustomer() const {
    return m_customer;
}
void OAICustomer_token_creation_response::setCustomer(const OAICustomer_read_create_token &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICustomer_token_creation_response::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICustomer_token_creation_response::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICustomer_token_creation_response::getPaymentMethodReference() const {
    return m_payment_method_reference;
}
void OAICustomer_token_creation_response::setPaymentMethodReference(const QString &payment_method_reference) {
    m_payment_method_reference = payment_method_reference;
    m_payment_method_reference_isSet = true;
}

bool OAICustomer_token_creation_response::is_payment_method_reference_Set() const{
    return m_payment_method_reference_isSet;
}

bool OAICustomer_token_creation_response::is_payment_method_reference_Valid() const{
    return m_payment_method_reference_isValid;
}

QString OAICustomer_token_creation_response::getRedirectUrl() const {
    return m_redirect_url;
}
void OAICustomer_token_creation_response::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAICustomer_token_creation_response::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAICustomer_token_creation_response::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAICustomer_token_creation_response::getTokenId() const {
    return m_token_id;
}
void OAICustomer_token_creation_response::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAICustomer_token_creation_response::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAICustomer_token_creation_response::is_token_id_Valid() const{
    return m_token_id_isValid;
}

bool OAICustomer_token_creation_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer_token_creation_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_id_isValid && true;
}

} // namespace OpenAPI
