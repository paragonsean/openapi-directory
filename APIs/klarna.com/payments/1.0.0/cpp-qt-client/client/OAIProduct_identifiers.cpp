/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct_identifiers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct_identifiers::OAIProduct_identifiers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct_identifiers::OAIProduct_identifiers() {
    this->initializeModel();
}

OAIProduct_identifiers::~OAIProduct_identifiers() {}

void OAIProduct_identifiers::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_category_path_isSet = false;
    m_category_path_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_global_trade_item_number_isSet = false;
    m_global_trade_item_number_isValid = false;

    m_manufacturer_part_number_isSet = false;
    m_manufacturer_part_number_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIProduct_identifiers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct_identifiers::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_category_path_isValid = ::OpenAPI::fromJsonValue(m_category_path, json[QString("category_path")]);
    m_category_path_isSet = !json[QString("category_path")].isNull() && m_category_path_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_global_trade_item_number_isValid = ::OpenAPI::fromJsonValue(m_global_trade_item_number, json[QString("global_trade_item_number")]);
    m_global_trade_item_number_isSet = !json[QString("global_trade_item_number")].isNull() && m_global_trade_item_number_isValid;

    m_manufacturer_part_number_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_part_number, json[QString("manufacturer_part_number")]);
    m_manufacturer_part_number_isSet = !json[QString("manufacturer_part_number")].isNull() && m_manufacturer_part_number_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIProduct_identifiers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct_identifiers::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_category_path_isSet) {
        obj.insert(QString("category_path"), ::OpenAPI::toJsonValue(m_category_path));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_global_trade_item_number_isSet) {
        obj.insert(QString("global_trade_item_number"), ::OpenAPI::toJsonValue(m_global_trade_item_number));
    }
    if (m_manufacturer_part_number_isSet) {
        obj.insert(QString("manufacturer_part_number"), ::OpenAPI::toJsonValue(m_manufacturer_part_number));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIProduct_identifiers::getBrand() const {
    return m_brand;
}
void OAIProduct_identifiers::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProduct_identifiers::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProduct_identifiers::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIProduct_identifiers::getCategoryPath() const {
    return m_category_path;
}
void OAIProduct_identifiers::setCategoryPath(const QString &category_path) {
    m_category_path = category_path;
    m_category_path_isSet = true;
}

bool OAIProduct_identifiers::is_category_path_Set() const{
    return m_category_path_isSet;
}

bool OAIProduct_identifiers::is_category_path_Valid() const{
    return m_category_path_isValid;
}

QString OAIProduct_identifiers::getColor() const {
    return m_color;
}
void OAIProduct_identifiers::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIProduct_identifiers::is_color_Set() const{
    return m_color_isSet;
}

bool OAIProduct_identifiers::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIProduct_identifiers::getGlobalTradeItemNumber() const {
    return m_global_trade_item_number;
}
void OAIProduct_identifiers::setGlobalTradeItemNumber(const QString &global_trade_item_number) {
    m_global_trade_item_number = global_trade_item_number;
    m_global_trade_item_number_isSet = true;
}

bool OAIProduct_identifiers::is_global_trade_item_number_Set() const{
    return m_global_trade_item_number_isSet;
}

bool OAIProduct_identifiers::is_global_trade_item_number_Valid() const{
    return m_global_trade_item_number_isValid;
}

QString OAIProduct_identifiers::getManufacturerPartNumber() const {
    return m_manufacturer_part_number;
}
void OAIProduct_identifiers::setManufacturerPartNumber(const QString &manufacturer_part_number) {
    m_manufacturer_part_number = manufacturer_part_number;
    m_manufacturer_part_number_isSet = true;
}

bool OAIProduct_identifiers::is_manufacturer_part_number_Set() const{
    return m_manufacturer_part_number_isSet;
}

bool OAIProduct_identifiers::is_manufacturer_part_number_Valid() const{
    return m_manufacturer_part_number_isValid;
}

QString OAIProduct_identifiers::getSize() const {
    return m_size;
}
void OAIProduct_identifiers::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIProduct_identifiers::is_size_Set() const{
    return m_size_isSet;
}

bool OAIProduct_identifiers::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIProduct_identifiers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_trade_item_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct_identifiers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
