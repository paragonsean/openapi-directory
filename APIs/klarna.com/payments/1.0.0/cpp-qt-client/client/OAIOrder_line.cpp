/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder_line.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder_line::OAIOrder_line(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder_line::OAIOrder_line() {
    this->initializeModel();
}

OAIOrder_line::~OAIOrder_line() {}

void OAIOrder_line::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_merchant_data_isSet = false;
    m_merchant_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_identifiers_isSet = false;
    m_product_identifiers_isValid = false;

    m_product_url_isSet = false;
    m_product_url_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_unit_isSet = false;
    m_quantity_unit_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_total_discount_amount_isSet = false;
    m_total_discount_amount_isValid = false;

    m_total_tax_amount_isSet = false;
    m_total_tax_amount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIOrder_line::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder_line::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_merchant_data_isValid = ::OpenAPI::fromJsonValue(m_merchant_data, json[QString("merchant_data")]);
    m_merchant_data_isSet = !json[QString("merchant_data")].isNull() && m_merchant_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_identifiers_isValid = ::OpenAPI::fromJsonValue(m_product_identifiers, json[QString("product_identifiers")]);
    m_product_identifiers_isSet = !json[QString("product_identifiers")].isNull() && m_product_identifiers_isValid;

    m_product_url_isValid = ::OpenAPI::fromJsonValue(m_product_url, json[QString("product_url")]);
    m_product_url_isSet = !json[QString("product_url")].isNull() && m_product_url_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_unit_isValid = ::OpenAPI::fromJsonValue(m_quantity_unit, json[QString("quantity_unit")]);
    m_quantity_unit_isSet = !json[QString("quantity_unit")].isNull() && m_quantity_unit_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("tax_rate")]);
    m_tax_rate_isSet = !json[QString("tax_rate")].isNull() && m_tax_rate_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;

    m_total_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_total_discount_amount, json[QString("total_discount_amount")]);
    m_total_discount_amount_isSet = !json[QString("total_discount_amount")].isNull() && m_total_discount_amount_isValid;

    m_total_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_total_tax_amount, json[QString("total_tax_amount")]);
    m_total_tax_amount_isSet = !json[QString("total_tax_amount")].isNull() && m_total_tax_amount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unit_price")]);
    m_unit_price_isSet = !json[QString("unit_price")].isNull() && m_unit_price_isValid;
}

QString OAIOrder_line::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder_line::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_merchant_data_isSet) {
        obj.insert(QString("merchant_data"), ::OpenAPI::toJsonValue(m_merchant_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_identifiers.isSet()) {
        obj.insert(QString("product_identifiers"), ::OpenAPI::toJsonValue(m_product_identifiers));
    }
    if (m_product_url_isSet) {
        obj.insert(QString("product_url"), ::OpenAPI::toJsonValue(m_product_url));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_unit_isSet) {
        obj.insert(QString("quantity_unit"), ::OpenAPI::toJsonValue(m_quantity_unit));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("tax_rate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_total_discount_amount_isSet) {
        obj.insert(QString("total_discount_amount"), ::OpenAPI::toJsonValue(m_total_discount_amount));
    }
    if (m_total_tax_amount_isSet) {
        obj.insert(QString("total_tax_amount"), ::OpenAPI::toJsonValue(m_total_tax_amount));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unit_price"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAIOrder_line::getImageUrl() const {
    return m_image_url;
}
void OAIOrder_line::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIOrder_line::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIOrder_line::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIOrder_line::getMerchantData() const {
    return m_merchant_data;
}
void OAIOrder_line::setMerchantData(const QString &merchant_data) {
    m_merchant_data = merchant_data;
    m_merchant_data_isSet = true;
}

bool OAIOrder_line::is_merchant_data_Set() const{
    return m_merchant_data_isSet;
}

bool OAIOrder_line::is_merchant_data_Valid() const{
    return m_merchant_data_isValid;
}

QString OAIOrder_line::getName() const {
    return m_name;
}
void OAIOrder_line::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrder_line::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrder_line::is_name_Valid() const{
    return m_name_isValid;
}

OAIProduct_identifiers OAIOrder_line::getProductIdentifiers() const {
    return m_product_identifiers;
}
void OAIOrder_line::setProductIdentifiers(const OAIProduct_identifiers &product_identifiers) {
    m_product_identifiers = product_identifiers;
    m_product_identifiers_isSet = true;
}

bool OAIOrder_line::is_product_identifiers_Set() const{
    return m_product_identifiers_isSet;
}

bool OAIOrder_line::is_product_identifiers_Valid() const{
    return m_product_identifiers_isValid;
}

QString OAIOrder_line::getProductUrl() const {
    return m_product_url;
}
void OAIOrder_line::setProductUrl(const QString &product_url) {
    m_product_url = product_url;
    m_product_url_isSet = true;
}

bool OAIOrder_line::is_product_url_Set() const{
    return m_product_url_isSet;
}

bool OAIOrder_line::is_product_url_Valid() const{
    return m_product_url_isValid;
}

qint64 OAIOrder_line::getQuantity() const {
    return m_quantity;
}
void OAIOrder_line::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrder_line::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrder_line::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrder_line::getQuantityUnit() const {
    return m_quantity_unit;
}
void OAIOrder_line::setQuantityUnit(const QString &quantity_unit) {
    m_quantity_unit = quantity_unit;
    m_quantity_unit_isSet = true;
}

bool OAIOrder_line::is_quantity_unit_Set() const{
    return m_quantity_unit_isSet;
}

bool OAIOrder_line::is_quantity_unit_Valid() const{
    return m_quantity_unit_isValid;
}

QString OAIOrder_line::getReference() const {
    return m_reference;
}
void OAIOrder_line::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIOrder_line::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIOrder_line::is_reference_Valid() const{
    return m_reference_isValid;
}

OAISubscription OAIOrder_line::getSubscription() const {
    return m_subscription;
}
void OAIOrder_line::setSubscription(const OAISubscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIOrder_line::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIOrder_line::is_subscription_Valid() const{
    return m_subscription_isValid;
}

qint64 OAIOrder_line::getTaxRate() const {
    return m_tax_rate;
}
void OAIOrder_line::setTaxRate(const qint64 &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAIOrder_line::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAIOrder_line::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

qint64 OAIOrder_line::getTotalAmount() const {
    return m_total_amount;
}
void OAIOrder_line::setTotalAmount(const qint64 &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIOrder_line::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIOrder_line::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

qint64 OAIOrder_line::getTotalDiscountAmount() const {
    return m_total_discount_amount;
}
void OAIOrder_line::setTotalDiscountAmount(const qint64 &total_discount_amount) {
    m_total_discount_amount = total_discount_amount;
    m_total_discount_amount_isSet = true;
}

bool OAIOrder_line::is_total_discount_amount_Set() const{
    return m_total_discount_amount_isSet;
}

bool OAIOrder_line::is_total_discount_amount_Valid() const{
    return m_total_discount_amount_isValid;
}

qint64 OAIOrder_line::getTotalTaxAmount() const {
    return m_total_tax_amount;
}
void OAIOrder_line::setTotalTaxAmount(const qint64 &total_tax_amount) {
    m_total_tax_amount = total_tax_amount;
    m_total_tax_amount_isSet = true;
}

bool OAIOrder_line::is_total_tax_amount_Set() const{
    return m_total_tax_amount_isSet;
}

bool OAIOrder_line::is_total_tax_amount_Valid() const{
    return m_total_tax_amount_isValid;
}

QString OAIOrder_line::getType() const {
    return m_type;
}
void OAIOrder_line::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrder_line::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrder_line::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIOrder_line::getUnitPrice() const {
    return m_unit_price;
}
void OAIOrder_line::setUnitPrice(const qint64 &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIOrder_line::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIOrder_line::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIOrder_line::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder_line::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_quantity_isValid && m_total_amount_isValid && m_unit_price_isValid && true;
}

} // namespace OpenAPI
