/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment_method_category.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment_method_category::OAIPayment_method_category(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment_method_category::OAIPayment_method_category() {
    this->initializeModel();
}

OAIPayment_method_category::~OAIPayment_method_category() {}

void OAIPayment_method_category::initializeModel() {

    m_asset_urls_isSet = false;
    m_asset_urls_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPayment_method_category::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment_method_category::fromJsonObject(QJsonObject json) {

    m_asset_urls_isValid = ::OpenAPI::fromJsonValue(m_asset_urls, json[QString("asset_urls")]);
    m_asset_urls_isSet = !json[QString("asset_urls")].isNull() && m_asset_urls_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPayment_method_category::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment_method_category::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_urls.isSet()) {
        obj.insert(QString("asset_urls"), ::OpenAPI::toJsonValue(m_asset_urls));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIAsset_urls OAIPayment_method_category::getAssetUrls() const {
    return m_asset_urls;
}
void OAIPayment_method_category::setAssetUrls(const OAIAsset_urls &asset_urls) {
    m_asset_urls = asset_urls;
    m_asset_urls_isSet = true;
}

bool OAIPayment_method_category::is_asset_urls_Set() const{
    return m_asset_urls_isSet;
}

bool OAIPayment_method_category::is_asset_urls_Valid() const{
    return m_asset_urls_isValid;
}

QString OAIPayment_method_category::getIdentifier() const {
    return m_identifier;
}
void OAIPayment_method_category::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPayment_method_category::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPayment_method_category::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIPayment_method_category::getName() const {
    return m_name;
}
void OAIPayment_method_category::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPayment_method_category::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPayment_method_category::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPayment_method_category::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment_method_category::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
