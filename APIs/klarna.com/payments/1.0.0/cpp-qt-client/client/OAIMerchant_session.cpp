/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant_session::OAIMerchant_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant_session::OAIMerchant_session() {
    this->initializeModel();
}

OAIMerchant_session::~OAIMerchant_session() {}

void OAIMerchant_session::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_payment_method_categories_isSet = false;
    m_payment_method_categories_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAIMerchant_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant_session::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("client_token")]);
    m_client_token_isSet = !json[QString("client_token")].isNull() && m_client_token_isValid;

    m_payment_method_categories_isValid = ::OpenAPI::fromJsonValue(m_payment_method_categories, json[QString("payment_method_categories")]);
    m_payment_method_categories_isSet = !json[QString("payment_method_categories")].isNull() && m_payment_method_categories_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;
}

QString OAIMerchant_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant_session::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("client_token"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_payment_method_categories.size() > 0) {
        obj.insert(QString("payment_method_categories"), ::OpenAPI::toJsonValue(m_payment_method_categories));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QString OAIMerchant_session::getClientToken() const {
    return m_client_token;
}
void OAIMerchant_session::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIMerchant_session::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIMerchant_session::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QSet<OAIPayment_method_category> OAIMerchant_session::getPaymentMethodCategories() const {
    return m_payment_method_categories;
}
void OAIMerchant_session::setPaymentMethodCategories(const QSet<OAIPayment_method_category> &payment_method_categories) {
    m_payment_method_categories = payment_method_categories;
    m_payment_method_categories_isSet = true;
}

bool OAIMerchant_session::is_payment_method_categories_Set() const{
    return m_payment_method_categories_isSet;
}

bool OAIMerchant_session::is_payment_method_categories_Valid() const{
    return m_payment_method_categories_isValid;
}

QString OAIMerchant_session::getSessionId() const {
    return m_session_id;
}
void OAIMerchant_session::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIMerchant_session::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIMerchant_session::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIMerchant_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_session_id_isValid && true;
}

} // namespace OpenAPI
