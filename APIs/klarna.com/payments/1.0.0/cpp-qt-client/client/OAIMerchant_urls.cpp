/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant_urls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant_urls::OAIMerchant_urls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant_urls::OAIMerchant_urls() {
    this->initializeModel();
}

OAIMerchant_urls::~OAIMerchant_urls() {}

void OAIMerchant_urls::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_confirmation_isSet = false;
    m_confirmation_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_push_isSet = false;
    m_push_isValid = false;
}

void OAIMerchant_urls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant_urls::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_confirmation_isValid = ::OpenAPI::fromJsonValue(m_confirmation, json[QString("confirmation")]);
    m_confirmation_isSet = !json[QString("confirmation")].isNull() && m_confirmation_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("notification")]);
    m_notification_isSet = !json[QString("notification")].isNull() && m_notification_isValid;

    m_push_isValid = ::OpenAPI::fromJsonValue(m_push, json[QString("push")]);
    m_push_isSet = !json[QString("push")].isNull() && m_push_isValid;
}

QString OAIMerchant_urls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant_urls::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_isSet) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_confirmation_isSet) {
        obj.insert(QString("confirmation"), ::OpenAPI::toJsonValue(m_confirmation));
    }
    if (m_notification_isSet) {
        obj.insert(QString("notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_push_isSet) {
        obj.insert(QString("push"), ::OpenAPI::toJsonValue(m_push));
    }
    return obj;
}

QString OAIMerchant_urls::getAuthorization() const {
    return m_authorization;
}
void OAIMerchant_urls::setAuthorization(const QString &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIMerchant_urls::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIMerchant_urls::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QString OAIMerchant_urls::getConfirmation() const {
    return m_confirmation;
}
void OAIMerchant_urls::setConfirmation(const QString &confirmation) {
    m_confirmation = confirmation;
    m_confirmation_isSet = true;
}

bool OAIMerchant_urls::is_confirmation_Set() const{
    return m_confirmation_isSet;
}

bool OAIMerchant_urls::is_confirmation_Valid() const{
    return m_confirmation_isValid;
}

QString OAIMerchant_urls::getNotification() const {
    return m_notification;
}
void OAIMerchant_urls::setNotification(const QString &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIMerchant_urls::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIMerchant_urls::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAIMerchant_urls::getPush() const {
    return m_push;
}
void OAIMerchant_urls::setPush(const QString &push) {
    m_push = push;
    m_push_isSet = true;
}

bool OAIMerchant_urls::is_push_Set() const{
    return m_push_isSet;
}

bool OAIMerchant_urls::is_push_Valid() const{
    return m_push_isValid;
}

bool OAIMerchant_urls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant_urls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
