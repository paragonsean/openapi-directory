/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_color_border_isSet = false;
    m_color_border_isValid = false;

    m_color_border_selected_isSet = false;
    m_color_border_selected_isValid = false;

    m_color_details_isSet = false;
    m_color_details_isValid = false;

    m_color_text_isSet = false;
    m_color_text_isValid = false;

    m_radius_border_isSet = false;
    m_radius_border_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_color_border_isValid = ::OpenAPI::fromJsonValue(m_color_border, json[QString("color_border")]);
    m_color_border_isSet = !json[QString("color_border")].isNull() && m_color_border_isValid;

    m_color_border_selected_isValid = ::OpenAPI::fromJsonValue(m_color_border_selected, json[QString("color_border_selected")]);
    m_color_border_selected_isSet = !json[QString("color_border_selected")].isNull() && m_color_border_selected_isValid;

    m_color_details_isValid = ::OpenAPI::fromJsonValue(m_color_details, json[QString("color_details")]);
    m_color_details_isSet = !json[QString("color_details")].isNull() && m_color_details_isValid;

    m_color_text_isValid = ::OpenAPI::fromJsonValue(m_color_text, json[QString("color_text")]);
    m_color_text_isSet = !json[QString("color_text")].isNull() && m_color_text_isValid;

    m_radius_border_isValid = ::OpenAPI::fromJsonValue(m_radius_border, json[QString("radius_border")]);
    m_radius_border_isSet = !json[QString("radius_border")].isNull() && m_radius_border_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_color_border_isSet) {
        obj.insert(QString("color_border"), ::OpenAPI::toJsonValue(m_color_border));
    }
    if (m_color_border_selected_isSet) {
        obj.insert(QString("color_border_selected"), ::OpenAPI::toJsonValue(m_color_border_selected));
    }
    if (m_color_details_isSet) {
        obj.insert(QString("color_details"), ::OpenAPI::toJsonValue(m_color_details));
    }
    if (m_color_text_isSet) {
        obj.insert(QString("color_text"), ::OpenAPI::toJsonValue(m_color_text));
    }
    if (m_radius_border_isSet) {
        obj.insert(QString("radius_border"), ::OpenAPI::toJsonValue(m_radius_border));
    }
    return obj;
}

QString OAIOptions::getColorBorder() const {
    return m_color_border;
}
void OAIOptions::setColorBorder(const QString &color_border) {
    m_color_border = color_border;
    m_color_border_isSet = true;
}

bool OAIOptions::is_color_border_Set() const{
    return m_color_border_isSet;
}

bool OAIOptions::is_color_border_Valid() const{
    return m_color_border_isValid;
}

QString OAIOptions::getColorBorderSelected() const {
    return m_color_border_selected;
}
void OAIOptions::setColorBorderSelected(const QString &color_border_selected) {
    m_color_border_selected = color_border_selected;
    m_color_border_selected_isSet = true;
}

bool OAIOptions::is_color_border_selected_Set() const{
    return m_color_border_selected_isSet;
}

bool OAIOptions::is_color_border_selected_Valid() const{
    return m_color_border_selected_isValid;
}

QString OAIOptions::getColorDetails() const {
    return m_color_details;
}
void OAIOptions::setColorDetails(const QString &color_details) {
    m_color_details = color_details;
    m_color_details_isSet = true;
}

bool OAIOptions::is_color_details_Set() const{
    return m_color_details_isSet;
}

bool OAIOptions::is_color_details_Valid() const{
    return m_color_details_isValid;
}

QString OAIOptions::getColorText() const {
    return m_color_text;
}
void OAIOptions::setColorText(const QString &color_text) {
    m_color_text = color_text;
    m_color_text_isSet = true;
}

bool OAIOptions::is_color_text_Set() const{
    return m_color_text_isSet;
}

bool OAIOptions::is_color_text_Valid() const{
    return m_color_text_isValid;
}

QString OAIOptions::getRadiusBorder() const {
    return m_radius_border;
}
void OAIOptions::setRadiusBorder(const QString &radius_border) {
    m_radius_border = radius_border;
    m_radius_border_isSet = true;
}

bool OAIOptions::is_radius_border_Set() const{
    return m_radius_border_isSet;
}

bool OAIOptions::is_radius_border_Valid() const{
    return m_radius_border_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_border_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_border_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_border_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
