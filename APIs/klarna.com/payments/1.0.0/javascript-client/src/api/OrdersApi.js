/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrderRequest from '../model/CreateOrderRequest';
import CustomerTokenCreationRequest from '../model/CustomerTokenCreationRequest';
import CustomerTokenCreationResponse from '../model/CustomerTokenCreationResponse';
import ErrorV2 from '../model/ErrorV2';
import Order from '../model/Order';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelAuthorization operation.
     * @callback module:api/OrdersApi~cancelAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an existing authorization
     * Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments won’t be used to place an order immediately you could release the authorization. Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
     * @param {String} authorizationToken 
     * @param {module:api/OrdersApi~cancelAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelAuthorization(authorizationToken, callback) {
      let postBody = null;
      // verify the required parameter 'authorizationToken' is set
      if (authorizationToken === undefined || authorizationToken === null) {
        throw new Error("Missing the required parameter 'authorizationToken' when calling cancelAuthorization");
      }

      let pathParams = {
        'authorizationToken': authorizationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/v1/authorizations/{authorizationToken}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/OrdersApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new order
     * Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna's system.<br/>When you have received the `authorization_token` for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.<br/>When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](#order-management-api). Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
     * @param {String} authorizationToken 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrderRequest} [createOrderRequest] 
     * @param {module:api/OrdersApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    createOrder(authorizationToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrderRequest'];
      // verify the required parameter 'authorizationToken' is set
      if (authorizationToken === undefined || authorizationToken === null) {
        throw new Error("Missing the required parameter 'authorizationToken' when calling createOrder");
      }

      let pathParams = {
        'authorizationToken': authorizationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/v1/authorizations/{authorizationToken}/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseToken operation.
     * @callback module:api/OrdersApi~purchaseTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerTokenCreationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a consumer token
     * Use this API call to create a Klarna Customer Token.<br/>After having obtained an `authorization_token` for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details. Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
     * @param {String} authorizationToken 
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomerTokenCreationRequest} [customerTokenCreationRequest] 
     * @param {module:api/OrdersApi~purchaseTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerTokenCreationResponse}
     */
    purchaseToken(authorizationToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['customerTokenCreationRequest'];
      // verify the required parameter 'authorizationToken' is set
      if (authorizationToken === undefined || authorizationToken === null) {
        throw new Error("Missing the required parameter 'authorizationToken' when calling purchaseToken");
      }

      let pathParams = {
        'authorizationToken': authorizationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerTokenCreationResponse;
      return this.apiClient.callApi(
        '/payments/v1/authorizations/{authorizationToken}/customer-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
