/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MerchantSession from '../model/MerchantSession';
import Session from '../model/Session';
import SessionCreate from '../model/SessionCreate';
import SessionRead from '../model/SessionRead';

/**
* Sessions service.
* @module api/SessionsApi
* @version 1.0.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCreditSession operation.
     * @callback module:api/SessionsApi~createCreditSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new payment session
     * Use this API call to create a Klarna Payments session.<br/>When a session is created you will receive the available `payment_method_categories` for the session, a `session_id` and a `client_token`. The `session_id` can be used to read or update the session using the REST API. The `client_token` should be passed to the browser. Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
     * @param {module:model/SessionCreate} sessionCreate session_request
     * @param {module:api/SessionsApi~createCreditSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantSession}
     */
    createCreditSession(sessionCreate, callback) {
      let postBody = sessionCreate;
      // verify the required parameter 'sessionCreate' is set
      if (sessionCreate === undefined || sessionCreate === null) {
        throw new Error("Missing the required parameter 'sessionCreate' when calling createCreditSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MerchantSession;
      return this.apiClient.callApi(
        '/payments/v1/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readCreditSession operation.
     * @callback module:api/SessionsApi~readCreditSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read an existing payment session
     * Use this API call to read a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session. Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
     * @param {String} sessionId session_id
     * @param {module:api/SessionsApi~readCreditSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionRead}
     */
    readCreditSession(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling readCreditSession");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionRead;
      return this.apiClient.callApi(
        '/payments/v1/sessions/{session_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCreditSession operation.
     * @callback module:api/SessionsApi~updateCreditSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing payment session
     * Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated. Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
     * @param {String} sessionId session_id
     * @param {module:model/Session} session session_request
     * @param {module:api/SessionsApi~updateCreditSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCreditSession(sessionId, session, callback) {
      let postBody = session;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling updateCreditSession");
      }
      // verify the required parameter 'session' is set
      if (session === undefined || session === null) {
        throw new Error("Missing the required parameter 'session' when calling updateCreditSession");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/payments/v1/sessions/{session_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
