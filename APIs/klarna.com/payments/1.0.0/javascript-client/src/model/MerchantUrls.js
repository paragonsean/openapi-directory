/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MerchantUrls model module.
 * @module model/MerchantUrls
 * @version 1.0.0
 */
class MerchantUrls {
    /**
     * Constructs a new <code>MerchantUrls</code>.
     * @alias module:model/MerchantUrls
     */
    constructor() { 
        
        MerchantUrls.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MerchantUrls</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchantUrls} obj Optional instance to populate.
     * @return {module:model/MerchantUrls} The populated <code>MerchantUrls</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchantUrls();

            if (data.hasOwnProperty('authorization')) {
                obj['authorization'] = ApiClient.convertToType(data['authorization'], 'String');
            }
            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = ApiClient.convertToType(data['confirmation'], 'String');
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = ApiClient.convertToType(data['notification'], 'String');
            }
            if (data.hasOwnProperty('push')) {
                obj['push'] = ApiClient.convertToType(data['push'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchantUrls</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchantUrls</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorization'] && !(typeof data['authorization'] === 'string' || data['authorization'] instanceof String)) {
            throw new Error("Expected the field `authorization` to be a primitive type in the JSON string but got " + data['authorization']);
        }
        // ensure the json data is a string
        if (data['confirmation'] && !(typeof data['confirmation'] === 'string' || data['confirmation'] instanceof String)) {
            throw new Error("Expected the field `confirmation` to be a primitive type in the JSON string but got " + data['confirmation']);
        }
        // ensure the json data is a string
        if (data['notification'] && !(typeof data['notification'] === 'string' || data['notification'] instanceof String)) {
            throw new Error("Expected the field `notification` to be a primitive type in the JSON string but got " + data['notification']);
        }
        // ensure the json data is a string
        if (data['push'] && !(typeof data['push'] === 'string' || data['push'] instanceof String)) {
            throw new Error("Expected the field `push` to be a primitive type in the JSON string but got " + data['push']);
        }

        return true;
    }


}



/**
 * URL for receiving the authorization token when payment is completed. Used for Authorization Callback.
 * @member {String} authorization
 */
MerchantUrls.prototype['authorization'] = undefined;

/**
 * URL of the merchant confirmation page. The consumer will be redirected back to the confirmation page if the consumer is sent to the redirect URL after placing the order. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL(max 2000 characters).
 * @member {String} confirmation
 */
MerchantUrls.prototype['confirmation'] = undefined;

/**
 * URL for notifications on pending orders. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).
 * @member {String} notification
 */
MerchantUrls.prototype['notification'] = undefined;

/**
 * URL that will be requested when an order is completed. Should be different than checkout and confirmation URLs. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).
 * @member {String} push
 */
MerchantUrls.prototype['push'] = undefined;






export default MerchantUrls;

