/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Options model module.
 * @module model/Options
 * @version 1.0.0
 */
class Options {
    /**
     * Constructs a new <code>Options</code>.
     * @alias module:model/Options
     */
    constructor() { 
        
        Options.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Options</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Options} obj Optional instance to populate.
     * @return {module:model/Options} The populated <code>Options</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Options();

            if (data.hasOwnProperty('color_border')) {
                obj['color_border'] = ApiClient.convertToType(data['color_border'], 'String');
            }
            if (data.hasOwnProperty('color_border_selected')) {
                obj['color_border_selected'] = ApiClient.convertToType(data['color_border_selected'], 'String');
            }
            if (data.hasOwnProperty('color_details')) {
                obj['color_details'] = ApiClient.convertToType(data['color_details'], 'String');
            }
            if (data.hasOwnProperty('color_text')) {
                obj['color_text'] = ApiClient.convertToType(data['color_text'], 'String');
            }
            if (data.hasOwnProperty('radius_border')) {
                obj['radius_border'] = ApiClient.convertToType(data['radius_border'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Options</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Options</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color_border'] && !(typeof data['color_border'] === 'string' || data['color_border'] instanceof String)) {
            throw new Error("Expected the field `color_border` to be a primitive type in the JSON string but got " + data['color_border']);
        }
        // ensure the json data is a string
        if (data['color_border_selected'] && !(typeof data['color_border_selected'] === 'string' || data['color_border_selected'] instanceof String)) {
            throw new Error("Expected the field `color_border_selected` to be a primitive type in the JSON string but got " + data['color_border_selected']);
        }
        // ensure the json data is a string
        if (data['color_details'] && !(typeof data['color_details'] === 'string' || data['color_details'] instanceof String)) {
            throw new Error("Expected the field `color_details` to be a primitive type in the JSON string but got " + data['color_details']);
        }
        // ensure the json data is a string
        if (data['color_text'] && !(typeof data['color_text'] === 'string' || data['color_text'] instanceof String)) {
            throw new Error("Expected the field `color_text` to be a primitive type in the JSON string but got " + data['color_text']);
        }
        // ensure the json data is a string
        if (data['radius_border'] && !(typeof data['radius_border'] === 'string' || data['radius_border'] instanceof String)) {
            throw new Error("Expected the field `radius_border` to be a primitive type in the JSON string but got " + data['radius_border']);
        }

        return true;
    }


}



/**
 * Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"
 * @member {String} color_border
 */
Options.prototype['color_border'] = undefined;

/**
 * Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. \"#FF9900\"
 * @member {String} color_border_selected
 */
Options.prototype['color_border_selected'] = undefined;

/**
 * Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"
 * @member {String} color_details
 */
Options.prototype['color_details'] = undefined;

/**
 * Color for the texts within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"
 * @member {String} color_text
 */
Options.prototype['color_text'] = undefined;

/**
 * Radius for the border of elements within the iFrame.
 * @member {String} radius_border
 */
Options.prototype['radius_border'] = undefined;






export default Options;

