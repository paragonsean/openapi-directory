/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductIdentifiers model module.
 * @module model/ProductIdentifiers
 * @version 1.0.0
 */
class ProductIdentifiers {
    /**
     * Constructs a new <code>ProductIdentifiers</code>.
     * @alias module:model/ProductIdentifiers
     */
    constructor() { 
        
        ProductIdentifiers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductIdentifiers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductIdentifiers} obj Optional instance to populate.
     * @return {module:model/ProductIdentifiers} The populated <code>ProductIdentifiers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductIdentifiers();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('category_path')) {
                obj['category_path'] = ApiClient.convertToType(data['category_path'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('global_trade_item_number')) {
                obj['global_trade_item_number'] = ApiClient.convertToType(data['global_trade_item_number'], 'String');
            }
            if (data.hasOwnProperty('manufacturer_part_number')) {
                obj['manufacturer_part_number'] = ApiClient.convertToType(data['manufacturer_part_number'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductIdentifiers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductIdentifiers</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['category_path'] && !(typeof data['category_path'] === 'string' || data['category_path'] instanceof String)) {
            throw new Error("Expected the field `category_path` to be a primitive type in the JSON string but got " + data['category_path']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['global_trade_item_number'] && !(typeof data['global_trade_item_number'] === 'string' || data['global_trade_item_number'] instanceof String)) {
            throw new Error("Expected the field `global_trade_item_number` to be a primitive type in the JSON string but got " + data['global_trade_item_number']);
        }
        // ensure the json data is a string
        if (data['manufacturer_part_number'] && !(typeof data['manufacturer_part_number'] === 'string' || data['manufacturer_part_number'] instanceof String)) {
            throw new Error("Expected the field `manufacturer_part_number` to be a primitive type in the JSON string but got " + data['manufacturer_part_number']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}



/**
 * The product's brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value.
 * @member {String} brand
 */
ProductIdentifiers.prototype['brand'] = undefined;

/**
 * The product's category path as used in the merchant's webshop. Include the full and most detailed category and separate the segments with ' > '
 * @member {String} category_path
 */
ProductIdentifiers.prototype['category_path'] = undefined;

/**
 * Color to be shown to the end customer (max 64 characters).
 * @member {String} color
 */
ProductIdentifiers.prototype['color'] = undefined;

/**
 * The product's Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible
 * @member {String} global_trade_item_number
 */
ProductIdentifiers.prototype['global_trade_item_number'] = undefined;

/**
 * The product's Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible
 * @member {String} manufacturer_part_number
 */
ProductIdentifiers.prototype['manufacturer_part_number'] = undefined;

/**
 * Size to be shown to the end customer (max 64 characters).
 * @member {String} size
 */
ProductIdentifiers.prototype['size'] = undefined;






export default ProductIdentifiers;

