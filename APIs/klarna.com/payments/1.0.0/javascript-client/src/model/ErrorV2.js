/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorizedPaymentMethod from './AuthorizedPaymentMethod';

/**
 * The ErrorV2 model module.
 * @module model/ErrorV2
 * @version 1.0.0
 */
class ErrorV2 {
    /**
     * Constructs a new <code>ErrorV2</code>.
     * @alias module:model/ErrorV2
     */
    constructor() { 
        
        ErrorV2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorV2} obj Optional instance to populate.
     * @return {module:model/ErrorV2} The populated <code>ErrorV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorV2();

            if (data.hasOwnProperty('authorized_payment_method')) {
                obj['authorized_payment_method'] = AuthorizedPaymentMethod.constructFromObject(data['authorized_payment_method']);
            }
            if (data.hasOwnProperty('correlation_id')) {
                obj['correlation_id'] = ApiClient.convertToType(data['correlation_id'], 'String');
            }
            if (data.hasOwnProperty('error_code')) {
                obj['error_code'] = ApiClient.convertToType(data['error_code'], 'String');
            }
            if (data.hasOwnProperty('error_messages')) {
                obj['error_messages'] = ApiClient.convertToType(data['error_messages'], ['String']);
            }
            if (data.hasOwnProperty('fraud_status')) {
                obj['fraud_status'] = ApiClient.convertToType(data['fraud_status'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorV2</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authorized_payment_method`
        if (data['authorized_payment_method']) { // data not null
          AuthorizedPaymentMethod.validateJSON(data['authorized_payment_method']);
        }
        // ensure the json data is a string
        if (data['correlation_id'] && !(typeof data['correlation_id'] === 'string' || data['correlation_id'] instanceof String)) {
            throw new Error("Expected the field `correlation_id` to be a primitive type in the JSON string but got " + data['correlation_id']);
        }
        // ensure the json data is a string
        if (data['error_code'] && !(typeof data['error_code'] === 'string' || data['error_code'] instanceof String)) {
            throw new Error("Expected the field `error_code` to be a primitive type in the JSON string but got " + data['error_code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['error_messages'])) {
            throw new Error("Expected the field `error_messages` to be an array in the JSON data but got " + data['error_messages']);
        }
        // ensure the json data is a string
        if (data['fraud_status'] && !(typeof data['fraud_status'] === 'string' || data['fraud_status'] instanceof String)) {
            throw new Error("Expected the field `fraud_status` to be a primitive type in the JSON string but got " + data['fraud_status']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuthorizedPaymentMethod} authorized_payment_method
 */
ErrorV2.prototype['authorized_payment_method'] = undefined;

/**
 * @member {String} correlation_id
 */
ErrorV2.prototype['correlation_id'] = undefined;

/**
 * @member {String} error_code
 */
ErrorV2.prototype['error_code'] = undefined;

/**
 * @member {Array.<String>} error_messages
 */
ErrorV2.prototype['error_messages'] = undefined;

/**
 * @member {String} fraud_status
 */
ErrorV2.prototype['fraud_status'] = undefined;

/**
 * @member {String} reason
 */
ErrorV2.prototype['reason'] = undefined;






export default ErrorV2;

