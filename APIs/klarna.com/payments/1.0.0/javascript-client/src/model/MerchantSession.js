/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentMethodCategory from './PaymentMethodCategory';

/**
 * The MerchantSession model module.
 * @module model/MerchantSession
 * @version 1.0.0
 */
class MerchantSession {
    /**
     * Constructs a new <code>MerchantSession</code>.
     * @alias module:model/MerchantSession
     * @param clientToken {String} Client token to be passed to the JS client while initializing the JS SDK in the next step.
     * @param sessionId {String} ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.
     */
    constructor(clientToken, sessionId) { 
        
        MerchantSession.initialize(this, clientToken, sessionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientToken, sessionId) { 
        obj['client_token'] = clientToken;
        obj['session_id'] = sessionId;
    }

    /**
     * Constructs a <code>MerchantSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchantSession} obj Optional instance to populate.
     * @return {module:model/MerchantSession} The populated <code>MerchantSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchantSession();

            if (data.hasOwnProperty('client_token')) {
                obj['client_token'] = ApiClient.convertToType(data['client_token'], 'String');
            }
            if (data.hasOwnProperty('payment_method_categories')) {
                obj['payment_method_categories'] = ApiClient.convertToType(data['payment_method_categories'], [PaymentMethodCategory]);
            }
            if (data.hasOwnProperty('session_id')) {
                obj['session_id'] = ApiClient.convertToType(data['session_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchantSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchantSession</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MerchantSession.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_token'] && !(typeof data['client_token'] === 'string' || data['client_token'] instanceof String)) {
            throw new Error("Expected the field `client_token` to be a primitive type in the JSON string but got " + data['client_token']);
        }
        if (data['payment_method_categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payment_method_categories'])) {
                throw new Error("Expected the field `payment_method_categories` to be an array in the JSON data but got " + data['payment_method_categories']);
            }
            // validate the optional field `payment_method_categories` (array)
            for (const item of data['payment_method_categories']) {
                PaymentMethodCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['session_id'] && !(typeof data['session_id'] === 'string' || data['session_id'] instanceof String)) {
            throw new Error("Expected the field `session_id` to be a primitive type in the JSON string but got " + data['session_id']);
        }

        return true;
    }


}

MerchantSession.RequiredProperties = ["client_token", "session_id"];

/**
 * Client token to be passed to the JS client while initializing the JS SDK in the next step.
 * @member {String} client_token
 */
MerchantSession.prototype['client_token'] = undefined;

/**
 * Available payment method categories for this particular session
 * @member {Array.<module:model/PaymentMethodCategory>} payment_method_categories
 */
MerchantSession.prototype['payment_method_categories'] = undefined;

/**
 * ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.
 * @member {String} session_id
 */
MerchantSession.prototype['session_id'] = undefined;






export default MerchantSession;

