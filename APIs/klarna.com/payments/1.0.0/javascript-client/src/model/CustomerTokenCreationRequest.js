/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Customer from './Customer';

/**
 * The CustomerTokenCreationRequest model module.
 * @module model/CustomerTokenCreationRequest
 * @version 1.0.0
 */
class CustomerTokenCreationRequest {
    /**
     * Constructs a new <code>CustomerTokenCreationRequest</code>.
     * @alias module:model/CustomerTokenCreationRequest
     * @param description {String} Description of the purpose of the token.
     * @param intendedUse {module:model/CustomerTokenCreationRequest.IntendedUseEnum} Intended use for the token.
     * @param locale {String} RFC 1766 customer's locale.
     * @param purchaseCountry {String} ISO 3166 alpha-2 purchase country.
     * @param purchaseCurrency {String} ISO 4217 purchase currency.
     */
    constructor(description, intendedUse, locale, purchaseCountry, purchaseCurrency) { 
        
        CustomerTokenCreationRequest.initialize(this, description, intendedUse, locale, purchaseCountry, purchaseCurrency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, intendedUse, locale, purchaseCountry, purchaseCurrency) { 
        obj['description'] = description;
        obj['intended_use'] = intendedUse;
        obj['locale'] = locale;
        obj['purchase_country'] = purchaseCountry;
        obj['purchase_currency'] = purchaseCurrency;
    }

    /**
     * Constructs a <code>CustomerTokenCreationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerTokenCreationRequest} obj Optional instance to populate.
     * @return {module:model/CustomerTokenCreationRequest} The populated <code>CustomerTokenCreationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerTokenCreationRequest();

            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = Address.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Customer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('intended_use')) {
                obj['intended_use'] = ApiClient.convertToType(data['intended_use'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('purchase_country')) {
                obj['purchase_country'] = ApiClient.convertToType(data['purchase_country'], 'String');
            }
            if (data.hasOwnProperty('purchase_currency')) {
                obj['purchase_currency'] = ApiClient.convertToType(data['purchase_currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerTokenCreationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerTokenCreationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerTokenCreationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          Address.validateJSON(data['billing_address']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          Customer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['intended_use'] && !(typeof data['intended_use'] === 'string' || data['intended_use'] instanceof String)) {
            throw new Error("Expected the field `intended_use` to be a primitive type in the JSON string but got " + data['intended_use']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['purchase_country'] && !(typeof data['purchase_country'] === 'string' || data['purchase_country'] instanceof String)) {
            throw new Error("Expected the field `purchase_country` to be a primitive type in the JSON string but got " + data['purchase_country']);
        }
        // ensure the json data is a string
        if (data['purchase_currency'] && !(typeof data['purchase_currency'] === 'string' || data['purchase_currency'] instanceof String)) {
            throw new Error("Expected the field `purchase_currency` to be a primitive type in the JSON string but got " + data['purchase_currency']);
        }

        return true;
    }


}

CustomerTokenCreationRequest.RequiredProperties = ["description", "intended_use", "locale", "purchase_country", "purchase_currency"];

/**
 * @member {module:model/Address} billing_address
 */
CustomerTokenCreationRequest.prototype['billing_address'] = undefined;

/**
 * @member {module:model/Customer} customer
 */
CustomerTokenCreationRequest.prototype['customer'] = undefined;

/**
 * Description of the purpose of the token.
 * @member {String} description
 */
CustomerTokenCreationRequest.prototype['description'] = undefined;

/**
 * Intended use for the token.
 * @member {module:model/CustomerTokenCreationRequest.IntendedUseEnum} intended_use
 */
CustomerTokenCreationRequest.prototype['intended_use'] = undefined;

/**
 * RFC 1766 customer's locale.
 * @member {String} locale
 */
CustomerTokenCreationRequest.prototype['locale'] = undefined;

/**
 * ISO 3166 alpha-2 purchase country.
 * @member {String} purchase_country
 */
CustomerTokenCreationRequest.prototype['purchase_country'] = undefined;

/**
 * ISO 4217 purchase currency.
 * @member {String} purchase_currency
 */
CustomerTokenCreationRequest.prototype['purchase_currency'] = undefined;





/**
 * Allowed values for the <code>intended_use</code> property.
 * @enum {String}
 * @readonly
 */
CustomerTokenCreationRequest['IntendedUseEnum'] = {

    /**
     * value: "SUBSCRIPTION"
     * @const
     */
    "SUBSCRIPTION": "SUBSCRIPTION"
};



export default CustomerTokenCreationRequest;

