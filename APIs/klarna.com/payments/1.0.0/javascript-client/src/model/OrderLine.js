/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductIdentifiers from './ProductIdentifiers';
import Subscription from './Subscription';

/**
 * The OrderLine model module.
 * @module model/OrderLine
 * @version 1.0.0
 */
class OrderLine {
    /**
     * Constructs a new <code>OrderLine</code>.
     * @alias module:model/OrderLine
     * @param name {String} Descriptive name of the order line item.
     * @param quantity {Number} Quantity of the order line item. Must be a non-negative number.
     * @param totalAmount {Number} Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros Value = (quantity x unit_price) - total_discount_amount.  (max value: 100000000)
     * @param unitPrice {Number} Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
     */
    constructor(name, quantity, totalAmount, unitPrice) { 
        
        OrderLine.initialize(this, name, quantity, totalAmount, unitPrice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, quantity, totalAmount, unitPrice) { 
        obj['name'] = name;
        obj['quantity'] = quantity;
        obj['total_amount'] = totalAmount;
        obj['unit_price'] = unitPrice;
    }

    /**
     * Constructs a <code>OrderLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLine} obj Optional instance to populate.
     * @return {module:model/OrderLine} The populated <code>OrderLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLine();

            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('merchant_data')) {
                obj['merchant_data'] = ApiClient.convertToType(data['merchant_data'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('product_identifiers')) {
                obj['product_identifiers'] = ProductIdentifiers.constructFromObject(data['product_identifiers']);
            }
            if (data.hasOwnProperty('product_url')) {
                obj['product_url'] = ApiClient.convertToType(data['product_url'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('quantity_unit')) {
                obj['quantity_unit'] = ApiClient.convertToType(data['quantity_unit'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = Subscription.constructFromObject(data['subscription']);
            }
            if (data.hasOwnProperty('tax_rate')) {
                obj['tax_rate'] = ApiClient.convertToType(data['tax_rate'], 'Number');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_discount_amount')) {
                obj['total_discount_amount'] = ApiClient.convertToType(data['total_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_tax_amount')) {
                obj['total_tax_amount'] = ApiClient.convertToType(data['total_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unit_price')) {
                obj['unit_price'] = ApiClient.convertToType(data['unit_price'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderLine.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['merchant_data'] && !(typeof data['merchant_data'] === 'string' || data['merchant_data'] instanceof String)) {
            throw new Error("Expected the field `merchant_data` to be a primitive type in the JSON string but got " + data['merchant_data']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `product_identifiers`
        if (data['product_identifiers']) { // data not null
          ProductIdentifiers.validateJSON(data['product_identifiers']);
        }
        // ensure the json data is a string
        if (data['product_url'] && !(typeof data['product_url'] === 'string' || data['product_url'] instanceof String)) {
            throw new Error("Expected the field `product_url` to be a primitive type in the JSON string but got " + data['product_url']);
        }
        // ensure the json data is a string
        if (data['quantity_unit'] && !(typeof data['quantity_unit'] === 'string' || data['quantity_unit'] instanceof String)) {
            throw new Error("Expected the field `quantity_unit` to be a primitive type in the JSON string but got " + data['quantity_unit']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // validate the optional field `subscription`
        if (data['subscription']) { // data not null
          Subscription.validateJSON(data['subscription']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

OrderLine.RequiredProperties = ["name", "quantity", "total_amount", "unit_price"];

/**
 * URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).  A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.
 * @member {String} image_url
 */
OrderLine.prototype['image_url'] = undefined;

/**
 * Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)
 * @member {String} merchant_data
 */
OrderLine.prototype['merchant_data'] = undefined;

/**
 * Descriptive name of the order line item.
 * @member {String} name
 */
OrderLine.prototype['name'] = undefined;

/**
 * @member {module:model/ProductIdentifiers} product_identifiers
 */
OrderLine.prototype['product_identifiers'] = undefined;

/**
 * URL to the product in the merchantâ€™s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)
 * @member {String} product_url
 */
OrderLine.prototype['product_url'] = undefined;

/**
 * Quantity of the order line item. Must be a non-negative number.
 * @member {Number} quantity
 */
OrderLine.prototype['quantity'] = undefined;

/**
 * Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.
 * @member {String} quantity_unit
 */
OrderLine.prototype['quantity_unit'] = undefined;

/**
 * Client facing article number, SKU or similar. Max length is 256 characters.
 * @member {String} reference
 */
OrderLine.prototype['reference'] = undefined;

/**
 * @member {module:model/Subscription} subscription
 */
OrderLine.prototype['subscription'] = undefined;

/**
 * Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.
 * @member {Number} tax_rate
 */
OrderLine.prototype['tax_rate'] = undefined;

/**
 * Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros Value = (quantity x unit_price) - total_discount_amount.  (max value: 100000000)
 * @member {Number} total_amount
 */
OrderLine.prototype['total_amount'] = undefined;

/**
 * Non-negative minor units. Includes tax. Eg: 500=5 euros
 * @member {Number} total_discount_amount
 */
OrderLine.prototype['total_discount_amount'] = undefined;

/**
 * Total tax amount of the order line. Must be within Â±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.
 * @member {Number} total_tax_amount
 */
OrderLine.prototype['total_tax_amount'] = undefined;

/**
 * Type of the order line item. The possible values are:  physical discount shipping_fee sales_tax digital gift_card store_credit surcharge
 * @member {String} type
 */
OrderLine.prototype['type'] = undefined;

/**
 * Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
 * @member {Number} unit_price
 */
OrderLine.prototype['unit_price'] = undefined;






export default OrderLine;

