/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Attachment from './Attachment';
import Customer from './Customer';
import MerchantUrls from './MerchantUrls';
import Options from './Options';
import OrderLine from './OrderLine';
import PaymentMethodCategory from './PaymentMethodCategory';

/**
 * The Session model module.
 * @module model/Session
 * @version 1.0.0
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('acquiring_channel')) {
                obj['acquiring_channel'] = ApiClient.convertToType(data['acquiring_channel'], 'String');
            }
            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = Attachment.constructFromObject(data['attachment']);
            }
            if (data.hasOwnProperty('authorization_token')) {
                obj['authorization_token'] = ApiClient.convertToType(data['authorization_token'], 'String');
            }
            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = Address.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('client_token')) {
                obj['client_token'] = ApiClient.convertToType(data['client_token'], 'String');
            }
            if (data.hasOwnProperty('custom_payment_method_ids')) {
                obj['custom_payment_method_ids'] = ApiClient.convertToType(data['custom_payment_method_ids'], ['String']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Customer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('design')) {
                obj['design'] = ApiClient.convertToType(data['design'], 'String');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
            if (data.hasOwnProperty('intent')) {
                obj['intent'] = ApiClient.convertToType(data['intent'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('merchant_data')) {
                obj['merchant_data'] = ApiClient.convertToType(data['merchant_data'], 'String');
            }
            if (data.hasOwnProperty('merchant_reference1')) {
                obj['merchant_reference1'] = ApiClient.convertToType(data['merchant_reference1'], 'String');
            }
            if (data.hasOwnProperty('merchant_reference2')) {
                obj['merchant_reference2'] = ApiClient.convertToType(data['merchant_reference2'], 'String');
            }
            if (data.hasOwnProperty('merchant_urls')) {
                obj['merchant_urls'] = MerchantUrls.constructFromObject(data['merchant_urls']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = Options.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('order_amount')) {
                obj['order_amount'] = ApiClient.convertToType(data['order_amount'], 'Number');
            }
            if (data.hasOwnProperty('order_lines')) {
                obj['order_lines'] = ApiClient.convertToType(data['order_lines'], [OrderLine]);
            }
            if (data.hasOwnProperty('order_tax_amount')) {
                obj['order_tax_amount'] = ApiClient.convertToType(data['order_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('payment_method_categories')) {
                obj['payment_method_categories'] = ApiClient.convertToType(data['payment_method_categories'], [PaymentMethodCategory]);
            }
            if (data.hasOwnProperty('purchase_country')) {
                obj['purchase_country'] = ApiClient.convertToType(data['purchase_country'], 'String');
            }
            if (data.hasOwnProperty('purchase_currency')) {
                obj['purchase_currency'] = ApiClient.convertToType(data['purchase_currency'], 'String');
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = Address.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquiring_channel'] && !(typeof data['acquiring_channel'] === 'string' || data['acquiring_channel'] instanceof String)) {
            throw new Error("Expected the field `acquiring_channel` to be a primitive type in the JSON string but got " + data['acquiring_channel']);
        }
        // validate the optional field `attachment`
        if (data['attachment']) { // data not null
          Attachment.validateJSON(data['attachment']);
        }
        // ensure the json data is a string
        if (data['authorization_token'] && !(typeof data['authorization_token'] === 'string' || data['authorization_token'] instanceof String)) {
            throw new Error("Expected the field `authorization_token` to be a primitive type in the JSON string but got " + data['authorization_token']);
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          Address.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['client_token'] && !(typeof data['client_token'] === 'string' || data['client_token'] instanceof String)) {
            throw new Error("Expected the field `client_token` to be a primitive type in the JSON string but got " + data['client_token']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['custom_payment_method_ids'])) {
            throw new Error("Expected the field `custom_payment_method_ids` to be an array in the JSON data but got " + data['custom_payment_method_ids']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          Customer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['design'] && !(typeof data['design'] === 'string' || data['design'] instanceof String)) {
            throw new Error("Expected the field `design` to be a primitive type in the JSON string but got " + data['design']);
        }
        // ensure the json data is a string
        if (data['intent'] && !(typeof data['intent'] === 'string' || data['intent'] instanceof String)) {
            throw new Error("Expected the field `intent` to be a primitive type in the JSON string but got " + data['intent']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['merchant_data'] && !(typeof data['merchant_data'] === 'string' || data['merchant_data'] instanceof String)) {
            throw new Error("Expected the field `merchant_data` to be a primitive type in the JSON string but got " + data['merchant_data']);
        }
        // ensure the json data is a string
        if (data['merchant_reference1'] && !(typeof data['merchant_reference1'] === 'string' || data['merchant_reference1'] instanceof String)) {
            throw new Error("Expected the field `merchant_reference1` to be a primitive type in the JSON string but got " + data['merchant_reference1']);
        }
        // ensure the json data is a string
        if (data['merchant_reference2'] && !(typeof data['merchant_reference2'] === 'string' || data['merchant_reference2'] instanceof String)) {
            throw new Error("Expected the field `merchant_reference2` to be a primitive type in the JSON string but got " + data['merchant_reference2']);
        }
        // validate the optional field `merchant_urls`
        if (data['merchant_urls']) { // data not null
          MerchantUrls.validateJSON(data['merchant_urls']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          Options.validateJSON(data['options']);
        }
        if (data['order_lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_lines'])) {
                throw new Error("Expected the field `order_lines` to be an array in the JSON data but got " + data['order_lines']);
            }
            // validate the optional field `order_lines` (array)
            for (const item of data['order_lines']) {
                OrderLine.validateJSON(item);
            };
        }
        if (data['payment_method_categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payment_method_categories'])) {
                throw new Error("Expected the field `payment_method_categories` to be an array in the JSON data but got " + data['payment_method_categories']);
            }
            // validate the optional field `payment_method_categories` (array)
            for (const item of data['payment_method_categories']) {
                PaymentMethodCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['purchase_country'] && !(typeof data['purchase_country'] === 'string' || data['purchase_country'] instanceof String)) {
            throw new Error("Expected the field `purchase_country` to be a primitive type in the JSON string but got " + data['purchase_country']);
        }
        // ensure the json data is a string
        if (data['purchase_currency'] && !(typeof data['purchase_currency'] === 'string' || data['purchase_currency'] instanceof String)) {
            throw new Error("Expected the field `purchase_currency` to be a primitive type in the JSON string but got " + data['purchase_currency']);
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          Address.validateJSON(data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
 * @member {module:model/Session.AcquiringChannelEnum} acquiring_channel
 */
Session.prototype['acquiring_channel'] = undefined;

/**
 * @member {module:model/Attachment} attachment
 */
Session.prototype['attachment'] = undefined;

/**
 * Authorization token.
 * @member {String} authorization_token
 */
Session.prototype['authorization_token'] = undefined;

/**
 * @member {module:model/Address} billing_address
 */
Session.prototype['billing_address'] = undefined;

/**
 * Token to be passed to the JS client
 * @member {String} client_token
 */
Session.prototype['client_token'] = undefined;

/**
 * Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
 * @member {Array.<String>} custom_payment_method_ids
 */
Session.prototype['custom_payment_method_ids'] = undefined;

/**
 * @member {module:model/Customer} customer
 */
Session.prototype['customer'] = undefined;

/**
 * Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
 * @member {String} design
 */
Session.prototype['design'] = undefined;

/**
 * Session expiration date
 * @member {Date} expires_at
 */
Session.prototype['expires_at'] = undefined;

/**
 * Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer’s session.
 * @member {module:model/Session.IntentEnum} intent
 */
Session.prototype['intent'] = undefined;

/**
 * Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country. The following values are applicable:  AT: \"de-AT\", \"de-DE\", \"en-DE\" BE: \"be-BE\", \"nl-BE\", \"fr-BE\", \"en-BE\" CH: \"it-CH\", \"de-CH\", \"fr-CH\", \"en-CH\" DE: \"de-DE\", \"de-AT\", \"en-DE\" DK: \"da-DK\", \"en-DK\" ES: \"es-ES\", \"ca-ES\", \"en-ES\" FI: \"fi-FI\", \"sv-FI\", \"en-FI\" GB: \"en-GB\" IT: \"it-IT\", \"en-IT\" NL: \"nl-NL\", \"en-NL\" NO: \"nb-NO\", \"en-NO\" PL: \"pl-PL\", \"en-PL\" SE: \"sv-SE\", \"en-SE\" US: \"en-US\".
 * @member {String} locale
 */
Session.prototype['locale'] = undefined;

/**
 * Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
 * @member {String} merchant_data
 */
Session.prototype['merchant_data'] = undefined;

/**
 * Used for storing merchant's internal order number or other reference.
 * @member {String} merchant_reference1
 */
Session.prototype['merchant_reference1'] = undefined;

/**
 * Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
 * @member {String} merchant_reference2
 */
Session.prototype['merchant_reference2'] = undefined;

/**
 * @member {module:model/MerchantUrls} merchant_urls
 */
Session.prototype['merchant_urls'] = undefined;

/**
 * @member {module:model/Options} options
 */
Session.prototype['options'] = undefined;

/**
 * Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
 * @member {Number} order_amount
 */
Session.prototype['order_amount'] = undefined;

/**
 * The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
 * @member {Array.<module:model/OrderLine>} order_lines
 */
Session.prototype['order_lines'] = undefined;

/**
 * Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
 * @member {Number} order_tax_amount
 */
Session.prototype['order_tax_amount'] = undefined;

/**
 * Available payment method categories
 * @member {Array.<module:model/PaymentMethodCategory>} payment_method_categories
 */
Session.prototype['payment_method_categories'] = undefined;

/**
 * The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
 * @member {String} purchase_country
 */
Session.prototype['purchase_country'] = undefined;

/**
 * The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
 * @member {String} purchase_currency
 */
Session.prototype['purchase_currency'] = undefined;

/**
 * @member {module:model/Address} shipping_address
 */
Session.prototype['shipping_address'] = undefined;

/**
 * The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
 * @member {module:model/Session.StatusEnum} status
 */
Session.prototype['status'] = undefined;





/**
 * Allowed values for the <code>acquiring_channel</code> property.
 * @enum {String}
 * @readonly
 */
Session['AcquiringChannelEnum'] = {

    /**
     * value: "ECOMMERCE"
     * @const
     */
    "ECOMMERCE": "ECOMMERCE",

    /**
     * value: "IN_STORE"
     * @const
     */
    "IN_STORE": "IN_STORE",

    /**
     * value: "TELESALES"
     * @const
     */
    "TELESALES": "TELESALES"
};


/**
 * Allowed values for the <code>intent</code> property.
 * @enum {String}
 * @readonly
 */
Session['IntentEnum'] = {

    /**
     * value: "buy"
     * @const
     */
    "buy": "buy",

    /**
     * value: "tokenize"
     * @const
     */
    "tokenize": "tokenize",

    /**
     * value: "buy_and_tokenize"
     * @const
     */
    "buy_and_tokenize": "buy_and_tokenize"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Session['StatusEnum'] = {

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "incomplete"
     * @const
     */
    "incomplete": "incomplete"
};



export default Session;

