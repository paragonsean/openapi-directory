/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Customer model module.
 * @module model/Customer
 * @version 1.0.0
 */
class Customer {
    /**
     * Constructs a new <code>Customer</code>.
     * @alias module:model/Customer
     */
    constructor() { 
        
        Customer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Customer} obj Optional instance to populate.
     * @return {module:model/Customer} The populated <code>Customer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Customer();

            if (data.hasOwnProperty('date_of_birth')) {
                obj['date_of_birth'] = ApiClient.convertToType(data['date_of_birth'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('last_four_ssn')) {
                obj['last_four_ssn'] = ApiClient.convertToType(data['last_four_ssn'], 'String');
            }
            if (data.hasOwnProperty('national_identification_number')) {
                obj['national_identification_number'] = ApiClient.convertToType(data['national_identification_number'], 'String');
            }
            if (data.hasOwnProperty('organization_entity_type')) {
                obj['organization_entity_type'] = ApiClient.convertToType(data['organization_entity_type'], 'String');
            }
            if (data.hasOwnProperty('organization_registration_id')) {
                obj['organization_registration_id'] = ApiClient.convertToType(data['organization_registration_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vat_id')) {
                obj['vat_id'] = ApiClient.convertToType(data['vat_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Customer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Customer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['date_of_birth'] && !(typeof data['date_of_birth'] === 'string' || data['date_of_birth'] instanceof String)) {
            throw new Error("Expected the field `date_of_birth` to be a primitive type in the JSON string but got " + data['date_of_birth']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['last_four_ssn'] && !(typeof data['last_four_ssn'] === 'string' || data['last_four_ssn'] instanceof String)) {
            throw new Error("Expected the field `last_four_ssn` to be a primitive type in the JSON string but got " + data['last_four_ssn']);
        }
        // ensure the json data is a string
        if (data['national_identification_number'] && !(typeof data['national_identification_number'] === 'string' || data['national_identification_number'] instanceof String)) {
            throw new Error("Expected the field `national_identification_number` to be a primitive type in the JSON string but got " + data['national_identification_number']);
        }
        // ensure the json data is a string
        if (data['organization_entity_type'] && !(typeof data['organization_entity_type'] === 'string' || data['organization_entity_type'] instanceof String)) {
            throw new Error("Expected the field `organization_entity_type` to be a primitive type in the JSON string but got " + data['organization_entity_type']);
        }
        // ensure the json data is a string
        if (data['organization_registration_id'] && !(typeof data['organization_registration_id'] === 'string' || data['organization_registration_id'] instanceof String)) {
            throw new Error("Expected the field `organization_registration_id` to be a primitive type in the JSON string but got " + data['organization_registration_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['vat_id'] && !(typeof data['vat_id'] === 'string' || data['vat_id'] instanceof String)) {
            throw new Error("Expected the field `vat_id` to be a primitive type in the JSON string but got " + data['vat_id']);
        }

        return true;
    }


}



/**
 * Customer’s date of birth. The format is ‘yyyy-mm-dd’
 * @member {String} date_of_birth
 */
Customer.prototype['date_of_birth'] = undefined;

/**
 * Customer’s gender - ‘male’ or ‘female’
 * @member {String} gender
 */
Customer.prototype['gender'] = undefined;

/**
 * Last four digits of the customer's social security number. This value is available for US customers.
 * @member {String} last_four_ssn
 */
Customer.prototype['last_four_ssn'] = undefined;

/**
 * The customer's national identification number. This value is available for EU customers utilizing national identification numbers.
 * @member {String} national_identification_number
 */
Customer.prototype['national_identification_number'] = undefined;

/**
 * Organization entity type. Only applicable for B2B customers.
 * @member {module:model/Customer.OrganizationEntityTypeEnum} organization_entity_type
 */
Customer.prototype['organization_entity_type'] = undefined;

/**
 * Organization registration id. Only applicable for B2B customers.
 * @member {String} organization_registration_id
 */
Customer.prototype['organization_registration_id'] = undefined;

/**
 * Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"
 * @member {String} title
 */
Customer.prototype['title'] = undefined;

/**
 * Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.
 * @member {String} type
 */
Customer.prototype['type'] = undefined;

/**
 * VAT ID. Only applicable for B2B customers.
 * @member {String} vat_id
 */
Customer.prototype['vat_id'] = undefined;





/**
 * Allowed values for the <code>organization_entity_type</code> property.
 * @enum {String}
 * @readonly
 */
Customer['OrganizationEntityTypeEnum'] = {

    /**
     * value: "LIMITED_COMPANY"
     * @const
     */
    "LIMITED_COMPANY": "LIMITED_COMPANY",

    /**
     * value: "PUBLIC_LIMITED_COMPANY"
     * @const
     */
    "PUBLIC_LIMITED_COMPANY": "PUBLIC_LIMITED_COMPANY",

    /**
     * value: "ENTREPRENEURIAL_COMPANY"
     * @const
     */
    "ENTREPRENEURIAL_COMPANY": "ENTREPRENEURIAL_COMPANY",

    /**
     * value: "LIMITED_PARTNERSHIP_LIMITED_COMPANY"
     * @const
     */
    "LIMITED_PARTNERSHIP_LIMITED_COMPANY": "LIMITED_PARTNERSHIP_LIMITED_COMPANY",

    /**
     * value: "LIMITED_PARTNERSHIP"
     * @const
     */
    "LIMITED_PARTNERSHIP": "LIMITED_PARTNERSHIP",

    /**
     * value: "GENERAL_PARTNERSHIP"
     * @const
     */
    "GENERAL_PARTNERSHIP": "GENERAL_PARTNERSHIP",

    /**
     * value: "REGISTERED_SOLE_TRADER"
     * @const
     */
    "REGISTERED_SOLE_TRADER": "REGISTERED_SOLE_TRADER",

    /**
     * value: "SOLE_TRADER"
     * @const
     */
    "SOLE_TRADER": "SOLE_TRADER",

    /**
     * value: "CIVIL_LAW_PARTNERSHIP"
     * @const
     */
    "CIVIL_LAW_PARTNERSHIP": "CIVIL_LAW_PARTNERSHIP",

    /**
     * value: "PUBLIC_INSTITUTION"
     * @const
     */
    "PUBLIC_INSTITUTION": "PUBLIC_INSTITUTION",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default Customer;

