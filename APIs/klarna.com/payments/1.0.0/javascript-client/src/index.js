/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import AssetUrls from './model/AssetUrls';
import Attachment from './model/Attachment';
import AuthorizedPaymentMethod from './model/AuthorizedPaymentMethod';
import CreateOrderRequest from './model/CreateOrderRequest';
import Customer from './model/Customer';
import CustomerRead from './model/CustomerRead';
import CustomerReadCreateToken from './model/CustomerReadCreateToken';
import CustomerTokenCreationRequest from './model/CustomerTokenCreationRequest';
import CustomerTokenCreationResponse from './model/CustomerTokenCreationResponse';
import ErrorV2 from './model/ErrorV2';
import MerchantSession from './model/MerchantSession';
import MerchantUrls from './model/MerchantUrls';
import Options from './model/Options';
import Order from './model/Order';
import OrderLine from './model/OrderLine';
import PaymentMethodCategory from './model/PaymentMethodCategory';
import ProductIdentifiers from './model/ProductIdentifiers';
import Session from './model/Session';
import SessionCreate from './model/SessionCreate';
import SessionRead from './model/SessionRead';
import Subscription from './model/Subscription';
import OrdersApi from './api/OrdersApi';
import SessionsApi from './api/SessionsApi';


/**
* The payments API is used to create a session to offer Klarna&#39;s payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [&#x60;Order Management API&#x60;](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var KlarnaPaymentsApiV1 = require('index'); // See note below*.
* var xxxSvc = new KlarnaPaymentsApiV1.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new KlarnaPaymentsApiV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new KlarnaPaymentsApiV1.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new KlarnaPaymentsApiV1.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The AssetUrls model constructor.
     * @property {module:model/AssetUrls}
     */
    AssetUrls,

    /**
     * The Attachment model constructor.
     * @property {module:model/Attachment}
     */
    Attachment,

    /**
     * The AuthorizedPaymentMethod model constructor.
     * @property {module:model/AuthorizedPaymentMethod}
     */
    AuthorizedPaymentMethod,

    /**
     * The CreateOrderRequest model constructor.
     * @property {module:model/CreateOrderRequest}
     */
    CreateOrderRequest,

    /**
     * The Customer model constructor.
     * @property {module:model/Customer}
     */
    Customer,

    /**
     * The CustomerRead model constructor.
     * @property {module:model/CustomerRead}
     */
    CustomerRead,

    /**
     * The CustomerReadCreateToken model constructor.
     * @property {module:model/CustomerReadCreateToken}
     */
    CustomerReadCreateToken,

    /**
     * The CustomerTokenCreationRequest model constructor.
     * @property {module:model/CustomerTokenCreationRequest}
     */
    CustomerTokenCreationRequest,

    /**
     * The CustomerTokenCreationResponse model constructor.
     * @property {module:model/CustomerTokenCreationResponse}
     */
    CustomerTokenCreationResponse,

    /**
     * The ErrorV2 model constructor.
     * @property {module:model/ErrorV2}
     */
    ErrorV2,

    /**
     * The MerchantSession model constructor.
     * @property {module:model/MerchantSession}
     */
    MerchantSession,

    /**
     * The MerchantUrls model constructor.
     * @property {module:model/MerchantUrls}
     */
    MerchantUrls,

    /**
     * The Options model constructor.
     * @property {module:model/Options}
     */
    Options,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderLine model constructor.
     * @property {module:model/OrderLine}
     */
    OrderLine,

    /**
     * The PaymentMethodCategory model constructor.
     * @property {module:model/PaymentMethodCategory}
     */
    PaymentMethodCategory,

    /**
     * The ProductIdentifiers model constructor.
     * @property {module:model/ProductIdentifiers}
     */
    ProductIdentifiers,

    /**
     * The Session model constructor.
     * @property {module:model/Session}
     */
    Session,

    /**
     * The SessionCreate model constructor.
     * @property {module:model/SessionCreate}
     */
    SessionCreate,

    /**
     * The SessionRead model constructor.
     * @property {module:model/SessionRead}
     */
    SessionRead,

    /**
     * The Subscription model constructor.
     * @property {module:model/Subscription}
     */
    Subscription,

    /**
    * The OrdersApi service constructor.
    * @property {module:api/OrdersApi}
    */
    OrdersApi,

    /**
    * The SessionsApi service constructor.
    * @property {module:api/SessionsApi}
    */
    SessionsApi
};
