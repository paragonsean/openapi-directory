/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KlarnaPaymentsApiV1);
  }
}(this, function(expect, KlarnaPaymentsApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KlarnaPaymentsApiV1.ErrorV2();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ErrorV2', function() {
    it('should create an instance of ErrorV2', function() {
      // uncomment below and update the code to test ErrorV2
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be.a(KlarnaPaymentsApiV1.ErrorV2);
    });

    it('should have the property authorizedPaymentMethod (base name: "authorized_payment_method")', function() {
      // uncomment below and update the code to test the property authorizedPaymentMethod
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be();
    });

    it('should have the property correlationId (base name: "correlation_id")', function() {
      // uncomment below and update the code to test the property correlationId
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be();
    });

    it('should have the property errorCode (base name: "error_code")', function() {
      // uncomment below and update the code to test the property errorCode
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be();
    });

    it('should have the property errorMessages (base name: "error_messages")', function() {
      // uncomment below and update the code to test the property errorMessages
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be();
    });

    it('should have the property fraudStatus (base name: "fraud_status")', function() {
      // uncomment below and update the code to test the property fraudStatus
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new KlarnaPaymentsApiV1.ErrorV2();
      //expect(instance).to.be();
    });

  });

}));
