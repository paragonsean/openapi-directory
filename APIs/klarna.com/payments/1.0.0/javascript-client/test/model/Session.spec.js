/**
 * Klarna Payments API V1
 * The payments API is used to create a session to offer Klarna's payment methods as part of your checkout. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).  Read more on [Klarna payments](https://docs.klarna.com/klarna-payments/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KlarnaPaymentsApiV1);
  }
}(this, function(expect, KlarnaPaymentsApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KlarnaPaymentsApiV1.Session();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Session', function() {
    it('should create an instance of Session', function() {
      // uncomment below and update the code to test Session
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be.a(KlarnaPaymentsApiV1.Session);
    });

    it('should have the property acquiringChannel (base name: "acquiring_channel")', function() {
      // uncomment below and update the code to test the property acquiringChannel
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property attachment (base name: "attachment")', function() {
      // uncomment below and update the code to test the property attachment
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property authorizationToken (base name: "authorization_token")', function() {
      // uncomment below and update the code to test the property authorizationToken
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property billingAddress (base name: "billing_address")', function() {
      // uncomment below and update the code to test the property billingAddress
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "client_token")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property customPaymentMethodIds (base name: "custom_payment_method_ids")', function() {
      // uncomment below and update the code to test the property customPaymentMethodIds
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property design (base name: "design")', function() {
      // uncomment below and update the code to test the property design
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property expiresAt (base name: "expires_at")', function() {
      // uncomment below and update the code to test the property expiresAt
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property intent (base name: "intent")', function() {
      // uncomment below and update the code to test the property intent
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property locale (base name: "locale")', function() {
      // uncomment below and update the code to test the property locale
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property merchantData (base name: "merchant_data")', function() {
      // uncomment below and update the code to test the property merchantData
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property merchantReference1 (base name: "merchant_reference1")', function() {
      // uncomment below and update the code to test the property merchantReference1
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property merchantReference2 (base name: "merchant_reference2")', function() {
      // uncomment below and update the code to test the property merchantReference2
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property merchantUrls (base name: "merchant_urls")', function() {
      // uncomment below and update the code to test the property merchantUrls
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property orderAmount (base name: "order_amount")', function() {
      // uncomment below and update the code to test the property orderAmount
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property orderLines (base name: "order_lines")', function() {
      // uncomment below and update the code to test the property orderLines
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property orderTaxAmount (base name: "order_tax_amount")', function() {
      // uncomment below and update the code to test the property orderTaxAmount
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethodCategories (base name: "payment_method_categories")', function() {
      // uncomment below and update the code to test the property paymentMethodCategories
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property purchaseCountry (base name: "purchase_country")', function() {
      // uncomment below and update the code to test the property purchaseCountry
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property purchaseCurrency (base name: "purchase_currency")', function() {
      // uncomment below and update the code to test the property purchaseCurrency
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property shippingAddress (base name: "shipping_address")', function() {
      // uncomment below and update the code to test the property shippingAddress
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new KlarnaPaymentsApiV1.Session();
      //expect(instance).to.be();
    });

  });

}));
