/**
 * Open AI Klarna product Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductResponse from '../model/ProductResponse';

/**
* OpenAiProductEndpoint service.
* @module api/OpenAiProductEndpointApi
* @version v0
*/
export default class OpenAiProductEndpointApi {

    /**
    * Constructs a new OpenAiProductEndpointApi. 
    * @alias module:api/OpenAiProductEndpointApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productsUsingGET operation.
     * @callback module:api/OpenAiProductEndpointApi~productsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for fetching Klarna product information
     * @param {String} q A precise query that matches one very small category or product that needs to be searched for to find the products the user is looking for. If the user explicitly stated what they want, use that as a query. The query is as specific as possible to the product name or category mentioned by the user in its singular form, and don't contain any clarifiers like latest, newest, cheapest, budget, premium, expensive or similar. The query is always taken from the latest topic, if there is a new topic a new query is started.
     * @param {Object} opts Optional parameters
     * @param {Number} [size] number of products returned
     * @param {Number} [budget] maximum price of the matching product in local currency, filters results
     * @param {module:api/OpenAiProductEndpointApi~productsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResponse}
     */
    productsUsingGET(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling productsUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'size': opts['size'],
        'budget': opts['budget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/public/openai/v0/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
