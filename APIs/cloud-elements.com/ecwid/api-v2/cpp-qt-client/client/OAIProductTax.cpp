/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductTax::OAIProductTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductTax::OAIProductTax() {
    this->initializeModel();
}

OAIProductTax::~OAIProductTax() {}

void OAIProductTax::initializeModel() {

    m_default_location_included_tax_rate_isSet = false;
    m_default_location_included_tax_rate_isValid = false;

    m_enabled_manual_taxes_isSet = false;
    m_enabled_manual_taxes_isValid = false;
}

void OAIProductTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductTax::fromJsonObject(QJsonObject json) {

    m_default_location_included_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_default_location_included_tax_rate, json[QString("defaultLocationIncludedTaxRate")]);
    m_default_location_included_tax_rate_isSet = !json[QString("defaultLocationIncludedTaxRate")].isNull() && m_default_location_included_tax_rate_isValid;

    m_enabled_manual_taxes_isValid = ::OpenAPI::fromJsonValue(m_enabled_manual_taxes, json[QString("enabledManualTaxes")]);
    m_enabled_manual_taxes_isSet = !json[QString("enabledManualTaxes")].isNull() && m_enabled_manual_taxes_isValid;
}

QString OAIProductTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductTax::asJsonObject() const {
    QJsonObject obj;
    if (m_default_location_included_tax_rate_isSet) {
        obj.insert(QString("defaultLocationIncludedTaxRate"), ::OpenAPI::toJsonValue(m_default_location_included_tax_rate));
    }
    if (m_enabled_manual_taxes.size() > 0) {
        obj.insert(QString("enabledManualTaxes"), ::OpenAPI::toJsonValue(m_enabled_manual_taxes));
    }
    return obj;
}

double OAIProductTax::getDefaultLocationIncludedTaxRate() const {
    return m_default_location_included_tax_rate;
}
void OAIProductTax::setDefaultLocationIncludedTaxRate(const double &default_location_included_tax_rate) {
    m_default_location_included_tax_rate = default_location_included_tax_rate;
    m_default_location_included_tax_rate_isSet = true;
}

bool OAIProductTax::is_default_location_included_tax_rate_Set() const{
    return m_default_location_included_tax_rate_isSet;
}

bool OAIProductTax::is_default_location_included_tax_rate_Valid() const{
    return m_default_location_included_tax_rate_isValid;
}

QList<qint64> OAIProductTax::getEnabledManualTaxes() const {
    return m_enabled_manual_taxes;
}
void OAIProductTax::setEnabledManualTaxes(const QList<qint64> &enabled_manual_taxes) {
    m_enabled_manual_taxes = enabled_manual_taxes;
    m_enabled_manual_taxes_isSet = true;
}

bool OAIProductTax::is_enabled_manual_taxes_Set() const{
    return m_enabled_manual_taxes_isSet;
}

bool OAIProductTax::is_enabled_manual_taxes_Valid() const{
    return m_enabled_manual_taxes_isValid;
}

bool OAIProductTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_location_included_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_manual_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
