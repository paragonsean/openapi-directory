/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_border_info_isSet = false;
    m_border_info_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_combinations_isSet = false;
    m_combinations_isValid = false;

    m_compare_at_price_isSet = false;
    m_compare_at_price_isValid = false;

    m_compare_to_price_isSet = false;
    m_compare_to_price_isValid = false;

    m_compare_to_price_discount_isSet = false;
    m_compare_to_price_discount_isValid = false;

    m_compare_to_price_discount_formatted_isSet = false;
    m_compare_to_price_discount_formatted_isValid = false;

    m_compare_to_price_discount_percent_isSet = false;
    m_compare_to_price_discount_percent_isValid = false;

    m_compare_to_price_discount_percent_formatted_isSet = false;
    m_compare_to_price_discount_percent_formatted_isValid = false;

    m_compare_to_price_formatted_isSet = false;
    m_compare_to_price_formatted_isValid = false;

    m_create_timestamp_isSet = false;
    m_create_timestamp_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_default_category_id_isSet = false;
    m_default_category_id_isValid = false;

    m_default_combination_id_isSet = false;
    m_default_combination_id_isValid = false;

    m_default_displayed_price_isSet = false;
    m_default_displayed_price_isValid = false;

    m_default_displayed_price_formatted_isSet = false;
    m_default_displayed_price_formatted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_truncated_isSet = false;
    m_description_truncated_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_favorites_isSet = false;
    m_favorites_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_fixed_shipping_rate_isSet = false;
    m_fixed_shipping_rate_isValid = false;

    m_fixed_shipping_rate_only_isSet = false;
    m_fixed_shipping_rate_only_isValid = false;

    m_gallery_images_isSet = false;
    m_gallery_images_isValid = false;

    m_google_item_condition_isSet = false;
    m_google_item_condition_isValid = false;

    m_hd_thumbnail_url_isSet = false;
    m_hd_thumbnail_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_in_stock_isSet = false;
    m_in_stock_isValid = false;

    m_is_sample_product_isSet = false;
    m_is_sample_product_isValid = false;

    m_is_shipping_required_isSet = false;
    m_is_shipping_required_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_original_image_isSet = false;
    m_original_image_isValid = false;

    m_original_image_url_isSet = false;
    m_original_image_url_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_in_product_list_isSet = false;
    m_price_in_product_list_isValid = false;

    m_product_class_id_isSet = false;
    m_product_class_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_delta_isSet = false;
    m_quantity_delta_isValid = false;

    m_related_products_isSet = false;
    m_related_products_isValid = false;

    m_seo_description_isSet = false;
    m_seo_description_isValid = false;

    m_seo_title_isSet = false;
    m_seo_title_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_show_on_frontpage_isSet = false;
    m_show_on_frontpage_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_small_thumbnail_url_isSet = false;
    m_small_thumbnail_url_isValid = false;

    m_tangible_isSet = false;
    m_tangible_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_track_quantity_isSet = false;
    m_track_quantity_isValid = false;

    m_unlimited_isSet = false;
    m_unlimited_isValid = false;

    m_update_timestamp_isSet = false;
    m_update_timestamp_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_warning_limit_isSet = false;
    m_warning_limit_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_wholesale_prices_isSet = false;
    m_wholesale_prices_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_border_info_isValid = ::OpenAPI::fromJsonValue(m_border_info, json[QString("borderInfo")]);
    m_border_info_isSet = !json[QString("borderInfo")].isNull() && m_border_info_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_combinations_isValid = ::OpenAPI::fromJsonValue(m_combinations, json[QString("combinations")]);
    m_combinations_isSet = !json[QString("combinations")].isNull() && m_combinations_isValid;

    m_compare_at_price_isValid = ::OpenAPI::fromJsonValue(m_compare_at_price, json[QString("compareAtPrice")]);
    m_compare_at_price_isSet = !json[QString("compareAtPrice")].isNull() && m_compare_at_price_isValid;

    m_compare_to_price_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price, json[QString("compareToPrice")]);
    m_compare_to_price_isSet = !json[QString("compareToPrice")].isNull() && m_compare_to_price_isValid;

    m_compare_to_price_discount_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price_discount, json[QString("compareToPriceDiscount")]);
    m_compare_to_price_discount_isSet = !json[QString("compareToPriceDiscount")].isNull() && m_compare_to_price_discount_isValid;

    m_compare_to_price_discount_formatted_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price_discount_formatted, json[QString("compareToPriceDiscountFormatted")]);
    m_compare_to_price_discount_formatted_isSet = !json[QString("compareToPriceDiscountFormatted")].isNull() && m_compare_to_price_discount_formatted_isValid;

    m_compare_to_price_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price_discount_percent, json[QString("compareToPriceDiscountPercent")]);
    m_compare_to_price_discount_percent_isSet = !json[QString("compareToPriceDiscountPercent")].isNull() && m_compare_to_price_discount_percent_isValid;

    m_compare_to_price_discount_percent_formatted_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price_discount_percent_formatted, json[QString("compareToPriceDiscountPercentFormatted")]);
    m_compare_to_price_discount_percent_formatted_isSet = !json[QString("compareToPriceDiscountPercentFormatted")].isNull() && m_compare_to_price_discount_percent_formatted_isValid;

    m_compare_to_price_formatted_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price_formatted, json[QString("compareToPriceFormatted")]);
    m_compare_to_price_formatted_isSet = !json[QString("compareToPriceFormatted")].isNull() && m_compare_to_price_formatted_isValid;

    m_create_timestamp_isValid = ::OpenAPI::fromJsonValue(m_create_timestamp, json[QString("createTimestamp")]);
    m_create_timestamp_isSet = !json[QString("createTimestamp")].isNull() && m_create_timestamp_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_default_category_id_isValid = ::OpenAPI::fromJsonValue(m_default_category_id, json[QString("defaultCategoryId")]);
    m_default_category_id_isSet = !json[QString("defaultCategoryId")].isNull() && m_default_category_id_isValid;

    m_default_combination_id_isValid = ::OpenAPI::fromJsonValue(m_default_combination_id, json[QString("defaultCombinationId")]);
    m_default_combination_id_isSet = !json[QString("defaultCombinationId")].isNull() && m_default_combination_id_isValid;

    m_default_displayed_price_isValid = ::OpenAPI::fromJsonValue(m_default_displayed_price, json[QString("defaultDisplayedPrice")]);
    m_default_displayed_price_isSet = !json[QString("defaultDisplayedPrice")].isNull() && m_default_displayed_price_isValid;

    m_default_displayed_price_formatted_isValid = ::OpenAPI::fromJsonValue(m_default_displayed_price_formatted, json[QString("defaultDisplayedPriceFormatted")]);
    m_default_displayed_price_formatted_isSet = !json[QString("defaultDisplayedPriceFormatted")].isNull() && m_default_displayed_price_formatted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_truncated_isValid = ::OpenAPI::fromJsonValue(m_description_truncated, json[QString("descriptionTruncated")]);
    m_description_truncated_isSet = !json[QString("descriptionTruncated")].isNull() && m_description_truncated_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_favorites_isValid = ::OpenAPI::fromJsonValue(m_favorites, json[QString("favorites")]);
    m_favorites_isSet = !json[QString("favorites")].isNull() && m_favorites_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_fixed_shipping_rate_isValid = ::OpenAPI::fromJsonValue(m_fixed_shipping_rate, json[QString("fixedShippingRate")]);
    m_fixed_shipping_rate_isSet = !json[QString("fixedShippingRate")].isNull() && m_fixed_shipping_rate_isValid;

    m_fixed_shipping_rate_only_isValid = ::OpenAPI::fromJsonValue(m_fixed_shipping_rate_only, json[QString("fixedShippingRateOnly")]);
    m_fixed_shipping_rate_only_isSet = !json[QString("fixedShippingRateOnly")].isNull() && m_fixed_shipping_rate_only_isValid;

    m_gallery_images_isValid = ::OpenAPI::fromJsonValue(m_gallery_images, json[QString("galleryImages")]);
    m_gallery_images_isSet = !json[QString("galleryImages")].isNull() && m_gallery_images_isValid;

    m_google_item_condition_isValid = ::OpenAPI::fromJsonValue(m_google_item_condition, json[QString("googleItemCondition")]);
    m_google_item_condition_isSet = !json[QString("googleItemCondition")].isNull() && m_google_item_condition_isValid;

    m_hd_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_hd_thumbnail_url, json[QString("hdThumbnailUrl")]);
    m_hd_thumbnail_url_isSet = !json[QString("hdThumbnailUrl")].isNull() && m_hd_thumbnail_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_in_stock_isValid = ::OpenAPI::fromJsonValue(m_in_stock, json[QString("inStock")]);
    m_in_stock_isSet = !json[QString("inStock")].isNull() && m_in_stock_isValid;

    m_is_sample_product_isValid = ::OpenAPI::fromJsonValue(m_is_sample_product, json[QString("isSampleProduct")]);
    m_is_sample_product_isSet = !json[QString("isSampleProduct")].isNull() && m_is_sample_product_isValid;

    m_is_shipping_required_isValid = ::OpenAPI::fromJsonValue(m_is_shipping_required, json[QString("isShippingRequired")]);
    m_is_shipping_required_isSet = !json[QString("isShippingRequired")].isNull() && m_is_shipping_required_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_original_image_isValid = ::OpenAPI::fromJsonValue(m_original_image, json[QString("originalImage")]);
    m_original_image_isSet = !json[QString("originalImage")].isNull() && m_original_image_isValid;

    m_original_image_url_isValid = ::OpenAPI::fromJsonValue(m_original_image_url, json[QString("originalImageUrl")]);
    m_original_image_url_isSet = !json[QString("originalImageUrl")].isNull() && m_original_image_url_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_in_product_list_isValid = ::OpenAPI::fromJsonValue(m_price_in_product_list, json[QString("priceInProductList")]);
    m_price_in_product_list_isSet = !json[QString("priceInProductList")].isNull() && m_price_in_product_list_isValid;

    m_product_class_id_isValid = ::OpenAPI::fromJsonValue(m_product_class_id, json[QString("productClassId")]);
    m_product_class_id_isSet = !json[QString("productClassId")].isNull() && m_product_class_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_delta_isValid = ::OpenAPI::fromJsonValue(m_quantity_delta, json[QString("quantityDelta")]);
    m_quantity_delta_isSet = !json[QString("quantityDelta")].isNull() && m_quantity_delta_isValid;

    m_related_products_isValid = ::OpenAPI::fromJsonValue(m_related_products, json[QString("relatedProducts")]);
    m_related_products_isSet = !json[QString("relatedProducts")].isNull() && m_related_products_isValid;

    m_seo_description_isValid = ::OpenAPI::fromJsonValue(m_seo_description, json[QString("seoDescription")]);
    m_seo_description_isSet = !json[QString("seoDescription")].isNull() && m_seo_description_isValid;

    m_seo_title_isValid = ::OpenAPI::fromJsonValue(m_seo_title, json[QString("seoTitle")]);
    m_seo_title_isSet = !json[QString("seoTitle")].isNull() && m_seo_title_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_show_on_frontpage_isValid = ::OpenAPI::fromJsonValue(m_show_on_frontpage, json[QString("showOnFrontpage")]);
    m_show_on_frontpage_isSet = !json[QString("showOnFrontpage")].isNull() && m_show_on_frontpage_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_small_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_small_thumbnail_url, json[QString("smallThumbnailUrl")]);
    m_small_thumbnail_url_isSet = !json[QString("smallThumbnailUrl")].isNull() && m_small_thumbnail_url_isValid;

    m_tangible_isValid = ::OpenAPI::fromJsonValue(m_tangible, json[QString("tangible")]);
    m_tangible_isSet = !json[QString("tangible")].isNull() && m_tangible_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_track_quantity_isValid = ::OpenAPI::fromJsonValue(m_track_quantity, json[QString("trackQuantity")]);
    m_track_quantity_isSet = !json[QString("trackQuantity")].isNull() && m_track_quantity_isValid;

    m_unlimited_isValid = ::OpenAPI::fromJsonValue(m_unlimited, json[QString("unlimited")]);
    m_unlimited_isSet = !json[QString("unlimited")].isNull() && m_unlimited_isValid;

    m_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_update_timestamp, json[QString("updateTimestamp")]);
    m_update_timestamp_isSet = !json[QString("updateTimestamp")].isNull() && m_update_timestamp_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_warning_limit_isValid = ::OpenAPI::fromJsonValue(m_warning_limit, json[QString("warningLimit")]);
    m_warning_limit_isSet = !json[QString("warningLimit")].isNull() && m_warning_limit_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_wholesale_prices_isValid = ::OpenAPI::fromJsonValue(m_wholesale_prices, json[QString("wholesalePrices")]);
    m_wholesale_prices_isSet = !json[QString("wholesalePrices")].isNull() && m_wholesale_prices_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_border_info.isSet()) {
        obj.insert(QString("borderInfo"), ::OpenAPI::toJsonValue(m_border_info));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_combinations.size() > 0) {
        obj.insert(QString("combinations"), ::OpenAPI::toJsonValue(m_combinations));
    }
    if (m_compare_at_price_isSet) {
        obj.insert(QString("compareAtPrice"), ::OpenAPI::toJsonValue(m_compare_at_price));
    }
    if (m_compare_to_price_isSet) {
        obj.insert(QString("compareToPrice"), ::OpenAPI::toJsonValue(m_compare_to_price));
    }
    if (m_compare_to_price_discount_isSet) {
        obj.insert(QString("compareToPriceDiscount"), ::OpenAPI::toJsonValue(m_compare_to_price_discount));
    }
    if (m_compare_to_price_discount_formatted_isSet) {
        obj.insert(QString("compareToPriceDiscountFormatted"), ::OpenAPI::toJsonValue(m_compare_to_price_discount_formatted));
    }
    if (m_compare_to_price_discount_percent_isSet) {
        obj.insert(QString("compareToPriceDiscountPercent"), ::OpenAPI::toJsonValue(m_compare_to_price_discount_percent));
    }
    if (m_compare_to_price_discount_percent_formatted_isSet) {
        obj.insert(QString("compareToPriceDiscountPercentFormatted"), ::OpenAPI::toJsonValue(m_compare_to_price_discount_percent_formatted));
    }
    if (m_compare_to_price_formatted_isSet) {
        obj.insert(QString("compareToPriceFormatted"), ::OpenAPI::toJsonValue(m_compare_to_price_formatted));
    }
    if (m_create_timestamp_isSet) {
        obj.insert(QString("createTimestamp"), ::OpenAPI::toJsonValue(m_create_timestamp));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_default_category_id_isSet) {
        obj.insert(QString("defaultCategoryId"), ::OpenAPI::toJsonValue(m_default_category_id));
    }
    if (m_default_combination_id_isSet) {
        obj.insert(QString("defaultCombinationId"), ::OpenAPI::toJsonValue(m_default_combination_id));
    }
    if (m_default_displayed_price_isSet) {
        obj.insert(QString("defaultDisplayedPrice"), ::OpenAPI::toJsonValue(m_default_displayed_price));
    }
    if (m_default_displayed_price_formatted_isSet) {
        obj.insert(QString("defaultDisplayedPriceFormatted"), ::OpenAPI::toJsonValue(m_default_displayed_price_formatted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_truncated_isSet) {
        obj.insert(QString("descriptionTruncated"), ::OpenAPI::toJsonValue(m_description_truncated));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_favorites.isSet()) {
        obj.insert(QString("favorites"), ::OpenAPI::toJsonValue(m_favorites));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_fixed_shipping_rate_isSet) {
        obj.insert(QString("fixedShippingRate"), ::OpenAPI::toJsonValue(m_fixed_shipping_rate));
    }
    if (m_fixed_shipping_rate_only_isSet) {
        obj.insert(QString("fixedShippingRateOnly"), ::OpenAPI::toJsonValue(m_fixed_shipping_rate_only));
    }
    if (m_gallery_images.size() > 0) {
        obj.insert(QString("galleryImages"), ::OpenAPI::toJsonValue(m_gallery_images));
    }
    if (m_google_item_condition_isSet) {
        obj.insert(QString("googleItemCondition"), ::OpenAPI::toJsonValue(m_google_item_condition));
    }
    if (m_hd_thumbnail_url_isSet) {
        obj.insert(QString("hdThumbnailUrl"), ::OpenAPI::toJsonValue(m_hd_thumbnail_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_in_stock_isSet) {
        obj.insert(QString("inStock"), ::OpenAPI::toJsonValue(m_in_stock));
    }
    if (m_is_sample_product_isSet) {
        obj.insert(QString("isSampleProduct"), ::OpenAPI::toJsonValue(m_is_sample_product));
    }
    if (m_is_shipping_required_isSet) {
        obj.insert(QString("isShippingRequired"), ::OpenAPI::toJsonValue(m_is_shipping_required));
    }
    if (m_media.isSet()) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_original_image.isSet()) {
        obj.insert(QString("originalImage"), ::OpenAPI::toJsonValue(m_original_image));
    }
    if (m_original_image_url_isSet) {
        obj.insert(QString("originalImageUrl"), ::OpenAPI::toJsonValue(m_original_image_url));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_in_product_list_isSet) {
        obj.insert(QString("priceInProductList"), ::OpenAPI::toJsonValue(m_price_in_product_list));
    }
    if (m_product_class_id_isSet) {
        obj.insert(QString("productClassId"), ::OpenAPI::toJsonValue(m_product_class_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_delta_isSet) {
        obj.insert(QString("quantityDelta"), ::OpenAPI::toJsonValue(m_quantity_delta));
    }
    if (m_related_products.isSet()) {
        obj.insert(QString("relatedProducts"), ::OpenAPI::toJsonValue(m_related_products));
    }
    if (m_seo_description_isSet) {
        obj.insert(QString("seoDescription"), ::OpenAPI::toJsonValue(m_seo_description));
    }
    if (m_seo_title_isSet) {
        obj.insert(QString("seoTitle"), ::OpenAPI::toJsonValue(m_seo_title));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_show_on_frontpage_isSet) {
        obj.insert(QString("showOnFrontpage"), ::OpenAPI::toJsonValue(m_show_on_frontpage));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_small_thumbnail_url_isSet) {
        obj.insert(QString("smallThumbnailUrl"), ::OpenAPI::toJsonValue(m_small_thumbnail_url));
    }
    if (m_tangible_isSet) {
        obj.insert(QString("tangible"), ::OpenAPI::toJsonValue(m_tangible));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_track_quantity_isSet) {
        obj.insert(QString("trackQuantity"), ::OpenAPI::toJsonValue(m_track_quantity));
    }
    if (m_unlimited_isSet) {
        obj.insert(QString("unlimited"), ::OpenAPI::toJsonValue(m_unlimited));
    }
    if (m_update_timestamp_isSet) {
        obj.insert(QString("updateTimestamp"), ::OpenAPI::toJsonValue(m_update_timestamp));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_warning_limit_isSet) {
        obj.insert(QString("warningLimit"), ::OpenAPI::toJsonValue(m_warning_limit));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_wholesale_prices.isSet()) {
        obj.insert(QString("wholesalePrices"), ::OpenAPI::toJsonValue(m_wholesale_prices));
    }
    return obj;
}

QList<OAIAttribute> OAIProduct::getAttributes() const {
    return m_attributes;
}
void OAIProduct::setAttributes(const QList<OAIAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProduct::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProduct::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIBorderInfo OAIProduct::getBorderInfo() const {
    return m_border_info;
}
void OAIProduct::setBorderInfo(const OAIBorderInfo &border_info) {
    m_border_info = border_info;
    m_border_info_isSet = true;
}

bool OAIProduct::is_border_info_Set() const{
    return m_border_info_isSet;
}

bool OAIProduct::is_border_info_Valid() const{
    return m_border_info_isValid;
}

QList<OAICategory> OAIProduct::getCategories() const {
    return m_categories;
}
void OAIProduct::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIProduct::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIProduct::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<qint64> OAIProduct::getCategoryIds() const {
    return m_category_ids;
}
void OAIProduct::setCategoryIds(const QList<qint64> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAIProduct::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIProduct::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

QList<OAICombination> OAIProduct::getCombinations() const {
    return m_combinations;
}
void OAIProduct::setCombinations(const QList<OAICombination> &combinations) {
    m_combinations = combinations;
    m_combinations_isSet = true;
}

bool OAIProduct::is_combinations_Set() const{
    return m_combinations_isSet;
}

bool OAIProduct::is_combinations_Valid() const{
    return m_combinations_isValid;
}

double OAIProduct::getCompareAtPrice() const {
    return m_compare_at_price;
}
void OAIProduct::setCompareAtPrice(const double &compare_at_price) {
    m_compare_at_price = compare_at_price;
    m_compare_at_price_isSet = true;
}

bool OAIProduct::is_compare_at_price_Set() const{
    return m_compare_at_price_isSet;
}

bool OAIProduct::is_compare_at_price_Valid() const{
    return m_compare_at_price_isValid;
}

double OAIProduct::getCompareToPrice() const {
    return m_compare_to_price;
}
void OAIProduct::setCompareToPrice(const double &compare_to_price) {
    m_compare_to_price = compare_to_price;
    m_compare_to_price_isSet = true;
}

bool OAIProduct::is_compare_to_price_Set() const{
    return m_compare_to_price_isSet;
}

bool OAIProduct::is_compare_to_price_Valid() const{
    return m_compare_to_price_isValid;
}

double OAIProduct::getCompareToPriceDiscount() const {
    return m_compare_to_price_discount;
}
void OAIProduct::setCompareToPriceDiscount(const double &compare_to_price_discount) {
    m_compare_to_price_discount = compare_to_price_discount;
    m_compare_to_price_discount_isSet = true;
}

bool OAIProduct::is_compare_to_price_discount_Set() const{
    return m_compare_to_price_discount_isSet;
}

bool OAIProduct::is_compare_to_price_discount_Valid() const{
    return m_compare_to_price_discount_isValid;
}

QString OAIProduct::getCompareToPriceDiscountFormatted() const {
    return m_compare_to_price_discount_formatted;
}
void OAIProduct::setCompareToPriceDiscountFormatted(const QString &compare_to_price_discount_formatted) {
    m_compare_to_price_discount_formatted = compare_to_price_discount_formatted;
    m_compare_to_price_discount_formatted_isSet = true;
}

bool OAIProduct::is_compare_to_price_discount_formatted_Set() const{
    return m_compare_to_price_discount_formatted_isSet;
}

bool OAIProduct::is_compare_to_price_discount_formatted_Valid() const{
    return m_compare_to_price_discount_formatted_isValid;
}

double OAIProduct::getCompareToPriceDiscountPercent() const {
    return m_compare_to_price_discount_percent;
}
void OAIProduct::setCompareToPriceDiscountPercent(const double &compare_to_price_discount_percent) {
    m_compare_to_price_discount_percent = compare_to_price_discount_percent;
    m_compare_to_price_discount_percent_isSet = true;
}

bool OAIProduct::is_compare_to_price_discount_percent_Set() const{
    return m_compare_to_price_discount_percent_isSet;
}

bool OAIProduct::is_compare_to_price_discount_percent_Valid() const{
    return m_compare_to_price_discount_percent_isValid;
}

QString OAIProduct::getCompareToPriceDiscountPercentFormatted() const {
    return m_compare_to_price_discount_percent_formatted;
}
void OAIProduct::setCompareToPriceDiscountPercentFormatted(const QString &compare_to_price_discount_percent_formatted) {
    m_compare_to_price_discount_percent_formatted = compare_to_price_discount_percent_formatted;
    m_compare_to_price_discount_percent_formatted_isSet = true;
}

bool OAIProduct::is_compare_to_price_discount_percent_formatted_Set() const{
    return m_compare_to_price_discount_percent_formatted_isSet;
}

bool OAIProduct::is_compare_to_price_discount_percent_formatted_Valid() const{
    return m_compare_to_price_discount_percent_formatted_isValid;
}

QString OAIProduct::getCompareToPriceFormatted() const {
    return m_compare_to_price_formatted;
}
void OAIProduct::setCompareToPriceFormatted(const QString &compare_to_price_formatted) {
    m_compare_to_price_formatted = compare_to_price_formatted;
    m_compare_to_price_formatted_isSet = true;
}

bool OAIProduct::is_compare_to_price_formatted_Set() const{
    return m_compare_to_price_formatted_isSet;
}

bool OAIProduct::is_compare_to_price_formatted_Valid() const{
    return m_compare_to_price_formatted_isValid;
}

qint64 OAIProduct::getCreateTimestamp() const {
    return m_create_timestamp;
}
void OAIProduct::setCreateTimestamp(const qint64 &create_timestamp) {
    m_create_timestamp = create_timestamp;
    m_create_timestamp_isSet = true;
}

bool OAIProduct::is_create_timestamp_Set() const{
    return m_create_timestamp_isSet;
}

bool OAIProduct::is_create_timestamp_Valid() const{
    return m_create_timestamp_isValid;
}

QString OAIProduct::getCreated() const {
    return m_created;
}
void OAIProduct::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProduct::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProduct::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAIProduct::getDefaultCategoryId() const {
    return m_default_category_id;
}
void OAIProduct::setDefaultCategoryId(const qint64 &default_category_id) {
    m_default_category_id = default_category_id;
    m_default_category_id_isSet = true;
}

bool OAIProduct::is_default_category_id_Set() const{
    return m_default_category_id_isSet;
}

bool OAIProduct::is_default_category_id_Valid() const{
    return m_default_category_id_isValid;
}

double OAIProduct::getDefaultCombinationId() const {
    return m_default_combination_id;
}
void OAIProduct::setDefaultCombinationId(const double &default_combination_id) {
    m_default_combination_id = default_combination_id;
    m_default_combination_id_isSet = true;
}

bool OAIProduct::is_default_combination_id_Set() const{
    return m_default_combination_id_isSet;
}

bool OAIProduct::is_default_combination_id_Valid() const{
    return m_default_combination_id_isValid;
}

double OAIProduct::getDefaultDisplayedPrice() const {
    return m_default_displayed_price;
}
void OAIProduct::setDefaultDisplayedPrice(const double &default_displayed_price) {
    m_default_displayed_price = default_displayed_price;
    m_default_displayed_price_isSet = true;
}

bool OAIProduct::is_default_displayed_price_Set() const{
    return m_default_displayed_price_isSet;
}

bool OAIProduct::is_default_displayed_price_Valid() const{
    return m_default_displayed_price_isValid;
}

QString OAIProduct::getDefaultDisplayedPriceFormatted() const {
    return m_default_displayed_price_formatted;
}
void OAIProduct::setDefaultDisplayedPriceFormatted(const QString &default_displayed_price_formatted) {
    m_default_displayed_price_formatted = default_displayed_price_formatted;
    m_default_displayed_price_formatted_isSet = true;
}

bool OAIProduct::is_default_displayed_price_formatted_Set() const{
    return m_default_displayed_price_formatted_isSet;
}

bool OAIProduct::is_default_displayed_price_formatted_Valid() const{
    return m_default_displayed_price_formatted_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProduct::isDescriptionTruncated() const {
    return m_description_truncated;
}
void OAIProduct::setDescriptionTruncated(const bool &description_truncated) {
    m_description_truncated = description_truncated;
    m_description_truncated_isSet = true;
}

bool OAIProduct::is_description_truncated_Set() const{
    return m_description_truncated_isSet;
}

bool OAIProduct::is_description_truncated_Valid() const{
    return m_description_truncated_isValid;
}

OAIProductDimensions OAIProduct::getDimensions() const {
    return m_dimensions;
}
void OAIProduct::setDimensions(const OAIProductDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIProduct::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIProduct::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIProduct::isEnabled() const {
    return m_enabled;
}
void OAIProduct::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIProduct::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIProduct::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIFavorite OAIProduct::getFavorites() const {
    return m_favorites;
}
void OAIProduct::setFavorites(const OAIFavorite &favorites) {
    m_favorites = favorites;
    m_favorites_isSet = true;
}

bool OAIProduct::is_favorites_Set() const{
    return m_favorites_isSet;
}

bool OAIProduct::is_favorites_Valid() const{
    return m_favorites_isValid;
}

QList<OAIFile> OAIProduct::getFiles() const {
    return m_files;
}
void OAIProduct::setFiles(const QList<OAIFile> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIProduct::is_files_Set() const{
    return m_files_isSet;
}

bool OAIProduct::is_files_Valid() const{
    return m_files_isValid;
}

double OAIProduct::getFixedShippingRate() const {
    return m_fixed_shipping_rate;
}
void OAIProduct::setFixedShippingRate(const double &fixed_shipping_rate) {
    m_fixed_shipping_rate = fixed_shipping_rate;
    m_fixed_shipping_rate_isSet = true;
}

bool OAIProduct::is_fixed_shipping_rate_Set() const{
    return m_fixed_shipping_rate_isSet;
}

bool OAIProduct::is_fixed_shipping_rate_Valid() const{
    return m_fixed_shipping_rate_isValid;
}

bool OAIProduct::isFixedShippingRateOnly() const {
    return m_fixed_shipping_rate_only;
}
void OAIProduct::setFixedShippingRateOnly(const bool &fixed_shipping_rate_only) {
    m_fixed_shipping_rate_only = fixed_shipping_rate_only;
    m_fixed_shipping_rate_only_isSet = true;
}

bool OAIProduct::is_fixed_shipping_rate_only_Set() const{
    return m_fixed_shipping_rate_only_isSet;
}

bool OAIProduct::is_fixed_shipping_rate_only_Valid() const{
    return m_fixed_shipping_rate_only_isValid;
}

QList<OAIGalleryImage> OAIProduct::getGalleryImages() const {
    return m_gallery_images;
}
void OAIProduct::setGalleryImages(const QList<OAIGalleryImage> &gallery_images) {
    m_gallery_images = gallery_images;
    m_gallery_images_isSet = true;
}

bool OAIProduct::is_gallery_images_Set() const{
    return m_gallery_images_isSet;
}

bool OAIProduct::is_gallery_images_Valid() const{
    return m_gallery_images_isValid;
}

QString OAIProduct::getGoogleItemCondition() const {
    return m_google_item_condition;
}
void OAIProduct::setGoogleItemCondition(const QString &google_item_condition) {
    m_google_item_condition = google_item_condition;
    m_google_item_condition_isSet = true;
}

bool OAIProduct::is_google_item_condition_Set() const{
    return m_google_item_condition_isSet;
}

bool OAIProduct::is_google_item_condition_Valid() const{
    return m_google_item_condition_isValid;
}

QString OAIProduct::getHdThumbnailUrl() const {
    return m_hd_thumbnail_url;
}
void OAIProduct::setHdThumbnailUrl(const QString &hd_thumbnail_url) {
    m_hd_thumbnail_url = hd_thumbnail_url;
    m_hd_thumbnail_url_isSet = true;
}

bool OAIProduct::is_hd_thumbnail_url_Set() const{
    return m_hd_thumbnail_url_isSet;
}

bool OAIProduct::is_hd_thumbnail_url_Valid() const{
    return m_hd_thumbnail_url_isValid;
}

qint64 OAIProduct::getId() const {
    return m_id;
}
void OAIProduct::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProduct::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProduct::getImageUrl() const {
    return m_image_url;
}
void OAIProduct::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIProduct::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIProduct::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIProduct::isInStock() const {
    return m_in_stock;
}
void OAIProduct::setInStock(const bool &in_stock) {
    m_in_stock = in_stock;
    m_in_stock_isSet = true;
}

bool OAIProduct::is_in_stock_Set() const{
    return m_in_stock_isSet;
}

bool OAIProduct::is_in_stock_Valid() const{
    return m_in_stock_isValid;
}

bool OAIProduct::isIsSampleProduct() const {
    return m_is_sample_product;
}
void OAIProduct::setIsSampleProduct(const bool &is_sample_product) {
    m_is_sample_product = is_sample_product;
    m_is_sample_product_isSet = true;
}

bool OAIProduct::is_is_sample_product_Set() const{
    return m_is_sample_product_isSet;
}

bool OAIProduct::is_is_sample_product_Valid() const{
    return m_is_sample_product_isValid;
}

bool OAIProduct::isIsShippingRequired() const {
    return m_is_shipping_required;
}
void OAIProduct::setIsShippingRequired(const bool &is_shipping_required) {
    m_is_shipping_required = is_shipping_required;
    m_is_shipping_required_isSet = true;
}

bool OAIProduct::is_is_shipping_required_Set() const{
    return m_is_shipping_required_isSet;
}

bool OAIProduct::is_is_shipping_required_Valid() const{
    return m_is_shipping_required_isValid;
}

OAIMedia OAIProduct::getMedia() const {
    return m_media;
}
void OAIProduct::setMedia(const OAIMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIProduct::is_media_Set() const{
    return m_media_isSet;
}

bool OAIProduct::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOption> OAIProduct::getOptions() const {
    return m_options;
}
void OAIProduct::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIProduct::is_options_Set() const{
    return m_options_isSet;
}

bool OAIProduct::is_options_Valid() const{
    return m_options_isValid;
}

OAIGalleryImage OAIProduct::getOriginalImage() const {
    return m_original_image;
}
void OAIProduct::setOriginalImage(const OAIGalleryImage &original_image) {
    m_original_image = original_image;
    m_original_image_isSet = true;
}

bool OAIProduct::is_original_image_Set() const{
    return m_original_image_isSet;
}

bool OAIProduct::is_original_image_Valid() const{
    return m_original_image_isValid;
}

QString OAIProduct::getOriginalImageUrl() const {
    return m_original_image_url;
}
void OAIProduct::setOriginalImageUrl(const QString &original_image_url) {
    m_original_image_url = original_image_url;
    m_original_image_url_isSet = true;
}

bool OAIProduct::is_original_image_url_Set() const{
    return m_original_image_url_isSet;
}

bool OAIProduct::is_original_image_url_Valid() const{
    return m_original_image_url_isValid;
}

double OAIProduct::getPrice() const {
    return m_price;
}
void OAIProduct::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProduct::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProduct::is_price_Valid() const{
    return m_price_isValid;
}

double OAIProduct::getPriceInProductList() const {
    return m_price_in_product_list;
}
void OAIProduct::setPriceInProductList(const double &price_in_product_list) {
    m_price_in_product_list = price_in_product_list;
    m_price_in_product_list_isSet = true;
}

bool OAIProduct::is_price_in_product_list_Set() const{
    return m_price_in_product_list_isSet;
}

bool OAIProduct::is_price_in_product_list_Valid() const{
    return m_price_in_product_list_isValid;
}

qint64 OAIProduct::getProductClassId() const {
    return m_product_class_id;
}
void OAIProduct::setProductClassId(const qint64 &product_class_id) {
    m_product_class_id = product_class_id;
    m_product_class_id_isSet = true;
}

bool OAIProduct::is_product_class_id_Set() const{
    return m_product_class_id_isSet;
}

bool OAIProduct::is_product_class_id_Valid() const{
    return m_product_class_id_isValid;
}

qint64 OAIProduct::getQuantity() const {
    return m_quantity;
}
void OAIProduct::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProduct::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProduct::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint64 OAIProduct::getQuantityDelta() const {
    return m_quantity_delta;
}
void OAIProduct::setQuantityDelta(const qint64 &quantity_delta) {
    m_quantity_delta = quantity_delta;
    m_quantity_delta_isSet = true;
}

bool OAIProduct::is_quantity_delta_Set() const{
    return m_quantity_delta_isSet;
}

bool OAIProduct::is_quantity_delta_Valid() const{
    return m_quantity_delta_isValid;
}

OAIRelatedProducts OAIProduct::getRelatedProducts() const {
    return m_related_products;
}
void OAIProduct::setRelatedProducts(const OAIRelatedProducts &related_products) {
    m_related_products = related_products;
    m_related_products_isSet = true;
}

bool OAIProduct::is_related_products_Set() const{
    return m_related_products_isSet;
}

bool OAIProduct::is_related_products_Valid() const{
    return m_related_products_isValid;
}

QString OAIProduct::getSeoDescription() const {
    return m_seo_description;
}
void OAIProduct::setSeoDescription(const QString &seo_description) {
    m_seo_description = seo_description;
    m_seo_description_isSet = true;
}

bool OAIProduct::is_seo_description_Set() const{
    return m_seo_description_isSet;
}

bool OAIProduct::is_seo_description_Valid() const{
    return m_seo_description_isValid;
}

QString OAIProduct::getSeoTitle() const {
    return m_seo_title;
}
void OAIProduct::setSeoTitle(const QString &seo_title) {
    m_seo_title = seo_title;
    m_seo_title_isSet = true;
}

bool OAIProduct::is_seo_title_Set() const{
    return m_seo_title_isSet;
}

bool OAIProduct::is_seo_title_Valid() const{
    return m_seo_title_isValid;
}

OAIShipping OAIProduct::getShipping() const {
    return m_shipping;
}
void OAIProduct::setShipping(const OAIShipping &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIProduct::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIProduct::is_shipping_Valid() const{
    return m_shipping_isValid;
}

double OAIProduct::getShowOnFrontpage() const {
    return m_show_on_frontpage;
}
void OAIProduct::setShowOnFrontpage(const double &show_on_frontpage) {
    m_show_on_frontpage = show_on_frontpage;
    m_show_on_frontpage_isSet = true;
}

bool OAIProduct::is_show_on_frontpage_Set() const{
    return m_show_on_frontpage_isSet;
}

bool OAIProduct::is_show_on_frontpage_Valid() const{
    return m_show_on_frontpage_isValid;
}

QString OAIProduct::getSku() const {
    return m_sku;
}
void OAIProduct::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIProduct::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIProduct::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIProduct::getSmallThumbnailUrl() const {
    return m_small_thumbnail_url;
}
void OAIProduct::setSmallThumbnailUrl(const QString &small_thumbnail_url) {
    m_small_thumbnail_url = small_thumbnail_url;
    m_small_thumbnail_url_isSet = true;
}

bool OAIProduct::is_small_thumbnail_url_Set() const{
    return m_small_thumbnail_url_isSet;
}

bool OAIProduct::is_small_thumbnail_url_Valid() const{
    return m_small_thumbnail_url_isValid;
}

QString OAIProduct::getTangible() const {
    return m_tangible;
}
void OAIProduct::setTangible(const QString &tangible) {
    m_tangible = tangible;
    m_tangible_isSet = true;
}

bool OAIProduct::is_tangible_Set() const{
    return m_tangible_isSet;
}

bool OAIProduct::is_tangible_Valid() const{
    return m_tangible_isValid;
}

OAIProductTax OAIProduct::getTax() const {
    return m_tax;
}
void OAIProduct::setTax(const OAIProductTax &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIProduct::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIProduct::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<OAITax> OAIProduct::getTaxes() const {
    return m_taxes;
}
void OAIProduct::setTaxes(const QList<OAITax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIProduct::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIProduct::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAIProduct::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIProduct::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIProduct::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIProduct::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIProduct::getTrackQuantity() const {
    return m_track_quantity;
}
void OAIProduct::setTrackQuantity(const QString &track_quantity) {
    m_track_quantity = track_quantity;
    m_track_quantity_isSet = true;
}

bool OAIProduct::is_track_quantity_Set() const{
    return m_track_quantity_isSet;
}

bool OAIProduct::is_track_quantity_Valid() const{
    return m_track_quantity_isValid;
}

bool OAIProduct::isUnlimited() const {
    return m_unlimited;
}
void OAIProduct::setUnlimited(const bool &unlimited) {
    m_unlimited = unlimited;
    m_unlimited_isSet = true;
}

bool OAIProduct::is_unlimited_Set() const{
    return m_unlimited_isSet;
}

bool OAIProduct::is_unlimited_Valid() const{
    return m_unlimited_isValid;
}

qint64 OAIProduct::getUpdateTimestamp() const {
    return m_update_timestamp;
}
void OAIProduct::setUpdateTimestamp(const qint64 &update_timestamp) {
    m_update_timestamp = update_timestamp;
    m_update_timestamp_isSet = true;
}

bool OAIProduct::is_update_timestamp_Set() const{
    return m_update_timestamp_isSet;
}

bool OAIProduct::is_update_timestamp_Valid() const{
    return m_update_timestamp_isValid;
}

QString OAIProduct::getUpdated() const {
    return m_updated;
}
void OAIProduct::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIProduct::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIProduct::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIProduct::getUrl() const {
    return m_url;
}
void OAIProduct::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProduct::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProduct::is_url_Valid() const{
    return m_url_isValid;
}

qint64 OAIProduct::getWarningLimit() const {
    return m_warning_limit;
}
void OAIProduct::setWarningLimit(const qint64 &warning_limit) {
    m_warning_limit = warning_limit;
    m_warning_limit_isSet = true;
}

bool OAIProduct::is_warning_limit_Set() const{
    return m_warning_limit_isSet;
}

bool OAIProduct::is_warning_limit_Valid() const{
    return m_warning_limit_isValid;
}

double OAIProduct::getWeight() const {
    return m_weight;
}
void OAIProduct::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIProduct::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIProduct::is_weight_Valid() const{
    return m_weight_isValid;
}

OAIWholesalePrices OAIProduct::getWholesalePrices() const {
    return m_wholesale_prices;
}
void OAIProduct::setWholesalePrices(const OAIWholesalePrices &wholesale_prices) {
    m_wholesale_prices = wholesale_prices;
    m_wholesale_prices_isSet = true;
}

bool OAIProduct::is_wholesale_prices_Set() const{
    return m_wholesale_prices_isSet;
}

bool OAIProduct::is_wholesale_prices_Valid() const{
    return m_wholesale_prices_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_combinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_at_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_discount_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_discount_percent_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_combination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_displayed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_displayed_price_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorites.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_shipping_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_shipping_rate_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gallery_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_item_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sample_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shipping_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_in_product_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_delta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_on_frontpage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tangible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlimited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wholesale_prices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
