/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBorderInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBorderInfo::OAIBorderInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBorderInfo::OAIBorderInfo() {
    this->initializeModel();
}

OAIBorderInfo::~OAIBorderInfo() {}

void OAIBorderInfo::initializeModel() {

    m_dominating_color_isSet = false;
    m_dominating_color_isValid = false;

    m_homogeneity_isSet = false;
    m_homogeneity_isValid = false;
}

void OAIBorderInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBorderInfo::fromJsonObject(QJsonObject json) {

    m_dominating_color_isValid = ::OpenAPI::fromJsonValue(m_dominating_color, json[QString("dominatingColor")]);
    m_dominating_color_isSet = !json[QString("dominatingColor")].isNull() && m_dominating_color_isValid;

    m_homogeneity_isValid = ::OpenAPI::fromJsonValue(m_homogeneity, json[QString("homogeneity")]);
    m_homogeneity_isSet = !json[QString("homogeneity")].isNull() && m_homogeneity_isValid;
}

QString OAIBorderInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBorderInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_dominating_color.isSet()) {
        obj.insert(QString("dominatingColor"), ::OpenAPI::toJsonValue(m_dominating_color));
    }
    if (m_homogeneity_isSet) {
        obj.insert(QString("homogeneity"), ::OpenAPI::toJsonValue(m_homogeneity));
    }
    return obj;
}

OAIDominatingColor OAIBorderInfo::getDominatingColor() const {
    return m_dominating_color;
}
void OAIBorderInfo::setDominatingColor(const OAIDominatingColor &dominating_color) {
    m_dominating_color = dominating_color;
    m_dominating_color_isSet = true;
}

bool OAIBorderInfo::is_dominating_color_Set() const{
    return m_dominating_color_isSet;
}

bool OAIBorderInfo::is_dominating_color_Valid() const{
    return m_dominating_color_isValid;
}

bool OAIBorderInfo::isHomogeneity() const {
    return m_homogeneity;
}
void OAIBorderInfo::setHomogeneity(const bool &homogeneity) {
    m_homogeneity = homogeneity;
    m_homogeneity_isSet = true;
}

bool OAIBorderInfo::is_homogeneity_Set() const{
    return m_homogeneity_isSet;
}

bool OAIBorderInfo::is_homogeneity_Valid() const{
    return m_homogeneity_isValid;
}

bool OAIBorderInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dominating_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_homogeneity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBorderInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
