/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image1500px_url_isSet = false;
    m_image1500px_url_isValid = false;

    m_image160px_url_isSet = false;
    m_image160px_url_isValid = false;

    m_image400px_url_isSet = false;
    m_image400px_url_isValid = false;

    m_image800px_url_isSet = false;
    m_image800px_url_isValid = false;

    m_image_original_url_isSet = false;
    m_image_original_url_isValid = false;

    m_is_main_isSet = false;
    m_is_main_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image1500px_url_isValid = ::OpenAPI::fromJsonValue(m_image1500px_url, json[QString("image1500pxUrl")]);
    m_image1500px_url_isSet = !json[QString("image1500pxUrl")].isNull() && m_image1500px_url_isValid;

    m_image160px_url_isValid = ::OpenAPI::fromJsonValue(m_image160px_url, json[QString("image160pxUrl")]);
    m_image160px_url_isSet = !json[QString("image160pxUrl")].isNull() && m_image160px_url_isValid;

    m_image400px_url_isValid = ::OpenAPI::fromJsonValue(m_image400px_url, json[QString("image400pxUrl")]);
    m_image400px_url_isSet = !json[QString("image400pxUrl")].isNull() && m_image400px_url_isValid;

    m_image800px_url_isValid = ::OpenAPI::fromJsonValue(m_image800px_url, json[QString("image800pxUrl")]);
    m_image800px_url_isSet = !json[QString("image800pxUrl")].isNull() && m_image800px_url_isValid;

    m_image_original_url_isValid = ::OpenAPI::fromJsonValue(m_image_original_url, json[QString("imageOriginalUrl")]);
    m_image_original_url_isSet = !json[QString("imageOriginalUrl")].isNull() && m_image_original_url_isValid;

    m_is_main_isValid = ::OpenAPI::fromJsonValue(m_is_main, json[QString("isMain")]);
    m_is_main_isSet = !json[QString("isMain")].isNull() && m_is_main_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image1500px_url_isSet) {
        obj.insert(QString("image1500pxUrl"), ::OpenAPI::toJsonValue(m_image1500px_url));
    }
    if (m_image160px_url_isSet) {
        obj.insert(QString("image160pxUrl"), ::OpenAPI::toJsonValue(m_image160px_url));
    }
    if (m_image400px_url_isSet) {
        obj.insert(QString("image400pxUrl"), ::OpenAPI::toJsonValue(m_image400px_url));
    }
    if (m_image800px_url_isSet) {
        obj.insert(QString("image800pxUrl"), ::OpenAPI::toJsonValue(m_image800px_url));
    }
    if (m_image_original_url_isSet) {
        obj.insert(QString("imageOriginalUrl"), ::OpenAPI::toJsonValue(m_image_original_url));
    }
    if (m_is_main_isSet) {
        obj.insert(QString("isMain"), ::OpenAPI::toJsonValue(m_is_main));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    return obj;
}

QString OAIImage::getId() const {
    return m_id;
}
void OAIImage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImage::getImage1500pxUrl() const {
    return m_image1500px_url;
}
void OAIImage::setImage1500pxUrl(const QString &image1500px_url) {
    m_image1500px_url = image1500px_url;
    m_image1500px_url_isSet = true;
}

bool OAIImage::is_image1500px_url_Set() const{
    return m_image1500px_url_isSet;
}

bool OAIImage::is_image1500px_url_Valid() const{
    return m_image1500px_url_isValid;
}

QString OAIImage::getImage160pxUrl() const {
    return m_image160px_url;
}
void OAIImage::setImage160pxUrl(const QString &image160px_url) {
    m_image160px_url = image160px_url;
    m_image160px_url_isSet = true;
}

bool OAIImage::is_image160px_url_Set() const{
    return m_image160px_url_isSet;
}

bool OAIImage::is_image160px_url_Valid() const{
    return m_image160px_url_isValid;
}

QString OAIImage::getImage400pxUrl() const {
    return m_image400px_url;
}
void OAIImage::setImage400pxUrl(const QString &image400px_url) {
    m_image400px_url = image400px_url;
    m_image400px_url_isSet = true;
}

bool OAIImage::is_image400px_url_Set() const{
    return m_image400px_url_isSet;
}

bool OAIImage::is_image400px_url_Valid() const{
    return m_image400px_url_isValid;
}

QString OAIImage::getImage800pxUrl() const {
    return m_image800px_url;
}
void OAIImage::setImage800pxUrl(const QString &image800px_url) {
    m_image800px_url = image800px_url;
    m_image800px_url_isSet = true;
}

bool OAIImage::is_image800px_url_Set() const{
    return m_image800px_url_isSet;
}

bool OAIImage::is_image800px_url_Valid() const{
    return m_image800px_url_isValid;
}

QString OAIImage::getImageOriginalUrl() const {
    return m_image_original_url;
}
void OAIImage::setImageOriginalUrl(const QString &image_original_url) {
    m_image_original_url = image_original_url;
    m_image_original_url_isSet = true;
}

bool OAIImage::is_image_original_url_Set() const{
    return m_image_original_url_isSet;
}

bool OAIImage::is_image_original_url_Valid() const{
    return m_image_original_url_isValid;
}

bool OAIImage::isIsMain() const {
    return m_is_main;
}
void OAIImage::setIsMain(const bool &is_main) {
    m_is_main = is_main;
    m_is_main_isSet = true;
}

bool OAIImage::is_is_main_Set() const{
    return m_is_main_isSet;
}

bool OAIImage::is_is_main_Valid() const{
    return m_is_main_isValid;
}

double OAIImage::getOrderBy() const {
    return m_order_by;
}
void OAIImage::setOrderBy(const double &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIImage::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIImage::is_order_by_Valid() const{
    return m_order_by_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image1500px_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image160px_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image400px_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image800px_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_original_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
