/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIObjectsApi_H
#define OAI_OAIObjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObjectsMetadata.h"
#include "OAISwaggerDocs.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIObjectsApi : public QObject {
    Q_OBJECT

public:
    OAIObjectsApi(const int timeOut = 0);
    ~OAIObjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  elements_version QString [optional]
    */
    virtual void getObjects(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &elements_version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  discovery bool [optional]
    * @param[in]  resolve_references bool [optional]
    * @param[in]  basic bool [optional]
    * @param[in]  version QString [optional]
    */
    virtual void getObjectsObjectNameDocs(const QString &authorization, const QString &object_name, const ::OpenAPI::OptionalParam<bool> &discovery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &resolve_references = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &basic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  elements_version QString [optional]
    */
    virtual void getObjectsObjectNameMetadata(const QString &authorization, const QString &object_name, const ::OpenAPI::OptionalParam<QString> &elements_version = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getObjectsCallback(OAIHttpRequestWorker *worker);
    void getObjectsObjectNameDocsCallback(OAIHttpRequestWorker *worker);
    void getObjectsObjectNameMetadataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getObjectsSignal(QList<QString> summary);
    void getObjectsObjectNameDocsSignal(OAISwaggerDocs summary);
    void getObjectsObjectNameMetadataSignal(OAIObjectsMetadata summary);


    void getObjectsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getObjectsObjectNameDocsSignalFull(OAIHttpRequestWorker *worker, OAISwaggerDocs summary);
    void getObjectsObjectNameMetadataSignalFull(OAIHttpRequestWorker *worker, OAIObjectsMetadata summary);

    Q_DECL_DEPRECATED_X("Use getObjectsSignalError() instead")
    void getObjectsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectsObjectNameDocsSignalError() instead")
    void getObjectsObjectNameDocsSignalE(OAISwaggerDocs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsObjectNameDocsSignalError(OAISwaggerDocs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectsObjectNameMetadataSignalError() instead")
    void getObjectsObjectNameMetadataSignalE(OAIObjectsMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsObjectNameMetadataSignalError(OAIObjectsMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getObjectsSignalErrorFull() instead")
    void getObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectsObjectNameDocsSignalErrorFull() instead")
    void getObjectsObjectNameDocsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsObjectNameDocsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectsObjectNameMetadataSignalErrorFull() instead")
    void getObjectsObjectNameMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectsObjectNameMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
