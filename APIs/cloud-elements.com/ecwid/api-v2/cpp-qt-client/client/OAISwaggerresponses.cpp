/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerresponses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerresponses::OAISwaggerresponses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerresponses::OAISwaggerresponses() {
    this->initializeModel();
}

OAISwaggerresponses::~OAISwaggerresponses() {}

void OAISwaggerresponses::initializeModel() {

    m_r_200_isSet = false;
    m_r_200_isValid = false;

    m_r_400_isSet = false;
    m_r_400_isValid = false;

    m_r_401_isSet = false;
    m_r_401_isValid = false;

    m_r_403_isSet = false;
    m_r_403_isValid = false;

    m_r_404_isSet = false;
    m_r_404_isValid = false;

    m_r_405_isSet = false;
    m_r_405_isValid = false;

    m_r_406_isSet = false;
    m_r_406_isValid = false;

    m_r_409_isSet = false;
    m_r_409_isValid = false;

    m_r_415_isSet = false;
    m_r_415_isValid = false;

    m_r_500_isSet = false;
    m_r_500_isValid = false;

    m_r_502_isSet = false;
    m_r_502_isValid = false;
}

void OAISwaggerresponses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerresponses::fromJsonObject(QJsonObject json) {

    m_r_200_isValid = ::OpenAPI::fromJsonValue(m_r_200, json[QString("200")]);
    m_r_200_isSet = !json[QString("200")].isNull() && m_r_200_isValid;

    m_r_400_isValid = ::OpenAPI::fromJsonValue(m_r_400, json[QString("400")]);
    m_r_400_isSet = !json[QString("400")].isNull() && m_r_400_isValid;

    m_r_401_isValid = ::OpenAPI::fromJsonValue(m_r_401, json[QString("401")]);
    m_r_401_isSet = !json[QString("401")].isNull() && m_r_401_isValid;

    m_r_403_isValid = ::OpenAPI::fromJsonValue(m_r_403, json[QString("403")]);
    m_r_403_isSet = !json[QString("403")].isNull() && m_r_403_isValid;

    m_r_404_isValid = ::OpenAPI::fromJsonValue(m_r_404, json[QString("404")]);
    m_r_404_isSet = !json[QString("404")].isNull() && m_r_404_isValid;

    m_r_405_isValid = ::OpenAPI::fromJsonValue(m_r_405, json[QString("405")]);
    m_r_405_isSet = !json[QString("405")].isNull() && m_r_405_isValid;

    m_r_406_isValid = ::OpenAPI::fromJsonValue(m_r_406, json[QString("406")]);
    m_r_406_isSet = !json[QString("406")].isNull() && m_r_406_isValid;

    m_r_409_isValid = ::OpenAPI::fromJsonValue(m_r_409, json[QString("409")]);
    m_r_409_isSet = !json[QString("409")].isNull() && m_r_409_isValid;

    m_r_415_isValid = ::OpenAPI::fromJsonValue(m_r_415, json[QString("415")]);
    m_r_415_isSet = !json[QString("415")].isNull() && m_r_415_isValid;

    m_r_500_isValid = ::OpenAPI::fromJsonValue(m_r_500, json[QString("500")]);
    m_r_500_isSet = !json[QString("500")].isNull() && m_r_500_isValid;

    m_r_502_isValid = ::OpenAPI::fromJsonValue(m_r_502, json[QString("502")]);
    m_r_502_isSet = !json[QString("502")].isNull() && m_r_502_isValid;
}

QString OAISwaggerresponses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerresponses::asJsonObject() const {
    QJsonObject obj;
    if (m_r_200.isSet()) {
        obj.insert(QString("200"), ::OpenAPI::toJsonValue(m_r_200));
    }
    if (m_r_400.isSet()) {
        obj.insert(QString("400"), ::OpenAPI::toJsonValue(m_r_400));
    }
    if (m_r_401.isSet()) {
        obj.insert(QString("401"), ::OpenAPI::toJsonValue(m_r_401));
    }
    if (m_r_403.isSet()) {
        obj.insert(QString("403"), ::OpenAPI::toJsonValue(m_r_403));
    }
    if (m_r_404.isSet()) {
        obj.insert(QString("404"), ::OpenAPI::toJsonValue(m_r_404));
    }
    if (m_r_405.isSet()) {
        obj.insert(QString("405"), ::OpenAPI::toJsonValue(m_r_405));
    }
    if (m_r_406.isSet()) {
        obj.insert(QString("406"), ::OpenAPI::toJsonValue(m_r_406));
    }
    if (m_r_409.isSet()) {
        obj.insert(QString("409"), ::OpenAPI::toJsonValue(m_r_409));
    }
    if (m_r_415.isSet()) {
        obj.insert(QString("415"), ::OpenAPI::toJsonValue(m_r_415));
    }
    if (m_r_500.isSet()) {
        obj.insert(QString("500"), ::OpenAPI::toJsonValue(m_r_500));
    }
    if (m_r_502.isSet()) {
        obj.insert(QString("502"), ::OpenAPI::toJsonValue(m_r_502));
    }
    return obj;
}

OAISwagger200 OAISwaggerresponses::getR200() const {
    return m_r_200;
}
void OAISwaggerresponses::setR200(const OAISwagger200 &r_200) {
    m_r_200 = r_200;
    m_r_200_isSet = true;
}

bool OAISwaggerresponses::is_r_200_Set() const{
    return m_r_200_isSet;
}

bool OAISwaggerresponses::is_r_200_Valid() const{
    return m_r_200_isValid;
}

OAISwagger400 OAISwaggerresponses::getR400() const {
    return m_r_400;
}
void OAISwaggerresponses::setR400(const OAISwagger400 &r_400) {
    m_r_400 = r_400;
    m_r_400_isSet = true;
}

bool OAISwaggerresponses::is_r_400_Set() const{
    return m_r_400_isSet;
}

bool OAISwaggerresponses::is_r_400_Valid() const{
    return m_r_400_isValid;
}

OAISwagger401 OAISwaggerresponses::getR401() const {
    return m_r_401;
}
void OAISwaggerresponses::setR401(const OAISwagger401 &r_401) {
    m_r_401 = r_401;
    m_r_401_isSet = true;
}

bool OAISwaggerresponses::is_r_401_Set() const{
    return m_r_401_isSet;
}

bool OAISwaggerresponses::is_r_401_Valid() const{
    return m_r_401_isValid;
}

OAISwagger403 OAISwaggerresponses::getR403() const {
    return m_r_403;
}
void OAISwaggerresponses::setR403(const OAISwagger403 &r_403) {
    m_r_403 = r_403;
    m_r_403_isSet = true;
}

bool OAISwaggerresponses::is_r_403_Set() const{
    return m_r_403_isSet;
}

bool OAISwaggerresponses::is_r_403_Valid() const{
    return m_r_403_isValid;
}

OAISwagger404 OAISwaggerresponses::getR404() const {
    return m_r_404;
}
void OAISwaggerresponses::setR404(const OAISwagger404 &r_404) {
    m_r_404 = r_404;
    m_r_404_isSet = true;
}

bool OAISwaggerresponses::is_r_404_Set() const{
    return m_r_404_isSet;
}

bool OAISwaggerresponses::is_r_404_Valid() const{
    return m_r_404_isValid;
}

OAISwagger405 OAISwaggerresponses::getR405() const {
    return m_r_405;
}
void OAISwaggerresponses::setR405(const OAISwagger405 &r_405) {
    m_r_405 = r_405;
    m_r_405_isSet = true;
}

bool OAISwaggerresponses::is_r_405_Set() const{
    return m_r_405_isSet;
}

bool OAISwaggerresponses::is_r_405_Valid() const{
    return m_r_405_isValid;
}

OAISwagger406 OAISwaggerresponses::getR406() const {
    return m_r_406;
}
void OAISwaggerresponses::setR406(const OAISwagger406 &r_406) {
    m_r_406 = r_406;
    m_r_406_isSet = true;
}

bool OAISwaggerresponses::is_r_406_Set() const{
    return m_r_406_isSet;
}

bool OAISwaggerresponses::is_r_406_Valid() const{
    return m_r_406_isValid;
}

OAISwagger409 OAISwaggerresponses::getR409() const {
    return m_r_409;
}
void OAISwaggerresponses::setR409(const OAISwagger409 &r_409) {
    m_r_409 = r_409;
    m_r_409_isSet = true;
}

bool OAISwaggerresponses::is_r_409_Set() const{
    return m_r_409_isSet;
}

bool OAISwaggerresponses::is_r_409_Valid() const{
    return m_r_409_isValid;
}

OAISwagger415 OAISwaggerresponses::getR415() const {
    return m_r_415;
}
void OAISwaggerresponses::setR415(const OAISwagger415 &r_415) {
    m_r_415 = r_415;
    m_r_415_isSet = true;
}

bool OAISwaggerresponses::is_r_415_Set() const{
    return m_r_415_isSet;
}

bool OAISwaggerresponses::is_r_415_Valid() const{
    return m_r_415_isValid;
}

OAISwagger500 OAISwaggerresponses::getR500() const {
    return m_r_500;
}
void OAISwaggerresponses::setR500(const OAISwagger500 &r_500) {
    m_r_500 = r_500;
    m_r_500_isSet = true;
}

bool OAISwaggerresponses::is_r_500_Set() const{
    return m_r_500_isSet;
}

bool OAISwaggerresponses::is_r_500_Valid() const{
    return m_r_500_isValid;
}

OAISwagger502 OAISwaggerresponses::getR502() const {
    return m_r_502;
}
void OAISwaggerresponses::setR502(const OAISwagger502 &r_502) {
    m_r_502 = r_502;
    m_r_502_isSet = true;
}

bool OAISwaggerresponses::is_r_502_Set() const{
    return m_r_502_isSet;
}

bool OAISwaggerresponses::is_r_502_Valid() const{
    return m_r_502_isValid;
}

bool OAISwaggerresponses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_200.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_400.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_401.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_403.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_404.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_405.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_406.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_409.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_415.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_500.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_502.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerresponses::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
