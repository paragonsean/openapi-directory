/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerinfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerinfo::OAISwaggerinfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerinfo::OAISwaggerinfo() {
    this->initializeModel();
}

OAISwaggerinfo::~OAISwaggerinfo() {}

void OAISwaggerinfo::initializeModel() {

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISwaggerinfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerinfo::fromJsonObject(QJsonObject json) {

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISwaggerinfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerinfo::asJsonObject() const {
    QJsonObject obj;
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAISwaggercontact OAISwaggerinfo::getContact() const {
    return m_contact;
}
void OAISwaggerinfo::setContact(const OAISwaggercontact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAISwaggerinfo::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAISwaggerinfo::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAISwaggerinfo::getTitle() const {
    return m_title;
}
void OAISwaggerinfo::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISwaggerinfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAISwaggerinfo::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISwaggerinfo::getVersion() const {
    return m_version;
}
void OAISwaggerinfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISwaggerinfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAISwaggerinfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISwaggerinfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerinfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
