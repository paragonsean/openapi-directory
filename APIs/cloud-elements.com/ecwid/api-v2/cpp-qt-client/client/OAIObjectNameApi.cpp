/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectNameApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIObjectNameApi::OAIObjectNameApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIObjectNameApi::~OAIObjectNameApi() {
}

void OAIObjectNameApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.cloud-elements.com/elements/api-v2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createByObjectName", defaultConf);
    _serverIndices.insert("createByObjectName", 0);
    _serverConfigs.insert("createObjectNameByChildObjectName", defaultConf);
    _serverIndices.insert("createObjectNameByChildObjectName", 0);
    _serverConfigs.insert("deleteObjectNameByChildObjectId", defaultConf);
    _serverIndices.insert("deleteObjectNameByChildObjectId", 0);
    _serverConfigs.insert("deleteObjectNameByObjectId", defaultConf);
    _serverIndices.insert("deleteObjectNameByObjectId", 0);
    _serverConfigs.insert("getByObjectName", defaultConf);
    _serverIndices.insert("getByObjectName", 0);
    _serverConfigs.insert("getObjectNameByChildObjectId", defaultConf);
    _serverIndices.insert("getObjectNameByChildObjectId", 0);
    _serverConfigs.insert("getObjectNameByChildObjectName", defaultConf);
    _serverIndices.insert("getObjectNameByChildObjectName", 0);
    _serverConfigs.insert("getObjectNameByObjectId", defaultConf);
    _serverIndices.insert("getObjectNameByObjectId", 0);
    _serverConfigs.insert("replaceObjectNameByChildObjectId", defaultConf);
    _serverIndices.insert("replaceObjectNameByChildObjectId", 0);
    _serverConfigs.insert("replaceObjectNameByObjectId", defaultConf);
    _serverIndices.insert("replaceObjectNameByObjectId", 0);
    _serverConfigs.insert("updateObjectNameByChildObjectId", defaultConf);
    _serverIndices.insert("updateObjectNameByChildObjectId", 0);
    _serverConfigs.insert("updateObjectNameByObjectId", defaultConf);
    _serverIndices.insert("updateObjectNameByObjectId", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIObjectNameApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIObjectNameApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIObjectNameApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIObjectNameApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIObjectNameApi::setUsername(const QString &username) {
    _username = username;
}

void OAIObjectNameApi::setPassword(const QString &password) {
    _password = password;
}


void OAIObjectNameApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIObjectNameApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIObjectNameApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIObjectNameApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIObjectNameApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIObjectNameApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIObjectNameApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIObjectNameApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIObjectNameApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIObjectNameApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIObjectNameApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIObjectNameApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIObjectNameApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIObjectNameApi::createByObjectName(const QString &authorization, const QString &object_name, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["createByObjectName"][_serverIndices.value("createByObjectName")].URL()+"/{objectName}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::createByObjectNameCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::createByObjectNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createByObjectNameSignal();
        Q_EMIT createByObjectNameSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createByObjectNameSignalE(error_type, error_str);
        Q_EMIT createByObjectNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createByObjectNameSignalError(error_type, error_str);
        Q_EMIT createByObjectNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::createObjectNameByChildObjectName(const QString &authorization, const QString &object_name, const QString &object_id, const QString &child_object_name, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["createObjectNameByChildObjectName"][_serverIndices.value("createObjectNameByChildObjectName")].URL()+"/{objectName}/{objectId}/{childObjectName}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    
    {
        QString child_object_namePathParam("{");
        child_object_namePathParam.append("childObjectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectName"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::createObjectNameByChildObjectNameCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::createObjectNameByChildObjectNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createObjectNameByChildObjectNameSignal();
        Q_EMIT createObjectNameByChildObjectNameSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createObjectNameByChildObjectNameSignalE(error_type, error_str);
        Q_EMIT createObjectNameByChildObjectNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createObjectNameByChildObjectNameSignalError(error_type, error_str);
        Q_EMIT createObjectNameByChildObjectNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::deleteObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id) {
    QString fullPath = QString(_serverConfigs["deleteObjectNameByChildObjectId"][_serverIndices.value("deleteObjectNameByChildObjectId")].URL()+"/{objectName}/{objectId}/{childObjectName}/{childObjectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString child_object_namePathParam("{");
        child_object_namePathParam.append("childObjectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectName"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    
    {
        QString child_object_idPathParam("{");
        child_object_idPathParam.append("childObjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectId"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::deleteObjectNameByChildObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::deleteObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteObjectNameByChildObjectIdSignal();
        Q_EMIT deleteObjectNameByChildObjectIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteObjectNameByChildObjectIdSignalE(error_type, error_str);
        Q_EMIT deleteObjectNameByChildObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteObjectNameByChildObjectIdSignalError(error_type, error_str);
        Q_EMIT deleteObjectNameByChildObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::deleteObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id) {
    QString fullPath = QString(_serverConfigs["deleteObjectNameByObjectId"][_serverIndices.value("deleteObjectNameByObjectId")].URL()+"/{objectName}/{objectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::deleteObjectNameByObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::deleteObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteObjectNameByObjectIdSignal();
        Q_EMIT deleteObjectNameByObjectIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteObjectNameByObjectIdSignalE(error_type, error_str);
        Q_EMIT deleteObjectNameByObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteObjectNameByObjectIdSignalError(error_type, error_str);
        Q_EMIT deleteObjectNameByObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::getByObjectName(const QString &authorization, const QString &object_name, const ::OpenAPI::OptionalParam<QString> &where, const ::OpenAPI::OptionalParam<qint64> &page_size, const ::OpenAPI::OptionalParam<QString> &next_page, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getByObjectName"][_serverIndices.value("getByObjectName")].URL()+"/{objectName}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (where.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "where", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("where")).append(querySuffix).append(QUrl::toPercentEncoding(where.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageSize", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (next_page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nextPage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nextPage")).append(querySuffix).append(QUrl::toPercentEncoding(next_page.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::getByObjectNameCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::getByObjectNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getByObjectNameSignal(output);
        Q_EMIT getByObjectNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getByObjectNameSignalE(output, error_type, error_str);
        Q_EMIT getByObjectNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getByObjectNameSignalError(output, error_type, error_str);
        Q_EMIT getByObjectNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::getObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id) {
    QString fullPath = QString(_serverConfigs["getObjectNameByChildObjectId"][_serverIndices.value("getObjectNameByChildObjectId")].URL()+"/{objectName}/{objectId}/{childObjectName}/{childObjectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString child_object_namePathParam("{");
        child_object_namePathParam.append("childObjectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectName"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    
    {
        QString child_object_idPathParam("{");
        child_object_idPathParam.append("childObjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectId"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::getObjectNameByChildObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::getObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectNameByChildObjectIdSignal(output);
        Q_EMIT getObjectNameByChildObjectIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectNameByChildObjectIdSignalE(output, error_type, error_str);
        Q_EMIT getObjectNameByChildObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectNameByChildObjectIdSignalError(output, error_type, error_str);
        Q_EMIT getObjectNameByChildObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::getObjectNameByChildObjectName(const QString &authorization, const QString &object_name, const QString &object_id, const QString &child_object_name, const ::OpenAPI::OptionalParam<QString> &where, const ::OpenAPI::OptionalParam<qint64> &page_size, const ::OpenAPI::OptionalParam<QString> &next_page, const ::OpenAPI::OptionalParam<QString> &fields) {
    QString fullPath = QString(_serverConfigs["getObjectNameByChildObjectName"][_serverIndices.value("getObjectNameByChildObjectName")].URL()+"/{objectName}/{objectId}/{childObjectName}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    
    {
        QString child_object_namePathParam("{");
        child_object_namePathParam.append("childObjectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectName"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (where.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "where", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("where")).append(querySuffix).append(QUrl::toPercentEncoding(where.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageSize", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (next_page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nextPage", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nextPage")).append(querySuffix).append(QUrl::toPercentEncoding(next_page.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::getObjectNameByChildObjectNameCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::getObjectNameByChildObjectNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIObject> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIObject val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectNameByChildObjectNameSignal(output);
        Q_EMIT getObjectNameByChildObjectNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectNameByChildObjectNameSignalE(output, error_type, error_str);
        Q_EMIT getObjectNameByChildObjectNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectNameByChildObjectNameSignalError(output, error_type, error_str);
        Q_EMIT getObjectNameByChildObjectNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::getObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id) {
    QString fullPath = QString(_serverConfigs["getObjectNameByObjectId"][_serverIndices.value("getObjectNameByObjectId")].URL()+"/{objectName}/{objectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::getObjectNameByObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::getObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getObjectNameByObjectIdSignal(output);
        Q_EMIT getObjectNameByObjectIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getObjectNameByObjectIdSignalE(output, error_type, error_str);
        Q_EMIT getObjectNameByObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getObjectNameByObjectIdSignalError(output, error_type, error_str);
        Q_EMIT getObjectNameByObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::replaceObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["replaceObjectNameByChildObjectId"][_serverIndices.value("replaceObjectNameByChildObjectId")].URL()+"/{objectName}/{objectId}/{childObjectName}/{childObjectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString child_object_namePathParam("{");
        child_object_namePathParam.append("childObjectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectName"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    
    {
        QString child_object_idPathParam("{");
        child_object_idPathParam.append("childObjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectId"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::replaceObjectNameByChildObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::replaceObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT replaceObjectNameByChildObjectIdSignal(output);
        Q_EMIT replaceObjectNameByChildObjectIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT replaceObjectNameByChildObjectIdSignalE(output, error_type, error_str);
        Q_EMIT replaceObjectNameByChildObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT replaceObjectNameByChildObjectIdSignalError(output, error_type, error_str);
        Q_EMIT replaceObjectNameByChildObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::replaceObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["replaceObjectNameByObjectId"][_serverIndices.value("replaceObjectNameByObjectId")].URL()+"/{objectName}/{objectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::replaceObjectNameByObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::replaceObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT replaceObjectNameByObjectIdSignal(output);
        Q_EMIT replaceObjectNameByObjectIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT replaceObjectNameByObjectIdSignalE(output, error_type, error_str);
        Q_EMIT replaceObjectNameByObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT replaceObjectNameByObjectIdSignalError(output, error_type, error_str);
        Q_EMIT replaceObjectNameByObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::updateObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["updateObjectNameByChildObjectId"][_serverIndices.value("updateObjectNameByChildObjectId")].URL()+"/{objectName}/{objectId}/{childObjectName}/{childObjectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString child_object_namePathParam("{");
        child_object_namePathParam.append("childObjectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectName"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    
    {
        QString child_object_idPathParam("{");
        child_object_idPathParam.append("childObjectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "childObjectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"childObjectId"+pathSuffix : pathPrefix;
        fullPath.replace(child_object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(child_object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::updateObjectNameByChildObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::updateObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateObjectNameByChildObjectIdSignal(output);
        Q_EMIT updateObjectNameByChildObjectIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateObjectNameByChildObjectIdSignalE(output, error_type, error_str);
        Q_EMIT updateObjectNameByChildObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateObjectNameByChildObjectIdSignalError(output, error_type, error_str);
        Q_EMIT updateObjectNameByChildObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::updateObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id, const OAIObject &body) {
    QString fullPath = QString(_serverConfigs["updateObjectNameByObjectId"][_serverIndices.value("updateObjectNameByObjectId")].URL()+"/{objectName}/{objectId}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("objectName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectName"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_idPathParam("{");
        object_idPathParam.append("objectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "objectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"objectId"+pathSuffix : pathPrefix;
        fullPath.replace(object_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIObjectNameApi::updateObjectNameByObjectIdCallback);
    connect(this, &OAIObjectNameApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIObjectNameApi::updateObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateObjectNameByObjectIdSignal(output);
        Q_EMIT updateObjectNameByObjectIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateObjectNameByObjectIdSignalE(output, error_type, error_str);
        Q_EMIT updateObjectNameByObjectIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateObjectNameByObjectIdSignalError(output, error_type, error_str);
        Q_EMIT updateObjectNameByObjectIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIObjectNameApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
