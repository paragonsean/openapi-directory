/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingOption::OAIShippingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingOption::OAIShippingOption() {
    this->initializeModel();
}

OAIShippingOption::~OAIShippingOption() {}

void OAIShippingOption::initializeModel() {

    m_estimated_transit_time_isSet = false;
    m_estimated_transit_time_isValid = false;

    m_is_pickup_isSet = false;
    m_is_pickup_isValid = false;

    m_shipping_carrier_name_isSet = false;
    m_shipping_carrier_name_isValid = false;

    m_shipping_method_name_isSet = false;
    m_shipping_method_name_isValid = false;

    m_shipping_rate_isSet = false;
    m_shipping_rate_isValid = false;
}

void OAIShippingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingOption::fromJsonObject(QJsonObject json) {

    m_estimated_transit_time_isValid = ::OpenAPI::fromJsonValue(m_estimated_transit_time, json[QString("estimatedTransitTime")]);
    m_estimated_transit_time_isSet = !json[QString("estimatedTransitTime")].isNull() && m_estimated_transit_time_isValid;

    m_is_pickup_isValid = ::OpenAPI::fromJsonValue(m_is_pickup, json[QString("isPickup")]);
    m_is_pickup_isSet = !json[QString("isPickup")].isNull() && m_is_pickup_isValid;

    m_shipping_carrier_name_isValid = ::OpenAPI::fromJsonValue(m_shipping_carrier_name, json[QString("shippingCarrierName")]);
    m_shipping_carrier_name_isSet = !json[QString("shippingCarrierName")].isNull() && m_shipping_carrier_name_isValid;

    m_shipping_method_name_isValid = ::OpenAPI::fromJsonValue(m_shipping_method_name, json[QString("shippingMethodName")]);
    m_shipping_method_name_isSet = !json[QString("shippingMethodName")].isNull() && m_shipping_method_name_isValid;

    m_shipping_rate_isValid = ::OpenAPI::fromJsonValue(m_shipping_rate, json[QString("shippingRate")]);
    m_shipping_rate_isSet = !json[QString("shippingRate")].isNull() && m_shipping_rate_isValid;
}

QString OAIShippingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_transit_time_isSet) {
        obj.insert(QString("estimatedTransitTime"), ::OpenAPI::toJsonValue(m_estimated_transit_time));
    }
    if (m_is_pickup_isSet) {
        obj.insert(QString("isPickup"), ::OpenAPI::toJsonValue(m_is_pickup));
    }
    if (m_shipping_carrier_name_isSet) {
        obj.insert(QString("shippingCarrierName"), ::OpenAPI::toJsonValue(m_shipping_carrier_name));
    }
    if (m_shipping_method_name_isSet) {
        obj.insert(QString("shippingMethodName"), ::OpenAPI::toJsonValue(m_shipping_method_name));
    }
    if (m_shipping_rate_isSet) {
        obj.insert(QString("shippingRate"), ::OpenAPI::toJsonValue(m_shipping_rate));
    }
    return obj;
}

QString OAIShippingOption::getEstimatedTransitTime() const {
    return m_estimated_transit_time;
}
void OAIShippingOption::setEstimatedTransitTime(const QString &estimated_transit_time) {
    m_estimated_transit_time = estimated_transit_time;
    m_estimated_transit_time_isSet = true;
}

bool OAIShippingOption::is_estimated_transit_time_Set() const{
    return m_estimated_transit_time_isSet;
}

bool OAIShippingOption::is_estimated_transit_time_Valid() const{
    return m_estimated_transit_time_isValid;
}

bool OAIShippingOption::isIsPickup() const {
    return m_is_pickup;
}
void OAIShippingOption::setIsPickup(const bool &is_pickup) {
    m_is_pickup = is_pickup;
    m_is_pickup_isSet = true;
}

bool OAIShippingOption::is_is_pickup_Set() const{
    return m_is_pickup_isSet;
}

bool OAIShippingOption::is_is_pickup_Valid() const{
    return m_is_pickup_isValid;
}

QString OAIShippingOption::getShippingCarrierName() const {
    return m_shipping_carrier_name;
}
void OAIShippingOption::setShippingCarrierName(const QString &shipping_carrier_name) {
    m_shipping_carrier_name = shipping_carrier_name;
    m_shipping_carrier_name_isSet = true;
}

bool OAIShippingOption::is_shipping_carrier_name_Set() const{
    return m_shipping_carrier_name_isSet;
}

bool OAIShippingOption::is_shipping_carrier_name_Valid() const{
    return m_shipping_carrier_name_isValid;
}

QString OAIShippingOption::getShippingMethodName() const {
    return m_shipping_method_name;
}
void OAIShippingOption::setShippingMethodName(const QString &shipping_method_name) {
    m_shipping_method_name = shipping_method_name;
    m_shipping_method_name_isSet = true;
}

bool OAIShippingOption::is_shipping_method_name_Set() const{
    return m_shipping_method_name_isSet;
}

bool OAIShippingOption::is_shipping_method_name_Valid() const{
    return m_shipping_method_name_isValid;
}

double OAIShippingOption::getShippingRate() const {
    return m_shipping_rate;
}
void OAIShippingOption::setShippingRate(const double &shipping_rate) {
    m_shipping_rate = shipping_rate;
    m_shipping_rate_isSet = true;
}

bool OAIShippingOption::is_shipping_rate_Set() const{
    return m_shipping_rate_isSet;
}

bool OAIShippingOption::is_shipping_rate_Valid() const{
    return m_shipping_rate_isValid;
}

bool OAIShippingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_transit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_carrier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
