/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_name_isSet = false;
    m_state_name_isValid = false;

    m_state_or_province_code_isSet = false;
    m_state_or_province_code_isValid = false;

    m_state_or_province_name_isSet = false;
    m_state_or_province_name_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;

    m_state_or_province_code_isValid = ::OpenAPI::fromJsonValue(m_state_or_province_code, json[QString("stateOrProvinceCode")]);
    m_state_or_province_code_isSet = !json[QString("stateOrProvinceCode")].isNull() && m_state_or_province_code_isValid;

    m_state_or_province_name_isValid = ::OpenAPI::fromJsonValue(m_state_or_province_name, json[QString("stateOrProvinceName")]);
    m_state_or_province_name_isSet = !json[QString("stateOrProvinceName")].isNull() && m_state_or_province_name_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    if (m_state_or_province_code_isSet) {
        obj.insert(QString("stateOrProvinceCode"), ::OpenAPI::toJsonValue(m_state_or_province_code));
    }
    if (m_state_or_province_name_isSet) {
        obj.insert(QString("stateOrProvinceName"), ::OpenAPI::toJsonValue(m_state_or_province_name));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIPerson::getCity() const {
    return m_city;
}
void OAIPerson::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPerson::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPerson::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIPerson::getCompanyName() const {
    return m_company_name;
}
void OAIPerson::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIPerson::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIPerson::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIPerson::getCountryCode() const {
    return m_country_code;
}
void OAIPerson::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPerson::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPerson::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIPerson::getCountryName() const {
    return m_country_name;
}
void OAIPerson::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIPerson::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIPerson::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIPerson::getName() const {
    return m_name;
}
void OAIPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPerson::getPhone() const {
    return m_phone;
}
void OAIPerson::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIPerson::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIPerson::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIPerson::getPostalCode() const {
    return m_postal_code;
}
void OAIPerson::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIPerson::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIPerson::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIPerson::getStateName() const {
    return m_state_name;
}
void OAIPerson::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIPerson::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIPerson::is_state_name_Valid() const{
    return m_state_name_isValid;
}

QString OAIPerson::getStateOrProvinceCode() const {
    return m_state_or_province_code;
}
void OAIPerson::setStateOrProvinceCode(const QString &state_or_province_code) {
    m_state_or_province_code = state_or_province_code;
    m_state_or_province_code_isSet = true;
}

bool OAIPerson::is_state_or_province_code_Set() const{
    return m_state_or_province_code_isSet;
}

bool OAIPerson::is_state_or_province_code_Valid() const{
    return m_state_or_province_code_isValid;
}

QString OAIPerson::getStateOrProvinceName() const {
    return m_state_or_province_name;
}
void OAIPerson::setStateOrProvinceName(const QString &state_or_province_name) {
    m_state_or_province_name = state_or_province_name;
    m_state_or_province_name_isSet = true;
}

bool OAIPerson::is_state_or_province_name_Set() const{
    return m_state_or_province_name_isSet;
}

bool OAIPerson::is_state_or_province_name_Valid() const{
    return m_state_or_province_name_isValid;
}

QString OAIPerson::getStreet() const {
    return m_street;
}
void OAIPerson::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIPerson::is_street_Set() const{
    return m_street_isSet;
}

bool OAIPerson::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
