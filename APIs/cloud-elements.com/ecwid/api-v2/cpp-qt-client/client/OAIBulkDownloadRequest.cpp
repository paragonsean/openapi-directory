/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkDownloadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkDownloadRequest::OAIBulkDownloadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkDownloadRequest::OAIBulkDownloadRequest() {
    this->initializeModel();
}

OAIBulkDownloadRequest::~OAIBulkDownloadRequest() {}

void OAIBulkDownloadRequest::initializeModel() {

    m_api_limit_isSet = false;
    m_api_limit_isValid = false;

    m_continue_from_job_id_isSet = false;
    m_continue_from_job_id_isValid = false;

    m_docs_hub_details_isSet = false;
    m_docs_hub_details_isValid = false;

    m_filter_date_field_isSet = false;
    m_filter_date_field_isValid = false;

    m_filter_nulls_isSet = false;
    m_filter_nulls_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_notification_url_isSet = false;
    m_notification_url_isValid = false;

    m_object_name_isSet = false;
    m_object_name_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_select_fields_isSet = false;
    m_select_fields_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_where_isSet = false;
    m_where_isValid = false;
}

void OAIBulkDownloadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkDownloadRequest::fromJsonObject(QJsonObject json) {

    m_api_limit_isValid = ::OpenAPI::fromJsonValue(m_api_limit, json[QString("apiLimit")]);
    m_api_limit_isSet = !json[QString("apiLimit")].isNull() && m_api_limit_isValid;

    m_continue_from_job_id_isValid = ::OpenAPI::fromJsonValue(m_continue_from_job_id, json[QString("continueFromJobId")]);
    m_continue_from_job_id_isSet = !json[QString("continueFromJobId")].isNull() && m_continue_from_job_id_isValid;

    m_docs_hub_details_isValid = ::OpenAPI::fromJsonValue(m_docs_hub_details, json[QString("docsHubDetails")]);
    m_docs_hub_details_isSet = !json[QString("docsHubDetails")].isNull() && m_docs_hub_details_isValid;

    m_filter_date_field_isValid = ::OpenAPI::fromJsonValue(m_filter_date_field, json[QString("filterDateField")]);
    m_filter_date_field_isSet = !json[QString("filterDateField")].isNull() && m_filter_date_field_isValid;

    m_filter_nulls_isValid = ::OpenAPI::fromJsonValue(m_filter_nulls, json[QString("filterNulls")]);
    m_filter_nulls_isSet = !json[QString("filterNulls")].isNull() && m_filter_nulls_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_notification_url_isValid = ::OpenAPI::fromJsonValue(m_notification_url, json[QString("notificationUrl")]);
    m_notification_url_isSet = !json[QString("notificationUrl")].isNull() && m_notification_url_isValid;

    m_object_name_isValid = ::OpenAPI::fromJsonValue(m_object_name, json[QString("objectName")]);
    m_object_name_isSet = !json[QString("objectName")].isNull() && m_object_name_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_select_fields_isValid = ::OpenAPI::fromJsonValue(m_select_fields, json[QString("selectFields")]);
    m_select_fields_isSet = !json[QString("selectFields")].isNull() && m_select_fields_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_where_isValid = ::OpenAPI::fromJsonValue(m_where, json[QString("where")]);
    m_where_isSet = !json[QString("where")].isNull() && m_where_isValid;
}

QString OAIBulkDownloadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkDownloadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_api_limit_isSet) {
        obj.insert(QString("apiLimit"), ::OpenAPI::toJsonValue(m_api_limit));
    }
    if (m_continue_from_job_id_isSet) {
        obj.insert(QString("continueFromJobId"), ::OpenAPI::toJsonValue(m_continue_from_job_id));
    }
    if (m_docs_hub_details.isSet()) {
        obj.insert(QString("docsHubDetails"), ::OpenAPI::toJsonValue(m_docs_hub_details));
    }
    if (m_filter_date_field_isSet) {
        obj.insert(QString("filterDateField"), ::OpenAPI::toJsonValue(m_filter_date_field));
    }
    if (m_filter_nulls_isSet) {
        obj.insert(QString("filterNulls"), ::OpenAPI::toJsonValue(m_filter_nulls));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_notification_url_isSet) {
        obj.insert(QString("notificationUrl"), ::OpenAPI::toJsonValue(m_notification_url));
    }
    if (m_object_name_isSet) {
        obj.insert(QString("objectName"), ::OpenAPI::toJsonValue(m_object_name));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_select_fields_isSet) {
        obj.insert(QString("selectFields"), ::OpenAPI::toJsonValue(m_select_fields));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_where_isSet) {
        obj.insert(QString("where"), ::OpenAPI::toJsonValue(m_where));
    }
    return obj;
}

qint32 OAIBulkDownloadRequest::getApiLimit() const {
    return m_api_limit;
}
void OAIBulkDownloadRequest::setApiLimit(const qint32 &api_limit) {
    m_api_limit = api_limit;
    m_api_limit_isSet = true;
}

bool OAIBulkDownloadRequest::is_api_limit_Set() const{
    return m_api_limit_isSet;
}

bool OAIBulkDownloadRequest::is_api_limit_Valid() const{
    return m_api_limit_isValid;
}

qint32 OAIBulkDownloadRequest::getContinueFromJobId() const {
    return m_continue_from_job_id;
}
void OAIBulkDownloadRequest::setContinueFromJobId(const qint32 &continue_from_job_id) {
    m_continue_from_job_id = continue_from_job_id;
    m_continue_from_job_id_isSet = true;
}

bool OAIBulkDownloadRequest::is_continue_from_job_id_Set() const{
    return m_continue_from_job_id_isSet;
}

bool OAIBulkDownloadRequest::is_continue_from_job_id_Valid() const{
    return m_continue_from_job_id_isValid;
}

OAIBulkDownloadRequestDocsHubDetails OAIBulkDownloadRequest::getDocsHubDetails() const {
    return m_docs_hub_details;
}
void OAIBulkDownloadRequest::setDocsHubDetails(const OAIBulkDownloadRequestDocsHubDetails &docs_hub_details) {
    m_docs_hub_details = docs_hub_details;
    m_docs_hub_details_isSet = true;
}

bool OAIBulkDownloadRequest::is_docs_hub_details_Set() const{
    return m_docs_hub_details_isSet;
}

bool OAIBulkDownloadRequest::is_docs_hub_details_Valid() const{
    return m_docs_hub_details_isValid;
}

QString OAIBulkDownloadRequest::getFilterDateField() const {
    return m_filter_date_field;
}
void OAIBulkDownloadRequest::setFilterDateField(const QString &filter_date_field) {
    m_filter_date_field = filter_date_field;
    m_filter_date_field_isSet = true;
}

bool OAIBulkDownloadRequest::is_filter_date_field_Set() const{
    return m_filter_date_field_isSet;
}

bool OAIBulkDownloadRequest::is_filter_date_field_Valid() const{
    return m_filter_date_field_isValid;
}

bool OAIBulkDownloadRequest::isFilterNulls() const {
    return m_filter_nulls;
}
void OAIBulkDownloadRequest::setFilterNulls(const bool &filter_nulls) {
    m_filter_nulls = filter_nulls;
    m_filter_nulls_isSet = true;
}

bool OAIBulkDownloadRequest::is_filter_nulls_Set() const{
    return m_filter_nulls_isSet;
}

bool OAIBulkDownloadRequest::is_filter_nulls_Valid() const{
    return m_filter_nulls_isValid;
}

QString OAIBulkDownloadRequest::getFormat() const {
    return m_format;
}
void OAIBulkDownloadRequest::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIBulkDownloadRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAIBulkDownloadRequest::is_format_Valid() const{
    return m_format_isValid;
}

QDateTime OAIBulkDownloadRequest::getFrom() const {
    return m_from;
}
void OAIBulkDownloadRequest::setFrom(const QDateTime &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIBulkDownloadRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAIBulkDownloadRequest::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAIBulkDownloadRequest::getLimit() const {
    return m_limit;
}
void OAIBulkDownloadRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIBulkDownloadRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIBulkDownloadRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIBulkDownloadRequest::getNotificationUrl() const {
    return m_notification_url;
}
void OAIBulkDownloadRequest::setNotificationUrl(const QString &notification_url) {
    m_notification_url = notification_url;
    m_notification_url_isSet = true;
}

bool OAIBulkDownloadRequest::is_notification_url_Set() const{
    return m_notification_url_isSet;
}

bool OAIBulkDownloadRequest::is_notification_url_Valid() const{
    return m_notification_url_isValid;
}

QString OAIBulkDownloadRequest::getObjectName() const {
    return m_object_name;
}
void OAIBulkDownloadRequest::setObjectName(const QString &object_name) {
    m_object_name = object_name;
    m_object_name_isSet = true;
}

bool OAIBulkDownloadRequest::is_object_name_Set() const{
    return m_object_name_isSet;
}

bool OAIBulkDownloadRequest::is_object_name_Valid() const{
    return m_object_name_isValid;
}

qint32 OAIBulkDownloadRequest::getPageSize() const {
    return m_page_size;
}
void OAIBulkDownloadRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIBulkDownloadRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIBulkDownloadRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

OAIBulkDownloadRequestQuery OAIBulkDownloadRequest::getQuery() const {
    return m_query;
}
void OAIBulkDownloadRequest::setQuery(const OAIBulkDownloadRequestQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIBulkDownloadRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIBulkDownloadRequest::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIBulkDownloadRequest::getSelectFields() const {
    return m_select_fields;
}
void OAIBulkDownloadRequest::setSelectFields(const QString &select_fields) {
    m_select_fields = select_fields;
    m_select_fields_isSet = true;
}

bool OAIBulkDownloadRequest::is_select_fields_Set() const{
    return m_select_fields_isSet;
}

bool OAIBulkDownloadRequest::is_select_fields_Valid() const{
    return m_select_fields_isValid;
}

QDateTime OAIBulkDownloadRequest::getTo() const {
    return m_to;
}
void OAIBulkDownloadRequest::setTo(const QDateTime &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIBulkDownloadRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAIBulkDownloadRequest::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIBulkDownloadRequest::getWhere() const {
    return m_where;
}
void OAIBulkDownloadRequest::setWhere(const QString &where) {
    m_where = where;
    m_where_isSet = true;
}

bool OAIBulkDownloadRequest::is_where_Set() const{
    return m_where_isSet;
}

bool OAIBulkDownloadRequest::is_where_Valid() const{
    return m_where_isValid;
}

bool OAIBulkDownloadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_from_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docs_hub_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_date_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_nulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_where_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkDownloadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_object_name_isValid && true;
}

} // namespace OpenAPI
