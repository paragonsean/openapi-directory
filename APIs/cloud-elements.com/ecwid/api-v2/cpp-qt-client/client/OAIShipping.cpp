/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipping::OAIShipping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipping::OAIShipping() {
    this->initializeModel();
}

OAIShipping::~OAIShipping() {}

void OAIShipping::initializeModel() {

    m_disabled_methods_isSet = false;
    m_disabled_methods_isValid = false;

    m_enabled_methods_isSet = false;
    m_enabled_methods_isValid = false;

    m_flat_rate_isSet = false;
    m_flat_rate_isValid = false;

    m_method_markup_isSet = false;
    m_method_markup_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIShipping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipping::fromJsonObject(QJsonObject json) {

    m_disabled_methods_isValid = ::OpenAPI::fromJsonValue(m_disabled_methods, json[QString("disabledMethods")]);
    m_disabled_methods_isSet = !json[QString("disabledMethods")].isNull() && m_disabled_methods_isValid;

    m_enabled_methods_isValid = ::OpenAPI::fromJsonValue(m_enabled_methods, json[QString("enabledMethods")]);
    m_enabled_methods_isSet = !json[QString("enabledMethods")].isNull() && m_enabled_methods_isValid;

    m_flat_rate_isValid = ::OpenAPI::fromJsonValue(m_flat_rate, json[QString("flatRate")]);
    m_flat_rate_isSet = !json[QString("flatRate")].isNull() && m_flat_rate_isValid;

    m_method_markup_isValid = ::OpenAPI::fromJsonValue(m_method_markup, json[QString("methodMarkup")]);
    m_method_markup_isSet = !json[QString("methodMarkup")].isNull() && m_method_markup_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIShipping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipping::asJsonObject() const {
    QJsonObject obj;
    if (m_disabled_methods.size() > 0) {
        obj.insert(QString("disabledMethods"), ::OpenAPI::toJsonValue(m_disabled_methods));
    }
    if (m_enabled_methods.size() > 0) {
        obj.insert(QString("enabledMethods"), ::OpenAPI::toJsonValue(m_enabled_methods));
    }
    if (m_flat_rate_isSet) {
        obj.insert(QString("flatRate"), ::OpenAPI::toJsonValue(m_flat_rate));
    }
    if (m_method_markup_isSet) {
        obj.insert(QString("methodMarkup"), ::OpenAPI::toJsonValue(m_method_markup));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIShipping::getDisabledMethods() const {
    return m_disabled_methods;
}
void OAIShipping::setDisabledMethods(const QList<QString> &disabled_methods) {
    m_disabled_methods = disabled_methods;
    m_disabled_methods_isSet = true;
}

bool OAIShipping::is_disabled_methods_Set() const{
    return m_disabled_methods_isSet;
}

bool OAIShipping::is_disabled_methods_Valid() const{
    return m_disabled_methods_isValid;
}

QList<QString> OAIShipping::getEnabledMethods() const {
    return m_enabled_methods;
}
void OAIShipping::setEnabledMethods(const QList<QString> &enabled_methods) {
    m_enabled_methods = enabled_methods;
    m_enabled_methods_isSet = true;
}

bool OAIShipping::is_enabled_methods_Set() const{
    return m_enabled_methods_isSet;
}

bool OAIShipping::is_enabled_methods_Valid() const{
    return m_enabled_methods_isValid;
}

double OAIShipping::getFlatRate() const {
    return m_flat_rate;
}
void OAIShipping::setFlatRate(const double &flat_rate) {
    m_flat_rate = flat_rate;
    m_flat_rate_isSet = true;
}

bool OAIShipping::is_flat_rate_Set() const{
    return m_flat_rate_isSet;
}

bool OAIShipping::is_flat_rate_Valid() const{
    return m_flat_rate_isValid;
}

double OAIShipping::getMethodMarkup() const {
    return m_method_markup;
}
void OAIShipping::setMethodMarkup(const double &method_markup) {
    m_method_markup = method_markup;
    m_method_markup_isSet = true;
}

bool OAIShipping::is_method_markup_Set() const{
    return m_method_markup_isSet;
}

bool OAIShipping::is_method_markup_Valid() const{
    return m_method_markup_isValid;
}

QString OAIShipping::getType() const {
    return m_type;
}
void OAIShipping::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShipping::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShipping::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIShipping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disabled_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
