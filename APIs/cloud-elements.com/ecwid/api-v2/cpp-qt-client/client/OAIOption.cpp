/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOption::OAIOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOption::OAIOption() {
    this->initializeModel();
}

OAIOption::~OAIOption() {}

void OAIOption::initializeModel() {

    m_choices_isSet = false;
    m_choices_isValid = false;

    m_default_choice_isSet = false;
    m_default_choice_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOption::fromJsonObject(QJsonObject json) {

    m_choices_isValid = ::OpenAPI::fromJsonValue(m_choices, json[QString("choices")]);
    m_choices_isSet = !json[QString("choices")].isNull() && m_choices_isValid;

    m_default_choice_isValid = ::OpenAPI::fromJsonValue(m_default_choice, json[QString("defaultChoice")]);
    m_default_choice_isSet = !json[QString("defaultChoice")].isNull() && m_default_choice_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOption::asJsonObject() const {
    QJsonObject obj;
    if (m_choices.size() > 0) {
        obj.insert(QString("choices"), ::OpenAPI::toJsonValue(m_choices));
    }
    if (m_default_choice_isSet) {
        obj.insert(QString("defaultChoice"), ::OpenAPI::toJsonValue(m_default_choice));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIChoice> OAIOption::getChoices() const {
    return m_choices;
}
void OAIOption::setChoices(const QList<OAIChoice> &choices) {
    m_choices = choices;
    m_choices_isSet = true;
}

bool OAIOption::is_choices_Set() const{
    return m_choices_isSet;
}

bool OAIOption::is_choices_Valid() const{
    return m_choices_isValid;
}

qint64 OAIOption::getDefaultChoice() const {
    return m_default_choice;
}
void OAIOption::setDefaultChoice(const qint64 &default_choice) {
    m_default_choice = default_choice;
    m_default_choice_isSet = true;
}

bool OAIOption::is_default_choice_Set() const{
    return m_default_choice_isSet;
}

bool OAIOption::is_default_choice_Valid() const{
    return m_default_choice_isValid;
}

QString OAIOption::getName() const {
    return m_name;
}
void OAIOption::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOption::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOption::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIOption::isRequired() const {
    return m_required;
}
void OAIOption::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIOption::is_required_Set() const{
    return m_required_isSet;
}

bool OAIOption::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIOption::getType() const {
    return m_type;
}
void OAIOption::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOption::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_choice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_required_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
