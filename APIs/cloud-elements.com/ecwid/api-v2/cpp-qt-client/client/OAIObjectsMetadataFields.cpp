/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectsMetadataFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectsMetadataFields::OAIObjectsMetadataFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectsMetadataFields::OAIObjectsMetadataFields() {
    this->initializeModel();
}

OAIObjectsMetadataFields::~OAIObjectsMetadataFields() {}

void OAIObjectsMetadataFields::initializeModel() {

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vendor_display_name_isSet = false;
    m_vendor_display_name_isValid = false;

    m_vendor_path_isSet = false;
    m_vendor_path_isValid = false;

    m_vendor_read_only_isSet = false;
    m_vendor_read_only_isValid = false;

    m_vendor_required_isSet = false;
    m_vendor_required_isValid = false;
}

void OAIObjectsMetadataFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectsMetadataFields::fromJsonObject(QJsonObject json) {

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vendor_display_name_isValid = ::OpenAPI::fromJsonValue(m_vendor_display_name, json[QString("vendorDisplayName")]);
    m_vendor_display_name_isSet = !json[QString("vendorDisplayName")].isNull() && m_vendor_display_name_isValid;

    m_vendor_path_isValid = ::OpenAPI::fromJsonValue(m_vendor_path, json[QString("vendorPath")]);
    m_vendor_path_isSet = !json[QString("vendorPath")].isNull() && m_vendor_path_isValid;

    m_vendor_read_only_isValid = ::OpenAPI::fromJsonValue(m_vendor_read_only, json[QString("vendorReadOnly")]);
    m_vendor_read_only_isSet = !json[QString("vendorReadOnly")].isNull() && m_vendor_read_only_isValid;

    m_vendor_required_isValid = ::OpenAPI::fromJsonValue(m_vendor_required, json[QString("vendorRequired")]);
    m_vendor_required_isSet = !json[QString("vendorRequired")].isNull() && m_vendor_required_isValid;
}

QString OAIObjectsMetadataFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectsMetadataFields::asJsonObject() const {
    QJsonObject obj;
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vendor_display_name_isSet) {
        obj.insert(QString("vendorDisplayName"), ::OpenAPI::toJsonValue(m_vendor_display_name));
    }
    if (m_vendor_path_isSet) {
        obj.insert(QString("vendorPath"), ::OpenAPI::toJsonValue(m_vendor_path));
    }
    if (m_vendor_read_only_isSet) {
        obj.insert(QString("vendorReadOnly"), ::OpenAPI::toJsonValue(m_vendor_read_only));
    }
    if (m_vendor_required_isSet) {
        obj.insert(QString("vendorRequired"), ::OpenAPI::toJsonValue(m_vendor_required));
    }
    return obj;
}

QString OAIObjectsMetadataFields::getMask() const {
    return m_mask;
}
void OAIObjectsMetadataFields::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIObjectsMetadataFields::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIObjectsMetadataFields::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAIObjectsMetadataFields::getType() const {
    return m_type;
}
void OAIObjectsMetadataFields::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIObjectsMetadataFields::is_type_Set() const{
    return m_type_isSet;
}

bool OAIObjectsMetadataFields::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIObjectsMetadataFields::getVendorDisplayName() const {
    return m_vendor_display_name;
}
void OAIObjectsMetadataFields::setVendorDisplayName(const QString &vendor_display_name) {
    m_vendor_display_name = vendor_display_name;
    m_vendor_display_name_isSet = true;
}

bool OAIObjectsMetadataFields::is_vendor_display_name_Set() const{
    return m_vendor_display_name_isSet;
}

bool OAIObjectsMetadataFields::is_vendor_display_name_Valid() const{
    return m_vendor_display_name_isValid;
}

QString OAIObjectsMetadataFields::getVendorPath() const {
    return m_vendor_path;
}
void OAIObjectsMetadataFields::setVendorPath(const QString &vendor_path) {
    m_vendor_path = vendor_path;
    m_vendor_path_isSet = true;
}

bool OAIObjectsMetadataFields::is_vendor_path_Set() const{
    return m_vendor_path_isSet;
}

bool OAIObjectsMetadataFields::is_vendor_path_Valid() const{
    return m_vendor_path_isValid;
}

bool OAIObjectsMetadataFields::isVendorReadOnly() const {
    return m_vendor_read_only;
}
void OAIObjectsMetadataFields::setVendorReadOnly(const bool &vendor_read_only) {
    m_vendor_read_only = vendor_read_only;
    m_vendor_read_only_isSet = true;
}

bool OAIObjectsMetadataFields::is_vendor_read_only_Set() const{
    return m_vendor_read_only_isSet;
}

bool OAIObjectsMetadataFields::is_vendor_read_only_Valid() const{
    return m_vendor_read_only_isValid;
}

bool OAIObjectsMetadataFields::isVendorRequired() const {
    return m_vendor_required;
}
void OAIObjectsMetadataFields::setVendorRequired(const bool &vendor_required) {
    m_vendor_required = vendor_required;
    m_vendor_required_isSet = true;
}

bool OAIObjectsMetadataFields::is_vendor_required_Set() const{
    return m_vendor_required_isSet;
}

bool OAIObjectsMetadataFields::is_vendor_required_Valid() const{
    return m_vendor_required_isValid;
}

bool OAIObjectsMetadataFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectsMetadataFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
