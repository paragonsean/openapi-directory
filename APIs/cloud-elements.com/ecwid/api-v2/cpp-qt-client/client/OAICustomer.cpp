/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_billing_person_isSet = false;
    m_billing_person_isValid = false;

    m_customer_group_id_isSet = false;
    m_customer_group_id_isValid = false;

    m_customer_group_name_isSet = false;
    m_customer_group_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registered_isSet = false;
    m_registered_isValid = false;

    m_shipping_addresses_isSet = false;
    m_shipping_addresses_isValid = false;

    m_tax_exempt_isSet = false;
    m_tax_exempt_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_tax_id_valid_isSet = false;
    m_tax_id_valid_isValid = false;

    m_total_order_count_isSet = false;
    m_total_order_count_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_billing_person_isValid = ::OpenAPI::fromJsonValue(m_billing_person, json[QString("billingPerson")]);
    m_billing_person_isSet = !json[QString("billingPerson")].isNull() && m_billing_person_isValid;

    m_customer_group_id_isValid = ::OpenAPI::fromJsonValue(m_customer_group_id, json[QString("customerGroupId")]);
    m_customer_group_id_isSet = !json[QString("customerGroupId")].isNull() && m_customer_group_id_isValid;

    m_customer_group_name_isValid = ::OpenAPI::fromJsonValue(m_customer_group_name, json[QString("customerGroupName")]);
    m_customer_group_name_isSet = !json[QString("customerGroupName")].isNull() && m_customer_group_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registered_isValid = ::OpenAPI::fromJsonValue(m_registered, json[QString("registered")]);
    m_registered_isSet = !json[QString("registered")].isNull() && m_registered_isValid;

    m_shipping_addresses_isValid = ::OpenAPI::fromJsonValue(m_shipping_addresses, json[QString("shippingAddresses")]);
    m_shipping_addresses_isSet = !json[QString("shippingAddresses")].isNull() && m_shipping_addresses_isValid;

    m_tax_exempt_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt, json[QString("taxExempt")]);
    m_tax_exempt_isSet = !json[QString("taxExempt")].isNull() && m_tax_exempt_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;

    m_tax_id_valid_isValid = ::OpenAPI::fromJsonValue(m_tax_id_valid, json[QString("taxIdValid")]);
    m_tax_id_valid_isSet = !json[QString("taxIdValid")].isNull() && m_tax_id_valid_isValid;

    m_total_order_count_isValid = ::OpenAPI::fromJsonValue(m_total_order_count, json[QString("totalOrderCount")]);
    m_total_order_count_isSet = !json[QString("totalOrderCount")].isNull() && m_total_order_count_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_person.isSet()) {
        obj.insert(QString("billingPerson"), ::OpenAPI::toJsonValue(m_billing_person));
    }
    if (m_customer_group_id_isSet) {
        obj.insert(QString("customerGroupId"), ::OpenAPI::toJsonValue(m_customer_group_id));
    }
    if (m_customer_group_name_isSet) {
        obj.insert(QString("customerGroupName"), ::OpenAPI::toJsonValue(m_customer_group_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registered_isSet) {
        obj.insert(QString("registered"), ::OpenAPI::toJsonValue(m_registered));
    }
    if (m_shipping_addresses.size() > 0) {
        obj.insert(QString("shippingAddresses"), ::OpenAPI::toJsonValue(m_shipping_addresses));
    }
    if (m_tax_exempt_isSet) {
        obj.insert(QString("taxExempt"), ::OpenAPI::toJsonValue(m_tax_exempt));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_tax_id_valid_isSet) {
        obj.insert(QString("taxIdValid"), ::OpenAPI::toJsonValue(m_tax_id_valid));
    }
    if (m_total_order_count_isSet) {
        obj.insert(QString("totalOrderCount"), ::OpenAPI::toJsonValue(m_total_order_count));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

OAIPerson OAICustomer::getBillingPerson() const {
    return m_billing_person;
}
void OAICustomer::setBillingPerson(const OAIPerson &billing_person) {
    m_billing_person = billing_person;
    m_billing_person_isSet = true;
}

bool OAICustomer::is_billing_person_Set() const{
    return m_billing_person_isSet;
}

bool OAICustomer::is_billing_person_Valid() const{
    return m_billing_person_isValid;
}

qint64 OAICustomer::getCustomerGroupId() const {
    return m_customer_group_id;
}
void OAICustomer::setCustomerGroupId(const qint64 &customer_group_id) {
    m_customer_group_id = customer_group_id;
    m_customer_group_id_isSet = true;
}

bool OAICustomer::is_customer_group_id_Set() const{
    return m_customer_group_id_isSet;
}

bool OAICustomer::is_customer_group_id_Valid() const{
    return m_customer_group_id_isValid;
}

QString OAICustomer::getCustomerGroupName() const {
    return m_customer_group_name;
}
void OAICustomer::setCustomerGroupName(const QString &customer_group_name) {
    m_customer_group_name = customer_group_name;
    m_customer_group_name_isSet = true;
}

bool OAICustomer::is_customer_group_name_Set() const{
    return m_customer_group_name_isSet;
}

bool OAICustomer::is_customer_group_name_Valid() const{
    return m_customer_group_name_isValid;
}

QString OAICustomer::getEmail() const {
    return m_email;
}
void OAICustomer::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomer::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomer::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAICustomer::getId() const {
    return m_id;
}
void OAICustomer::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer::getName() const {
    return m_name;
}
void OAICustomer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomer::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomer::getRegistered() const {
    return m_registered;
}
void OAICustomer::setRegistered(const QString &registered) {
    m_registered = registered;
    m_registered_isSet = true;
}

bool OAICustomer::is_registered_Set() const{
    return m_registered_isSet;
}

bool OAICustomer::is_registered_Valid() const{
    return m_registered_isValid;
}

QList<OAIPerson> OAICustomer::getShippingAddresses() const {
    return m_shipping_addresses;
}
void OAICustomer::setShippingAddresses(const QList<OAIPerson> &shipping_addresses) {
    m_shipping_addresses = shipping_addresses;
    m_shipping_addresses_isSet = true;
}

bool OAICustomer::is_shipping_addresses_Set() const{
    return m_shipping_addresses_isSet;
}

bool OAICustomer::is_shipping_addresses_Valid() const{
    return m_shipping_addresses_isValid;
}

bool OAICustomer::isTaxExempt() const {
    return m_tax_exempt;
}
void OAICustomer::setTaxExempt(const bool &tax_exempt) {
    m_tax_exempt = tax_exempt;
    m_tax_exempt_isSet = true;
}

bool OAICustomer::is_tax_exempt_Set() const{
    return m_tax_exempt_isSet;
}

bool OAICustomer::is_tax_exempt_Valid() const{
    return m_tax_exempt_isValid;
}

double OAICustomer::getTaxId() const {
    return m_tax_id;
}
void OAICustomer::setTaxId(const double &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAICustomer::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAICustomer::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAICustomer::isTaxIdValid() const {
    return m_tax_id_valid;
}
void OAICustomer::setTaxIdValid(const bool &tax_id_valid) {
    m_tax_id_valid = tax_id_valid;
    m_tax_id_valid_isSet = true;
}

bool OAICustomer::is_tax_id_valid_Set() const{
    return m_tax_id_valid_isSet;
}

bool OAICustomer::is_tax_id_valid_Valid() const{
    return m_tax_id_valid_isValid;
}

double OAICustomer::getTotalOrderCount() const {
    return m_total_order_count;
}
void OAICustomer::setTotalOrderCount(const double &total_order_count) {
    m_total_order_count = total_order_count;
    m_total_order_count_isSet = true;
}

bool OAICustomer::is_total_order_count_Set() const{
    return m_total_order_count_isSet;
}

bool OAICustomer::is_total_order_count_Valid() const{
    return m_total_order_count_isValid;
}

QString OAICustomer::getUpdated() const {
    return m_updated;
}
void OAICustomer::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAICustomer::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAICustomer::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_order_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
