/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerPost::OAICustomerPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerPost::OAICustomerPost() {
    this->initializeModel();
}

OAICustomerPost::~OAICustomerPost() {}

void OAICustomerPost::initializeModel() {

    m_billing_person_isSet = false;
    m_billing_person_isValid = false;

    m_customer_group_id_isSet = false;
    m_customer_group_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_shipping_addresses_isSet = false;
    m_shipping_addresses_isValid = false;

    m_tax_exempt_isSet = false;
    m_tax_exempt_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_tax_id_valid_isSet = false;
    m_tax_id_valid_isValid = false;
}

void OAICustomerPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerPost::fromJsonObject(QJsonObject json) {

    m_billing_person_isValid = ::OpenAPI::fromJsonValue(m_billing_person, json[QString("billingPerson")]);
    m_billing_person_isSet = !json[QString("billingPerson")].isNull() && m_billing_person_isValid;

    m_customer_group_id_isValid = ::OpenAPI::fromJsonValue(m_customer_group_id, json[QString("customerGroupId")]);
    m_customer_group_id_isSet = !json[QString("customerGroupId")].isNull() && m_customer_group_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_shipping_addresses_isValid = ::OpenAPI::fromJsonValue(m_shipping_addresses, json[QString("shippingAddresses")]);
    m_shipping_addresses_isSet = !json[QString("shippingAddresses")].isNull() && m_shipping_addresses_isValid;

    m_tax_exempt_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt, json[QString("taxExempt")]);
    m_tax_exempt_isSet = !json[QString("taxExempt")].isNull() && m_tax_exempt_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;

    m_tax_id_valid_isValid = ::OpenAPI::fromJsonValue(m_tax_id_valid, json[QString("taxIdValid")]);
    m_tax_id_valid_isSet = !json[QString("taxIdValid")].isNull() && m_tax_id_valid_isValid;
}

QString OAICustomerPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerPost::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_person.isSet()) {
        obj.insert(QString("billingPerson"), ::OpenAPI::toJsonValue(m_billing_person));
    }
    if (m_customer_group_id_isSet) {
        obj.insert(QString("customerGroupId"), ::OpenAPI::toJsonValue(m_customer_group_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_shipping_addresses.size() > 0) {
        obj.insert(QString("shippingAddresses"), ::OpenAPI::toJsonValue(m_shipping_addresses));
    }
    if (m_tax_exempt_isSet) {
        obj.insert(QString("taxExempt"), ::OpenAPI::toJsonValue(m_tax_exempt));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_tax_id_valid_isSet) {
        obj.insert(QString("taxIdValid"), ::OpenAPI::toJsonValue(m_tax_id_valid));
    }
    return obj;
}

OAIPerson OAICustomerPost::getBillingPerson() const {
    return m_billing_person;
}
void OAICustomerPost::setBillingPerson(const OAIPerson &billing_person) {
    m_billing_person = billing_person;
    m_billing_person_isSet = true;
}

bool OAICustomerPost::is_billing_person_Set() const{
    return m_billing_person_isSet;
}

bool OAICustomerPost::is_billing_person_Valid() const{
    return m_billing_person_isValid;
}

qint64 OAICustomerPost::getCustomerGroupId() const {
    return m_customer_group_id;
}
void OAICustomerPost::setCustomerGroupId(const qint64 &customer_group_id) {
    m_customer_group_id = customer_group_id;
    m_customer_group_id_isSet = true;
}

bool OAICustomerPost::is_customer_group_id_Set() const{
    return m_customer_group_id_isSet;
}

bool OAICustomerPost::is_customer_group_id_Valid() const{
    return m_customer_group_id_isValid;
}

QString OAICustomerPost::getEmail() const {
    return m_email;
}
void OAICustomerPost::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomerPost::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomerPost::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomerPost::getPassword() const {
    return m_password;
}
void OAICustomerPost::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICustomerPost::is_password_Set() const{
    return m_password_isSet;
}

bool OAICustomerPost::is_password_Valid() const{
    return m_password_isValid;
}

QList<OAIPerson> OAICustomerPost::getShippingAddresses() const {
    return m_shipping_addresses;
}
void OAICustomerPost::setShippingAddresses(const QList<OAIPerson> &shipping_addresses) {
    m_shipping_addresses = shipping_addresses;
    m_shipping_addresses_isSet = true;
}

bool OAICustomerPost::is_shipping_addresses_Set() const{
    return m_shipping_addresses_isSet;
}

bool OAICustomerPost::is_shipping_addresses_Valid() const{
    return m_shipping_addresses_isValid;
}

bool OAICustomerPost::isTaxExempt() const {
    return m_tax_exempt;
}
void OAICustomerPost::setTaxExempt(const bool &tax_exempt) {
    m_tax_exempt = tax_exempt;
    m_tax_exempt_isSet = true;
}

bool OAICustomerPost::is_tax_exempt_Set() const{
    return m_tax_exempt_isSet;
}

bool OAICustomerPost::is_tax_exempt_Valid() const{
    return m_tax_exempt_isValid;
}

double OAICustomerPost::getTaxId() const {
    return m_tax_id;
}
void OAICustomerPost::setTaxId(const double &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAICustomerPost::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAICustomerPost::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAICustomerPost::isTaxIdValid() const {
    return m_tax_id_valid;
}
void OAICustomerPost::setTaxIdValid(const bool &tax_id_valid) {
    m_tax_id_valid = tax_id_valid;
    m_tax_id_valid_isSet = true;
}

bool OAICustomerPost::is_tax_id_valid_Set() const{
    return m_tax_id_valid_isSet;
}

bool OAICustomerPost::is_tax_id_valid_Valid() const{
    return m_tax_id_valid_isValid;
}

bool OAICustomerPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && true;
}

} // namespace OpenAPI
