/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_billing_person_isSet = false;
    m_billing_person_isValid = false;

    m_coupon_discount_isSet = false;
    m_coupon_discount_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_create_timestamp_isSet = false;
    m_create_timestamp_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_tax_exempt_isSet = false;
    m_customer_tax_exempt_isValid = false;

    m_customer_tax_id_isSet = false;
    m_customer_tax_id_isValid = false;

    m_customer_tax_id_valid_isSet = false;
    m_customer_tax_id_valid_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fulfillment_status_isSet = false;
    m_fulfillment_status_isValid = false;

    m_global_referer_isSet = false;
    m_global_referer_isValid = false;

    m_handling_fee_isSet = false;
    m_handling_fee_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_last_change_date_isSet = false;
    m_last_change_date_isValid = false;

    m_membership_based_discount_isSet = false;
    m_membership_based_discount_isValid = false;

    m_order_comments_isSet = false;
    m_order_comments_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_module_isSet = false;
    m_payment_module_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;

    m_private_admin_notes_isSet = false;
    m_private_admin_notes_isValid = false;

    m_referer_url_isSet = false;
    m_referer_url_isValid = false;

    m_refunded_amount_isSet = false;
    m_refunded_amount_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_reversed_tax_applied_isSet = false;
    m_reversed_tax_applied_isValid = false;

    m_sample_isSet = false;
    m_sample_isValid = false;

    m_shipping_method_isSet = false;
    m_shipping_method_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_shipping_person_isSet = false;
    m_shipping_person_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_taxes_on_shipping_isSet = false;
    m_taxes_on_shipping_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_and_membership_based_discount_isSet = false;
    m_total_and_membership_based_discount_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_update_timestamp_isSet = false;
    m_update_timestamp_isValid = false;

    m_usd_total_isSet = false;
    m_usd_total_isValid = false;

    m_vendor_number_isSet = false;
    m_vendor_number_isValid = false;

    m_vendor_order_number_isSet = false;
    m_vendor_order_number_isValid = false;

    m_volume_discount_isSet = false;
    m_volume_discount_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_billing_person_isValid = ::OpenAPI::fromJsonValue(m_billing_person, json[QString("billingPerson")]);
    m_billing_person_isSet = !json[QString("billingPerson")].isNull() && m_billing_person_isValid;

    m_coupon_discount_isValid = ::OpenAPI::fromJsonValue(m_coupon_discount, json[QString("couponDiscount")]);
    m_coupon_discount_isSet = !json[QString("couponDiscount")].isNull() && m_coupon_discount_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_create_timestamp_isValid = ::OpenAPI::fromJsonValue(m_create_timestamp, json[QString("createTimestamp")]);
    m_create_timestamp_isSet = !json[QString("createTimestamp")].isNull() && m_create_timestamp_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_customer_tax_exempt_isValid = ::OpenAPI::fromJsonValue(m_customer_tax_exempt, json[QString("customerTaxExempt")]);
    m_customer_tax_exempt_isSet = !json[QString("customerTaxExempt")].isNull() && m_customer_tax_exempt_isValid;

    m_customer_tax_id_isValid = ::OpenAPI::fromJsonValue(m_customer_tax_id, json[QString("customerTaxId")]);
    m_customer_tax_id_isSet = !json[QString("customerTaxId")].isNull() && m_customer_tax_id_isValid;

    m_customer_tax_id_valid_isValid = ::OpenAPI::fromJsonValue(m_customer_tax_id_valid, json[QString("customerTaxIdValid")]);
    m_customer_tax_id_valid_isSet = !json[QString("customerTaxIdValid")].isNull() && m_customer_tax_id_valid_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fulfillment_status_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_status, json[QString("fulfillmentStatus")]);
    m_fulfillment_status_isSet = !json[QString("fulfillmentStatus")].isNull() && m_fulfillment_status_isValid;

    m_global_referer_isValid = ::OpenAPI::fromJsonValue(m_global_referer, json[QString("globalReferer")]);
    m_global_referer_isSet = !json[QString("globalReferer")].isNull() && m_global_referer_isValid;

    m_handling_fee_isValid = ::OpenAPI::fromJsonValue(m_handling_fee, json[QString("handlingFee")]);
    m_handling_fee_isSet = !json[QString("handlingFee")].isNull() && m_handling_fee_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_last_change_date_isValid = ::OpenAPI::fromJsonValue(m_last_change_date, json[QString("lastChangeDate")]);
    m_last_change_date_isSet = !json[QString("lastChangeDate")].isNull() && m_last_change_date_isValid;

    m_membership_based_discount_isValid = ::OpenAPI::fromJsonValue(m_membership_based_discount, json[QString("membershipBasedDiscount")]);
    m_membership_based_discount_isSet = !json[QString("membershipBasedDiscount")].isNull() && m_membership_based_discount_isValid;

    m_order_comments_isValid = ::OpenAPI::fromJsonValue(m_order_comments, json[QString("orderComments")]);
    m_order_comments_isSet = !json[QString("orderComments")].isNull() && m_order_comments_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_module_isValid = ::OpenAPI::fromJsonValue(m_payment_module, json[QString("paymentModule")]);
    m_payment_module_isSet = !json[QString("paymentModule")].isNull() && m_payment_module_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("paymentStatus")]);
    m_payment_status_isSet = !json[QString("paymentStatus")].isNull() && m_payment_status_isValid;

    m_private_admin_notes_isValid = ::OpenAPI::fromJsonValue(m_private_admin_notes, json[QString("privateAdminNotes")]);
    m_private_admin_notes_isSet = !json[QString("privateAdminNotes")].isNull() && m_private_admin_notes_isValid;

    m_referer_url_isValid = ::OpenAPI::fromJsonValue(m_referer_url, json[QString("refererUrl")]);
    m_referer_url_isSet = !json[QString("refererUrl")].isNull() && m_referer_url_isValid;

    m_refunded_amount_isValid = ::OpenAPI::fromJsonValue(m_refunded_amount, json[QString("refundedAmount")]);
    m_refunded_amount_isSet = !json[QString("refundedAmount")].isNull() && m_refunded_amount_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_reversed_tax_applied_isValid = ::OpenAPI::fromJsonValue(m_reversed_tax_applied, json[QString("reversedTaxApplied")]);
    m_reversed_tax_applied_isSet = !json[QString("reversedTaxApplied")].isNull() && m_reversed_tax_applied_isValid;

    m_sample_isValid = ::OpenAPI::fromJsonValue(m_sample, json[QString("sample")]);
    m_sample_isSet = !json[QString("sample")].isNull() && m_sample_isValid;

    m_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_shipping_method, json[QString("shippingMethod")]);
    m_shipping_method_isSet = !json[QString("shippingMethod")].isNull() && m_shipping_method_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("shippingOption")]);
    m_shipping_option_isSet = !json[QString("shippingOption")].isNull() && m_shipping_option_isValid;

    m_shipping_person_isValid = ::OpenAPI::fromJsonValue(m_shipping_person, json[QString("shippingPerson")]);
    m_shipping_person_isSet = !json[QString("shippingPerson")].isNull() && m_shipping_person_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_taxes_on_shipping_isValid = ::OpenAPI::fromJsonValue(m_taxes_on_shipping, json[QString("taxesOnShipping")]);
    m_taxes_on_shipping_isSet = !json[QString("taxesOnShipping")].isNull() && m_taxes_on_shipping_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_and_membership_based_discount_isValid = ::OpenAPI::fromJsonValue(m_total_and_membership_based_discount, json[QString("totalAndMembershipBasedDiscount")]);
    m_total_and_membership_based_discount_isSet = !json[QString("totalAndMembershipBasedDiscount")].isNull() && m_total_and_membership_based_discount_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("trackingNumber")]);
    m_tracking_number_isSet = !json[QString("trackingNumber")].isNull() && m_tracking_number_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("updateDate")]);
    m_update_date_isSet = !json[QString("updateDate")].isNull() && m_update_date_isValid;

    m_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_update_timestamp, json[QString("updateTimestamp")]);
    m_update_timestamp_isSet = !json[QString("updateTimestamp")].isNull() && m_update_timestamp_isValid;

    m_usd_total_isValid = ::OpenAPI::fromJsonValue(m_usd_total, json[QString("usdTotal")]);
    m_usd_total_isSet = !json[QString("usdTotal")].isNull() && m_usd_total_isValid;

    m_vendor_number_isValid = ::OpenAPI::fromJsonValue(m_vendor_number, json[QString("vendorNumber")]);
    m_vendor_number_isSet = !json[QString("vendorNumber")].isNull() && m_vendor_number_isValid;

    m_vendor_order_number_isValid = ::OpenAPI::fromJsonValue(m_vendor_order_number, json[QString("vendorOrderNumber")]);
    m_vendor_order_number_isSet = !json[QString("vendorOrderNumber")].isNull() && m_vendor_order_number_isValid;

    m_volume_discount_isValid = ::OpenAPI::fromJsonValue(m_volume_discount, json[QString("volumeDiscount")]);
    m_volume_discount_isSet = !json[QString("volumeDiscount")].isNull() && m_volume_discount_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.isSet()) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_billing_person.isSet()) {
        obj.insert(QString("billingPerson"), ::OpenAPI::toJsonValue(m_billing_person));
    }
    if (m_coupon_discount_isSet) {
        obj.insert(QString("couponDiscount"), ::OpenAPI::toJsonValue(m_coupon_discount));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_create_timestamp_isSet) {
        obj.insert(QString("createTimestamp"), ::OpenAPI::toJsonValue(m_create_timestamp));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_tax_exempt_isSet) {
        obj.insert(QString("customerTaxExempt"), ::OpenAPI::toJsonValue(m_customer_tax_exempt));
    }
    if (m_customer_tax_id_isSet) {
        obj.insert(QString("customerTaxId"), ::OpenAPI::toJsonValue(m_customer_tax_id));
    }
    if (m_customer_tax_id_valid_isSet) {
        obj.insert(QString("customerTaxIdValid"), ::OpenAPI::toJsonValue(m_customer_tax_id_valid));
    }
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fulfillment_status_isSet) {
        obj.insert(QString("fulfillmentStatus"), ::OpenAPI::toJsonValue(m_fulfillment_status));
    }
    if (m_global_referer_isSet) {
        obj.insert(QString("globalReferer"), ::OpenAPI::toJsonValue(m_global_referer));
    }
    if (m_handling_fee.isSet()) {
        obj.insert(QString("handlingFee"), ::OpenAPI::toJsonValue(m_handling_fee));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_last_change_date_isSet) {
        obj.insert(QString("lastChangeDate"), ::OpenAPI::toJsonValue(m_last_change_date));
    }
    if (m_membership_based_discount_isSet) {
        obj.insert(QString("membershipBasedDiscount"), ::OpenAPI::toJsonValue(m_membership_based_discount));
    }
    if (m_order_comments_isSet) {
        obj.insert(QString("orderComments"), ::OpenAPI::toJsonValue(m_order_comments));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_module_isSet) {
        obj.insert(QString("paymentModule"), ::OpenAPI::toJsonValue(m_payment_module));
    }
    if (m_payment_status_isSet) {
        obj.insert(QString("paymentStatus"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    if (m_private_admin_notes_isSet) {
        obj.insert(QString("privateAdminNotes"), ::OpenAPI::toJsonValue(m_private_admin_notes));
    }
    if (m_referer_url_isSet) {
        obj.insert(QString("refererUrl"), ::OpenAPI::toJsonValue(m_referer_url));
    }
    if (m_refunded_amount_isSet) {
        obj.insert(QString("refundedAmount"), ::OpenAPI::toJsonValue(m_refunded_amount));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_reversed_tax_applied_isSet) {
        obj.insert(QString("reversedTaxApplied"), ::OpenAPI::toJsonValue(m_reversed_tax_applied));
    }
    if (m_sample_isSet) {
        obj.insert(QString("sample"), ::OpenAPI::toJsonValue(m_sample));
    }
    if (m_shipping_method_isSet) {
        obj.insert(QString("shippingMethod"), ::OpenAPI::toJsonValue(m_shipping_method));
    }
    if (m_shipping_option.isSet()) {
        obj.insert(QString("shippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_shipping_person.isSet()) {
        obj.insert(QString("shippingPerson"), ::OpenAPI::toJsonValue(m_shipping_person));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_taxes_on_shipping.size() > 0) {
        obj.insert(QString("taxesOnShipping"), ::OpenAPI::toJsonValue(m_taxes_on_shipping));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_and_membership_based_discount_isSet) {
        obj.insert(QString("totalAndMembershipBasedDiscount"), ::OpenAPI::toJsonValue(m_total_and_membership_based_discount));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("trackingNumber"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("updateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_update_timestamp_isSet) {
        obj.insert(QString("updateTimestamp"), ::OpenAPI::toJsonValue(m_update_timestamp));
    }
    if (m_usd_total_isSet) {
        obj.insert(QString("usdTotal"), ::OpenAPI::toJsonValue(m_usd_total));
    }
    if (m_vendor_number_isSet) {
        obj.insert(QString("vendorNumber"), ::OpenAPI::toJsonValue(m_vendor_number));
    }
    if (m_vendor_order_number_isSet) {
        obj.insert(QString("vendorOrderNumber"), ::OpenAPI::toJsonValue(m_vendor_order_number));
    }
    if (m_volume_discount_isSet) {
        obj.insert(QString("volumeDiscount"), ::OpenAPI::toJsonValue(m_volume_discount));
    }
    return obj;
}

OAIAdditionalInfo OAIOrder::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIOrder::setAdditionalInfo(const OAIAdditionalInfo &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIOrder::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIOrder::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

OAIPerson OAIOrder::getBillingPerson() const {
    return m_billing_person;
}
void OAIOrder::setBillingPerson(const OAIPerson &billing_person) {
    m_billing_person = billing_person;
    m_billing_person_isSet = true;
}

bool OAIOrder::is_billing_person_Set() const{
    return m_billing_person_isSet;
}

bool OAIOrder::is_billing_person_Valid() const{
    return m_billing_person_isValid;
}

double OAIOrder::getCouponDiscount() const {
    return m_coupon_discount;
}
void OAIOrder::setCouponDiscount(const double &coupon_discount) {
    m_coupon_discount = coupon_discount;
    m_coupon_discount_isSet = true;
}

bool OAIOrder::is_coupon_discount_Set() const{
    return m_coupon_discount_isSet;
}

bool OAIOrder::is_coupon_discount_Valid() const{
    return m_coupon_discount_isValid;
}

QString OAIOrder::getCreateDate() const {
    return m_create_date;
}
void OAIOrder::setCreateDate(const QString &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIOrder::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIOrder::is_create_date_Valid() const{
    return m_create_date_isValid;
}

double OAIOrder::getCreateTimestamp() const {
    return m_create_timestamp;
}
void OAIOrder::setCreateTimestamp(const double &create_timestamp) {
    m_create_timestamp = create_timestamp;
    m_create_timestamp_isSet = true;
}

bool OAIOrder::is_create_timestamp_Set() const{
    return m_create_timestamp_isSet;
}

bool OAIOrder::is_create_timestamp_Valid() const{
    return m_create_timestamp_isValid;
}

double OAIOrder::getCustomerId() const {
    return m_customer_id;
}
void OAIOrder::setCustomerId(const double &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIOrder::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIOrder::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

bool OAIOrder::isCustomerTaxExempt() const {
    return m_customer_tax_exempt;
}
void OAIOrder::setCustomerTaxExempt(const bool &customer_tax_exempt) {
    m_customer_tax_exempt = customer_tax_exempt;
    m_customer_tax_exempt_isSet = true;
}

bool OAIOrder::is_customer_tax_exempt_Set() const{
    return m_customer_tax_exempt_isSet;
}

bool OAIOrder::is_customer_tax_exempt_Valid() const{
    return m_customer_tax_exempt_isValid;
}

qint64 OAIOrder::getCustomerTaxId() const {
    return m_customer_tax_id;
}
void OAIOrder::setCustomerTaxId(const qint64 &customer_tax_id) {
    m_customer_tax_id = customer_tax_id;
    m_customer_tax_id_isSet = true;
}

bool OAIOrder::is_customer_tax_id_Set() const{
    return m_customer_tax_id_isSet;
}

bool OAIOrder::is_customer_tax_id_Valid() const{
    return m_customer_tax_id_isValid;
}

bool OAIOrder::isCustomerTaxIdValid() const {
    return m_customer_tax_id_valid;
}
void OAIOrder::setCustomerTaxIdValid(const bool &customer_tax_id_valid) {
    m_customer_tax_id_valid = customer_tax_id_valid;
    m_customer_tax_id_valid_isSet = true;
}

bool OAIOrder::is_customer_tax_id_valid_Set() const{
    return m_customer_tax_id_valid_isSet;
}

bool OAIOrder::is_customer_tax_id_valid_Valid() const{
    return m_customer_tax_id_valid_isValid;
}

double OAIOrder::getDiscount() const {
    return m_discount;
}
void OAIOrder::setDiscount(const double &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIOrder::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIOrder::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIOrder::getEmail() const {
    return m_email;
}
void OAIOrder::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrder::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrder::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOrder::getFulfillmentStatus() const {
    return m_fulfillment_status;
}
void OAIOrder::setFulfillmentStatus(const QString &fulfillment_status) {
    m_fulfillment_status = fulfillment_status;
    m_fulfillment_status_isSet = true;
}

bool OAIOrder::is_fulfillment_status_Set() const{
    return m_fulfillment_status_isSet;
}

bool OAIOrder::is_fulfillment_status_Valid() const{
    return m_fulfillment_status_isValid;
}

QString OAIOrder::getGlobalReferer() const {
    return m_global_referer;
}
void OAIOrder::setGlobalReferer(const QString &global_referer) {
    m_global_referer = global_referer;
    m_global_referer_isSet = true;
}

bool OAIOrder::is_global_referer_Set() const{
    return m_global_referer_isSet;
}

bool OAIOrder::is_global_referer_Valid() const{
    return m_global_referer_isValid;
}

OAIHandlingFee OAIOrder::getHandlingFee() const {
    return m_handling_fee;
}
void OAIOrder::setHandlingFee(const OAIHandlingFee &handling_fee) {
    m_handling_fee = handling_fee;
    m_handling_fee_isSet = true;
}

bool OAIOrder::is_handling_fee_Set() const{
    return m_handling_fee_isSet;
}

bool OAIOrder::is_handling_fee_Valid() const{
    return m_handling_fee_isValid;
}

bool OAIOrder::isHidden() const {
    return m_hidden;
}
void OAIOrder::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIOrder::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIOrder::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIOrder::getIpAddress() const {
    return m_ip_address;
}
void OAIOrder::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIOrder::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIOrder::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QList<OAIItem> OAIOrder::getItems() const {
    return m_items;
}
void OAIOrder::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrder::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrder::is_items_Valid() const{
    return m_items_isValid;
}

QDateTime OAIOrder::getLastChangeDate() const {
    return m_last_change_date;
}
void OAIOrder::setLastChangeDate(const QDateTime &last_change_date) {
    m_last_change_date = last_change_date;
    m_last_change_date_isSet = true;
}

bool OAIOrder::is_last_change_date_Set() const{
    return m_last_change_date_isSet;
}

bool OAIOrder::is_last_change_date_Valid() const{
    return m_last_change_date_isValid;
}

double OAIOrder::getMembershipBasedDiscount() const {
    return m_membership_based_discount;
}
void OAIOrder::setMembershipBasedDiscount(const double &membership_based_discount) {
    m_membership_based_discount = membership_based_discount;
    m_membership_based_discount_isSet = true;
}

bool OAIOrder::is_membership_based_discount_Set() const{
    return m_membership_based_discount_isSet;
}

bool OAIOrder::is_membership_based_discount_Valid() const{
    return m_membership_based_discount_isValid;
}

QString OAIOrder::getOrderComments() const {
    return m_order_comments;
}
void OAIOrder::setOrderComments(const QString &order_comments) {
    m_order_comments = order_comments;
    m_order_comments_isSet = true;
}

bool OAIOrder::is_order_comments_Set() const{
    return m_order_comments_isSet;
}

bool OAIOrder::is_order_comments_Valid() const{
    return m_order_comments_isValid;
}

qint64 OAIOrder::getOrderNumber() const {
    return m_order_number;
}
void OAIOrder::setOrderNumber(const qint64 &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIOrder::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIOrder::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIOrder::getPaymentMethod() const {
    return m_payment_method;
}
void OAIOrder::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIOrder::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIOrder::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIOrder::getPaymentModule() const {
    return m_payment_module;
}
void OAIOrder::setPaymentModule(const QString &payment_module) {
    m_payment_module = payment_module;
    m_payment_module_isSet = true;
}

bool OAIOrder::is_payment_module_Set() const{
    return m_payment_module_isSet;
}

bool OAIOrder::is_payment_module_Valid() const{
    return m_payment_module_isValid;
}

QString OAIOrder::getPaymentStatus() const {
    return m_payment_status;
}
void OAIOrder::setPaymentStatus(const QString &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIOrder::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIOrder::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

QString OAIOrder::getPrivateAdminNotes() const {
    return m_private_admin_notes;
}
void OAIOrder::setPrivateAdminNotes(const QString &private_admin_notes) {
    m_private_admin_notes = private_admin_notes;
    m_private_admin_notes_isSet = true;
}

bool OAIOrder::is_private_admin_notes_Set() const{
    return m_private_admin_notes_isSet;
}

bool OAIOrder::is_private_admin_notes_Valid() const{
    return m_private_admin_notes_isValid;
}

QString OAIOrder::getRefererUrl() const {
    return m_referer_url;
}
void OAIOrder::setRefererUrl(const QString &referer_url) {
    m_referer_url = referer_url;
    m_referer_url_isSet = true;
}

bool OAIOrder::is_referer_url_Set() const{
    return m_referer_url_isSet;
}

bool OAIOrder::is_referer_url_Valid() const{
    return m_referer_url_isValid;
}

double OAIOrder::getRefundedAmount() const {
    return m_refunded_amount;
}
void OAIOrder::setRefundedAmount(const double &refunded_amount) {
    m_refunded_amount = refunded_amount;
    m_refunded_amount_isSet = true;
}

bool OAIOrder::is_refunded_amount_Set() const{
    return m_refunded_amount_isSet;
}

bool OAIOrder::is_refunded_amount_Valid() const{
    return m_refunded_amount_isValid;
}

QList<OAIRefunds> OAIOrder::getRefunds() const {
    return m_refunds;
}
void OAIOrder::setRefunds(const QList<OAIRefunds> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIOrder::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIOrder::is_refunds_Valid() const{
    return m_refunds_isValid;
}

bool OAIOrder::isReversedTaxApplied() const {
    return m_reversed_tax_applied;
}
void OAIOrder::setReversedTaxApplied(const bool &reversed_tax_applied) {
    m_reversed_tax_applied = reversed_tax_applied;
    m_reversed_tax_applied_isSet = true;
}

bool OAIOrder::is_reversed_tax_applied_Set() const{
    return m_reversed_tax_applied_isSet;
}

bool OAIOrder::is_reversed_tax_applied_Valid() const{
    return m_reversed_tax_applied_isValid;
}

bool OAIOrder::isSample() const {
    return m_sample;
}
void OAIOrder::setSample(const bool &sample) {
    m_sample = sample;
    m_sample_isSet = true;
}

bool OAIOrder::is_sample_Set() const{
    return m_sample_isSet;
}

bool OAIOrder::is_sample_Valid() const{
    return m_sample_isValid;
}

QString OAIOrder::getShippingMethod() const {
    return m_shipping_method;
}
void OAIOrder::setShippingMethod(const QString &shipping_method) {
    m_shipping_method = shipping_method;
    m_shipping_method_isSet = true;
}

bool OAIOrder::is_shipping_method_Set() const{
    return m_shipping_method_isSet;
}

bool OAIOrder::is_shipping_method_Valid() const{
    return m_shipping_method_isValid;
}

OAIShippingOption OAIOrder::getShippingOption() const {
    return m_shipping_option;
}
void OAIOrder::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAIOrder::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAIOrder::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

OAIPerson OAIOrder::getShippingPerson() const {
    return m_shipping_person;
}
void OAIOrder::setShippingPerson(const OAIPerson &shipping_person) {
    m_shipping_person = shipping_person;
    m_shipping_person_isSet = true;
}

bool OAIOrder::is_shipping_person_Set() const{
    return m_shipping_person_isSet;
}

bool OAIOrder::is_shipping_person_Valid() const{
    return m_shipping_person_isValid;
}

double OAIOrder::getSubtotal() const {
    return m_subtotal;
}
void OAIOrder::setSubtotal(const double &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAIOrder::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAIOrder::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

double OAIOrder::getTax() const {
    return m_tax;
}
void OAIOrder::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIOrder::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIOrder::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<OAITax> OAIOrder::getTaxesOnShipping() const {
    return m_taxes_on_shipping;
}
void OAIOrder::setTaxesOnShipping(const QList<OAITax> &taxes_on_shipping) {
    m_taxes_on_shipping = taxes_on_shipping;
    m_taxes_on_shipping_isSet = true;
}

bool OAIOrder::is_taxes_on_shipping_Set() const{
    return m_taxes_on_shipping_isSet;
}

bool OAIOrder::is_taxes_on_shipping_Valid() const{
    return m_taxes_on_shipping_isValid;
}

double OAIOrder::getTotal() const {
    return m_total;
}
void OAIOrder::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOrder::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrder::is_total_Valid() const{
    return m_total_isValid;
}

double OAIOrder::getTotalAndMembershipBasedDiscount() const {
    return m_total_and_membership_based_discount;
}
void OAIOrder::setTotalAndMembershipBasedDiscount(const double &total_and_membership_based_discount) {
    m_total_and_membership_based_discount = total_and_membership_based_discount;
    m_total_and_membership_based_discount_isSet = true;
}

bool OAIOrder::is_total_and_membership_based_discount_Set() const{
    return m_total_and_membership_based_discount_isSet;
}

bool OAIOrder::is_total_and_membership_based_discount_Valid() const{
    return m_total_and_membership_based_discount_isValid;
}

QString OAIOrder::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIOrder::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIOrder::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIOrder::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

QString OAIOrder::getUpdateDate() const {
    return m_update_date;
}
void OAIOrder::setUpdateDate(const QString &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIOrder::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIOrder::is_update_date_Valid() const{
    return m_update_date_isValid;
}

double OAIOrder::getUpdateTimestamp() const {
    return m_update_timestamp;
}
void OAIOrder::setUpdateTimestamp(const double &update_timestamp) {
    m_update_timestamp = update_timestamp;
    m_update_timestamp_isSet = true;
}

bool OAIOrder::is_update_timestamp_Set() const{
    return m_update_timestamp_isSet;
}

bool OAIOrder::is_update_timestamp_Valid() const{
    return m_update_timestamp_isValid;
}

double OAIOrder::getUsdTotal() const {
    return m_usd_total;
}
void OAIOrder::setUsdTotal(const double &usd_total) {
    m_usd_total = usd_total;
    m_usd_total_isSet = true;
}

bool OAIOrder::is_usd_total_Set() const{
    return m_usd_total_isSet;
}

bool OAIOrder::is_usd_total_Valid() const{
    return m_usd_total_isValid;
}

double OAIOrder::getVendorNumber() const {
    return m_vendor_number;
}
void OAIOrder::setVendorNumber(const double &vendor_number) {
    m_vendor_number = vendor_number;
    m_vendor_number_isSet = true;
}

bool OAIOrder::is_vendor_number_Set() const{
    return m_vendor_number_isSet;
}

bool OAIOrder::is_vendor_number_Valid() const{
    return m_vendor_number_isValid;
}

QString OAIOrder::getVendorOrderNumber() const {
    return m_vendor_order_number;
}
void OAIOrder::setVendorOrderNumber(const QString &vendor_order_number) {
    m_vendor_order_number = vendor_order_number;
    m_vendor_order_number_isSet = true;
}

bool OAIOrder::is_vendor_order_number_Set() const{
    return m_vendor_order_number_isSet;
}

bool OAIOrder::is_vendor_order_number_Valid() const{
    return m_vendor_order_number_isValid;
}

double OAIOrder::getVolumeDiscount() const {
    return m_volume_discount;
}
void OAIOrder::setVolumeDiscount(const double &volume_discount) {
    m_volume_discount = volume_discount;
    m_volume_discount_isSet = true;
}

bool OAIOrder::is_volume_discount_Set() const{
    return m_volume_discount_isSet;
}

bool OAIOrder::is_volume_discount_Valid() const{
    return m_volume_discount_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tax_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tax_id_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_referer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handling_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_based_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_admin_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reversed_tax_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_on_shipping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_and_membership_based_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usd_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_discount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
