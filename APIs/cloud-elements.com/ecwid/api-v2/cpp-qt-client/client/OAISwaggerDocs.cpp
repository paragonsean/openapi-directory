/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerDocs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerDocs::OAISwaggerDocs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerDocs::OAISwaggerDocs() {
    this->initializeModel();
}

OAISwaggerDocs::~OAISwaggerDocs() {}

void OAISwaggerDocs::initializeModel() {

    m_base_path_isSet = false;
    m_base_path_isValid = false;

    m_definitions_isSet = false;
    m_definitions_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_schemes_isSet = false;
    m_schemes_isValid = false;

    m_swagger_isSet = false;
    m_swagger_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISwaggerDocs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerDocs::fromJsonObject(QJsonObject json) {

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("basePath")]);
    m_base_path_isSet = !json[QString("basePath")].isNull() && m_base_path_isValid;

    m_definitions_isValid = ::OpenAPI::fromJsonValue(m_definitions, json[QString("definitions")]);
    m_definitions_isSet = !json[QString("definitions")].isNull() && m_definitions_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;

    m_schemes_isValid = ::OpenAPI::fromJsonValue(m_schemes, json[QString("schemes")]);
    m_schemes_isSet = !json[QString("schemes")].isNull() && m_schemes_isValid;

    m_swagger_isValid = ::OpenAPI::fromJsonValue(m_swagger, json[QString("swagger")]);
    m_swagger_isSet = !json[QString("swagger")].isNull() && m_swagger_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISwaggerDocs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerDocs::asJsonObject() const {
    QJsonObject obj;
    if (m_base_path_isSet) {
        obj.insert(QString("basePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    if (m_definitions.isSet()) {
        obj.insert(QString("definitions"), ::OpenAPI::toJsonValue(m_definitions));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_paths.isSet()) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_schemes.size() > 0) {
        obj.insert(QString("schemes"), ::OpenAPI::toJsonValue(m_schemes));
    }
    if (m_swagger_isSet) {
        obj.insert(QString("swagger"), ::OpenAPI::toJsonValue(m_swagger));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAISwaggerDocs::getBasePath() const {
    return m_base_path;
}
void OAISwaggerDocs::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAISwaggerDocs::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAISwaggerDocs::is_base_path_Valid() const{
    return m_base_path_isValid;
}

OAISwaggerdefinitions OAISwaggerDocs::getDefinitions() const {
    return m_definitions;
}
void OAISwaggerDocs::setDefinitions(const OAISwaggerdefinitions &definitions) {
    m_definitions = definitions;
    m_definitions_isSet = true;
}

bool OAISwaggerDocs::is_definitions_Set() const{
    return m_definitions_isSet;
}

bool OAISwaggerDocs::is_definitions_Valid() const{
    return m_definitions_isValid;
}

QString OAISwaggerDocs::getHost() const {
    return m_host;
}
void OAISwaggerDocs::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISwaggerDocs::is_host_Set() const{
    return m_host_isSet;
}

bool OAISwaggerDocs::is_host_Valid() const{
    return m_host_isValid;
}

OAISwaggerinfo OAISwaggerDocs::getInfo() const {
    return m_info;
}
void OAISwaggerDocs::setInfo(const OAISwaggerinfo &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAISwaggerDocs::is_info_Set() const{
    return m_info_isSet;
}

bool OAISwaggerDocs::is_info_Valid() const{
    return m_info_isValid;
}

OAISwaggerpaths OAISwaggerDocs::getPaths() const {
    return m_paths;
}
void OAISwaggerDocs::setPaths(const OAISwaggerpaths &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAISwaggerDocs::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAISwaggerDocs::is_paths_Valid() const{
    return m_paths_isValid;
}

QList<QString> OAISwaggerDocs::getSchemes() const {
    return m_schemes;
}
void OAISwaggerDocs::setSchemes(const QList<QString> &schemes) {
    m_schemes = schemes;
    m_schemes_isSet = true;
}

bool OAISwaggerDocs::is_schemes_Set() const{
    return m_schemes_isSet;
}

bool OAISwaggerDocs::is_schemes_Valid() const{
    return m_schemes_isValid;
}

QString OAISwaggerDocs::getSwagger() const {
    return m_swagger;
}
void OAISwaggerDocs::setSwagger(const QString &swagger) {
    m_swagger = swagger;
    m_swagger_isSet = true;
}

bool OAISwaggerDocs::is_swagger_Set() const{
    return m_swagger_isSet;
}

bool OAISwaggerDocs::is_swagger_Valid() const{
    return m_swagger_isValid;
}

QList<OAISwaggertags> OAISwaggerDocs::getTags() const {
    return m_tags;
}
void OAISwaggerDocs::setTags(const QList<OAISwaggertags> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISwaggerDocs::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISwaggerDocs::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISwaggerDocs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_swagger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerDocs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
