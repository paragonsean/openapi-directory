/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIObjectNameApi_H
#define OAI_OAIObjectNameApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIObjectNameApi : public QObject {
    Q_OBJECT

public:
    OAIObjectNameApi(const int timeOut = 0);
    ~OAIObjectNameApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void createByObjectName(const QString &authorization, const QString &object_name, const OAIObject &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  child_object_name QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void createObjectNameByChildObjectName(const QString &authorization, const QString &object_name, const QString &object_id, const QString &child_object_name, const OAIObject &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  child_object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  child_object_id QString [required]
    */
    virtual void deleteObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  object_id QString [required]
    */
    virtual void deleteObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getByObjectName(const QString &authorization, const QString &object_name, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  child_object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  child_object_id QString [required]
    */
    virtual void getObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  child_object_name QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getObjectNameByChildObjectName(const QString &authorization, const QString &object_name, const QString &object_id, const QString &child_object_name, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  object_id QString [required]
    */
    virtual void getObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  child_object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  child_object_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void replaceObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id, const OAIObject &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void replaceObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id, const OAIObject &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  child_object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  child_object_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void updateObjectNameByChildObjectId(const QString &authorization, const QString &object_name, const QString &child_object_name, const QString &object_id, const QString &child_object_id, const OAIObject &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  object_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void updateObjectNameByObjectId(const QString &authorization, const QString &object_name, const QString &object_id, const OAIObject &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createByObjectNameCallback(OAIHttpRequestWorker *worker);
    void createObjectNameByChildObjectNameCallback(OAIHttpRequestWorker *worker);
    void deleteObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker);
    void deleteObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker);
    void getByObjectNameCallback(OAIHttpRequestWorker *worker);
    void getObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker);
    void getObjectNameByChildObjectNameCallback(OAIHttpRequestWorker *worker);
    void getObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker);
    void replaceObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker);
    void replaceObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker);
    void updateObjectNameByChildObjectIdCallback(OAIHttpRequestWorker *worker);
    void updateObjectNameByObjectIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createByObjectNameSignal();
    void createObjectNameByChildObjectNameSignal();
    void deleteObjectNameByChildObjectIdSignal();
    void deleteObjectNameByObjectIdSignal();
    void getByObjectNameSignal(QList<OAIObject> summary);
    void getObjectNameByChildObjectIdSignal(OAIObject summary);
    void getObjectNameByChildObjectNameSignal(QList<OAIObject> summary);
    void getObjectNameByObjectIdSignal(OAIObject summary);
    void replaceObjectNameByChildObjectIdSignal(OAIObject summary);
    void replaceObjectNameByObjectIdSignal(OAIObject summary);
    void updateObjectNameByChildObjectIdSignal(OAIObject summary);
    void updateObjectNameByObjectIdSignal(OAIObject summary);


    void createByObjectNameSignalFull(OAIHttpRequestWorker *worker);
    void createObjectNameByChildObjectNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteObjectNameByChildObjectIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteObjectNameByObjectIdSignalFull(OAIHttpRequestWorker *worker);
    void getByObjectNameSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getObjectNameByChildObjectIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getObjectNameByChildObjectNameSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getObjectNameByObjectIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void replaceObjectNameByChildObjectIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void replaceObjectNameByObjectIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateObjectNameByChildObjectIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateObjectNameByObjectIdSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createByObjectNameSignalError() instead")
    void createByObjectNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createByObjectNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createObjectNameByChildObjectNameSignalError() instead")
    void createObjectNameByChildObjectNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createObjectNameByChildObjectNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteObjectNameByChildObjectIdSignalError() instead")
    void deleteObjectNameByChildObjectIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteObjectNameByChildObjectIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteObjectNameByObjectIdSignalError() instead")
    void deleteObjectNameByObjectIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteObjectNameByObjectIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByObjectNameSignalError() instead")
    void getByObjectNameSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getByObjectNameSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectNameByChildObjectIdSignalError() instead")
    void getObjectNameByChildObjectIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectNameByChildObjectIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectNameByChildObjectNameSignalError() instead")
    void getObjectNameByChildObjectNameSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectNameByChildObjectNameSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectNameByObjectIdSignalError() instead")
    void getObjectNameByObjectIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectNameByObjectIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceObjectNameByChildObjectIdSignalError() instead")
    void replaceObjectNameByChildObjectIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceObjectNameByChildObjectIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceObjectNameByObjectIdSignalError() instead")
    void replaceObjectNameByObjectIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceObjectNameByObjectIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateObjectNameByChildObjectIdSignalError() instead")
    void updateObjectNameByChildObjectIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateObjectNameByChildObjectIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateObjectNameByObjectIdSignalError() instead")
    void updateObjectNameByObjectIdSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateObjectNameByObjectIdSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createByObjectNameSignalErrorFull() instead")
    void createByObjectNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createByObjectNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createObjectNameByChildObjectNameSignalErrorFull() instead")
    void createObjectNameByChildObjectNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createObjectNameByChildObjectNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteObjectNameByChildObjectIdSignalErrorFull() instead")
    void deleteObjectNameByChildObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteObjectNameByChildObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteObjectNameByObjectIdSignalErrorFull() instead")
    void deleteObjectNameByObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteObjectNameByObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByObjectNameSignalErrorFull() instead")
    void getByObjectNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByObjectNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectNameByChildObjectIdSignalErrorFull() instead")
    void getObjectNameByChildObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectNameByChildObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectNameByChildObjectNameSignalErrorFull() instead")
    void getObjectNameByChildObjectNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectNameByChildObjectNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getObjectNameByObjectIdSignalErrorFull() instead")
    void getObjectNameByObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getObjectNameByObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceObjectNameByChildObjectIdSignalErrorFull() instead")
    void replaceObjectNameByChildObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceObjectNameByChildObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceObjectNameByObjectIdSignalErrorFull() instead")
    void replaceObjectNameByObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceObjectNameByObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateObjectNameByChildObjectIdSignalErrorFull() instead")
    void updateObjectNameByChildObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateObjectNameByChildObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateObjectNameByObjectIdSignalErrorFull() instead")
    void updateObjectNameByObjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateObjectNameByObjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
