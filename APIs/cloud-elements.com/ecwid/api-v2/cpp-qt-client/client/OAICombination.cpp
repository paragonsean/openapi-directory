/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICombination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICombination::OAICombination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICombination::OAICombination() {
    this->initializeModel();
}

OAICombination::~OAICombination() {}

void OAICombination::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_combination_number_isSet = false;
    m_combination_number_isValid = false;

    m_compare_to_price_isSet = false;
    m_compare_to_price_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_unlimited_isSet = false;
    m_unlimited_isValid = false;

    m_warning_limit_isSet = false;
    m_warning_limit_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAICombination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICombination::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_combination_number_isValid = ::OpenAPI::fromJsonValue(m_combination_number, json[QString("combinationNumber")]);
    m_combination_number_isSet = !json[QString("combinationNumber")].isNull() && m_combination_number_isValid;

    m_compare_to_price_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price, json[QString("compareToPrice")]);
    m_compare_to_price_isSet = !json[QString("compareToPrice")].isNull() && m_compare_to_price_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_unlimited_isValid = ::OpenAPI::fromJsonValue(m_unlimited, json[QString("unlimited")]);
    m_unlimited_isSet = !json[QString("unlimited")].isNull() && m_unlimited_isValid;

    m_warning_limit_isValid = ::OpenAPI::fromJsonValue(m_warning_limit, json[QString("warningLimit")]);
    m_warning_limit_isSet = !json[QString("warningLimit")].isNull() && m_warning_limit_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAICombination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICombination::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_combination_number_isSet) {
        obj.insert(QString("combinationNumber"), ::OpenAPI::toJsonValue(m_combination_number));
    }
    if (m_compare_to_price_isSet) {
        obj.insert(QString("compareToPrice"), ::OpenAPI::toJsonValue(m_compare_to_price));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_unlimited_isSet) {
        obj.insert(QString("unlimited"), ::OpenAPI::toJsonValue(m_unlimited));
    }
    if (m_warning_limit_isSet) {
        obj.insert(QString("warningLimit"), ::OpenAPI::toJsonValue(m_warning_limit));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QList<OAIAttribute> OAICombination::getAttributes() const {
    return m_attributes;
}
void OAICombination::setAttributes(const QList<OAIAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICombination::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICombination::is_attributes_Valid() const{
    return m_attributes_isValid;
}

double OAICombination::getCombinationNumber() const {
    return m_combination_number;
}
void OAICombination::setCombinationNumber(const double &combination_number) {
    m_combination_number = combination_number;
    m_combination_number_isSet = true;
}

bool OAICombination::is_combination_number_Set() const{
    return m_combination_number_isSet;
}

bool OAICombination::is_combination_number_Valid() const{
    return m_combination_number_isValid;
}

double OAICombination::getCompareToPrice() const {
    return m_compare_to_price;
}
void OAICombination::setCompareToPrice(const double &compare_to_price) {
    m_compare_to_price = compare_to_price;
    m_compare_to_price_isSet = true;
}

bool OAICombination::is_compare_to_price_Set() const{
    return m_compare_to_price_isSet;
}

bool OAICombination::is_compare_to_price_Valid() const{
    return m_compare_to_price_isValid;
}

double OAICombination::getId() const {
    return m_id;
}
void OAICombination::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICombination::is_id_Set() const{
    return m_id_isSet;
}

bool OAICombination::is_id_Valid() const{
    return m_id_isValid;
}

double OAICombination::getPrice() const {
    return m_price;
}
void OAICombination::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICombination::is_price_Set() const{
    return m_price_isSet;
}

bool OAICombination::is_price_Valid() const{
    return m_price_isValid;
}

double OAICombination::getQuantity() const {
    return m_quantity;
}
void OAICombination::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICombination::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICombination::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICombination::getSku() const {
    return m_sku;
}
void OAICombination::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICombination::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICombination::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAICombination::isUnlimited() const {
    return m_unlimited;
}
void OAICombination::setUnlimited(const bool &unlimited) {
    m_unlimited = unlimited;
    m_unlimited_isSet = true;
}

bool OAICombination::is_unlimited_Set() const{
    return m_unlimited_isSet;
}

bool OAICombination::is_unlimited_Valid() const{
    return m_unlimited_isValid;
}

double OAICombination::getWarningLimit() const {
    return m_warning_limit;
}
void OAICombination::setWarningLimit(const double &warning_limit) {
    m_warning_limit = warning_limit;
    m_warning_limit_isSet = true;
}

bool OAICombination::is_warning_limit_Set() const{
    return m_warning_limit_isSet;
}

bool OAICombination::is_warning_limit_Valid() const{
    return m_warning_limit_isValid;
}

double OAICombination::getWeight() const {
    return m_weight;
}
void OAICombination::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICombination::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICombination::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAICombination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_combination_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlimited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICombination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
