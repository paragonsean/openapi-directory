/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductPost::OAIProductPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductPost::OAIProductPost() {
    this->initializeModel();
}

OAIProductPost::~OAIProductPost() {}

void OAIProductPost::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_compare_at_price_isSet = false;
    m_compare_at_price_isValid = false;

    m_compare_to_price_isSet = false;
    m_compare_to_price_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_default_category_id_isSet = false;
    m_default_category_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_favorites_isSet = false;
    m_favorites_isValid = false;

    m_fixed_shipping_rate_isSet = false;
    m_fixed_shipping_rate_isValid = false;

    m_fixed_shipping_rate_only_isSet = false;
    m_fixed_shipping_rate_only_isValid = false;

    m_gallery_images_isSet = false;
    m_gallery_images_isValid = false;

    m_google_item_condition_isSet = false;
    m_google_item_condition_isValid = false;

    m_is_shipping_required_isSet = false;
    m_is_shipping_required_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_product_class_id_isSet = false;
    m_product_class_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_related_products_isSet = false;
    m_related_products_isValid = false;

    m_seo_description_isSet = false;
    m_seo_description_isValid = false;

    m_seo_title_isSet = false;
    m_seo_title_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_show_on_frontpage_isSet = false;
    m_show_on_frontpage_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_warning_limit_isSet = false;
    m_warning_limit_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_wholesale_prices_isSet = false;
    m_wholesale_prices_isValid = false;
}

void OAIProductPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductPost::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_compare_at_price_isValid = ::OpenAPI::fromJsonValue(m_compare_at_price, json[QString("compareAtPrice")]);
    m_compare_at_price_isSet = !json[QString("compareAtPrice")].isNull() && m_compare_at_price_isValid;

    m_compare_to_price_isValid = ::OpenAPI::fromJsonValue(m_compare_to_price, json[QString("compareToPrice")]);
    m_compare_to_price_isSet = !json[QString("compareToPrice")].isNull() && m_compare_to_price_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_default_category_id_isValid = ::OpenAPI::fromJsonValue(m_default_category_id, json[QString("defaultCategoryId")]);
    m_default_category_id_isSet = !json[QString("defaultCategoryId")].isNull() && m_default_category_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_favorites_isValid = ::OpenAPI::fromJsonValue(m_favorites, json[QString("favorites")]);
    m_favorites_isSet = !json[QString("favorites")].isNull() && m_favorites_isValid;

    m_fixed_shipping_rate_isValid = ::OpenAPI::fromJsonValue(m_fixed_shipping_rate, json[QString("fixedShippingRate")]);
    m_fixed_shipping_rate_isSet = !json[QString("fixedShippingRate")].isNull() && m_fixed_shipping_rate_isValid;

    m_fixed_shipping_rate_only_isValid = ::OpenAPI::fromJsonValue(m_fixed_shipping_rate_only, json[QString("fixedShippingRateOnly")]);
    m_fixed_shipping_rate_only_isSet = !json[QString("fixedShippingRateOnly")].isNull() && m_fixed_shipping_rate_only_isValid;

    m_gallery_images_isValid = ::OpenAPI::fromJsonValue(m_gallery_images, json[QString("galleryImages")]);
    m_gallery_images_isSet = !json[QString("galleryImages")].isNull() && m_gallery_images_isValid;

    m_google_item_condition_isValid = ::OpenAPI::fromJsonValue(m_google_item_condition, json[QString("googleItemCondition")]);
    m_google_item_condition_isSet = !json[QString("googleItemCondition")].isNull() && m_google_item_condition_isValid;

    m_is_shipping_required_isValid = ::OpenAPI::fromJsonValue(m_is_shipping_required, json[QString("isShippingRequired")]);
    m_is_shipping_required_isSet = !json[QString("isShippingRequired")].isNull() && m_is_shipping_required_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_product_class_id_isValid = ::OpenAPI::fromJsonValue(m_product_class_id, json[QString("productClassId")]);
    m_product_class_id_isSet = !json[QString("productClassId")].isNull() && m_product_class_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_related_products_isValid = ::OpenAPI::fromJsonValue(m_related_products, json[QString("relatedProducts")]);
    m_related_products_isSet = !json[QString("relatedProducts")].isNull() && m_related_products_isValid;

    m_seo_description_isValid = ::OpenAPI::fromJsonValue(m_seo_description, json[QString("seoDescription")]);
    m_seo_description_isSet = !json[QString("seoDescription")].isNull() && m_seo_description_isValid;

    m_seo_title_isValid = ::OpenAPI::fromJsonValue(m_seo_title, json[QString("seoTitle")]);
    m_seo_title_isSet = !json[QString("seoTitle")].isNull() && m_seo_title_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_show_on_frontpage_isValid = ::OpenAPI::fromJsonValue(m_show_on_frontpage, json[QString("showOnFrontpage")]);
    m_show_on_frontpage_isSet = !json[QString("showOnFrontpage")].isNull() && m_show_on_frontpage_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_warning_limit_isValid = ::OpenAPI::fromJsonValue(m_warning_limit, json[QString("warningLimit")]);
    m_warning_limit_isSet = !json[QString("warningLimit")].isNull() && m_warning_limit_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_wholesale_prices_isValid = ::OpenAPI::fromJsonValue(m_wholesale_prices, json[QString("wholesalePrices")]);
    m_wholesale_prices_isSet = !json[QString("wholesalePrices")].isNull() && m_wholesale_prices_isValid;
}

QString OAIProductPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductPost::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_compare_at_price_isSet) {
        obj.insert(QString("compareAtPrice"), ::OpenAPI::toJsonValue(m_compare_at_price));
    }
    if (m_compare_to_price_isSet) {
        obj.insert(QString("compareToPrice"), ::OpenAPI::toJsonValue(m_compare_to_price));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_default_category_id_isSet) {
        obj.insert(QString("defaultCategoryId"), ::OpenAPI::toJsonValue(m_default_category_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_favorites.isSet()) {
        obj.insert(QString("favorites"), ::OpenAPI::toJsonValue(m_favorites));
    }
    if (m_fixed_shipping_rate_isSet) {
        obj.insert(QString("fixedShippingRate"), ::OpenAPI::toJsonValue(m_fixed_shipping_rate));
    }
    if (m_fixed_shipping_rate_only_isSet) {
        obj.insert(QString("fixedShippingRateOnly"), ::OpenAPI::toJsonValue(m_fixed_shipping_rate_only));
    }
    if (m_gallery_images.size() > 0) {
        obj.insert(QString("galleryImages"), ::OpenAPI::toJsonValue(m_gallery_images));
    }
    if (m_google_item_condition_isSet) {
        obj.insert(QString("googleItemCondition"), ::OpenAPI::toJsonValue(m_google_item_condition));
    }
    if (m_is_shipping_required_isSet) {
        obj.insert(QString("isShippingRequired"), ::OpenAPI::toJsonValue(m_is_shipping_required));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_product_class_id_isSet) {
        obj.insert(QString("productClassId"), ::OpenAPI::toJsonValue(m_product_class_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_related_products.isSet()) {
        obj.insert(QString("relatedProducts"), ::OpenAPI::toJsonValue(m_related_products));
    }
    if (m_seo_description_isSet) {
        obj.insert(QString("seoDescription"), ::OpenAPI::toJsonValue(m_seo_description));
    }
    if (m_seo_title_isSet) {
        obj.insert(QString("seoTitle"), ::OpenAPI::toJsonValue(m_seo_title));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_show_on_frontpage_isSet) {
        obj.insert(QString("showOnFrontpage"), ::OpenAPI::toJsonValue(m_show_on_frontpage));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_warning_limit_isSet) {
        obj.insert(QString("warningLimit"), ::OpenAPI::toJsonValue(m_warning_limit));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_wholesale_prices.isSet()) {
        obj.insert(QString("wholesalePrices"), ::OpenAPI::toJsonValue(m_wholesale_prices));
    }
    return obj;
}

QList<OAIAttribute> OAIProductPost::getAttributes() const {
    return m_attributes;
}
void OAIProductPost::setAttributes(const QList<OAIAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProductPost::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProductPost::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<qint64> OAIProductPost::getCategoryIds() const {
    return m_category_ids;
}
void OAIProductPost::setCategoryIds(const QList<qint64> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAIProductPost::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIProductPost::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

double OAIProductPost::getCompareAtPrice() const {
    return m_compare_at_price;
}
void OAIProductPost::setCompareAtPrice(const double &compare_at_price) {
    m_compare_at_price = compare_at_price;
    m_compare_at_price_isSet = true;
}

bool OAIProductPost::is_compare_at_price_Set() const{
    return m_compare_at_price_isSet;
}

bool OAIProductPost::is_compare_at_price_Valid() const{
    return m_compare_at_price_isValid;
}

double OAIProductPost::getCompareToPrice() const {
    return m_compare_to_price;
}
void OAIProductPost::setCompareToPrice(const double &compare_to_price) {
    m_compare_to_price = compare_to_price;
    m_compare_to_price_isSet = true;
}

bool OAIProductPost::is_compare_to_price_Set() const{
    return m_compare_to_price_isSet;
}

bool OAIProductPost::is_compare_to_price_Valid() const{
    return m_compare_to_price_isValid;
}

QDateTime OAIProductPost::getCreated() const {
    return m_created;
}
void OAIProductPost::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProductPost::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProductPost::is_created_Valid() const{
    return m_created_isValid;
}

qint64 OAIProductPost::getDefaultCategoryId() const {
    return m_default_category_id;
}
void OAIProductPost::setDefaultCategoryId(const qint64 &default_category_id) {
    m_default_category_id = default_category_id;
    m_default_category_id_isSet = true;
}

bool OAIProductPost::is_default_category_id_Set() const{
    return m_default_category_id_isSet;
}

bool OAIProductPost::is_default_category_id_Valid() const{
    return m_default_category_id_isValid;
}

QString OAIProductPost::getDescription() const {
    return m_description;
}
void OAIProductPost::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductPost::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductPost::is_description_Valid() const{
    return m_description_isValid;
}

OAIProductDimensions OAIProductPost::getDimensions() const {
    return m_dimensions;
}
void OAIProductPost::setDimensions(const OAIProductDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIProductPost::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIProductPost::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIProductPost::isEnabled() const {
    return m_enabled;
}
void OAIProductPost::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIProductPost::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIProductPost::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIFavorite OAIProductPost::getFavorites() const {
    return m_favorites;
}
void OAIProductPost::setFavorites(const OAIFavorite &favorites) {
    m_favorites = favorites;
    m_favorites_isSet = true;
}

bool OAIProductPost::is_favorites_Set() const{
    return m_favorites_isSet;
}

bool OAIProductPost::is_favorites_Valid() const{
    return m_favorites_isValid;
}

double OAIProductPost::getFixedShippingRate() const {
    return m_fixed_shipping_rate;
}
void OAIProductPost::setFixedShippingRate(const double &fixed_shipping_rate) {
    m_fixed_shipping_rate = fixed_shipping_rate;
    m_fixed_shipping_rate_isSet = true;
}

bool OAIProductPost::is_fixed_shipping_rate_Set() const{
    return m_fixed_shipping_rate_isSet;
}

bool OAIProductPost::is_fixed_shipping_rate_Valid() const{
    return m_fixed_shipping_rate_isValid;
}

bool OAIProductPost::isFixedShippingRateOnly() const {
    return m_fixed_shipping_rate_only;
}
void OAIProductPost::setFixedShippingRateOnly(const bool &fixed_shipping_rate_only) {
    m_fixed_shipping_rate_only = fixed_shipping_rate_only;
    m_fixed_shipping_rate_only_isSet = true;
}

bool OAIProductPost::is_fixed_shipping_rate_only_Set() const{
    return m_fixed_shipping_rate_only_isSet;
}

bool OAIProductPost::is_fixed_shipping_rate_only_Valid() const{
    return m_fixed_shipping_rate_only_isValid;
}

QList<OAIGalleryImage> OAIProductPost::getGalleryImages() const {
    return m_gallery_images;
}
void OAIProductPost::setGalleryImages(const QList<OAIGalleryImage> &gallery_images) {
    m_gallery_images = gallery_images;
    m_gallery_images_isSet = true;
}

bool OAIProductPost::is_gallery_images_Set() const{
    return m_gallery_images_isSet;
}

bool OAIProductPost::is_gallery_images_Valid() const{
    return m_gallery_images_isValid;
}

QString OAIProductPost::getGoogleItemCondition() const {
    return m_google_item_condition;
}
void OAIProductPost::setGoogleItemCondition(const QString &google_item_condition) {
    m_google_item_condition = google_item_condition;
    m_google_item_condition_isSet = true;
}

bool OAIProductPost::is_google_item_condition_Set() const{
    return m_google_item_condition_isSet;
}

bool OAIProductPost::is_google_item_condition_Valid() const{
    return m_google_item_condition_isValid;
}

bool OAIProductPost::isIsShippingRequired() const {
    return m_is_shipping_required;
}
void OAIProductPost::setIsShippingRequired(const bool &is_shipping_required) {
    m_is_shipping_required = is_shipping_required;
    m_is_shipping_required_isSet = true;
}

bool OAIProductPost::is_is_shipping_required_Set() const{
    return m_is_shipping_required_isSet;
}

bool OAIProductPost::is_is_shipping_required_Valid() const{
    return m_is_shipping_required_isValid;
}

QString OAIProductPost::getName() const {
    return m_name;
}
void OAIProductPost::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductPost::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductPost::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOption> OAIProductPost::getOptions() const {
    return m_options;
}
void OAIProductPost::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIProductPost::is_options_Set() const{
    return m_options_isSet;
}

bool OAIProductPost::is_options_Valid() const{
    return m_options_isValid;
}

double OAIProductPost::getPrice() const {
    return m_price;
}
void OAIProductPost::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProductPost::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProductPost::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAIProductPost::getProductClassId() const {
    return m_product_class_id;
}
void OAIProductPost::setProductClassId(const qint64 &product_class_id) {
    m_product_class_id = product_class_id;
    m_product_class_id_isSet = true;
}

bool OAIProductPost::is_product_class_id_Set() const{
    return m_product_class_id_isSet;
}

bool OAIProductPost::is_product_class_id_Valid() const{
    return m_product_class_id_isValid;
}

qint64 OAIProductPost::getQuantity() const {
    return m_quantity;
}
void OAIProductPost::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProductPost::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProductPost::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIRelatedProducts OAIProductPost::getRelatedProducts() const {
    return m_related_products;
}
void OAIProductPost::setRelatedProducts(const OAIRelatedProducts &related_products) {
    m_related_products = related_products;
    m_related_products_isSet = true;
}

bool OAIProductPost::is_related_products_Set() const{
    return m_related_products_isSet;
}

bool OAIProductPost::is_related_products_Valid() const{
    return m_related_products_isValid;
}

QString OAIProductPost::getSeoDescription() const {
    return m_seo_description;
}
void OAIProductPost::setSeoDescription(const QString &seo_description) {
    m_seo_description = seo_description;
    m_seo_description_isSet = true;
}

bool OAIProductPost::is_seo_description_Set() const{
    return m_seo_description_isSet;
}

bool OAIProductPost::is_seo_description_Valid() const{
    return m_seo_description_isValid;
}

QString OAIProductPost::getSeoTitle() const {
    return m_seo_title;
}
void OAIProductPost::setSeoTitle(const QString &seo_title) {
    m_seo_title = seo_title;
    m_seo_title_isSet = true;
}

bool OAIProductPost::is_seo_title_Set() const{
    return m_seo_title_isSet;
}

bool OAIProductPost::is_seo_title_Valid() const{
    return m_seo_title_isValid;
}

OAIShipping OAIProductPost::getShipping() const {
    return m_shipping;
}
void OAIProductPost::setShipping(const OAIShipping &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIProductPost::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIProductPost::is_shipping_Valid() const{
    return m_shipping_isValid;
}

double OAIProductPost::getShowOnFrontpage() const {
    return m_show_on_frontpage;
}
void OAIProductPost::setShowOnFrontpage(const double &show_on_frontpage) {
    m_show_on_frontpage = show_on_frontpage;
    m_show_on_frontpage_isSet = true;
}

bool OAIProductPost::is_show_on_frontpage_Set() const{
    return m_show_on_frontpage_isSet;
}

bool OAIProductPost::is_show_on_frontpage_Valid() const{
    return m_show_on_frontpage_isValid;
}

QString OAIProductPost::getSku() const {
    return m_sku;
}
void OAIProductPost::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIProductPost::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIProductPost::is_sku_Valid() const{
    return m_sku_isValid;
}

OAIProductTax OAIProductPost::getTax() const {
    return m_tax;
}
void OAIProductPost::setTax(const OAIProductTax &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIProductPost::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIProductPost::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<OAITax> OAIProductPost::getTaxes() const {
    return m_taxes;
}
void OAIProductPost::setTaxes(const QList<OAITax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIProductPost::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIProductPost::is_taxes_Valid() const{
    return m_taxes_isValid;
}

qint64 OAIProductPost::getWarningLimit() const {
    return m_warning_limit;
}
void OAIProductPost::setWarningLimit(const qint64 &warning_limit) {
    m_warning_limit = warning_limit;
    m_warning_limit_isSet = true;
}

bool OAIProductPost::is_warning_limit_Set() const{
    return m_warning_limit_isSet;
}

bool OAIProductPost::is_warning_limit_Valid() const{
    return m_warning_limit_isValid;
}

double OAIProductPost::getWeight() const {
    return m_weight;
}
void OAIProductPost::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIProductPost::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIProductPost::is_weight_Valid() const{
    return m_weight_isValid;
}

OAIWholesalePrices OAIProductPost::getWholesalePrices() const {
    return m_wholesale_prices;
}
void OAIProductPost::setWholesalePrices(const OAIWholesalePrices &wholesale_prices) {
    m_wholesale_prices = wholesale_prices;
    m_wholesale_prices_isSet = true;
}

bool OAIProductPost::is_wholesale_prices_Set() const{
    return m_wholesale_prices_isSet;
}

bool OAIProductPost::is_wholesale_prices_Valid() const{
    return m_wholesale_prices_isValid;
}

bool OAIProductPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_at_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_to_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorites.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_shipping_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_shipping_rate_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gallery_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_item_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shipping_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_on_frontpage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wholesale_prices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
