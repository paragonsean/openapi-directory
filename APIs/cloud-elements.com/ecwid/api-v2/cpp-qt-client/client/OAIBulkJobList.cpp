/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkJobList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkJobList::OAIBulkJobList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkJobList::OAIBulkJobList() {
    this->initializeModel();
}

OAIBulkJobList::~OAIBulkJobList() {}

void OAIBulkJobList::initializeModel() {

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_file_format_isSet = false;
    m_file_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_job_direction_isSet = false;
    m_job_direction_isValid = false;

    m_job_query_isSet = false;
    m_job_query_isValid = false;

    m_job_reset_attempt_isSet = false;
    m_job_reset_attempt_isValid = false;

    m_job_state_isSet = false;
    m_job_state_isValid = false;

    m_notification_url_isSet = false;
    m_notification_url_isValid = false;

    m_object_name_isSet = false;
    m_object_name_isValid = false;

    m_record_count_isSet = false;
    m_record_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBulkJobList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkJobList::fromJsonObject(QJsonObject json) {

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completion_time")]);
    m_completion_time_isSet = !json[QString("completion_time")].isNull() && m_completion_time_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("error_count")]);
    m_error_count_isSet = !json[QString("error_count")].isNull() && m_error_count_isValid;

    m_file_format_isValid = ::OpenAPI::fromJsonValue(m_file_format, json[QString("fileFormat")]);
    m_file_format_isSet = !json[QString("fileFormat")].isNull() && m_file_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_job_direction_isValid = ::OpenAPI::fromJsonValue(m_job_direction, json[QString("job_direction")]);
    m_job_direction_isSet = !json[QString("job_direction")].isNull() && m_job_direction_isValid;

    m_job_query_isValid = ::OpenAPI::fromJsonValue(m_job_query, json[QString("job_query")]);
    m_job_query_isSet = !json[QString("job_query")].isNull() && m_job_query_isValid;

    m_job_reset_attempt_isValid = ::OpenAPI::fromJsonValue(m_job_reset_attempt, json[QString("job_reset_attempt")]);
    m_job_reset_attempt_isSet = !json[QString("job_reset_attempt")].isNull() && m_job_reset_attempt_isValid;

    m_job_state_isValid = ::OpenAPI::fromJsonValue(m_job_state, json[QString("job_state")]);
    m_job_state_isSet = !json[QString("job_state")].isNull() && m_job_state_isValid;

    m_notification_url_isValid = ::OpenAPI::fromJsonValue(m_notification_url, json[QString("notification_url")]);
    m_notification_url_isSet = !json[QString("notification_url")].isNull() && m_notification_url_isValid;

    m_object_name_isValid = ::OpenAPI::fromJsonValue(m_object_name, json[QString("object_name")]);
    m_object_name_isSet = !json[QString("object_name")].isNull() && m_object_name_isValid;

    m_record_count_isValid = ::OpenAPI::fromJsonValue(m_record_count, json[QString("record_count")]);
    m_record_count_isSet = !json[QString("record_count")].isNull() && m_record_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBulkJobList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkJobList::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_time_isSet) {
        obj.insert(QString("completion_time"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("error_count"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_file_format_isSet) {
        obj.insert(QString("fileFormat"), ::OpenAPI::toJsonValue(m_file_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_job_direction_isSet) {
        obj.insert(QString("job_direction"), ::OpenAPI::toJsonValue(m_job_direction));
    }
    if (m_job_query_isSet) {
        obj.insert(QString("job_query"), ::OpenAPI::toJsonValue(m_job_query));
    }
    if (m_job_reset_attempt_isSet) {
        obj.insert(QString("job_reset_attempt"), ::OpenAPI::toJsonValue(m_job_reset_attempt));
    }
    if (m_job_state_isSet) {
        obj.insert(QString("job_state"), ::OpenAPI::toJsonValue(m_job_state));
    }
    if (m_notification_url_isSet) {
        obj.insert(QString("notification_url"), ::OpenAPI::toJsonValue(m_notification_url));
    }
    if (m_object_name_isSet) {
        obj.insert(QString("object_name"), ::OpenAPI::toJsonValue(m_object_name));
    }
    if (m_record_count_isSet) {
        obj.insert(QString("record_count"), ::OpenAPI::toJsonValue(m_record_count));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIBulkJobList::getCompletionTime() const {
    return m_completion_time;
}
void OAIBulkJobList::setCompletionTime(const qint64 &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIBulkJobList::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIBulkJobList::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

qint64 OAIBulkJobList::getCreatedDate() const {
    return m_created_date;
}
void OAIBulkJobList::setCreatedDate(const qint64 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIBulkJobList::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIBulkJobList::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint32 OAIBulkJobList::getErrorCount() const {
    return m_error_count;
}
void OAIBulkJobList::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIBulkJobList::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIBulkJobList::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAIBulkJobList::getFileFormat() const {
    return m_file_format;
}
void OAIBulkJobList::setFileFormat(const QString &file_format) {
    m_file_format = file_format;
    m_file_format_isSet = true;
}

bool OAIBulkJobList::is_file_format_Set() const{
    return m_file_format_isSet;
}

bool OAIBulkJobList::is_file_format_Valid() const{
    return m_file_format_isValid;
}

qint32 OAIBulkJobList::getId() const {
    return m_id;
}
void OAIBulkJobList::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBulkJobList::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBulkJobList::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIBulkJobList::getInstanceId() const {
    return m_instance_id;
}
void OAIBulkJobList::setInstanceId(const qint32 &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIBulkJobList::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIBulkJobList::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIBulkJobList::getJobDirection() const {
    return m_job_direction;
}
void OAIBulkJobList::setJobDirection(const QString &job_direction) {
    m_job_direction = job_direction;
    m_job_direction_isSet = true;
}

bool OAIBulkJobList::is_job_direction_Set() const{
    return m_job_direction_isSet;
}

bool OAIBulkJobList::is_job_direction_Valid() const{
    return m_job_direction_isValid;
}

QString OAIBulkJobList::getJobQuery() const {
    return m_job_query;
}
void OAIBulkJobList::setJobQuery(const QString &job_query) {
    m_job_query = job_query;
    m_job_query_isSet = true;
}

bool OAIBulkJobList::is_job_query_Set() const{
    return m_job_query_isSet;
}

bool OAIBulkJobList::is_job_query_Valid() const{
    return m_job_query_isValid;
}

qint32 OAIBulkJobList::getJobResetAttempt() const {
    return m_job_reset_attempt;
}
void OAIBulkJobList::setJobResetAttempt(const qint32 &job_reset_attempt) {
    m_job_reset_attempt = job_reset_attempt;
    m_job_reset_attempt_isSet = true;
}

bool OAIBulkJobList::is_job_reset_attempt_Set() const{
    return m_job_reset_attempt_isSet;
}

bool OAIBulkJobList::is_job_reset_attempt_Valid() const{
    return m_job_reset_attempt_isValid;
}

QString OAIBulkJobList::getJobState() const {
    return m_job_state;
}
void OAIBulkJobList::setJobState(const QString &job_state) {
    m_job_state = job_state;
    m_job_state_isSet = true;
}

bool OAIBulkJobList::is_job_state_Set() const{
    return m_job_state_isSet;
}

bool OAIBulkJobList::is_job_state_Valid() const{
    return m_job_state_isValid;
}

QString OAIBulkJobList::getNotificationUrl() const {
    return m_notification_url;
}
void OAIBulkJobList::setNotificationUrl(const QString &notification_url) {
    m_notification_url = notification_url;
    m_notification_url_isSet = true;
}

bool OAIBulkJobList::is_notification_url_Set() const{
    return m_notification_url_isSet;
}

bool OAIBulkJobList::is_notification_url_Valid() const{
    return m_notification_url_isValid;
}

QString OAIBulkJobList::getObjectName() const {
    return m_object_name;
}
void OAIBulkJobList::setObjectName(const QString &object_name) {
    m_object_name = object_name;
    m_object_name_isSet = true;
}

bool OAIBulkJobList::is_object_name_Set() const{
    return m_object_name_isSet;
}

bool OAIBulkJobList::is_object_name_Valid() const{
    return m_object_name_isValid;
}

qint32 OAIBulkJobList::getRecordCount() const {
    return m_record_count;
}
void OAIBulkJobList::setRecordCount(const qint32 &record_count) {
    m_record_count = record_count;
    m_record_count_isSet = true;
}

bool OAIBulkJobList::is_record_count_Set() const{
    return m_record_count_isSet;
}

bool OAIBulkJobList::is_record_count_Valid() const{
    return m_record_count_isValid;
}

QString OAIBulkJobList::getStatus() const {
    return m_status;
}
void OAIBulkJobList::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBulkJobList::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBulkJobList::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBulkJobList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reset_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkJobList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
