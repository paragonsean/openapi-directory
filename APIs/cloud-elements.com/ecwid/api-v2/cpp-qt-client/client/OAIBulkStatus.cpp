/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkStatus::OAIBulkStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkStatus::OAIBulkStatus() {
    this->initializeModel();
}

OAIBulkStatus::~OAIBulkStatus() {}

void OAIBulkStatus::initializeModel() {

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_num_of_leads_processed_isSet = false;
    m_num_of_leads_processed_isValid = false;

    m_num_of_rows_failed_isSet = false;
    m_num_of_rows_failed_isValid = false;

    m_num_of_rows_with_warning_isSet = false;
    m_num_of_rows_with_warning_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBulkStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkStatus::fromJsonObject(QJsonObject json) {

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_num_of_leads_processed_isValid = ::OpenAPI::fromJsonValue(m_num_of_leads_processed, json[QString("numOfLeadsProcessed")]);
    m_num_of_leads_processed_isSet = !json[QString("numOfLeadsProcessed")].isNull() && m_num_of_leads_processed_isValid;

    m_num_of_rows_failed_isValid = ::OpenAPI::fromJsonValue(m_num_of_rows_failed, json[QString("numOfRowsFailed")]);
    m_num_of_rows_failed_isSet = !json[QString("numOfRowsFailed")].isNull() && m_num_of_rows_failed_isValid;

    m_num_of_rows_with_warning_isValid = ::OpenAPI::fromJsonValue(m_num_of_rows_with_warning, json[QString("numOfRowsWithWarning")]);
    m_num_of_rows_with_warning_isSet = !json[QString("numOfRowsWithWarning")].isNull() && m_num_of_rows_with_warning_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBulkStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_num_of_leads_processed_isSet) {
        obj.insert(QString("numOfLeadsProcessed"), ::OpenAPI::toJsonValue(m_num_of_leads_processed));
    }
    if (m_num_of_rows_failed_isSet) {
        obj.insert(QString("numOfRowsFailed"), ::OpenAPI::toJsonValue(m_num_of_rows_failed));
    }
    if (m_num_of_rows_with_warning_isSet) {
        obj.insert(QString("numOfRowsWithWarning"), ::OpenAPI::toJsonValue(m_num_of_rows_with_warning));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIBulkStatus::getBatchId() const {
    return m_batch_id;
}
void OAIBulkStatus::setBatchId(const double &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIBulkStatus::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIBulkStatus::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

QString OAIBulkStatus::getMessage() const {
    return m_message;
}
void OAIBulkStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBulkStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBulkStatus::is_message_Valid() const{
    return m_message_isValid;
}

double OAIBulkStatus::getNumOfLeadsProcessed() const {
    return m_num_of_leads_processed;
}
void OAIBulkStatus::setNumOfLeadsProcessed(const double &num_of_leads_processed) {
    m_num_of_leads_processed = num_of_leads_processed;
    m_num_of_leads_processed_isSet = true;
}

bool OAIBulkStatus::is_num_of_leads_processed_Set() const{
    return m_num_of_leads_processed_isSet;
}

bool OAIBulkStatus::is_num_of_leads_processed_Valid() const{
    return m_num_of_leads_processed_isValid;
}

double OAIBulkStatus::getNumOfRowsFailed() const {
    return m_num_of_rows_failed;
}
void OAIBulkStatus::setNumOfRowsFailed(const double &num_of_rows_failed) {
    m_num_of_rows_failed = num_of_rows_failed;
    m_num_of_rows_failed_isSet = true;
}

bool OAIBulkStatus::is_num_of_rows_failed_Set() const{
    return m_num_of_rows_failed_isSet;
}

bool OAIBulkStatus::is_num_of_rows_failed_Valid() const{
    return m_num_of_rows_failed_isValid;
}

double OAIBulkStatus::getNumOfRowsWithWarning() const {
    return m_num_of_rows_with_warning;
}
void OAIBulkStatus::setNumOfRowsWithWarning(const double &num_of_rows_with_warning) {
    m_num_of_rows_with_warning = num_of_rows_with_warning;
    m_num_of_rows_with_warning_isSet = true;
}

bool OAIBulkStatus::is_num_of_rows_with_warning_Set() const{
    return m_num_of_rows_with_warning_isSet;
}

bool OAIBulkStatus::is_num_of_rows_with_warning_Valid() const{
    return m_num_of_rows_with_warning_isValid;
}

QString OAIBulkStatus::getStatus() const {
    return m_status;
}
void OAIBulkStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBulkStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBulkStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBulkStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_leads_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_rows_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_rows_with_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
