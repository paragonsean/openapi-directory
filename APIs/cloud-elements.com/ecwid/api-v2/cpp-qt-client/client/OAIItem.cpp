/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_coupon_applied_isSet = false;
    m_coupon_applied_isValid = false;

    m_digital_isSet = false;
    m_digital_isValid = false;

    m_fixed_shipping_rate_isSet = false;
    m_fixed_shipping_rate_isValid = false;

    m_fixed_shipping_rate_only_isSet = false;
    m_fixed_shipping_rate_only_isValid = false;

    m_hd_thumbnail_url_isSet = false;
    m_hd_thumbnail_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_is_shipping_required_isSet = false;
    m_is_shipping_required_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_product_available_isSet = false;
    m_product_available_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_price_isSet = false;
    m_product_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_in_stock_isSet = false;
    m_quantity_in_stock_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_small_thumbnail_url_isSet = false;
    m_small_thumbnail_url_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_track_quantity_isSet = false;
    m_track_quantity_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_coupon_applied_isValid = ::OpenAPI::fromJsonValue(m_coupon_applied, json[QString("couponApplied")]);
    m_coupon_applied_isSet = !json[QString("couponApplied")].isNull() && m_coupon_applied_isValid;

    m_digital_isValid = ::OpenAPI::fromJsonValue(m_digital, json[QString("digital")]);
    m_digital_isSet = !json[QString("digital")].isNull() && m_digital_isValid;

    m_fixed_shipping_rate_isValid = ::OpenAPI::fromJsonValue(m_fixed_shipping_rate, json[QString("fixedShippingRate")]);
    m_fixed_shipping_rate_isSet = !json[QString("fixedShippingRate")].isNull() && m_fixed_shipping_rate_isValid;

    m_fixed_shipping_rate_only_isValid = ::OpenAPI::fromJsonValue(m_fixed_shipping_rate_only, json[QString("fixedShippingRateOnly")]);
    m_fixed_shipping_rate_only_isSet = !json[QString("fixedShippingRateOnly")].isNull() && m_fixed_shipping_rate_only_isValid;

    m_hd_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_hd_thumbnail_url, json[QString("hdThumbnailUrl")]);
    m_hd_thumbnail_url_isSet = !json[QString("hdThumbnailUrl")].isNull() && m_hd_thumbnail_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_is_shipping_required_isValid = ::OpenAPI::fromJsonValue(m_is_shipping_required, json[QString("isShippingRequired")]);
    m_is_shipping_required_isSet = !json[QString("isShippingRequired")].isNull() && m_is_shipping_required_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_product_available_isValid = ::OpenAPI::fromJsonValue(m_product_available, json[QString("productAvailable")]);
    m_product_available_isSet = !json[QString("productAvailable")].isNull() && m_product_available_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_price_isValid = ::OpenAPI::fromJsonValue(m_product_price, json[QString("productPrice")]);
    m_product_price_isSet = !json[QString("productPrice")].isNull() && m_product_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_in_stock_isValid = ::OpenAPI::fromJsonValue(m_quantity_in_stock, json[QString("quantityInStock")]);
    m_quantity_in_stock_isSet = !json[QString("quantityInStock")].isNull() && m_quantity_in_stock_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_small_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_small_thumbnail_url, json[QString("smallThumbnailUrl")]);
    m_small_thumbnail_url_isSet = !json[QString("smallThumbnailUrl")].isNull() && m_small_thumbnail_url_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_track_quantity_isValid = ::OpenAPI::fromJsonValue(m_track_quantity, json[QString("trackQuantity")]);
    m_track_quantity_isSet = !json[QString("trackQuantity")].isNull() && m_track_quantity_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_coupon_applied_isSet) {
        obj.insert(QString("couponApplied"), ::OpenAPI::toJsonValue(m_coupon_applied));
    }
    if (m_digital_isSet) {
        obj.insert(QString("digital"), ::OpenAPI::toJsonValue(m_digital));
    }
    if (m_fixed_shipping_rate_isSet) {
        obj.insert(QString("fixedShippingRate"), ::OpenAPI::toJsonValue(m_fixed_shipping_rate));
    }
    if (m_fixed_shipping_rate_only_isSet) {
        obj.insert(QString("fixedShippingRateOnly"), ::OpenAPI::toJsonValue(m_fixed_shipping_rate_only));
    }
    if (m_hd_thumbnail_url_isSet) {
        obj.insert(QString("hdThumbnailUrl"), ::OpenAPI::toJsonValue(m_hd_thumbnail_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_is_shipping_required_isSet) {
        obj.insert(QString("isShippingRequired"), ::OpenAPI::toJsonValue(m_is_shipping_required));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_product_available_isSet) {
        obj.insert(QString("productAvailable"), ::OpenAPI::toJsonValue(m_product_available));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_price_isSet) {
        obj.insert(QString("productPrice"), ::OpenAPI::toJsonValue(m_product_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_in_stock_isSet) {
        obj.insert(QString("quantityInStock"), ::OpenAPI::toJsonValue(m_quantity_in_stock));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_small_thumbnail_url_isSet) {
        obj.insert(QString("smallThumbnailUrl"), ::OpenAPI::toJsonValue(m_small_thumbnail_url));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_track_quantity_isSet) {
        obj.insert(QString("trackQuantity"), ::OpenAPI::toJsonValue(m_track_quantity));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint64 OAIItem::getCategoryId() const {
    return m_category_id;
}
void OAIItem::setCategoryId(const qint64 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIItem::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIItem::is_category_id_Valid() const{
    return m_category_id_isValid;
}

bool OAIItem::isCouponApplied() const {
    return m_coupon_applied;
}
void OAIItem::setCouponApplied(const bool &coupon_applied) {
    m_coupon_applied = coupon_applied;
    m_coupon_applied_isSet = true;
}

bool OAIItem::is_coupon_applied_Set() const{
    return m_coupon_applied_isSet;
}

bool OAIItem::is_coupon_applied_Valid() const{
    return m_coupon_applied_isValid;
}

bool OAIItem::isDigital() const {
    return m_digital;
}
void OAIItem::setDigital(const bool &digital) {
    m_digital = digital;
    m_digital_isSet = true;
}

bool OAIItem::is_digital_Set() const{
    return m_digital_isSet;
}

bool OAIItem::is_digital_Valid() const{
    return m_digital_isValid;
}

double OAIItem::getFixedShippingRate() const {
    return m_fixed_shipping_rate;
}
void OAIItem::setFixedShippingRate(const double &fixed_shipping_rate) {
    m_fixed_shipping_rate = fixed_shipping_rate;
    m_fixed_shipping_rate_isSet = true;
}

bool OAIItem::is_fixed_shipping_rate_Set() const{
    return m_fixed_shipping_rate_isSet;
}

bool OAIItem::is_fixed_shipping_rate_Valid() const{
    return m_fixed_shipping_rate_isValid;
}

bool OAIItem::isFixedShippingRateOnly() const {
    return m_fixed_shipping_rate_only;
}
void OAIItem::setFixedShippingRateOnly(const bool &fixed_shipping_rate_only) {
    m_fixed_shipping_rate_only = fixed_shipping_rate_only;
    m_fixed_shipping_rate_only_isSet = true;
}

bool OAIItem::is_fixed_shipping_rate_only_Set() const{
    return m_fixed_shipping_rate_only_isSet;
}

bool OAIItem::is_fixed_shipping_rate_only_Valid() const{
    return m_fixed_shipping_rate_only_isValid;
}

QString OAIItem::getHdThumbnailUrl() const {
    return m_hd_thumbnail_url;
}
void OAIItem::setHdThumbnailUrl(const QString &hd_thumbnail_url) {
    m_hd_thumbnail_url = hd_thumbnail_url;
    m_hd_thumbnail_url_isSet = true;
}

bool OAIItem::is_hd_thumbnail_url_Set() const{
    return m_hd_thumbnail_url_isSet;
}

bool OAIItem::is_hd_thumbnail_url_Valid() const{
    return m_hd_thumbnail_url_isValid;
}

qint64 OAIItem::getId() const {
    return m_id;
}
void OAIItem::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIItem::getImageUrl() const {
    return m_image_url;
}
void OAIItem::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIItem::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIItem::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIItem::isIsShippingRequired() const {
    return m_is_shipping_required;
}
void OAIItem::setIsShippingRequired(const bool &is_shipping_required) {
    m_is_shipping_required = is_shipping_required;
    m_is_shipping_required_isSet = true;
}

bool OAIItem::is_is_shipping_required_Set() const{
    return m_is_shipping_required_isSet;
}

bool OAIItem::is_is_shipping_required_Valid() const{
    return m_is_shipping_required_isValid;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

double OAIItem::getPrice() const {
    return m_price;
}
void OAIItem::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIItem::isProductAvailable() const {
    return m_product_available;
}
void OAIItem::setProductAvailable(const bool &product_available) {
    m_product_available = product_available;
    m_product_available_isSet = true;
}

bool OAIItem::is_product_available_Set() const{
    return m_product_available_isSet;
}

bool OAIItem::is_product_available_Valid() const{
    return m_product_available_isValid;
}

qint64 OAIItem::getProductId() const {
    return m_product_id;
}
void OAIItem::setProductId(const qint64 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIItem::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIItem::is_product_id_Valid() const{
    return m_product_id_isValid;
}

double OAIItem::getProductPrice() const {
    return m_product_price;
}
void OAIItem::setProductPrice(const double &product_price) {
    m_product_price = product_price;
    m_product_price_isSet = true;
}

bool OAIItem::is_product_price_Set() const{
    return m_product_price_isSet;
}

bool OAIItem::is_product_price_Valid() const{
    return m_product_price_isValid;
}

qint64 OAIItem::getQuantity() const {
    return m_quantity;
}
void OAIItem::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAIItem::getQuantityInStock() const {
    return m_quantity_in_stock;
}
void OAIItem::setQuantityInStock(const double &quantity_in_stock) {
    m_quantity_in_stock = quantity_in_stock;
    m_quantity_in_stock_isSet = true;
}

bool OAIItem::is_quantity_in_stock_Set() const{
    return m_quantity_in_stock_isSet;
}

bool OAIItem::is_quantity_in_stock_Valid() const{
    return m_quantity_in_stock_isValid;
}

double OAIItem::getShipping() const {
    return m_shipping;
}
void OAIItem::setShipping(const double &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIItem::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIItem::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAIItem::getSku() const {
    return m_sku;
}
void OAIItem::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIItem::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIItem::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIItem::getSmallThumbnailUrl() const {
    return m_small_thumbnail_url;
}
void OAIItem::setSmallThumbnailUrl(const QString &small_thumbnail_url) {
    m_small_thumbnail_url = small_thumbnail_url;
    m_small_thumbnail_url_isSet = true;
}

bool OAIItem::is_small_thumbnail_url_Set() const{
    return m_small_thumbnail_url_isSet;
}

bool OAIItem::is_small_thumbnail_url_Valid() const{
    return m_small_thumbnail_url_isValid;
}

double OAIItem::getTax() const {
    return m_tax;
}
void OAIItem::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIItem::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIItem::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<OAITax> OAIItem::getTaxes() const {
    return m_taxes;
}
void OAIItem::setTaxes(const QList<OAITax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIItem::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIItem::is_taxes_Valid() const{
    return m_taxes_isValid;
}

bool OAIItem::isTrackQuantity() const {
    return m_track_quantity;
}
void OAIItem::setTrackQuantity(const bool &track_quantity) {
    m_track_quantity = track_quantity;
    m_track_quantity_isSet = true;
}

bool OAIItem::is_track_quantity_Set() const{
    return m_track_quantity_isSet;
}

bool OAIItem::is_track_quantity_Valid() const{
    return m_track_quantity_isValid;
}

double OAIItem::getWeight() const {
    return m_weight;
}
void OAIItem::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIItem::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIItem::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_shipping_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_shipping_rate_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shipping_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
