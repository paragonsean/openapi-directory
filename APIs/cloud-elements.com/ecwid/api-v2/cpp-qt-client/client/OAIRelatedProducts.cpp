/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedProducts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedProducts::OAIRelatedProducts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedProducts::OAIRelatedProducts() {
    this->initializeModel();
}

OAIRelatedProducts::~OAIRelatedProducts() {}

void OAIRelatedProducts::initializeModel() {

    m_product_ids_isSet = false;
    m_product_ids_isValid = false;

    m_related_category_isSet = false;
    m_related_category_isValid = false;
}

void OAIRelatedProducts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedProducts::fromJsonObject(QJsonObject json) {

    m_product_ids_isValid = ::OpenAPI::fromJsonValue(m_product_ids, json[QString("productIds")]);
    m_product_ids_isSet = !json[QString("productIds")].isNull() && m_product_ids_isValid;

    m_related_category_isValid = ::OpenAPI::fromJsonValue(m_related_category, json[QString("relatedCategory")]);
    m_related_category_isSet = !json[QString("relatedCategory")].isNull() && m_related_category_isValid;
}

QString OAIRelatedProducts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedProducts::asJsonObject() const {
    QJsonObject obj;
    if (m_product_ids.size() > 0) {
        obj.insert(QString("productIds"), ::OpenAPI::toJsonValue(m_product_ids));
    }
    if (m_related_category.isSet()) {
        obj.insert(QString("relatedCategory"), ::OpenAPI::toJsonValue(m_related_category));
    }
    return obj;
}

QList<double> OAIRelatedProducts::getProductIds() const {
    return m_product_ids;
}
void OAIRelatedProducts::setProductIds(const QList<double> &product_ids) {
    m_product_ids = product_ids;
    m_product_ids_isSet = true;
}

bool OAIRelatedProducts::is_product_ids_Set() const{
    return m_product_ids_isSet;
}

bool OAIRelatedProducts::is_product_ids_Valid() const{
    return m_product_ids_isValid;
}

OAIRelatedCategory OAIRelatedProducts::getRelatedCategory() const {
    return m_related_category;
}
void OAIRelatedProducts::setRelatedCategory(const OAIRelatedCategory &related_category) {
    m_related_category = related_category;
    m_related_category_isSet = true;
}

bool OAIRelatedProducts::is_related_category_Set() const{
    return m_related_category_isSet;
}

bool OAIRelatedProducts::is_related_category_Valid() const{
    return m_related_category_isValid;
}

bool OAIRelatedProducts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedProducts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
