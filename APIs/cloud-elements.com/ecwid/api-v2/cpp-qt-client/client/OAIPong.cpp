/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPong.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPong::OAIPong(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPong::OAIPong() {
    this->initializeModel();
}

OAIPong::~OAIPong() {}

void OAIPong::initializeModel() {

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIPong::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPong::fromJsonObject(QJsonObject json) {

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIPong::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPong::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QDateTime OAIPong::getDateTime() const {
    return m_date_time;
}
void OAIPong::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIPong::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIPong::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIPong::getEndpoint() const {
    return m_endpoint;
}
void OAIPong::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIPong::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIPong::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAIPong::isRValid() const {
    return m_r_valid;
}
void OAIPong::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIPong::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIPong::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIPong::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPong::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
