/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_default_category_isSet = false;
    m_default_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_image_url_isSet = false;
    m_original_image_url_isValid = false;

    m_product_count_isSet = false;
    m_product_count_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_default_category_isValid = ::OpenAPI::fromJsonValue(m_default_category, json[QString("defaultCategory")]);
    m_default_category_isSet = !json[QString("defaultCategory")].isNull() && m_default_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_image_url_isValid = ::OpenAPI::fromJsonValue(m_original_image_url, json[QString("originalImageUrl")]);
    m_original_image_url_isSet = !json[QString("originalImageUrl")].isNull() && m_original_image_url_isValid;

    m_product_count_isValid = ::OpenAPI::fromJsonValue(m_product_count, json[QString("productCount")]);
    m_product_count_isSet = !json[QString("productCount")].isNull() && m_product_count_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_default_category_isSet) {
        obj.insert(QString("defaultCategory"), ::OpenAPI::toJsonValue(m_default_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_image_url_isSet) {
        obj.insert(QString("originalImageUrl"), ::OpenAPI::toJsonValue(m_original_image_url));
    }
    if (m_product_count_isSet) {
        obj.insert(QString("productCount"), ::OpenAPI::toJsonValue(m_product_count));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAICategory::isDefaultCategory() const {
    return m_default_category;
}
void OAICategory::setDefaultCategory(const bool &default_category) {
    m_default_category = default_category;
    m_default_category_isSet = true;
}

bool OAICategory::is_default_category_Set() const{
    return m_default_category_isSet;
}

bool OAICategory::is_default_category_Valid() const{
    return m_default_category_isValid;
}

QString OAICategory::getDescription() const {
    return m_description;
}
void OAICategory::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICategory::is_description_Set() const{
    return m_description_isSet;
}

bool OAICategory::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICategory::isEnabled() const {
    return m_enabled;
}
void OAICategory::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICategory::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICategory::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint64 OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategory::getName() const {
    return m_name;
}
void OAICategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategory::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICategory::getOriginalImageUrl() const {
    return m_original_image_url;
}
void OAICategory::setOriginalImageUrl(const QString &original_image_url) {
    m_original_image_url = original_image_url;
    m_original_image_url_isSet = true;
}

bool OAICategory::is_original_image_url_Set() const{
    return m_original_image_url_isSet;
}

bool OAICategory::is_original_image_url_Valid() const{
    return m_original_image_url_isValid;
}

qint64 OAICategory::getProductCount() const {
    return m_product_count;
}
void OAICategory::setProductCount(const qint64 &product_count) {
    m_product_count = product_count;
    m_product_count_isSet = true;
}

bool OAICategory::is_product_count_Set() const{
    return m_product_count_isSet;
}

bool OAICategory::is_product_count_Valid() const{
    return m_product_count_isValid;
}

QString OAICategory::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAICategory::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAICategory::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAICategory::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAICategory::getUrl() const {
    return m_url;
}
void OAICategory::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICategory::is_url_Set() const{
    return m_url_isSet;
}

bool OAICategory::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
