/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefunds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefunds::OAIRefunds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefunds::OAIRefunds() {
    this->initializeModel();
}

OAIRefunds::~OAIRefunds() {}

void OAIRefunds::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIRefunds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefunds::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIRefunds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefunds::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

double OAIRefunds::getAmount() const {
    return m_amount;
}
void OAIRefunds::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIRefunds::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIRefunds::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIRefunds::getDate() const {
    return m_date;
}
void OAIRefunds::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIRefunds::is_date_Set() const{
    return m_date_isSet;
}

bool OAIRefunds::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIRefunds::getReason() const {
    return m_reason;
}
void OAIRefunds::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRefunds::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRefunds::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIRefunds::getSource() const {
    return m_source;
}
void OAIRefunds::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRefunds::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRefunds::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIRefunds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefunds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
