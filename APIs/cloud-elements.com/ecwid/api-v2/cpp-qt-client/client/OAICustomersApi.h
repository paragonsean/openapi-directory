/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomer.h"
#include "OAICustomerPatch.h"
#include "OAICustomerPost.h"
#include "OAIOrder.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  customer OAICustomerPost [required]
    */
    virtual void createCustomer(const QString &authorization, const OAICustomerPost &customer);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteCustomerById(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getCustomerById(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getCustomers(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getCustomersOrders(const QString &authorization, const QString &id, const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    * @param[in]  customer OAICustomerPatch [required]
    */
    virtual void updateCustomerById(const QString &authorization, const QString &id, const OAICustomerPatch &customer);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomerCallback(OAIHttpRequestWorker *worker);
    void deleteCustomerByIdCallback(OAIHttpRequestWorker *worker);
    void getCustomerByIdCallback(OAIHttpRequestWorker *worker);
    void getCustomersCallback(OAIHttpRequestWorker *worker);
    void getCustomersOrdersCallback(OAIHttpRequestWorker *worker);
    void updateCustomerByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomerSignal(OAICustomer summary);
    void deleteCustomerByIdSignal();
    void getCustomerByIdSignal(OAICustomer summary);
    void getCustomersSignal(QList<OAICustomer> summary);
    void getCustomersOrdersSignal(QList<OAIOrder> summary);
    void updateCustomerByIdSignal(OAICustomer summary);


    void createCustomerSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void deleteCustomerByIdSignalFull(OAIHttpRequestWorker *worker);
    void getCustomerByIdSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void getCustomersSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomer> summary);
    void getCustomersOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrder> summary);
    void updateCustomerByIdSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);

    Q_DECL_DEPRECATED_X("Use createCustomerSignalError() instead")
    void createCustomerSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerByIdSignalError() instead")
    void deleteCustomerByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomerByIdSignalError() instead")
    void getCustomerByIdSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomerByIdSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomersSignalError() instead")
    void getCustomersSignalE(QList<OAICustomer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomersSignalError(QList<OAICustomer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomersOrdersSignalError() instead")
    void getCustomersOrdersSignalE(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomersOrdersSignalError(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerByIdSignalError() instead")
    void updateCustomerByIdSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerByIdSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomerSignalErrorFull() instead")
    void createCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerByIdSignalErrorFull() instead")
    void deleteCustomerByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomerByIdSignalErrorFull() instead")
    void getCustomerByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomerByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomersSignalErrorFull() instead")
    void getCustomersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomersOrdersSignalErrorFull() instead")
    void getCustomersOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomersOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerByIdSignalErrorFull() instead")
    void updateCustomerByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
