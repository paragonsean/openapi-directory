/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOrder.h"
#include "OAIOrderPatch.h"
#include "OAIOrderPost.h"
#include "OAIPayment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order OAIOrderPost [required]
    */
    virtual void createOrder(const QString &authorization, const OAIOrderPost &order);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrderById(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrderById(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getOrders(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getOrdersPayments(const QString &authorization, const QString &order_id, const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getOrdersRefunds(const QString &authorization, const QString &order_id, const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    * @param[in]  order OAIOrderPatch [required]
    * @param[in]  action QString [optional]
    */
    virtual void updateOrderById(const QString &authorization, const QString &id, const OAIOrderPatch &order, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrderCallback(OAIHttpRequestWorker *worker);
    void deleteOrderByIdCallback(OAIHttpRequestWorker *worker);
    void getOrderByIdCallback(OAIHttpRequestWorker *worker);
    void getOrdersCallback(OAIHttpRequestWorker *worker);
    void getOrdersPaymentsCallback(OAIHttpRequestWorker *worker);
    void getOrdersRefundsCallback(OAIHttpRequestWorker *worker);
    void updateOrderByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrderSignal(OAIOrder summary);
    void deleteOrderByIdSignal();
    void getOrderByIdSignal(OAIOrder summary);
    void getOrdersSignal(QList<OAIOrder> summary);
    void getOrdersPaymentsSignal(QList<OAIPayment> summary);
    void getOrdersRefundsSignal(QList<OAIPayment> summary);
    void updateOrderByIdSignal(OAIOrder summary);


    void createOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void deleteOrderByIdSignalFull(OAIHttpRequestWorker *worker);
    void getOrderByIdSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void getOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrder> summary);
    void getOrdersPaymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPayment> summary);
    void getOrdersRefundsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPayment> summary);
    void updateOrderByIdSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);

    Q_DECL_DEPRECATED_X("Use createOrderSignalError() instead")
    void createOrderSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrderByIdSignalError() instead")
    void deleteOrderByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrderByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderByIdSignalError() instead")
    void getOrderByIdSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderByIdSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalError() instead")
    void getOrdersSignalE(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalError(QList<OAIOrder> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersPaymentsSignalError() instead")
    void getOrdersPaymentsSignalE(QList<OAIPayment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersPaymentsSignalError(QList<OAIPayment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersRefundsSignalError() instead")
    void getOrdersRefundsSignalE(QList<OAIPayment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersRefundsSignalError(QList<OAIPayment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderByIdSignalError() instead")
    void updateOrderByIdSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderByIdSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrderSignalErrorFull() instead")
    void createOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrderByIdSignalErrorFull() instead")
    void deleteOrderByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrderByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderByIdSignalErrorFull() instead")
    void getOrderByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersSignalErrorFull() instead")
    void getOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersPaymentsSignalErrorFull() instead")
    void getOrdersPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrdersRefundsSignalErrorFull() instead")
    void getOrdersRefundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrdersRefundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderByIdSignalErrorFull() instead")
    void updateOrderByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
