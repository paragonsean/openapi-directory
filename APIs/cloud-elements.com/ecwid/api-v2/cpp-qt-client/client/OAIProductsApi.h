/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProduct.h"
#include "OAIProductPatch.h"
#include "OAIProductPost.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  product OAIProductPost [required]
    */
    virtual void createProduct(const QString &authorization, const OAIProductPost &product);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteProductById(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getProductById(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getProducts(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    * @param[in]  product OAIProductPatch [required]
    */
    virtual void updateProductById(const QString &authorization, const QString &id, const OAIProductPatch &product);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProductCallback(OAIHttpRequestWorker *worker);
    void deleteProductByIdCallback(OAIHttpRequestWorker *worker);
    void getProductByIdCallback(OAIHttpRequestWorker *worker);
    void getProductsCallback(OAIHttpRequestWorker *worker);
    void updateProductByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProductSignal(OAIProduct summary);
    void deleteProductByIdSignal();
    void getProductByIdSignal(OAIProduct summary);
    void getProductsSignal(QList<OAIProduct> summary);
    void updateProductByIdSignal(OAIProduct summary);


    void createProductSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void deleteProductByIdSignalFull(OAIHttpRequestWorker *worker);
    void getProductByIdSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void getProductsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProduct> summary);
    void updateProductByIdSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);

    Q_DECL_DEPRECATED_X("Use createProductSignalError() instead")
    void createProductSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductByIdSignalError() instead")
    void deleteProductByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductByIdSignalError() instead")
    void getProductByIdSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductByIdSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsSignalError() instead")
    void getProductsSignalE(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsSignalError(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductByIdSignalError() instead")
    void updateProductByIdSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductByIdSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProductSignalErrorFull() instead")
    void createProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProductByIdSignalErrorFull() instead")
    void deleteProductByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductByIdSignalErrorFull() instead")
    void getProductByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsSignalErrorFull() instead")
    void getProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProductByIdSignalErrorFull() instead")
    void updateProductByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProductByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
