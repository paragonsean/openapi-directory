/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBulkApi_H
#define OAI_OAIBulkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkDownloadRequest.h"
#include "OAIBulkJobList.h"
#include "OAIBulkQuery.h"
#include "OAIBulkStatus.h"
#include "OAIBulkUploadResponse.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBulkApi : public QObject {
    Q_OBJECT

public:
    OAIBulkApi(const int timeOut = 0);
    ~OAIBulkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  object_name QString [required]
    * @param[in]  elements_async_callback_url QString [optional]
    * @param[in]  meta_data QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void createBulkByObjectName(const QString &authorization, const QString &object_name, const ::OpenAPI::OptionalParam<QString> &elements_async_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  body OAIBulkDownloadRequest [required]
    */
    virtual void createBulkDownload(const QString &authorization, const OAIBulkDownloadRequest &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  elements_async_callback_url QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  last_run_date QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  meta_data QString [optional]
    */
    virtual void createBulkQuery(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &elements_async_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_run_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    * @param[in]  object_name QString [required]
    */
    virtual void getBulkByObjectName(const QString &authorization, const QString &id, const QString &object_name);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getBulkErrors(const QString &authorization, const QString &id, const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  where QString [optional]
    * @param[in]  next_page QString [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getBulkJobs(const QString &authorization, const ::OpenAPI::OptionalParam<QString> &where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getBulkStatus(const QString &authorization, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  id QString [required]
    */
    virtual void replaceBulkCancel(const QString &authorization, const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBulkByObjectNameCallback(OAIHttpRequestWorker *worker);
    void createBulkDownloadCallback(OAIHttpRequestWorker *worker);
    void createBulkQueryCallback(OAIHttpRequestWorker *worker);
    void getBulkByObjectNameCallback(OAIHttpRequestWorker *worker);
    void getBulkErrorsCallback(OAIHttpRequestWorker *worker);
    void getBulkJobsCallback(OAIHttpRequestWorker *worker);
    void getBulkStatusCallback(OAIHttpRequestWorker *worker);
    void replaceBulkCancelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBulkByObjectNameSignal(OAIBulkUploadResponse summary);
    void createBulkDownloadSignal(OAIBulkQuery summary);
    void createBulkQuerySignal(OAIBulkQuery summary);
    void getBulkByObjectNameSignal(OAIHttpFileElement summary);
    void getBulkErrorsSignal(QList<QString> summary);
    void getBulkJobsSignal(OAIBulkJobList summary);
    void getBulkStatusSignal(OAIBulkStatus summary);
    void replaceBulkCancelSignal(OAIBulkStatus summary);


    void createBulkByObjectNameSignalFull(OAIHttpRequestWorker *worker, OAIBulkUploadResponse summary);
    void createBulkDownloadSignalFull(OAIHttpRequestWorker *worker, OAIBulkQuery summary);
    void createBulkQuerySignalFull(OAIHttpRequestWorker *worker, OAIBulkQuery summary);
    void getBulkByObjectNameSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getBulkErrorsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getBulkJobsSignalFull(OAIHttpRequestWorker *worker, OAIBulkJobList summary);
    void getBulkStatusSignalFull(OAIHttpRequestWorker *worker, OAIBulkStatus summary);
    void replaceBulkCancelSignalFull(OAIHttpRequestWorker *worker, OAIBulkStatus summary);

    Q_DECL_DEPRECATED_X("Use createBulkByObjectNameSignalError() instead")
    void createBulkByObjectNameSignalE(OAIBulkUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkByObjectNameSignalError(OAIBulkUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBulkDownloadSignalError() instead")
    void createBulkDownloadSignalE(OAIBulkQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkDownloadSignalError(OAIBulkQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBulkQuerySignalError() instead")
    void createBulkQuerySignalE(OAIBulkQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkQuerySignalError(OAIBulkQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkByObjectNameSignalError() instead")
    void getBulkByObjectNameSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkByObjectNameSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkErrorsSignalError() instead")
    void getBulkErrorsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkErrorsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkJobsSignalError() instead")
    void getBulkJobsSignalE(OAIBulkJobList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkJobsSignalError(OAIBulkJobList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkStatusSignalError() instead")
    void getBulkStatusSignalE(OAIBulkStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkStatusSignalError(OAIBulkStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceBulkCancelSignalError() instead")
    void replaceBulkCancelSignalE(OAIBulkStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceBulkCancelSignalError(OAIBulkStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBulkByObjectNameSignalErrorFull() instead")
    void createBulkByObjectNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkByObjectNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBulkDownloadSignalErrorFull() instead")
    void createBulkDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBulkQuerySignalErrorFull() instead")
    void createBulkQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBulkQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkByObjectNameSignalErrorFull() instead")
    void getBulkByObjectNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkByObjectNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkErrorsSignalErrorFull() instead")
    void getBulkErrorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkErrorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkJobsSignalErrorFull() instead")
    void getBulkJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBulkStatusSignalErrorFull() instead")
    void getBulkStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBulkStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceBulkCancelSignalErrorFull() instead")
    void replaceBulkCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceBulkCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
