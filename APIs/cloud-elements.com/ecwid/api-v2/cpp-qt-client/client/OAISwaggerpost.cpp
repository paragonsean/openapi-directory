/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerpost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerpost::OAISwaggerpost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerpost::OAISwaggerpost() {
    this->initializeModel();
}

OAISwaggerpost::~OAISwaggerpost() {}

void OAISwaggerpost::initializeModel() {

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_responses_isSet = false;
    m_responses_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISwaggerpost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerpost::fromJsonObject(QJsonObject json) {

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("responses")]);
    m_responses_isSet = !json[QString("responses")].isNull() && m_responses_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISwaggerpost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerpost::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_responses.isSet()) {
        obj.insert(QString("responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAISwaggerpost::getOperationId() const {
    return m_operation_id;
}
void OAISwaggerpost::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAISwaggerpost::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAISwaggerpost::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QList<OAISwaggerparameters> OAISwaggerpost::getParameters() const {
    return m_parameters;
}
void OAISwaggerpost::setParameters(const QList<OAISwaggerparameters> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAISwaggerpost::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAISwaggerpost::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAISwaggerresponses OAISwaggerpost::getResponses() const {
    return m_responses;
}
void OAISwaggerpost::setResponses(const OAISwaggerresponses &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAISwaggerpost::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAISwaggerpost::is_responses_Valid() const{
    return m_responses_isValid;
}

QString OAISwaggerpost::getSummary() const {
    return m_summary;
}
void OAISwaggerpost::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAISwaggerpost::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAISwaggerpost::is_summary_Valid() const{
    return m_summary_isValid;
}

QList<QString> OAISwaggerpost::getTags() const {
    return m_tags;
}
void OAISwaggerpost::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISwaggerpost::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISwaggerpost::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISwaggerpost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerpost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
