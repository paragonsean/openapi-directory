/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Ecwid);
  }
}(this, function(expect, Ecwid) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Ecwid.Order();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Order', function() {
    it('should create an instance of Order', function() {
      // uncomment below and update the code to test Order
      //var instance = new Ecwid.Order();
      //expect(instance).to.be.a(Ecwid.Order);
    });

    it('should have the property additionalInfo (base name: "additionalInfo")', function() {
      // uncomment below and update the code to test the property additionalInfo
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property billingPerson (base name: "billingPerson")', function() {
      // uncomment below and update the code to test the property billingPerson
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property couponDiscount (base name: "couponDiscount")', function() {
      // uncomment below and update the code to test the property couponDiscount
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property createTimestamp (base name: "createTimestamp")', function() {
      // uncomment below and update the code to test the property createTimestamp
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property customerId (base name: "customerId")', function() {
      // uncomment below and update the code to test the property customerId
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property customerTaxExempt (base name: "customerTaxExempt")', function() {
      // uncomment below and update the code to test the property customerTaxExempt
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property customerTaxId (base name: "customerTaxId")', function() {
      // uncomment below and update the code to test the property customerTaxId
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property customerTaxIdValid (base name: "customerTaxIdValid")', function() {
      // uncomment below and update the code to test the property customerTaxIdValid
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property discount (base name: "discount")', function() {
      // uncomment below and update the code to test the property discount
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentStatus (base name: "fulfillmentStatus")', function() {
      // uncomment below and update the code to test the property fulfillmentStatus
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property globalReferer (base name: "globalReferer")', function() {
      // uncomment below and update the code to test the property globalReferer
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property handlingFee (base name: "handlingFee")', function() {
      // uncomment below and update the code to test the property handlingFee
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property lastChangeDate (base name: "lastChangeDate")', function() {
      // uncomment below and update the code to test the property lastChangeDate
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property membershipBasedDiscount (base name: "membershipBasedDiscount")', function() {
      // uncomment below and update the code to test the property membershipBasedDiscount
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderComments (base name: "orderComments")', function() {
      // uncomment below and update the code to test the property orderComments
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderNumber (base name: "orderNumber")', function() {
      // uncomment below and update the code to test the property orderNumber
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethod (base name: "paymentMethod")', function() {
      // uncomment below and update the code to test the property paymentMethod
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentModule (base name: "paymentModule")', function() {
      // uncomment below and update the code to test the property paymentModule
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentStatus (base name: "paymentStatus")', function() {
      // uncomment below and update the code to test the property paymentStatus
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property privateAdminNotes (base name: "privateAdminNotes")', function() {
      // uncomment below and update the code to test the property privateAdminNotes
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property refererUrl (base name: "refererUrl")', function() {
      // uncomment below and update the code to test the property refererUrl
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property refundedAmount (base name: "refundedAmount")', function() {
      // uncomment below and update the code to test the property refundedAmount
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property refunds (base name: "refunds")', function() {
      // uncomment below and update the code to test the property refunds
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property reversedTaxApplied (base name: "reversedTaxApplied")', function() {
      // uncomment below and update the code to test the property reversedTaxApplied
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property sample (base name: "sample")', function() {
      // uncomment below and update the code to test the property sample
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property shippingMethod (base name: "shippingMethod")', function() {
      // uncomment below and update the code to test the property shippingMethod
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property shippingOption (base name: "shippingOption")', function() {
      // uncomment below and update the code to test the property shippingOption
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property shippingPerson (base name: "shippingPerson")', function() {
      // uncomment below and update the code to test the property shippingPerson
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property subtotal (base name: "subtotal")', function() {
      // uncomment below and update the code to test the property subtotal
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property taxesOnShipping (base name: "taxesOnShipping")', function() {
      // uncomment below and update the code to test the property taxesOnShipping
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property totalAndMembershipBasedDiscount (base name: "totalAndMembershipBasedDiscount")', function() {
      // uncomment below and update the code to test the property totalAndMembershipBasedDiscount
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property trackingNumber (base name: "trackingNumber")', function() {
      // uncomment below and update the code to test the property trackingNumber
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property updateDate (base name: "updateDate")', function() {
      // uncomment below and update the code to test the property updateDate
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property updateTimestamp (base name: "updateTimestamp")', function() {
      // uncomment below and update the code to test the property updateTimestamp
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property usdTotal (base name: "usdTotal")', function() {
      // uncomment below and update the code to test the property usdTotal
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property vendorNumber (base name: "vendorNumber")', function() {
      // uncomment below and update the code to test the property vendorNumber
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property vendorOrderNumber (base name: "vendorOrderNumber")', function() {
      // uncomment below and update the code to test the property vendorOrderNumber
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

    it('should have the property volumeDiscount (base name: "volumeDiscount")', function() {
      // uncomment below and update the code to test the property volumeDiscount
      //var instance = new Ecwid.Order();
      //expect(instance).to.be();
    });

  });

}));
