/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Ecwid);
  }
}(this, function(expect, Ecwid) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Ecwid.Product();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Product', function() {
    it('should create an instance of Product', function() {
      // uncomment below and update the code to test Product
      //var instance = new Ecwid.Product();
      //expect(instance).to.be.a(Ecwid.Product);
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property borderInfo (base name: "borderInfo")', function() {
      // uncomment below and update the code to test the property borderInfo
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property categoryIds (base name: "categoryIds")', function() {
      // uncomment below and update the code to test the property categoryIds
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property combinations (base name: "combinations")', function() {
      // uncomment below and update the code to test the property combinations
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareAtPrice (base name: "compareAtPrice")', function() {
      // uncomment below and update the code to test the property compareAtPrice
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareToPrice (base name: "compareToPrice")', function() {
      // uncomment below and update the code to test the property compareToPrice
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareToPriceDiscount (base name: "compareToPriceDiscount")', function() {
      // uncomment below and update the code to test the property compareToPriceDiscount
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareToPriceDiscountFormatted (base name: "compareToPriceDiscountFormatted")', function() {
      // uncomment below and update the code to test the property compareToPriceDiscountFormatted
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareToPriceDiscountPercent (base name: "compareToPriceDiscountPercent")', function() {
      // uncomment below and update the code to test the property compareToPriceDiscountPercent
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareToPriceDiscountPercentFormatted (base name: "compareToPriceDiscountPercentFormatted")', function() {
      // uncomment below and update the code to test the property compareToPriceDiscountPercentFormatted
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property compareToPriceFormatted (base name: "compareToPriceFormatted")', function() {
      // uncomment below and update the code to test the property compareToPriceFormatted
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property createTimestamp (base name: "createTimestamp")', function() {
      // uncomment below and update the code to test the property createTimestamp
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property defaultCategoryId (base name: "defaultCategoryId")', function() {
      // uncomment below and update the code to test the property defaultCategoryId
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property defaultCombinationId (base name: "defaultCombinationId")', function() {
      // uncomment below and update the code to test the property defaultCombinationId
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property defaultDisplayedPrice (base name: "defaultDisplayedPrice")', function() {
      // uncomment below and update the code to test the property defaultDisplayedPrice
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property defaultDisplayedPriceFormatted (base name: "defaultDisplayedPriceFormatted")', function() {
      // uncomment below and update the code to test the property defaultDisplayedPriceFormatted
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property descriptionTruncated (base name: "descriptionTruncated")', function() {
      // uncomment below and update the code to test the property descriptionTruncated
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property favorites (base name: "favorites")', function() {
      // uncomment below and update the code to test the property favorites
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property files (base name: "files")', function() {
      // uncomment below and update the code to test the property files
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property fixedShippingRate (base name: "fixedShippingRate")', function() {
      // uncomment below and update the code to test the property fixedShippingRate
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property fixedShippingRateOnly (base name: "fixedShippingRateOnly")', function() {
      // uncomment below and update the code to test the property fixedShippingRateOnly
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property galleryImages (base name: "galleryImages")', function() {
      // uncomment below and update the code to test the property galleryImages
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property googleItemCondition (base name: "googleItemCondition")', function() {
      // uncomment below and update the code to test the property googleItemCondition
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property hdThumbnailUrl (base name: "hdThumbnailUrl")', function() {
      // uncomment below and update the code to test the property hdThumbnailUrl
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "imageUrl")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property inStock (base name: "inStock")', function() {
      // uncomment below and update the code to test the property inStock
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property isSampleProduct (base name: "isSampleProduct")', function() {
      // uncomment below and update the code to test the property isSampleProduct
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property isShippingRequired (base name: "isShippingRequired")', function() {
      // uncomment below and update the code to test the property isShippingRequired
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property media (base name: "media")', function() {
      // uncomment below and update the code to test the property media
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property originalImage (base name: "originalImage")', function() {
      // uncomment below and update the code to test the property originalImage
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property originalImageUrl (base name: "originalImageUrl")', function() {
      // uncomment below and update the code to test the property originalImageUrl
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property priceInProductList (base name: "priceInProductList")', function() {
      // uncomment below and update the code to test the property priceInProductList
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property productClassId (base name: "productClassId")', function() {
      // uncomment below and update the code to test the property productClassId
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property quantityDelta (base name: "quantityDelta")', function() {
      // uncomment below and update the code to test the property quantityDelta
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property relatedProducts (base name: "relatedProducts")', function() {
      // uncomment below and update the code to test the property relatedProducts
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property seoDescription (base name: "seoDescription")', function() {
      // uncomment below and update the code to test the property seoDescription
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property seoTitle (base name: "seoTitle")', function() {
      // uncomment below and update the code to test the property seoTitle
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property shipping (base name: "shipping")', function() {
      // uncomment below and update the code to test the property shipping
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property showOnFrontpage (base name: "showOnFrontpage")', function() {
      // uncomment below and update the code to test the property showOnFrontpage
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property smallThumbnailUrl (base name: "smallThumbnailUrl")', function() {
      // uncomment below and update the code to test the property smallThumbnailUrl
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property tangible (base name: "tangible")', function() {
      // uncomment below and update the code to test the property tangible
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property taxes (base name: "taxes")', function() {
      // uncomment below and update the code to test the property taxes
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property thumbnailUrl (base name: "thumbnailUrl")', function() {
      // uncomment below and update the code to test the property thumbnailUrl
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property trackQuantity (base name: "trackQuantity")', function() {
      // uncomment below and update the code to test the property trackQuantity
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property unlimited (base name: "unlimited")', function() {
      // uncomment below and update the code to test the property unlimited
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property updateTimestamp (base name: "updateTimestamp")', function() {
      // uncomment below and update the code to test the property updateTimestamp
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property warningLimit (base name: "warningLimit")', function() {
      // uncomment below and update the code to test the property warningLimit
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

    it('should have the property wholesalePrices (base name: "wholesalePrices")', function() {
      // uncomment below and update the code to test the property wholesalePrices
      //var instance = new Ecwid.Product();
      //expect(instance).to.be();
    });

  });

}));
