/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Ecwid);
  }
}(this, function(expect, Ecwid) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Ecwid.ObjectNameApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ObjectNameApi', function() {
    describe('createByObjectName', function() {
      it('should call createByObjectName successfully', function(done) {
        //uncomment below and update the code to test createByObjectName
        //instance.createByObjectName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createObjectNameByChildObjectName', function() {
      it('should call createObjectNameByChildObjectName successfully', function(done) {
        //uncomment below and update the code to test createObjectNameByChildObjectName
        //instance.createObjectNameByChildObjectName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteObjectNameByChildObjectId', function() {
      it('should call deleteObjectNameByChildObjectId successfully', function(done) {
        //uncomment below and update the code to test deleteObjectNameByChildObjectId
        //instance.deleteObjectNameByChildObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteObjectNameByObjectId', function() {
      it('should call deleteObjectNameByObjectId successfully', function(done) {
        //uncomment below and update the code to test deleteObjectNameByObjectId
        //instance.deleteObjectNameByObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getByObjectName', function() {
      it('should call getByObjectName successfully', function(done) {
        //uncomment below and update the code to test getByObjectName
        //instance.getByObjectName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectNameByChildObjectId', function() {
      it('should call getObjectNameByChildObjectId successfully', function(done) {
        //uncomment below and update the code to test getObjectNameByChildObjectId
        //instance.getObjectNameByChildObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectNameByChildObjectName', function() {
      it('should call getObjectNameByChildObjectName successfully', function(done) {
        //uncomment below and update the code to test getObjectNameByChildObjectName
        //instance.getObjectNameByChildObjectName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectNameByObjectId', function() {
      it('should call getObjectNameByObjectId successfully', function(done) {
        //uncomment below and update the code to test getObjectNameByObjectId
        //instance.getObjectNameByObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceObjectNameByChildObjectId', function() {
      it('should call replaceObjectNameByChildObjectId successfully', function(done) {
        //uncomment below and update the code to test replaceObjectNameByChildObjectId
        //instance.replaceObjectNameByChildObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceObjectNameByObjectId', function() {
      it('should call replaceObjectNameByObjectId successfully', function(done) {
        //uncomment below and update the code to test replaceObjectNameByObjectId
        //instance.replaceObjectNameByObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateObjectNameByChildObjectId', function() {
      it('should call updateObjectNameByChildObjectId successfully', function(done) {
        //uncomment below and update the code to test updateObjectNameByChildObjectId
        //instance.updateObjectNameByChildObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateObjectNameByObjectId', function() {
      it('should call updateObjectNameByObjectId successfully', function(done) {
        //uncomment below and update the code to test updateObjectNameByObjectId
        //instance.updateObjectNameByObjectId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
