/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectsMetadataFields model module.
 * @module model/ObjectsMetadataFields
 * @version api-v2
 */
class ObjectsMetadataFields {
    /**
     * Constructs a new <code>ObjectsMetadataFields</code>.
     * @alias module:model/ObjectsMetadataFields
     */
    constructor() { 
        
        ObjectsMetadataFields.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectsMetadataFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectsMetadataFields} obj Optional instance to populate.
     * @return {module:model/ObjectsMetadataFields} The populated <code>ObjectsMetadataFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectsMetadataFields();

            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vendorDisplayName')) {
                obj['vendorDisplayName'] = ApiClient.convertToType(data['vendorDisplayName'], 'String');
            }
            if (data.hasOwnProperty('vendorPath')) {
                obj['vendorPath'] = ApiClient.convertToType(data['vendorPath'], 'String');
            }
            if (data.hasOwnProperty('vendorReadOnly')) {
                obj['vendorReadOnly'] = ApiClient.convertToType(data['vendorReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('vendorRequired')) {
                obj['vendorRequired'] = ApiClient.convertToType(data['vendorRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectsMetadataFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectsMetadataFields</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mask'] && !(typeof data['mask'] === 'string' || data['mask'] instanceof String)) {
            throw new Error("Expected the field `mask` to be a primitive type in the JSON string but got " + data['mask']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['vendorDisplayName'] && !(typeof data['vendorDisplayName'] === 'string' || data['vendorDisplayName'] instanceof String)) {
            throw new Error("Expected the field `vendorDisplayName` to be a primitive type in the JSON string but got " + data['vendorDisplayName']);
        }
        // ensure the json data is a string
        if (data['vendorPath'] && !(typeof data['vendorPath'] === 'string' || data['vendorPath'] instanceof String)) {
            throw new Error("Expected the field `vendorPath` to be a primitive type in the JSON string but got " + data['vendorPath']);
        }

        return true;
    }


}



/**
 * @member {String} mask
 */
ObjectsMetadataFields.prototype['mask'] = undefined;

/**
 * @member {String} type
 */
ObjectsMetadataFields.prototype['type'] = undefined;

/**
 * @member {String} vendorDisplayName
 */
ObjectsMetadataFields.prototype['vendorDisplayName'] = undefined;

/**
 * @member {String} vendorPath
 */
ObjectsMetadataFields.prototype['vendorPath'] = undefined;

/**
 * @member {Boolean} vendorReadOnly
 */
ObjectsMetadataFields.prototype['vendorReadOnly'] = undefined;

/**
 * @member {Boolean} vendorRequired
 */
ObjectsMetadataFields.prototype['vendorRequired'] = undefined;






export default ObjectsMetadataFields;

