/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tax from './Tax';

/**
 * The Item model module.
 * @module model/Item
 * @version api-v2
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * @alias module:model/Item
     */
    constructor() { 
        
        Item.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('couponApplied')) {
                obj['couponApplied'] = ApiClient.convertToType(data['couponApplied'], 'Boolean');
            }
            if (data.hasOwnProperty('digital')) {
                obj['digital'] = ApiClient.convertToType(data['digital'], 'Boolean');
            }
            if (data.hasOwnProperty('fixedShippingRate')) {
                obj['fixedShippingRate'] = ApiClient.convertToType(data['fixedShippingRate'], 'Number');
            }
            if (data.hasOwnProperty('fixedShippingRateOnly')) {
                obj['fixedShippingRateOnly'] = ApiClient.convertToType(data['fixedShippingRateOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('hdThumbnailUrl')) {
                obj['hdThumbnailUrl'] = ApiClient.convertToType(data['hdThumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('isShippingRequired')) {
                obj['isShippingRequired'] = ApiClient.convertToType(data['isShippingRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('productAvailable')) {
                obj['productAvailable'] = ApiClient.convertToType(data['productAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'Number');
            }
            if (data.hasOwnProperty('productPrice')) {
                obj['productPrice'] = ApiClient.convertToType(data['productPrice'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('quantityInStock')) {
                obj['quantityInStock'] = ApiClient.convertToType(data['quantityInStock'], 'Number');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = ApiClient.convertToType(data['shipping'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('smallThumbnailUrl')) {
                obj['smallThumbnailUrl'] = ApiClient.convertToType(data['smallThumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [Tax]);
            }
            if (data.hasOwnProperty('trackQuantity')) {
                obj['trackQuantity'] = ApiClient.convertToType(data['trackQuantity'], 'Boolean');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hdThumbnailUrl'] && !(typeof data['hdThumbnailUrl'] === 'string' || data['hdThumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `hdThumbnailUrl` to be a primitive type in the JSON string but got " + data['hdThumbnailUrl']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['smallThumbnailUrl'] && !(typeof data['smallThumbnailUrl'] === 'string' || data['smallThumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `smallThumbnailUrl` to be a primitive type in the JSON string but got " + data['smallThumbnailUrl']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                Tax.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} categoryId
 */
Item.prototype['categoryId'] = undefined;

/**
 * true/false. shows whether a discount coupon is applied for this item
 * @member {Boolean} couponApplied
 */
Item.prototype['couponApplied'] = undefined;

/**
 * true/false. shows whether the item has downloadable files attached
 * @member {Boolean} digital
 */
Item.prototype['digital'] = undefined;

/**
 * @member {Number} fixedShippingRate
 */
Item.prototype['fixedShippingRate'] = undefined;

/**
 * true/false. shows whether the fixed shipping rate is set for the product
 * @member {Boolean} fixedShippingRateOnly
 */
Item.prototype['fixedShippingRateOnly'] = undefined;

/**
 * @member {String} hdThumbnailUrl
 */
Item.prototype['hdThumbnailUrl'] = undefined;

/**
 * @member {Number} id
 */
Item.prototype['id'] = undefined;

/**
 * @member {String} imageUrl
 */
Item.prototype['imageUrl'] = undefined;

/**
 * true/false. shows whether the item requires shipping
 * @member {Boolean} isShippingRequired
 */
Item.prototype['isShippingRequired'] = undefined;

/**
 * @member {String} name
 */
Item.prototype['name'] = undefined;

/**
 * @member {Number} price
 */
Item.prototype['price'] = undefined;

/**
 * true/false. shows whether product is available or not
 * @member {Boolean} productAvailable
 */
Item.prototype['productAvailable'] = undefined;

/**
 * @member {Number} productId
 */
Item.prototype['productId'] = undefined;

/**
 * @member {Number} productPrice
 */
Item.prototype['productPrice'] = undefined;

/**
 * @member {Number} quantity
 */
Item.prototype['quantity'] = undefined;

/**
 * @member {Number} quantityInStock
 */
Item.prototype['quantityInStock'] = undefined;

/**
 * @member {Number} shipping
 */
Item.prototype['shipping'] = undefined;

/**
 * @member {String} sku
 */
Item.prototype['sku'] = undefined;

/**
 * @member {String} smallThumbnailUrl
 */
Item.prototype['smallThumbnailUrl'] = undefined;

/**
 * @member {Number} tax
 */
Item.prototype['tax'] = undefined;

/**
 * @member {Array.<module:model/Tax>} taxes
 */
Item.prototype['taxes'] = undefined;

/**
 * true/false. shows whether the store admin set to track the quantity of this product and get low stock notifications
 * @member {Boolean} trackQuantity
 */
Item.prototype['trackQuantity'] = undefined;

/**
 * @member {Number} weight
 */
Item.prototype['weight'] = undefined;






export default Item;

