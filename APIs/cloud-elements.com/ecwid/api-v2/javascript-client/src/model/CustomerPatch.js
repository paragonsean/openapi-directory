/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Person from './Person';

/**
 * The CustomerPatch model module.
 * @module model/CustomerPatch
 * @version api-v2
 */
class CustomerPatch {
    /**
     * Constructs a new <code>CustomerPatch</code>.
     * @alias module:model/CustomerPatch
     */
    constructor() { 
        
        CustomerPatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerPatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerPatch} obj Optional instance to populate.
     * @return {module:model/CustomerPatch} The populated <code>CustomerPatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerPatch();

            if (data.hasOwnProperty('billingPerson')) {
                obj['billingPerson'] = Person.constructFromObject(data['billingPerson']);
            }
            if (data.hasOwnProperty('customerGroupId')) {
                obj['customerGroupId'] = ApiClient.convertToType(data['customerGroupId'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('shippingAddresses')) {
                obj['shippingAddresses'] = ApiClient.convertToType(data['shippingAddresses'], [Person]);
            }
            if (data.hasOwnProperty('taxExempt')) {
                obj['taxExempt'] = ApiClient.convertToType(data['taxExempt'], 'Boolean');
            }
            if (data.hasOwnProperty('taxId')) {
                obj['taxId'] = ApiClient.convertToType(data['taxId'], 'Number');
            }
            if (data.hasOwnProperty('taxIdValid')) {
                obj['taxIdValid'] = ApiClient.convertToType(data['taxIdValid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerPatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerPatch</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billingPerson`
        if (data['billingPerson']) { // data not null
          Person.validateJSON(data['billingPerson']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        if (data['shippingAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shippingAddresses'])) {
                throw new Error("Expected the field `shippingAddresses` to be an array in the JSON data but got " + data['shippingAddresses']);
            }
            // validate the optional field `shippingAddresses` (array)
            for (const item of data['shippingAddresses']) {
                Person.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Person} billingPerson
 */
CustomerPatch.prototype['billingPerson'] = undefined;

/**
 * @member {Number} customerGroupId
 */
CustomerPatch.prototype['customerGroupId'] = undefined;

/**
 * customer email
 * @member {String} email
 */
CustomerPatch.prototype['email'] = undefined;

/**
 * customer password
 * @member {String} password
 */
CustomerPatch.prototype['password'] = undefined;

/**
 * @member {Array.<module:model/Person>} shippingAddresses
 */
CustomerPatch.prototype['shippingAddresses'] = undefined;

/**
 * @member {Boolean} taxExempt
 */
CustomerPatch.prototype['taxExempt'] = undefined;

/**
 * @member {Number} taxId
 */
CustomerPatch.prototype['taxId'] = undefined;

/**
 * @member {Boolean} taxIdValid
 */
CustomerPatch.prototype['taxIdValid'] = undefined;






export default CustomerPatch;

