/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Item from './Item';
import Person from './Person';
import ShippingOption from './ShippingOption';

/**
 * The OrderPost model module.
 * @module model/OrderPost
 * @version api-v2
 */
class OrderPost {
    /**
     * Constructs a new <code>OrderPost</code>.
     * @alias module:model/OrderPost
     * @param fulfillmentStatus {String} AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
     * @param paymentStatus {String} AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
     */
    constructor(fulfillmentStatus, paymentStatus) { 
        
        OrderPost.initialize(this, fulfillmentStatus, paymentStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fulfillmentStatus, paymentStatus) { 
        obj['fulfillmentStatus'] = fulfillmentStatus;
        obj['paymentStatus'] = paymentStatus;
    }

    /**
     * Constructs a <code>OrderPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderPost} obj Optional instance to populate.
     * @return {module:model/OrderPost} The populated <code>OrderPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderPost();

            if (data.hasOwnProperty('billingPerson')) {
                obj['billingPerson'] = Person.constructFromObject(data['billingPerson']);
            }
            if (data.hasOwnProperty('couponDiscount')) {
                obj['couponDiscount'] = ApiClient.convertToType(data['couponDiscount'], 'Number');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'Number');
            }
            if (data.hasOwnProperty('customerTaxExempt')) {
                obj['customerTaxExempt'] = ApiClient.convertToType(data['customerTaxExempt'], 'Boolean');
            }
            if (data.hasOwnProperty('customerTaxId')) {
                obj['customerTaxId'] = ApiClient.convertToType(data['customerTaxId'], 'Number');
            }
            if (data.hasOwnProperty('customerTaxIdValid')) {
                obj['customerTaxIdValid'] = ApiClient.convertToType(data['customerTaxIdValid'], 'Boolean');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fulfillmentStatus')) {
                obj['fulfillmentStatus'] = ApiClient.convertToType(data['fulfillmentStatus'], 'String');
            }
            if (data.hasOwnProperty('globalReferer')) {
                obj['globalReferer'] = ApiClient.convertToType(data['globalReferer'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('membershipBasedDiscount')) {
                obj['membershipBasedDiscount'] = ApiClient.convertToType(data['membershipBasedDiscount'], 'Number');
            }
            if (data.hasOwnProperty('orderComments')) {
                obj['orderComments'] = ApiClient.convertToType(data['orderComments'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('paymentModule')) {
                obj['paymentModule'] = ApiClient.convertToType(data['paymentModule'], 'String');
            }
            if (data.hasOwnProperty('paymentStatus')) {
                obj['paymentStatus'] = ApiClient.convertToType(data['paymentStatus'], 'String');
            }
            if (data.hasOwnProperty('privateAdminNotes')) {
                obj['privateAdminNotes'] = ApiClient.convertToType(data['privateAdminNotes'], 'String');
            }
            if (data.hasOwnProperty('refererUrl')) {
                obj['refererUrl'] = ApiClient.convertToType(data['refererUrl'], 'String');
            }
            if (data.hasOwnProperty('reversedTaxApplied')) {
                obj['reversedTaxApplied'] = ApiClient.convertToType(data['reversedTaxApplied'], 'Boolean');
            }
            if (data.hasOwnProperty('sample')) {
                obj['sample'] = ApiClient.convertToType(data['sample'], 'Boolean');
            }
            if (data.hasOwnProperty('shippingMethod')) {
                obj['shippingMethod'] = ApiClient.convertToType(data['shippingMethod'], 'String');
            }
            if (data.hasOwnProperty('shippingOption')) {
                obj['shippingOption'] = ShippingOption.constructFromObject(data['shippingOption']);
            }
            if (data.hasOwnProperty('shippingPerson')) {
                obj['shippingPerson'] = Person.constructFromObject(data['shippingPerson']);
            }
            if (data.hasOwnProperty('subtotal')) {
                obj['subtotal'] = ApiClient.convertToType(data['subtotal'], 'Number');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('totalAndMembershipBasedDiscount')) {
                obj['totalAndMembershipBasedDiscount'] = ApiClient.convertToType(data['totalAndMembershipBasedDiscount'], 'Number');
            }
            if (data.hasOwnProperty('volumeDiscount')) {
                obj['volumeDiscount'] = ApiClient.convertToType(data['volumeDiscount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderPost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderPost.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billingPerson`
        if (data['billingPerson']) { // data not null
          Person.validateJSON(data['billingPerson']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fulfillmentStatus'] && !(typeof data['fulfillmentStatus'] === 'string' || data['fulfillmentStatus'] instanceof String)) {
            throw new Error("Expected the field `fulfillmentStatus` to be a primitive type in the JSON string but got " + data['fulfillmentStatus']);
        }
        // ensure the json data is a string
        if (data['globalReferer'] && !(typeof data['globalReferer'] === 'string' || data['globalReferer'] instanceof String)) {
            throw new Error("Expected the field `globalReferer` to be a primitive type in the JSON string but got " + data['globalReferer']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderComments'] && !(typeof data['orderComments'] === 'string' || data['orderComments'] instanceof String)) {
            throw new Error("Expected the field `orderComments` to be a primitive type in the JSON string but got " + data['orderComments']);
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['paymentModule'] && !(typeof data['paymentModule'] === 'string' || data['paymentModule'] instanceof String)) {
            throw new Error("Expected the field `paymentModule` to be a primitive type in the JSON string but got " + data['paymentModule']);
        }
        // ensure the json data is a string
        if (data['paymentStatus'] && !(typeof data['paymentStatus'] === 'string' || data['paymentStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentStatus` to be a primitive type in the JSON string but got " + data['paymentStatus']);
        }
        // ensure the json data is a string
        if (data['privateAdminNotes'] && !(typeof data['privateAdminNotes'] === 'string' || data['privateAdminNotes'] instanceof String)) {
            throw new Error("Expected the field `privateAdminNotes` to be a primitive type in the JSON string but got " + data['privateAdminNotes']);
        }
        // ensure the json data is a string
        if (data['refererUrl'] && !(typeof data['refererUrl'] === 'string' || data['refererUrl'] instanceof String)) {
            throw new Error("Expected the field `refererUrl` to be a primitive type in the JSON string but got " + data['refererUrl']);
        }
        // ensure the json data is a string
        if (data['shippingMethod'] && !(typeof data['shippingMethod'] === 'string' || data['shippingMethod'] instanceof String)) {
            throw new Error("Expected the field `shippingMethod` to be a primitive type in the JSON string but got " + data['shippingMethod']);
        }
        // validate the optional field `shippingOption`
        if (data['shippingOption']) { // data not null
          ShippingOption.validateJSON(data['shippingOption']);
        }
        // validate the optional field `shippingPerson`
        if (data['shippingPerson']) { // data not null
          Person.validateJSON(data['shippingPerson']);
        }

        return true;
    }


}

OrderPost.RequiredProperties = ["fulfillmentStatus", "paymentStatus"];

/**
 * @member {module:model/Person} billingPerson
 */
OrderPost.prototype['billingPerson'] = undefined;

/**
 * @member {Number} couponDiscount
 */
OrderPost.prototype['couponDiscount'] = undefined;

/**
 * @member {Number} customerId
 */
OrderPost.prototype['customerId'] = undefined;

/**
 * @member {Boolean} customerTaxExempt
 */
OrderPost.prototype['customerTaxExempt'] = undefined;

/**
 * @member {Number} customerTaxId
 */
OrderPost.prototype['customerTaxId'] = undefined;

/**
 * @member {Boolean} customerTaxIdValid
 */
OrderPost.prototype['customerTaxIdValid'] = undefined;

/**
 * @member {Number} discount
 */
OrderPost.prototype['discount'] = undefined;

/**
 * @member {String} email
 */
OrderPost.prototype['email'] = undefined;

/**
 * AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
 * @member {String} fulfillmentStatus
 */
OrderPost.prototype['fulfillmentStatus'] = undefined;

/**
 * @member {String} globalReferer
 */
OrderPost.prototype['globalReferer'] = undefined;

/**
 * @member {Boolean} hidden
 */
OrderPost.prototype['hidden'] = undefined;

/**
 * @member {Array.<module:model/Item>} items
 */
OrderPost.prototype['items'] = undefined;

/**
 * @member {Number} membershipBasedDiscount
 */
OrderPost.prototype['membershipBasedDiscount'] = undefined;

/**
 * @member {String} orderComments
 */
OrderPost.prototype['orderComments'] = undefined;

/**
 * @member {String} paymentMethod
 */
OrderPost.prototype['paymentMethod'] = undefined;

/**
 * @member {String} paymentModule
 */
OrderPost.prototype['paymentModule'] = undefined;

/**
 * AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
 * @member {String} paymentStatus
 */
OrderPost.prototype['paymentStatus'] = undefined;

/**
 * @member {String} privateAdminNotes
 */
OrderPost.prototype['privateAdminNotes'] = undefined;

/**
 * @member {String} refererUrl
 */
OrderPost.prototype['refererUrl'] = undefined;

/**
 * @member {Boolean} reversedTaxApplied
 */
OrderPost.prototype['reversedTaxApplied'] = undefined;

/**
 * @member {Boolean} sample
 */
OrderPost.prototype['sample'] = undefined;

/**
 * @member {String} shippingMethod
 */
OrderPost.prototype['shippingMethod'] = undefined;

/**
 * @member {module:model/ShippingOption} shippingOption
 */
OrderPost.prototype['shippingOption'] = undefined;

/**
 * @member {module:model/Person} shippingPerson
 */
OrderPost.prototype['shippingPerson'] = undefined;

/**
 * @member {Number} subtotal
 */
OrderPost.prototype['subtotal'] = undefined;

/**
 * @member {Number} tax
 */
OrderPost.prototype['tax'] = undefined;

/**
 * @member {Number} total
 */
OrderPost.prototype['total'] = undefined;

/**
 * @member {Number} totalAndMembershipBasedDiscount
 */
OrderPost.prototype['totalAndMembershipBasedDiscount'] = undefined;

/**
 * @member {Number} volumeDiscount
 */
OrderPost.prototype['volumeDiscount'] = undefined;






export default OrderPost;

