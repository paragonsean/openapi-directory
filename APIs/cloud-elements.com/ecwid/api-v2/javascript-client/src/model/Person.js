/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Person model module.
 * @module model/Person
 * @version api-v2
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryName')) {
                obj['countryName'] = ApiClient.convertToType(data['countryName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('stateName')) {
                obj['stateName'] = ApiClient.convertToType(data['stateName'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvinceCode')) {
                obj['stateOrProvinceCode'] = ApiClient.convertToType(data['stateOrProvinceCode'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvinceName')) {
                obj['stateOrProvinceName'] = ApiClient.convertToType(data['stateOrProvinceName'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryName'] && !(typeof data['countryName'] === 'string' || data['countryName'] instanceof String)) {
            throw new Error("Expected the field `countryName` to be a primitive type in the JSON string but got " + data['countryName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['stateName'] && !(typeof data['stateName'] === 'string' || data['stateName'] instanceof String)) {
            throw new Error("Expected the field `stateName` to be a primitive type in the JSON string but got " + data['stateName']);
        }
        // ensure the json data is a string
        if (data['stateOrProvinceCode'] && !(typeof data['stateOrProvinceCode'] === 'string' || data['stateOrProvinceCode'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvinceCode` to be a primitive type in the JSON string but got " + data['stateOrProvinceCode']);
        }
        // ensure the json data is a string
        if (data['stateOrProvinceName'] && !(typeof data['stateOrProvinceName'] === 'string' || data['stateOrProvinceName'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvinceName` to be a primitive type in the JSON string but got " + data['stateOrProvinceName']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
Person.prototype['city'] = undefined;

/**
 * @member {String} companyName
 */
Person.prototype['companyName'] = undefined;

/**
 * @member {String} countryCode
 */
Person.prototype['countryCode'] = undefined;

/**
 * @member {String} countryName
 */
Person.prototype['countryName'] = undefined;

/**
 * @member {String} name
 */
Person.prototype['name'] = undefined;

/**
 * @member {String} phone
 */
Person.prototype['phone'] = undefined;

/**
 * @member {String} postalCode
 */
Person.prototype['postalCode'] = undefined;

/**
 * @member {String} stateName
 */
Person.prototype['stateName'] = undefined;

/**
 * @member {String} stateOrProvinceCode
 */
Person.prototype['stateOrProvinceCode'] = undefined;

/**
 * @member {String} stateOrProvinceName
 */
Person.prototype['stateOrProvinceName'] = undefined;

/**
 * @member {String} street
 */
Person.prototype['street'] = undefined;






export default Person;

