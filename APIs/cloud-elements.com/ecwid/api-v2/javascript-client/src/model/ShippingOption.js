/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShippingOption model module.
 * @module model/ShippingOption
 * @version api-v2
 */
class ShippingOption {
    /**
     * Constructs a new <code>ShippingOption</code>.
     * @alias module:model/ShippingOption
     */
    constructor() { 
        
        ShippingOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShippingOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingOption} obj Optional instance to populate.
     * @return {module:model/ShippingOption} The populated <code>ShippingOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingOption();

            if (data.hasOwnProperty('estimatedTransitTime')) {
                obj['estimatedTransitTime'] = ApiClient.convertToType(data['estimatedTransitTime'], 'String');
            }
            if (data.hasOwnProperty('isPickup')) {
                obj['isPickup'] = ApiClient.convertToType(data['isPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('shippingCarrierName')) {
                obj['shippingCarrierName'] = ApiClient.convertToType(data['shippingCarrierName'], 'String');
            }
            if (data.hasOwnProperty('shippingMethodName')) {
                obj['shippingMethodName'] = ApiClient.convertToType(data['shippingMethodName'], 'String');
            }
            if (data.hasOwnProperty('shippingRate')) {
                obj['shippingRate'] = ApiClient.convertToType(data['shippingRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingOption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['estimatedTransitTime'] && !(typeof data['estimatedTransitTime'] === 'string' || data['estimatedTransitTime'] instanceof String)) {
            throw new Error("Expected the field `estimatedTransitTime` to be a primitive type in the JSON string but got " + data['estimatedTransitTime']);
        }
        // ensure the json data is a string
        if (data['shippingCarrierName'] && !(typeof data['shippingCarrierName'] === 'string' || data['shippingCarrierName'] instanceof String)) {
            throw new Error("Expected the field `shippingCarrierName` to be a primitive type in the JSON string but got " + data['shippingCarrierName']);
        }
        // ensure the json data is a string
        if (data['shippingMethodName'] && !(typeof data['shippingMethodName'] === 'string' || data['shippingMethodName'] instanceof String)) {
            throw new Error("Expected the field `shippingMethodName` to be a primitive type in the JSON string but got " + data['shippingMethodName']);
        }

        return true;
    }


}



/**
 * @member {String} estimatedTransitTime
 */
ShippingOption.prototype['estimatedTransitTime'] = undefined;

/**
 * @member {Boolean} isPickup
 */
ShippingOption.prototype['isPickup'] = undefined;

/**
 * @member {String} shippingCarrierName
 */
ShippingOption.prototype['shippingCarrierName'] = undefined;

/**
 * @member {String} shippingMethodName
 */
ShippingOption.prototype['shippingMethodName'] = undefined;

/**
 * @member {Number} shippingRate
 */
ShippingOption.prototype['shippingRate'] = undefined;






export default ShippingOption;

