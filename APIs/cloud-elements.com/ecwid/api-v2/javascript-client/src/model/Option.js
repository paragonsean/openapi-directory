/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Choice from './Choice';

/**
 * The Option model module.
 * @module model/Option
 * @version api-v2
 */
class Option {
    /**
     * Constructs a new <code>Option</code>.
     * @alias module:model/Option
     * @param name {String} 
     * @param required {Boolean} true/false
     * @param type {String} 
     */
    constructor(name, required, type) { 
        
        Option.initialize(this, name, required, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, required, type) { 
        obj['name'] = name;
        obj['required'] = required;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Option</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Option} obj Optional instance to populate.
     * @return {module:model/Option} The populated <code>Option</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Option();

            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], [Choice]);
            }
            if (data.hasOwnProperty('defaultChoice')) {
                obj['defaultChoice'] = ApiClient.convertToType(data['defaultChoice'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Option</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Option</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Option.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['choices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['choices'])) {
                throw new Error("Expected the field `choices` to be an array in the JSON data but got " + data['choices']);
            }
            // validate the optional field `choices` (array)
            for (const item of data['choices']) {
                Choice.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Option.RequiredProperties = ["name", "required", "type"];

/**
 * @member {Array.<module:model/Choice>} choices
 */
Option.prototype['choices'] = undefined;

/**
 * @member {Number} defaultChoice
 */
Option.prototype['defaultChoice'] = undefined;

/**
 * @member {String} name
 */
Option.prototype['name'] = undefined;

/**
 * true/false
 * @member {Boolean} required
 */
Option.prototype['required'] = undefined;

/**
 * @member {String} type
 */
Option.prototype['type'] = undefined;






export default Option;

