/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribute from './Attribute';

/**
 * The Combination model module.
 * @module model/Combination
 * @version api-v2
 */
class Combination {
    /**
     * Constructs a new <code>Combination</code>.
     * @alias module:model/Combination
     */
    constructor() { 
        
        Combination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Combination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Combination} obj Optional instance to populate.
     * @return {module:model/Combination} The populated <code>Combination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Combination();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [Attribute]);
            }
            if (data.hasOwnProperty('combinationNumber')) {
                obj['combinationNumber'] = ApiClient.convertToType(data['combinationNumber'], 'Number');
            }
            if (data.hasOwnProperty('compareToPrice')) {
                obj['compareToPrice'] = ApiClient.convertToType(data['compareToPrice'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('unlimited')) {
                obj['unlimited'] = ApiClient.convertToType(data['unlimited'], 'Boolean');
            }
            if (data.hasOwnProperty('warningLimit')) {
                obj['warningLimit'] = ApiClient.convertToType(data['warningLimit'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Combination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Combination</code>.
     */
    static validateJSON(data) {
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                Attribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attribute>} attributes
 */
Combination.prototype['attributes'] = undefined;

/**
 * @member {Number} combinationNumber
 */
Combination.prototype['combinationNumber'] = undefined;

/**
 * @member {Number} compareToPrice
 */
Combination.prototype['compareToPrice'] = undefined;

/**
 * @member {Number} id
 */
Combination.prototype['id'] = undefined;

/**
 * @member {Number} price
 */
Combination.prototype['price'] = undefined;

/**
 * @member {Number} quantity
 */
Combination.prototype['quantity'] = undefined;

/**
 * @member {String} sku
 */
Combination.prototype['sku'] = undefined;

/**
 * @member {Boolean} unlimited
 */
Combination.prototype['unlimited'] = undefined;

/**
 * @member {Number} warningLimit
 */
Combination.prototype['warningLimit'] = undefined;

/**
 * @member {Number} weight
 */
Combination.prototype['weight'] = undefined;






export default Combination;

