/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribute from './Attribute';
import Favorite from './Favorite';
import GalleryImage from './GalleryImage';
import Option from './Option';
import ProductDimensions from './ProductDimensions';
import ProductTax from './ProductTax';
import RelatedProducts from './RelatedProducts';
import Shipping from './Shipping';
import Tax from './Tax';
import WholesalePrices from './WholesalePrices';

/**
 * The ProductPost model module.
 * @module model/ProductPost
 * @version api-v2
 */
class ProductPost {
    /**
     * Constructs a new <code>ProductPost</code>.
     * @alias module:model/ProductPost
     */
    constructor() { 
        
        ProductPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductPost} obj Optional instance to populate.
     * @return {module:model/ProductPost} The populated <code>ProductPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductPost();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [Attribute]);
            }
            if (data.hasOwnProperty('categoryIds')) {
                obj['categoryIds'] = ApiClient.convertToType(data['categoryIds'], ['Number']);
            }
            if (data.hasOwnProperty('compareAtPrice')) {
                obj['compareAtPrice'] = ApiClient.convertToType(data['compareAtPrice'], 'Number');
            }
            if (data.hasOwnProperty('compareToPrice')) {
                obj['compareToPrice'] = ApiClient.convertToType(data['compareToPrice'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('defaultCategoryId')) {
                obj['defaultCategoryId'] = ApiClient.convertToType(data['defaultCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ProductDimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('favorites')) {
                obj['favorites'] = Favorite.constructFromObject(data['favorites']);
            }
            if (data.hasOwnProperty('fixedShippingRate')) {
                obj['fixedShippingRate'] = ApiClient.convertToType(data['fixedShippingRate'], 'Number');
            }
            if (data.hasOwnProperty('fixedShippingRateOnly')) {
                obj['fixedShippingRateOnly'] = ApiClient.convertToType(data['fixedShippingRateOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('galleryImages')) {
                obj['galleryImages'] = ApiClient.convertToType(data['galleryImages'], [GalleryImage]);
            }
            if (data.hasOwnProperty('googleItemCondition')) {
                obj['googleItemCondition'] = ApiClient.convertToType(data['googleItemCondition'], 'String');
            }
            if (data.hasOwnProperty('isShippingRequired')) {
                obj['isShippingRequired'] = ApiClient.convertToType(data['isShippingRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Option]);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('productClassId')) {
                obj['productClassId'] = ApiClient.convertToType(data['productClassId'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('relatedProducts')) {
                obj['relatedProducts'] = RelatedProducts.constructFromObject(data['relatedProducts']);
            }
            if (data.hasOwnProperty('seoDescription')) {
                obj['seoDescription'] = ApiClient.convertToType(data['seoDescription'], 'String');
            }
            if (data.hasOwnProperty('seoTitle')) {
                obj['seoTitle'] = ApiClient.convertToType(data['seoTitle'], 'String');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = Shipping.constructFromObject(data['shipping']);
            }
            if (data.hasOwnProperty('showOnFrontpage')) {
                obj['showOnFrontpage'] = ApiClient.convertToType(data['showOnFrontpage'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ProductTax.constructFromObject(data['tax']);
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [Tax]);
            }
            if (data.hasOwnProperty('warningLimit')) {
                obj['warningLimit'] = ApiClient.convertToType(data['warningLimit'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('wholesalePrices')) {
                obj['wholesalePrices'] = WholesalePrices.constructFromObject(data['wholesalePrices']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductPost</code>.
     */
    static validateJSON(data) {
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                Attribute.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categoryIds'])) {
            throw new Error("Expected the field `categoryIds` to be an array in the JSON data but got " + data['categoryIds']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          ProductDimensions.validateJSON(data['dimensions']);
        }
        // validate the optional field `favorites`
        if (data['favorites']) { // data not null
          Favorite.validateJSON(data['favorites']);
        }
        if (data['galleryImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['galleryImages'])) {
                throw new Error("Expected the field `galleryImages` to be an array in the JSON data but got " + data['galleryImages']);
            }
            // validate the optional field `galleryImages` (array)
            for (const item of data['galleryImages']) {
                GalleryImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['googleItemCondition'] && !(typeof data['googleItemCondition'] === 'string' || data['googleItemCondition'] instanceof String)) {
            throw new Error("Expected the field `googleItemCondition` to be a primitive type in the JSON string but got " + data['googleItemCondition']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                Option.validateJSON(item);
            };
        }
        // validate the optional field `relatedProducts`
        if (data['relatedProducts']) { // data not null
          RelatedProducts.validateJSON(data['relatedProducts']);
        }
        // ensure the json data is a string
        if (data['seoDescription'] && !(typeof data['seoDescription'] === 'string' || data['seoDescription'] instanceof String)) {
            throw new Error("Expected the field `seoDescription` to be a primitive type in the JSON string but got " + data['seoDescription']);
        }
        // ensure the json data is a string
        if (data['seoTitle'] && !(typeof data['seoTitle'] === 'string' || data['seoTitle'] instanceof String)) {
            throw new Error("Expected the field `seoTitle` to be a primitive type in the JSON string but got " + data['seoTitle']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          Shipping.validateJSON(data['shipping']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // validate the optional field `tax`
        if (data['tax']) { // data not null
          ProductTax.validateJSON(data['tax']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                Tax.validateJSON(item);
            };
        }
        // validate the optional field `wholesalePrices`
        if (data['wholesalePrices']) { // data not null
          WholesalePrices.validateJSON(data['wholesalePrices']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attribute>} attributes
 */
ProductPost.prototype['attributes'] = undefined;

/**
 * @member {Array.<Number>} categoryIds
 */
ProductPost.prototype['categoryIds'] = undefined;

/**
 * Product’s sale price displayed strike-out in the customer
 * @member {Number} compareAtPrice
 */
ProductPost.prototype['compareAtPrice'] = undefined;

/**
 * @member {Number} compareToPrice
 */
ProductPost.prototype['compareToPrice'] = undefined;

/**
 * @member {Date} created
 */
ProductPost.prototype['created'] = undefined;

/**
 * @member {Number} defaultCategoryId
 */
ProductPost.prototype['defaultCategoryId'] = undefined;

/**
 * Product description in HTML
 * @member {String} description
 */
ProductPost.prototype['description'] = undefined;

/**
 * @member {module:model/ProductDimensions} dimensions
 */
ProductPost.prototype['dimensions'] = undefined;

/**
 * true/false
 * @member {Boolean} enabled
 */
ProductPost.prototype['enabled'] = undefined;

/**
 * @member {module:model/Favorite} favorites
 */
ProductPost.prototype['favorites'] = undefined;

/**
 * @member {Number} fixedShippingRate
 */
ProductPost.prototype['fixedShippingRate'] = undefined;

/**
 * true/false
 * @member {Boolean} fixedShippingRateOnly
 */
ProductPost.prototype['fixedShippingRateOnly'] = undefined;

/**
 * @member {Array.<module:model/GalleryImage>} galleryImages
 */
ProductPost.prototype['galleryImages'] = undefined;

/**
 * Google Item Condition Status
 * @member {String} googleItemCondition
 */
ProductPost.prototype['googleItemCondition'] = undefined;

/**
 * @member {Boolean} isShippingRequired
 */
ProductPost.prototype['isShippingRequired'] = undefined;

/**
 * Product title
 * @member {String} name
 */
ProductPost.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Option>} options
 */
ProductPost.prototype['options'] = undefined;

/**
 * Base Product price
 * @member {Number} price
 */
ProductPost.prototype['price'] = undefined;

/**
 * Id of the product type that this product belongs to.
 * @member {Number} productClassId
 */
ProductPost.prototype['productClassId'] = undefined;

/**
 * Amount of product items in stock.
 * @member {Number} quantity
 */
ProductPost.prototype['quantity'] = undefined;

/**
 * @member {module:model/RelatedProducts} relatedProducts
 */
ProductPost.prototype['relatedProducts'] = undefined;

/**
 * @member {String} seoDescription
 */
ProductPost.prototype['seoDescription'] = undefined;

/**
 * @member {String} seoTitle
 */
ProductPost.prototype['seoTitle'] = undefined;

/**
 * @member {module:model/Shipping} shipping
 */
ProductPost.prototype['shipping'] = undefined;

/**
 * @member {Number} showOnFrontpage
 */
ProductPost.prototype['showOnFrontpage'] = undefined;

/**
 * Product SKU
 * @member {String} sku
 */
ProductPost.prototype['sku'] = undefined;

/**
 * @member {module:model/ProductTax} tax
 */
ProductPost.prototype['tax'] = undefined;

/**
 * @member {Array.<module:model/Tax>} taxes
 */
ProductPost.prototype['taxes'] = undefined;

/**
 * @member {Number} warningLimit
 */
ProductPost.prototype['warningLimit'] = undefined;

/**
 * Product weight in the units defined in store settings
 * @member {Number} weight
 */
ProductPost.prototype['weight'] = undefined;

/**
 * @member {module:model/WholesalePrices} wholesalePrices
 */
ProductPost.prototype['wholesalePrices'] = undefined;






export default ProductPost;

