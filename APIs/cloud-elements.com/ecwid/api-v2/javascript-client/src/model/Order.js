/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalInfo from './AdditionalInfo';
import HandlingFee from './HandlingFee';
import Item from './Item';
import Person from './Person';
import Refunds from './Refunds';
import ShippingOption from './ShippingOption';
import Tax from './Tax';

/**
 * The Order model module.
 * @module model/Order
 * @version api-v2
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     */
    constructor() { 
        
        Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('additionalInfo')) {
                obj['additionalInfo'] = AdditionalInfo.constructFromObject(data['additionalInfo']);
            }
            if (data.hasOwnProperty('billingPerson')) {
                obj['billingPerson'] = Person.constructFromObject(data['billingPerson']);
            }
            if (data.hasOwnProperty('couponDiscount')) {
                obj['couponDiscount'] = ApiClient.convertToType(data['couponDiscount'], 'Number');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'String');
            }
            if (data.hasOwnProperty('createTimestamp')) {
                obj['createTimestamp'] = ApiClient.convertToType(data['createTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'Number');
            }
            if (data.hasOwnProperty('customerTaxExempt')) {
                obj['customerTaxExempt'] = ApiClient.convertToType(data['customerTaxExempt'], 'Boolean');
            }
            if (data.hasOwnProperty('customerTaxId')) {
                obj['customerTaxId'] = ApiClient.convertToType(data['customerTaxId'], 'Number');
            }
            if (data.hasOwnProperty('customerTaxIdValid')) {
                obj['customerTaxIdValid'] = ApiClient.convertToType(data['customerTaxIdValid'], 'Boolean');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fulfillmentStatus')) {
                obj['fulfillmentStatus'] = ApiClient.convertToType(data['fulfillmentStatus'], 'String');
            }
            if (data.hasOwnProperty('globalReferer')) {
                obj['globalReferer'] = ApiClient.convertToType(data['globalReferer'], 'String');
            }
            if (data.hasOwnProperty('handlingFee')) {
                obj['handlingFee'] = HandlingFee.constructFromObject(data['handlingFee']);
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('lastChangeDate')) {
                obj['lastChangeDate'] = ApiClient.convertToType(data['lastChangeDate'], 'Date');
            }
            if (data.hasOwnProperty('membershipBasedDiscount')) {
                obj['membershipBasedDiscount'] = ApiClient.convertToType(data['membershipBasedDiscount'], 'Number');
            }
            if (data.hasOwnProperty('orderComments')) {
                obj['orderComments'] = ApiClient.convertToType(data['orderComments'], 'String');
            }
            if (data.hasOwnProperty('orderNumber')) {
                obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'Number');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('paymentModule')) {
                obj['paymentModule'] = ApiClient.convertToType(data['paymentModule'], 'String');
            }
            if (data.hasOwnProperty('paymentStatus')) {
                obj['paymentStatus'] = ApiClient.convertToType(data['paymentStatus'], 'String');
            }
            if (data.hasOwnProperty('privateAdminNotes')) {
                obj['privateAdminNotes'] = ApiClient.convertToType(data['privateAdminNotes'], 'String');
            }
            if (data.hasOwnProperty('refererUrl')) {
                obj['refererUrl'] = ApiClient.convertToType(data['refererUrl'], 'String');
            }
            if (data.hasOwnProperty('refundedAmount')) {
                obj['refundedAmount'] = ApiClient.convertToType(data['refundedAmount'], 'Number');
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [Refunds]);
            }
            if (data.hasOwnProperty('reversedTaxApplied')) {
                obj['reversedTaxApplied'] = ApiClient.convertToType(data['reversedTaxApplied'], 'Boolean');
            }
            if (data.hasOwnProperty('sample')) {
                obj['sample'] = ApiClient.convertToType(data['sample'], 'Boolean');
            }
            if (data.hasOwnProperty('shippingMethod')) {
                obj['shippingMethod'] = ApiClient.convertToType(data['shippingMethod'], 'String');
            }
            if (data.hasOwnProperty('shippingOption')) {
                obj['shippingOption'] = ShippingOption.constructFromObject(data['shippingOption']);
            }
            if (data.hasOwnProperty('shippingPerson')) {
                obj['shippingPerson'] = Person.constructFromObject(data['shippingPerson']);
            }
            if (data.hasOwnProperty('subtotal')) {
                obj['subtotal'] = ApiClient.convertToType(data['subtotal'], 'Number');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
            if (data.hasOwnProperty('taxesOnShipping')) {
                obj['taxesOnShipping'] = ApiClient.convertToType(data['taxesOnShipping'], [Tax]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('totalAndMembershipBasedDiscount')) {
                obj['totalAndMembershipBasedDiscount'] = ApiClient.convertToType(data['totalAndMembershipBasedDiscount'], 'Number');
            }
            if (data.hasOwnProperty('trackingNumber')) {
                obj['trackingNumber'] = ApiClient.convertToType(data['trackingNumber'], 'String');
            }
            if (data.hasOwnProperty('updateDate')) {
                obj['updateDate'] = ApiClient.convertToType(data['updateDate'], 'String');
            }
            if (data.hasOwnProperty('updateTimestamp')) {
                obj['updateTimestamp'] = ApiClient.convertToType(data['updateTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('usdTotal')) {
                obj['usdTotal'] = ApiClient.convertToType(data['usdTotal'], 'Number');
            }
            if (data.hasOwnProperty('vendorNumber')) {
                obj['vendorNumber'] = ApiClient.convertToType(data['vendorNumber'], 'Number');
            }
            if (data.hasOwnProperty('vendorOrderNumber')) {
                obj['vendorOrderNumber'] = ApiClient.convertToType(data['vendorOrderNumber'], 'String');
            }
            if (data.hasOwnProperty('volumeDiscount')) {
                obj['volumeDiscount'] = ApiClient.convertToType(data['volumeDiscount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // validate the optional field `additionalInfo`
        if (data['additionalInfo']) { // data not null
          AdditionalInfo.validateJSON(data['additionalInfo']);
        }
        // validate the optional field `billingPerson`
        if (data['billingPerson']) { // data not null
          Person.validateJSON(data['billingPerson']);
        }
        // ensure the json data is a string
        if (data['createDate'] && !(typeof data['createDate'] === 'string' || data['createDate'] instanceof String)) {
            throw new Error("Expected the field `createDate` to be a primitive type in the JSON string but got " + data['createDate']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fulfillmentStatus'] && !(typeof data['fulfillmentStatus'] === 'string' || data['fulfillmentStatus'] instanceof String)) {
            throw new Error("Expected the field `fulfillmentStatus` to be a primitive type in the JSON string but got " + data['fulfillmentStatus']);
        }
        // ensure the json data is a string
        if (data['globalReferer'] && !(typeof data['globalReferer'] === 'string' || data['globalReferer'] instanceof String)) {
            throw new Error("Expected the field `globalReferer` to be a primitive type in the JSON string but got " + data['globalReferer']);
        }
        // validate the optional field `handlingFee`
        if (data['handlingFee']) { // data not null
          HandlingFee.validateJSON(data['handlingFee']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderComments'] && !(typeof data['orderComments'] === 'string' || data['orderComments'] instanceof String)) {
            throw new Error("Expected the field `orderComments` to be a primitive type in the JSON string but got " + data['orderComments']);
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['paymentModule'] && !(typeof data['paymentModule'] === 'string' || data['paymentModule'] instanceof String)) {
            throw new Error("Expected the field `paymentModule` to be a primitive type in the JSON string but got " + data['paymentModule']);
        }
        // ensure the json data is a string
        if (data['paymentStatus'] && !(typeof data['paymentStatus'] === 'string' || data['paymentStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentStatus` to be a primitive type in the JSON string but got " + data['paymentStatus']);
        }
        // ensure the json data is a string
        if (data['privateAdminNotes'] && !(typeof data['privateAdminNotes'] === 'string' || data['privateAdminNotes'] instanceof String)) {
            throw new Error("Expected the field `privateAdminNotes` to be a primitive type in the JSON string but got " + data['privateAdminNotes']);
        }
        // ensure the json data is a string
        if (data['refererUrl'] && !(typeof data['refererUrl'] === 'string' || data['refererUrl'] instanceof String)) {
            throw new Error("Expected the field `refererUrl` to be a primitive type in the JSON string but got " + data['refererUrl']);
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                Refunds.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shippingMethod'] && !(typeof data['shippingMethod'] === 'string' || data['shippingMethod'] instanceof String)) {
            throw new Error("Expected the field `shippingMethod` to be a primitive type in the JSON string but got " + data['shippingMethod']);
        }
        // validate the optional field `shippingOption`
        if (data['shippingOption']) { // data not null
          ShippingOption.validateJSON(data['shippingOption']);
        }
        // validate the optional field `shippingPerson`
        if (data['shippingPerson']) { // data not null
          Person.validateJSON(data['shippingPerson']);
        }
        if (data['taxesOnShipping']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxesOnShipping'])) {
                throw new Error("Expected the field `taxesOnShipping` to be an array in the JSON data but got " + data['taxesOnShipping']);
            }
            // validate the optional field `taxesOnShipping` (array)
            for (const item of data['taxesOnShipping']) {
                Tax.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trackingNumber'] && !(typeof data['trackingNumber'] === 'string' || data['trackingNumber'] instanceof String)) {
            throw new Error("Expected the field `trackingNumber` to be a primitive type in the JSON string but got " + data['trackingNumber']);
        }
        // ensure the json data is a string
        if (data['updateDate'] && !(typeof data['updateDate'] === 'string' || data['updateDate'] instanceof String)) {
            throw new Error("Expected the field `updateDate` to be a primitive type in the JSON string but got " + data['updateDate']);
        }
        // ensure the json data is a string
        if (data['vendorOrderNumber'] && !(typeof data['vendorOrderNumber'] === 'string' || data['vendorOrderNumber'] instanceof String)) {
            throw new Error("Expected the field `vendorOrderNumber` to be a primitive type in the JSON string but got " + data['vendorOrderNumber']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdditionalInfo} additionalInfo
 */
Order.prototype['additionalInfo'] = undefined;

/**
 * @member {module:model/Person} billingPerson
 */
Order.prototype['billingPerson'] = undefined;

/**
 * @member {Number} couponDiscount
 */
Order.prototype['couponDiscount'] = undefined;

/**
 * Ex: 2015-02-02 16:11:52 +0000
 * @member {String} createDate
 */
Order.prototype['createDate'] = undefined;

/**
 * @member {Number} createTimestamp
 */
Order.prototype['createTimestamp'] = undefined;

/**
 * @member {Number} customerId
 */
Order.prototype['customerId'] = undefined;

/**
 * @member {Boolean} customerTaxExempt
 */
Order.prototype['customerTaxExempt'] = undefined;

/**
 * @member {Number} customerTaxId
 */
Order.prototype['customerTaxId'] = undefined;

/**
 * @member {Boolean} customerTaxIdValid
 */
Order.prototype['customerTaxIdValid'] = undefined;

/**
 * @member {Number} discount
 */
Order.prototype['discount'] = undefined;

/**
 * @member {String} email
 */
Order.prototype['email'] = undefined;

/**
 * AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
 * @member {String} fulfillmentStatus
 */
Order.prototype['fulfillmentStatus'] = undefined;

/**
 * @member {String} globalReferer
 */
Order.prototype['globalReferer'] = undefined;

/**
 * @member {module:model/HandlingFee} handlingFee
 */
Order.prototype['handlingFee'] = undefined;

/**
 * @member {Boolean} hidden
 */
Order.prototype['hidden'] = undefined;

/**
 * @member {String} ipAddress
 */
Order.prototype['ipAddress'] = undefined;

/**
 * @member {Array.<module:model/Item>} items
 */
Order.prototype['items'] = undefined;

/**
 * Ex: 2015-02-03 15:30:08
 * @member {Date} lastChangeDate
 */
Order.prototype['lastChangeDate'] = undefined;

/**
 * @member {Number} membershipBasedDiscount
 */
Order.prototype['membershipBasedDiscount'] = undefined;

/**
 * @member {String} orderComments
 */
Order.prototype['orderComments'] = undefined;

/**
 * Unique order number without prefixes/suffixes
 * @member {Number} orderNumber
 */
Order.prototype['orderNumber'] = undefined;

/**
 * @member {String} paymentMethod
 */
Order.prototype['paymentMethod'] = undefined;

/**
 * @member {String} paymentModule
 */
Order.prototype['paymentModule'] = undefined;

/**
 * AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
 * @member {String} paymentStatus
 */
Order.prototype['paymentStatus'] = undefined;

/**
 * @member {String} privateAdminNotes
 */
Order.prototype['privateAdminNotes'] = undefined;

/**
 * @member {String} refererUrl
 */
Order.prototype['refererUrl'] = undefined;

/**
 * @member {Number} refundedAmount
 */
Order.prototype['refundedAmount'] = undefined;

/**
 * @member {Array.<module:model/Refunds>} refunds
 */
Order.prototype['refunds'] = undefined;

/**
 * @member {Boolean} reversedTaxApplied
 */
Order.prototype['reversedTaxApplied'] = undefined;

/**
 * @member {Boolean} sample
 */
Order.prototype['sample'] = undefined;

/**
 * @member {String} shippingMethod
 */
Order.prototype['shippingMethod'] = undefined;

/**
 * @member {module:model/ShippingOption} shippingOption
 */
Order.prototype['shippingOption'] = undefined;

/**
 * @member {module:model/Person} shippingPerson
 */
Order.prototype['shippingPerson'] = undefined;

/**
 * @member {Number} subtotal
 */
Order.prototype['subtotal'] = undefined;

/**
 * @member {Number} tax
 */
Order.prototype['tax'] = undefined;

/**
 * @member {Array.<module:model/Tax>} taxesOnShipping
 */
Order.prototype['taxesOnShipping'] = undefined;

/**
 * @member {Number} total
 */
Order.prototype['total'] = undefined;

/**
 * @member {Number} totalAndMembershipBasedDiscount
 */
Order.prototype['totalAndMembershipBasedDiscount'] = undefined;

/**
 * @member {String} trackingNumber
 */
Order.prototype['trackingNumber'] = undefined;

/**
 * Ex: 2015-02-03 15:30:08 +0000
 * @member {String} updateDate
 */
Order.prototype['updateDate'] = undefined;

/**
 * @member {Number} updateTimestamp
 */
Order.prototype['updateTimestamp'] = undefined;

/**
 * @member {Number} usdTotal
 */
Order.prototype['usdTotal'] = undefined;

/**
 * @member {Number} vendorNumber
 */
Order.prototype['vendorNumber'] = undefined;

/**
 * @member {String} vendorOrderNumber
 */
Order.prototype['vendorOrderNumber'] = undefined;

/**
 * @member {Number} volumeDiscount
 */
Order.prototype['volumeDiscount'] = undefined;






export default Order;

