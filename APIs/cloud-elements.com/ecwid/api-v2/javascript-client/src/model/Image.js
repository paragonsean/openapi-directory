/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Image model module.
 * @module model/Image
 * @version api-v2
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * @alias module:model/Image
     */
    constructor() { 
        
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image1500pxUrl')) {
                obj['image1500pxUrl'] = ApiClient.convertToType(data['image1500pxUrl'], 'String');
            }
            if (data.hasOwnProperty('image160pxUrl')) {
                obj['image160pxUrl'] = ApiClient.convertToType(data['image160pxUrl'], 'String');
            }
            if (data.hasOwnProperty('image400pxUrl')) {
                obj['image400pxUrl'] = ApiClient.convertToType(data['image400pxUrl'], 'String');
            }
            if (data.hasOwnProperty('image800pxUrl')) {
                obj['image800pxUrl'] = ApiClient.convertToType(data['image800pxUrl'], 'String');
            }
            if (data.hasOwnProperty('imageOriginalUrl')) {
                obj['imageOriginalUrl'] = ApiClient.convertToType(data['imageOriginalUrl'], 'String');
            }
            if (data.hasOwnProperty('isMain')) {
                obj['isMain'] = ApiClient.convertToType(data['isMain'], 'Boolean');
            }
            if (data.hasOwnProperty('orderBy')) {
                obj['orderBy'] = ApiClient.convertToType(data['orderBy'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image1500pxUrl'] && !(typeof data['image1500pxUrl'] === 'string' || data['image1500pxUrl'] instanceof String)) {
            throw new Error("Expected the field `image1500pxUrl` to be a primitive type in the JSON string but got " + data['image1500pxUrl']);
        }
        // ensure the json data is a string
        if (data['image160pxUrl'] && !(typeof data['image160pxUrl'] === 'string' || data['image160pxUrl'] instanceof String)) {
            throw new Error("Expected the field `image160pxUrl` to be a primitive type in the JSON string but got " + data['image160pxUrl']);
        }
        // ensure the json data is a string
        if (data['image400pxUrl'] && !(typeof data['image400pxUrl'] === 'string' || data['image400pxUrl'] instanceof String)) {
            throw new Error("Expected the field `image400pxUrl` to be a primitive type in the JSON string but got " + data['image400pxUrl']);
        }
        // ensure the json data is a string
        if (data['image800pxUrl'] && !(typeof data['image800pxUrl'] === 'string' || data['image800pxUrl'] instanceof String)) {
            throw new Error("Expected the field `image800pxUrl` to be a primitive type in the JSON string but got " + data['image800pxUrl']);
        }
        // ensure the json data is a string
        if (data['imageOriginalUrl'] && !(typeof data['imageOriginalUrl'] === 'string' || data['imageOriginalUrl'] instanceof String)) {
            throw new Error("Expected the field `imageOriginalUrl` to be a primitive type in the JSON string but got " + data['imageOriginalUrl']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Image.prototype['id'] = undefined;

/**
 * @member {String} image1500pxUrl
 */
Image.prototype['image1500pxUrl'] = undefined;

/**
 * @member {String} image160pxUrl
 */
Image.prototype['image160pxUrl'] = undefined;

/**
 * @member {String} image400pxUrl
 */
Image.prototype['image400pxUrl'] = undefined;

/**
 * @member {String} image800pxUrl
 */
Image.prototype['image800pxUrl'] = undefined;

/**
 * @member {String} imageOriginalUrl
 */
Image.prototype['imageOriginalUrl'] = undefined;

/**
 * @member {Boolean} isMain
 */
Image.prototype['isMain'] = undefined;

/**
 * @member {Number} orderBy
 */
Image.prototype['orderBy'] = undefined;






export default Image;

