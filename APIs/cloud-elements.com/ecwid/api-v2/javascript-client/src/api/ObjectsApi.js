/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ObjectsMetadata from '../model/ObjectsMetadata';
import SwaggerDocs from '../model/SwaggerDocs';

/**
* Objects service.
* @module api/ObjectsApi
* @version api-v2
*/
export default class ObjectsApi {

    /**
    * Constructs a new ObjectsApi. 
    * @alias module:api/ObjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getObjects operation.
     * @callback module:api/ObjectsApi~getObjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the available objects.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [elementsVersion] Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen
     * @param {module:api/ObjectsApi~getObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getObjects(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getObjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Elements-Version': opts['elementsVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectsObjectNameDocs operation.
     * @callback module:api/ObjectsApi~getObjectsObjectNameDocsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggerDocs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get swagger docs for an object.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [discovery] Include discovery metadata in definitions
     * @param {Boolean} [resolveReferences] Optionally resolve swagger references for an inline object definition
     * @param {Boolean} [basic] Include only OpenAPI / Swagger properties in definitions
     * @param {String} [version = '-1')] The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger
     * @param {module:api/ObjectsApi~getObjectsObjectNameDocsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggerDocs}
     */
    getObjectsObjectNameDocs(authorization, objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getObjectsObjectNameDocs");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getObjectsObjectNameDocs");
      }

      let pathParams = {
        'objectName': objectName
      };
      let queryParams = {
        'discovery': opts['discovery'],
        'resolveReferences': opts['resolveReferences'],
        'basic': opts['basic'],
        'version': opts['version']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SwaggerDocs;
      return this.apiClient.callApi(
        '/objects/{objectName}/docs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectsObjectNameMetadata operation.
     * @callback module:api/ObjectsApi~getObjectsObjectNameMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectsMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the field for an object.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [elementsVersion] Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen
     * @param {module:api/ObjectsApi~getObjectsObjectNameMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectsMetadata}
     */
    getObjectsObjectNameMetadata(authorization, objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getObjectsObjectNameMetadata");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getObjectsObjectNameMetadata");
      }

      let pathParams = {
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Elements-Version': opts['elementsVersion']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ObjectsMetadata;
      return this.apiClient.callApi(
        '/objects/{objectName}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
