/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkDownloadRequest from '../model/BulkDownloadRequest';
import BulkJobList from '../model/BulkJobList';
import BulkQuery from '../model/BulkQuery';
import BulkStatus from '../model/BulkStatus';
import BulkUploadResponse from '../model/BulkUploadResponse';

/**
* Bulk service.
* @module api/BulkApi
* @version api-v2
*/
export default class BulkApi {

    /**
    * Constructs a new BulkApi. 
    * @alias module:api/BulkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBulkByObjectName operation.
     * @callback module:api/BulkApi~createBulkByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file of objects to be bulk uploaded to the provider.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object for which data needs to be uploaded.
     * @param {Object} opts Optional parameters
     * @param {String} [elementsAsyncCallbackUrl] The Url to send the notification to when the Job is completed
     * @param {String} [metaData] Optional JSON MetaData that contains callback-payload, path or format, ex: {\\\"path\\\" :&lt;path for the sub resource&gt;, \\\"format\\\": &lt;json/csv&gt;, \\\"callback-payload\\\":&lt;json&gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\\\"listId\\\":\\\"1014\\\",\\\"action\\\":\\\"upsert\\\"}. If the Upload format is JSON pass metadata as {\\\"format\\\":\\\"json\\\"}. callback-payload - is passed back in bulk job notification 
     * @param {File} [file] The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line
     * @param {module:api/BulkApi~createBulkByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkUploadResponse}
     */
    createBulkByObjectName(authorization, objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createBulkByObjectName");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling createBulkByObjectName");
      }

      let pathParams = {
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Elements-Async-Callback-Url': opts['elementsAsyncCallbackUrl']
      };
      let formParams = {
        'metaData': opts['metaData'],
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = BulkUploadResponse;
      return this.apiClient.callApi(
        '/bulk/{objectName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBulkDownload operation.
     * @callback module:api/BulkApi~createBulkDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new bulk download job (asynchronous)
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {module:model/BulkDownloadRequest} body The object body
     * @param {module:api/BulkApi~createBulkDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkQuery}
     */
    createBulkDownload(authorization, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createBulkDownload");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBulkDownload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BulkQuery;
      return this.apiClient.callApi(
        '/bulk/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBulkQuery operation.
     * @callback module:api/BulkApi~createBulkQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an asynchronous bulk query job.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {Object} opts Optional parameters
     * @param {String} [elementsAsyncCallbackUrl] The Url to send the notification to when the Job is completed
     * @param {String} [q] The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.
     * @param {String} [lastRunDate] The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'
     * @param {String} [from] The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'
     * @param {String} [to] The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'
     * @param {String} [metaData] Optional JSON MetaData that contains callback-payload and fileName, ex: {\\\"callback-payload\\\" : <Json> , \\\"fileName\\\" : \\\"{Date format}_Name of the file\\\"}. If the fileName is MyFile then pass metadata as {\\\"fileName\\\" : \\\"{yyyy-MM-dd HH:mm:ss}_MyFile\\\"}. The valid date formats are \\\"yyyy-MM-dd'T'HH:mm:ssXXX\\\", \\\"yyyy-MM-dd'T'HH:mm:ss'Z'\\\", \\\"yyyy-MM-dd'T'HH:mm:ss.SXXX\\\", \\\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\\\", \\\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\\\", \\\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\\\", \\\"yyyy-MM-dd HH:mm:ss\\\", \\\"yyyy.MM.dd G 'at' HH:mm:ss z\\\", \\\"h:mm a\\\", \\\"yyyyy.MMMMM.dd GGG hh:mm aaa\\\" and \\\"yyMMddHHmmssZ\\\". callback-payload - is passed back in bulk job notification 
     * @param {module:api/BulkApi~createBulkQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkQuery}
     */
    createBulkQuery(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createBulkQuery");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'lastRunDate': opts['lastRunDate'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'Authorization': authorization,
        'Elements-Async-Callback-Url': opts['elementsAsyncCallbackUrl']
      };
      let formParams = {
        'metaData': opts['metaData']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = BulkQuery;
      return this.apiClient.callApi(
        '/bulk/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkByObjectName operation.
     * @callback module:api/BulkApi~getBulkByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the results of an asynchronous bulk query.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the bulk job
     * @param {String} objectName The name of the object
     * @param {module:api/BulkApi~getBulkByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBulkByObjectName(authorization, id, objectName, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBulkByObjectName");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBulkByObjectName");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getBulkByObjectName");
      }

      let pathParams = {
        'id': id,
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/csv', 'application/json', 'application/jsonl'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bulk/{id}/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkErrors operation.
     * @callback module:api/BulkApi~getBulkErrorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the errors of a bulk job.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the bulk job to retrieve its errors.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The page size for pagination, which defaults to 200 if not supplied
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/BulkApi~getBulkErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getBulkErrors(authorization, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBulkErrors");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBulkErrors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/bulk/{id}/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkJobs operation.
     * @callback module:api/BulkApi~getBulkJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkJobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all the bulk jobs for an instance
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {Object} opts Optional parameters
     * @param {String} [where] The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {Number} [pageSize] The page size for pagination, which defaults to 200 if not supplied
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/BulkApi~getBulkJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkJobList}
     */
    getBulkJobs(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBulkJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'nextPage': opts['nextPage'],
        'pageSize': opts['pageSize'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BulkJobList;
      return this.apiClient.callApi(
        '/bulk/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkStatus operation.
     * @callback module:api/BulkApi~getBulkStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of a bulk job.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the bulk job to retrieve its status.
     * @param {module:api/BulkApi~getBulkStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkStatus}
     */
    getBulkStatus(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBulkStatus");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBulkStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BulkStatus;
      return this.apiClient.callApi(
        '/bulk/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBulkCancel operation.
     * @callback module:api/BulkApi~replaceBulkCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an asynchronous bulk query job.
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the bulk job to cancel.
     * @param {module:api/BulkApi~replaceBulkCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkStatus}
     */
    replaceBulkCancel(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling replaceBulkCancel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replaceBulkCancel");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BulkStatus;
      return this.apiClient.callApi(
        '/bulk/{id}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
