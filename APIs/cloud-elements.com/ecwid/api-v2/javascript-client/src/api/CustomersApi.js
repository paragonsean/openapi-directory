/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Customer from '../model/Customer';
import CustomerPatch from '../model/CustomerPatch';
import CustomerPost from '../model/CustomerPost';
import Order from '../model/Order';

/**
* Customers service.
* @module api/CustomersApi
* @version api-v2
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomer operation.
     * @callback module:api/CustomersApi~createCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new customer in eCommerce system.With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new customer
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {module:model/CustomerPost} customer The customer object to be created
     * @param {module:api/CustomersApi~createCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    createCustomer(authorization, customer, callback) {
      let postBody = customer;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createCustomer");
      }
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling createCustomer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Customer;
      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerById operation.
     * @callback module:api/CustomersApi~deleteCustomerByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a customer associated with a given ID from your eCommerce system. Specifying a customer associated with a given ID that does not exist will result in an error message
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the customer to delete from the eCommerce system
     * @param {module:api/CustomersApi~deleteCustomerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomerById(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCustomerById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerById operation.
     * @callback module:api/CustomersApi~getCustomerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a customer associated with a given ID from the eCommerce system. Specifying a customer with an ID that does not exist will result in an error response
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the customer to retrieve from the eCommerce system
     * @param {module:api/CustomersApi~getCustomerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    getCustomerById(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCustomerById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Customer;
      return this.apiClient.callApi(
        '/customers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomers operation.
     * @callback module:api/CustomersApi~getCustomersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Customer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find customers in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {Object} opts Optional parameters
     * @param {String} [where] The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field='value'). <p>Supported search terms: customer_id and customer_email. All other search criteria are ignored. NOTE: When searching by customer_id, do not quote the value (ex: customer_id=15693430), as the ID is a number rather than a string.  When searching by email, quote the value (ex: customer_email='a@b.c'), as the email parameter is a string
     * @param {Number} [pageSize] The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/CustomersApi~getCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Customer>}
     */
    getCustomers(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCustomers");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Customer];
      return this.apiClient.callApi(
        '/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersOrders operation.
     * @callback module:api/CustomersApi~getCustomersOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find orders in the customer associated with a given ID. If the customer does not exist, an error response will be returned. If no orders are found in the given customer then an empty array will be returned
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the customer to get orders form in the eCommerce system
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/CustomersApi~getCustomersOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    getCustomersOrders(authorization, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCustomersOrders");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomersOrders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Order];
      return this.apiClient.callApi(
        '/customers/{id}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomerById operation.
     * @callback module:api/CustomersApi~updateCustomerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an customer associated with a given ID in the eCommerce system.The update API uses the PATCH HTTP verb, so only those fields provided in the customer object will be updated, and those fields not provided will be left alone. Updating a customer with a specified ID that does not exist will result in an error response
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the customer to update in the eCommerce system
     * @param {module:model/CustomerPatch} customer The customer object to be created
     * @param {module:api/CustomersApi~updateCustomerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    updateCustomerById(authorization, id, customer, callback) {
      let postBody = customer;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateCustomerById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCustomerById");
      }
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling updateCustomerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Customer;
      return this.apiClient.callApi(
        '/customers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
