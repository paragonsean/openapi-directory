/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelObject from '../model/ModelObject';

/**
* ObjectName service.
* @module api/ObjectNameApi
* @version api-v2
*/
export default class ObjectNameApi {

    /**
    * Constructs a new ObjectNameApi. 
    * @alias module:api/ObjectNameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createByObjectName operation.
     * @callback module:api/ObjectNameApi~createByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {module:model/ModelObject} body The {objectName}
     * @param {module:api/ObjectNameApi~createByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createByObjectName(authorization, objectName, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createByObjectName");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling createByObjectName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createByObjectName");
      }

      let pathParams = {
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{objectName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createObjectNameByChildObjectName operation.
     * @callback module:api/ObjectNameApi~createObjectNameByChildObjectNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} objectId The {objectName} ID
     * @param {String} childObjectName The name of the object
     * @param {module:model/ModelObject} body The {childObjectName}
     * @param {module:api/ObjectNameApi~createObjectNameByChildObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createObjectNameByChildObjectName(authorization, objectName, objectId, childObjectName, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createObjectNameByChildObjectName");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling createObjectNameByChildObjectName");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling createObjectNameByChildObjectName");
      }
      // verify the required parameter 'childObjectName' is set
      if (childObjectName === undefined || childObjectName === null) {
        throw new Error("Missing the required parameter 'childObjectName' when calling createObjectNameByChildObjectName");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createObjectNameByChildObjectName");
      }

      let pathParams = {
        'objectName': objectName,
        'objectId': objectId,
        'childObjectName': childObjectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}/{childObjectName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObjectNameByChildObjectId operation.
     * @callback module:api/ObjectNameApi~deleteObjectNameByChildObjectIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an {childObjectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} childObjectName The name of the childObjectName
     * @param {String} objectId The {objectName} ID
     * @param {String} childObjectId The {childObjectName} ID
     * @param {module:api/ObjectNameApi~deleteObjectNameByChildObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteObjectNameByChildObjectId(authorization, objectName, childObjectName, objectId, childObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling deleteObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectName' is set
      if (childObjectName === undefined || childObjectName === null) {
        throw new Error("Missing the required parameter 'childObjectName' when calling deleteObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling deleteObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectId' is set
      if (childObjectId === undefined || childObjectId === null) {
        throw new Error("Missing the required parameter 'childObjectId' when calling deleteObjectNameByChildObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'childObjectName': childObjectName,
        'objectId': objectId,
        'childObjectId': childObjectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}/{childObjectName}/{childObjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObjectNameByObjectId operation.
     * @callback module:api/ObjectNameApi~deleteObjectNameByObjectIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} objectId The {objectName} ID
     * @param {module:api/ObjectNameApi~deleteObjectNameByObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteObjectNameByObjectId(authorization, objectName, objectId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteObjectNameByObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling deleteObjectNameByObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling deleteObjectNameByObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'objectId': objectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByObjectName operation.
     * @callback module:api/ObjectNameApi~getByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {Object} opts Optional parameters
     * @param {String} [where] The CEQL search expression.
     * @param {Number} [pageSize] The page size. Defaults to 200 if not provided. Maximum of 5000.
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/ObjectNameApi~getByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelObject>}
     */
    getByObjectName(authorization, objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getByObjectName");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getByObjectName");
      }

      let pathParams = {
        'objectName': objectName
      };
      let queryParams = {
        'where': opts['where'],
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ModelObject];
      return this.apiClient.callApi(
        '/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectNameByChildObjectId operation.
     * @callback module:api/ObjectNameApi~getObjectNameByChildObjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an {childObjectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} childObjectName The name of the childObjectName
     * @param {String} objectId The {objectName} ID
     * @param {String} childObjectId The {childObjectName} ID
     * @param {module:api/ObjectNameApi~getObjectNameByChildObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getObjectNameByChildObjectId(authorization, objectName, childObjectName, objectId, childObjectId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectName' is set
      if (childObjectName === undefined || childObjectName === null) {
        throw new Error("Missing the required parameter 'childObjectName' when calling getObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling getObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectId' is set
      if (childObjectId === undefined || childObjectId === null) {
        throw new Error("Missing the required parameter 'childObjectId' when calling getObjectNameByChildObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'childObjectName': childObjectName,
        'objectId': objectId,
        'childObjectId': childObjectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ModelObject;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}/{childObjectName}/{childObjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectNameByChildObjectName operation.
     * @callback module:api/ObjectNameApi~getObjectNameByChildObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for {childObjectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} objectId The {objectName} ID
     * @param {String} childObjectName The name of the childObjectName
     * @param {Object} opts Optional parameters
     * @param {String} [where] The CEQL search expression.
     * @param {Number} [pageSize] The page size. Defaults to 200 if not provided. Maximum of 5000.
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/ObjectNameApi~getObjectNameByChildObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelObject>}
     */
    getObjectNameByChildObjectName(authorization, objectName, objectId, childObjectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getObjectNameByChildObjectName");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getObjectNameByChildObjectName");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling getObjectNameByChildObjectName");
      }
      // verify the required parameter 'childObjectName' is set
      if (childObjectName === undefined || childObjectName === null) {
        throw new Error("Missing the required parameter 'childObjectName' when calling getObjectNameByChildObjectName");
      }

      let pathParams = {
        'objectName': objectName,
        'objectId': objectId,
        'childObjectName': childObjectName
      };
      let queryParams = {
        'where': opts['where'],
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ModelObject];
      return this.apiClient.callApi(
        '/{objectName}/{objectId}/{childObjectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectNameByObjectId operation.
     * @callback module:api/ObjectNameApi~getObjectNameByObjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} objectId The {objectName} ID
     * @param {module:api/ObjectNameApi~getObjectNameByObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getObjectNameByObjectId(authorization, objectName, objectId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getObjectNameByObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling getObjectNameByObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling getObjectNameByObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'objectId': objectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = ModelObject;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceObjectNameByChildObjectId operation.
     * @callback module:api/ObjectNameApi~replaceObjectNameByChildObjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an {childObjectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} childObjectName The name of the childObjectName
     * @param {String} objectId The {objectName} ID
     * @param {String} childObjectId The {childObjectName} ID
     * @param {module:model/ModelObject} body The {objectName}
     * @param {module:api/ObjectNameApi~replaceObjectNameByChildObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    replaceObjectNameByChildObjectId(authorization, objectName, childObjectName, objectId, childObjectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling replaceObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling replaceObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectName' is set
      if (childObjectName === undefined || childObjectName === null) {
        throw new Error("Missing the required parameter 'childObjectName' when calling replaceObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling replaceObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectId' is set
      if (childObjectId === undefined || childObjectId === null) {
        throw new Error("Missing the required parameter 'childObjectId' when calling replaceObjectNameByChildObjectId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceObjectNameByChildObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'childObjectName': childObjectName,
        'objectId': objectId,
        'childObjectId': childObjectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ModelObject;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}/{childObjectName}/{childObjectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceObjectNameByObjectId operation.
     * @callback module:api/ObjectNameApi~replaceObjectNameByObjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} objectId The {objectName} ID
     * @param {module:model/ModelObject} body The {objectName}
     * @param {module:api/ObjectNameApi~replaceObjectNameByObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    replaceObjectNameByObjectId(authorization, objectName, objectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling replaceObjectNameByObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling replaceObjectNameByObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling replaceObjectNameByObjectId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceObjectNameByObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'objectId': objectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ModelObject;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateObjectNameByChildObjectId operation.
     * @callback module:api/ObjectNameApi~updateObjectNameByChildObjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an {childObjectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} childObjectName The name of the childObjectName
     * @param {String} objectId The {objectName} ID
     * @param {String} childObjectId The {childObjectName} ID
     * @param {module:model/ModelObject} body The {objectName}
     * @param {module:api/ObjectNameApi~updateObjectNameByChildObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    updateObjectNameByChildObjectId(authorization, objectName, childObjectName, objectId, childObjectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling updateObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectName' is set
      if (childObjectName === undefined || childObjectName === null) {
        throw new Error("Missing the required parameter 'childObjectName' when calling updateObjectNameByChildObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling updateObjectNameByChildObjectId");
      }
      // verify the required parameter 'childObjectId' is set
      if (childObjectId === undefined || childObjectId === null) {
        throw new Error("Missing the required parameter 'childObjectId' when calling updateObjectNameByChildObjectId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateObjectNameByChildObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'childObjectName': childObjectName,
        'objectId': objectId,
        'childObjectId': childObjectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ModelObject;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}/{childObjectName}/{childObjectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateObjectNameByObjectId operation.
     * @callback module:api/ObjectNameApi~updateObjectNameByObjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an {objectName}
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} objectName The name of the object
     * @param {String} objectId The {objectName} ID
     * @param {module:model/ModelObject} body The {objectName}
     * @param {module:api/ObjectNameApi~updateObjectNameByObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    updateObjectNameByObjectId(authorization, objectName, objectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateObjectNameByObjectId");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling updateObjectNameByObjectId");
      }
      // verify the required parameter 'objectId' is set
      if (objectId === undefined || objectId === null) {
        throw new Error("Missing the required parameter 'objectId' when calling updateObjectNameByObjectId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateObjectNameByObjectId");
      }

      let pathParams = {
        'objectName': objectName,
        'objectId': objectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ModelObject;
      return this.apiClient.callApi(
        '/{objectName}/{objectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
