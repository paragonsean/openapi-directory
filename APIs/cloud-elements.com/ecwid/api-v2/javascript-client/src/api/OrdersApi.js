/**
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Order from '../model/Order';
import OrderPatch from '../model/OrderPatch';
import OrderPost from '../model/OrderPost';
import Payment from '../model/Payment';

/**
* Orders service.
* @module api/OrdersApi
* @version api-v2
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/OrdersApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order in the eCommerce system.With the exception of the 'id' field, the required fields indicated in the 'Order' model are those required to create a new order.The paymentStatus can only be AWAITING_PAYMENT or INCOMPLETE.The fulfillmentStatus can only be AWAITING_PROCESSING
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {module:model/OrderPost} order The order object to be created
     * @param {module:api/OrdersApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    createOrder(authorization, order, callback) {
      let postBody = order;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createOrder");
      }
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderById operation.
     * @callback module:api/OrdersApi~deleteOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order associated with a given ID from your eCommerce system. Specifying an order associated with a given ID that does not exist will result in an error message
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the order to delete from the eCommerce system
     * @param {module:api/OrdersApi~deleteOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrderById(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteOrderById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrderById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderById operation.
     * @callback module:api/OrdersApi~getOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order associated with a given ID from the eCommerce system. Specifying an order with an ID that does not exist will result in an error response
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the order to retrieve from the eCommerce system
     * @param {module:api/OrdersApi~getOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    getOrderById(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrderById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/orders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrders operation.
     * @callback module:api/OrdersApi~getOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find orders in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {Object} opts Optional parameters
     * @param {String} [where] The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field='value'). <p>Supported search terms: date, from_date, to_date, from_update_date, to_update_date, order, from_order, to_order, customer_id, customer_email and statuses. All other search criteria are ignored
     * @param {Number} [pageSize] The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/OrdersApi~getOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    getOrders(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'where': opts['where'],
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Order];
      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersPayments operation.
     * @callback module:api/OrdersApi~getOrdersPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the payments in the eCommerce system for the specified order
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} orderId The ID of the order to retrieve payments from in the eCommerce system
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/OrdersApi~getOrdersPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payment>}
     */
    getOrdersPayments(authorization, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrdersPayments");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrdersPayments");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Payment];
      return this.apiClient.callApi(
        '/orders/{orderId}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersRefunds operation.
     * @callback module:api/OrdersApi~getOrdersRefundsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the refunds in the eCommerce system for the specified order
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} orderId The ID of the order to retrieve refunds from in the eCommerce system
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned
     * @param {String} [nextPage] The next page cursor, taken from the response header: `elements-next-page-token`
     * @param {String} [fields] The fields to return on the response. Can be a single field or a comma-separated list of fields
     * @param {module:api/OrdersApi~getOrdersRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payment>}
     */
    getOrdersRefunds(authorization, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOrdersRefunds");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrdersRefunds");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'nextPage': opts['nextPage'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Payment];
      return this.apiClient.callApi(
        '/orders/{orderId}/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderById operation.
     * @callback module:api/OrdersApi~updateOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with a specified ID that does not exist will result in an error response</strong>
     * @param {String} authorization The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'
     * @param {String} id The ID of the order to update in the eCommerce system
     * @param {module:model/OrderPatch} order The order object, with those fields that are to be updated
     * @param {Object} opts Optional parameters
     * @param {String} [action] An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken
     * @param {module:api/OrdersApi~updateOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    updateOrderById(authorization, id, order, opts, callback) {
      opts = opts || {};
      let postBody = order;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateOrderById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrderById");
      }
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling updateOrderById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/orders/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
