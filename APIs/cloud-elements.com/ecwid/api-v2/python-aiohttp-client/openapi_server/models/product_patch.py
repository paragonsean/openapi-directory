# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute import Attribute
from openapi_server.models.gallery_image import GalleryImage
from openapi_server.models.option import Option
from openapi_server.models.product_dimensions import ProductDimensions
from openapi_server.models.product_tax import ProductTax
from openapi_server.models.related_products import RelatedProducts
from openapi_server.models.shipping import Shipping
from openapi_server.models.tax import Tax
from openapi_server.models.wholesale_prices import WholesalePrices
from openapi_server import util


class ProductPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[Attribute]=None, category_ids: List[int]=None, compare_at_price: float=None, compare_to_price: float=None, default_category_id: int=None, description: str=None, dimensions: ProductDimensions=None, enabled: bool=None, fixed_shipping_rate: float=None, fixed_shipping_rate_only: bool=None, gallery_images: List[GalleryImage]=None, google_item_condition: str=None, is_shipping_required: bool=None, name: str=None, options: List[Option]=None, price: float=None, product_class_id: int=None, quantity: int=None, related_products: RelatedProducts=None, seo_description: str=None, seo_title: str=None, shipping: Shipping=None, show_on_frontpage: float=None, sku: str=None, tax: ProductTax=None, taxes: List[Tax]=None, warning_limit: int=None, weight: float=None, wholesale_prices: WholesalePrices=None):
        """ProductPatch - a model defined in OpenAPI

        :param attributes: The attributes of this ProductPatch.
        :param category_ids: The category_ids of this ProductPatch.
        :param compare_at_price: The compare_at_price of this ProductPatch.
        :param compare_to_price: The compare_to_price of this ProductPatch.
        :param default_category_id: The default_category_id of this ProductPatch.
        :param description: The description of this ProductPatch.
        :param dimensions: The dimensions of this ProductPatch.
        :param enabled: The enabled of this ProductPatch.
        :param fixed_shipping_rate: The fixed_shipping_rate of this ProductPatch.
        :param fixed_shipping_rate_only: The fixed_shipping_rate_only of this ProductPatch.
        :param gallery_images: The gallery_images of this ProductPatch.
        :param google_item_condition: The google_item_condition of this ProductPatch.
        :param is_shipping_required: The is_shipping_required of this ProductPatch.
        :param name: The name of this ProductPatch.
        :param options: The options of this ProductPatch.
        :param price: The price of this ProductPatch.
        :param product_class_id: The product_class_id of this ProductPatch.
        :param quantity: The quantity of this ProductPatch.
        :param related_products: The related_products of this ProductPatch.
        :param seo_description: The seo_description of this ProductPatch.
        :param seo_title: The seo_title of this ProductPatch.
        :param shipping: The shipping of this ProductPatch.
        :param show_on_frontpage: The show_on_frontpage of this ProductPatch.
        :param sku: The sku of this ProductPatch.
        :param tax: The tax of this ProductPatch.
        :param taxes: The taxes of this ProductPatch.
        :param warning_limit: The warning_limit of this ProductPatch.
        :param weight: The weight of this ProductPatch.
        :param wholesale_prices: The wholesale_prices of this ProductPatch.
        """
        self.openapi_types = {
            'attributes': List[Attribute],
            'category_ids': List[int],
            'compare_at_price': float,
            'compare_to_price': float,
            'default_category_id': int,
            'description': str,
            'dimensions': ProductDimensions,
            'enabled': bool,
            'fixed_shipping_rate': float,
            'fixed_shipping_rate_only': bool,
            'gallery_images': List[GalleryImage],
            'google_item_condition': str,
            'is_shipping_required': bool,
            'name': str,
            'options': List[Option],
            'price': float,
            'product_class_id': int,
            'quantity': int,
            'related_products': RelatedProducts,
            'seo_description': str,
            'seo_title': str,
            'shipping': Shipping,
            'show_on_frontpage': float,
            'sku': str,
            'tax': ProductTax,
            'taxes': List[Tax],
            'warning_limit': int,
            'weight': float,
            'wholesale_prices': WholesalePrices
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'category_ids': 'categoryIds',
            'compare_at_price': 'compareAtPrice',
            'compare_to_price': 'compareToPrice',
            'default_category_id': 'defaultCategoryId',
            'description': 'description',
            'dimensions': 'dimensions',
            'enabled': 'enabled',
            'fixed_shipping_rate': 'fixedShippingRate',
            'fixed_shipping_rate_only': 'fixedShippingRateOnly',
            'gallery_images': 'galleryImages',
            'google_item_condition': 'googleItemCondition',
            'is_shipping_required': 'isShippingRequired',
            'name': 'name',
            'options': 'options',
            'price': 'price',
            'product_class_id': 'productClassId',
            'quantity': 'quantity',
            'related_products': 'relatedProducts',
            'seo_description': 'seoDescription',
            'seo_title': 'seoTitle',
            'shipping': 'shipping',
            'show_on_frontpage': 'showOnFrontpage',
            'sku': 'sku',
            'tax': 'tax',
            'taxes': 'taxes',
            'warning_limit': 'warningLimit',
            'weight': 'weight',
            'wholesale_prices': 'wholesalePrices'
        }

        self._attributes = attributes
        self._category_ids = category_ids
        self._compare_at_price = compare_at_price
        self._compare_to_price = compare_to_price
        self._default_category_id = default_category_id
        self._description = description
        self._dimensions = dimensions
        self._enabled = enabled
        self._fixed_shipping_rate = fixed_shipping_rate
        self._fixed_shipping_rate_only = fixed_shipping_rate_only
        self._gallery_images = gallery_images
        self._google_item_condition = google_item_condition
        self._is_shipping_required = is_shipping_required
        self._name = name
        self._options = options
        self._price = price
        self._product_class_id = product_class_id
        self._quantity = quantity
        self._related_products = related_products
        self._seo_description = seo_description
        self._seo_title = seo_title
        self._shipping = shipping
        self._show_on_frontpage = show_on_frontpage
        self._sku = sku
        self._tax = tax
        self._taxes = taxes
        self._warning_limit = warning_limit
        self._weight = weight
        self._wholesale_prices = wholesale_prices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPatch of this ProductPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ProductPatch.


        :return: The attributes of this ProductPatch.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProductPatch.


        :param attributes: The attributes of this ProductPatch.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes

    @property
    def category_ids(self):
        """Gets the category_ids of this ProductPatch.


        :return: The category_ids of this ProductPatch.
        :rtype: List[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this ProductPatch.


        :param category_ids: The category_ids of this ProductPatch.
        :type category_ids: List[int]
        """

        self._category_ids = category_ids

    @property
    def compare_at_price(self):
        """Gets the compare_at_price of this ProductPatch.

        Product’s sale price displayed strike-out in the customer

        :return: The compare_at_price of this ProductPatch.
        :rtype: float
        """
        return self._compare_at_price

    @compare_at_price.setter
    def compare_at_price(self, compare_at_price):
        """Sets the compare_at_price of this ProductPatch.

        Product’s sale price displayed strike-out in the customer

        :param compare_at_price: The compare_at_price of this ProductPatch.
        :type compare_at_price: float
        """

        self._compare_at_price = compare_at_price

    @property
    def compare_to_price(self):
        """Gets the compare_to_price of this ProductPatch.


        :return: The compare_to_price of this ProductPatch.
        :rtype: float
        """
        return self._compare_to_price

    @compare_to_price.setter
    def compare_to_price(self, compare_to_price):
        """Sets the compare_to_price of this ProductPatch.


        :param compare_to_price: The compare_to_price of this ProductPatch.
        :type compare_to_price: float
        """

        self._compare_to_price = compare_to_price

    @property
    def default_category_id(self):
        """Gets the default_category_id of this ProductPatch.


        :return: The default_category_id of this ProductPatch.
        :rtype: int
        """
        return self._default_category_id

    @default_category_id.setter
    def default_category_id(self, default_category_id):
        """Sets the default_category_id of this ProductPatch.


        :param default_category_id: The default_category_id of this ProductPatch.
        :type default_category_id: int
        """

        self._default_category_id = default_category_id

    @property
    def description(self):
        """Gets the description of this ProductPatch.

        Product description in HTML

        :return: The description of this ProductPatch.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductPatch.

        Product description in HTML

        :param description: The description of this ProductPatch.
        :type description: str
        """

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this ProductPatch.


        :return: The dimensions of this ProductPatch.
        :rtype: ProductDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ProductPatch.


        :param dimensions: The dimensions of this ProductPatch.
        :type dimensions: ProductDimensions
        """

        self._dimensions = dimensions

    @property
    def enabled(self):
        """Gets the enabled of this ProductPatch.

        true/false

        :return: The enabled of this ProductPatch.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ProductPatch.

        true/false

        :param enabled: The enabled of this ProductPatch.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def fixed_shipping_rate(self):
        """Gets the fixed_shipping_rate of this ProductPatch.


        :return: The fixed_shipping_rate of this ProductPatch.
        :rtype: float
        """
        return self._fixed_shipping_rate

    @fixed_shipping_rate.setter
    def fixed_shipping_rate(self, fixed_shipping_rate):
        """Sets the fixed_shipping_rate of this ProductPatch.


        :param fixed_shipping_rate: The fixed_shipping_rate of this ProductPatch.
        :type fixed_shipping_rate: float
        """

        self._fixed_shipping_rate = fixed_shipping_rate

    @property
    def fixed_shipping_rate_only(self):
        """Gets the fixed_shipping_rate_only of this ProductPatch.

        true/false

        :return: The fixed_shipping_rate_only of this ProductPatch.
        :rtype: bool
        """
        return self._fixed_shipping_rate_only

    @fixed_shipping_rate_only.setter
    def fixed_shipping_rate_only(self, fixed_shipping_rate_only):
        """Sets the fixed_shipping_rate_only of this ProductPatch.

        true/false

        :param fixed_shipping_rate_only: The fixed_shipping_rate_only of this ProductPatch.
        :type fixed_shipping_rate_only: bool
        """

        self._fixed_shipping_rate_only = fixed_shipping_rate_only

    @property
    def gallery_images(self):
        """Gets the gallery_images of this ProductPatch.


        :return: The gallery_images of this ProductPatch.
        :rtype: List[GalleryImage]
        """
        return self._gallery_images

    @gallery_images.setter
    def gallery_images(self, gallery_images):
        """Sets the gallery_images of this ProductPatch.


        :param gallery_images: The gallery_images of this ProductPatch.
        :type gallery_images: List[GalleryImage]
        """

        self._gallery_images = gallery_images

    @property
    def google_item_condition(self):
        """Gets the google_item_condition of this ProductPatch.

        Google Item Condition Status

        :return: The google_item_condition of this ProductPatch.
        :rtype: str
        """
        return self._google_item_condition

    @google_item_condition.setter
    def google_item_condition(self, google_item_condition):
        """Sets the google_item_condition of this ProductPatch.

        Google Item Condition Status

        :param google_item_condition: The google_item_condition of this ProductPatch.
        :type google_item_condition: str
        """

        self._google_item_condition = google_item_condition

    @property
    def is_shipping_required(self):
        """Gets the is_shipping_required of this ProductPatch.


        :return: The is_shipping_required of this ProductPatch.
        :rtype: bool
        """
        return self._is_shipping_required

    @is_shipping_required.setter
    def is_shipping_required(self, is_shipping_required):
        """Sets the is_shipping_required of this ProductPatch.


        :param is_shipping_required: The is_shipping_required of this ProductPatch.
        :type is_shipping_required: bool
        """

        self._is_shipping_required = is_shipping_required

    @property
    def name(self):
        """Gets the name of this ProductPatch.

        Product title

        :return: The name of this ProductPatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductPatch.

        Product title

        :param name: The name of this ProductPatch.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this ProductPatch.


        :return: The options of this ProductPatch.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ProductPatch.


        :param options: The options of this ProductPatch.
        :type options: List[Option]
        """

        self._options = options

    @property
    def price(self):
        """Gets the price of this ProductPatch.

        Base Product price

        :return: The price of this ProductPatch.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductPatch.

        Base Product price

        :param price: The price of this ProductPatch.
        :type price: float
        """

        self._price = price

    @property
    def product_class_id(self):
        """Gets the product_class_id of this ProductPatch.

        Id of the product type that this product belongs to.

        :return: The product_class_id of this ProductPatch.
        :rtype: int
        """
        return self._product_class_id

    @product_class_id.setter
    def product_class_id(self, product_class_id):
        """Sets the product_class_id of this ProductPatch.

        Id of the product type that this product belongs to.

        :param product_class_id: The product_class_id of this ProductPatch.
        :type product_class_id: int
        """

        self._product_class_id = product_class_id

    @property
    def quantity(self):
        """Gets the quantity of this ProductPatch.

        Amount of product items in stock.

        :return: The quantity of this ProductPatch.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductPatch.

        Amount of product items in stock.

        :param quantity: The quantity of this ProductPatch.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def related_products(self):
        """Gets the related_products of this ProductPatch.


        :return: The related_products of this ProductPatch.
        :rtype: RelatedProducts
        """
        return self._related_products

    @related_products.setter
    def related_products(self, related_products):
        """Sets the related_products of this ProductPatch.


        :param related_products: The related_products of this ProductPatch.
        :type related_products: RelatedProducts
        """

        self._related_products = related_products

    @property
    def seo_description(self):
        """Gets the seo_description of this ProductPatch.


        :return: The seo_description of this ProductPatch.
        :rtype: str
        """
        return self._seo_description

    @seo_description.setter
    def seo_description(self, seo_description):
        """Sets the seo_description of this ProductPatch.


        :param seo_description: The seo_description of this ProductPatch.
        :type seo_description: str
        """

        self._seo_description = seo_description

    @property
    def seo_title(self):
        """Gets the seo_title of this ProductPatch.


        :return: The seo_title of this ProductPatch.
        :rtype: str
        """
        return self._seo_title

    @seo_title.setter
    def seo_title(self, seo_title):
        """Sets the seo_title of this ProductPatch.


        :param seo_title: The seo_title of this ProductPatch.
        :type seo_title: str
        """

        self._seo_title = seo_title

    @property
    def shipping(self):
        """Gets the shipping of this ProductPatch.


        :return: The shipping of this ProductPatch.
        :rtype: Shipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this ProductPatch.


        :param shipping: The shipping of this ProductPatch.
        :type shipping: Shipping
        """

        self._shipping = shipping

    @property
    def show_on_frontpage(self):
        """Gets the show_on_frontpage of this ProductPatch.


        :return: The show_on_frontpage of this ProductPatch.
        :rtype: float
        """
        return self._show_on_frontpage

    @show_on_frontpage.setter
    def show_on_frontpage(self, show_on_frontpage):
        """Sets the show_on_frontpage of this ProductPatch.


        :param show_on_frontpage: The show_on_frontpage of this ProductPatch.
        :type show_on_frontpage: float
        """

        self._show_on_frontpage = show_on_frontpage

    @property
    def sku(self):
        """Gets the sku of this ProductPatch.

        Product SKU

        :return: The sku of this ProductPatch.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductPatch.

        Product SKU

        :param sku: The sku of this ProductPatch.
        :type sku: str
        """

        self._sku = sku

    @property
    def tax(self):
        """Gets the tax of this ProductPatch.


        :return: The tax of this ProductPatch.
        :rtype: ProductTax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this ProductPatch.


        :param tax: The tax of this ProductPatch.
        :type tax: ProductTax
        """

        self._tax = tax

    @property
    def taxes(self):
        """Gets the taxes of this ProductPatch.


        :return: The taxes of this ProductPatch.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this ProductPatch.


        :param taxes: The taxes of this ProductPatch.
        :type taxes: List[Tax]
        """

        self._taxes = taxes

    @property
    def warning_limit(self):
        """Gets the warning_limit of this ProductPatch.


        :return: The warning_limit of this ProductPatch.
        :rtype: int
        """
        return self._warning_limit

    @warning_limit.setter
    def warning_limit(self, warning_limit):
        """Sets the warning_limit of this ProductPatch.


        :param warning_limit: The warning_limit of this ProductPatch.
        :type warning_limit: int
        """

        self._warning_limit = warning_limit

    @property
    def weight(self):
        """Gets the weight of this ProductPatch.

        Product weight in the units defined in store settings

        :return: The weight of this ProductPatch.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductPatch.

        Product weight in the units defined in store settings

        :param weight: The weight of this ProductPatch.
        :type weight: float
        """

        self._weight = weight

    @property
    def wholesale_prices(self):
        """Gets the wholesale_prices of this ProductPatch.


        :return: The wholesale_prices of this ProductPatch.
        :rtype: WholesalePrices
        """
        return self._wholesale_prices

    @wholesale_prices.setter
    def wholesale_prices(self, wholesale_prices):
        """Sets the wholesale_prices of this ProductPatch.


        :param wholesale_prices: The wholesale_prices of this ProductPatch.
        :type wholesale_prices: WholesalePrices
        """

        self._wholesale_prices = wholesale_prices
