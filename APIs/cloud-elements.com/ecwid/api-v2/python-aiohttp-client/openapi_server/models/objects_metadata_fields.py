# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectsMetadataFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mask: str=None, type: str=None, vendor_display_name: str=None, vendor_path: str=None, vendor_read_only: bool=None, vendor_required: bool=None):
        """ObjectsMetadataFields - a model defined in OpenAPI

        :param mask: The mask of this ObjectsMetadataFields.
        :param type: The type of this ObjectsMetadataFields.
        :param vendor_display_name: The vendor_display_name of this ObjectsMetadataFields.
        :param vendor_path: The vendor_path of this ObjectsMetadataFields.
        :param vendor_read_only: The vendor_read_only of this ObjectsMetadataFields.
        :param vendor_required: The vendor_required of this ObjectsMetadataFields.
        """
        self.openapi_types = {
            'mask': str,
            'type': str,
            'vendor_display_name': str,
            'vendor_path': str,
            'vendor_read_only': bool,
            'vendor_required': bool
        }

        self.attribute_map = {
            'mask': 'mask',
            'type': 'type',
            'vendor_display_name': 'vendorDisplayName',
            'vendor_path': 'vendorPath',
            'vendor_read_only': 'vendorReadOnly',
            'vendor_required': 'vendorRequired'
        }

        self._mask = mask
        self._type = type
        self._vendor_display_name = vendor_display_name
        self._vendor_path = vendor_path
        self._vendor_read_only = vendor_read_only
        self._vendor_required = vendor_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectsMetadataFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objectsMetadataFields of this ObjectsMetadataFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mask(self):
        """Gets the mask of this ObjectsMetadataFields.


        :return: The mask of this ObjectsMetadataFields.
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this ObjectsMetadataFields.


        :param mask: The mask of this ObjectsMetadataFields.
        :type mask: str
        """

        self._mask = mask

    @property
    def type(self):
        """Gets the type of this ObjectsMetadataFields.


        :return: The type of this ObjectsMetadataFields.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObjectsMetadataFields.


        :param type: The type of this ObjectsMetadataFields.
        :type type: str
        """

        self._type = type

    @property
    def vendor_display_name(self):
        """Gets the vendor_display_name of this ObjectsMetadataFields.


        :return: The vendor_display_name of this ObjectsMetadataFields.
        :rtype: str
        """
        return self._vendor_display_name

    @vendor_display_name.setter
    def vendor_display_name(self, vendor_display_name):
        """Sets the vendor_display_name of this ObjectsMetadataFields.


        :param vendor_display_name: The vendor_display_name of this ObjectsMetadataFields.
        :type vendor_display_name: str
        """

        self._vendor_display_name = vendor_display_name

    @property
    def vendor_path(self):
        """Gets the vendor_path of this ObjectsMetadataFields.


        :return: The vendor_path of this ObjectsMetadataFields.
        :rtype: str
        """
        return self._vendor_path

    @vendor_path.setter
    def vendor_path(self, vendor_path):
        """Sets the vendor_path of this ObjectsMetadataFields.


        :param vendor_path: The vendor_path of this ObjectsMetadataFields.
        :type vendor_path: str
        """

        self._vendor_path = vendor_path

    @property
    def vendor_read_only(self):
        """Gets the vendor_read_only of this ObjectsMetadataFields.


        :return: The vendor_read_only of this ObjectsMetadataFields.
        :rtype: bool
        """
        return self._vendor_read_only

    @vendor_read_only.setter
    def vendor_read_only(self, vendor_read_only):
        """Sets the vendor_read_only of this ObjectsMetadataFields.


        :param vendor_read_only: The vendor_read_only of this ObjectsMetadataFields.
        :type vendor_read_only: bool
        """

        self._vendor_read_only = vendor_read_only

    @property
    def vendor_required(self):
        """Gets the vendor_required of this ObjectsMetadataFields.


        :return: The vendor_required of this ObjectsMetadataFields.
        :rtype: bool
        """
        return self._vendor_required

    @vendor_required.setter
    def vendor_required(self, vendor_required):
        """Sets the vendor_required of this ObjectsMetadataFields.


        :param vendor_required: The vendor_required of this ObjectsMetadataFields.
        :type vendor_required: bool
        """

        self._vendor_required = vendor_required
