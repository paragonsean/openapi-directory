# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax import Tax
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, coupon_applied: bool=None, digital: bool=None, fixed_shipping_rate: float=None, fixed_shipping_rate_only: bool=None, hd_thumbnail_url: str=None, id: int=None, image_url: str=None, is_shipping_required: bool=None, name: str=None, price: float=None, product_available: bool=None, product_id: int=None, product_price: float=None, quantity: int=None, quantity_in_stock: float=None, shipping: float=None, sku: str=None, small_thumbnail_url: str=None, tax: float=None, taxes: List[Tax]=None, track_quantity: bool=None, weight: float=None):
        """Item - a model defined in OpenAPI

        :param category_id: The category_id of this Item.
        :param coupon_applied: The coupon_applied of this Item.
        :param digital: The digital of this Item.
        :param fixed_shipping_rate: The fixed_shipping_rate of this Item.
        :param fixed_shipping_rate_only: The fixed_shipping_rate_only of this Item.
        :param hd_thumbnail_url: The hd_thumbnail_url of this Item.
        :param id: The id of this Item.
        :param image_url: The image_url of this Item.
        :param is_shipping_required: The is_shipping_required of this Item.
        :param name: The name of this Item.
        :param price: The price of this Item.
        :param product_available: The product_available of this Item.
        :param product_id: The product_id of this Item.
        :param product_price: The product_price of this Item.
        :param quantity: The quantity of this Item.
        :param quantity_in_stock: The quantity_in_stock of this Item.
        :param shipping: The shipping of this Item.
        :param sku: The sku of this Item.
        :param small_thumbnail_url: The small_thumbnail_url of this Item.
        :param tax: The tax of this Item.
        :param taxes: The taxes of this Item.
        :param track_quantity: The track_quantity of this Item.
        :param weight: The weight of this Item.
        """
        self.openapi_types = {
            'category_id': int,
            'coupon_applied': bool,
            'digital': bool,
            'fixed_shipping_rate': float,
            'fixed_shipping_rate_only': bool,
            'hd_thumbnail_url': str,
            'id': int,
            'image_url': str,
            'is_shipping_required': bool,
            'name': str,
            'price': float,
            'product_available': bool,
            'product_id': int,
            'product_price': float,
            'quantity': int,
            'quantity_in_stock': float,
            'shipping': float,
            'sku': str,
            'small_thumbnail_url': str,
            'tax': float,
            'taxes': List[Tax],
            'track_quantity': bool,
            'weight': float
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'coupon_applied': 'couponApplied',
            'digital': 'digital',
            'fixed_shipping_rate': 'fixedShippingRate',
            'fixed_shipping_rate_only': 'fixedShippingRateOnly',
            'hd_thumbnail_url': 'hdThumbnailUrl',
            'id': 'id',
            'image_url': 'imageUrl',
            'is_shipping_required': 'isShippingRequired',
            'name': 'name',
            'price': 'price',
            'product_available': 'productAvailable',
            'product_id': 'productId',
            'product_price': 'productPrice',
            'quantity': 'quantity',
            'quantity_in_stock': 'quantityInStock',
            'shipping': 'shipping',
            'sku': 'sku',
            'small_thumbnail_url': 'smallThumbnailUrl',
            'tax': 'tax',
            'taxes': 'taxes',
            'track_quantity': 'trackQuantity',
            'weight': 'weight'
        }

        self._category_id = category_id
        self._coupon_applied = coupon_applied
        self._digital = digital
        self._fixed_shipping_rate = fixed_shipping_rate
        self._fixed_shipping_rate_only = fixed_shipping_rate_only
        self._hd_thumbnail_url = hd_thumbnail_url
        self._id = id
        self._image_url = image_url
        self._is_shipping_required = is_shipping_required
        self._name = name
        self._price = price
        self._product_available = product_available
        self._product_id = product_id
        self._product_price = product_price
        self._quantity = quantity
        self._quantity_in_stock = quantity_in_stock
        self._shipping = shipping
        self._sku = sku
        self._small_thumbnail_url = small_thumbnail_url
        self._tax = tax
        self._taxes = taxes
        self._track_quantity = track_quantity
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this Item.


        :return: The category_id of this Item.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Item.


        :param category_id: The category_id of this Item.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def coupon_applied(self):
        """Gets the coupon_applied of this Item.

        true/false. shows whether a discount coupon is applied for this item

        :return: The coupon_applied of this Item.
        :rtype: bool
        """
        return self._coupon_applied

    @coupon_applied.setter
    def coupon_applied(self, coupon_applied):
        """Sets the coupon_applied of this Item.

        true/false. shows whether a discount coupon is applied for this item

        :param coupon_applied: The coupon_applied of this Item.
        :type coupon_applied: bool
        """

        self._coupon_applied = coupon_applied

    @property
    def digital(self):
        """Gets the digital of this Item.

        true/false. shows whether the item has downloadable files attached

        :return: The digital of this Item.
        :rtype: bool
        """
        return self._digital

    @digital.setter
    def digital(self, digital):
        """Sets the digital of this Item.

        true/false. shows whether the item has downloadable files attached

        :param digital: The digital of this Item.
        :type digital: bool
        """

        self._digital = digital

    @property
    def fixed_shipping_rate(self):
        """Gets the fixed_shipping_rate of this Item.


        :return: The fixed_shipping_rate of this Item.
        :rtype: float
        """
        return self._fixed_shipping_rate

    @fixed_shipping_rate.setter
    def fixed_shipping_rate(self, fixed_shipping_rate):
        """Sets the fixed_shipping_rate of this Item.


        :param fixed_shipping_rate: The fixed_shipping_rate of this Item.
        :type fixed_shipping_rate: float
        """

        self._fixed_shipping_rate = fixed_shipping_rate

    @property
    def fixed_shipping_rate_only(self):
        """Gets the fixed_shipping_rate_only of this Item.

        true/false. shows whether the fixed shipping rate is set for the product

        :return: The fixed_shipping_rate_only of this Item.
        :rtype: bool
        """
        return self._fixed_shipping_rate_only

    @fixed_shipping_rate_only.setter
    def fixed_shipping_rate_only(self, fixed_shipping_rate_only):
        """Sets the fixed_shipping_rate_only of this Item.

        true/false. shows whether the fixed shipping rate is set for the product

        :param fixed_shipping_rate_only: The fixed_shipping_rate_only of this Item.
        :type fixed_shipping_rate_only: bool
        """

        self._fixed_shipping_rate_only = fixed_shipping_rate_only

    @property
    def hd_thumbnail_url(self):
        """Gets the hd_thumbnail_url of this Item.


        :return: The hd_thumbnail_url of this Item.
        :rtype: str
        """
        return self._hd_thumbnail_url

    @hd_thumbnail_url.setter
    def hd_thumbnail_url(self, hd_thumbnail_url):
        """Sets the hd_thumbnail_url of this Item.


        :param hd_thumbnail_url: The hd_thumbnail_url of this Item.
        :type hd_thumbnail_url: str
        """

        self._hd_thumbnail_url = hd_thumbnail_url

    @property
    def id(self):
        """Gets the id of this Item.


        :return: The id of this Item.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.
        :type id: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this Item.


        :return: The image_url of this Item.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Item.


        :param image_url: The image_url of this Item.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def is_shipping_required(self):
        """Gets the is_shipping_required of this Item.

        true/false. shows whether the item requires shipping

        :return: The is_shipping_required of this Item.
        :rtype: bool
        """
        return self._is_shipping_required

    @is_shipping_required.setter
    def is_shipping_required(self, is_shipping_required):
        """Sets the is_shipping_required of this Item.

        true/false. shows whether the item requires shipping

        :param is_shipping_required: The is_shipping_required of this Item.
        :type is_shipping_required: bool
        """

        self._is_shipping_required = is_shipping_required

    @property
    def name(self):
        """Gets the name of this Item.


        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Item.


        :return: The price of this Item.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item.


        :param price: The price of this Item.
        :type price: float
        """

        self._price = price

    @property
    def product_available(self):
        """Gets the product_available of this Item.

        true/false. shows whether product is available or not

        :return: The product_available of this Item.
        :rtype: bool
        """
        return self._product_available

    @product_available.setter
    def product_available(self, product_available):
        """Sets the product_available of this Item.

        true/false. shows whether product is available or not

        :param product_available: The product_available of this Item.
        :type product_available: bool
        """

        self._product_available = product_available

    @property
    def product_id(self):
        """Gets the product_id of this Item.


        :return: The product_id of this Item.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Item.


        :param product_id: The product_id of this Item.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def product_price(self):
        """Gets the product_price of this Item.


        :return: The product_price of this Item.
        :rtype: float
        """
        return self._product_price

    @product_price.setter
    def product_price(self, product_price):
        """Sets the product_price of this Item.


        :param product_price: The product_price of this Item.
        :type product_price: float
        """

        self._product_price = product_price

    @property
    def quantity(self):
        """Gets the quantity of this Item.


        :return: The quantity of this Item.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def quantity_in_stock(self):
        """Gets the quantity_in_stock of this Item.


        :return: The quantity_in_stock of this Item.
        :rtype: float
        """
        return self._quantity_in_stock

    @quantity_in_stock.setter
    def quantity_in_stock(self, quantity_in_stock):
        """Sets the quantity_in_stock of this Item.


        :param quantity_in_stock: The quantity_in_stock of this Item.
        :type quantity_in_stock: float
        """

        self._quantity_in_stock = quantity_in_stock

    @property
    def shipping(self):
        """Gets the shipping of this Item.


        :return: The shipping of this Item.
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Item.


        :param shipping: The shipping of this Item.
        :type shipping: float
        """

        self._shipping = shipping

    @property
    def sku(self):
        """Gets the sku of this Item.


        :return: The sku of this Item.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Item.


        :param sku: The sku of this Item.
        :type sku: str
        """

        self._sku = sku

    @property
    def small_thumbnail_url(self):
        """Gets the small_thumbnail_url of this Item.


        :return: The small_thumbnail_url of this Item.
        :rtype: str
        """
        return self._small_thumbnail_url

    @small_thumbnail_url.setter
    def small_thumbnail_url(self, small_thumbnail_url):
        """Sets the small_thumbnail_url of this Item.


        :param small_thumbnail_url: The small_thumbnail_url of this Item.
        :type small_thumbnail_url: str
        """

        self._small_thumbnail_url = small_thumbnail_url

    @property
    def tax(self):
        """Gets the tax of this Item.


        :return: The tax of this Item.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Item.


        :param tax: The tax of this Item.
        :type tax: float
        """

        self._tax = tax

    @property
    def taxes(self):
        """Gets the taxes of this Item.


        :return: The taxes of this Item.
        :rtype: List[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Item.


        :param taxes: The taxes of this Item.
        :type taxes: List[Tax]
        """

        self._taxes = taxes

    @property
    def track_quantity(self):
        """Gets the track_quantity of this Item.

        true/false. shows whether the store admin set to track the quantity of this product and get low stock notifications

        :return: The track_quantity of this Item.
        :rtype: bool
        """
        return self._track_quantity

    @track_quantity.setter
    def track_quantity(self, track_quantity):
        """Sets the track_quantity of this Item.

        true/false. shows whether the store admin set to track the quantity of this product and get low stock notifications

        :param track_quantity: The track_quantity of this Item.
        :type track_quantity: bool
        """

        self._track_quantity = track_quantity

    @property
    def weight(self):
        """Gets the weight of this Item.


        :return: The weight of this Item.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Item.


        :param weight: The weight of this Item.
        :type weight: float
        """

        self._weight = weight
