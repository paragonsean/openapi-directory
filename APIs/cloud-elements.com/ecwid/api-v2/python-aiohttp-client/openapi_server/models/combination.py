# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util


class Combination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[Attribute]=None, combination_number: float=None, compare_to_price: float=None, id: float=None, price: float=None, quantity: float=None, sku: str=None, unlimited: bool=None, warning_limit: float=None, weight: float=None):
        """Combination - a model defined in OpenAPI

        :param attributes: The attributes of this Combination.
        :param combination_number: The combination_number of this Combination.
        :param compare_to_price: The compare_to_price of this Combination.
        :param id: The id of this Combination.
        :param price: The price of this Combination.
        :param quantity: The quantity of this Combination.
        :param sku: The sku of this Combination.
        :param unlimited: The unlimited of this Combination.
        :param warning_limit: The warning_limit of this Combination.
        :param weight: The weight of this Combination.
        """
        self.openapi_types = {
            'attributes': List[Attribute],
            'combination_number': float,
            'compare_to_price': float,
            'id': float,
            'price': float,
            'quantity': float,
            'sku': str,
            'unlimited': bool,
            'warning_limit': float,
            'weight': float
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'combination_number': 'combinationNumber',
            'compare_to_price': 'compareToPrice',
            'id': 'id',
            'price': 'price',
            'quantity': 'quantity',
            'sku': 'sku',
            'unlimited': 'unlimited',
            'warning_limit': 'warningLimit',
            'weight': 'weight'
        }

        self._attributes = attributes
        self._combination_number = combination_number
        self._compare_to_price = compare_to_price
        self._id = id
        self._price = price
        self._quantity = quantity
        self._sku = sku
        self._unlimited = unlimited
        self._warning_limit = warning_limit
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Combination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Combination of this Combination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Combination.


        :return: The attributes of this Combination.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Combination.


        :param attributes: The attributes of this Combination.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes

    @property
    def combination_number(self):
        """Gets the combination_number of this Combination.


        :return: The combination_number of this Combination.
        :rtype: float
        """
        return self._combination_number

    @combination_number.setter
    def combination_number(self, combination_number):
        """Sets the combination_number of this Combination.


        :param combination_number: The combination_number of this Combination.
        :type combination_number: float
        """

        self._combination_number = combination_number

    @property
    def compare_to_price(self):
        """Gets the compare_to_price of this Combination.


        :return: The compare_to_price of this Combination.
        :rtype: float
        """
        return self._compare_to_price

    @compare_to_price.setter
    def compare_to_price(self, compare_to_price):
        """Sets the compare_to_price of this Combination.


        :param compare_to_price: The compare_to_price of this Combination.
        :type compare_to_price: float
        """

        self._compare_to_price = compare_to_price

    @property
    def id(self):
        """Gets the id of this Combination.


        :return: The id of this Combination.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Combination.


        :param id: The id of this Combination.
        :type id: float
        """

        self._id = id

    @property
    def price(self):
        """Gets the price of this Combination.


        :return: The price of this Combination.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Combination.


        :param price: The price of this Combination.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Combination.


        :return: The quantity of this Combination.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Combination.


        :param quantity: The quantity of this Combination.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this Combination.


        :return: The sku of this Combination.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Combination.


        :param sku: The sku of this Combination.
        :type sku: str
        """

        self._sku = sku

    @property
    def unlimited(self):
        """Gets the unlimited of this Combination.


        :return: The unlimited of this Combination.
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this Combination.


        :param unlimited: The unlimited of this Combination.
        :type unlimited: bool
        """

        self._unlimited = unlimited

    @property
    def warning_limit(self):
        """Gets the warning_limit of this Combination.


        :return: The warning_limit of this Combination.
        :rtype: float
        """
        return self._warning_limit

    @warning_limit.setter
    def warning_limit(self, warning_limit):
        """Sets the warning_limit of this Combination.


        :param warning_limit: The warning_limit of this Combination.
        :type warning_limit: float
        """

        self._warning_limit = warning_limit

    @property
    def weight(self):
        """Gets the weight of this Combination.


        :return: The weight of this Combination.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Combination.


        :param weight: The weight of this Combination.
        :type weight: float
        """

        self._weight = weight
