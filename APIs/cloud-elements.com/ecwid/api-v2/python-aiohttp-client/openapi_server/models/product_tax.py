# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_location_included_tax_rate: float=None, enabled_manual_taxes: List[int]=None):
        """ProductTax - a model defined in OpenAPI

        :param default_location_included_tax_rate: The default_location_included_tax_rate of this ProductTax.
        :param enabled_manual_taxes: The enabled_manual_taxes of this ProductTax.
        """
        self.openapi_types = {
            'default_location_included_tax_rate': float,
            'enabled_manual_taxes': List[int]
        }

        self.attribute_map = {
            'default_location_included_tax_rate': 'defaultLocationIncludedTaxRate',
            'enabled_manual_taxes': 'enabledManualTaxes'
        }

        self._default_location_included_tax_rate = default_location_included_tax_rate
        self._enabled_manual_taxes = enabled_manual_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductTax of this ProductTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_location_included_tax_rate(self):
        """Gets the default_location_included_tax_rate of this ProductTax.


        :return: The default_location_included_tax_rate of this ProductTax.
        :rtype: float
        """
        return self._default_location_included_tax_rate

    @default_location_included_tax_rate.setter
    def default_location_included_tax_rate(self, default_location_included_tax_rate):
        """Sets the default_location_included_tax_rate of this ProductTax.


        :param default_location_included_tax_rate: The default_location_included_tax_rate of this ProductTax.
        :type default_location_included_tax_rate: float
        """

        self._default_location_included_tax_rate = default_location_included_tax_rate

    @property
    def enabled_manual_taxes(self):
        """Gets the enabled_manual_taxes of this ProductTax.


        :return: The enabled_manual_taxes of this ProductTax.
        :rtype: List[int]
        """
        return self._enabled_manual_taxes

    @enabled_manual_taxes.setter
    def enabled_manual_taxes(self, enabled_manual_taxes):
        """Sets the enabled_manual_taxes of this ProductTax.


        :param enabled_manual_taxes: The enabled_manual_taxes of this ProductTax.
        :type enabled_manual_taxes: List[int]
        """

        self._enabled_manual_taxes = enabled_manual_taxes
