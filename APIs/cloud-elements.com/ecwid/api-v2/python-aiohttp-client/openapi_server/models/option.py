# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.choice import Choice
from openapi_server import util


class Option(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choices: List[Choice]=None, default_choice: int=None, name: str=None, required: bool=None, type: str=None):
        """Option - a model defined in OpenAPI

        :param choices: The choices of this Option.
        :param default_choice: The default_choice of this Option.
        :param name: The name of this Option.
        :param required: The required of this Option.
        :param type: The type of this Option.
        """
        self.openapi_types = {
            'choices': List[Choice],
            'default_choice': int,
            'name': str,
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'choices': 'choices',
            'default_choice': 'defaultChoice',
            'name': 'name',
            'required': 'required',
            'type': 'type'
        }

        self._choices = choices
        self._default_choice = default_choice
        self._name = name
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Option':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Option of this Option.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choices(self):
        """Gets the choices of this Option.


        :return: The choices of this Option.
        :rtype: List[Choice]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this Option.


        :param choices: The choices of this Option.
        :type choices: List[Choice]
        """

        self._choices = choices

    @property
    def default_choice(self):
        """Gets the default_choice of this Option.


        :return: The default_choice of this Option.
        :rtype: int
        """
        return self._default_choice

    @default_choice.setter
    def default_choice(self, default_choice):
        """Sets the default_choice of this Option.


        :param default_choice: The default_choice of this Option.
        :type default_choice: int
        """

        self._default_choice = default_choice

    @property
    def name(self):
        """Gets the name of this Option.


        :return: The name of this Option.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Option.


        :param name: The name of this Option.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required(self):
        """Gets the required of this Option.

        true/false

        :return: The required of this Option.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Option.

        true/false

        :param required: The required of this Option.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def type(self):
        """Gets the type of this Option.


        :return: The type of this Option.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Option.


        :param type: The type of this Option.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
