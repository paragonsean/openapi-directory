# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person import Person
from openapi_server import util


class CustomerPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_person: Person=None, customer_group_id: int=None, email: str=None, password: str=None, shipping_addresses: List[Person]=None, tax_exempt: bool=None, tax_id: float=None, tax_id_valid: bool=None):
        """CustomerPost - a model defined in OpenAPI

        :param billing_person: The billing_person of this CustomerPost.
        :param customer_group_id: The customer_group_id of this CustomerPost.
        :param email: The email of this CustomerPost.
        :param password: The password of this CustomerPost.
        :param shipping_addresses: The shipping_addresses of this CustomerPost.
        :param tax_exempt: The tax_exempt of this CustomerPost.
        :param tax_id: The tax_id of this CustomerPost.
        :param tax_id_valid: The tax_id_valid of this CustomerPost.
        """
        self.openapi_types = {
            'billing_person': Person,
            'customer_group_id': int,
            'email': str,
            'password': str,
            'shipping_addresses': List[Person],
            'tax_exempt': bool,
            'tax_id': float,
            'tax_id_valid': bool
        }

        self.attribute_map = {
            'billing_person': 'billingPerson',
            'customer_group_id': 'customerGroupId',
            'email': 'email',
            'password': 'password',
            'shipping_addresses': 'shippingAddresses',
            'tax_exempt': 'taxExempt',
            'tax_id': 'taxId',
            'tax_id_valid': 'taxIdValid'
        }

        self._billing_person = billing_person
        self._customer_group_id = customer_group_id
        self._email = email
        self._password = password
        self._shipping_addresses = shipping_addresses
        self._tax_exempt = tax_exempt
        self._tax_id = tax_id
        self._tax_id_valid = tax_id_valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerPost of this CustomerPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_person(self):
        """Gets the billing_person of this CustomerPost.


        :return: The billing_person of this CustomerPost.
        :rtype: Person
        """
        return self._billing_person

    @billing_person.setter
    def billing_person(self, billing_person):
        """Sets the billing_person of this CustomerPost.


        :param billing_person: The billing_person of this CustomerPost.
        :type billing_person: Person
        """

        self._billing_person = billing_person

    @property
    def customer_group_id(self):
        """Gets the customer_group_id of this CustomerPost.


        :return: The customer_group_id of this CustomerPost.
        :rtype: int
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id):
        """Sets the customer_group_id of this CustomerPost.


        :param customer_group_id: The customer_group_id of this CustomerPost.
        :type customer_group_id: int
        """

        self._customer_group_id = customer_group_id

    @property
    def email(self):
        """Gets the email of this CustomerPost.

        customer email

        :return: The email of this CustomerPost.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerPost.

        customer email

        :param email: The email of this CustomerPost.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def password(self):
        """Gets the password of this CustomerPost.

        customer password

        :return: The password of this CustomerPost.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomerPost.

        customer password

        :param password: The password of this CustomerPost.
        :type password: str
        """

        self._password = password

    @property
    def shipping_addresses(self):
        """Gets the shipping_addresses of this CustomerPost.


        :return: The shipping_addresses of this CustomerPost.
        :rtype: List[Person]
        """
        return self._shipping_addresses

    @shipping_addresses.setter
    def shipping_addresses(self, shipping_addresses):
        """Sets the shipping_addresses of this CustomerPost.


        :param shipping_addresses: The shipping_addresses of this CustomerPost.
        :type shipping_addresses: List[Person]
        """

        self._shipping_addresses = shipping_addresses

    @property
    def tax_exempt(self):
        """Gets the tax_exempt of this CustomerPost.


        :return: The tax_exempt of this CustomerPost.
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """Sets the tax_exempt of this CustomerPost.


        :param tax_exempt: The tax_exempt of this CustomerPost.
        :type tax_exempt: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def tax_id(self):
        """Gets the tax_id of this CustomerPost.


        :return: The tax_id of this CustomerPost.
        :rtype: float
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this CustomerPost.


        :param tax_id: The tax_id of this CustomerPost.
        :type tax_id: float
        """

        self._tax_id = tax_id

    @property
    def tax_id_valid(self):
        """Gets the tax_id_valid of this CustomerPost.


        :return: The tax_id_valid of this CustomerPost.
        :rtype: bool
        """
        return self._tax_id_valid

    @tax_id_valid.setter
    def tax_id_valid(self, tax_id_valid):
        """Sets the tax_id_valid of this CustomerPost.


        :param tax_id_valid: The tax_id_valid of this CustomerPost.
        :type tax_id_valid: bool
        """

        self._tax_id_valid = tax_id_valid
