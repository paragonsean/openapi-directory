# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, company_name: str=None, country_code: str=None, country_name: str=None, name: str=None, phone: str=None, postal_code: str=None, state_name: str=None, state_or_province_code: str=None, state_or_province_name: str=None, street: str=None):
        """Person - a model defined in OpenAPI

        :param city: The city of this Person.
        :param company_name: The company_name of this Person.
        :param country_code: The country_code of this Person.
        :param country_name: The country_name of this Person.
        :param name: The name of this Person.
        :param phone: The phone of this Person.
        :param postal_code: The postal_code of this Person.
        :param state_name: The state_name of this Person.
        :param state_or_province_code: The state_or_province_code of this Person.
        :param state_or_province_name: The state_or_province_name of this Person.
        :param street: The street of this Person.
        """
        self.openapi_types = {
            'city': str,
            'company_name': str,
            'country_code': str,
            'country_name': str,
            'name': str,
            'phone': str,
            'postal_code': str,
            'state_name': str,
            'state_or_province_code': str,
            'state_or_province_name': str,
            'street': str
        }

        self.attribute_map = {
            'city': 'city',
            'company_name': 'companyName',
            'country_code': 'countryCode',
            'country_name': 'countryName',
            'name': 'name',
            'phone': 'phone',
            'postal_code': 'postalCode',
            'state_name': 'stateName',
            'state_or_province_code': 'stateOrProvinceCode',
            'state_or_province_name': 'stateOrProvinceName',
            'street': 'street'
        }

        self._city = city
        self._company_name = company_name
        self._country_code = country_code
        self._country_name = country_name
        self._name = name
        self._phone = phone
        self._postal_code = postal_code
        self._state_name = state_name
        self._state_or_province_code = state_or_province_code
        self._state_or_province_name = state_or_province_name
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Person.


        :return: The city of this Person.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Person.


        :param city: The city of this Person.
        :type city: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this Person.


        :return: The company_name of this Person.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Person.


        :param company_name: The company_name of this Person.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this Person.


        :return: The country_code of this Person.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Person.


        :param country_code: The country_code of this Person.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Person.


        :return: The country_name of this Person.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Person.


        :param country_name: The country_name of this Person.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def name(self):
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Person.


        :return: The phone of this Person.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Person.


        :param phone: The phone of this Person.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this Person.


        :return: The postal_code of this Person.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Person.


        :param postal_code: The postal_code of this Person.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_name(self):
        """Gets the state_name of this Person.


        :return: The state_name of this Person.
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this Person.


        :param state_name: The state_name of this Person.
        :type state_name: str
        """

        self._state_name = state_name

    @property
    def state_or_province_code(self):
        """Gets the state_or_province_code of this Person.


        :return: The state_or_province_code of this Person.
        :rtype: str
        """
        return self._state_or_province_code

    @state_or_province_code.setter
    def state_or_province_code(self, state_or_province_code):
        """Sets the state_or_province_code of this Person.


        :param state_or_province_code: The state_or_province_code of this Person.
        :type state_or_province_code: str
        """

        self._state_or_province_code = state_or_province_code

    @property
    def state_or_province_name(self):
        """Gets the state_or_province_name of this Person.


        :return: The state_or_province_name of this Person.
        :rtype: str
        """
        return self._state_or_province_name

    @state_or_province_name.setter
    def state_or_province_name(self, state_or_province_name):
        """Sets the state_or_province_name of this Person.


        :param state_or_province_name: The state_or_province_name of this Person.
        :type state_or_province_name: str
        """

        self._state_or_province_name = state_or_province_name

    @property
    def street(self):
        """Gets the street of this Person.


        :return: The street of this Person.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Person.


        :param street: The street of this Person.
        :type street: str
        """

        self._street = street
