# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelatedCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: float=None, enabled: bool=None, product_count: float=None):
        """RelatedCategory - a model defined in OpenAPI

        :param category_id: The category_id of this RelatedCategory.
        :param enabled: The enabled of this RelatedCategory.
        :param product_count: The product_count of this RelatedCategory.
        """
        self.openapi_types = {
            'category_id': float,
            'enabled': bool,
            'product_count': float
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'enabled': 'enabled',
            'product_count': 'productCount'
        }

        self._category_id = category_id
        self._enabled = enabled
        self._product_count = product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelatedCategory of this RelatedCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this RelatedCategory.


        :return: The category_id of this RelatedCategory.
        :rtype: float
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this RelatedCategory.


        :param category_id: The category_id of this RelatedCategory.
        :type category_id: float
        """

        self._category_id = category_id

    @property
    def enabled(self):
        """Gets the enabled of this RelatedCategory.


        :return: The enabled of this RelatedCategory.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RelatedCategory.


        :param enabled: The enabled of this RelatedCategory.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def product_count(self):
        """Gets the product_count of this RelatedCategory.


        :return: The product_count of this RelatedCategory.
        :rtype: float
        """
        return self._product_count

    @product_count.setter
    def product_count(self, product_count):
        """Sets the product_count of this RelatedCategory.


        :param product_count: The product_count of this RelatedCategory.
        :type product_count: float
        """

        self._product_count = product_count
