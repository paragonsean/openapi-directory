# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_category: bool=None, description: str=None, enabled: bool=None, id: int=None, name: str=None, original_image_url: str=None, product_count: int=None, thumbnail_url: str=None, url: str=None):
        """Category - a model defined in OpenAPI

        :param default_category: The default_category of this Category.
        :param description: The description of this Category.
        :param enabled: The enabled of this Category.
        :param id: The id of this Category.
        :param name: The name of this Category.
        :param original_image_url: The original_image_url of this Category.
        :param product_count: The product_count of this Category.
        :param thumbnail_url: The thumbnail_url of this Category.
        :param url: The url of this Category.
        """
        self.openapi_types = {
            'default_category': bool,
            'description': str,
            'enabled': bool,
            'id': int,
            'name': str,
            'original_image_url': str,
            'product_count': int,
            'thumbnail_url': str,
            'url': str
        }

        self.attribute_map = {
            'default_category': 'defaultCategory',
            'description': 'description',
            'enabled': 'enabled',
            'id': 'id',
            'name': 'name',
            'original_image_url': 'originalImageUrl',
            'product_count': 'productCount',
            'thumbnail_url': 'thumbnailUrl',
            'url': 'url'
        }

        self._default_category = default_category
        self._description = description
        self._enabled = enabled
        self._id = id
        self._name = name
        self._original_image_url = original_image_url
        self._product_count = product_count
        self._thumbnail_url = thumbnail_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_category(self):
        """Gets the default_category of this Category.

        true/false

        :return: The default_category of this Category.
        :rtype: bool
        """
        return self._default_category

    @default_category.setter
    def default_category(self, default_category):
        """Sets the default_category of this Category.

        true/false

        :param default_category: The default_category of this Category.
        :type default_category: bool
        """

        self._default_category = default_category

    @property
    def description(self):
        """Gets the description of this Category.


        :return: The description of this Category.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Category.


        :param description: The description of this Category.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this Category.

        true if the category is enabled, false otherwise

        :return: The enabled of this Category.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Category.

        true if the category is enabled, false otherwise

        :param enabled: The enabled of this Category.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Category.


        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.


        :param name: The name of this Category.
        :type name: str
        """

        self._name = name

    @property
    def original_image_url(self):
        """Gets the original_image_url of this Category.


        :return: The original_image_url of this Category.
        :rtype: str
        """
        return self._original_image_url

    @original_image_url.setter
    def original_image_url(self, original_image_url):
        """Sets the original_image_url of this Category.


        :param original_image_url: The original_image_url of this Category.
        :type original_image_url: str
        """

        self._original_image_url = original_image_url

    @property
    def product_count(self):
        """Gets the product_count of this Category.


        :return: The product_count of this Category.
        :rtype: int
        """
        return self._product_count

    @product_count.setter
    def product_count(self, product_count):
        """Sets the product_count of this Category.


        :param product_count: The product_count of this Category.
        :type product_count: int
        """

        self._product_count = product_count

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Category.


        :return: The thumbnail_url of this Category.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Category.


        :param thumbnail_url: The thumbnail_url of this Category.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def url(self):
        """Gets the url of this Category.


        :return: The url of this Category.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Category.


        :param url: The url of this Category.
        :type url: str
        """

        self._url = url
