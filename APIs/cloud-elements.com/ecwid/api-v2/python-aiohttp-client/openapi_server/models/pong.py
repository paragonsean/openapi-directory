# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pong(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_time: datetime=None, endpoint: str=None, valid: bool=None):
        """Pong - a model defined in OpenAPI

        :param date_time: The date_time of this Pong.
        :param endpoint: The endpoint of this Pong.
        :param valid: The valid of this Pong.
        """
        self.openapi_types = {
            'date_time': datetime,
            'endpoint': str,
            'valid': bool
        }

        self.attribute_map = {
            'date_time': 'dateTime',
            'endpoint': 'endpoint',
            'valid': 'valid'
        }

        self._date_time = date_time
        self._endpoint = endpoint
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pong':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pong of this Pong.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_time(self):
        """Gets the date_time of this Pong.


        :return: The date_time of this Pong.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this Pong.


        :param date_time: The date_time of this Pong.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def endpoint(self):
        """Gets the endpoint of this Pong.


        :return: The endpoint of this Pong.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Pong.


        :param endpoint: The endpoint of this Pong.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def valid(self):
        """Gets the valid of this Pong.


        :return: The valid of this Pong.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Pong.


        :param valid: The valid of this Pong.
        :type valid: bool
        """

        self._valid = valid
