# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.swaggerdefinitions import Swaggerdefinitions
from openapi_server.models.swaggerinfo import Swaggerinfo
from openapi_server.models.swaggerpaths import Swaggerpaths
from openapi_server.models.swaggertags import Swaggertags
from openapi_server import util


class SwaggerDocs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_path: str=None, definitions: Swaggerdefinitions=None, host: str=None, info: Swaggerinfo=None, paths: Swaggerpaths=None, schemes: List[str]=None, swagger: str=None, tags: List[Swaggertags]=None):
        """SwaggerDocs - a model defined in OpenAPI

        :param base_path: The base_path of this SwaggerDocs.
        :param definitions: The definitions of this SwaggerDocs.
        :param host: The host of this SwaggerDocs.
        :param info: The info of this SwaggerDocs.
        :param paths: The paths of this SwaggerDocs.
        :param schemes: The schemes of this SwaggerDocs.
        :param swagger: The swagger of this SwaggerDocs.
        :param tags: The tags of this SwaggerDocs.
        """
        self.openapi_types = {
            'base_path': str,
            'definitions': Swaggerdefinitions,
            'host': str,
            'info': Swaggerinfo,
            'paths': Swaggerpaths,
            'schemes': List[str],
            'swagger': str,
            'tags': List[Swaggertags]
        }

        self.attribute_map = {
            'base_path': 'basePath',
            'definitions': 'definitions',
            'host': 'host',
            'info': 'info',
            'paths': 'paths',
            'schemes': 'schemes',
            'swagger': 'swagger',
            'tags': 'tags'
        }

        self._base_path = base_path
        self._definitions = definitions
        self._host = host
        self._info = info
        self._paths = paths
        self._schemes = schemes
        self._swagger = swagger
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwaggerDocs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The swaggerDocs of this SwaggerDocs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_path(self):
        """Gets the base_path of this SwaggerDocs.


        :return: The base_path of this SwaggerDocs.
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this SwaggerDocs.


        :param base_path: The base_path of this SwaggerDocs.
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def definitions(self):
        """Gets the definitions of this SwaggerDocs.


        :return: The definitions of this SwaggerDocs.
        :rtype: Swaggerdefinitions
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this SwaggerDocs.


        :param definitions: The definitions of this SwaggerDocs.
        :type definitions: Swaggerdefinitions
        """

        self._definitions = definitions

    @property
    def host(self):
        """Gets the host of this SwaggerDocs.


        :return: The host of this SwaggerDocs.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SwaggerDocs.


        :param host: The host of this SwaggerDocs.
        :type host: str
        """

        self._host = host

    @property
    def info(self):
        """Gets the info of this SwaggerDocs.


        :return: The info of this SwaggerDocs.
        :rtype: Swaggerinfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SwaggerDocs.


        :param info: The info of this SwaggerDocs.
        :type info: Swaggerinfo
        """

        self._info = info

    @property
    def paths(self):
        """Gets the paths of this SwaggerDocs.


        :return: The paths of this SwaggerDocs.
        :rtype: Swaggerpaths
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this SwaggerDocs.


        :param paths: The paths of this SwaggerDocs.
        :type paths: Swaggerpaths
        """

        self._paths = paths

    @property
    def schemes(self):
        """Gets the schemes of this SwaggerDocs.


        :return: The schemes of this SwaggerDocs.
        :rtype: List[str]
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this SwaggerDocs.


        :param schemes: The schemes of this SwaggerDocs.
        :type schemes: List[str]
        """

        self._schemes = schemes

    @property
    def swagger(self):
        """Gets the swagger of this SwaggerDocs.


        :return: The swagger of this SwaggerDocs.
        :rtype: str
        """
        return self._swagger

    @swagger.setter
    def swagger(self, swagger):
        """Sets the swagger of this SwaggerDocs.


        :param swagger: The swagger of this SwaggerDocs.
        :type swagger: str
        """

        self._swagger = swagger

    @property
    def tags(self):
        """Gets the tags of this SwaggerDocs.


        :return: The tags of this SwaggerDocs.
        :rtype: List[Swaggertags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SwaggerDocs.


        :param tags: The tags of this SwaggerDocs.
        :type tags: List[Swaggertags]
        """

        self._tags = tags
