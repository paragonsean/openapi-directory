/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.CustomerPatch;
import org.openapitools.client.model.CustomerPost;
import org.openapitools.client.model.Order;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomersApi
 */
@Disabled
public class CustomersApiTest {

    private final CustomersApi api = new CustomersApi();

    /**
     * Create a new customer in eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Customer&#39; model are those required to create a new customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerTest() throws ApiException {
        String authorization = null;
        CustomerPost customer = null;
        Customer response = api.createCustomer(authorization, customer);
        // TODO: test validations
    }

    /**
     * Delete a customer associated with a given ID from your eCommerce system. Specifying a customer associated with a given ID that does not exist will result in an error message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        api.deleteCustomerById(authorization, id);
        // TODO: test validations
    }

    /**
     * Retrieve a customer associated with a given ID from the eCommerce system. Specifying a customer with an ID that does not exist will result in an error response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        Customer response = api.getCustomerById(authorization, id);
        // TODO: test validations
    }

    /**
     * Find customers in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomersTest() throws ApiException {
        String authorization = null;
        String where = null;
        Long pageSize = null;
        String nextPage = null;
        String fields = null;
        List<Customer> response = api.getCustomers(authorization, where, pageSize, nextPage, fields);
        // TODO: test validations
    }

    /**
     * Find orders in the customer associated with a given ID. If the customer does not exist, an error response will be returned. If no orders are found in the given customer then an empty array will be returned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomersOrdersTest() throws ApiException {
        String authorization = null;
        String id = null;
        Long pageSize = null;
        String nextPage = null;
        String fields = null;
        List<Order> response = api.getCustomersOrders(authorization, id, pageSize, nextPage, fields);
        // TODO: test validations
    }

    /**
     * Update an customer associated with a given ID in the eCommerce system.The update API uses the PATCH HTTP verb, so only those fields provided in the customer object will be updated, and those fields not provided will be left alone. Updating a customer with a specified ID that does not exist will result in an error response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        CustomerPatch customer = null;
        Customer response = api.updateCustomerById(authorization, id, customer);
        // TODO: test validations
    }

}
