/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderPatch;
import org.openapitools.client.model.OrderPost;
import org.openapitools.client.model.Payment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    /**
     * Create an order in the eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Order&#39; model are those required to create a new order.The paymentStatus can only be AWAITING_PAYMENT or INCOMPLETE.The fulfillmentStatus can only be AWAITING_PROCESSING
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        String authorization = null;
        OrderPost order = null;
        Order response = api.createOrder(authorization, order);
        // TODO: test validations
    }

    /**
     * Delete an order associated with a given ID from your eCommerce system. Specifying an order associated with a given ID that does not exist will result in an error message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        api.deleteOrderById(authorization, id);
        // TODO: test validations
    }

    /**
     * Retrieve an order associated with a given ID from the eCommerce system. Specifying an order with an ID that does not exist will result in an error response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        Order response = api.getOrderById(authorization, id);
        // TODO: test validations
    }

    /**
     * Find orders in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        String authorization = null;
        String where = null;
        Long pageSize = null;
        String nextPage = null;
        String fields = null;
        List<Order> response = api.getOrders(authorization, where, pageSize, nextPage, fields);
        // TODO: test validations
    }

    /**
     * Retrieve the payments in the eCommerce system for the specified order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrdersPaymentsTest() throws ApiException {
        String authorization = null;
        String orderId = null;
        Long pageSize = null;
        String nextPage = null;
        String fields = null;
        List<Payment> response = api.getOrdersPayments(authorization, orderId, pageSize, nextPage, fields);
        // TODO: test validations
    }

    /**
     * Retrieve the refunds in the eCommerce system for the specified order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrdersRefundsTest() throws ApiException {
        String authorization = null;
        String orderId = null;
        Long pageSize = null;
        String nextPage = null;
        String fields = null;
        List<Payment> response = api.getOrdersRefunds(authorization, orderId, pageSize, nextPage, fields);
        // TODO: test validations
    }

    /**
     * Update an order associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with a specified ID that does not exist will result in an error response&lt;/strong&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        OrderPatch order = null;
        String action = null;
        Order response = api.updateOrderById(authorization, id, order, action);
        // TODO: test validations
    }

}
