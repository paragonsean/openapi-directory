/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductPatch;
import org.openapitools.client.model.ProductPost;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Create a new product in eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Product&#39; model are those required to create a new product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductTest() throws ApiException {
        String authorization = null;
        ProductPost product = null;
        Product response = api.createProduct(authorization, product);
        // TODO: test validations
    }

    /**
     * Delete a product associated with a given ID from your eCommerce system. Specifying a product associated with a given ID that does not exist will result in an error message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        api.deleteProductById(authorization, id);
        // TODO: test validations
    }

    /**
     * Retrieve a product associated with a given ID from the eCommerce system. Specifying a product with an ID that does not exist will result in an error response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        Product response = api.getProductById(authorization, id);
        // TODO: test validations
    }

    /**
     * Find products in the eCommerce system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword.  If no search expression is provided, all records will be retrieved
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        String authorization = null;
        String where = null;
        Long pageSize = null;
        String nextPage = null;
        String fields = null;
        List<Product> response = api.getProducts(authorization, where, pageSize, nextPage, fields);
        // TODO: test validations
    }

    /**
     * Update a product associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the product object will be updated, and those fields not provided will be left alone. Updating a product with a specified ID that does not exist will result in an error response. &lt;p&gt;&lt;strong&gt;Update supports the following fields: sku, quantity, trackQuantity, quantityDelta, warningLimit, name, price, weight, tangible, enabled, fixedShippingRateOnly, fixedShippingRate, description, wholesalePrices, compareAtPrice, productClassId&lt;/strong&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductByIdTest() throws ApiException {
        String authorization = null;
        String id = null;
        ProductPatch product = null;
        Product response = api.updateProductById(authorization, id, product);
        // TODO: test validations
    }

}
