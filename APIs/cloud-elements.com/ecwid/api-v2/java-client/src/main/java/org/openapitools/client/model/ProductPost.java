/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.Favorite;
import org.openapitools.client.model.GalleryImage;
import org.openapitools.client.model.Option;
import org.openapitools.client.model.ProductDimensions;
import org.openapitools.client.model.ProductTax;
import org.openapitools.client.model.RelatedProducts;
import org.openapitools.client.model.Shipping;
import org.openapitools.client.model.Tax;
import org.openapitools.client.model.WholesalePrices;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductPost {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<Attribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_IDS = "categoryIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private List<Long> categoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPARE_AT_PRICE = "compareAtPrice";
  @SerializedName(SERIALIZED_NAME_COMPARE_AT_PRICE)
  private Double compareAtPrice;

  public static final String SERIALIZED_NAME_COMPARE_TO_PRICE = "compareToPrice";
  @SerializedName(SERIALIZED_NAME_COMPARE_TO_PRICE)
  private Double compareToPrice;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEFAULT_CATEGORY_ID = "defaultCategoryId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CATEGORY_ID)
  private Long defaultCategoryId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private ProductDimensions dimensions;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private Favorite favorites;

  public static final String SERIALIZED_NAME_FIXED_SHIPPING_RATE = "fixedShippingRate";
  @SerializedName(SERIALIZED_NAME_FIXED_SHIPPING_RATE)
  private Double fixedShippingRate;

  public static final String SERIALIZED_NAME_FIXED_SHIPPING_RATE_ONLY = "fixedShippingRateOnly";
  @SerializedName(SERIALIZED_NAME_FIXED_SHIPPING_RATE_ONLY)
  private Boolean fixedShippingRateOnly;

  public static final String SERIALIZED_NAME_GALLERY_IMAGES = "galleryImages";
  @SerializedName(SERIALIZED_NAME_GALLERY_IMAGES)
  private List<GalleryImage> galleryImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOGLE_ITEM_CONDITION = "googleItemCondition";
  @SerializedName(SERIALIZED_NAME_GOOGLE_ITEM_CONDITION)
  private String googleItemCondition;

  public static final String SERIALIZED_NAME_IS_SHIPPING_REQUIRED = "isShippingRequired";
  @SerializedName(SERIALIZED_NAME_IS_SHIPPING_REQUIRED)
  private Boolean isShippingRequired;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<Option> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_PRODUCT_CLASS_ID = "productClassId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CLASS_ID)
  private Long productClassId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_RELATED_PRODUCTS = "relatedProducts";
  @SerializedName(SERIALIZED_NAME_RELATED_PRODUCTS)
  private RelatedProducts relatedProducts;

  public static final String SERIALIZED_NAME_SEO_DESCRIPTION = "seoDescription";
  @SerializedName(SERIALIZED_NAME_SEO_DESCRIPTION)
  private String seoDescription;

  public static final String SERIALIZED_NAME_SEO_TITLE = "seoTitle";
  @SerializedName(SERIALIZED_NAME_SEO_TITLE)
  private String seoTitle;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Shipping shipping;

  public static final String SERIALIZED_NAME_SHOW_ON_FRONTPAGE = "showOnFrontpage";
  @SerializedName(SERIALIZED_NAME_SHOW_ON_FRONTPAGE)
  private Double showOnFrontpage;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private ProductTax tax;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<Tax> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNING_LIMIT = "warningLimit";
  @SerializedName(SERIALIZED_NAME_WARNING_LIMIT)
  private Long warningLimit;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public static final String SERIALIZED_NAME_WHOLESALE_PRICES = "wholesalePrices";
  @SerializedName(SERIALIZED_NAME_WHOLESALE_PRICES)
  private WholesalePrices wholesalePrices;

  public ProductPost() {
  }

  public ProductPost attributes(List<Attribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ProductPost addAttributesItem(Attribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<Attribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<Attribute> attributes) {
    this.attributes = attributes;
  }


  public ProductPost categoryIds(List<Long> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public ProductPost addCategoryIdsItem(Long categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

  /**
   * Get categoryIds
   * @return categoryIds
   */
  @javax.annotation.Nullable
  public List<Long> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(List<Long> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public ProductPost compareAtPrice(Double compareAtPrice) {
    this.compareAtPrice = compareAtPrice;
    return this;
  }

  /**
   * Productâ€™s sale price displayed strike-out in the customer
   * @return compareAtPrice
   */
  @javax.annotation.Nullable
  public Double getCompareAtPrice() {
    return compareAtPrice;
  }

  public void setCompareAtPrice(Double compareAtPrice) {
    this.compareAtPrice = compareAtPrice;
  }


  public ProductPost compareToPrice(Double compareToPrice) {
    this.compareToPrice = compareToPrice;
    return this;
  }

  /**
   * Get compareToPrice
   * @return compareToPrice
   */
  @javax.annotation.Nullable
  public Double getCompareToPrice() {
    return compareToPrice;
  }

  public void setCompareToPrice(Double compareToPrice) {
    this.compareToPrice = compareToPrice;
  }


  public ProductPost created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ProductPost defaultCategoryId(Long defaultCategoryId) {
    this.defaultCategoryId = defaultCategoryId;
    return this;
  }

  /**
   * Get defaultCategoryId
   * @return defaultCategoryId
   */
  @javax.annotation.Nullable
  public Long getDefaultCategoryId() {
    return defaultCategoryId;
  }

  public void setDefaultCategoryId(Long defaultCategoryId) {
    this.defaultCategoryId = defaultCategoryId;
  }


  public ProductPost description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Product description in HTML
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductPost dimensions(ProductDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public ProductDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(ProductDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public ProductPost enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * true/false
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ProductPost favorites(Favorite favorites) {
    this.favorites = favorites;
    return this;
  }

  /**
   * Get favorites
   * @return favorites
   */
  @javax.annotation.Nullable
  public Favorite getFavorites() {
    return favorites;
  }

  public void setFavorites(Favorite favorites) {
    this.favorites = favorites;
  }


  public ProductPost fixedShippingRate(Double fixedShippingRate) {
    this.fixedShippingRate = fixedShippingRate;
    return this;
  }

  /**
   * Get fixedShippingRate
   * @return fixedShippingRate
   */
  @javax.annotation.Nullable
  public Double getFixedShippingRate() {
    return fixedShippingRate;
  }

  public void setFixedShippingRate(Double fixedShippingRate) {
    this.fixedShippingRate = fixedShippingRate;
  }


  public ProductPost fixedShippingRateOnly(Boolean fixedShippingRateOnly) {
    this.fixedShippingRateOnly = fixedShippingRateOnly;
    return this;
  }

  /**
   * true/false
   * @return fixedShippingRateOnly
   */
  @javax.annotation.Nullable
  public Boolean getFixedShippingRateOnly() {
    return fixedShippingRateOnly;
  }

  public void setFixedShippingRateOnly(Boolean fixedShippingRateOnly) {
    this.fixedShippingRateOnly = fixedShippingRateOnly;
  }


  public ProductPost galleryImages(List<GalleryImage> galleryImages) {
    this.galleryImages = galleryImages;
    return this;
  }

  public ProductPost addGalleryImagesItem(GalleryImage galleryImagesItem) {
    if (this.galleryImages == null) {
      this.galleryImages = new ArrayList<>();
    }
    this.galleryImages.add(galleryImagesItem);
    return this;
  }

  /**
   * Get galleryImages
   * @return galleryImages
   */
  @javax.annotation.Nullable
  public List<GalleryImage> getGalleryImages() {
    return galleryImages;
  }

  public void setGalleryImages(List<GalleryImage> galleryImages) {
    this.galleryImages = galleryImages;
  }


  public ProductPost googleItemCondition(String googleItemCondition) {
    this.googleItemCondition = googleItemCondition;
    return this;
  }

  /**
   * Google Item Condition Status
   * @return googleItemCondition
   */
  @javax.annotation.Nullable
  public String getGoogleItemCondition() {
    return googleItemCondition;
  }

  public void setGoogleItemCondition(String googleItemCondition) {
    this.googleItemCondition = googleItemCondition;
  }


  public ProductPost isShippingRequired(Boolean isShippingRequired) {
    this.isShippingRequired = isShippingRequired;
    return this;
  }

  /**
   * Get isShippingRequired
   * @return isShippingRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsShippingRequired() {
    return isShippingRequired;
  }

  public void setIsShippingRequired(Boolean isShippingRequired) {
    this.isShippingRequired = isShippingRequired;
  }


  public ProductPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Product title
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProductPost options(List<Option> options) {
    this.options = options;
    return this;
  }

  public ProductPost addOptionsItem(Option optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public List<Option> getOptions() {
    return options;
  }

  public void setOptions(List<Option> options) {
    this.options = options;
  }


  public ProductPost price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Base Product price
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public ProductPost productClassId(Long productClassId) {
    this.productClassId = productClassId;
    return this;
  }

  /**
   * Id of the product type that this product belongs to.
   * @return productClassId
   */
  @javax.annotation.Nullable
  public Long getProductClassId() {
    return productClassId;
  }

  public void setProductClassId(Long productClassId) {
    this.productClassId = productClassId;
  }


  public ProductPost quantity(Long quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Amount of product items in stock.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Long getQuantity() {
    return quantity;
  }

  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public ProductPost relatedProducts(RelatedProducts relatedProducts) {
    this.relatedProducts = relatedProducts;
    return this;
  }

  /**
   * Get relatedProducts
   * @return relatedProducts
   */
  @javax.annotation.Nullable
  public RelatedProducts getRelatedProducts() {
    return relatedProducts;
  }

  public void setRelatedProducts(RelatedProducts relatedProducts) {
    this.relatedProducts = relatedProducts;
  }


  public ProductPost seoDescription(String seoDescription) {
    this.seoDescription = seoDescription;
    return this;
  }

  /**
   * Get seoDescription
   * @return seoDescription
   */
  @javax.annotation.Nullable
  public String getSeoDescription() {
    return seoDescription;
  }

  public void setSeoDescription(String seoDescription) {
    this.seoDescription = seoDescription;
  }


  public ProductPost seoTitle(String seoTitle) {
    this.seoTitle = seoTitle;
    return this;
  }

  /**
   * Get seoTitle
   * @return seoTitle
   */
  @javax.annotation.Nullable
  public String getSeoTitle() {
    return seoTitle;
  }

  public void setSeoTitle(String seoTitle) {
    this.seoTitle = seoTitle;
  }


  public ProductPost shipping(Shipping shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public Shipping getShipping() {
    return shipping;
  }

  public void setShipping(Shipping shipping) {
    this.shipping = shipping;
  }


  public ProductPost showOnFrontpage(Double showOnFrontpage) {
    this.showOnFrontpage = showOnFrontpage;
    return this;
  }

  /**
   * Get showOnFrontpage
   * @return showOnFrontpage
   */
  @javax.annotation.Nullable
  public Double getShowOnFrontpage() {
    return showOnFrontpage;
  }

  public void setShowOnFrontpage(Double showOnFrontpage) {
    this.showOnFrontpage = showOnFrontpage;
  }


  public ProductPost sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Product SKU
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public ProductPost tax(ProductTax tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public ProductTax getTax() {
    return tax;
  }

  public void setTax(ProductTax tax) {
    this.tax = tax;
  }


  public ProductPost taxes(List<Tax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public ProductPost addTaxesItem(Tax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * Get taxes
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<Tax> taxes) {
    this.taxes = taxes;
  }


  public ProductPost warningLimit(Long warningLimit) {
    this.warningLimit = warningLimit;
    return this;
  }

  /**
   * Get warningLimit
   * @return warningLimit
   */
  @javax.annotation.Nullable
  public Long getWarningLimit() {
    return warningLimit;
  }

  public void setWarningLimit(Long warningLimit) {
    this.warningLimit = warningLimit;
  }


  public ProductPost weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Product weight in the units defined in store settings
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }


  public ProductPost wholesalePrices(WholesalePrices wholesalePrices) {
    this.wholesalePrices = wholesalePrices;
    return this;
  }

  /**
   * Get wholesalePrices
   * @return wholesalePrices
   */
  @javax.annotation.Nullable
  public WholesalePrices getWholesalePrices() {
    return wholesalePrices;
  }

  public void setWholesalePrices(WholesalePrices wholesalePrices) {
    this.wholesalePrices = wholesalePrices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductPost productPost = (ProductPost) o;
    return Objects.equals(this.attributes, productPost.attributes) &&
        Objects.equals(this.categoryIds, productPost.categoryIds) &&
        Objects.equals(this.compareAtPrice, productPost.compareAtPrice) &&
        Objects.equals(this.compareToPrice, productPost.compareToPrice) &&
        Objects.equals(this.created, productPost.created) &&
        Objects.equals(this.defaultCategoryId, productPost.defaultCategoryId) &&
        Objects.equals(this.description, productPost.description) &&
        Objects.equals(this.dimensions, productPost.dimensions) &&
        Objects.equals(this.enabled, productPost.enabled) &&
        Objects.equals(this.favorites, productPost.favorites) &&
        Objects.equals(this.fixedShippingRate, productPost.fixedShippingRate) &&
        Objects.equals(this.fixedShippingRateOnly, productPost.fixedShippingRateOnly) &&
        Objects.equals(this.galleryImages, productPost.galleryImages) &&
        Objects.equals(this.googleItemCondition, productPost.googleItemCondition) &&
        Objects.equals(this.isShippingRequired, productPost.isShippingRequired) &&
        Objects.equals(this.name, productPost.name) &&
        Objects.equals(this.options, productPost.options) &&
        Objects.equals(this.price, productPost.price) &&
        Objects.equals(this.productClassId, productPost.productClassId) &&
        Objects.equals(this.quantity, productPost.quantity) &&
        Objects.equals(this.relatedProducts, productPost.relatedProducts) &&
        Objects.equals(this.seoDescription, productPost.seoDescription) &&
        Objects.equals(this.seoTitle, productPost.seoTitle) &&
        Objects.equals(this.shipping, productPost.shipping) &&
        Objects.equals(this.showOnFrontpage, productPost.showOnFrontpage) &&
        Objects.equals(this.sku, productPost.sku) &&
        Objects.equals(this.tax, productPost.tax) &&
        Objects.equals(this.taxes, productPost.taxes) &&
        Objects.equals(this.warningLimit, productPost.warningLimit) &&
        Objects.equals(this.weight, productPost.weight) &&
        Objects.equals(this.wholesalePrices, productPost.wholesalePrices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, categoryIds, compareAtPrice, compareToPrice, created, defaultCategoryId, description, dimensions, enabled, favorites, fixedShippingRate, fixedShippingRateOnly, galleryImages, googleItemCondition, isShippingRequired, name, options, price, productClassId, quantity, relatedProducts, seoDescription, seoTitle, shipping, showOnFrontpage, sku, tax, taxes, warningLimit, weight, wholesalePrices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductPost {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    compareAtPrice: ").append(toIndentedString(compareAtPrice)).append("\n");
    sb.append("    compareToPrice: ").append(toIndentedString(compareToPrice)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    defaultCategoryId: ").append(toIndentedString(defaultCategoryId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    fixedShippingRate: ").append(toIndentedString(fixedShippingRate)).append("\n");
    sb.append("    fixedShippingRateOnly: ").append(toIndentedString(fixedShippingRateOnly)).append("\n");
    sb.append("    galleryImages: ").append(toIndentedString(galleryImages)).append("\n");
    sb.append("    googleItemCondition: ").append(toIndentedString(googleItemCondition)).append("\n");
    sb.append("    isShippingRequired: ").append(toIndentedString(isShippingRequired)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productClassId: ").append(toIndentedString(productClassId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    relatedProducts: ").append(toIndentedString(relatedProducts)).append("\n");
    sb.append("    seoDescription: ").append(toIndentedString(seoDescription)).append("\n");
    sb.append("    seoTitle: ").append(toIndentedString(seoTitle)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    showOnFrontpage: ").append(toIndentedString(showOnFrontpage)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    warningLimit: ").append(toIndentedString(warningLimit)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    wholesalePrices: ").append(toIndentedString(wholesalePrices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("categoryIds");
    openapiFields.add("compareAtPrice");
    openapiFields.add("compareToPrice");
    openapiFields.add("created");
    openapiFields.add("defaultCategoryId");
    openapiFields.add("description");
    openapiFields.add("dimensions");
    openapiFields.add("enabled");
    openapiFields.add("favorites");
    openapiFields.add("fixedShippingRate");
    openapiFields.add("fixedShippingRateOnly");
    openapiFields.add("galleryImages");
    openapiFields.add("googleItemCondition");
    openapiFields.add("isShippingRequired");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("price");
    openapiFields.add("productClassId");
    openapiFields.add("quantity");
    openapiFields.add("relatedProducts");
    openapiFields.add("seoDescription");
    openapiFields.add("seoTitle");
    openapiFields.add("shipping");
    openapiFields.add("showOnFrontpage");
    openapiFields.add("sku");
    openapiFields.add("tax");
    openapiFields.add("taxes");
    openapiFields.add("warningLimit");
    openapiFields.add("weight");
    openapiFields.add("wholesalePrices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductPost is not found in the empty JSON string", ProductPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            Attribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryIds") != null && !jsonObj.get("categoryIds").isJsonNull() && !jsonObj.get("categoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoryIds").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        ProductDimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      // validate the optional field `favorites`
      if (jsonObj.get("favorites") != null && !jsonObj.get("favorites").isJsonNull()) {
        Favorite.validateJsonElement(jsonObj.get("favorites"));
      }
      if (jsonObj.get("galleryImages") != null && !jsonObj.get("galleryImages").isJsonNull()) {
        JsonArray jsonArraygalleryImages = jsonObj.getAsJsonArray("galleryImages");
        if (jsonArraygalleryImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("galleryImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `galleryImages` to be an array in the JSON string but got `%s`", jsonObj.get("galleryImages").toString()));
          }

          // validate the optional field `galleryImages` (array)
          for (int i = 0; i < jsonArraygalleryImages.size(); i++) {
            GalleryImage.validateJsonElement(jsonArraygalleryImages.get(i));
          };
        }
      }
      if ((jsonObj.get("googleItemCondition") != null && !jsonObj.get("googleItemCondition").isJsonNull()) && !jsonObj.get("googleItemCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleItemCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleItemCondition").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            Option.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      // validate the optional field `relatedProducts`
      if (jsonObj.get("relatedProducts") != null && !jsonObj.get("relatedProducts").isJsonNull()) {
        RelatedProducts.validateJsonElement(jsonObj.get("relatedProducts"));
      }
      if ((jsonObj.get("seoDescription") != null && !jsonObj.get("seoDescription").isJsonNull()) && !jsonObj.get("seoDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seoDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seoDescription").toString()));
      }
      if ((jsonObj.get("seoTitle") != null && !jsonObj.get("seoTitle").isJsonNull()) && !jsonObj.get("seoTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seoTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seoTitle").toString()));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        Shipping.validateJsonElement(jsonObj.get("shipping"));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        ProductTax.validateJsonElement(jsonObj.get("tax"));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
      // validate the optional field `wholesalePrices`
      if (jsonObj.get("wholesalePrices") != null && !jsonObj.get("wholesalePrices").isJsonNull()) {
        WholesalePrices.validateJsonElement(jsonObj.get("wholesalePrices"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductPost.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductPost>() {
           @Override
           public void write(JsonWriter out, ProductPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductPost
   * @throws IOException if the JSON string is invalid with respect to ProductPost
   */
  public static ProductPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductPost.class);
  }

  /**
   * Convert an instance of ProductPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

