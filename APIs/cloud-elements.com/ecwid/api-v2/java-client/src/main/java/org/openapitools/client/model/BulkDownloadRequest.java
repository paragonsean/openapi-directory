/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BulkDownloadRequestDocsHubDetails;
import org.openapitools.client.model.BulkDownloadRequestQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkDownloadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkDownloadRequest {
  public static final String SERIALIZED_NAME_API_LIMIT = "apiLimit";
  @SerializedName(SERIALIZED_NAME_API_LIMIT)
  private Integer apiLimit;

  public static final String SERIALIZED_NAME_CONTINUE_FROM_JOB_ID = "continueFromJobId";
  @SerializedName(SERIALIZED_NAME_CONTINUE_FROM_JOB_ID)
  private Integer continueFromJobId;

  public static final String SERIALIZED_NAME_DOCS_HUB_DETAILS = "docsHubDetails";
  @SerializedName(SERIALIZED_NAME_DOCS_HUB_DETAILS)
  private BulkDownloadRequestDocsHubDetails docsHubDetails;

  public static final String SERIALIZED_NAME_FILTER_DATE_FIELD = "filterDateField";
  @SerializedName(SERIALIZED_NAME_FILTER_DATE_FIELD)
  private String filterDateField;

  public static final String SERIALIZED_NAME_FILTER_NULLS = "filterNulls";
  @SerializedName(SERIALIZED_NAME_FILTER_NULLS)
  private Boolean filterNulls;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    APPLICATION_JSON("application/json"),
    
    TXT_CSV("txt/csv"),
    
    APPLICATION_JSONL("application/jsonl");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NOTIFICATION_URL = "notificationUrl";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_URL)
  private String notificationUrl;

  public static final String SERIALIZED_NAME_OBJECT_NAME = "objectName";
  @SerializedName(SERIALIZED_NAME_OBJECT_NAME)
  private String objectName;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private BulkDownloadRequestQuery query;

  public static final String SERIALIZED_NAME_SELECT_FIELDS = "selectFields";
  @SerializedName(SERIALIZED_NAME_SELECT_FIELDS)
  private String selectFields;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private OffsetDateTime to;

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private String where;

  public BulkDownloadRequest() {
  }

  public BulkDownloadRequest apiLimit(Integer apiLimit) {
    this.apiLimit = apiLimit;
    return this;
  }

  /**
   * Get apiLimit
   * @return apiLimit
   */
  @javax.annotation.Nullable
  public Integer getApiLimit() {
    return apiLimit;
  }

  public void setApiLimit(Integer apiLimit) {
    this.apiLimit = apiLimit;
  }


  public BulkDownloadRequest continueFromJobId(Integer continueFromJobId) {
    this.continueFromJobId = continueFromJobId;
    return this;
  }

  /**
   * Get continueFromJobId
   * @return continueFromJobId
   */
  @javax.annotation.Nullable
  public Integer getContinueFromJobId() {
    return continueFromJobId;
  }

  public void setContinueFromJobId(Integer continueFromJobId) {
    this.continueFromJobId = continueFromJobId;
  }


  public BulkDownloadRequest docsHubDetails(BulkDownloadRequestDocsHubDetails docsHubDetails) {
    this.docsHubDetails = docsHubDetails;
    return this;
  }

  /**
   * Get docsHubDetails
   * @return docsHubDetails
   */
  @javax.annotation.Nullable
  public BulkDownloadRequestDocsHubDetails getDocsHubDetails() {
    return docsHubDetails;
  }

  public void setDocsHubDetails(BulkDownloadRequestDocsHubDetails docsHubDetails) {
    this.docsHubDetails = docsHubDetails;
  }


  public BulkDownloadRequest filterDateField(String filterDateField) {
    this.filterDateField = filterDateField;
    return this;
  }

  /**
   * Get filterDateField
   * @return filterDateField
   */
  @javax.annotation.Nullable
  public String getFilterDateField() {
    return filterDateField;
  }

  public void setFilterDateField(String filterDateField) {
    this.filterDateField = filterDateField;
  }


  public BulkDownloadRequest filterNulls(Boolean filterNulls) {
    this.filterNulls = filterNulls;
    return this;
  }

  /**
   * Get filterNulls
   * @return filterNulls
   */
  @javax.annotation.Nullable
  public Boolean getFilterNulls() {
    return filterNulls;
  }

  public void setFilterNulls(Boolean filterNulls) {
    this.filterNulls = filterNulls;
  }


  public BulkDownloadRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public BulkDownloadRequest from(OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(OffsetDateTime from) {
    this.from = from;
  }


  public BulkDownloadRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public BulkDownloadRequest notificationUrl(String notificationUrl) {
    this.notificationUrl = notificationUrl;
    return this;
  }

  /**
   * Get notificationUrl
   * @return notificationUrl
   */
  @javax.annotation.Nullable
  public String getNotificationUrl() {
    return notificationUrl;
  }

  public void setNotificationUrl(String notificationUrl) {
    this.notificationUrl = notificationUrl;
  }


  public BulkDownloadRequest objectName(String objectName) {
    this.objectName = objectName;
    return this;
  }

  /**
   * Get objectName
   * @return objectName
   */
  @javax.annotation.Nonnull
  public String getObjectName() {
    return objectName;
  }

  public void setObjectName(String objectName) {
    this.objectName = objectName;
  }


  public BulkDownloadRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public BulkDownloadRequest query(BulkDownloadRequestQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public BulkDownloadRequestQuery getQuery() {
    return query;
  }

  public void setQuery(BulkDownloadRequestQuery query) {
    this.query = query;
  }


  public BulkDownloadRequest selectFields(String selectFields) {
    this.selectFields = selectFields;
    return this;
  }

  /**
   * Get selectFields
   * @return selectFields
   */
  @javax.annotation.Nullable
  public String getSelectFields() {
    return selectFields;
  }

  public void setSelectFields(String selectFields) {
    this.selectFields = selectFields;
  }


  public BulkDownloadRequest to(OffsetDateTime to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTo() {
    return to;
  }

  public void setTo(OffsetDateTime to) {
    this.to = to;
  }


  public BulkDownloadRequest where(String where) {
    this.where = where;
    return this;
  }

  /**
   * Get where
   * @return where
   */
  @javax.annotation.Nullable
  public String getWhere() {
    return where;
  }

  public void setWhere(String where) {
    this.where = where;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkDownloadRequest bulkDownloadRequest = (BulkDownloadRequest) o;
    return Objects.equals(this.apiLimit, bulkDownloadRequest.apiLimit) &&
        Objects.equals(this.continueFromJobId, bulkDownloadRequest.continueFromJobId) &&
        Objects.equals(this.docsHubDetails, bulkDownloadRequest.docsHubDetails) &&
        Objects.equals(this.filterDateField, bulkDownloadRequest.filterDateField) &&
        Objects.equals(this.filterNulls, bulkDownloadRequest.filterNulls) &&
        Objects.equals(this.format, bulkDownloadRequest.format) &&
        Objects.equals(this.from, bulkDownloadRequest.from) &&
        Objects.equals(this.limit, bulkDownloadRequest.limit) &&
        Objects.equals(this.notificationUrl, bulkDownloadRequest.notificationUrl) &&
        Objects.equals(this.objectName, bulkDownloadRequest.objectName) &&
        Objects.equals(this.pageSize, bulkDownloadRequest.pageSize) &&
        Objects.equals(this.query, bulkDownloadRequest.query) &&
        Objects.equals(this.selectFields, bulkDownloadRequest.selectFields) &&
        Objects.equals(this.to, bulkDownloadRequest.to) &&
        Objects.equals(this.where, bulkDownloadRequest.where);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiLimit, continueFromJobId, docsHubDetails, filterDateField, filterNulls, format, from, limit, notificationUrl, objectName, pageSize, query, selectFields, to, where);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkDownloadRequest {\n");
    sb.append("    apiLimit: ").append(toIndentedString(apiLimit)).append("\n");
    sb.append("    continueFromJobId: ").append(toIndentedString(continueFromJobId)).append("\n");
    sb.append("    docsHubDetails: ").append(toIndentedString(docsHubDetails)).append("\n");
    sb.append("    filterDateField: ").append(toIndentedString(filterDateField)).append("\n");
    sb.append("    filterNulls: ").append(toIndentedString(filterNulls)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    notificationUrl: ").append(toIndentedString(notificationUrl)).append("\n");
    sb.append("    objectName: ").append(toIndentedString(objectName)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    selectFields: ").append(toIndentedString(selectFields)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiLimit");
    openapiFields.add("continueFromJobId");
    openapiFields.add("docsHubDetails");
    openapiFields.add("filterDateField");
    openapiFields.add("filterNulls");
    openapiFields.add("format");
    openapiFields.add("from");
    openapiFields.add("limit");
    openapiFields.add("notificationUrl");
    openapiFields.add("objectName");
    openapiFields.add("pageSize");
    openapiFields.add("query");
    openapiFields.add("selectFields");
    openapiFields.add("to");
    openapiFields.add("where");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("objectName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkDownloadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkDownloadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkDownloadRequest is not found in the empty JSON string", BulkDownloadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkDownloadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkDownloadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BulkDownloadRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `docsHubDetails`
      if (jsonObj.get("docsHubDetails") != null && !jsonObj.get("docsHubDetails").isJsonNull()) {
        BulkDownloadRequestDocsHubDetails.validateJsonElement(jsonObj.get("docsHubDetails"));
      }
      if ((jsonObj.get("filterDateField") != null && !jsonObj.get("filterDateField").isJsonNull()) && !jsonObj.get("filterDateField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterDateField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterDateField").toString()));
      }
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the required field `format`
      FormatEnum.validateJsonElement(jsonObj.get("format"));
      if ((jsonObj.get("notificationUrl") != null && !jsonObj.get("notificationUrl").isJsonNull()) && !jsonObj.get("notificationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationUrl").toString()));
      }
      if (!jsonObj.get("objectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectName").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        BulkDownloadRequestQuery.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("selectFields") != null && !jsonObj.get("selectFields").isJsonNull()) && !jsonObj.get("selectFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectFields").toString()));
      }
      if ((jsonObj.get("where") != null && !jsonObj.get("where").isJsonNull()) && !jsonObj.get("where").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `where` to be a primitive type in the JSON string but got `%s`", jsonObj.get("where").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkDownloadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkDownloadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkDownloadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkDownloadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkDownloadRequest>() {
           @Override
           public void write(JsonWriter out, BulkDownloadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkDownloadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkDownloadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkDownloadRequest
   * @throws IOException if the JSON string is invalid with respect to BulkDownloadRequest
   */
  public static BulkDownloadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkDownloadRequest.class);
  }

  /**
   * Convert an instance of BulkDownloadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

