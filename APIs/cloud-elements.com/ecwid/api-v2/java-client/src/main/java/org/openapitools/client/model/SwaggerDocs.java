/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Swaggerdefinitions;
import org.openapitools.client.model.Swaggerinfo;
import org.openapitools.client.model.Swaggerpaths;
import org.openapitools.client.model.Swaggertags;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SwaggerDocs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SwaggerDocs {
  public static final String SERIALIZED_NAME_BASE_PATH = "basePath";
  @SerializedName(SERIALIZED_NAME_BASE_PATH)
  private String basePath;

  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private Swaggerdefinitions definitions;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private Swaggerinfo info;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private Swaggerpaths paths;

  public static final String SERIALIZED_NAME_SCHEMES = "schemes";
  @SerializedName(SERIALIZED_NAME_SCHEMES)
  private List<String> schemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWAGGER = "swagger";
  @SerializedName(SERIALIZED_NAME_SWAGGER)
  private String swagger;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Swaggertags> tags = new ArrayList<>();

  public SwaggerDocs() {
  }

  public SwaggerDocs basePath(String basePath) {
    this.basePath = basePath;
    return this;
  }

  /**
   * Get basePath
   * @return basePath
   */
  @javax.annotation.Nullable
  public String getBasePath() {
    return basePath;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }


  public SwaggerDocs definitions(Swaggerdefinitions definitions) {
    this.definitions = definitions;
    return this;
  }

  /**
   * Get definitions
   * @return definitions
   */
  @javax.annotation.Nullable
  public Swaggerdefinitions getDefinitions() {
    return definitions;
  }

  public void setDefinitions(Swaggerdefinitions definitions) {
    this.definitions = definitions;
  }


  public SwaggerDocs host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public SwaggerDocs info(Swaggerinfo info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public Swaggerinfo getInfo() {
    return info;
  }

  public void setInfo(Swaggerinfo info) {
    this.info = info;
  }


  public SwaggerDocs paths(Swaggerpaths paths) {
    this.paths = paths;
    return this;
  }

  /**
   * Get paths
   * @return paths
   */
  @javax.annotation.Nullable
  public Swaggerpaths getPaths() {
    return paths;
  }

  public void setPaths(Swaggerpaths paths) {
    this.paths = paths;
  }


  public SwaggerDocs schemes(List<String> schemes) {
    this.schemes = schemes;
    return this;
  }

  public SwaggerDocs addSchemesItem(String schemesItem) {
    if (this.schemes == null) {
      this.schemes = new ArrayList<>();
    }
    this.schemes.add(schemesItem);
    return this;
  }

  /**
   * Get schemes
   * @return schemes
   */
  @javax.annotation.Nullable
  public List<String> getSchemes() {
    return schemes;
  }

  public void setSchemes(List<String> schemes) {
    this.schemes = schemes;
  }


  public SwaggerDocs swagger(String swagger) {
    this.swagger = swagger;
    return this;
  }

  /**
   * Get swagger
   * @return swagger
   */
  @javax.annotation.Nullable
  public String getSwagger() {
    return swagger;
  }

  public void setSwagger(String swagger) {
    this.swagger = swagger;
  }


  public SwaggerDocs tags(List<Swaggertags> tags) {
    this.tags = tags;
    return this;
  }

  public SwaggerDocs addTagsItem(Swaggertags tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Swaggertags> getTags() {
    return tags;
  }

  public void setTags(List<Swaggertags> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwaggerDocs swaggerDocs = (SwaggerDocs) o;
    return Objects.equals(this.basePath, swaggerDocs.basePath) &&
        Objects.equals(this.definitions, swaggerDocs.definitions) &&
        Objects.equals(this.host, swaggerDocs.host) &&
        Objects.equals(this.info, swaggerDocs.info) &&
        Objects.equals(this.paths, swaggerDocs.paths) &&
        Objects.equals(this.schemes, swaggerDocs.schemes) &&
        Objects.equals(this.swagger, swaggerDocs.swagger) &&
        Objects.equals(this.tags, swaggerDocs.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePath, definitions, host, info, paths, schemes, swagger, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwaggerDocs {\n");
    sb.append("    basePath: ").append(toIndentedString(basePath)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    schemes: ").append(toIndentedString(schemes)).append("\n");
    sb.append("    swagger: ").append(toIndentedString(swagger)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePath");
    openapiFields.add("definitions");
    openapiFields.add("host");
    openapiFields.add("info");
    openapiFields.add("paths");
    openapiFields.add("schemes");
    openapiFields.add("swagger");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SwaggerDocs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SwaggerDocs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SwaggerDocs is not found in the empty JSON string", SwaggerDocs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SwaggerDocs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SwaggerDocs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basePath") != null && !jsonObj.get("basePath").isJsonNull()) && !jsonObj.get("basePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePath").toString()));
      }
      // validate the optional field `definitions`
      if (jsonObj.get("definitions") != null && !jsonObj.get("definitions").isJsonNull()) {
        Swaggerdefinitions.validateJsonElement(jsonObj.get("definitions"));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        Swaggerinfo.validateJsonElement(jsonObj.get("info"));
      }
      // validate the optional field `paths`
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull()) {
        Swaggerpaths.validateJsonElement(jsonObj.get("paths"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemes") != null && !jsonObj.get("schemes").isJsonNull() && !jsonObj.get("schemes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemes` to be an array in the JSON string but got `%s`", jsonObj.get("schemes").toString()));
      }
      if ((jsonObj.get("swagger") != null && !jsonObj.get("swagger").isJsonNull()) && !jsonObj.get("swagger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swagger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swagger").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Swaggertags.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SwaggerDocs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SwaggerDocs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SwaggerDocs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SwaggerDocs.class));

       return (TypeAdapter<T>) new TypeAdapter<SwaggerDocs>() {
           @Override
           public void write(JsonWriter out, SwaggerDocs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SwaggerDocs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SwaggerDocs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SwaggerDocs
   * @throws IOException if the JSON string is invalid with respect to SwaggerDocs
   */
  public static SwaggerDocs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SwaggerDocs.class);
  }

  /**
   * Convert an instance of SwaggerDocs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

