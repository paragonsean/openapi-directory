/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectNameApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectNameApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectNameApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createByObjectName
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param body The {objectName} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createByObjectNameCall(String authorization, String objectName, ModelObject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{objectName}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createByObjectNameValidateBeforeCall(String authorization, String objectName, ModelObject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createByObjectName(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling createByObjectName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createByObjectName(Async)");
        }

        return createByObjectNameCall(authorization, objectName, body, _callback);

    }

    /**
     * Create an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param body The {objectName} (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public void createByObjectName(String authorization, String objectName, ModelObject body) throws ApiException {
        createByObjectNameWithHttpInfo(authorization, objectName, body);
    }

    /**
     * Create an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param body The {objectName} (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createByObjectNameWithHttpInfo(String authorization, String objectName, ModelObject body) throws ApiException {
        okhttp3.Call localVarCall = createByObjectNameValidateBeforeCall(authorization, objectName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param body The {objectName} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createByObjectNameAsync(String authorization, String objectName, ModelObject body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createByObjectNameValidateBeforeCall(authorization, objectName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createObjectNameByChildObjectName
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the object (required)
     * @param body The {childObjectName} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createObjectNameByChildObjectNameCall(String authorization, String objectName, String objectId, String childObjectName, ModelObject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}/{childObjectName}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "childObjectName" + "}", localVarApiClient.escapeString(childObjectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createObjectNameByChildObjectNameValidateBeforeCall(String authorization, String objectName, String objectId, String childObjectName, ModelObject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling createObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling createObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'childObjectName' is set
        if (childObjectName == null) {
            throw new ApiException("Missing the required parameter 'childObjectName' when calling createObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createObjectNameByChildObjectName(Async)");
        }

        return createObjectNameByChildObjectNameCall(authorization, objectName, objectId, childObjectName, body, _callback);

    }

    /**
     * Create an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the object (required)
     * @param body The {childObjectName} (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public void createObjectNameByChildObjectName(String authorization, String objectName, String objectId, String childObjectName, ModelObject body) throws ApiException {
        createObjectNameByChildObjectNameWithHttpInfo(authorization, objectName, objectId, childObjectName, body);
    }

    /**
     * Create an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the object (required)
     * @param body The {childObjectName} (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createObjectNameByChildObjectNameWithHttpInfo(String authorization, String objectName, String objectId, String childObjectName, ModelObject body) throws ApiException {
        okhttp3.Call localVarCall = createObjectNameByChildObjectNameValidateBeforeCall(authorization, objectName, objectId, childObjectName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the object (required)
     * @param body The {childObjectName} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createObjectNameByChildObjectNameAsync(String authorization, String objectName, String objectId, String childObjectName, ModelObject body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createObjectNameByChildObjectNameValidateBeforeCall(authorization, objectName, objectId, childObjectName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteObjectNameByChildObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectNameByChildObjectIdCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}/{childObjectName}/{childObjectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "childObjectName" + "}", localVarApiClient.escapeString(childObjectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "childObjectId" + "}", localVarApiClient.escapeString(childObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectNameByChildObjectIdValidateBeforeCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling deleteObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectName' is set
        if (childObjectName == null) {
            throw new ApiException("Missing the required parameter 'childObjectName' when calling deleteObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectId' is set
        if (childObjectId == null) {
            throw new ApiException("Missing the required parameter 'childObjectId' when calling deleteObjectNameByChildObjectId(Async)");
        }

        return deleteObjectNameByChildObjectIdCall(authorization, objectName, childObjectName, objectId, childObjectId, _callback);

    }

    /**
     * Delete an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public void deleteObjectNameByChildObjectId(String authorization, String objectName, String childObjectName, String objectId, String childObjectId) throws ApiException {
        deleteObjectNameByChildObjectIdWithHttpInfo(authorization, objectName, childObjectName, objectId, childObjectId);
    }

    /**
     * Delete an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteObjectNameByChildObjectIdWithHttpInfo(String authorization, String objectName, String childObjectName, String objectId, String childObjectId) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an {childObjectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectNameByChildObjectIdAsync(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteObjectNameByObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectNameByObjectIdCall(String authorization, String objectName, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectNameByObjectIdValidateBeforeCall(String authorization, String objectName, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling deleteObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteObjectNameByObjectId(Async)");
        }

        return deleteObjectNameByObjectIdCall(authorization, objectName, objectId, _callback);

    }

    /**
     * Delete an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public void deleteObjectNameByObjectId(String authorization, String objectName, String objectId) throws ApiException {
        deleteObjectNameByObjectIdWithHttpInfo(authorization, objectName, objectId);
    }

    /**
     * Delete an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteObjectNameByObjectIdWithHttpInfo(String authorization, String objectName, String objectId) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectNameByObjectIdAsync(String authorization, String objectName, String objectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByObjectName
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByObjectNameCall(String authorization, String objectName, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{objectName}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByObjectNameValidateBeforeCall(String authorization, String objectName, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getByObjectName(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling getByObjectName(Async)");
        }

        return getByObjectNameCall(authorization, objectName, where, pageSize, nextPage, fields, _callback);

    }

    /**
     * Search for {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelObject> getByObjectName(String authorization, String objectName, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<ModelObject>> localVarResp = getByObjectNameWithHttpInfo(authorization, objectName, where, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Search for {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;ModelObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelObject>> getByObjectNameWithHttpInfo(String authorization, String objectName, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getByObjectNameValidateBeforeCall(authorization, objectName, where, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<ModelObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByObjectNameAsync(String authorization, String objectName, String where, Long pageSize, String nextPage, String fields, final ApiCallback<List<ModelObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByObjectNameValidateBeforeCall(authorization, objectName, where, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<ModelObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectNameByChildObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectNameByChildObjectIdCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}/{childObjectName}/{childObjectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "childObjectName" + "}", localVarApiClient.escapeString(childObjectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "childObjectId" + "}", localVarApiClient.escapeString(childObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectNameByChildObjectIdValidateBeforeCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling getObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectName' is set
        if (childObjectName == null) {
            throw new ApiException("Missing the required parameter 'childObjectName' when calling getObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectId' is set
        if (childObjectId == null) {
            throw new ApiException("Missing the required parameter 'childObjectId' when calling getObjectNameByChildObjectId(Async)");
        }

        return getObjectNameByChildObjectIdCall(authorization, objectName, childObjectName, objectId, childObjectId, _callback);

    }

    /**
     * Retrieve an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @return ModelObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ModelObject getObjectNameByChildObjectId(String authorization, String objectName, String childObjectName, String objectId, String childObjectId) throws ApiException {
        ApiResponse<ModelObject> localVarResp = getObjectNameByChildObjectIdWithHttpInfo(authorization, objectName, childObjectName, objectId, childObjectId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @return ApiResponse&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelObject> getObjectNameByChildObjectIdWithHttpInfo(String authorization, String objectName, String childObjectName, String objectId, String childObjectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an {childObjectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectNameByChildObjectIdAsync(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectNameByChildObjectName
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectNameByChildObjectNameCall(String authorization, String objectName, String objectId, String childObjectName, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}/{childObjectName}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "childObjectName" + "}", localVarApiClient.escapeString(childObjectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectNameByChildObjectNameValidateBeforeCall(String authorization, String objectName, String objectId, String childObjectName, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling getObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectNameByChildObjectName(Async)");
        }

        // verify the required parameter 'childObjectName' is set
        if (childObjectName == null) {
            throw new ApiException("Missing the required parameter 'childObjectName' when calling getObjectNameByChildObjectName(Async)");
        }

        return getObjectNameByChildObjectNameCall(authorization, objectName, objectId, childObjectName, where, pageSize, nextPage, fields, _callback);

    }

    /**
     * Search for {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelObject> getObjectNameByChildObjectName(String authorization, String objectName, String objectId, String childObjectName, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<ModelObject>> localVarResp = getObjectNameByChildObjectNameWithHttpInfo(authorization, objectName, objectId, childObjectName, where, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Search for {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;ModelObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelObject>> getObjectNameByChildObjectNameWithHttpInfo(String authorization, String objectName, String objectId, String childObjectName, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getObjectNameByChildObjectNameValidateBeforeCall(authorization, objectName, objectId, childObjectName, where, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<ModelObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for {childObjectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param where The CEQL search expression. (optional)
     * @param pageSize The page size. Defaults to 200 if not provided. Maximum of 5000. (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectNameByChildObjectNameAsync(String authorization, String objectName, String objectId, String childObjectName, String where, Long pageSize, String nextPage, String fields, final ApiCallback<List<ModelObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectNameByChildObjectNameValidateBeforeCall(authorization, objectName, objectId, childObjectName, where, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<ModelObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectNameByObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectNameByObjectIdCall(String authorization, String objectName, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectNameByObjectIdValidateBeforeCall(String authorization, String objectName, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling getObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectNameByObjectId(Async)");
        }

        return getObjectNameByObjectIdCall(authorization, objectName, objectId, _callback);

    }

    /**
     * Retrieve an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @return ModelObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ModelObject getObjectNameByObjectId(String authorization, String objectName, String objectId) throws ApiException {
        ApiResponse<ModelObject> localVarResp = getObjectNameByObjectIdWithHttpInfo(authorization, objectName, objectId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @return ApiResponse&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelObject> getObjectNameByObjectIdWithHttpInfo(String authorization, String objectName, String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectNameByObjectIdAsync(String authorization, String objectName, String objectId, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceObjectNameByChildObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceObjectNameByChildObjectIdCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}/{childObjectName}/{childObjectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "childObjectName" + "}", localVarApiClient.escapeString(childObjectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "childObjectId" + "}", localVarApiClient.escapeString(childObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceObjectNameByChildObjectIdValidateBeforeCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling replaceObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling replaceObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectName' is set
        if (childObjectName == null) {
            throw new ApiException("Missing the required parameter 'childObjectName' when calling replaceObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling replaceObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectId' is set
        if (childObjectId == null) {
            throw new ApiException("Missing the required parameter 'childObjectId' when calling replaceObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceObjectNameByChildObjectId(Async)");
        }

        return replaceObjectNameByChildObjectIdCall(authorization, objectName, childObjectName, objectId, childObjectId, body, _callback);

    }

    /**
     * Update an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @return ModelObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ModelObject replaceObjectNameByChildObjectId(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body) throws ApiException {
        ApiResponse<ModelObject> localVarResp = replaceObjectNameByChildObjectIdWithHttpInfo(authorization, objectName, childObjectName, objectId, childObjectId, body);
        return localVarResp.getData();
    }

    /**
     * Update an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @return ApiResponse&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelObject> replaceObjectNameByChildObjectIdWithHttpInfo(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body) throws ApiException {
        okhttp3.Call localVarCall = replaceObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, body, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an {childObjectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceObjectNameByChildObjectIdAsync(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceObjectNameByObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceObjectNameByObjectIdCall(String authorization, String objectName, String objectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceObjectNameByObjectIdValidateBeforeCall(String authorization, String objectName, String objectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling replaceObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling replaceObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling replaceObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceObjectNameByObjectId(Async)");
        }

        return replaceObjectNameByObjectIdCall(authorization, objectName, objectId, body, _callback);

    }

    /**
     * Update an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @return ModelObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ModelObject replaceObjectNameByObjectId(String authorization, String objectName, String objectId, ModelObject body) throws ApiException {
        ApiResponse<ModelObject> localVarResp = replaceObjectNameByObjectIdWithHttpInfo(authorization, objectName, objectId, body);
        return localVarResp.getData();
    }

    /**
     * Update an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @return ApiResponse&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelObject> replaceObjectNameByObjectIdWithHttpInfo(String authorization, String objectName, String objectId, ModelObject body) throws ApiException {
        okhttp3.Call localVarCall = replaceObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, body, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceObjectNameByObjectIdAsync(String authorization, String objectName, String objectId, ModelObject body, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateObjectNameByChildObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectNameByChildObjectIdCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}/{childObjectName}/{childObjectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "childObjectName" + "}", localVarApiClient.escapeString(childObjectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()))
            .replace("{" + "childObjectId" + "}", localVarApiClient.escapeString(childObjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectNameByChildObjectIdValidateBeforeCall(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling updateObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectName' is set
        if (childObjectName == null) {
            throw new ApiException("Missing the required parameter 'childObjectName' when calling updateObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'childObjectId' is set
        if (childObjectId == null) {
            throw new ApiException("Missing the required parameter 'childObjectId' when calling updateObjectNameByChildObjectId(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateObjectNameByChildObjectId(Async)");
        }

        return updateObjectNameByChildObjectIdCall(authorization, objectName, childObjectName, objectId, childObjectId, body, _callback);

    }

    /**
     * Update an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @return ModelObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ModelObject updateObjectNameByChildObjectId(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body) throws ApiException {
        ApiResponse<ModelObject> localVarResp = updateObjectNameByChildObjectIdWithHttpInfo(authorization, objectName, childObjectName, objectId, childObjectId, body);
        return localVarResp.getData();
    }

    /**
     * Update an {childObjectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @return ApiResponse&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelObject> updateObjectNameByChildObjectIdWithHttpInfo(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body) throws ApiException {
        okhttp3.Call localVarCall = updateObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, body, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an {childObjectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param childObjectName The name of the childObjectName (required)
     * @param objectId The {objectName} ID (required)
     * @param childObjectId The {childObjectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &amp;quot;Accept&amp;quot; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectNameByChildObjectIdAsync(String authorization, String objectName, String childObjectName, String objectId, String childObjectId, ModelObject body, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectNameByChildObjectIdValidateBeforeCall(authorization, objectName, childObjectName, objectId, childObjectId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateObjectNameByObjectId
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectNameByObjectIdCall(String authorization, String objectName, String objectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{objectName}/{objectId}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectNameByObjectIdValidateBeforeCall(String authorization, String objectName, String objectId, ModelObject body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling updateObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling updateObjectNameByObjectId(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateObjectNameByObjectId(Async)");
        }

        return updateObjectNameByObjectIdCall(authorization, objectName, objectId, body, _callback);

    }

    /**
     * Update an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @return ModelObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ModelObject updateObjectNameByObjectId(String authorization, String objectName, String objectId, ModelObject body) throws ApiException {
        ApiResponse<ModelObject> localVarResp = updateObjectNameByObjectIdWithHttpInfo(authorization, objectName, objectId, body);
        return localVarResp.getData();
    }

    /**
     * Update an {objectName}
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @return ApiResponse&lt;ModelObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelObject> updateObjectNameByObjectIdWithHttpInfo(String authorization, String objectName, String objectId, ModelObject body) throws ApiException {
        okhttp3.Call localVarCall = updateObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, body, null);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an {objectName} (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object (required)
     * @param objectId The {objectName} ID (required)
     * @param body The {objectName} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectNameByObjectIdAsync(String authorization, String objectName, String objectId, ModelObject body, final ApiCallback<ModelObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectNameByObjectIdValidateBeforeCall(authorization, objectName, objectId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
