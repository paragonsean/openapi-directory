/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Combination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Combination {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<Attribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMBINATION_NUMBER = "combinationNumber";
  @SerializedName(SERIALIZED_NAME_COMBINATION_NUMBER)
  private Double combinationNumber;

  public static final String SERIALIZED_NAME_COMPARE_TO_PRICE = "compareToPrice";
  @SerializedName(SERIALIZED_NAME_COMPARE_TO_PRICE)
  private Double compareToPrice;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_UNLIMITED = "unlimited";
  @SerializedName(SERIALIZED_NAME_UNLIMITED)
  private Boolean unlimited;

  public static final String SERIALIZED_NAME_WARNING_LIMIT = "warningLimit";
  @SerializedName(SERIALIZED_NAME_WARNING_LIMIT)
  private Double warningLimit;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public Combination() {
  }

  public Combination attributes(List<Attribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Combination addAttributesItem(Attribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<Attribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<Attribute> attributes) {
    this.attributes = attributes;
  }


  public Combination combinationNumber(Double combinationNumber) {
    this.combinationNumber = combinationNumber;
    return this;
  }

  /**
   * Get combinationNumber
   * @return combinationNumber
   */
  @javax.annotation.Nullable
  public Double getCombinationNumber() {
    return combinationNumber;
  }

  public void setCombinationNumber(Double combinationNumber) {
    this.combinationNumber = combinationNumber;
  }


  public Combination compareToPrice(Double compareToPrice) {
    this.compareToPrice = compareToPrice;
    return this;
  }

  /**
   * Get compareToPrice
   * @return compareToPrice
   */
  @javax.annotation.Nullable
  public Double getCompareToPrice() {
    return compareToPrice;
  }

  public void setCompareToPrice(Double compareToPrice) {
    this.compareToPrice = compareToPrice;
  }


  public Combination id(Double id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Double getId() {
    return id;
  }

  public void setId(Double id) {
    this.id = id;
  }


  public Combination price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public Combination quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public Combination sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public Combination unlimited(Boolean unlimited) {
    this.unlimited = unlimited;
    return this;
  }

  /**
   * Get unlimited
   * @return unlimited
   */
  @javax.annotation.Nullable
  public Boolean getUnlimited() {
    return unlimited;
  }

  public void setUnlimited(Boolean unlimited) {
    this.unlimited = unlimited;
  }


  public Combination warningLimit(Double warningLimit) {
    this.warningLimit = warningLimit;
    return this;
  }

  /**
   * Get warningLimit
   * @return warningLimit
   */
  @javax.annotation.Nullable
  public Double getWarningLimit() {
    return warningLimit;
  }

  public void setWarningLimit(Double warningLimit) {
    this.warningLimit = warningLimit;
  }


  public Combination weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Combination combination = (Combination) o;
    return Objects.equals(this.attributes, combination.attributes) &&
        Objects.equals(this.combinationNumber, combination.combinationNumber) &&
        Objects.equals(this.compareToPrice, combination.compareToPrice) &&
        Objects.equals(this.id, combination.id) &&
        Objects.equals(this.price, combination.price) &&
        Objects.equals(this.quantity, combination.quantity) &&
        Objects.equals(this.sku, combination.sku) &&
        Objects.equals(this.unlimited, combination.unlimited) &&
        Objects.equals(this.warningLimit, combination.warningLimit) &&
        Objects.equals(this.weight, combination.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, combinationNumber, compareToPrice, id, price, quantity, sku, unlimited, warningLimit, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Combination {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    combinationNumber: ").append(toIndentedString(combinationNumber)).append("\n");
    sb.append("    compareToPrice: ").append(toIndentedString(compareToPrice)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    unlimited: ").append(toIndentedString(unlimited)).append("\n");
    sb.append("    warningLimit: ").append(toIndentedString(warningLimit)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("combinationNumber");
    openapiFields.add("compareToPrice");
    openapiFields.add("id");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("sku");
    openapiFields.add("unlimited");
    openapiFields.add("warningLimit");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Combination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Combination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Combination is not found in the empty JSON string", Combination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Combination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Combination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            Attribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Combination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Combination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Combination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Combination.class));

       return (TypeAdapter<T>) new TypeAdapter<Combination>() {
           @Override
           public void write(JsonWriter out, Combination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Combination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Combination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Combination
   * @throws IOException if the JSON string is invalid with respect to Combination
   */
  public static Combination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Combination.class);
  }

  /**
   * Convert an instance of Combination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

