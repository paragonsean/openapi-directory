/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Long categoryId;

  public static final String SERIALIZED_NAME_COUPON_APPLIED = "couponApplied";
  @SerializedName(SERIALIZED_NAME_COUPON_APPLIED)
  private Boolean couponApplied;

  public static final String SERIALIZED_NAME_DIGITAL = "digital";
  @SerializedName(SERIALIZED_NAME_DIGITAL)
  private Boolean digital;

  public static final String SERIALIZED_NAME_FIXED_SHIPPING_RATE = "fixedShippingRate";
  @SerializedName(SERIALIZED_NAME_FIXED_SHIPPING_RATE)
  private Double fixedShippingRate;

  public static final String SERIALIZED_NAME_FIXED_SHIPPING_RATE_ONLY = "fixedShippingRateOnly";
  @SerializedName(SERIALIZED_NAME_FIXED_SHIPPING_RATE_ONLY)
  private Boolean fixedShippingRateOnly;

  public static final String SERIALIZED_NAME_HD_THUMBNAIL_URL = "hdThumbnailUrl";
  @SerializedName(SERIALIZED_NAME_HD_THUMBNAIL_URL)
  private String hdThumbnailUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_SHIPPING_REQUIRED = "isShippingRequired";
  @SerializedName(SERIALIZED_NAME_IS_SHIPPING_REQUIRED)
  private Boolean isShippingRequired;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_PRODUCT_AVAILABLE = "productAvailable";
  @SerializedName(SERIALIZED_NAME_PRODUCT_AVAILABLE)
  private Boolean productAvailable;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Long productId;

  public static final String SERIALIZED_NAME_PRODUCT_PRICE = "productPrice";
  @SerializedName(SERIALIZED_NAME_PRODUCT_PRICE)
  private Double productPrice;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_QUANTITY_IN_STOCK = "quantityInStock";
  @SerializedName(SERIALIZED_NAME_QUANTITY_IN_STOCK)
  private Double quantityInStock;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Double shipping;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SMALL_THUMBNAIL_URL = "smallThumbnailUrl";
  @SerializedName(SERIALIZED_NAME_SMALL_THUMBNAIL_URL)
  private String smallThumbnailUrl;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<Tax> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACK_QUANTITY = "trackQuantity";
  @SerializedName(SERIALIZED_NAME_TRACK_QUANTITY)
  private Boolean trackQuantity;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public Item() {
  }

  public Item categoryId(Long categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public Long getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Long categoryId) {
    this.categoryId = categoryId;
  }


  public Item couponApplied(Boolean couponApplied) {
    this.couponApplied = couponApplied;
    return this;
  }

  /**
   * true/false. shows whether a discount coupon is applied for this item
   * @return couponApplied
   */
  @javax.annotation.Nullable
  public Boolean getCouponApplied() {
    return couponApplied;
  }

  public void setCouponApplied(Boolean couponApplied) {
    this.couponApplied = couponApplied;
  }


  public Item digital(Boolean digital) {
    this.digital = digital;
    return this;
  }

  /**
   * true/false. shows whether the item has downloadable files attached
   * @return digital
   */
  @javax.annotation.Nullable
  public Boolean getDigital() {
    return digital;
  }

  public void setDigital(Boolean digital) {
    this.digital = digital;
  }


  public Item fixedShippingRate(Double fixedShippingRate) {
    this.fixedShippingRate = fixedShippingRate;
    return this;
  }

  /**
   * Get fixedShippingRate
   * @return fixedShippingRate
   */
  @javax.annotation.Nullable
  public Double getFixedShippingRate() {
    return fixedShippingRate;
  }

  public void setFixedShippingRate(Double fixedShippingRate) {
    this.fixedShippingRate = fixedShippingRate;
  }


  public Item fixedShippingRateOnly(Boolean fixedShippingRateOnly) {
    this.fixedShippingRateOnly = fixedShippingRateOnly;
    return this;
  }

  /**
   * true/false. shows whether the fixed shipping rate is set for the product
   * @return fixedShippingRateOnly
   */
  @javax.annotation.Nullable
  public Boolean getFixedShippingRateOnly() {
    return fixedShippingRateOnly;
  }

  public void setFixedShippingRateOnly(Boolean fixedShippingRateOnly) {
    this.fixedShippingRateOnly = fixedShippingRateOnly;
  }


  public Item hdThumbnailUrl(String hdThumbnailUrl) {
    this.hdThumbnailUrl = hdThumbnailUrl;
    return this;
  }

  /**
   * Get hdThumbnailUrl
   * @return hdThumbnailUrl
   */
  @javax.annotation.Nullable
  public String getHdThumbnailUrl() {
    return hdThumbnailUrl;
  }

  public void setHdThumbnailUrl(String hdThumbnailUrl) {
    this.hdThumbnailUrl = hdThumbnailUrl;
  }


  public Item id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Item imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Item isShippingRequired(Boolean isShippingRequired) {
    this.isShippingRequired = isShippingRequired;
    return this;
  }

  /**
   * true/false. shows whether the item requires shipping
   * @return isShippingRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsShippingRequired() {
    return isShippingRequired;
  }

  public void setIsShippingRequired(Boolean isShippingRequired) {
    this.isShippingRequired = isShippingRequired;
  }


  public Item name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Item price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public Item productAvailable(Boolean productAvailable) {
    this.productAvailable = productAvailable;
    return this;
  }

  /**
   * true/false. shows whether product is available or not
   * @return productAvailable
   */
  @javax.annotation.Nullable
  public Boolean getProductAvailable() {
    return productAvailable;
  }

  public void setProductAvailable(Boolean productAvailable) {
    this.productAvailable = productAvailable;
  }


  public Item productId(Long productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nullable
  public Long getProductId() {
    return productId;
  }

  public void setProductId(Long productId) {
    this.productId = productId;
  }


  public Item productPrice(Double productPrice) {
    this.productPrice = productPrice;
    return this;
  }

  /**
   * Get productPrice
   * @return productPrice
   */
  @javax.annotation.Nullable
  public Double getProductPrice() {
    return productPrice;
  }

  public void setProductPrice(Double productPrice) {
    this.productPrice = productPrice;
  }


  public Item quantity(Long quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Long getQuantity() {
    return quantity;
  }

  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public Item quantityInStock(Double quantityInStock) {
    this.quantityInStock = quantityInStock;
    return this;
  }

  /**
   * Get quantityInStock
   * @return quantityInStock
   */
  @javax.annotation.Nullable
  public Double getQuantityInStock() {
    return quantityInStock;
  }

  public void setQuantityInStock(Double quantityInStock) {
    this.quantityInStock = quantityInStock;
  }


  public Item shipping(Double shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public Double getShipping() {
    return shipping;
  }

  public void setShipping(Double shipping) {
    this.shipping = shipping;
  }


  public Item sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public Item smallThumbnailUrl(String smallThumbnailUrl) {
    this.smallThumbnailUrl = smallThumbnailUrl;
    return this;
  }

  /**
   * Get smallThumbnailUrl
   * @return smallThumbnailUrl
   */
  @javax.annotation.Nullable
  public String getSmallThumbnailUrl() {
    return smallThumbnailUrl;
  }

  public void setSmallThumbnailUrl(String smallThumbnailUrl) {
    this.smallThumbnailUrl = smallThumbnailUrl;
  }


  public Item tax(Double tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Double getTax() {
    return tax;
  }

  public void setTax(Double tax) {
    this.tax = tax;
  }


  public Item taxes(List<Tax> taxes) {
    this.taxes = taxes;
    return this;
  }

  public Item addTaxesItem(Tax taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * Get taxes
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<Tax> taxes) {
    this.taxes = taxes;
  }


  public Item trackQuantity(Boolean trackQuantity) {
    this.trackQuantity = trackQuantity;
    return this;
  }

  /**
   * true/false. shows whether the store admin set to track the quantity of this product and get low stock notifications
   * @return trackQuantity
   */
  @javax.annotation.Nullable
  public Boolean getTrackQuantity() {
    return trackQuantity;
  }

  public void setTrackQuantity(Boolean trackQuantity) {
    this.trackQuantity = trackQuantity;
  }


  public Item weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.categoryId, item.categoryId) &&
        Objects.equals(this.couponApplied, item.couponApplied) &&
        Objects.equals(this.digital, item.digital) &&
        Objects.equals(this.fixedShippingRate, item.fixedShippingRate) &&
        Objects.equals(this.fixedShippingRateOnly, item.fixedShippingRateOnly) &&
        Objects.equals(this.hdThumbnailUrl, item.hdThumbnailUrl) &&
        Objects.equals(this.id, item.id) &&
        Objects.equals(this.imageUrl, item.imageUrl) &&
        Objects.equals(this.isShippingRequired, item.isShippingRequired) &&
        Objects.equals(this.name, item.name) &&
        Objects.equals(this.price, item.price) &&
        Objects.equals(this.productAvailable, item.productAvailable) &&
        Objects.equals(this.productId, item.productId) &&
        Objects.equals(this.productPrice, item.productPrice) &&
        Objects.equals(this.quantity, item.quantity) &&
        Objects.equals(this.quantityInStock, item.quantityInStock) &&
        Objects.equals(this.shipping, item.shipping) &&
        Objects.equals(this.sku, item.sku) &&
        Objects.equals(this.smallThumbnailUrl, item.smallThumbnailUrl) &&
        Objects.equals(this.tax, item.tax) &&
        Objects.equals(this.taxes, item.taxes) &&
        Objects.equals(this.trackQuantity, item.trackQuantity) &&
        Objects.equals(this.weight, item.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, couponApplied, digital, fixedShippingRate, fixedShippingRateOnly, hdThumbnailUrl, id, imageUrl, isShippingRequired, name, price, productAvailable, productId, productPrice, quantity, quantityInStock, shipping, sku, smallThumbnailUrl, tax, taxes, trackQuantity, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    couponApplied: ").append(toIndentedString(couponApplied)).append("\n");
    sb.append("    digital: ").append(toIndentedString(digital)).append("\n");
    sb.append("    fixedShippingRate: ").append(toIndentedString(fixedShippingRate)).append("\n");
    sb.append("    fixedShippingRateOnly: ").append(toIndentedString(fixedShippingRateOnly)).append("\n");
    sb.append("    hdThumbnailUrl: ").append(toIndentedString(hdThumbnailUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isShippingRequired: ").append(toIndentedString(isShippingRequired)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productAvailable: ").append(toIndentedString(productAvailable)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productPrice: ").append(toIndentedString(productPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityInStock: ").append(toIndentedString(quantityInStock)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    smallThumbnailUrl: ").append(toIndentedString(smallThumbnailUrl)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    trackQuantity: ").append(toIndentedString(trackQuantity)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("couponApplied");
    openapiFields.add("digital");
    openapiFields.add("fixedShippingRate");
    openapiFields.add("fixedShippingRateOnly");
    openapiFields.add("hdThumbnailUrl");
    openapiFields.add("id");
    openapiFields.add("imageUrl");
    openapiFields.add("isShippingRequired");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("productAvailable");
    openapiFields.add("productId");
    openapiFields.add("productPrice");
    openapiFields.add("quantity");
    openapiFields.add("quantityInStock");
    openapiFields.add("shipping");
    openapiFields.add("sku");
    openapiFields.add("smallThumbnailUrl");
    openapiFields.add("tax");
    openapiFields.add("taxes");
    openapiFields.add("trackQuantity");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hdThumbnailUrl") != null && !jsonObj.get("hdThumbnailUrl").isJsonNull()) && !jsonObj.get("hdThumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hdThumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hdThumbnailUrl").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("smallThumbnailUrl") != null && !jsonObj.get("smallThumbnailUrl").isJsonNull()) && !jsonObj.get("smallThumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallThumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallThumbnailUrl").toString()));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

