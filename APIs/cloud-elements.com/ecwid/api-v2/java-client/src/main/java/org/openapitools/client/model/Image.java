/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Image
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Image {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE1500PX_URL = "image1500pxUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE1500PX_URL)
  private String image1500pxUrl;

  public static final String SERIALIZED_NAME_IMAGE160PX_URL = "image160pxUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE160PX_URL)
  private String image160pxUrl;

  public static final String SERIALIZED_NAME_IMAGE400PX_URL = "image400pxUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE400PX_URL)
  private String image400pxUrl;

  public static final String SERIALIZED_NAME_IMAGE800PX_URL = "image800pxUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE800PX_URL)
  private String image800pxUrl;

  public static final String SERIALIZED_NAME_IMAGE_ORIGINAL_URL = "imageOriginalUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_ORIGINAL_URL)
  private String imageOriginalUrl;

  public static final String SERIALIZED_NAME_IS_MAIN = "isMain";
  @SerializedName(SERIALIZED_NAME_IS_MAIN)
  private Boolean isMain;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private Double orderBy;

  public Image() {
  }

  public Image id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Image image1500pxUrl(String image1500pxUrl) {
    this.image1500pxUrl = image1500pxUrl;
    return this;
  }

  /**
   * Get image1500pxUrl
   * @return image1500pxUrl
   */
  @javax.annotation.Nullable
  public String getImage1500pxUrl() {
    return image1500pxUrl;
  }

  public void setImage1500pxUrl(String image1500pxUrl) {
    this.image1500pxUrl = image1500pxUrl;
  }


  public Image image160pxUrl(String image160pxUrl) {
    this.image160pxUrl = image160pxUrl;
    return this;
  }

  /**
   * Get image160pxUrl
   * @return image160pxUrl
   */
  @javax.annotation.Nullable
  public String getImage160pxUrl() {
    return image160pxUrl;
  }

  public void setImage160pxUrl(String image160pxUrl) {
    this.image160pxUrl = image160pxUrl;
  }


  public Image image400pxUrl(String image400pxUrl) {
    this.image400pxUrl = image400pxUrl;
    return this;
  }

  /**
   * Get image400pxUrl
   * @return image400pxUrl
   */
  @javax.annotation.Nullable
  public String getImage400pxUrl() {
    return image400pxUrl;
  }

  public void setImage400pxUrl(String image400pxUrl) {
    this.image400pxUrl = image400pxUrl;
  }


  public Image image800pxUrl(String image800pxUrl) {
    this.image800pxUrl = image800pxUrl;
    return this;
  }

  /**
   * Get image800pxUrl
   * @return image800pxUrl
   */
  @javax.annotation.Nullable
  public String getImage800pxUrl() {
    return image800pxUrl;
  }

  public void setImage800pxUrl(String image800pxUrl) {
    this.image800pxUrl = image800pxUrl;
  }


  public Image imageOriginalUrl(String imageOriginalUrl) {
    this.imageOriginalUrl = imageOriginalUrl;
    return this;
  }

  /**
   * Get imageOriginalUrl
   * @return imageOriginalUrl
   */
  @javax.annotation.Nullable
  public String getImageOriginalUrl() {
    return imageOriginalUrl;
  }

  public void setImageOriginalUrl(String imageOriginalUrl) {
    this.imageOriginalUrl = imageOriginalUrl;
  }


  public Image isMain(Boolean isMain) {
    this.isMain = isMain;
    return this;
  }

  /**
   * Get isMain
   * @return isMain
   */
  @javax.annotation.Nullable
  public Boolean getIsMain() {
    return isMain;
  }

  public void setIsMain(Boolean isMain) {
    this.isMain = isMain;
  }


  public Image orderBy(Double orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Get orderBy
   * @return orderBy
   */
  @javax.annotation.Nullable
  public Double getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(Double orderBy) {
    this.orderBy = orderBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.id, image.id) &&
        Objects.equals(this.image1500pxUrl, image.image1500pxUrl) &&
        Objects.equals(this.image160pxUrl, image.image160pxUrl) &&
        Objects.equals(this.image400pxUrl, image.image400pxUrl) &&
        Objects.equals(this.image800pxUrl, image.image800pxUrl) &&
        Objects.equals(this.imageOriginalUrl, image.imageOriginalUrl) &&
        Objects.equals(this.isMain, image.isMain) &&
        Objects.equals(this.orderBy, image.orderBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, image1500pxUrl, image160pxUrl, image400pxUrl, image800pxUrl, imageOriginalUrl, isMain, orderBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image1500pxUrl: ").append(toIndentedString(image1500pxUrl)).append("\n");
    sb.append("    image160pxUrl: ").append(toIndentedString(image160pxUrl)).append("\n");
    sb.append("    image400pxUrl: ").append(toIndentedString(image400pxUrl)).append("\n");
    sb.append("    image800pxUrl: ").append(toIndentedString(image800pxUrl)).append("\n");
    sb.append("    imageOriginalUrl: ").append(toIndentedString(imageOriginalUrl)).append("\n");
    sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("image1500pxUrl");
    openapiFields.add("image160pxUrl");
    openapiFields.add("image400pxUrl");
    openapiFields.add("image800pxUrl");
    openapiFields.add("imageOriginalUrl");
    openapiFields.add("isMain");
    openapiFields.add("orderBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Image
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Image.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Image is not found in the empty JSON string", Image.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Image.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Image` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image1500pxUrl") != null && !jsonObj.get("image1500pxUrl").isJsonNull()) && !jsonObj.get("image1500pxUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image1500pxUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image1500pxUrl").toString()));
      }
      if ((jsonObj.get("image160pxUrl") != null && !jsonObj.get("image160pxUrl").isJsonNull()) && !jsonObj.get("image160pxUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image160pxUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image160pxUrl").toString()));
      }
      if ((jsonObj.get("image400pxUrl") != null && !jsonObj.get("image400pxUrl").isJsonNull()) && !jsonObj.get("image400pxUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image400pxUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image400pxUrl").toString()));
      }
      if ((jsonObj.get("image800pxUrl") != null && !jsonObj.get("image800pxUrl").isJsonNull()) && !jsonObj.get("image800pxUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image800pxUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image800pxUrl").toString()));
      }
      if ((jsonObj.get("imageOriginalUrl") != null && !jsonObj.get("imageOriginalUrl").isJsonNull()) && !jsonObj.get("imageOriginalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageOriginalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageOriginalUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Image.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Image' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Image> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Image.class));

       return (TypeAdapter<T>) new TypeAdapter<Image>() {
           @Override
           public void write(JsonWriter out, Image value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Image read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Image given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Image
   * @throws IOException if the JSON string is invalid with respect to Image
   */
  public static Image fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Image.class);
  }

  /**
   * Convert an instance of Image to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

