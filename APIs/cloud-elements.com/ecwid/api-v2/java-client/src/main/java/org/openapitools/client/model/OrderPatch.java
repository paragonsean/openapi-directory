/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.Person;
import org.openapitools.client.model.ShippingOption;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderPatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderPatch {
  public static final String SERIALIZED_NAME_BILLING_PERSON = "billingPerson";
  @SerializedName(SERIALIZED_NAME_BILLING_PERSON)
  private Person billingPerson;

  public static final String SERIALIZED_NAME_COUPON_DISCOUNT = "couponDiscount";
  @SerializedName(SERIALIZED_NAME_COUPON_DISCOUNT)
  private Double couponDiscount;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Double customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_EXEMPT = "customerTaxExempt";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_EXEMPT)
  private Boolean customerTaxExempt;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID = "customerTaxId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID)
  private Long customerTaxId;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID_VALID = "customerTaxIdValid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID_VALID)
  private Boolean customerTaxIdValid;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Double discount;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULFILLMENT_STATUS = "fulfillmentStatus";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_STATUS)
  private String fulfillmentStatus;

  public static final String SERIALIZED_NAME_GLOBAL_REFERER = "globalReferer";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFERER)
  private String globalReferer;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBERSHIP_BASED_DISCOUNT = "membershipBasedDiscount";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_BASED_DISCOUNT)
  private Double membershipBasedDiscount;

  public static final String SERIALIZED_NAME_ORDER_COMMENTS = "orderComments";
  @SerializedName(SERIALIZED_NAME_ORDER_COMMENTS)
  private String orderComments;

  public static final String SERIALIZED_NAME_PAYMENT_MODULE = "paymentModule";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MODULE)
  private String paymentModule;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private String paymentStatus;

  public static final String SERIALIZED_NAME_PRIVATE_ADMIN_NOTES = "privateAdminNotes";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ADMIN_NOTES)
  private String privateAdminNotes;

  public static final String SERIALIZED_NAME_REFERER_URL = "refererUrl";
  @SerializedName(SERIALIZED_NAME_REFERER_URL)
  private String refererUrl;

  public static final String SERIALIZED_NAME_REVERSED_TAX_APPLIED = "reversedTaxApplied";
  @SerializedName(SERIALIZED_NAME_REVERSED_TAX_APPLIED)
  private Boolean reversedTaxApplied;

  public static final String SERIALIZED_NAME_SAMPLE = "sample";
  @SerializedName(SERIALIZED_NAME_SAMPLE)
  private Boolean sample;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION = "shippingOption";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION)
  private ShippingOption shippingOption;

  public static final String SERIALIZED_NAME_SHIPPING_PERSON = "shippingPerson";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PERSON)
  private Person shippingPerson;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Double subtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_TAXES_ON_SHIPPING = "taxesOnShipping";
  @SerializedName(SERIALIZED_NAME_TAXES_ON_SHIPPING)
  private List<Tax> taxesOnShipping = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_AND_MEMBERSHIP_BASED_DISCOUNT = "totalAndMembershipBasedDiscount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AND_MEMBERSHIP_BASED_DISCOUNT)
  private Double totalAndMembershipBasedDiscount;

  public static final String SERIALIZED_NAME_VOLUME_DISCOUNT = "volumeDiscount";
  @SerializedName(SERIALIZED_NAME_VOLUME_DISCOUNT)
  private Double volumeDiscount;

  public OrderPatch() {
  }

  public OrderPatch billingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
    return this;
  }

  /**
   * Get billingPerson
   * @return billingPerson
   */
  @javax.annotation.Nullable
  public Person getBillingPerson() {
    return billingPerson;
  }

  public void setBillingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
  }


  public OrderPatch couponDiscount(Double couponDiscount) {
    this.couponDiscount = couponDiscount;
    return this;
  }

  /**
   * Get couponDiscount
   * @return couponDiscount
   */
  @javax.annotation.Nullable
  public Double getCouponDiscount() {
    return couponDiscount;
  }

  public void setCouponDiscount(Double couponDiscount) {
    this.couponDiscount = couponDiscount;
  }


  public OrderPatch customerId(Double customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public Double getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Double customerId) {
    this.customerId = customerId;
  }


  public OrderPatch customerTaxExempt(Boolean customerTaxExempt) {
    this.customerTaxExempt = customerTaxExempt;
    return this;
  }

  /**
   * Get customerTaxExempt
   * @return customerTaxExempt
   */
  @javax.annotation.Nullable
  public Boolean getCustomerTaxExempt() {
    return customerTaxExempt;
  }

  public void setCustomerTaxExempt(Boolean customerTaxExempt) {
    this.customerTaxExempt = customerTaxExempt;
  }


  public OrderPatch customerTaxId(Long customerTaxId) {
    this.customerTaxId = customerTaxId;
    return this;
  }

  /**
   * Get customerTaxId
   * @return customerTaxId
   */
  @javax.annotation.Nullable
  public Long getCustomerTaxId() {
    return customerTaxId;
  }

  public void setCustomerTaxId(Long customerTaxId) {
    this.customerTaxId = customerTaxId;
  }


  public OrderPatch customerTaxIdValid(Boolean customerTaxIdValid) {
    this.customerTaxIdValid = customerTaxIdValid;
    return this;
  }

  /**
   * Get customerTaxIdValid
   * @return customerTaxIdValid
   */
  @javax.annotation.Nullable
  public Boolean getCustomerTaxIdValid() {
    return customerTaxIdValid;
  }

  public void setCustomerTaxIdValid(Boolean customerTaxIdValid) {
    this.customerTaxIdValid = customerTaxIdValid;
  }


  public OrderPatch discount(Double discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public Double getDiscount() {
    return discount;
  }

  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  public OrderPatch email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OrderPatch fulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
    return this;
  }

  /**
   * AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
   * @return fulfillmentStatus
   */
  @javax.annotation.Nullable
  public String getFulfillmentStatus() {
    return fulfillmentStatus;
  }

  public void setFulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
  }


  public OrderPatch globalReferer(String globalReferer) {
    this.globalReferer = globalReferer;
    return this;
  }

  /**
   * Get globalReferer
   * @return globalReferer
   */
  @javax.annotation.Nullable
  public String getGlobalReferer() {
    return globalReferer;
  }

  public void setGlobalReferer(String globalReferer) {
    this.globalReferer = globalReferer;
  }


  public OrderPatch hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Get hidden
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public OrderPatch items(List<Item> items) {
    this.items = items;
    return this;
  }

  public OrderPatch addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }


  public OrderPatch membershipBasedDiscount(Double membershipBasedDiscount) {
    this.membershipBasedDiscount = membershipBasedDiscount;
    return this;
  }

  /**
   * Get membershipBasedDiscount
   * @return membershipBasedDiscount
   */
  @javax.annotation.Nullable
  public Double getMembershipBasedDiscount() {
    return membershipBasedDiscount;
  }

  public void setMembershipBasedDiscount(Double membershipBasedDiscount) {
    this.membershipBasedDiscount = membershipBasedDiscount;
  }


  public OrderPatch orderComments(String orderComments) {
    this.orderComments = orderComments;
    return this;
  }

  /**
   * Get orderComments
   * @return orderComments
   */
  @javax.annotation.Nullable
  public String getOrderComments() {
    return orderComments;
  }

  public void setOrderComments(String orderComments) {
    this.orderComments = orderComments;
  }


  public OrderPatch paymentModule(String paymentModule) {
    this.paymentModule = paymentModule;
    return this;
  }

  /**
   * Get paymentModule
   * @return paymentModule
   */
  @javax.annotation.Nullable
  public String getPaymentModule() {
    return paymentModule;
  }

  public void setPaymentModule(String paymentModule) {
    this.paymentModule = paymentModule;
  }


  public OrderPatch paymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public String getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public OrderPatch privateAdminNotes(String privateAdminNotes) {
    this.privateAdminNotes = privateAdminNotes;
    return this;
  }

  /**
   * Get privateAdminNotes
   * @return privateAdminNotes
   */
  @javax.annotation.Nullable
  public String getPrivateAdminNotes() {
    return privateAdminNotes;
  }

  public void setPrivateAdminNotes(String privateAdminNotes) {
    this.privateAdminNotes = privateAdminNotes;
  }


  public OrderPatch refererUrl(String refererUrl) {
    this.refererUrl = refererUrl;
    return this;
  }

  /**
   * Get refererUrl
   * @return refererUrl
   */
  @javax.annotation.Nullable
  public String getRefererUrl() {
    return refererUrl;
  }

  public void setRefererUrl(String refererUrl) {
    this.refererUrl = refererUrl;
  }


  public OrderPatch reversedTaxApplied(Boolean reversedTaxApplied) {
    this.reversedTaxApplied = reversedTaxApplied;
    return this;
  }

  /**
   * Get reversedTaxApplied
   * @return reversedTaxApplied
   */
  @javax.annotation.Nullable
  public Boolean getReversedTaxApplied() {
    return reversedTaxApplied;
  }

  public void setReversedTaxApplied(Boolean reversedTaxApplied) {
    this.reversedTaxApplied = reversedTaxApplied;
  }


  public OrderPatch sample(Boolean sample) {
    this.sample = sample;
    return this;
  }

  /**
   * Get sample
   * @return sample
   */
  @javax.annotation.Nullable
  public Boolean getSample() {
    return sample;
  }

  public void setSample(Boolean sample) {
    this.sample = sample;
  }


  public OrderPatch shippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

  /**
   * Get shippingMethod
   * @return shippingMethod
   */
  @javax.annotation.Nullable
  public String getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public OrderPatch shippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
    return this;
  }

  /**
   * Get shippingOption
   * @return shippingOption
   */
  @javax.annotation.Nullable
  public ShippingOption getShippingOption() {
    return shippingOption;
  }

  public void setShippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
  }


  public OrderPatch shippingPerson(Person shippingPerson) {
    this.shippingPerson = shippingPerson;
    return this;
  }

  /**
   * Get shippingPerson
   * @return shippingPerson
   */
  @javax.annotation.Nullable
  public Person getShippingPerson() {
    return shippingPerson;
  }

  public void setShippingPerson(Person shippingPerson) {
    this.shippingPerson = shippingPerson;
  }


  public OrderPatch subtotal(Double subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Get subtotal
   * @return subtotal
   */
  @javax.annotation.Nullable
  public Double getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public OrderPatch tax(Double tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Double getTax() {
    return tax;
  }

  public void setTax(Double tax) {
    this.tax = tax;
  }


  public OrderPatch taxesOnShipping(List<Tax> taxesOnShipping) {
    this.taxesOnShipping = taxesOnShipping;
    return this;
  }

  public OrderPatch addTaxesOnShippingItem(Tax taxesOnShippingItem) {
    if (this.taxesOnShipping == null) {
      this.taxesOnShipping = new ArrayList<>();
    }
    this.taxesOnShipping.add(taxesOnShippingItem);
    return this;
  }

  /**
   * Get taxesOnShipping
   * @return taxesOnShipping
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxesOnShipping() {
    return taxesOnShipping;
  }

  public void setTaxesOnShipping(List<Tax> taxesOnShipping) {
    this.taxesOnShipping = taxesOnShipping;
  }


  public OrderPatch total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public OrderPatch totalAndMembershipBasedDiscount(Double totalAndMembershipBasedDiscount) {
    this.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount;
    return this;
  }

  /**
   * Get totalAndMembershipBasedDiscount
   * @return totalAndMembershipBasedDiscount
   */
  @javax.annotation.Nullable
  public Double getTotalAndMembershipBasedDiscount() {
    return totalAndMembershipBasedDiscount;
  }

  public void setTotalAndMembershipBasedDiscount(Double totalAndMembershipBasedDiscount) {
    this.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount;
  }


  public OrderPatch volumeDiscount(Double volumeDiscount) {
    this.volumeDiscount = volumeDiscount;
    return this;
  }

  /**
   * Get volumeDiscount
   * @return volumeDiscount
   */
  @javax.annotation.Nullable
  public Double getVolumeDiscount() {
    return volumeDiscount;
  }

  public void setVolumeDiscount(Double volumeDiscount) {
    this.volumeDiscount = volumeDiscount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPatch orderPatch = (OrderPatch) o;
    return Objects.equals(this.billingPerson, orderPatch.billingPerson) &&
        Objects.equals(this.couponDiscount, orderPatch.couponDiscount) &&
        Objects.equals(this.customerId, orderPatch.customerId) &&
        Objects.equals(this.customerTaxExempt, orderPatch.customerTaxExempt) &&
        Objects.equals(this.customerTaxId, orderPatch.customerTaxId) &&
        Objects.equals(this.customerTaxIdValid, orderPatch.customerTaxIdValid) &&
        Objects.equals(this.discount, orderPatch.discount) &&
        Objects.equals(this.email, orderPatch.email) &&
        Objects.equals(this.fulfillmentStatus, orderPatch.fulfillmentStatus) &&
        Objects.equals(this.globalReferer, orderPatch.globalReferer) &&
        Objects.equals(this.hidden, orderPatch.hidden) &&
        Objects.equals(this.items, orderPatch.items) &&
        Objects.equals(this.membershipBasedDiscount, orderPatch.membershipBasedDiscount) &&
        Objects.equals(this.orderComments, orderPatch.orderComments) &&
        Objects.equals(this.paymentModule, orderPatch.paymentModule) &&
        Objects.equals(this.paymentStatus, orderPatch.paymentStatus) &&
        Objects.equals(this.privateAdminNotes, orderPatch.privateAdminNotes) &&
        Objects.equals(this.refererUrl, orderPatch.refererUrl) &&
        Objects.equals(this.reversedTaxApplied, orderPatch.reversedTaxApplied) &&
        Objects.equals(this.sample, orderPatch.sample) &&
        Objects.equals(this.shippingMethod, orderPatch.shippingMethod) &&
        Objects.equals(this.shippingOption, orderPatch.shippingOption) &&
        Objects.equals(this.shippingPerson, orderPatch.shippingPerson) &&
        Objects.equals(this.subtotal, orderPatch.subtotal) &&
        Objects.equals(this.tax, orderPatch.tax) &&
        Objects.equals(this.taxesOnShipping, orderPatch.taxesOnShipping) &&
        Objects.equals(this.total, orderPatch.total) &&
        Objects.equals(this.totalAndMembershipBasedDiscount, orderPatch.totalAndMembershipBasedDiscount) &&
        Objects.equals(this.volumeDiscount, orderPatch.volumeDiscount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPerson, couponDiscount, customerId, customerTaxExempt, customerTaxId, customerTaxIdValid, discount, email, fulfillmentStatus, globalReferer, hidden, items, membershipBasedDiscount, orderComments, paymentModule, paymentStatus, privateAdminNotes, refererUrl, reversedTaxApplied, sample, shippingMethod, shippingOption, shippingPerson, subtotal, tax, taxesOnShipping, total, totalAndMembershipBasedDiscount, volumeDiscount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPatch {\n");
    sb.append("    billingPerson: ").append(toIndentedString(billingPerson)).append("\n");
    sb.append("    couponDiscount: ").append(toIndentedString(couponDiscount)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerTaxExempt: ").append(toIndentedString(customerTaxExempt)).append("\n");
    sb.append("    customerTaxId: ").append(toIndentedString(customerTaxId)).append("\n");
    sb.append("    customerTaxIdValid: ").append(toIndentedString(customerTaxIdValid)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fulfillmentStatus: ").append(toIndentedString(fulfillmentStatus)).append("\n");
    sb.append("    globalReferer: ").append(toIndentedString(globalReferer)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    membershipBasedDiscount: ").append(toIndentedString(membershipBasedDiscount)).append("\n");
    sb.append("    orderComments: ").append(toIndentedString(orderComments)).append("\n");
    sb.append("    paymentModule: ").append(toIndentedString(paymentModule)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    privateAdminNotes: ").append(toIndentedString(privateAdminNotes)).append("\n");
    sb.append("    refererUrl: ").append(toIndentedString(refererUrl)).append("\n");
    sb.append("    reversedTaxApplied: ").append(toIndentedString(reversedTaxApplied)).append("\n");
    sb.append("    sample: ").append(toIndentedString(sample)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    shippingOption: ").append(toIndentedString(shippingOption)).append("\n");
    sb.append("    shippingPerson: ").append(toIndentedString(shippingPerson)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxesOnShipping: ").append(toIndentedString(taxesOnShipping)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalAndMembershipBasedDiscount: ").append(toIndentedString(totalAndMembershipBasedDiscount)).append("\n");
    sb.append("    volumeDiscount: ").append(toIndentedString(volumeDiscount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPerson");
    openapiFields.add("couponDiscount");
    openapiFields.add("customerId");
    openapiFields.add("customerTaxExempt");
    openapiFields.add("customerTaxId");
    openapiFields.add("customerTaxIdValid");
    openapiFields.add("discount");
    openapiFields.add("email");
    openapiFields.add("fulfillmentStatus");
    openapiFields.add("globalReferer");
    openapiFields.add("hidden");
    openapiFields.add("items");
    openapiFields.add("membershipBasedDiscount");
    openapiFields.add("orderComments");
    openapiFields.add("paymentModule");
    openapiFields.add("paymentStatus");
    openapiFields.add("privateAdminNotes");
    openapiFields.add("refererUrl");
    openapiFields.add("reversedTaxApplied");
    openapiFields.add("sample");
    openapiFields.add("shippingMethod");
    openapiFields.add("shippingOption");
    openapiFields.add("shippingPerson");
    openapiFields.add("subtotal");
    openapiFields.add("tax");
    openapiFields.add("taxesOnShipping");
    openapiFields.add("total");
    openapiFields.add("totalAndMembershipBasedDiscount");
    openapiFields.add("volumeDiscount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPatch is not found in the empty JSON string", OrderPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingPerson`
      if (jsonObj.get("billingPerson") != null && !jsonObj.get("billingPerson").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("billingPerson"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fulfillmentStatus") != null && !jsonObj.get("fulfillmentStatus").isJsonNull()) && !jsonObj.get("fulfillmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentStatus").toString()));
      }
      if ((jsonObj.get("globalReferer") != null && !jsonObj.get("globalReferer").isJsonNull()) && !jsonObj.get("globalReferer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalReferer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalReferer").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("orderComments") != null && !jsonObj.get("orderComments").isJsonNull()) && !jsonObj.get("orderComments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderComments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderComments").toString()));
      }
      if ((jsonObj.get("paymentModule") != null && !jsonObj.get("paymentModule").isJsonNull()) && !jsonObj.get("paymentModule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentModule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentModule").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("privateAdminNotes") != null && !jsonObj.get("privateAdminNotes").isJsonNull()) && !jsonObj.get("privateAdminNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateAdminNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateAdminNotes").toString()));
      }
      if ((jsonObj.get("refererUrl") != null && !jsonObj.get("refererUrl").isJsonNull()) && !jsonObj.get("refererUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refererUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refererUrl").toString()));
      }
      if ((jsonObj.get("shippingMethod") != null && !jsonObj.get("shippingMethod").isJsonNull()) && !jsonObj.get("shippingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethod").toString()));
      }
      // validate the optional field `shippingOption`
      if (jsonObj.get("shippingOption") != null && !jsonObj.get("shippingOption").isJsonNull()) {
        ShippingOption.validateJsonElement(jsonObj.get("shippingOption"));
      }
      // validate the optional field `shippingPerson`
      if (jsonObj.get("shippingPerson") != null && !jsonObj.get("shippingPerson").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("shippingPerson"));
      }
      if (jsonObj.get("taxesOnShipping") != null && !jsonObj.get("taxesOnShipping").isJsonNull()) {
        JsonArray jsonArraytaxesOnShipping = jsonObj.getAsJsonArray("taxesOnShipping");
        if (jsonArraytaxesOnShipping != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxesOnShipping").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxesOnShipping` to be an array in the JSON string but got `%s`", jsonObj.get("taxesOnShipping").toString()));
          }

          // validate the optional field `taxesOnShipping` (array)
          for (int i = 0; i < jsonArraytaxesOnShipping.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxesOnShipping.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPatch>() {
           @Override
           public void write(JsonWriter out, OrderPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPatch
   * @throws IOException if the JSON string is invalid with respect to OrderPatch
   */
  public static OrderPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPatch.class);
  }

  /**
   * Convert an instance of OrderPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

