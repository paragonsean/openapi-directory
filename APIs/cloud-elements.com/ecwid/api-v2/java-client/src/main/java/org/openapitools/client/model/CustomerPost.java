/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Person;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomerPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerPost {
  public static final String SERIALIZED_NAME_BILLING_PERSON = "billingPerson";
  @SerializedName(SERIALIZED_NAME_BILLING_PERSON)
  private Person billingPerson;

  public static final String SERIALIZED_NAME_CUSTOMER_GROUP_ID = "customerGroupId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GROUP_ID)
  private Long customerGroupId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESSES = "shippingAddresses";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESSES)
  private List<Person> shippingAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_EXEMPT = "taxExempt";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT)
  private Boolean taxExempt;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private Double taxId;

  public static final String SERIALIZED_NAME_TAX_ID_VALID = "taxIdValid";
  @SerializedName(SERIALIZED_NAME_TAX_ID_VALID)
  private Boolean taxIdValid;

  public CustomerPost() {
  }

  public CustomerPost billingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
    return this;
  }

  /**
   * Get billingPerson
   * @return billingPerson
   */
  @javax.annotation.Nullable
  public Person getBillingPerson() {
    return billingPerson;
  }

  public void setBillingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
  }


  public CustomerPost customerGroupId(Long customerGroupId) {
    this.customerGroupId = customerGroupId;
    return this;
  }

  /**
   * Get customerGroupId
   * @return customerGroupId
   */
  @javax.annotation.Nullable
  public Long getCustomerGroupId() {
    return customerGroupId;
  }

  public void setCustomerGroupId(Long customerGroupId) {
    this.customerGroupId = customerGroupId;
  }


  public CustomerPost email(String email) {
    this.email = email;
    return this;
  }

  /**
   * customer email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CustomerPost password(String password) {
    this.password = password;
    return this;
  }

  /**
   * customer password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public CustomerPost shippingAddresses(List<Person> shippingAddresses) {
    this.shippingAddresses = shippingAddresses;
    return this;
  }

  public CustomerPost addShippingAddressesItem(Person shippingAddressesItem) {
    if (this.shippingAddresses == null) {
      this.shippingAddresses = new ArrayList<>();
    }
    this.shippingAddresses.add(shippingAddressesItem);
    return this;
  }

  /**
   * Get shippingAddresses
   * @return shippingAddresses
   */
  @javax.annotation.Nullable
  public List<Person> getShippingAddresses() {
    return shippingAddresses;
  }

  public void setShippingAddresses(List<Person> shippingAddresses) {
    this.shippingAddresses = shippingAddresses;
  }


  public CustomerPost taxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
    return this;
  }

  /**
   * Get taxExempt
   * @return taxExempt
   */
  @javax.annotation.Nullable
  public Boolean getTaxExempt() {
    return taxExempt;
  }

  public void setTaxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
  }


  public CustomerPost taxId(Double taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * Get taxId
   * @return taxId
   */
  @javax.annotation.Nullable
  public Double getTaxId() {
    return taxId;
  }

  public void setTaxId(Double taxId) {
    this.taxId = taxId;
  }


  public CustomerPost taxIdValid(Boolean taxIdValid) {
    this.taxIdValid = taxIdValid;
    return this;
  }

  /**
   * Get taxIdValid
   * @return taxIdValid
   */
  @javax.annotation.Nullable
  public Boolean getTaxIdValid() {
    return taxIdValid;
  }

  public void setTaxIdValid(Boolean taxIdValid) {
    this.taxIdValid = taxIdValid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerPost customerPost = (CustomerPost) o;
    return Objects.equals(this.billingPerson, customerPost.billingPerson) &&
        Objects.equals(this.customerGroupId, customerPost.customerGroupId) &&
        Objects.equals(this.email, customerPost.email) &&
        Objects.equals(this.password, customerPost.password) &&
        Objects.equals(this.shippingAddresses, customerPost.shippingAddresses) &&
        Objects.equals(this.taxExempt, customerPost.taxExempt) &&
        Objects.equals(this.taxId, customerPost.taxId) &&
        Objects.equals(this.taxIdValid, customerPost.taxIdValid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPerson, customerGroupId, email, password, shippingAddresses, taxExempt, taxId, taxIdValid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerPost {\n");
    sb.append("    billingPerson: ").append(toIndentedString(billingPerson)).append("\n");
    sb.append("    customerGroupId: ").append(toIndentedString(customerGroupId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    shippingAddresses: ").append(toIndentedString(shippingAddresses)).append("\n");
    sb.append("    taxExempt: ").append(toIndentedString(taxExempt)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    taxIdValid: ").append(toIndentedString(taxIdValid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPerson");
    openapiFields.add("customerGroupId");
    openapiFields.add("email");
    openapiFields.add("password");
    openapiFields.add("shippingAddresses");
    openapiFields.add("taxExempt");
    openapiFields.add("taxId");
    openapiFields.add("taxIdValid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerPost is not found in the empty JSON string", CustomerPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingPerson`
      if (jsonObj.get("billingPerson") != null && !jsonObj.get("billingPerson").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("billingPerson"));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (jsonObj.get("shippingAddresses") != null && !jsonObj.get("shippingAddresses").isJsonNull()) {
        JsonArray jsonArrayshippingAddresses = jsonObj.getAsJsonArray("shippingAddresses");
        if (jsonArrayshippingAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("shippingAddresses").toString()));
          }

          // validate the optional field `shippingAddresses` (array)
          for (int i = 0; i < jsonArrayshippingAddresses.size(); i++) {
            Person.validateJsonElement(jsonArrayshippingAddresses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerPost.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerPost>() {
           @Override
           public void write(JsonWriter out, CustomerPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerPost
   * @throws IOException if the JSON string is invalid with respect to CustomerPost
   */
  public static CustomerPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerPost.class);
  }

  /**
   * Convert an instance of CustomerPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

