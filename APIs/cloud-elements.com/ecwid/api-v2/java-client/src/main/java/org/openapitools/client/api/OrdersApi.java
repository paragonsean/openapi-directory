/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrderPatch;
import org.openapitools.client.model.OrderPost;
import org.openapitools.client.model.Payment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrder
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param order The order object to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(String authorization, OrderPost order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(String authorization, OrderPost order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createOrder(Async)");
        }

        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling createOrder(Async)");
        }

        return createOrderCall(authorization, order, _callback);

    }

    /**
     * Create an order in the eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Order&#39; model are those required to create a new order.The paymentStatus can only be AWAITING_PAYMENT or INCOMPLETE.The fulfillmentStatus can only be AWAITING_PROCESSING
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param order The order object to be created (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Order createOrder(String authorization, OrderPost order) throws ApiException {
        ApiResponse<Order> localVarResp = createOrderWithHttpInfo(authorization, order);
        return localVarResp.getData();
    }

    /**
     * Create an order in the eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Order&#39; model are those required to create a new order.The paymentStatus can only be AWAITING_PAYMENT or INCOMPLETE.The fulfillmentStatus can only be AWAITING_PROCESSING
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param order The order object to be created (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createOrderWithHttpInfo(String authorization, OrderPost order) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(authorization, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an order in the eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Order&#39; model are those required to create a new order.The paymentStatus can only be AWAITING_PAYMENT or INCOMPLETE.The fulfillmentStatus can only be AWAITING_PROCESSING (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param order The order object to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(String authorization, OrderPost order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(authorization, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderById
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to delete from the eCommerce system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderByIdCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderByIdValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteOrderById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrderById(Async)");
        }

        return deleteOrderByIdCall(authorization, id, _callback);

    }

    /**
     * Delete an order associated with a given ID from your eCommerce system. Specifying an order associated with a given ID that does not exist will result in an error message
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to delete from the eCommerce system (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrderById(String authorization, String id) throws ApiException {
        deleteOrderByIdWithHttpInfo(authorization, id);
    }

    /**
     * Delete an order associated with a given ID from your eCommerce system. Specifying an order associated with a given ID that does not exist will result in an error message
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to delete from the eCommerce system (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrderByIdWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderByIdValidateBeforeCall(authorization, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an order associated with a given ID from your eCommerce system. Specifying an order associated with a given ID that does not exist will result in an error message (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to delete from the eCommerce system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderByIdAsync(String authorization, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderByIdValidateBeforeCall(authorization, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderById
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to retrieve from the eCommerce system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderByIdCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderByIdValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getOrderById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrderById(Async)");
        }

        return getOrderByIdCall(authorization, id, _callback);

    }

    /**
     * Retrieve an order associated with a given ID from the eCommerce system. Specifying an order with an ID that does not exist will result in an error response
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to retrieve from the eCommerce system (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Order getOrderById(String authorization, String id) throws ApiException {
        ApiResponse<Order> localVarResp = getOrderByIdWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve an order associated with a given ID from the eCommerce system. Specifying an order with an ID that does not exist will result in an error response
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to retrieve from the eCommerce system (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> getOrderByIdWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrderByIdValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an order associated with a given ID from the eCommerce system. Specifying an order with an ID that does not exist will result in an error response (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to retrieve from the eCommerce system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderByIdAsync(String authorization, String id, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderByIdValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrders
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: date, from_date, to_date, from_update_date, to_update_date, order, from_order, to_order, customer_id, customer_email and statuses. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersCall(String authorization, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersValidateBeforeCall(String authorization, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getOrders(Async)");
        }

        return getOrdersCall(authorization, where, pageSize, nextPage, fields, _callback);

    }

    /**
     * Find orders in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: date, from_date, to_date, from_update_date, to_update_date, order, from_order, to_order, customer_id, customer_email and statuses. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<Order> getOrders(String authorization, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<Order>> localVarResp = getOrdersWithHttpInfo(authorization, where, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Find orders in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: date, from_date, to_date, from_update_date, to_update_date, order, from_order, to_order, customer_id, customer_email and statuses. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;Order&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Order>> getOrdersWithHttpInfo(String authorization, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getOrdersValidateBeforeCall(authorization, where, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find orders in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: date, from_date, to_date, from_update_date, to_update_date, order, from_order, to_order, customer_id, customer_email and statuses. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersAsync(String authorization, String where, Long pageSize, String nextPage, String fields, final ApiCallback<List<Order>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersValidateBeforeCall(authorization, where, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrdersPayments
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve payments from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersPaymentsCall(String authorization, String orderId, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}/payments"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersPaymentsValidateBeforeCall(String authorization, String orderId, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getOrdersPayments(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrdersPayments(Async)");
        }

        return getOrdersPaymentsCall(authorization, orderId, pageSize, nextPage, fields, _callback);

    }

    /**
     * Retrieve the payments in the eCommerce system for the specified order
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve payments from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<Payment> getOrdersPayments(String authorization, String orderId, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<Payment>> localVarResp = getOrdersPaymentsWithHttpInfo(authorization, orderId, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieve the payments in the eCommerce system for the specified order
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve payments from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;Payment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Payment>> getOrdersPaymentsWithHttpInfo(String authorization, String orderId, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getOrdersPaymentsValidateBeforeCall(authorization, orderId, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<Payment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the payments in the eCommerce system for the specified order (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve payments from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersPaymentsAsync(String authorization, String orderId, Long pageSize, String nextPage, String fields, final ApiCallback<List<Payment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersPaymentsValidateBeforeCall(authorization, orderId, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Payment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrdersRefunds
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve refunds from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersRefundsCall(String authorization, String orderId, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}/refunds"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersRefundsValidateBeforeCall(String authorization, String orderId, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getOrdersRefunds(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrdersRefunds(Async)");
        }

        return getOrdersRefundsCall(authorization, orderId, pageSize, nextPage, fields, _callback);

    }

    /**
     * Retrieve the refunds in the eCommerce system for the specified order
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve refunds from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<Payment> getOrdersRefunds(String authorization, String orderId, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<Payment>> localVarResp = getOrdersRefundsWithHttpInfo(authorization, orderId, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieve the refunds in the eCommerce system for the specified order
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve refunds from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;Payment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Payment>> getOrdersRefundsWithHttpInfo(String authorization, String orderId, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getOrdersRefundsValidateBeforeCall(authorization, orderId, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<Payment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the refunds in the eCommerce system for the specified order (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param orderId The ID of the order to retrieve refunds from in the eCommerce system (required)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersRefundsAsync(String authorization, String orderId, Long pageSize, String nextPage, String fields, final ApiCallback<List<Payment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersRefundsValidateBeforeCall(authorization, orderId, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Payment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderById
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to update in the eCommerce system (required)
     * @param order The order object, with those fields that are to be updated (required)
     * @param action An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderByIdCall(String authorization, String id, OrderPatch order, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderByIdValidateBeforeCall(String authorization, String id, OrderPatch order, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateOrderById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrderById(Async)");
        }

        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling updateOrderById(Async)");
        }

        return updateOrderByIdCall(authorization, id, order, action, _callback);

    }

    /**
     * Update an order associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with a specified ID that does not exist will result in an error response&lt;/strong&gt;
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to update in the eCommerce system (required)
     * @param order The order object, with those fields that are to be updated (required)
     * @param action An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Order updateOrderById(String authorization, String id, OrderPatch order, String action) throws ApiException {
        ApiResponse<Order> localVarResp = updateOrderByIdWithHttpInfo(authorization, id, order, action);
        return localVarResp.getData();
    }

    /**
     * Update an order associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with a specified ID that does not exist will result in an error response&lt;/strong&gt;
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to update in the eCommerce system (required)
     * @param order The order object, with those fields that are to be updated (required)
     * @param action An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateOrderByIdWithHttpInfo(String authorization, String id, OrderPatch order, String action) throws ApiException {
        okhttp3.Call localVarCall = updateOrderByIdValidateBeforeCall(authorization, id, order, action, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an order associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with a specified ID that does not exist will result in an error response&lt;/strong&gt; (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the order to update in the eCommerce system (required)
     * @param order The order object, with those fields that are to be updated (required)
     * @param action An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderByIdAsync(String authorization, String id, OrderPatch order, String action, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderByIdValidateBeforeCall(authorization, id, order, action, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
