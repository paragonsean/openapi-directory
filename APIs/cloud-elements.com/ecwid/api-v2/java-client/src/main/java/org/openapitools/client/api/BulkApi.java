/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkDownloadRequest;
import org.openapitools.client.model.BulkJobList;
import org.openapitools.client.model.BulkQuery;
import org.openapitools.client.model.BulkStatus;
import org.openapitools.client.model.BulkUploadResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createBulkByObjectName
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object for which data needs to be uploaded. (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload, path or format, ex: {\\\&quot;path\\\&quot; :&amp;lt;path for the sub resource&amp;gt;, \\\&quot;format\\\&quot;: &amp;lt;json/csv&amp;gt;, \\\&quot;callback-payload\\\&quot;:&amp;lt;json&amp;gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\\\&quot;listId\\\&quot;:\\\&quot;1014\\\&quot;,\\\&quot;action\\\&quot;:\\\&quot;upsert\\\&quot;}. If the Upload format is JSON pass metadata as {\\\&quot;format\\\&quot;:\\\&quot;json\\\&quot;}. callback-payload - is passed back in bulk job notification  (optional)
     * @param _file The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBulkByObjectNameCall(String authorization, String objectName, String elementsAsyncCallbackUrl, String metaData, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/{objectName}"
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metaData != null) {
            localVarFormParams.put("metaData", metaData);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (elementsAsyncCallbackUrl != null) {
            localVarHeaderParams.put("Elements-Async-Callback-Url", localVarApiClient.parameterToString(elementsAsyncCallbackUrl));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBulkByObjectNameValidateBeforeCall(String authorization, String objectName, String elementsAsyncCallbackUrl, String metaData, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createBulkByObjectName(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling createBulkByObjectName(Async)");
        }

        return createBulkByObjectNameCall(authorization, objectName, elementsAsyncCallbackUrl, metaData, _file, _callback);

    }

    /**
     * Upload a file of objects to be bulk uploaded to the provider.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object for which data needs to be uploaded. (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload, path or format, ex: {\\\&quot;path\\\&quot; :&amp;lt;path for the sub resource&amp;gt;, \\\&quot;format\\\&quot;: &amp;lt;json/csv&amp;gt;, \\\&quot;callback-payload\\\&quot;:&amp;lt;json&amp;gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\\\&quot;listId\\\&quot;:\\\&quot;1014\\\&quot;,\\\&quot;action\\\&quot;:\\\&quot;upsert\\\&quot;}. If the Upload format is JSON pass metadata as {\\\&quot;format\\\&quot;:\\\&quot;json\\\&quot;}. callback-payload - is passed back in bulk job notification  (optional)
     * @param _file The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line (optional)
     * @return BulkUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public BulkUploadResponse createBulkByObjectName(String authorization, String objectName, String elementsAsyncCallbackUrl, String metaData, File _file) throws ApiException {
        ApiResponse<BulkUploadResponse> localVarResp = createBulkByObjectNameWithHttpInfo(authorization, objectName, elementsAsyncCallbackUrl, metaData, _file);
        return localVarResp.getData();
    }

    /**
     * Upload a file of objects to be bulk uploaded to the provider.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object for which data needs to be uploaded. (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload, path or format, ex: {\\\&quot;path\\\&quot; :&amp;lt;path for the sub resource&amp;gt;, \\\&quot;format\\\&quot;: &amp;lt;json/csv&amp;gt;, \\\&quot;callback-payload\\\&quot;:&amp;lt;json&amp;gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\\\&quot;listId\\\&quot;:\\\&quot;1014\\\&quot;,\\\&quot;action\\\&quot;:\\\&quot;upsert\\\&quot;}. If the Upload format is JSON pass metadata as {\\\&quot;format\\\&quot;:\\\&quot;json\\\&quot;}. callback-payload - is passed back in bulk job notification  (optional)
     * @param _file The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line (optional)
     * @return ApiResponse&lt;BulkUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkUploadResponse> createBulkByObjectNameWithHttpInfo(String authorization, String objectName, String elementsAsyncCallbackUrl, String metaData, File _file) throws ApiException {
        okhttp3.Call localVarCall = createBulkByObjectNameValidateBeforeCall(authorization, objectName, elementsAsyncCallbackUrl, metaData, _file, null);
        Type localVarReturnType = new TypeToken<BulkUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a file of objects to be bulk uploaded to the provider. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param objectName The name of the object for which data needs to be uploaded. (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload, path or format, ex: {\\\&quot;path\\\&quot; :&amp;lt;path for the sub resource&amp;gt;, \\\&quot;format\\\&quot;: &amp;lt;json/csv&amp;gt;, \\\&quot;callback-payload\\\&quot;:&amp;lt;json&amp;gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\\\&quot;listId\\\&quot;:\\\&quot;1014\\\&quot;,\\\&quot;action\\\&quot;:\\\&quot;upsert\\\&quot;}. If the Upload format is JSON pass metadata as {\\\&quot;format\\\&quot;:\\\&quot;json\\\&quot;}. callback-payload - is passed back in bulk job notification  (optional)
     * @param _file The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBulkByObjectNameAsync(String authorization, String objectName, String elementsAsyncCallbackUrl, String metaData, File _file, final ApiCallback<BulkUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBulkByObjectNameValidateBeforeCall(authorization, objectName, elementsAsyncCallbackUrl, metaData, _file, _callback);
        Type localVarReturnType = new TypeToken<BulkUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBulkDownload
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param body The object body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBulkDownloadCall(String authorization, BulkDownloadRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/bulk/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBulkDownloadValidateBeforeCall(String authorization, BulkDownloadRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createBulkDownload(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBulkDownload(Async)");
        }

        return createBulkDownloadCall(authorization, body, _callback);

    }

    /**
     * Create a new bulk download job (asynchronous)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param body The object body (required)
     * @return BulkQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public BulkQuery createBulkDownload(String authorization, BulkDownloadRequest body) throws ApiException {
        ApiResponse<BulkQuery> localVarResp = createBulkDownloadWithHttpInfo(authorization, body);
        return localVarResp.getData();
    }

    /**
     * Create a new bulk download job (asynchronous)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param body The object body (required)
     * @return ApiResponse&lt;BulkQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkQuery> createBulkDownloadWithHttpInfo(String authorization, BulkDownloadRequest body) throws ApiException {
        okhttp3.Call localVarCall = createBulkDownloadValidateBeforeCall(authorization, body, null);
        Type localVarReturnType = new TypeToken<BulkQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new bulk download job (asynchronous) (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param body The object body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBulkDownloadAsync(String authorization, BulkDownloadRequest body, final ApiCallback<BulkQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBulkDownloadValidateBeforeCall(authorization, body, _callback);
        Type localVarReturnType = new TypeToken<BulkQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBulkQuery
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param q The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply. (optional)
     * @param lastRunDate The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param from The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param to The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload and fileName, ex: {\\\&quot;callback-payload\\\&quot; : &lt;Json&gt; , \\\&quot;fileName\\\&quot; : \\\&quot;{Date format}_Name of the file\\\&quot;}. If the fileName is MyFile then pass metadata as {\\\&quot;fileName\\\&quot; : \\\&quot;{yyyy-MM-dd HH:mm:ss}_MyFile\\\&quot;}. The valid date formats are \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd HH:mm:ss\\\&quot;, \\\&quot;yyyy.MM.dd G &#39;at&#39; HH:mm:ss z\\\&quot;, \\\&quot;h:mm a\\\&quot;, \\\&quot;yyyyy.MMMMM.dd GGG hh:mm aaa\\\&quot; and \\\&quot;yyMMddHHmmssZ\\\&quot;. callback-payload - is passed back in bulk job notification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBulkQueryCall(String authorization, String elementsAsyncCallbackUrl, String q, String lastRunDate, String from, String to, String metaData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metaData != null) {
            localVarFormParams.put("metaData", metaData);
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (lastRunDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastRunDate", lastRunDate));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (elementsAsyncCallbackUrl != null) {
            localVarHeaderParams.put("Elements-Async-Callback-Url", localVarApiClient.parameterToString(elementsAsyncCallbackUrl));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBulkQueryValidateBeforeCall(String authorization, String elementsAsyncCallbackUrl, String q, String lastRunDate, String from, String to, String metaData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createBulkQuery(Async)");
        }

        return createBulkQueryCall(authorization, elementsAsyncCallbackUrl, q, lastRunDate, from, to, metaData, _callback);

    }

    /**
     * Create an asynchronous bulk query job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param q The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply. (optional)
     * @param lastRunDate The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param from The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param to The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload and fileName, ex: {\\\&quot;callback-payload\\\&quot; : &lt;Json&gt; , \\\&quot;fileName\\\&quot; : \\\&quot;{Date format}_Name of the file\\\&quot;}. If the fileName is MyFile then pass metadata as {\\\&quot;fileName\\\&quot; : \\\&quot;{yyyy-MM-dd HH:mm:ss}_MyFile\\\&quot;}. The valid date formats are \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd HH:mm:ss\\\&quot;, \\\&quot;yyyy.MM.dd G &#39;at&#39; HH:mm:ss z\\\&quot;, \\\&quot;h:mm a\\\&quot;, \\\&quot;yyyyy.MMMMM.dd GGG hh:mm aaa\\\&quot; and \\\&quot;yyMMddHHmmssZ\\\&quot;. callback-payload - is passed back in bulk job notification  (optional)
     * @return BulkQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public BulkQuery createBulkQuery(String authorization, String elementsAsyncCallbackUrl, String q, String lastRunDate, String from, String to, String metaData) throws ApiException {
        ApiResponse<BulkQuery> localVarResp = createBulkQueryWithHttpInfo(authorization, elementsAsyncCallbackUrl, q, lastRunDate, from, to, metaData);
        return localVarResp.getData();
    }

    /**
     * Create an asynchronous bulk query job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param q The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply. (optional)
     * @param lastRunDate The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param from The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param to The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload and fileName, ex: {\\\&quot;callback-payload\\\&quot; : &lt;Json&gt; , \\\&quot;fileName\\\&quot; : \\\&quot;{Date format}_Name of the file\\\&quot;}. If the fileName is MyFile then pass metadata as {\\\&quot;fileName\\\&quot; : \\\&quot;{yyyy-MM-dd HH:mm:ss}_MyFile\\\&quot;}. The valid date formats are \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd HH:mm:ss\\\&quot;, \\\&quot;yyyy.MM.dd G &#39;at&#39; HH:mm:ss z\\\&quot;, \\\&quot;h:mm a\\\&quot;, \\\&quot;yyyyy.MMMMM.dd GGG hh:mm aaa\\\&quot; and \\\&quot;yyMMddHHmmssZ\\\&quot;. callback-payload - is passed back in bulk job notification  (optional)
     * @return ApiResponse&lt;BulkQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkQuery> createBulkQueryWithHttpInfo(String authorization, String elementsAsyncCallbackUrl, String q, String lastRunDate, String from, String to, String metaData) throws ApiException {
        okhttp3.Call localVarCall = createBulkQueryValidateBeforeCall(authorization, elementsAsyncCallbackUrl, q, lastRunDate, from, to, metaData, null);
        Type localVarReturnType = new TypeToken<BulkQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an asynchronous bulk query job. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed (optional)
     * @param q The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply. (optional)
     * @param lastRunDate The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param from The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param to The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39; (optional)
     * @param metaData Optional JSON MetaData that contains callback-payload and fileName, ex: {\\\&quot;callback-payload\\\&quot; : &lt;Json&gt; , \\\&quot;fileName\\\&quot; : \\\&quot;{Date format}_Name of the file\\\&quot;}. If the fileName is MyFile then pass metadata as {\\\&quot;fileName\\\&quot; : \\\&quot;{yyyy-MM-dd HH:mm:ss}_MyFile\\\&quot;}. The valid date formats are \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ\\\&quot;, \\\&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\\\&quot;, \\\&quot;yyyy-MM-dd HH:mm:ss\\\&quot;, \\\&quot;yyyy.MM.dd G &#39;at&#39; HH:mm:ss z\\\&quot;, \\\&quot;h:mm a\\\&quot;, \\\&quot;yyyyy.MMMMM.dd GGG hh:mm aaa\\\&quot; and \\\&quot;yyMMddHHmmssZ\\\&quot;. callback-payload - is passed back in bulk job notification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBulkQueryAsync(String authorization, String elementsAsyncCallbackUrl, String q, String lastRunDate, String from, String to, String metaData, final ApiCallback<BulkQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBulkQueryValidateBeforeCall(authorization, elementsAsyncCallbackUrl, q, lastRunDate, from, to, metaData, _callback);
        Type localVarReturnType = new TypeToken<BulkQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBulkByObjectName
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job (required)
     * @param objectName The name of the object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkByObjectNameCall(String authorization, String id, String objectName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/{id}/{objectName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json",
            "application/jsonl"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBulkByObjectNameValidateBeforeCall(String authorization, String id, String objectName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBulkByObjectName(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBulkByObjectName(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling getBulkByObjectName(Async)");
        }

        return getBulkByObjectNameCall(authorization, id, objectName, _callback);

    }

    /**
     * Retrieve the results of an asynchronous bulk query.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job (required)
     * @param objectName The name of the object (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public File getBulkByObjectName(String authorization, String id, String objectName) throws ApiException {
        ApiResponse<File> localVarResp = getBulkByObjectNameWithHttpInfo(authorization, id, objectName);
        return localVarResp.getData();
    }

    /**
     * Retrieve the results of an asynchronous bulk query.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job (required)
     * @param objectName The name of the object (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getBulkByObjectNameWithHttpInfo(String authorization, String id, String objectName) throws ApiException {
        okhttp3.Call localVarCall = getBulkByObjectNameValidateBeforeCall(authorization, id, objectName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the results of an asynchronous bulk query. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job (required)
     * @param objectName The name of the object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkByObjectNameAsync(String authorization, String id, String objectName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBulkByObjectNameValidateBeforeCall(authorization, id, objectName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBulkErrors
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its errors. (required)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkErrorsCall(String authorization, String id, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/{id}/errors"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBulkErrorsValidateBeforeCall(String authorization, String id, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBulkErrors(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBulkErrors(Async)");
        }

        return getBulkErrorsCall(authorization, id, pageSize, nextPage, fields, _callback);

    }

    /**
     * Retrieve the errors of a bulk job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its errors. (required)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getBulkErrors(String authorization, String id, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<String>> localVarResp = getBulkErrorsWithHttpInfo(authorization, id, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieve the errors of a bulk job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its errors. (required)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getBulkErrorsWithHttpInfo(String authorization, String id, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBulkErrorsValidateBeforeCall(authorization, id, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the errors of a bulk job. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its errors. (required)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkErrorsAsync(String authorization, String id, Long pageSize, String nextPage, String fields, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBulkErrorsValidateBeforeCall(authorization, id, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBulkJobs
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where&#x3D;job_direction&#x3D;&#39;UPLOAD&#39;. The following fields are valid search fields &#39;object_name&#39;, &#39;job_status&#39;, &#39;job_direction&#39;, &#39;record_count&#39; (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkJobsCall(String authorization, String where, String nextPage, Long pageSize, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBulkJobsValidateBeforeCall(String authorization, String where, String nextPage, Long pageSize, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBulkJobs(Async)");
        }

        return getBulkJobsCall(authorization, where, nextPage, pageSize, fields, _callback);

    }

    /**
     * Fetch all the bulk jobs for an instance
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where&#x3D;job_direction&#x3D;&#39;UPLOAD&#39;. The following fields are valid search fields &#39;object_name&#39;, &#39;job_status&#39;, &#39;job_direction&#39;, &#39;record_count&#39; (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return BulkJobList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public BulkJobList getBulkJobs(String authorization, String where, String nextPage, Long pageSize, String fields) throws ApiException {
        ApiResponse<BulkJobList> localVarResp = getBulkJobsWithHttpInfo(authorization, where, nextPage, pageSize, fields);
        return localVarResp.getData();
    }

    /**
     * Fetch all the bulk jobs for an instance
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where&#x3D;job_direction&#x3D;&#39;UPLOAD&#39;. The following fields are valid search fields &#39;object_name&#39;, &#39;job_status&#39;, &#39;job_direction&#39;, &#39;record_count&#39; (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;BulkJobList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkJobList> getBulkJobsWithHttpInfo(String authorization, String where, String nextPage, Long pageSize, String fields) throws ApiException {
        okhttp3.Call localVarCall = getBulkJobsValidateBeforeCall(authorization, where, nextPage, pageSize, fields, null);
        Type localVarReturnType = new TypeToken<BulkJobList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all the bulk jobs for an instance (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where&#x3D;job_direction&#x3D;&#39;UPLOAD&#39;. The following fields are valid search fields &#39;object_name&#39;, &#39;job_status&#39;, &#39;job_direction&#39;, &#39;record_count&#39; (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param pageSize The page size for pagination, which defaults to 200 if not supplied (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkJobsAsync(String authorization, String where, String nextPage, Long pageSize, String fields, final ApiCallback<BulkJobList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBulkJobsValidateBeforeCall(authorization, where, nextPage, pageSize, fields, _callback);
        Type localVarReturnType = new TypeToken<BulkJobList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBulkStatus
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkStatusCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/{id}/status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBulkStatusValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBulkStatus(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBulkStatus(Async)");
        }

        return getBulkStatusCall(authorization, id, _callback);

    }

    /**
     * Retrieve the status of a bulk job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its status. (required)
     * @return BulkStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public BulkStatus getBulkStatus(String authorization, String id) throws ApiException {
        ApiResponse<BulkStatus> localVarResp = getBulkStatusWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve the status of a bulk job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its status. (required)
     * @return ApiResponse&lt;BulkStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkStatus> getBulkStatusWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = getBulkStatusValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<BulkStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the status of a bulk job. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to retrieve its status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBulkStatusAsync(String authorization, String id, final ApiCallback<BulkStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBulkStatusValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<BulkStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceBulkCancel
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceBulkCancelCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceBulkCancelValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling replaceBulkCancel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replaceBulkCancel(Async)");
        }

        return replaceBulkCancelCall(authorization, id, _callback);

    }

    /**
     * Cancel an asynchronous bulk query job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to cancel. (required)
     * @return BulkStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public BulkStatus replaceBulkCancel(String authorization, String id) throws ApiException {
        ApiResponse<BulkStatus> localVarResp = replaceBulkCancelWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Cancel an asynchronous bulk query job.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to cancel. (required)
     * @return ApiResponse&lt;BulkStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkStatus> replaceBulkCancelWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = replaceBulkCancelValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<BulkStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel an asynchronous bulk query job. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the bulk job to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceBulkCancelAsync(String authorization, String id, final ApiCallback<BulkStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceBulkCancelValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<BulkStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
