/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Person;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Customer {
  public static final String SERIALIZED_NAME_BILLING_PERSON = "billingPerson";
  @SerializedName(SERIALIZED_NAME_BILLING_PERSON)
  private Person billingPerson;

  public static final String SERIALIZED_NAME_CUSTOMER_GROUP_ID = "customerGroupId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GROUP_ID)
  private Long customerGroupId;

  public static final String SERIALIZED_NAME_CUSTOMER_GROUP_NAME = "customerGroupName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GROUP_NAME)
  private String customerGroupName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private String registered;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESSES = "shippingAddresses";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESSES)
  private List<Person> shippingAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_EXEMPT = "taxExempt";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT)
  private Boolean taxExempt;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private Double taxId;

  public static final String SERIALIZED_NAME_TAX_ID_VALID = "taxIdValid";
  @SerializedName(SERIALIZED_NAME_TAX_ID_VALID)
  private Boolean taxIdValid;

  public static final String SERIALIZED_NAME_TOTAL_ORDER_COUNT = "totalOrderCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ORDER_COUNT)
  private Double totalOrderCount;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public Customer() {
  }

  public Customer billingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
    return this;
  }

  /**
   * Get billingPerson
   * @return billingPerson
   */
  @javax.annotation.Nullable
  public Person getBillingPerson() {
    return billingPerson;
  }

  public void setBillingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
  }


  public Customer customerGroupId(Long customerGroupId) {
    this.customerGroupId = customerGroupId;
    return this;
  }

  /**
   * Get customerGroupId
   * @return customerGroupId
   */
  @javax.annotation.Nullable
  public Long getCustomerGroupId() {
    return customerGroupId;
  }

  public void setCustomerGroupId(Long customerGroupId) {
    this.customerGroupId = customerGroupId;
  }


  public Customer customerGroupName(String customerGroupName) {
    this.customerGroupName = customerGroupName;
    return this;
  }

  /**
   * Get customerGroupName
   * @return customerGroupName
   */
  @javax.annotation.Nullable
  public String getCustomerGroupName() {
    return customerGroupName;
  }

  public void setCustomerGroupName(String customerGroupName) {
    this.customerGroupName = customerGroupName;
  }


  public Customer email(String email) {
    this.email = email;
    return this;
  }

  /**
   * customer email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Customer id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Unique internal customer ID
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Customer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Customer Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Customer registered(String registered) {
    this.registered = registered;
    return this;
  }

  /**
   * Ex: 2015-02-03 15:30:08
   * @return registered
   */
  @javax.annotation.Nullable
  public String getRegistered() {
    return registered;
  }

  public void setRegistered(String registered) {
    this.registered = registered;
  }


  public Customer shippingAddresses(List<Person> shippingAddresses) {
    this.shippingAddresses = shippingAddresses;
    return this;
  }

  public Customer addShippingAddressesItem(Person shippingAddressesItem) {
    if (this.shippingAddresses == null) {
      this.shippingAddresses = new ArrayList<>();
    }
    this.shippingAddresses.add(shippingAddressesItem);
    return this;
  }

  /**
   * Get shippingAddresses
   * @return shippingAddresses
   */
  @javax.annotation.Nullable
  public List<Person> getShippingAddresses() {
    return shippingAddresses;
  }

  public void setShippingAddresses(List<Person> shippingAddresses) {
    this.shippingAddresses = shippingAddresses;
  }


  public Customer taxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
    return this;
  }

  /**
   * Get taxExempt
   * @return taxExempt
   */
  @javax.annotation.Nullable
  public Boolean getTaxExempt() {
    return taxExempt;
  }

  public void setTaxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
  }


  public Customer taxId(Double taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * Get taxId
   * @return taxId
   */
  @javax.annotation.Nullable
  public Double getTaxId() {
    return taxId;
  }

  public void setTaxId(Double taxId) {
    this.taxId = taxId;
  }


  public Customer taxIdValid(Boolean taxIdValid) {
    this.taxIdValid = taxIdValid;
    return this;
  }

  /**
   * Get taxIdValid
   * @return taxIdValid
   */
  @javax.annotation.Nullable
  public Boolean getTaxIdValid() {
    return taxIdValid;
  }

  public void setTaxIdValid(Boolean taxIdValid) {
    this.taxIdValid = taxIdValid;
  }


  public Customer totalOrderCount(Double totalOrderCount) {
    this.totalOrderCount = totalOrderCount;
    return this;
  }

  /**
   * Get totalOrderCount
   * @return totalOrderCount
   */
  @javax.annotation.Nullable
  public Double getTotalOrderCount() {
    return totalOrderCount;
  }

  public void setTotalOrderCount(Double totalOrderCount) {
    this.totalOrderCount = totalOrderCount;
  }


  public Customer updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Ex: 2015-02-03 15:30:08
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.billingPerson, customer.billingPerson) &&
        Objects.equals(this.customerGroupId, customer.customerGroupId) &&
        Objects.equals(this.customerGroupName, customer.customerGroupName) &&
        Objects.equals(this.email, customer.email) &&
        Objects.equals(this.id, customer.id) &&
        Objects.equals(this.name, customer.name) &&
        Objects.equals(this.registered, customer.registered) &&
        Objects.equals(this.shippingAddresses, customer.shippingAddresses) &&
        Objects.equals(this.taxExempt, customer.taxExempt) &&
        Objects.equals(this.taxId, customer.taxId) &&
        Objects.equals(this.taxIdValid, customer.taxIdValid) &&
        Objects.equals(this.totalOrderCount, customer.totalOrderCount) &&
        Objects.equals(this.updated, customer.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPerson, customerGroupId, customerGroupName, email, id, name, registered, shippingAddresses, taxExempt, taxId, taxIdValid, totalOrderCount, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    billingPerson: ").append(toIndentedString(billingPerson)).append("\n");
    sb.append("    customerGroupId: ").append(toIndentedString(customerGroupId)).append("\n");
    sb.append("    customerGroupName: ").append(toIndentedString(customerGroupName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    shippingAddresses: ").append(toIndentedString(shippingAddresses)).append("\n");
    sb.append("    taxExempt: ").append(toIndentedString(taxExempt)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    taxIdValid: ").append(toIndentedString(taxIdValid)).append("\n");
    sb.append("    totalOrderCount: ").append(toIndentedString(totalOrderCount)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPerson");
    openapiFields.add("customerGroupId");
    openapiFields.add("customerGroupName");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("registered");
    openapiFields.add("shippingAddresses");
    openapiFields.add("taxExempt");
    openapiFields.add("taxId");
    openapiFields.add("taxIdValid");
    openapiFields.add("totalOrderCount");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Customer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingPerson`
      if (jsonObj.get("billingPerson") != null && !jsonObj.get("billingPerson").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("billingPerson"));
      }
      if ((jsonObj.get("customerGroupName") != null && !jsonObj.get("customerGroupName").isJsonNull()) && !jsonObj.get("customerGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerGroupName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("registered") != null && !jsonObj.get("registered").isJsonNull()) && !jsonObj.get("registered").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered").toString()));
      }
      if (jsonObj.get("shippingAddresses") != null && !jsonObj.get("shippingAddresses").isJsonNull()) {
        JsonArray jsonArrayshippingAddresses = jsonObj.getAsJsonArray("shippingAddresses");
        if (jsonArrayshippingAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("shippingAddresses").toString()));
          }

          // validate the optional field `shippingAddresses` (array)
          for (int i = 0; i < jsonArrayshippingAddresses.size(); i++) {
            Person.validateJsonElement(jsonArrayshippingAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Customer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Customer
   * @throws IOException if the JSON string is invalid with respect to Customer
   */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

  /**
   * Convert an instance of Customer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

