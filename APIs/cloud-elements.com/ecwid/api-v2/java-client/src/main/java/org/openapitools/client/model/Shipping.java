/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shipping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Shipping {
  public static final String SERIALIZED_NAME_DISABLED_METHODS = "disabledMethods";
  @SerializedName(SERIALIZED_NAME_DISABLED_METHODS)
  private List<String> disabledMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED_METHODS = "enabledMethods";
  @SerializedName(SERIALIZED_NAME_ENABLED_METHODS)
  private List<String> enabledMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLAT_RATE = "flatRate";
  @SerializedName(SERIALIZED_NAME_FLAT_RATE)
  private Double flatRate;

  public static final String SERIALIZED_NAME_METHOD_MARKUP = "methodMarkup";
  @SerializedName(SERIALIZED_NAME_METHOD_MARKUP)
  private Double methodMarkup;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Shipping() {
  }

  public Shipping disabledMethods(List<String> disabledMethods) {
    this.disabledMethods = disabledMethods;
    return this;
  }

  public Shipping addDisabledMethodsItem(String disabledMethodsItem) {
    if (this.disabledMethods == null) {
      this.disabledMethods = new ArrayList<>();
    }
    this.disabledMethods.add(disabledMethodsItem);
    return this;
  }

  /**
   * Get disabledMethods
   * @return disabledMethods
   */
  @javax.annotation.Nullable
  public List<String> getDisabledMethods() {
    return disabledMethods;
  }

  public void setDisabledMethods(List<String> disabledMethods) {
    this.disabledMethods = disabledMethods;
  }


  public Shipping enabledMethods(List<String> enabledMethods) {
    this.enabledMethods = enabledMethods;
    return this;
  }

  public Shipping addEnabledMethodsItem(String enabledMethodsItem) {
    if (this.enabledMethods == null) {
      this.enabledMethods = new ArrayList<>();
    }
    this.enabledMethods.add(enabledMethodsItem);
    return this;
  }

  /**
   * Get enabledMethods
   * @return enabledMethods
   */
  @javax.annotation.Nullable
  public List<String> getEnabledMethods() {
    return enabledMethods;
  }

  public void setEnabledMethods(List<String> enabledMethods) {
    this.enabledMethods = enabledMethods;
  }


  public Shipping flatRate(Double flatRate) {
    this.flatRate = flatRate;
    return this;
  }

  /**
   * Get flatRate
   * @return flatRate
   */
  @javax.annotation.Nullable
  public Double getFlatRate() {
    return flatRate;
  }

  public void setFlatRate(Double flatRate) {
    this.flatRate = flatRate;
  }


  public Shipping methodMarkup(Double methodMarkup) {
    this.methodMarkup = methodMarkup;
    return this;
  }

  /**
   * Get methodMarkup
   * @return methodMarkup
   */
  @javax.annotation.Nullable
  public Double getMethodMarkup() {
    return methodMarkup;
  }

  public void setMethodMarkup(Double methodMarkup) {
    this.methodMarkup = methodMarkup;
  }


  public Shipping type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shipping shipping = (Shipping) o;
    return Objects.equals(this.disabledMethods, shipping.disabledMethods) &&
        Objects.equals(this.enabledMethods, shipping.enabledMethods) &&
        Objects.equals(this.flatRate, shipping.flatRate) &&
        Objects.equals(this.methodMarkup, shipping.methodMarkup) &&
        Objects.equals(this.type, shipping.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabledMethods, enabledMethods, flatRate, methodMarkup, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shipping {\n");
    sb.append("    disabledMethods: ").append(toIndentedString(disabledMethods)).append("\n");
    sb.append("    enabledMethods: ").append(toIndentedString(enabledMethods)).append("\n");
    sb.append("    flatRate: ").append(toIndentedString(flatRate)).append("\n");
    sb.append("    methodMarkup: ").append(toIndentedString(methodMarkup)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disabledMethods");
    openapiFields.add("enabledMethods");
    openapiFields.add("flatRate");
    openapiFields.add("methodMarkup");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shipping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shipping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shipping is not found in the empty JSON string", Shipping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shipping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("disabledMethods") != null && !jsonObj.get("disabledMethods").isJsonNull() && !jsonObj.get("disabledMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledMethods` to be an array in the JSON string but got `%s`", jsonObj.get("disabledMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledMethods") != null && !jsonObj.get("enabledMethods").isJsonNull() && !jsonObj.get("enabledMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledMethods` to be an array in the JSON string but got `%s`", jsonObj.get("enabledMethods").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shipping.class));

       return (TypeAdapter<T>) new TypeAdapter<Shipping>() {
           @Override
           public void write(JsonWriter out, Shipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shipping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shipping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shipping
   * @throws IOException if the JSON string is invalid with respect to Shipping
   */
  public static Shipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shipping.class);
  }

  /**
   * Convert an instance of Shipping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

