/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjectsMetadataFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjectsMetadataFields {
  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private String mask;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VENDOR_DISPLAY_NAME = "vendorDisplayName";
  @SerializedName(SERIALIZED_NAME_VENDOR_DISPLAY_NAME)
  private String vendorDisplayName;

  public static final String SERIALIZED_NAME_VENDOR_PATH = "vendorPath";
  @SerializedName(SERIALIZED_NAME_VENDOR_PATH)
  private String vendorPath;

  public static final String SERIALIZED_NAME_VENDOR_READ_ONLY = "vendorReadOnly";
  @SerializedName(SERIALIZED_NAME_VENDOR_READ_ONLY)
  private Boolean vendorReadOnly;

  public static final String SERIALIZED_NAME_VENDOR_REQUIRED = "vendorRequired";
  @SerializedName(SERIALIZED_NAME_VENDOR_REQUIRED)
  private Boolean vendorRequired;

  public ObjectsMetadataFields() {
  }

  public ObjectsMetadataFields mask(String mask) {
    this.mask = mask;
    return this;
  }

  /**
   * Get mask
   * @return mask
   */
  @javax.annotation.Nullable
  public String getMask() {
    return mask;
  }

  public void setMask(String mask) {
    this.mask = mask;
  }


  public ObjectsMetadataFields type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ObjectsMetadataFields vendorDisplayName(String vendorDisplayName) {
    this.vendorDisplayName = vendorDisplayName;
    return this;
  }

  /**
   * Get vendorDisplayName
   * @return vendorDisplayName
   */
  @javax.annotation.Nullable
  public String getVendorDisplayName() {
    return vendorDisplayName;
  }

  public void setVendorDisplayName(String vendorDisplayName) {
    this.vendorDisplayName = vendorDisplayName;
  }


  public ObjectsMetadataFields vendorPath(String vendorPath) {
    this.vendorPath = vendorPath;
    return this;
  }

  /**
   * Get vendorPath
   * @return vendorPath
   */
  @javax.annotation.Nullable
  public String getVendorPath() {
    return vendorPath;
  }

  public void setVendorPath(String vendorPath) {
    this.vendorPath = vendorPath;
  }


  public ObjectsMetadataFields vendorReadOnly(Boolean vendorReadOnly) {
    this.vendorReadOnly = vendorReadOnly;
    return this;
  }

  /**
   * Get vendorReadOnly
   * @return vendorReadOnly
   */
  @javax.annotation.Nullable
  public Boolean getVendorReadOnly() {
    return vendorReadOnly;
  }

  public void setVendorReadOnly(Boolean vendorReadOnly) {
    this.vendorReadOnly = vendorReadOnly;
  }


  public ObjectsMetadataFields vendorRequired(Boolean vendorRequired) {
    this.vendorRequired = vendorRequired;
    return this;
  }

  /**
   * Get vendorRequired
   * @return vendorRequired
   */
  @javax.annotation.Nullable
  public Boolean getVendorRequired() {
    return vendorRequired;
  }

  public void setVendorRequired(Boolean vendorRequired) {
    this.vendorRequired = vendorRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectsMetadataFields objectsMetadataFields = (ObjectsMetadataFields) o;
    return Objects.equals(this.mask, objectsMetadataFields.mask) &&
        Objects.equals(this.type, objectsMetadataFields.type) &&
        Objects.equals(this.vendorDisplayName, objectsMetadataFields.vendorDisplayName) &&
        Objects.equals(this.vendorPath, objectsMetadataFields.vendorPath) &&
        Objects.equals(this.vendorReadOnly, objectsMetadataFields.vendorReadOnly) &&
        Objects.equals(this.vendorRequired, objectsMetadataFields.vendorRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mask, type, vendorDisplayName, vendorPath, vendorReadOnly, vendorRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectsMetadataFields {\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vendorDisplayName: ").append(toIndentedString(vendorDisplayName)).append("\n");
    sb.append("    vendorPath: ").append(toIndentedString(vendorPath)).append("\n");
    sb.append("    vendorReadOnly: ").append(toIndentedString(vendorReadOnly)).append("\n");
    sb.append("    vendorRequired: ").append(toIndentedString(vendorRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mask");
    openapiFields.add("type");
    openapiFields.add("vendorDisplayName");
    openapiFields.add("vendorPath");
    openapiFields.add("vendorReadOnly");
    openapiFields.add("vendorRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjectsMetadataFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectsMetadataFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectsMetadataFields is not found in the empty JSON string", ObjectsMetadataFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectsMetadataFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectsMetadataFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mask") != null && !jsonObj.get("mask").isJsonNull()) && !jsonObj.get("mask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mask").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("vendorDisplayName") != null && !jsonObj.get("vendorDisplayName").isJsonNull()) && !jsonObj.get("vendorDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorDisplayName").toString()));
      }
      if ((jsonObj.get("vendorPath") != null && !jsonObj.get("vendorPath").isJsonNull()) && !jsonObj.get("vendorPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectsMetadataFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectsMetadataFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectsMetadataFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectsMetadataFields.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectsMetadataFields>() {
           @Override
           public void write(JsonWriter out, ObjectsMetadataFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectsMetadataFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjectsMetadataFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjectsMetadataFields
   * @throws IOException if the JSON string is invalid with respect to ObjectsMetadataFields
   */
  public static ObjectsMetadataFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectsMetadataFields.class);
  }

  /**
   * Convert an instance of ObjectsMetadataFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

