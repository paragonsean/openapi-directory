/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status of the bulk upload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkStatus {
  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private BigDecimal batchId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NUM_OF_LEADS_PROCESSED = "numOfLeadsProcessed";
  @SerializedName(SERIALIZED_NAME_NUM_OF_LEADS_PROCESSED)
  private BigDecimal numOfLeadsProcessed;

  public static final String SERIALIZED_NAME_NUM_OF_ROWS_FAILED = "numOfRowsFailed";
  @SerializedName(SERIALIZED_NAME_NUM_OF_ROWS_FAILED)
  private BigDecimal numOfRowsFailed;

  public static final String SERIALIZED_NAME_NUM_OF_ROWS_WITH_WARNING = "numOfRowsWithWarning";
  @SerializedName(SERIALIZED_NAME_NUM_OF_ROWS_WITH_WARNING)
  private BigDecimal numOfRowsWithWarning;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public BulkStatus() {
  }

  public BulkStatus batchId(BigDecimal batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * Contact/Leads loaded
   * @return batchId
   */
  @javax.annotation.Nullable
  public BigDecimal getBatchId() {
    return batchId;
  }

  public void setBatchId(BigDecimal batchId) {
    this.batchId = batchId;
  }


  public BulkStatus message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public BulkStatus numOfLeadsProcessed(BigDecimal numOfLeadsProcessed) {
    this.numOfLeadsProcessed = numOfLeadsProcessed;
    return this;
  }

  /**
   * Contact/Leads loaded
   * @return numOfLeadsProcessed
   */
  @javax.annotation.Nullable
  public BigDecimal getNumOfLeadsProcessed() {
    return numOfLeadsProcessed;
  }

  public void setNumOfLeadsProcessed(BigDecimal numOfLeadsProcessed) {
    this.numOfLeadsProcessed = numOfLeadsProcessed;
  }


  public BulkStatus numOfRowsFailed(BigDecimal numOfRowsFailed) {
    this.numOfRowsFailed = numOfRowsFailed;
    return this;
  }

  /**
   * Failed count
   * @return numOfRowsFailed
   */
  @javax.annotation.Nullable
  public BigDecimal getNumOfRowsFailed() {
    return numOfRowsFailed;
  }

  public void setNumOfRowsFailed(BigDecimal numOfRowsFailed) {
    this.numOfRowsFailed = numOfRowsFailed;
  }


  public BulkStatus numOfRowsWithWarning(BigDecimal numOfRowsWithWarning) {
    this.numOfRowsWithWarning = numOfRowsWithWarning;
    return this;
  }

  /**
   * Contact/Leads that had warnings
   * @return numOfRowsWithWarning
   */
  @javax.annotation.Nullable
  public BigDecimal getNumOfRowsWithWarning() {
    return numOfRowsWithWarning;
  }

  public void setNumOfRowsWithWarning(BigDecimal numOfRowsWithWarning) {
    this.numOfRowsWithWarning = numOfRowsWithWarning;
  }


  public BulkStatus status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the bulk job
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkStatus bulkStatus = (BulkStatus) o;
    return Objects.equals(this.batchId, bulkStatus.batchId) &&
        Objects.equals(this.message, bulkStatus.message) &&
        Objects.equals(this.numOfLeadsProcessed, bulkStatus.numOfLeadsProcessed) &&
        Objects.equals(this.numOfRowsFailed, bulkStatus.numOfRowsFailed) &&
        Objects.equals(this.numOfRowsWithWarning, bulkStatus.numOfRowsWithWarning) &&
        Objects.equals(this.status, bulkStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchId, message, numOfLeadsProcessed, numOfRowsFailed, numOfRowsWithWarning, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkStatus {\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    numOfLeadsProcessed: ").append(toIndentedString(numOfLeadsProcessed)).append("\n");
    sb.append("    numOfRowsFailed: ").append(toIndentedString(numOfRowsFailed)).append("\n");
    sb.append("    numOfRowsWithWarning: ").append(toIndentedString(numOfRowsWithWarning)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchId");
    openapiFields.add("message");
    openapiFields.add("numOfLeadsProcessed");
    openapiFields.add("numOfRowsFailed");
    openapiFields.add("numOfRowsWithWarning");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkStatus is not found in the empty JSON string", BulkStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkStatus>() {
           @Override
           public void write(JsonWriter out, BulkStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkStatus
   * @throws IOException if the JSON string is invalid with respect to BulkStatus
   */
  public static BulkStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkStatus.class);
  }

  /**
   * Convert an instance of BulkStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

