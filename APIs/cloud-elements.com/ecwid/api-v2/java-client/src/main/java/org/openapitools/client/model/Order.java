/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalInfo;
import org.openapitools.client.model.HandlingFee;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.Person;
import org.openapitools.client.model.Refunds;
import org.openapitools.client.model.ShippingOption;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:09.313051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private AdditionalInfo additionalInfo;

  public static final String SERIALIZED_NAME_BILLING_PERSON = "billingPerson";
  @SerializedName(SERIALIZED_NAME_BILLING_PERSON)
  private Person billingPerson;

  public static final String SERIALIZED_NAME_COUPON_DISCOUNT = "couponDiscount";
  @SerializedName(SERIALIZED_NAME_COUPON_DISCOUNT)
  private Double couponDiscount;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private String createDate;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "createTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private Double createTimestamp;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Double customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_EXEMPT = "customerTaxExempt";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_EXEMPT)
  private Boolean customerTaxExempt;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID = "customerTaxId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID)
  private Long customerTaxId;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID_VALID = "customerTaxIdValid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID_VALID)
  private Boolean customerTaxIdValid;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Double discount;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULFILLMENT_STATUS = "fulfillmentStatus";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_STATUS)
  private String fulfillmentStatus;

  public static final String SERIALIZED_NAME_GLOBAL_REFERER = "globalReferer";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFERER)
  private String globalReferer;

  public static final String SERIALIZED_NAME_HANDLING_FEE = "handlingFee";
  @SerializedName(SERIALIZED_NAME_HANDLING_FEE)
  private HandlingFee handlingFee;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_CHANGE_DATE = "lastChangeDate";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGE_DATE)
  private OffsetDateTime lastChangeDate;

  public static final String SERIALIZED_NAME_MEMBERSHIP_BASED_DISCOUNT = "membershipBasedDiscount";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_BASED_DISCOUNT)
  private Double membershipBasedDiscount;

  public static final String SERIALIZED_NAME_ORDER_COMMENTS = "orderComments";
  @SerializedName(SERIALIZED_NAME_ORDER_COMMENTS)
  private String orderComments;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private Long orderNumber;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_MODULE = "paymentModule";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MODULE)
  private String paymentModule;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private String paymentStatus;

  public static final String SERIALIZED_NAME_PRIVATE_ADMIN_NOTES = "privateAdminNotes";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ADMIN_NOTES)
  private String privateAdminNotes;

  public static final String SERIALIZED_NAME_REFERER_URL = "refererUrl";
  @SerializedName(SERIALIZED_NAME_REFERER_URL)
  private String refererUrl;

  public static final String SERIALIZED_NAME_REFUNDED_AMOUNT = "refundedAmount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_AMOUNT)
  private Double refundedAmount;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<Refunds> refunds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVERSED_TAX_APPLIED = "reversedTaxApplied";
  @SerializedName(SERIALIZED_NAME_REVERSED_TAX_APPLIED)
  private Boolean reversedTaxApplied;

  public static final String SERIALIZED_NAME_SAMPLE = "sample";
  @SerializedName(SERIALIZED_NAME_SAMPLE)
  private Boolean sample;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION = "shippingOption";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION)
  private ShippingOption shippingOption;

  public static final String SERIALIZED_NAME_SHIPPING_PERSON = "shippingPerson";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PERSON)
  private Person shippingPerson;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Double subtotal;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_TAXES_ON_SHIPPING = "taxesOnShipping";
  @SerializedName(SERIALIZED_NAME_TAXES_ON_SHIPPING)
  private List<Tax> taxesOnShipping = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_AND_MEMBERSHIP_BASED_DISCOUNT = "totalAndMembershipBasedDiscount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AND_MEMBERSHIP_BASED_DISCOUNT)
  private Double totalAndMembershipBasedDiscount;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "trackingNumber";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private String updateDate;

  public static final String SERIALIZED_NAME_UPDATE_TIMESTAMP = "updateTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIMESTAMP)
  private Double updateTimestamp;

  public static final String SERIALIZED_NAME_USD_TOTAL = "usdTotal";
  @SerializedName(SERIALIZED_NAME_USD_TOTAL)
  private Double usdTotal;

  public static final String SERIALIZED_NAME_VENDOR_NUMBER = "vendorNumber";
  @SerializedName(SERIALIZED_NAME_VENDOR_NUMBER)
  private Double vendorNumber;

  public static final String SERIALIZED_NAME_VENDOR_ORDER_NUMBER = "vendorOrderNumber";
  @SerializedName(SERIALIZED_NAME_VENDOR_ORDER_NUMBER)
  private String vendorOrderNumber;

  public static final String SERIALIZED_NAME_VOLUME_DISCOUNT = "volumeDiscount";
  @SerializedName(SERIALIZED_NAME_VOLUME_DISCOUNT)
  private Double volumeDiscount;

  public Order() {
  }

  public Order additionalInfo(AdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Get additionalInfo
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public AdditionalInfo getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(AdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public Order billingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
    return this;
  }

  /**
   * Get billingPerson
   * @return billingPerson
   */
  @javax.annotation.Nullable
  public Person getBillingPerson() {
    return billingPerson;
  }

  public void setBillingPerson(Person billingPerson) {
    this.billingPerson = billingPerson;
  }


  public Order couponDiscount(Double couponDiscount) {
    this.couponDiscount = couponDiscount;
    return this;
  }

  /**
   * Get couponDiscount
   * @return couponDiscount
   */
  @javax.annotation.Nullable
  public Double getCouponDiscount() {
    return couponDiscount;
  }

  public void setCouponDiscount(Double couponDiscount) {
    this.couponDiscount = couponDiscount;
  }


  public Order createDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Ex: 2015-02-02 16:11:52 +0000
   * @return createDate
   */
  @javax.annotation.Nullable
  public String getCreateDate() {
    return createDate;
  }

  public void setCreateDate(String createDate) {
    this.createDate = createDate;
  }


  public Order createTimestamp(Double createTimestamp) {
    this.createTimestamp = createTimestamp;
    return this;
  }

  /**
   * Get createTimestamp
   * @return createTimestamp
   */
  @javax.annotation.Nullable
  public Double getCreateTimestamp() {
    return createTimestamp;
  }

  public void setCreateTimestamp(Double createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public Order customerId(Double customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public Double getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Double customerId) {
    this.customerId = customerId;
  }


  public Order customerTaxExempt(Boolean customerTaxExempt) {
    this.customerTaxExempt = customerTaxExempt;
    return this;
  }

  /**
   * Get customerTaxExempt
   * @return customerTaxExempt
   */
  @javax.annotation.Nullable
  public Boolean getCustomerTaxExempt() {
    return customerTaxExempt;
  }

  public void setCustomerTaxExempt(Boolean customerTaxExempt) {
    this.customerTaxExempt = customerTaxExempt;
  }


  public Order customerTaxId(Long customerTaxId) {
    this.customerTaxId = customerTaxId;
    return this;
  }

  /**
   * Get customerTaxId
   * @return customerTaxId
   */
  @javax.annotation.Nullable
  public Long getCustomerTaxId() {
    return customerTaxId;
  }

  public void setCustomerTaxId(Long customerTaxId) {
    this.customerTaxId = customerTaxId;
  }


  public Order customerTaxIdValid(Boolean customerTaxIdValid) {
    this.customerTaxIdValid = customerTaxIdValid;
    return this;
  }

  /**
   * Get customerTaxIdValid
   * @return customerTaxIdValid
   */
  @javax.annotation.Nullable
  public Boolean getCustomerTaxIdValid() {
    return customerTaxIdValid;
  }

  public void setCustomerTaxIdValid(Boolean customerTaxIdValid) {
    this.customerTaxIdValid = customerTaxIdValid;
  }


  public Order discount(Double discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public Double getDiscount() {
    return discount;
  }

  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  public Order email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Order fulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
    return this;
  }

  /**
   * AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
   * @return fulfillmentStatus
   */
  @javax.annotation.Nullable
  public String getFulfillmentStatus() {
    return fulfillmentStatus;
  }

  public void setFulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
  }


  public Order globalReferer(String globalReferer) {
    this.globalReferer = globalReferer;
    return this;
  }

  /**
   * Get globalReferer
   * @return globalReferer
   */
  @javax.annotation.Nullable
  public String getGlobalReferer() {
    return globalReferer;
  }

  public void setGlobalReferer(String globalReferer) {
    this.globalReferer = globalReferer;
  }


  public Order handlingFee(HandlingFee handlingFee) {
    this.handlingFee = handlingFee;
    return this;
  }

  /**
   * Get handlingFee
   * @return handlingFee
   */
  @javax.annotation.Nullable
  public HandlingFee getHandlingFee() {
    return handlingFee;
  }

  public void setHandlingFee(HandlingFee handlingFee) {
    this.handlingFee = handlingFee;
  }


  public Order hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Get hidden
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public Order ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Order items(List<Item> items) {
    this.items = items;
    return this;
  }

  public Order addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }


  public Order lastChangeDate(OffsetDateTime lastChangeDate) {
    this.lastChangeDate = lastChangeDate;
    return this;
  }

  /**
   * Ex: 2015-02-03 15:30:08
   * @return lastChangeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastChangeDate() {
    return lastChangeDate;
  }

  public void setLastChangeDate(OffsetDateTime lastChangeDate) {
    this.lastChangeDate = lastChangeDate;
  }


  public Order membershipBasedDiscount(Double membershipBasedDiscount) {
    this.membershipBasedDiscount = membershipBasedDiscount;
    return this;
  }

  /**
   * Get membershipBasedDiscount
   * @return membershipBasedDiscount
   */
  @javax.annotation.Nullable
  public Double getMembershipBasedDiscount() {
    return membershipBasedDiscount;
  }

  public void setMembershipBasedDiscount(Double membershipBasedDiscount) {
    this.membershipBasedDiscount = membershipBasedDiscount;
  }


  public Order orderComments(String orderComments) {
    this.orderComments = orderComments;
    return this;
  }

  /**
   * Get orderComments
   * @return orderComments
   */
  @javax.annotation.Nullable
  public String getOrderComments() {
    return orderComments;
  }

  public void setOrderComments(String orderComments) {
    this.orderComments = orderComments;
  }


  public Order orderNumber(Long orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * Unique order number without prefixes/suffixes
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public Long getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(Long orderNumber) {
    this.orderNumber = orderNumber;
  }


  public Order paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Get paymentMethod
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Order paymentModule(String paymentModule) {
    this.paymentModule = paymentModule;
    return this;
  }

  /**
   * Get paymentModule
   * @return paymentModule
   */
  @javax.annotation.Nullable
  public String getPaymentModule() {
    return paymentModule;
  }

  public void setPaymentModule(String paymentModule) {
    this.paymentModule = paymentModule;
  }


  public Order paymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public String getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public Order privateAdminNotes(String privateAdminNotes) {
    this.privateAdminNotes = privateAdminNotes;
    return this;
  }

  /**
   * Get privateAdminNotes
   * @return privateAdminNotes
   */
  @javax.annotation.Nullable
  public String getPrivateAdminNotes() {
    return privateAdminNotes;
  }

  public void setPrivateAdminNotes(String privateAdminNotes) {
    this.privateAdminNotes = privateAdminNotes;
  }


  public Order refererUrl(String refererUrl) {
    this.refererUrl = refererUrl;
    return this;
  }

  /**
   * Get refererUrl
   * @return refererUrl
   */
  @javax.annotation.Nullable
  public String getRefererUrl() {
    return refererUrl;
  }

  public void setRefererUrl(String refererUrl) {
    this.refererUrl = refererUrl;
  }


  public Order refundedAmount(Double refundedAmount) {
    this.refundedAmount = refundedAmount;
    return this;
  }

  /**
   * Get refundedAmount
   * @return refundedAmount
   */
  @javax.annotation.Nullable
  public Double getRefundedAmount() {
    return refundedAmount;
  }

  public void setRefundedAmount(Double refundedAmount) {
    this.refundedAmount = refundedAmount;
  }


  public Order refunds(List<Refunds> refunds) {
    this.refunds = refunds;
    return this;
  }

  public Order addRefundsItem(Refunds refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

  /**
   * Get refunds
   * @return refunds
   */
  @javax.annotation.Nullable
  public List<Refunds> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<Refunds> refunds) {
    this.refunds = refunds;
  }


  public Order reversedTaxApplied(Boolean reversedTaxApplied) {
    this.reversedTaxApplied = reversedTaxApplied;
    return this;
  }

  /**
   * Get reversedTaxApplied
   * @return reversedTaxApplied
   */
  @javax.annotation.Nullable
  public Boolean getReversedTaxApplied() {
    return reversedTaxApplied;
  }

  public void setReversedTaxApplied(Boolean reversedTaxApplied) {
    this.reversedTaxApplied = reversedTaxApplied;
  }


  public Order sample(Boolean sample) {
    this.sample = sample;
    return this;
  }

  /**
   * Get sample
   * @return sample
   */
  @javax.annotation.Nullable
  public Boolean getSample() {
    return sample;
  }

  public void setSample(Boolean sample) {
    this.sample = sample;
  }


  public Order shippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

  /**
   * Get shippingMethod
   * @return shippingMethod
   */
  @javax.annotation.Nullable
  public String getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public Order shippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
    return this;
  }

  /**
   * Get shippingOption
   * @return shippingOption
   */
  @javax.annotation.Nullable
  public ShippingOption getShippingOption() {
    return shippingOption;
  }

  public void setShippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
  }


  public Order shippingPerson(Person shippingPerson) {
    this.shippingPerson = shippingPerson;
    return this;
  }

  /**
   * Get shippingPerson
   * @return shippingPerson
   */
  @javax.annotation.Nullable
  public Person getShippingPerson() {
    return shippingPerson;
  }

  public void setShippingPerson(Person shippingPerson) {
    this.shippingPerson = shippingPerson;
  }


  public Order subtotal(Double subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Get subtotal
   * @return subtotal
   */
  @javax.annotation.Nullable
  public Double getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public Order tax(Double tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Double getTax() {
    return tax;
  }

  public void setTax(Double tax) {
    this.tax = tax;
  }


  public Order taxesOnShipping(List<Tax> taxesOnShipping) {
    this.taxesOnShipping = taxesOnShipping;
    return this;
  }

  public Order addTaxesOnShippingItem(Tax taxesOnShippingItem) {
    if (this.taxesOnShipping == null) {
      this.taxesOnShipping = new ArrayList<>();
    }
    this.taxesOnShipping.add(taxesOnShippingItem);
    return this;
  }

  /**
   * Get taxesOnShipping
   * @return taxesOnShipping
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxesOnShipping() {
    return taxesOnShipping;
  }

  public void setTaxesOnShipping(List<Tax> taxesOnShipping) {
    this.taxesOnShipping = taxesOnShipping;
  }


  public Order total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public Order totalAndMembershipBasedDiscount(Double totalAndMembershipBasedDiscount) {
    this.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount;
    return this;
  }

  /**
   * Get totalAndMembershipBasedDiscount
   * @return totalAndMembershipBasedDiscount
   */
  @javax.annotation.Nullable
  public Double getTotalAndMembershipBasedDiscount() {
    return totalAndMembershipBasedDiscount;
  }

  public void setTotalAndMembershipBasedDiscount(Double totalAndMembershipBasedDiscount) {
    this.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount;
  }


  public Order trackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
    return this;
  }

  /**
   * Get trackingNumber
   * @return trackingNumber
   */
  @javax.annotation.Nullable
  public String getTrackingNumber() {
    return trackingNumber;
  }

  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }


  public Order updateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Ex: 2015-02-03 15:30:08 +0000
   * @return updateDate
   */
  @javax.annotation.Nullable
  public String getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
  }


  public Order updateTimestamp(Double updateTimestamp) {
    this.updateTimestamp = updateTimestamp;
    return this;
  }

  /**
   * Get updateTimestamp
   * @return updateTimestamp
   */
  @javax.annotation.Nullable
  public Double getUpdateTimestamp() {
    return updateTimestamp;
  }

  public void setUpdateTimestamp(Double updateTimestamp) {
    this.updateTimestamp = updateTimestamp;
  }


  public Order usdTotal(Double usdTotal) {
    this.usdTotal = usdTotal;
    return this;
  }

  /**
   * Get usdTotal
   * @return usdTotal
   */
  @javax.annotation.Nullable
  public Double getUsdTotal() {
    return usdTotal;
  }

  public void setUsdTotal(Double usdTotal) {
    this.usdTotal = usdTotal;
  }


  public Order vendorNumber(Double vendorNumber) {
    this.vendorNumber = vendorNumber;
    return this;
  }

  /**
   * Get vendorNumber
   * @return vendorNumber
   */
  @javax.annotation.Nullable
  public Double getVendorNumber() {
    return vendorNumber;
  }

  public void setVendorNumber(Double vendorNumber) {
    this.vendorNumber = vendorNumber;
  }


  public Order vendorOrderNumber(String vendorOrderNumber) {
    this.vendorOrderNumber = vendorOrderNumber;
    return this;
  }

  /**
   * Get vendorOrderNumber
   * @return vendorOrderNumber
   */
  @javax.annotation.Nullable
  public String getVendorOrderNumber() {
    return vendorOrderNumber;
  }

  public void setVendorOrderNumber(String vendorOrderNumber) {
    this.vendorOrderNumber = vendorOrderNumber;
  }


  public Order volumeDiscount(Double volumeDiscount) {
    this.volumeDiscount = volumeDiscount;
    return this;
  }

  /**
   * Get volumeDiscount
   * @return volumeDiscount
   */
  @javax.annotation.Nullable
  public Double getVolumeDiscount() {
    return volumeDiscount;
  }

  public void setVolumeDiscount(Double volumeDiscount) {
    this.volumeDiscount = volumeDiscount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.additionalInfo, order.additionalInfo) &&
        Objects.equals(this.billingPerson, order.billingPerson) &&
        Objects.equals(this.couponDiscount, order.couponDiscount) &&
        Objects.equals(this.createDate, order.createDate) &&
        Objects.equals(this.createTimestamp, order.createTimestamp) &&
        Objects.equals(this.customerId, order.customerId) &&
        Objects.equals(this.customerTaxExempt, order.customerTaxExempt) &&
        Objects.equals(this.customerTaxId, order.customerTaxId) &&
        Objects.equals(this.customerTaxIdValid, order.customerTaxIdValid) &&
        Objects.equals(this.discount, order.discount) &&
        Objects.equals(this.email, order.email) &&
        Objects.equals(this.fulfillmentStatus, order.fulfillmentStatus) &&
        Objects.equals(this.globalReferer, order.globalReferer) &&
        Objects.equals(this.handlingFee, order.handlingFee) &&
        Objects.equals(this.hidden, order.hidden) &&
        Objects.equals(this.ipAddress, order.ipAddress) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.lastChangeDate, order.lastChangeDate) &&
        Objects.equals(this.membershipBasedDiscount, order.membershipBasedDiscount) &&
        Objects.equals(this.orderComments, order.orderComments) &&
        Objects.equals(this.orderNumber, order.orderNumber) &&
        Objects.equals(this.paymentMethod, order.paymentMethod) &&
        Objects.equals(this.paymentModule, order.paymentModule) &&
        Objects.equals(this.paymentStatus, order.paymentStatus) &&
        Objects.equals(this.privateAdminNotes, order.privateAdminNotes) &&
        Objects.equals(this.refererUrl, order.refererUrl) &&
        Objects.equals(this.refundedAmount, order.refundedAmount) &&
        Objects.equals(this.refunds, order.refunds) &&
        Objects.equals(this.reversedTaxApplied, order.reversedTaxApplied) &&
        Objects.equals(this.sample, order.sample) &&
        Objects.equals(this.shippingMethod, order.shippingMethod) &&
        Objects.equals(this.shippingOption, order.shippingOption) &&
        Objects.equals(this.shippingPerson, order.shippingPerson) &&
        Objects.equals(this.subtotal, order.subtotal) &&
        Objects.equals(this.tax, order.tax) &&
        Objects.equals(this.taxesOnShipping, order.taxesOnShipping) &&
        Objects.equals(this.total, order.total) &&
        Objects.equals(this.totalAndMembershipBasedDiscount, order.totalAndMembershipBasedDiscount) &&
        Objects.equals(this.trackingNumber, order.trackingNumber) &&
        Objects.equals(this.updateDate, order.updateDate) &&
        Objects.equals(this.updateTimestamp, order.updateTimestamp) &&
        Objects.equals(this.usdTotal, order.usdTotal) &&
        Objects.equals(this.vendorNumber, order.vendorNumber) &&
        Objects.equals(this.vendorOrderNumber, order.vendorOrderNumber) &&
        Objects.equals(this.volumeDiscount, order.volumeDiscount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, billingPerson, couponDiscount, createDate, createTimestamp, customerId, customerTaxExempt, customerTaxId, customerTaxIdValid, discount, email, fulfillmentStatus, globalReferer, handlingFee, hidden, ipAddress, items, lastChangeDate, membershipBasedDiscount, orderComments, orderNumber, paymentMethod, paymentModule, paymentStatus, privateAdminNotes, refererUrl, refundedAmount, refunds, reversedTaxApplied, sample, shippingMethod, shippingOption, shippingPerson, subtotal, tax, taxesOnShipping, total, totalAndMembershipBasedDiscount, trackingNumber, updateDate, updateTimestamp, usdTotal, vendorNumber, vendorOrderNumber, volumeDiscount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    billingPerson: ").append(toIndentedString(billingPerson)).append("\n");
    sb.append("    couponDiscount: ").append(toIndentedString(couponDiscount)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerTaxExempt: ").append(toIndentedString(customerTaxExempt)).append("\n");
    sb.append("    customerTaxId: ").append(toIndentedString(customerTaxId)).append("\n");
    sb.append("    customerTaxIdValid: ").append(toIndentedString(customerTaxIdValid)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fulfillmentStatus: ").append(toIndentedString(fulfillmentStatus)).append("\n");
    sb.append("    globalReferer: ").append(toIndentedString(globalReferer)).append("\n");
    sb.append("    handlingFee: ").append(toIndentedString(handlingFee)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    lastChangeDate: ").append(toIndentedString(lastChangeDate)).append("\n");
    sb.append("    membershipBasedDiscount: ").append(toIndentedString(membershipBasedDiscount)).append("\n");
    sb.append("    orderComments: ").append(toIndentedString(orderComments)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentModule: ").append(toIndentedString(paymentModule)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    privateAdminNotes: ").append(toIndentedString(privateAdminNotes)).append("\n");
    sb.append("    refererUrl: ").append(toIndentedString(refererUrl)).append("\n");
    sb.append("    refundedAmount: ").append(toIndentedString(refundedAmount)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    reversedTaxApplied: ").append(toIndentedString(reversedTaxApplied)).append("\n");
    sb.append("    sample: ").append(toIndentedString(sample)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    shippingOption: ").append(toIndentedString(shippingOption)).append("\n");
    sb.append("    shippingPerson: ").append(toIndentedString(shippingPerson)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxesOnShipping: ").append(toIndentedString(taxesOnShipping)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalAndMembershipBasedDiscount: ").append(toIndentedString(totalAndMembershipBasedDiscount)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    updateTimestamp: ").append(toIndentedString(updateTimestamp)).append("\n");
    sb.append("    usdTotal: ").append(toIndentedString(usdTotal)).append("\n");
    sb.append("    vendorNumber: ").append(toIndentedString(vendorNumber)).append("\n");
    sb.append("    vendorOrderNumber: ").append(toIndentedString(vendorOrderNumber)).append("\n");
    sb.append("    volumeDiscount: ").append(toIndentedString(volumeDiscount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("billingPerson");
    openapiFields.add("couponDiscount");
    openapiFields.add("createDate");
    openapiFields.add("createTimestamp");
    openapiFields.add("customerId");
    openapiFields.add("customerTaxExempt");
    openapiFields.add("customerTaxId");
    openapiFields.add("customerTaxIdValid");
    openapiFields.add("discount");
    openapiFields.add("email");
    openapiFields.add("fulfillmentStatus");
    openapiFields.add("globalReferer");
    openapiFields.add("handlingFee");
    openapiFields.add("hidden");
    openapiFields.add("ipAddress");
    openapiFields.add("items");
    openapiFields.add("lastChangeDate");
    openapiFields.add("membershipBasedDiscount");
    openapiFields.add("orderComments");
    openapiFields.add("orderNumber");
    openapiFields.add("paymentMethod");
    openapiFields.add("paymentModule");
    openapiFields.add("paymentStatus");
    openapiFields.add("privateAdminNotes");
    openapiFields.add("refererUrl");
    openapiFields.add("refundedAmount");
    openapiFields.add("refunds");
    openapiFields.add("reversedTaxApplied");
    openapiFields.add("sample");
    openapiFields.add("shippingMethod");
    openapiFields.add("shippingOption");
    openapiFields.add("shippingPerson");
    openapiFields.add("subtotal");
    openapiFields.add("tax");
    openapiFields.add("taxesOnShipping");
    openapiFields.add("total");
    openapiFields.add("totalAndMembershipBasedDiscount");
    openapiFields.add("trackingNumber");
    openapiFields.add("updateDate");
    openapiFields.add("updateTimestamp");
    openapiFields.add("usdTotal");
    openapiFields.add("vendorNumber");
    openapiFields.add("vendorOrderNumber");
    openapiFields.add("volumeDiscount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalInfo`
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        AdditionalInfo.validateJsonElement(jsonObj.get("additionalInfo"));
      }
      // validate the optional field `billingPerson`
      if (jsonObj.get("billingPerson") != null && !jsonObj.get("billingPerson").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("billingPerson"));
      }
      if ((jsonObj.get("createDate") != null && !jsonObj.get("createDate").isJsonNull()) && !jsonObj.get("createDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createDate").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fulfillmentStatus") != null && !jsonObj.get("fulfillmentStatus").isJsonNull()) && !jsonObj.get("fulfillmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentStatus").toString()));
      }
      if ((jsonObj.get("globalReferer") != null && !jsonObj.get("globalReferer").isJsonNull()) && !jsonObj.get("globalReferer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalReferer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalReferer").toString()));
      }
      // validate the optional field `handlingFee`
      if (jsonObj.get("handlingFee") != null && !jsonObj.get("handlingFee").isJsonNull()) {
        HandlingFee.validateJsonElement(jsonObj.get("handlingFee"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("orderComments") != null && !jsonObj.get("orderComments").isJsonNull()) && !jsonObj.get("orderComments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderComments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderComments").toString()));
      }
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      if ((jsonObj.get("paymentModule") != null && !jsonObj.get("paymentModule").isJsonNull()) && !jsonObj.get("paymentModule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentModule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentModule").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("privateAdminNotes") != null && !jsonObj.get("privateAdminNotes").isJsonNull()) && !jsonObj.get("privateAdminNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateAdminNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateAdminNotes").toString()));
      }
      if ((jsonObj.get("refererUrl") != null && !jsonObj.get("refererUrl").isJsonNull()) && !jsonObj.get("refererUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refererUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refererUrl").toString()));
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            Refunds.validateJsonElement(jsonArrayrefunds.get(i));
          };
        }
      }
      if ((jsonObj.get("shippingMethod") != null && !jsonObj.get("shippingMethod").isJsonNull()) && !jsonObj.get("shippingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethod").toString()));
      }
      // validate the optional field `shippingOption`
      if (jsonObj.get("shippingOption") != null && !jsonObj.get("shippingOption").isJsonNull()) {
        ShippingOption.validateJsonElement(jsonObj.get("shippingOption"));
      }
      // validate the optional field `shippingPerson`
      if (jsonObj.get("shippingPerson") != null && !jsonObj.get("shippingPerson").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("shippingPerson"));
      }
      if (jsonObj.get("taxesOnShipping") != null && !jsonObj.get("taxesOnShipping").isJsonNull()) {
        JsonArray jsonArraytaxesOnShipping = jsonObj.getAsJsonArray("taxesOnShipping");
        if (jsonArraytaxesOnShipping != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxesOnShipping").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxesOnShipping` to be an array in the JSON string but got `%s`", jsonObj.get("taxesOnShipping").toString()));
          }

          // validate the optional field `taxesOnShipping` (array)
          for (int i = 0; i < jsonArraytaxesOnShipping.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxesOnShipping.get(i));
          };
        }
      }
      if ((jsonObj.get("trackingNumber") != null && !jsonObj.get("trackingNumber").isJsonNull()) && !jsonObj.get("trackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingNumber").toString()));
      }
      if ((jsonObj.get("updateDate") != null && !jsonObj.get("updateDate").isJsonNull()) && !jsonObj.get("updateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateDate").toString()));
      }
      if ((jsonObj.get("vendorOrderNumber") != null && !jsonObj.get("vendorOrderNumber").isJsonNull()) && !jsonObj.get("vendorOrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorOrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorOrderNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

