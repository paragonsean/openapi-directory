/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Pong;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPing
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPingCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPingValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPing(Async)");
        }

        return getPingCall(authorization, _callback);

    }

    /**
     * Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @return Pong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Pong getPing(String authorization) throws ApiException {
        ApiResponse<Pong> localVarResp = getPingWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @return ApiResponse&lt;Pong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pong> getPingWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPingValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<Pong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned. (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPingAsync(String authorization, final ApiCallback<Pong> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPingValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<Pong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
