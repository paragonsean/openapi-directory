/*
 * ecwid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: api-v2
 * Contact: support@cloud-elements.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductPatch;
import org.openapitools.client.model.ProductPost;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProduct
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param product The product object to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(String authorization, ProductPost product, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(String authorization, ProductPost product, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createProduct(Async)");
        }

        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling createProduct(Async)");
        }

        return createProductCall(authorization, product, _callback);

    }

    /**
     * Create a new product in eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Product&#39; model are those required to create a new product
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param product The product object to be created (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Product createProduct(String authorization, ProductPost product) throws ApiException {
        ApiResponse<Product> localVarResp = createProductWithHttpInfo(authorization, product);
        return localVarResp.getData();
    }

    /**
     * Create a new product in eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Product&#39; model are those required to create a new product
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param product The product object to be created (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> createProductWithHttpInfo(String authorization, ProductPost product) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(authorization, product, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new product in eCommerce system.With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Product&#39; model are those required to create a new product (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param product The product object to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(String authorization, ProductPost product, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(authorization, product, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductById
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to delete from the eCommerce system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductByIdCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductByIdValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteProductById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProductById(Async)");
        }

        return deleteProductByIdCall(authorization, id, _callback);

    }

    /**
     * Delete a product associated with a given ID from your eCommerce system. Specifying a product associated with a given ID that does not exist will result in an error message
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to delete from the eCommerce system (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProductById(String authorization, String id) throws ApiException {
        deleteProductByIdWithHttpInfo(authorization, id);
    }

    /**
     * Delete a product associated with a given ID from your eCommerce system. Specifying a product associated with a given ID that does not exist will result in an error message
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to delete from the eCommerce system (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductByIdWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteProductByIdValidateBeforeCall(authorization, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a product associated with a given ID from your eCommerce system. Specifying a product associated with a given ID that does not exist will result in an error message (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to delete from the eCommerce system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductByIdAsync(String authorization, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductByIdValidateBeforeCall(authorization, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductById
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to retrieve from the eCommerce system (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductByIdCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductByIdValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getProductById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProductById(Async)");
        }

        return getProductByIdCall(authorization, id, _callback);

    }

    /**
     * Retrieve a product associated with a given ID from the eCommerce system. Specifying a product with an ID that does not exist will result in an error response
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to retrieve from the eCommerce system (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Product getProductById(String authorization, String id) throws ApiException {
        ApiResponse<Product> localVarResp = getProductByIdWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a product associated with a given ID from the eCommerce system. Specifying a product with an ID that does not exist will result in an error response
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to retrieve from the eCommerce system (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> getProductByIdWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a product associated with a given ID from the eCommerce system. Specifying a product with an ID that does not exist will result in an error response (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to retrieve from the eCommerce system (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductByIdAsync(String authorization, String id, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProducts
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: category, hidden_products. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCall(String authorization, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("where", where));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPage", nextPage));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsValidateBeforeCall(String authorization, String where, Long pageSize, String nextPage, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getProducts(Async)");
        }

        return getProductsCall(authorization, where, pageSize, nextPage, fields, _callback);

    }

    /**
     * Find products in the eCommerce system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword.  If no search expression is provided, all records will be retrieved
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: category, hidden_products. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> getProducts(String authorization, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        ApiResponse<List<Product>> localVarResp = getProductsWithHttpInfo(authorization, where, pageSize, nextPage, fields);
        return localVarResp.getData();
    }

    /**
     * Find products in the eCommerce system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword.  If no search expression is provided, all records will be retrieved
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: category, hidden_products. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> getProductsWithHttpInfo(String authorization, String where, Long pageSize, String nextPage, String fields) throws ApiException {
        okhttp3.Call localVarCall = getProductsValidateBeforeCall(authorization, where, pageSize, nextPage, fields, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find products in the eCommerce system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword.  If no search expression is provided, all records will be retrieved (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field&#x3D;&#39;value&#39;). &lt;p&gt;Supported search terms: category, hidden_products. All other search criteria are ignored (optional)
     * @param pageSize The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned (optional)
     * @param nextPage The next page cursor, taken from the response header: &#x60;elements-next-page-token&#x60; (optional)
     * @param fields The fields to return on the response. Can be a single field or a comma-separated list of fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAsync(String authorization, String where, Long pageSize, String nextPage, String fields, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsValidateBeforeCall(authorization, where, pageSize, nextPage, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductById
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to update in the eCommerce system (required)
     * @param product The product object, with those fields that are to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductByIdCall(String authorization, String id, ProductPatch product, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductByIdValidateBeforeCall(String authorization, String id, ProductPatch product, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateProductById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProductById(Async)");
        }

        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling updateProductById(Async)");
        }

        return updateProductByIdCall(authorization, id, product, _callback);

    }

    /**
     * Update a product associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the product object will be updated, and those fields not provided will be left alone. Updating a product with a specified ID that does not exist will result in an error response. &lt;p&gt;&lt;strong&gt;Update supports the following fields: sku, quantity, trackQuantity, quantityDelta, warningLimit, name, price, weight, tangible, enabled, fixedShippingRateOnly, fixedShippingRate, description, wholesalePrices, compareAtPrice, productClassId&lt;/strong&gt;
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to update in the eCommerce system (required)
     * @param product The product object, with those fields that are to be updated (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public Product updateProductById(String authorization, String id, ProductPatch product) throws ApiException {
        ApiResponse<Product> localVarResp = updateProductByIdWithHttpInfo(authorization, id, product);
        return localVarResp.getData();
    }

    /**
     * Update a product associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the product object will be updated, and those fields not provided will be left alone. Updating a product with a specified ID that does not exist will result in an error response. &lt;p&gt;&lt;strong&gt;Update supports the following fields: sku, quantity, trackQuantity, quantityDelta, warningLimit, name, price, weight, tangible, enabled, fixedShippingRateOnly, fixedShippingRate, description, wholesalePrices, compareAtPrice, productClassId&lt;/strong&gt;
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to update in the eCommerce system (required)
     * @param product The product object, with those fields that are to be updated (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> updateProductByIdWithHttpInfo(String authorization, String id, ProductPatch product) throws ApiException {
        okhttp3.Call localVarCall = updateProductByIdValidateBeforeCall(authorization, id, product, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a product associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the product object will be updated, and those fields not provided will be left alone. Updating a product with a specified ID that does not exist will result in an error response. &lt;p&gt;&lt;strong&gt;Update supports the following fields: sku, quantity, trackQuantity, quantityDelta, warningLimit, name, price, weight, tangible, enabled, fixedShippingRateOnly, fixedShippingRate, description, wholesalePrices, compareAtPrice, productClassId&lt;/strong&gt; (asynchronously)
     * 
     * @param authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39; (required)
     * @param id The ID of the product to update in the eCommerce system (required)
     * @param product The product object, with those fields that are to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Everything worked as expected </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Often due to a missing request parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - An invalid element token, user secret and/or org secret provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Access to the resource by the provider is forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found - The requested resource is not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not acceptable - The response content type does not match the &#39;Accept&#39; header value </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - If a resource being created already exists </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type - The server cannot handle the requested Content-Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error - Something went wrong on the Cloud Elements server </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Provider server error - Something went wrong on the Provider or Endpoint&#39;s server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductByIdAsync(String authorization, String id, ProductPatch product, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductByIdValidateBeforeCall(authorization, id, product, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
