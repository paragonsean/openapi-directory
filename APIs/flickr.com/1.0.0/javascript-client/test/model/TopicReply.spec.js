/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlickrApiSchema);
  }
}(this, function(expect, FlickrApiSchema) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlickrApiSchema.TopicReply();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TopicReply', function() {
    it('should create an instance of TopicReply', function() {
      // uncomment below and update the code to test TopicReply
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be.a(FlickrApiSchema.TopicReply);
    });

    it('should have the property author (base name: "author")', function() {
      // uncomment below and update the code to test the property author
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property authorIsDeleted (base name: "author_is_deleted")', function() {
      // uncomment below and update the code to test the property authorIsDeleted
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property authorPathAlias (base name: "author_path_alias")', function() {
      // uncomment below and update the code to test the property authorPathAlias
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property authorname (base name: "authorname")', function() {
      // uncomment below and update the code to test the property authorname
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property canDelete (base name: "can_delete")', function() {
      // uncomment below and update the code to test the property canDelete
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property canEdit (base name: "can_edit")', function() {
      // uncomment below and update the code to test the property canEdit
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property datecreate (base name: "datecreate")', function() {
      // uncomment below and update the code to test the property datecreate
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property iconfarm (base name: "iconfarm")', function() {
      // uncomment below and update the code to test the property iconfarm
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property iconserver (base name: "iconserver")', function() {
      // uncomment below and update the code to test the property iconserver
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property isPro (base name: "is_pro")', function() {
      // uncomment below and update the code to test the property isPro
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property lastedit (base name: "lastedit")', function() {
      // uncomment below and update the code to test the property lastedit
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new FlickrApiSchema.TopicReply();
      //expect(instance).to.be();
    });

  });

}));
