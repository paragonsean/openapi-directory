/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlickrApiSchema);
  }
}(this, function(expect, FlickrApiSchema) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlickrApiSchema.Photo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Photo', function() {
    it('should create an instance of Photo', function() {
      // uncomment below and update the code to test Photo
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be.a(FlickrApiSchema.Photo);
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property dates (base name: "dates")', function() {
      // uncomment below and update the code to test the property dates
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property dateuploaded (base name: "dateuploaded")', function() {
      // uncomment below and update the code to test the property dateuploaded
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property editability (base name: "editability")', function() {
      // uncomment below and update the code to test the property editability
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property farm (base name: "farm")', function() {
      // uncomment below and update the code to test the property farm
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property isfavorite (base name: "isfavorite")', function() {
      // uncomment below and update the code to test the property isfavorite
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property media (base name: "media")', function() {
      // uncomment below and update the code to test the property media
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property originalsecret (base name: "originalsecret")', function() {
      // uncomment below and update the code to test the property originalsecret
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property people (base name: "people")', function() {
      // uncomment below and update the code to test the property people
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property publiceditability (base name: "publiceditability")', function() {
      // uncomment below and update the code to test the property publiceditability
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property rotation (base name: "rotation")', function() {
      // uncomment below and update the code to test the property rotation
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property safe (base name: "safe")', function() {
      // uncomment below and update the code to test the property safe
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property safetyLevel (base name: "safety_level")', function() {
      // uncomment below and update the code to test the property safetyLevel
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property secret (base name: "secret")', function() {
      // uncomment below and update the code to test the property secret
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property server (base name: "server")', function() {
      // uncomment below and update the code to test the property server
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property urls (base name: "urls")', function() {
      // uncomment below and update the code to test the property urls
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property usage (base name: "usage")', function() {
      // uncomment below and update the code to test the property usage
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property views (base name: "views")', function() {
      // uncomment below and update the code to test the property views
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new FlickrApiSchema.Photo();
      //expect(instance).to.be();
    });

  });

}));
