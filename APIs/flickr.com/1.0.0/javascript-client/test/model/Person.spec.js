/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlickrApiSchema);
  }
}(this, function(expect, FlickrApiSchema) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlickrApiSchema.Person();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Person', function() {
    it('should create an instance of Person', function() {
      // uncomment below and update the code to test Person
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be.a(FlickrApiSchema.Person);
    });

    it('should have the property canBuyPro (base name: "can_buy_pro")', function() {
      // uncomment below and update the code to test the property canBuyPro
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property cover (base name: "cover")', function() {
      // uncomment below and update the code to test the property cover
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property coverphoto (base name: "coverphoto")', function() {
      // uncomment below and update the code to test the property coverphoto
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property coverphotoFarm (base name: "coverphoto_farm")', function() {
      // uncomment below and update the code to test the property coverphotoFarm
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property coverphotoServer (base name: "coverphoto_server")', function() {
      // uncomment below and update the code to test the property coverphotoServer
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property disableKeyboardShortcuts (base name: "disable_keyboard_shortcuts")', function() {
      // uncomment below and update the code to test the property disableKeyboardShortcuts
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property expire (base name: "expire")', function() {
      // uncomment below and update the code to test the property expire
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property hasStats (base name: "has_stats")', function() {
      // uncomment below and update the code to test the property hasStats
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property iconfarm (base name: "iconfarm")', function() {
      // uncomment below and update the code to test the property iconfarm
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property iconserver (base name: "iconserver")', function() {
      // uncomment below and update the code to test the property iconserver
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property isAdFree (base name: "is_ad_free")', function() {
      // uncomment below and update the code to test the property isAdFree
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property ispro (base name: "ispro")', function() {
      // uncomment below and update the code to test the property ispro
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property mboxSha1sum (base name: "mbox_sha1sum")', function() {
      // uncomment below and update the code to test the property mboxSha1sum
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property mobileurl (base name: "mobileurl")', function() {
      // uncomment below and update the code to test the property mobileurl
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property nsid (base name: "nsid")', function() {
      // uncomment below and update the code to test the property nsid
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property pathAlias (base name: "path_alias")', function() {
      // uncomment below and update the code to test the property pathAlias
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property photos (base name: "photos")', function() {
      // uncomment below and update the code to test the property photos
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property photosurl (base name: "photosurl")', function() {
      // uncomment below and update the code to test the property photosurl
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property profileurl (base name: "profileurl")', function() {
      // uncomment below and update the code to test the property profileurl
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property realname (base name: "realname")', function() {
      // uncomment below and update the code to test the property realname
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property unreadMessages (base name: "unread_messages")', function() {
      // uncomment below and update the code to test the property unreadMessages
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property userSecret (base name: "user_secret")', function() {
      // uncomment below and update the code to test the property userSecret
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

    it('should have the property yintl (base name: "yintl")', function() {
      // uncomment below and update the code to test the property yintl
      //var instance = new FlickrApiSchema.Person();
      //expect(instance).to.be();
    });

  });

}));
