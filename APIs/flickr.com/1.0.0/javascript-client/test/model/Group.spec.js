/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlickrApiSchema);
  }
}(this, function(expect, FlickrApiSchema) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlickrApiSchema.Group();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Group', function() {
    it('should create an instance of Group', function() {
      // uncomment below and update the code to test Group
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be.a(FlickrApiSchema.Group);
    });

    it('should have the property blast (base name: "blast")', function() {
      // uncomment below and update the code to test the property blast
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property cover (base name: "cover")', function() {
      // uncomment below and update the code to test the property cover
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property coverphotoFarm (base name: "coverphoto_farm")', function() {
      // uncomment below and update the code to test the property coverphotoFarm
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property coverphotoServer (base name: "coverphoto_server")', function() {
      // uncomment below and update the code to test the property coverphotoServer
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property coverphotoUrl (base name: "coverphoto_url")', function() {
      // uncomment below and update the code to test the property coverphotoUrl
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property iconfarm (base name: "iconfarm")', function() {
      // uncomment below and update the code to test the property iconfarm
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property iconserver (base name: "iconserver")', function() {
      // uncomment below and update the code to test the property iconserver
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property isAdmin (base name: "is_admin")', function() {
      // uncomment below and update the code to test the property isAdmin
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property isMember (base name: "is_member")', function() {
      // uncomment below and update the code to test the property isMember
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property isModerator (base name: "is_moderator")', function() {
      // uncomment below and update the code to test the property isModerator
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property ispoolmoderated (base name: "ispoolmoderated")', function() {
      // uncomment below and update the code to test the property ispoolmoderated
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property lang (base name: "lang")', function() {
      // uncomment below and update the code to test the property lang
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property members (base name: "members")', function() {
      // uncomment below and update the code to test the property members
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property pathAlias (base name: "path_alias")', function() {
      // uncomment below and update the code to test the property pathAlias
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property poolCount (base name: "pool_count")', function() {
      // uncomment below and update the code to test the property poolCount
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property poolRows (base name: "pool_rows")', function() {
      // uncomment below and update the code to test the property poolRows
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property privacy (base name: "privacy")', function() {
      // uncomment below and update the code to test the property privacy
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property restrictions (base name: "restrictions")', function() {
      // uncomment below and update the code to test the property restrictions
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property roles (base name: "roles")', function() {
      // uncomment below and update the code to test the property roles
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property rules (base name: "rules")', function() {
      // uncomment below and update the code to test the property rules
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property throttle (base name: "throttle")', function() {
      // uncomment below and update the code to test the property throttle
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

    it('should have the property topicCount (base name: "topic_count")', function() {
      // uncomment below and update the code to test the property topicCount
      //var instance = new FlickrApiSchema.Group();
      //expect(instance).to.be();
    });

  });

}));
