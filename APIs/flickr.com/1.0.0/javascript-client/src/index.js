/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Album from './model/Album';
import ContextPhoto from './model/ContextPhoto';
import ContextPhotos from './model/ContextPhotos';
import Cover from './model/Cover';
import Echo200Response from './model/Echo200Response';
import GetAlbumByID200Response from './model/GetAlbumByID200Response';
import GetAlbumsByPersonID200Response from './model/GetAlbumsByPersonID200Response';
import GetFavoritesByPersonID200Response from './model/GetFavoritesByPersonID200Response';
import GetFavoritesContextByID200Response from './model/GetFavoritesContextByID200Response';
import GetFavoritesContextByID200ResponseCount from './model/GetFavoritesContextByID200ResponseCount';
import GetGalleryPhotosByID200Response from './model/GetGalleryPhotosByID200Response';
import GetGroupByID200Response from './model/GetGroupByID200Response';
import GetGroupDiscussionsByID200Response from './model/GetGroupDiscussionsByID200Response';
import GetGroupTopicByID200Response from './model/GetGroupTopicByID200Response';
import GetGroupTopicRepliesByID200Response from './model/GetGroupTopicRepliesByID200Response';
import GetLicenseByID200Response from './model/GetLicenseByID200Response';
import GetLicenseByID200ResponseLicenses from './model/GetLicenseByID200ResponseLicenses';
import GetLicenseByID200ResponseLicensesLicenseInner from './model/GetLicenseByID200ResponseLicensesLicenseInner';
import GetPersonByID200Response from './model/GetPersonByID200Response';
import GetPhotoByID200Response from './model/GetPhotoByID200Response';
import GetPhotoExifByID200Response from './model/GetPhotoExifByID200Response';
import GetPhotoExifByID200ResponsePhoto from './model/GetPhotoExifByID200ResponsePhoto';
import GetPhotoExifByID200ResponsePhotoExifInner from './model/GetPhotoExifByID200ResponsePhotoExifInner';
import GetPhotoSizesByID200Response from './model/GetPhotoSizesByID200Response';
import GetPhotoSizesByID200ResponseSizes from './model/GetPhotoSizesByID200ResponseSizes';
import Group from './model/Group';
import GroupBlast from './model/GroupBlast';
import GroupRestrictions from './model/GroupRestrictions';
import GroupRoles from './model/GroupRoles';
import GroupThrottle from './model/GroupThrottle';
import Note from './model/Note';
import Owner from './model/Owner';
import Person from './model/Person';
import PersonPhotos from './model/PersonPhotos';
import PersonTimezone from './model/PersonTimezone';
import Photo from './model/Photo';
import PhotoDates from './model/PhotoDates';
import PhotoEditability from './model/PhotoEditability';
import PhotoNotes from './model/PhotoNotes';
import PhotoPeople from './model/PhotoPeople';
import PhotoPermissions from './model/PhotoPermissions';
import PhotoTags from './model/PhotoTags';
import PhotoURLs from './model/PhotoURLs';
import PhotoUrls from './model/PhotoUrls';
import PhotoUsage from './model/PhotoUsage';
import PhotoVisibility from './model/PhotoVisibility';
import Size from './model/Size';
import Tag from './model/Tag';
import Topic from './model/Topic';
import TopicReply from './model/TopicReply';
import URL from './model/URL';
import PublicApi from './api/PublicApi';


/**
* A subset of Flickr&#39;s API defined in Swagger format..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FlickrApiSchema = require('index'); // See note below*.
* var xxxSvc = new FlickrApiSchema.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FlickrApiSchema.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FlickrApiSchema.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FlickrApiSchema.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Album model constructor.
     * @property {module:model/Album}
     */
    Album,

    /**
     * The ContextPhoto model constructor.
     * @property {module:model/ContextPhoto}
     */
    ContextPhoto,

    /**
     * The ContextPhotos model constructor.
     * @property {module:model/ContextPhotos}
     */
    ContextPhotos,

    /**
     * The Cover model constructor.
     * @property {module:model/Cover}
     */
    Cover,

    /**
     * The Echo200Response model constructor.
     * @property {module:model/Echo200Response}
     */
    Echo200Response,

    /**
     * The GetAlbumByID200Response model constructor.
     * @property {module:model/GetAlbumByID200Response}
     */
    GetAlbumByID200Response,

    /**
     * The GetAlbumsByPersonID200Response model constructor.
     * @property {module:model/GetAlbumsByPersonID200Response}
     */
    GetAlbumsByPersonID200Response,

    /**
     * The GetFavoritesByPersonID200Response model constructor.
     * @property {module:model/GetFavoritesByPersonID200Response}
     */
    GetFavoritesByPersonID200Response,

    /**
     * The GetFavoritesContextByID200Response model constructor.
     * @property {module:model/GetFavoritesContextByID200Response}
     */
    GetFavoritesContextByID200Response,

    /**
     * The GetFavoritesContextByID200ResponseCount model constructor.
     * @property {module:model/GetFavoritesContextByID200ResponseCount}
     */
    GetFavoritesContextByID200ResponseCount,

    /**
     * The GetGalleryPhotosByID200Response model constructor.
     * @property {module:model/GetGalleryPhotosByID200Response}
     */
    GetGalleryPhotosByID200Response,

    /**
     * The GetGroupByID200Response model constructor.
     * @property {module:model/GetGroupByID200Response}
     */
    GetGroupByID200Response,

    /**
     * The GetGroupDiscussionsByID200Response model constructor.
     * @property {module:model/GetGroupDiscussionsByID200Response}
     */
    GetGroupDiscussionsByID200Response,

    /**
     * The GetGroupTopicByID200Response model constructor.
     * @property {module:model/GetGroupTopicByID200Response}
     */
    GetGroupTopicByID200Response,

    /**
     * The GetGroupTopicRepliesByID200Response model constructor.
     * @property {module:model/GetGroupTopicRepliesByID200Response}
     */
    GetGroupTopicRepliesByID200Response,

    /**
     * The GetLicenseByID200Response model constructor.
     * @property {module:model/GetLicenseByID200Response}
     */
    GetLicenseByID200Response,

    /**
     * The GetLicenseByID200ResponseLicenses model constructor.
     * @property {module:model/GetLicenseByID200ResponseLicenses}
     */
    GetLicenseByID200ResponseLicenses,

    /**
     * The GetLicenseByID200ResponseLicensesLicenseInner model constructor.
     * @property {module:model/GetLicenseByID200ResponseLicensesLicenseInner}
     */
    GetLicenseByID200ResponseLicensesLicenseInner,

    /**
     * The GetPersonByID200Response model constructor.
     * @property {module:model/GetPersonByID200Response}
     */
    GetPersonByID200Response,

    /**
     * The GetPhotoByID200Response model constructor.
     * @property {module:model/GetPhotoByID200Response}
     */
    GetPhotoByID200Response,

    /**
     * The GetPhotoExifByID200Response model constructor.
     * @property {module:model/GetPhotoExifByID200Response}
     */
    GetPhotoExifByID200Response,

    /**
     * The GetPhotoExifByID200ResponsePhoto model constructor.
     * @property {module:model/GetPhotoExifByID200ResponsePhoto}
     */
    GetPhotoExifByID200ResponsePhoto,

    /**
     * The GetPhotoExifByID200ResponsePhotoExifInner model constructor.
     * @property {module:model/GetPhotoExifByID200ResponsePhotoExifInner}
     */
    GetPhotoExifByID200ResponsePhotoExifInner,

    /**
     * The GetPhotoSizesByID200Response model constructor.
     * @property {module:model/GetPhotoSizesByID200Response}
     */
    GetPhotoSizesByID200Response,

    /**
     * The GetPhotoSizesByID200ResponseSizes model constructor.
     * @property {module:model/GetPhotoSizesByID200ResponseSizes}
     */
    GetPhotoSizesByID200ResponseSizes,

    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group,

    /**
     * The GroupBlast model constructor.
     * @property {module:model/GroupBlast}
     */
    GroupBlast,

    /**
     * The GroupRestrictions model constructor.
     * @property {module:model/GroupRestrictions}
     */
    GroupRestrictions,

    /**
     * The GroupRoles model constructor.
     * @property {module:model/GroupRoles}
     */
    GroupRoles,

    /**
     * The GroupThrottle model constructor.
     * @property {module:model/GroupThrottle}
     */
    GroupThrottle,

    /**
     * The Note model constructor.
     * @property {module:model/Note}
     */
    Note,

    /**
     * The Owner model constructor.
     * @property {module:model/Owner}
     */
    Owner,

    /**
     * The Person model constructor.
     * @property {module:model/Person}
     */
    Person,

    /**
     * The PersonPhotos model constructor.
     * @property {module:model/PersonPhotos}
     */
    PersonPhotos,

    /**
     * The PersonTimezone model constructor.
     * @property {module:model/PersonTimezone}
     */
    PersonTimezone,

    /**
     * The Photo model constructor.
     * @property {module:model/Photo}
     */
    Photo,

    /**
     * The PhotoDates model constructor.
     * @property {module:model/PhotoDates}
     */
    PhotoDates,

    /**
     * The PhotoEditability model constructor.
     * @property {module:model/PhotoEditability}
     */
    PhotoEditability,

    /**
     * The PhotoNotes model constructor.
     * @property {module:model/PhotoNotes}
     */
    PhotoNotes,

    /**
     * The PhotoPeople model constructor.
     * @property {module:model/PhotoPeople}
     */
    PhotoPeople,

    /**
     * The PhotoPermissions model constructor.
     * @property {module:model/PhotoPermissions}
     */
    PhotoPermissions,

    /**
     * The PhotoTags model constructor.
     * @property {module:model/PhotoTags}
     */
    PhotoTags,

    /**
     * The PhotoURLs model constructor.
     * @property {module:model/PhotoURLs}
     */
    PhotoURLs,

    /**
     * The PhotoUrls model constructor.
     * @property {module:model/PhotoUrls}
     */
    PhotoUrls,

    /**
     * The PhotoUsage model constructor.
     * @property {module:model/PhotoUsage}
     */
    PhotoUsage,

    /**
     * The PhotoVisibility model constructor.
     * @property {module:model/PhotoVisibility}
     */
    PhotoVisibility,

    /**
     * The Size model constructor.
     * @property {module:model/Size}
     */
    Size,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The Topic model constructor.
     * @property {module:model/Topic}
     */
    Topic,

    /**
     * The TopicReply model constructor.
     * @property {module:model/TopicReply}
     */
    TopicReply,

    /**
     * The URL model constructor.
     * @property {module:model/URL}
     */
    URL,

    /**
    * The PublicApi service constructor.
    * @property {module:api/PublicApi}
    */
    PublicApi
};
