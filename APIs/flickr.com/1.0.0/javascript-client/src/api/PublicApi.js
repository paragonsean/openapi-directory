/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Echo200Response from '../model/Echo200Response';
import GetAlbumByID200Response from '../model/GetAlbumByID200Response';
import GetAlbumsByPersonID200Response from '../model/GetAlbumsByPersonID200Response';
import GetFavoritesByPersonID200Response from '../model/GetFavoritesByPersonID200Response';
import GetFavoritesContextByID200Response from '../model/GetFavoritesContextByID200Response';
import GetGalleryPhotosByID200Response from '../model/GetGalleryPhotosByID200Response';
import GetGroupByID200Response from '../model/GetGroupByID200Response';
import GetGroupDiscussionsByID200Response from '../model/GetGroupDiscussionsByID200Response';
import GetGroupTopicByID200Response from '../model/GetGroupTopicByID200Response';
import GetGroupTopicRepliesByID200Response from '../model/GetGroupTopicRepliesByID200Response';
import GetLicenseByID200Response from '../model/GetLicenseByID200Response';
import GetPersonByID200Response from '../model/GetPersonByID200Response';
import GetPhotoByID200Response from '../model/GetPhotoByID200Response';
import GetPhotoExifByID200Response from '../model/GetPhotoExifByID200Response';
import GetPhotoSizesByID200Response from '../model/GetPhotoSizesByID200Response';

/**
* Public service.
* @module api/PublicApi
* @version 1.0.0
*/
export default class PublicApi {

    /**
    * Constructs a new PublicApi. 
    * @alias module:api/PublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the echo operation.
     * @callback module:api/PublicApi~echoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Echo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Echos the input parameters back in the response
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [echo] 
     * @param {module:api/PublicApi~echoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Echo200Response}
     */
    echo(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling echo");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'echo': opts['echo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Echo200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.test.echo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessToken operation.
     * @callback module:api/PublicApi~getAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an access token
     * @param {String} oauthConsumerKey 
     * @param {String} oauthNonce 
     * @param {String} oauthTimestamp 
     * @param {String} oauthSignatureMethod 
     * @param {String} oauthVersion 
     * @param {String} oauthSignature 
     * @param {String} oauthVerifier 
     * @param {String} oauthToken 
     * @param {module:api/PublicApi~getAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getAccessToken(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken, callback) {
      let postBody = null;
      // verify the required parameter 'oauthConsumerKey' is set
      if (oauthConsumerKey === undefined || oauthConsumerKey === null) {
        throw new Error("Missing the required parameter 'oauthConsumerKey' when calling getAccessToken");
      }
      // verify the required parameter 'oauthNonce' is set
      if (oauthNonce === undefined || oauthNonce === null) {
        throw new Error("Missing the required parameter 'oauthNonce' when calling getAccessToken");
      }
      // verify the required parameter 'oauthTimestamp' is set
      if (oauthTimestamp === undefined || oauthTimestamp === null) {
        throw new Error("Missing the required parameter 'oauthTimestamp' when calling getAccessToken");
      }
      // verify the required parameter 'oauthSignatureMethod' is set
      if (oauthSignatureMethod === undefined || oauthSignatureMethod === null) {
        throw new Error("Missing the required parameter 'oauthSignatureMethod' when calling getAccessToken");
      }
      // verify the required parameter 'oauthVersion' is set
      if (oauthVersion === undefined || oauthVersion === null) {
        throw new Error("Missing the required parameter 'oauthVersion' when calling getAccessToken");
      }
      // verify the required parameter 'oauthSignature' is set
      if (oauthSignature === undefined || oauthSignature === null) {
        throw new Error("Missing the required parameter 'oauthSignature' when calling getAccessToken");
      }
      // verify the required parameter 'oauthVerifier' is set
      if (oauthVerifier === undefined || oauthVerifier === null) {
        throw new Error("Missing the required parameter 'oauthVerifier' when calling getAccessToken");
      }
      // verify the required parameter 'oauthToken' is set
      if (oauthToken === undefined || oauthToken === null) {
        throw new Error("Missing the required parameter 'oauthToken' when calling getAccessToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'oauth_consumer_key': oauthConsumerKey,
        'oauth_nonce': oauthNonce,
        'oauth_timestamp': oauthTimestamp,
        'oauth_signature_method': oauthSignatureMethod,
        'oauth_version': oauthVersion,
        'oauth_signature': oauthSignature,
        'oauth_verifier': oauthVerifier,
        'oauth_token': oauthToken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/oauth/access_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumByID operation.
     * @callback module:api/PublicApi~getAlbumByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAlbumByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of photos in an album.
     * @param {String} apiKey 
     * @param {String} photosetId 
     * @param {module:api/PublicApi~getAlbumByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAlbumByID200Response}
     */
    getAlbumByID(apiKey, photosetId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getAlbumByID");
      }
      // verify the required parameter 'photosetId' is set
      if (photosetId === undefined || photosetId === null) {
        throw new Error("Missing the required parameter 'photosetId' when calling getAlbumByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photoset_id': photosetId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAlbumByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photosets.getPhotos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumContextByID operation.
     * @callback module:api/PublicApi~getAlbumContextByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesContextByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns next and previous photos for a photo in a set
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {Object} opts Optional parameters
     * @param {String} [photosetId] 
     * @param {module:api/PublicApi~getAlbumContextByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesContextByID200Response}
     */
    getAlbumContextByID(apiKey, photoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getAlbumContextByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getAlbumContextByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId,
        'photoset_id': opts['photosetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesContextByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photosets.getContext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumsByPersonID operation.
     * @callback module:api/PublicApi~getAlbumsByPersonIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAlbumsByPersonID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the albums belonging to the specified user
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/PublicApi~getAlbumsByPersonIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAlbumsByPersonID200Response}
     */
    getAlbumsByPersonID(apiKey, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getAlbumsByPersonID");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumsByPersonID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'user_id': userId,
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAlbumsByPersonID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photosets.getList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFavoritesByPersonID operation.
     * @callback module:api/PublicApi~getFavoritesByPersonIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesByPersonID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the user's favorite photos. Only photos which the calling user has permission to see are returned.
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [minFaveDate] 
     * @param {Number} [maxFaveDate] 
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/PublicApi~getFavoritesByPersonIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesByPersonID200Response}
     */
    getFavoritesByPersonID(apiKey, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getFavoritesByPersonID");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFavoritesByPersonID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'user_id': userId,
        'min_fave_date': opts['minFaveDate'],
        'max_fave_date': opts['maxFaveDate'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesByPersonID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.favorites.getList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFavoritesContextByID operation.
     * @callback module:api/PublicApi~getFavoritesContextByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesContextByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns next and previous favorites for a photo in a user's favorites
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {module:api/PublicApi~getFavoritesContextByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesContextByID200Response}
     */
    getFavoritesContextByID(apiKey, photoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getFavoritesContextByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getFavoritesContextByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId,
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesContextByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.favorites.getContext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGalleryPhotosByID operation.
     * @callback module:api/PublicApi~getGalleryPhotosByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGalleryPhotosByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of photos in a gallery.
     * @param {String} apiKey 
     * @param {String} galleryId 
     * @param {module:api/PublicApi~getGalleryPhotosByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGalleryPhotosByID200Response}
     */
    getGalleryPhotosByID(apiKey, galleryId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getGalleryPhotosByID");
      }
      // verify the required parameter 'galleryId' is set
      if (galleryId === undefined || galleryId === null) {
        throw new Error("Missing the required parameter 'galleryId' when calling getGalleryPhotosByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'gallery_id': galleryId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGalleryPhotosByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.galleries.getPhotos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupByID operation.
     * @callback module:api/PublicApi~getGroupByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a group
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] 
     * @param {String} [groupPathAlias] 
     * @param {String} [lang] 
     * @param {module:api/PublicApi~getGroupByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupByID200Response}
     */
    getGroupByID(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getGroupByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'group_id': opts['groupId'],
        'group_path_alias': opts['groupPathAlias'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGroupByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.groups.getInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupDiscussionsByID operation.
     * @callback module:api/PublicApi~getGroupDiscussionsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupDiscussionsByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of discussion topics in a group.
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] 
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/PublicApi~getGroupDiscussionsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupDiscussionsByID200Response}
     */
    getGroupDiscussionsByID(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getGroupDiscussionsByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'group_id': opts['groupId'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGroupDiscussionsByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.groups.discuss.topics.getList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupPhotosByID operation.
     * @callback module:api/PublicApi~getGroupPhotosByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGalleryPhotosByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of pool photos for a given group
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] 
     * @param {module:api/PublicApi~getGroupPhotosByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGalleryPhotosByID200Response}
     */
    getGroupPhotosByID(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getGroupPhotosByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'group_id': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGalleryPhotosByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.groups.pools.getPhotos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupTopicByID operation.
     * @callback module:api/PublicApi~getGroupTopicByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupTopicByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a group discussion topic
     * @param {String} apiKey 
     * @param {String} topicId 
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] 
     * @param {module:api/PublicApi~getGroupTopicByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupTopicByID200Response}
     */
    getGroupTopicByID(apiKey, topicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getGroupTopicByID");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling getGroupTopicByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'group_id': opts['groupId'],
        'topic_id': topicId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGroupTopicByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.groups.discuss.topics.getInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupTopicRepliesByID operation.
     * @callback module:api/PublicApi~getGroupTopicRepliesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGroupTopicRepliesByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information on a group topic reply
     * @param {String} apiKey 
     * @param {String} topicId 
     * @param {String} replyId 
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] 
     * @param {module:api/PublicApi~getGroupTopicRepliesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGroupTopicRepliesByID200Response}
     */
    getGroupTopicRepliesByID(apiKey, topicId, replyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getGroupTopicRepliesByID");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling getGroupTopicRepliesByID");
      }
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling getGroupTopicRepliesByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'group_id': opts['groupId'],
        'topic_id': topicId,
        'reply_id': replyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGroupTopicRepliesByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.groups.discuss.replies.getInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseByID operation.
     * @callback module:api/PublicApi~getLicenseByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLicenseByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a list of available photo licenses for Flickr
     * @param {String} apiKey 
     * @param {module:api/PublicApi~getLicenseByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLicenseByID200Response}
     */
    getLicenseByID(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getLicenseByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLicenseByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photos.licenses.getInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaByPersonID operation.
     * @callback module:api/PublicApi~getMediaByPersonIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesByPersonID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return photos from the given user's photostream
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [safeSearch] 
     * @param {Number} [minUploadDate] 
     * @param {Number} [maxUploadDate] 
     * @param {Number} [minTakenDate] 
     * @param {Number} [maxTakenDate] 
     * @param {Number} [contentType] 
     * @param {Number} [privacyFilter] 
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/PublicApi~getMediaByPersonIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesByPersonID200Response}
     */
    getMediaByPersonID(apiKey, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getMediaByPersonID");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getMediaByPersonID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'user_id': userId,
        'safe_search': opts['safeSearch'],
        'min_upload_date': opts['minUploadDate'],
        'max_upload_date': opts['maxUploadDate'],
        'min_taken_date': opts['minTakenDate'],
        'max_taken_date': opts['maxTakenDate'],
        'content_type': opts['contentType'],
        'privacy_filter': opts['privacyFilter'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesByPersonID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.people.getPhotos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaBySearch operation.
     * @callback module:api/PublicApi~getMediaBySearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesByPersonID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of photos matching some criteria.
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [text] A free text search. Photos who's title, description or tags contain the text will be returned. You can exclude results that match a term by prepending it with a - character.
     * @param {String} [tags] A comma-delimited list of tags. Photos with one or more of the tags listed will be returned. You can exclude results that match a term by prepending it with a - character.
     * @param {String} [userId] The NSID of the user who's photo to search. If this parameter isn't passed then everybody's public photos will be searched. A value of \"me\" will search against the calling user's photos for authenticated calls.
     * @param {String} [minUploadDate] Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.
     * @param {String} [maxUploadDate] Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.
     * @param {String} [minTakenDate] Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.
     * @param {String} [maxTakenDate] Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.
     * @param {String} [license] The license id for photos (for possible values see the flickr.photos.licenses.getInfo method). Multiple licenses may be comma-separated.
     * @param {String} [sort] The order in which to sort returned photos. Deafults to date-posted-desc (unless you are doing a radial geo query, in which case the default sorting is by ascending distance from the point specified). The possible values are:   date-posted-asc,   date-posted-desc,   date-taken-asc,   date-taken-desc,   interestingness-desc,   interestingness-asc, and   relevance. 
     * @param {Number} [privacyFilter] Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are:,   1: public photos,   2: private photos visible to friends,   3: private photos visible to family,   4: private photos visible to friends & family,   5: completely private photos 
     * @param {String} [bbox] A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched.
     * @param {String} [accuracy] Recorded accuracy level of the location information. Current range is 1-16:   World level is 1   Country is ~3   Region is ~6   City is ~11   Street is ~16 
     * @param {Number} [safeSearch] Safe search setting:   1: for safe,   2: for moderate,   3: for restricted 
     * @param {Number} [contentType] Content Type setting:   1: photos only.   2: screenshots only.   3: 'other' only.   4: photos and screenshots.   5: screenshots and 'other'.   6: photos and 'other'.   7: photos, screenshots, and 'other' (all). 
     * @param {String} [machineTags] Aside from passing in a fully formed machine tag, there is a special syntax for searching on specific properties : Find photos using the 'dc' namespace : \"machine_tags\" => \"dc:\" Find photos with a title in the 'dc' namespace : \"machine_tags\" => \"dc:title=\" Find photos titled \"mr. camera\" in the 'dc' namespace : \"machine_tags\" => \"dc:title=\\\"mr. camera\\\" Find photos whose value is \"mr. camera\" : \"machine_tags\" => \"*:*=\\\"mr. camera\\\"\" Find photos that have a title, in any namespace : \"machine_tags\" => \"*:title=\" Find photos that have a title, in any namespace, whose value is \"mr. camera\" : \"machine_tags\" => \"*:title=\\\"mr. camera\\\"\" Find photos, in the 'dc' namespace whose value is \"mr. camera\" : \"machine_tags\" => \"dc:*=\\\"mr. camera\\\"\" Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. \"AND\" queries are limited to (16) machine tags. \"OR\" queries are limited to (8). 
     * @param {String} [machineTagMode] Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified.
     * @param {String} [groupId] The id of a group who's pool to search. If specified, only matching photos posted to the group's pool will be returned.
     * @param {String} [contacts] Search your contacts. Either 'all' or 'ff' for just friends and family. (Experimental)
     * @param {String} [woeId] A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present).
     * @param {String} [placeId] A Flickr place id. (not used if bbox argument is present). Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \"parameterless searches\" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future). 
     * @param {String} [media] Filter results by media type. Possible values are all (default), photos or videos
     * @param {String} [hasGeo] Any photo that has been geotagged, or if the value is \"0\" any photo that has not been geotagged. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \"parameterless searches\" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future). 
     * @param {String} [geoContext] Geo context is a numeric value representing the photo's geotagginess beyond latitude and longitude. For example, you may wish to search for photos that were taken \"indoors\" or \"outdoors\". The current list of context IDs is: 0, not defined. 1, indoors. 2, outdoors. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \"parameterless searches\" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future). 
     * @param {String} [lat] A valid latitude, in decimal format, for doing radial geo queries. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \"parameterless searches\" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future). 
     * @param {String} [lon] A valid longitude, in decimal format, for doing radial geo queries. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \"parameterless searches\" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future). 
     * @param {Number} [radius] A valid radius used for geo queries, greater than zero and less than 20 miles (or 32 kilometers), for use with point-based geo queries. The default value is 5 (km).
     * @param {String} [radiusUnits] The unit of measure when doing radial geo queries. Valid options are \"mi\" (miles) and \"km\" (kilometers). The default is \"km\".
     * @param {Boolean} [isCommons] Limit the scope of the search to only photos that are part of the Flickr Commons project. Default is false.
     * @param {Boolean} [inGallery] Limit the scope of the search to only photos that are in a gallery? Default is false, search all photos.
     * @param {Boolean} [isGetty] Limit the scope of the search to only photos that are for sale on Getty. Default is false.
     * @param {Number} [perPage] Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.
     * @param {Number} [page] The page of results to return. If this argument is omitted, it defaults to 1.
     * @param {module:api/PublicApi~getMediaBySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesByPersonID200Response}
     */
    getMediaBySearch(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getMediaBySearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'text': opts['text'],
        'tags': opts['tags'],
        'user_id': opts['userId'],
        'min_upload_date': opts['minUploadDate'],
        'max_upload_date': opts['maxUploadDate'],
        'min_taken_date': opts['minTakenDate'],
        'max_taken_date': opts['maxTakenDate'],
        'license': opts['license'],
        'sort': opts['sort'],
        'privacy_filter': opts['privacyFilter'],
        'bbox': opts['bbox'],
        'accuracy': opts['accuracy'],
        'safe_search': opts['safeSearch'],
        'content_type': opts['contentType'],
        'machine_tags': opts['machineTags'],
        'machine_tag_mode': opts['machineTagMode'],
        'group_id': opts['groupId'],
        'contacts': opts['contacts'],
        'woe_id': opts['woeId'],
        'place_id': opts['placeId'],
        'media': opts['media'],
        'has_geo': opts['hasGeo'],
        'geo_context': opts['geoContext'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'radius_units': opts['radiusUnits'],
        'is_commons': opts['isCommons'],
        'in_gallery': opts['inGallery'],
        'is_getty': opts['isGetty'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesByPersonID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photos.search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonByID operation.
     * @callback module:api/PublicApi~getPersonByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPersonByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a person
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {module:api/PublicApi~getPersonByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPersonByID200Response}
     */
    getPersonByID(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPersonByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPersonByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.people.getInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhotoByID operation.
     * @callback module:api/PublicApi~getPhotoByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPhotoByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a photo
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {module:api/PublicApi~getPhotoByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPhotoByID200Response}
     */
    getPhotoByID(apiKey, photoId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPhotoByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getPhotoByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPhotoByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photos.getInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhotoExifByID operation.
     * @callback module:api/PublicApi~getPhotoExifByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPhotoExifByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo.
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {Object} opts Optional parameters
     * @param {String} [secret] 
     * @param {module:api/PublicApi~getPhotoExifByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPhotoExifByID200Response}
     */
    getPhotoExifByID(apiKey, photoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPhotoExifByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getPhotoExifByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId,
        'secret': opts['secret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPhotoExifByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photos.getExif', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhotoSizesByID operation.
     * @callback module:api/PublicApi~getPhotoSizesByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPhotoSizesByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns photo sizes
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {module:api/PublicApi~getPhotoSizesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPhotoSizesByID200Response}
     */
    getPhotoSizesByID(apiKey, photoId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPhotoSizesByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getPhotoSizesByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPhotoSizesByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photos.getSizes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhotolistContextByID operation.
     * @callback module:api/PublicApi~getPhotolistContextByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesContextByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns next and previous photos in a photo list
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {String} photolistId 
     * @param {module:api/PublicApi~getPhotolistContextByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesContextByID200Response}
     */
    getPhotolistContextByID(apiKey, photoId, photolistId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPhotolistContextByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getPhotolistContextByID");
      }
      // verify the required parameter 'photolistId' is set
      if (photolistId === undefined || photolistId === null) {
        throw new Error("Missing the required parameter 'photolistId' when calling getPhotolistContextByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId,
        'photolist_id': photolistId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesContextByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photolist.getContext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhotostreamContextByID operation.
     * @callback module:api/PublicApi~getPhotostreamContextByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesContextByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns next and previous photos for a photo in a photostream
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {module:api/PublicApi~getPhotostreamContextByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesContextByID200Response}
     */
    getPhotostreamContextByID(apiKey, photoId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPhotostreamContextByID");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling getPhotostreamContextByID");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesContextByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.photos.getContext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequestToken operation.
     * @callback module:api/PublicApi~getRequestTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an oauth token and oauth token secret
     * @param {String} oauthConsumerKey 
     * @param {String} oauthNonce 
     * @param {String} oauthTimestamp 
     * @param {String} oauthSignatureMethod 
     * @param {String} oauthVersion 
     * @param {String} oauthSignature 
     * @param {String} oauthCallback 
     * @param {module:api/PublicApi~getRequestTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getRequestToken(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback, callback) {
      let postBody = null;
      // verify the required parameter 'oauthConsumerKey' is set
      if (oauthConsumerKey === undefined || oauthConsumerKey === null) {
        throw new Error("Missing the required parameter 'oauthConsumerKey' when calling getRequestToken");
      }
      // verify the required parameter 'oauthNonce' is set
      if (oauthNonce === undefined || oauthNonce === null) {
        throw new Error("Missing the required parameter 'oauthNonce' when calling getRequestToken");
      }
      // verify the required parameter 'oauthTimestamp' is set
      if (oauthTimestamp === undefined || oauthTimestamp === null) {
        throw new Error("Missing the required parameter 'oauthTimestamp' when calling getRequestToken");
      }
      // verify the required parameter 'oauthSignatureMethod' is set
      if (oauthSignatureMethod === undefined || oauthSignatureMethod === null) {
        throw new Error("Missing the required parameter 'oauthSignatureMethod' when calling getRequestToken");
      }
      // verify the required parameter 'oauthVersion' is set
      if (oauthVersion === undefined || oauthVersion === null) {
        throw new Error("Missing the required parameter 'oauthVersion' when calling getRequestToken");
      }
      // verify the required parameter 'oauthSignature' is set
      if (oauthSignature === undefined || oauthSignature === null) {
        throw new Error("Missing the required parameter 'oauthSignature' when calling getRequestToken");
      }
      // verify the required parameter 'oauthCallback' is set
      if (oauthCallback === undefined || oauthCallback === null) {
        throw new Error("Missing the required parameter 'oauthCallback' when calling getRequestToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'oauth_consumer_key': oauthConsumerKey,
        'oauth_nonce': oauthNonce,
        'oauth_timestamp': oauthTimestamp,
        'oauth_signature_method': oauthSignatureMethod,
        'oauth_version': oauthVersion,
        'oauth_signature': oauthSignature,
        'oauth_callback': oauthCallback
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/oauth/request_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restmethodflickrGroupsPoolsGetContextGet operation.
     * @callback module:api/PublicApi~restmethodflickrGroupsPoolsGetContextGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesContextByID200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns next and previous photos for a photo in a group pool
     * @param {String} apiKey 
     * @param {String} photoId 
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] 
     * @param {module:api/PublicApi~restmethodflickrGroupsPoolsGetContextGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesContextByID200Response}
     */
    restmethodflickrGroupsPoolsGetContextGet(apiKey, photoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling restmethodflickrGroupsPoolsGetContextGet");
      }
      // verify the required parameter 'photoId' is set
      if (photoId === undefined || photoId === null) {
        throw new Error("Missing the required parameter 'photoId' when calling restmethodflickrGroupsPoolsGetContextGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey,
        'photo_id': photoId,
        'group_id': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesContextByID200Response;
      return this.apiClient.callApi(
        '/rest?method=flickr.groups.pools.getContext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadPhoto operation.
     * @callback module:api/PublicApi~uploadPhotoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a new photo to Flickr
     * @param {String} apiKey 
     * @param {File} photo 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [contentType] 
     * @param {String} [description] 
     * @param {module:model/String} [hidden] 
     * @param {module:model/String} [isFamily] 
     * @param {module:model/String} [isFriend] 
     * @param {module:model/String} [isPublic] 
     * @param {module:model/String} [safetyLevel] 
     * @param {String} [tags] 
     * @param {String} [title] 
     * @param {module:api/PublicApi~uploadPhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadPhoto(apiKey, photo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling uploadPhoto");
      }
      // verify the required parameter 'photo' is set
      if (photo === undefined || photo === null) {
        throw new Error("Missing the required parameter 'photo' when calling uploadPhoto");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_key': apiKey,
        'content_type': opts['contentType'],
        'description': opts['description'],
        'hidden': opts['hidden'],
        'is_family': opts['isFamily'],
        'is_friend': opts['isFriend'],
        'is_public': opts['isPublic'],
        'photo': photo,
        'safety_level': opts['safetyLevel'],
        'tags': opts['tags'],
        'title': opts['title']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
