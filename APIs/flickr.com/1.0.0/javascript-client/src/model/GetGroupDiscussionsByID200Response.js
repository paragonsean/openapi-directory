/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Topic from './Topic';

/**
 * The GetGroupDiscussionsByID200Response model module.
 * @module model/GetGroupDiscussionsByID200Response
 * @version 1.0.0
 */
class GetGroupDiscussionsByID200Response {
    /**
     * Constructs a new <code>GetGroupDiscussionsByID200Response</code>.
     * @alias module:model/GetGroupDiscussionsByID200Response
     */
    constructor() { 
        
        GetGroupDiscussionsByID200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetGroupDiscussionsByID200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetGroupDiscussionsByID200Response} obj Optional instance to populate.
     * @return {module:model/GetGroupDiscussionsByID200Response} The populated <code>GetGroupDiscussionsByID200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetGroupDiscussionsByID200Response();

            if (data.hasOwnProperty('iconfarm')) {
                obj['iconfarm'] = ApiClient.convertToType(data['iconfarm'], 'Number');
            }
            if (data.hasOwnProperty('iconserver')) {
                obj['iconserver'] = ApiClient.convertToType(data['iconserver'], 'Number');
            }
            if (data.hasOwnProperty('ispoolmoderated')) {
                obj['ispoolmoderated'] = ApiClient.convertToType(data['ispoolmoderated'], 'Boolean');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'Number');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = ApiClient.convertToType(data['privacy'], 'Number');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [Topic]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetGroupDiscussionsByID200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetGroupDiscussionsByID200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                Topic.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} iconfarm
 */
GetGroupDiscussionsByID200Response.prototype['iconfarm'] = undefined;

/**
 * @member {Number} iconserver
 */
GetGroupDiscussionsByID200Response.prototype['iconserver'] = undefined;

/**
 * @member {Boolean} ispoolmoderated
 */
GetGroupDiscussionsByID200Response.prototype['ispoolmoderated'] = undefined;

/**
 * @member {String} lang
 */
GetGroupDiscussionsByID200Response.prototype['lang'] = undefined;

/**
 * @member {Number} members
 */
GetGroupDiscussionsByID200Response.prototype['members'] = undefined;

/**
 * @member {String} name
 */
GetGroupDiscussionsByID200Response.prototype['name'] = undefined;

/**
 * @member {Number} page
 */
GetGroupDiscussionsByID200Response.prototype['page'] = undefined;

/**
 * @member {Number} pages
 */
GetGroupDiscussionsByID200Response.prototype['pages'] = undefined;

/**
 * @member {Number} per_page
 */
GetGroupDiscussionsByID200Response.prototype['per_page'] = undefined;

/**
 * @member {Number} privacy
 */
GetGroupDiscussionsByID200Response.prototype['privacy'] = undefined;

/**
 * @member {Array.<module:model/Topic>} topics
 */
GetGroupDiscussionsByID200Response.prototype['topics'] = undefined;

/**
 * @member {Number} total
 */
GetGroupDiscussionsByID200Response.prototype['total'] = undefined;






export default GetGroupDiscussionsByID200Response;

