/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetPhotoExifByID200ResponsePhotoExifInner from './GetPhotoExifByID200ResponsePhotoExifInner';

/**
 * The GetPhotoExifByID200ResponsePhoto model module.
 * @module model/GetPhotoExifByID200ResponsePhoto
 * @version 1.0.0
 */
class GetPhotoExifByID200ResponsePhoto {
    /**
     * Constructs a new <code>GetPhotoExifByID200ResponsePhoto</code>.
     * @alias module:model/GetPhotoExifByID200ResponsePhoto
     */
    constructor() { 
        
        GetPhotoExifByID200ResponsePhoto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetPhotoExifByID200ResponsePhoto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPhotoExifByID200ResponsePhoto} obj Optional instance to populate.
     * @return {module:model/GetPhotoExifByID200ResponsePhoto} The populated <code>GetPhotoExifByID200ResponsePhoto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPhotoExifByID200ResponsePhoto();

            if (data.hasOwnProperty('camera')) {
                obj['camera'] = ApiClient.convertToType(data['camera'], 'String');
            }
            if (data.hasOwnProperty('exif')) {
                obj['exif'] = ApiClient.convertToType(data['exif'], [GetPhotoExifByID200ResponsePhotoExifInner]);
            }
            if (data.hasOwnProperty('farm')) {
                obj['farm'] = ApiClient.convertToType(data['farm'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPhotoExifByID200ResponsePhoto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPhotoExifByID200ResponsePhoto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['camera'] && !(typeof data['camera'] === 'string' || data['camera'] instanceof String)) {
            throw new Error("Expected the field `camera` to be a primitive type in the JSON string but got " + data['camera']);
        }
        if (data['exif']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exif'])) {
                throw new Error("Expected the field `exif` to be an array in the JSON data but got " + data['exif']);
            }
            // validate the optional field `exif` (array)
            for (const item of data['exif']) {
                GetPhotoExifByID200ResponsePhotoExifInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['farm'] && !(typeof data['farm'] === 'string' || data['farm'] instanceof String)) {
            throw new Error("Expected the field `farm` to be a primitive type in the JSON string but got " + data['farm']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }

        return true;
    }


}



/**
 * @member {String} camera
 */
GetPhotoExifByID200ResponsePhoto.prototype['camera'] = undefined;

/**
 * @member {Array.<module:model/GetPhotoExifByID200ResponsePhotoExifInner>} exif
 */
GetPhotoExifByID200ResponsePhoto.prototype['exif'] = undefined;

/**
 * @member {String} farm
 */
GetPhotoExifByID200ResponsePhoto.prototype['farm'] = undefined;

/**
 * @member {String} id
 */
GetPhotoExifByID200ResponsePhoto.prototype['id'] = undefined;

/**
 * @member {String} secret
 */
GetPhotoExifByID200ResponsePhoto.prototype['secret'] = undefined;

/**
 * @member {String} server
 */
GetPhotoExifByID200ResponsePhoto.prototype['server'] = undefined;






export default GetPhotoExifByID200ResponsePhoto;

