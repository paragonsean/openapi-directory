/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cover model module.
 * @module model/Cover
 * @version 1.0.0
 */
class Cover {
    /**
     * Constructs a new <code>Cover</code>.
     * @alias module:model/Cover
     */
    constructor() { 
        
        Cover.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cover</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cover} obj Optional instance to populate.
     * @return {module:model/Cover} The populated <code>Cover</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cover();

            if (data.hasOwnProperty('farm')) {
                obj['farm'] = ApiClient.convertToType(data['farm'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isfamily')) {
                obj['isfamily'] = ApiClient.convertToType(data['isfamily'], 'Boolean');
            }
            if (data.hasOwnProperty('isfriend')) {
                obj['isfriend'] = ApiClient.convertToType(data['isfriend'], 'Boolean');
            }
            if (data.hasOwnProperty('ispublic')) {
                obj['ispublic'] = ApiClient.convertToType(data['ispublic'], 'Boolean');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cover</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cover</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['farm'] && !(typeof data['farm'] === 'string' || data['farm'] instanceof String)) {
            throw new Error("Expected the field `farm` to be a primitive type in the JSON string but got " + data['farm']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['y'] && !(typeof data['y'] === 'string' || data['y'] instanceof String)) {
            throw new Error("Expected the field `y` to be a primitive type in the JSON string but got " + data['y']);
        }

        return true;
    }


}



/**
 * @member {String} farm
 */
Cover.prototype['farm'] = undefined;

/**
 * @member {String} id
 */
Cover.prototype['id'] = undefined;

/**
 * @member {Boolean} isfamily
 */
Cover.prototype['isfamily'] = undefined;

/**
 * @member {Boolean} isfriend
 */
Cover.prototype['isfriend'] = undefined;

/**
 * @member {Boolean} ispublic
 */
Cover.prototype['ispublic'] = undefined;

/**
 * @member {String} owner
 */
Cover.prototype['owner'] = undefined;

/**
 * @member {String} secret
 */
Cover.prototype['secret'] = undefined;

/**
 * @member {String} server
 */
Cover.prototype['server'] = undefined;

/**
 * @member {String} title
 */
Cover.prototype['title'] = undefined;

/**
 * @member {String} y
 */
Cover.prototype['y'] = undefined;






export default Cover;

