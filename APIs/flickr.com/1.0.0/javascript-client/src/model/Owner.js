/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Owner model module.
 * @module model/Owner
 * @version 1.0.0
 */
class Owner {
    /**
     * Constructs a new <code>Owner</code>.
     * @alias module:model/Owner
     */
    constructor() { 
        
        Owner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Owner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Owner} obj Optional instance to populate.
     * @return {module:model/Owner} The populated <code>Owner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Owner();

            if (data.hasOwnProperty('iconfarm')) {
                obj['iconfarm'] = ApiClient.convertToType(data['iconfarm'], 'String');
            }
            if (data.hasOwnProperty('iconserver')) {
                obj['iconserver'] = ApiClient.convertToType(data['iconserver'], 'String');
            }
            if (data.hasOwnProperty('is_ad_free')) {
                obj['is_ad_free'] = ApiClient.convertToType(data['is_ad_free'], 'Boolean');
            }
            if (data.hasOwnProperty('ispro')) {
                obj['ispro'] = ApiClient.convertToType(data['ispro'], 'Boolean');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('noindexfollow')) {
                obj['noindexfollow'] = ApiClient.convertToType(data['noindexfollow'], 'Boolean');
            }
            if (data.hasOwnProperty('nsid')) {
                obj['nsid'] = ApiClient.convertToType(data['nsid'], 'String');
            }
            if (data.hasOwnProperty('path_alias')) {
                obj['path_alias'] = ApiClient.convertToType(data['path_alias'], 'String');
            }
            if (data.hasOwnProperty('realname')) {
                obj['realname'] = ApiClient.convertToType(data['realname'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Owner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Owner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iconfarm'] && !(typeof data['iconfarm'] === 'string' || data['iconfarm'] instanceof String)) {
            throw new Error("Expected the field `iconfarm` to be a primitive type in the JSON string but got " + data['iconfarm']);
        }
        // ensure the json data is a string
        if (data['iconserver'] && !(typeof data['iconserver'] === 'string' || data['iconserver'] instanceof String)) {
            throw new Error("Expected the field `iconserver` to be a primitive type in the JSON string but got " + data['iconserver']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['nsid'] && !(typeof data['nsid'] === 'string' || data['nsid'] instanceof String)) {
            throw new Error("Expected the field `nsid` to be a primitive type in the JSON string but got " + data['nsid']);
        }
        // ensure the json data is a string
        if (data['path_alias'] && !(typeof data['path_alias'] === 'string' || data['path_alias'] instanceof String)) {
            throw new Error("Expected the field `path_alias` to be a primitive type in the JSON string but got " + data['path_alias']);
        }
        // ensure the json data is a string
        if (data['realname'] && !(typeof data['realname'] === 'string' || data['realname'] instanceof String)) {
            throw new Error("Expected the field `realname` to be a primitive type in the JSON string but got " + data['realname']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {String} iconfarm
 */
Owner.prototype['iconfarm'] = undefined;

/**
 * @member {String} iconserver
 */
Owner.prototype['iconserver'] = undefined;

/**
 * @member {Boolean} is_ad_free
 */
Owner.prototype['is_ad_free'] = undefined;

/**
 * @member {Boolean} ispro
 */
Owner.prototype['ispro'] = undefined;

/**
 * @member {String} location
 */
Owner.prototype['location'] = undefined;

/**
 * @member {Boolean} noindexfollow
 */
Owner.prototype['noindexfollow'] = undefined;

/**
 * @member {String} nsid
 */
Owner.prototype['nsid'] = undefined;

/**
 * @member {String} path_alias
 */
Owner.prototype['path_alias'] = undefined;

/**
 * @member {String} realname
 */
Owner.prototype['realname'] = undefined;

/**
 * @member {String} username
 */
Owner.prototype['username'] = undefined;






export default Owner;

