/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetFavoritesContextByID200ResponseCount from './GetFavoritesContextByID200ResponseCount';
import Owner from './Owner';
import PhotoDates from './PhotoDates';
import PhotoEditability from './PhotoEditability';
import PhotoNotes from './PhotoNotes';
import PhotoPeople from './PhotoPeople';
import PhotoPermissions from './PhotoPermissions';
import PhotoTags from './PhotoTags';
import PhotoUrls from './PhotoUrls';
import PhotoUsage from './PhotoUsage';
import PhotoVisibility from './PhotoVisibility';

/**
 * The Photo model module.
 * @module model/Photo
 * @version 1.0.0
 */
class Photo {
    /**
     * Constructs a new <code>Photo</code>.
     * @alias module:model/Photo
     */
    constructor() { 
        
        Photo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Photo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Photo} obj Optional instance to populate.
     * @return {module:model/Photo} The populated <code>Photo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Photo();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = GetFavoritesContextByID200ResponseCount.constructFromObject(data['comments']);
            }
            if (data.hasOwnProperty('dates')) {
                obj['dates'] = PhotoDates.constructFromObject(data['dates']);
            }
            if (data.hasOwnProperty('dateuploaded')) {
                obj['dateuploaded'] = ApiClient.convertToType(data['dateuploaded'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = GetFavoritesContextByID200ResponseCount.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('editability')) {
                obj['editability'] = PhotoEditability.constructFromObject(data['editability']);
            }
            if (data.hasOwnProperty('farm')) {
                obj['farm'] = ApiClient.convertToType(data['farm'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isfavorite')) {
                obj['isfavorite'] = ApiClient.convertToType(data['isfavorite'], 'Boolean');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = PhotoNotes.constructFromObject(data['notes']);
            }
            if (data.hasOwnProperty('originalsecret')) {
                obj['originalsecret'] = ApiClient.convertToType(data['originalsecret'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = Owner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('people')) {
                obj['people'] = PhotoPeople.constructFromObject(data['people']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = PhotoPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('publiceditability')) {
                obj['publiceditability'] = PhotoEditability.constructFromObject(data['publiceditability']);
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'String');
            }
            if (data.hasOwnProperty('safe')) {
                obj['safe'] = ApiClient.convertToType(data['safe'], 'Boolean');
            }
            if (data.hasOwnProperty('safety_level')) {
                obj['safety_level'] = ApiClient.convertToType(data['safety_level'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = PhotoTags.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = GetFavoritesContextByID200ResponseCount.constructFromObject(data['title']);
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = PhotoUrls.constructFromObject(data['urls']);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = PhotoUsage.constructFromObject(data['usage']);
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ApiClient.convertToType(data['views'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = PhotoVisibility.constructFromObject(data['visibility']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Photo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Photo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `comments`
        if (data['comments']) { // data not null
          GetFavoritesContextByID200ResponseCount.validateJSON(data['comments']);
        }
        // validate the optional field `dates`
        if (data['dates']) { // data not null
          PhotoDates.validateJSON(data['dates']);
        }
        // ensure the json data is a string
        if (data['dateuploaded'] && !(typeof data['dateuploaded'] === 'string' || data['dateuploaded'] instanceof String)) {
            throw new Error("Expected the field `dateuploaded` to be a primitive type in the JSON string but got " + data['dateuploaded']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          GetFavoritesContextByID200ResponseCount.validateJSON(data['description']);
        }
        // validate the optional field `editability`
        if (data['editability']) { // data not null
          PhotoEditability.validateJSON(data['editability']);
        }
        // ensure the json data is a string
        if (data['farm'] && !(typeof data['farm'] === 'string' || data['farm'] instanceof String)) {
            throw new Error("Expected the field `farm` to be a primitive type in the JSON string but got " + data['farm']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['media'] && !(typeof data['media'] === 'string' || data['media'] instanceof String)) {
            throw new Error("Expected the field `media` to be a primitive type in the JSON string but got " + data['media']);
        }
        // validate the optional field `notes`
        if (data['notes']) { // data not null
          PhotoNotes.validateJSON(data['notes']);
        }
        // ensure the json data is a string
        if (data['originalsecret'] && !(typeof data['originalsecret'] === 'string' || data['originalsecret'] instanceof String)) {
            throw new Error("Expected the field `originalsecret` to be a primitive type in the JSON string but got " + data['originalsecret']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          Owner.validateJSON(data['owner']);
        }
        // validate the optional field `people`
        if (data['people']) { // data not null
          PhotoPeople.validateJSON(data['people']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          PhotoPermissions.validateJSON(data['permissions']);
        }
        // validate the optional field `publiceditability`
        if (data['publiceditability']) { // data not null
          PhotoEditability.validateJSON(data['publiceditability']);
        }
        // ensure the json data is a string
        if (data['rotation'] && !(typeof data['rotation'] === 'string' || data['rotation'] instanceof String)) {
            throw new Error("Expected the field `rotation` to be a primitive type in the JSON string but got " + data['rotation']);
        }
        // ensure the json data is a string
        if (data['safety_level'] && !(typeof data['safety_level'] === 'string' || data['safety_level'] instanceof String)) {
            throw new Error("Expected the field `safety_level` to be a primitive type in the JSON string but got " + data['safety_level']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          PhotoTags.validateJSON(data['tags']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          GetFavoritesContextByID200ResponseCount.validateJSON(data['title']);
        }
        // validate the optional field `urls`
        if (data['urls']) { // data not null
          PhotoUrls.validateJSON(data['urls']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          PhotoUsage.validateJSON(data['usage']);
        }
        // ensure the json data is a string
        if (data['views'] && !(typeof data['views'] === 'string' || data['views'] instanceof String)) {
            throw new Error("Expected the field `views` to be a primitive type in the JSON string but got " + data['views']);
        }
        // validate the optional field `visibility`
        if (data['visibility']) { // data not null
          PhotoVisibility.validateJSON(data['visibility']);
        }

        return true;
    }


}



/**
 * @member {module:model/GetFavoritesContextByID200ResponseCount} comments
 */
Photo.prototype['comments'] = undefined;

/**
 * @member {module:model/PhotoDates} dates
 */
Photo.prototype['dates'] = undefined;

/**
 * @member {String} dateuploaded
 */
Photo.prototype['dateuploaded'] = undefined;

/**
 * @member {module:model/GetFavoritesContextByID200ResponseCount} description
 */
Photo.prototype['description'] = undefined;

/**
 * @member {module:model/PhotoEditability} editability
 */
Photo.prototype['editability'] = undefined;

/**
 * @member {String} farm
 */
Photo.prototype['farm'] = undefined;

/**
 * @member {String} id
 */
Photo.prototype['id'] = undefined;

/**
 * @member {Boolean} isfavorite
 */
Photo.prototype['isfavorite'] = undefined;

/**
 * @member {String} license
 */
Photo.prototype['license'] = undefined;

/**
 * @member {String} media
 */
Photo.prototype['media'] = undefined;

/**
 * @member {module:model/PhotoNotes} notes
 */
Photo.prototype['notes'] = undefined;

/**
 * @member {String} originalsecret
 */
Photo.prototype['originalsecret'] = undefined;

/**
 * @member {module:model/Owner} owner
 */
Photo.prototype['owner'] = undefined;

/**
 * @member {module:model/PhotoPeople} people
 */
Photo.prototype['people'] = undefined;

/**
 * @member {module:model/PhotoPermissions} permissions
 */
Photo.prototype['permissions'] = undefined;

/**
 * @member {module:model/PhotoEditability} publiceditability
 */
Photo.prototype['publiceditability'] = undefined;

/**
 * @member {String} rotation
 */
Photo.prototype['rotation'] = undefined;

/**
 * @member {Boolean} safe
 */
Photo.prototype['safe'] = undefined;

/**
 * @member {String} safety_level
 */
Photo.prototype['safety_level'] = undefined;

/**
 * @member {String} secret
 */
Photo.prototype['secret'] = undefined;

/**
 * @member {String} server
 */
Photo.prototype['server'] = undefined;

/**
 * @member {module:model/PhotoTags} tags
 */
Photo.prototype['tags'] = undefined;

/**
 * @member {module:model/GetFavoritesContextByID200ResponseCount} title
 */
Photo.prototype['title'] = undefined;

/**
 * @member {module:model/PhotoUrls} urls
 */
Photo.prototype['urls'] = undefined;

/**
 * @member {module:model/PhotoUsage} usage
 */
Photo.prototype['usage'] = undefined;

/**
 * @member {String} views
 */
Photo.prototype['views'] = undefined;

/**
 * @member {module:model/PhotoVisibility} visibility
 */
Photo.prototype['visibility'] = undefined;






export default Photo;

