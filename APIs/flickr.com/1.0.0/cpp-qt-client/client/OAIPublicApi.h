/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicApi_H
#define OAI_OAIPublicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEcho_200_response.h"
#include "OAIGetAlbumByID_200_response.h"
#include "OAIGetAlbumsByPersonID_200_response.h"
#include "OAIGetFavoritesByPersonID_200_response.h"
#include "OAIGetFavoritesContextByID_200_response.h"
#include "OAIGetGalleryPhotosByID_200_response.h"
#include "OAIGetGroupByID_200_response.h"
#include "OAIGetGroupDiscussionsByID_200_response.h"
#include "OAIGetGroupTopicByID_200_response.h"
#include "OAIGetGroupTopicRepliesByID_200_response.h"
#include "OAIGetLicenseByID_200_response.h"
#include "OAIGetPersonByID_200_response.h"
#include "OAIGetPhotoByID_200_response.h"
#include "OAIGetPhotoExifByID_200_response.h"
#include "OAIGetPhotoSizesByID_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicApi : public QObject {
    Q_OBJECT

public:
    OAIPublicApi(const int timeOut = 0);
    ~OAIPublicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  echo QString [optional]
    */
    virtual void echo(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &echo = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [required]
    * @param[in]  oauth_nonce QString [required]
    * @param[in]  oauth_timestamp QString [required]
    * @param[in]  oauth_signature_method QString [required]
    * @param[in]  oauth_version QString [required]
    * @param[in]  oauth_signature QString [required]
    * @param[in]  oauth_verifier QString [required]
    * @param[in]  oauth_token QString [required]
    */
    virtual void getAccessToken(const QString &oauth_consumer_key, const QString &oauth_nonce, const QString &oauth_timestamp, const QString &oauth_signature_method, const QString &oauth_version, const QString &oauth_signature, const QString &oauth_verifier, const QString &oauth_token);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photoset_id QString [required]
    */
    virtual void getAlbumByID(const QString &api_key, const QString &photoset_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    * @param[in]  photoset_id QString [optional]
    */
    virtual void getAlbumContextByID(const QString &api_key, const QString &photo_id, const ::OpenAPI::OptionalParam<QString> &photoset_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getAlbumsByPersonID(const QString &api_key, const QString &user_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  min_fave_date double [optional]
    * @param[in]  max_fave_date double [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getFavoritesByPersonID(const QString &api_key, const QString &user_id, const ::OpenAPI::OptionalParam<double> &min_fave_date = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fave_date = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getFavoritesContextByID(const QString &api_key, const QString &photo_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  gallery_id QString [required]
    */
    virtual void getGalleryPhotosByID(const QString &api_key, const QString &gallery_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  group_id QString [optional]
    * @param[in]  group_path_alias QString [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getGroupByID(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_path_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  group_id QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getGroupDiscussionsByID(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  group_id QString [optional]
    */
    virtual void getGroupPhotosByID(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  group_id QString [optional]
    */
    virtual void getGroupTopicByID(const QString &api_key, const QString &topic_id, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  reply_id QString [required]
    * @param[in]  group_id QString [optional]
    */
    virtual void getGroupTopicRepliesByID(const QString &api_key, const QString &topic_id, const QString &reply_id, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void getLicenseByID(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  safe_search double [optional]
    * @param[in]  min_upload_date double [optional]
    * @param[in]  max_upload_date double [optional]
    * @param[in]  min_taken_date double [optional]
    * @param[in]  max_taken_date double [optional]
    * @param[in]  content_type double [optional]
    * @param[in]  privacy_filter double [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getMediaByPersonID(const QString &api_key, const QString &user_id, const ::OpenAPI::OptionalParam<double> &safe_search = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_upload_date = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_upload_date = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_taken_date = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_taken_date = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &content_type = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &privacy_filter = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  text QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  min_upload_date QString [optional]
    * @param[in]  max_upload_date QString [optional]
    * @param[in]  min_taken_date QString [optional]
    * @param[in]  max_taken_date QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  privacy_filter double [optional]
    * @param[in]  bbox QString [optional]
    * @param[in]  accuracy QString [optional]
    * @param[in]  safe_search double [optional]
    * @param[in]  content_type double [optional]
    * @param[in]  machine_tags QString [optional]
    * @param[in]  machine_tag_mode QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  contacts QString [optional]
    * @param[in]  woe_id QString [optional]
    * @param[in]  place_id QString [optional]
    * @param[in]  media QString [optional]
    * @param[in]  has_geo QString [optional]
    * @param[in]  geo_context QString [optional]
    * @param[in]  lat QString [optional]
    * @param[in]  lon QString [optional]
    * @param[in]  radius double [optional]
    * @param[in]  radius_units QString [optional]
    * @param[in]  is_commons bool [optional]
    * @param[in]  in_gallery bool [optional]
    * @param[in]  is_getty bool [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  page double [optional]
    */
    virtual void getMediaBySearch(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_upload_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_upload_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_taken_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_taken_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &privacy_filter = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &bbox = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accuracy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &safe_search = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &content_type = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &machine_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &machine_tag_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contacts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &woe_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &place_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &media = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_geo = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &geo_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &radius_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_commons = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &in_gallery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_getty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void getPersonByID(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    */
    virtual void getPhotoByID(const QString &api_key, const QString &photo_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    * @param[in]  secret QString [optional]
    */
    virtual void getPhotoExifByID(const QString &api_key, const QString &photo_id, const ::OpenAPI::OptionalParam<QString> &secret = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    */
    virtual void getPhotoSizesByID(const QString &api_key, const QString &photo_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    * @param[in]  photolist_id QString [required]
    */
    virtual void getPhotolistContextByID(const QString &api_key, const QString &photo_id, const QString &photolist_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    */
    virtual void getPhotostreamContextByID(const QString &api_key, const QString &photo_id);

    /**
    * @param[in]  oauth_consumer_key QString [required]
    * @param[in]  oauth_nonce QString [required]
    * @param[in]  oauth_timestamp QString [required]
    * @param[in]  oauth_signature_method QString [required]
    * @param[in]  oauth_version QString [required]
    * @param[in]  oauth_signature QString [required]
    * @param[in]  oauth_callback QString [required]
    */
    virtual void getRequestToken(const QString &oauth_consumer_key, const QString &oauth_nonce, const QString &oauth_timestamp, const QString &oauth_signature_method, const QString &oauth_version, const QString &oauth_signature, const QString &oauth_callback);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo_id QString [required]
    * @param[in]  group_id QString [optional]
    */
    virtual void restmethodflickrGroupsPoolsGetContextGet(const QString &api_key, const QString &photo_id, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  photo OAIHttpFileElement [required]
    * @param[in]  content_type QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  hidden QString [optional]
    * @param[in]  is_family QString [optional]
    * @param[in]  is_friend QString [optional]
    * @param[in]  is_public QString [optional]
    * @param[in]  safety_level QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  title QString [optional]
    */
    virtual void uploadPhoto(const QString &api_key, const OAIHttpFileElement &photo, const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hidden = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_friend = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_public = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &safety_level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void echoCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenCallback(OAIHttpRequestWorker *worker);
    void getAlbumByIDCallback(OAIHttpRequestWorker *worker);
    void getAlbumContextByIDCallback(OAIHttpRequestWorker *worker);
    void getAlbumsByPersonIDCallback(OAIHttpRequestWorker *worker);
    void getFavoritesByPersonIDCallback(OAIHttpRequestWorker *worker);
    void getFavoritesContextByIDCallback(OAIHttpRequestWorker *worker);
    void getGalleryPhotosByIDCallback(OAIHttpRequestWorker *worker);
    void getGroupByIDCallback(OAIHttpRequestWorker *worker);
    void getGroupDiscussionsByIDCallback(OAIHttpRequestWorker *worker);
    void getGroupPhotosByIDCallback(OAIHttpRequestWorker *worker);
    void getGroupTopicByIDCallback(OAIHttpRequestWorker *worker);
    void getGroupTopicRepliesByIDCallback(OAIHttpRequestWorker *worker);
    void getLicenseByIDCallback(OAIHttpRequestWorker *worker);
    void getMediaByPersonIDCallback(OAIHttpRequestWorker *worker);
    void getMediaBySearchCallback(OAIHttpRequestWorker *worker);
    void getPersonByIDCallback(OAIHttpRequestWorker *worker);
    void getPhotoByIDCallback(OAIHttpRequestWorker *worker);
    void getPhotoExifByIDCallback(OAIHttpRequestWorker *worker);
    void getPhotoSizesByIDCallback(OAIHttpRequestWorker *worker);
    void getPhotolistContextByIDCallback(OAIHttpRequestWorker *worker);
    void getPhotostreamContextByIDCallback(OAIHttpRequestWorker *worker);
    void getRequestTokenCallback(OAIHttpRequestWorker *worker);
    void restmethodflickrGroupsPoolsGetContextGetCallback(OAIHttpRequestWorker *worker);
    void uploadPhotoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void echoSignal(OAIEcho_200_response summary);
    void getAccessTokenSignal(QString summary);
    void getAlbumByIDSignal(OAIGetAlbumByID_200_response summary);
    void getAlbumContextByIDSignal(OAIGetFavoritesContextByID_200_response summary);
    void getAlbumsByPersonIDSignal(OAIGetAlbumsByPersonID_200_response summary);
    void getFavoritesByPersonIDSignal(OAIGetFavoritesByPersonID_200_response summary);
    void getFavoritesContextByIDSignal(OAIGetFavoritesContextByID_200_response summary);
    void getGalleryPhotosByIDSignal(OAIGetGalleryPhotosByID_200_response summary);
    void getGroupByIDSignal(OAIGetGroupByID_200_response summary);
    void getGroupDiscussionsByIDSignal(OAIGetGroupDiscussionsByID_200_response summary);
    void getGroupPhotosByIDSignal(OAIGetGalleryPhotosByID_200_response summary);
    void getGroupTopicByIDSignal(OAIGetGroupTopicByID_200_response summary);
    void getGroupTopicRepliesByIDSignal(OAIGetGroupTopicRepliesByID_200_response summary);
    void getLicenseByIDSignal(OAIGetLicenseByID_200_response summary);
    void getMediaByPersonIDSignal(OAIGetFavoritesByPersonID_200_response summary);
    void getMediaBySearchSignal(OAIGetFavoritesByPersonID_200_response summary);
    void getPersonByIDSignal(OAIGetPersonByID_200_response summary);
    void getPhotoByIDSignal(OAIGetPhotoByID_200_response summary);
    void getPhotoExifByIDSignal(OAIGetPhotoExifByID_200_response summary);
    void getPhotoSizesByIDSignal(OAIGetPhotoSizesByID_200_response summary);
    void getPhotolistContextByIDSignal(OAIGetFavoritesContextByID_200_response summary);
    void getPhotostreamContextByIDSignal(OAIGetFavoritesContextByID_200_response summary);
    void getRequestTokenSignal(QString summary);
    void restmethodflickrGroupsPoolsGetContextGetSignal(OAIGetFavoritesContextByID_200_response summary);
    void uploadPhotoSignal(OAIObject summary);


    void echoSignalFull(OAIHttpRequestWorker *worker, OAIEcho_200_response summary);
    void getAccessTokenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getAlbumByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetAlbumByID_200_response summary);
    void getAlbumContextByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesContextByID_200_response summary);
    void getAlbumsByPersonIDSignalFull(OAIHttpRequestWorker *worker, OAIGetAlbumsByPersonID_200_response summary);
    void getFavoritesByPersonIDSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesByPersonID_200_response summary);
    void getFavoritesContextByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesContextByID_200_response summary);
    void getGalleryPhotosByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetGalleryPhotosByID_200_response summary);
    void getGroupByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetGroupByID_200_response summary);
    void getGroupDiscussionsByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetGroupDiscussionsByID_200_response summary);
    void getGroupPhotosByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetGalleryPhotosByID_200_response summary);
    void getGroupTopicByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetGroupTopicByID_200_response summary);
    void getGroupTopicRepliesByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetGroupTopicRepliesByID_200_response summary);
    void getLicenseByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetLicenseByID_200_response summary);
    void getMediaByPersonIDSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesByPersonID_200_response summary);
    void getMediaBySearchSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesByPersonID_200_response summary);
    void getPersonByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetPersonByID_200_response summary);
    void getPhotoByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetPhotoByID_200_response summary);
    void getPhotoExifByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetPhotoExifByID_200_response summary);
    void getPhotoSizesByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetPhotoSizesByID_200_response summary);
    void getPhotolistContextByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesContextByID_200_response summary);
    void getPhotostreamContextByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesContextByID_200_response summary);
    void getRequestTokenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void restmethodflickrGroupsPoolsGetContextGetSignalFull(OAIHttpRequestWorker *worker, OAIGetFavoritesContextByID_200_response summary);
    void uploadPhotoSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use echoSignalError() instead")
    void echoSignalE(OAIEcho_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoSignalError(OAIEcho_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenSignalError() instead")
    void getAccessTokenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumByIDSignalError() instead")
    void getAlbumByIDSignalE(OAIGetAlbumByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumByIDSignalError(OAIGetAlbumByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumContextByIDSignalError() instead")
    void getAlbumContextByIDSignalE(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumContextByIDSignalError(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumsByPersonIDSignalError() instead")
    void getAlbumsByPersonIDSignalE(OAIGetAlbumsByPersonID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumsByPersonIDSignalError(OAIGetAlbumsByPersonID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavoritesByPersonIDSignalError() instead")
    void getFavoritesByPersonIDSignalE(OAIGetFavoritesByPersonID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavoritesByPersonIDSignalError(OAIGetFavoritesByPersonID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavoritesContextByIDSignalError() instead")
    void getFavoritesContextByIDSignalE(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavoritesContextByIDSignalError(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGalleryPhotosByIDSignalError() instead")
    void getGalleryPhotosByIDSignalE(OAIGetGalleryPhotosByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGalleryPhotosByIDSignalError(OAIGetGalleryPhotosByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupByIDSignalError() instead")
    void getGroupByIDSignalE(OAIGetGroupByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupByIDSignalError(OAIGetGroupByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupDiscussionsByIDSignalError() instead")
    void getGroupDiscussionsByIDSignalE(OAIGetGroupDiscussionsByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupDiscussionsByIDSignalError(OAIGetGroupDiscussionsByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupPhotosByIDSignalError() instead")
    void getGroupPhotosByIDSignalE(OAIGetGalleryPhotosByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupPhotosByIDSignalError(OAIGetGalleryPhotosByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupTopicByIDSignalError() instead")
    void getGroupTopicByIDSignalE(OAIGetGroupTopicByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupTopicByIDSignalError(OAIGetGroupTopicByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupTopicRepliesByIDSignalError() instead")
    void getGroupTopicRepliesByIDSignalE(OAIGetGroupTopicRepliesByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupTopicRepliesByIDSignalError(OAIGetGroupTopicRepliesByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseByIDSignalError() instead")
    void getLicenseByIDSignalE(OAIGetLicenseByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseByIDSignalError(OAIGetLicenseByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaByPersonIDSignalError() instead")
    void getMediaByPersonIDSignalE(OAIGetFavoritesByPersonID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaByPersonIDSignalError(OAIGetFavoritesByPersonID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaBySearchSignalError() instead")
    void getMediaBySearchSignalE(OAIGetFavoritesByPersonID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaBySearchSignalError(OAIGetFavoritesByPersonID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonByIDSignalError() instead")
    void getPersonByIDSignalE(OAIGetPersonByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonByIDSignalError(OAIGetPersonByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotoByIDSignalError() instead")
    void getPhotoByIDSignalE(OAIGetPhotoByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotoByIDSignalError(OAIGetPhotoByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotoExifByIDSignalError() instead")
    void getPhotoExifByIDSignalE(OAIGetPhotoExifByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotoExifByIDSignalError(OAIGetPhotoExifByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotoSizesByIDSignalError() instead")
    void getPhotoSizesByIDSignalE(OAIGetPhotoSizesByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotoSizesByIDSignalError(OAIGetPhotoSizesByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotolistContextByIDSignalError() instead")
    void getPhotolistContextByIDSignalE(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotolistContextByIDSignalError(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotostreamContextByIDSignalError() instead")
    void getPhotostreamContextByIDSignalE(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotostreamContextByIDSignalError(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestTokenSignalError() instead")
    void getRequestTokenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestTokenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restmethodflickrGroupsPoolsGetContextGetSignalError() instead")
    void restmethodflickrGroupsPoolsGetContextGetSignalE(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restmethodflickrGroupsPoolsGetContextGetSignalError(OAIGetFavoritesContextByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadPhotoSignalError() instead")
    void uploadPhotoSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadPhotoSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use echoSignalErrorFull() instead")
    void echoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenSignalErrorFull() instead")
    void getAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumByIDSignalErrorFull() instead")
    void getAlbumByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumContextByIDSignalErrorFull() instead")
    void getAlbumContextByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumContextByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumsByPersonIDSignalErrorFull() instead")
    void getAlbumsByPersonIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumsByPersonIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavoritesByPersonIDSignalErrorFull() instead")
    void getFavoritesByPersonIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavoritesByPersonIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavoritesContextByIDSignalErrorFull() instead")
    void getFavoritesContextByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavoritesContextByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGalleryPhotosByIDSignalErrorFull() instead")
    void getGalleryPhotosByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGalleryPhotosByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupByIDSignalErrorFull() instead")
    void getGroupByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupDiscussionsByIDSignalErrorFull() instead")
    void getGroupDiscussionsByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupDiscussionsByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupPhotosByIDSignalErrorFull() instead")
    void getGroupPhotosByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupPhotosByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupTopicByIDSignalErrorFull() instead")
    void getGroupTopicByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupTopicByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupTopicRepliesByIDSignalErrorFull() instead")
    void getGroupTopicRepliesByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupTopicRepliesByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseByIDSignalErrorFull() instead")
    void getLicenseByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaByPersonIDSignalErrorFull() instead")
    void getMediaByPersonIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaByPersonIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaBySearchSignalErrorFull() instead")
    void getMediaBySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaBySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonByIDSignalErrorFull() instead")
    void getPersonByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotoByIDSignalErrorFull() instead")
    void getPhotoByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotoByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotoExifByIDSignalErrorFull() instead")
    void getPhotoExifByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotoExifByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotoSizesByIDSignalErrorFull() instead")
    void getPhotoSizesByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotoSizesByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotolistContextByIDSignalErrorFull() instead")
    void getPhotolistContextByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotolistContextByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhotostreamContextByIDSignalErrorFull() instead")
    void getPhotostreamContextByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhotostreamContextByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestTokenSignalErrorFull() instead")
    void getRequestTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restmethodflickrGroupsPoolsGetContextGetSignalErrorFull() instead")
    void restmethodflickrGroupsPoolsGetContextGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restmethodflickrGroupsPoolsGetContextGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadPhotoSignalErrorFull() instead")
    void uploadPhotoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadPhotoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
