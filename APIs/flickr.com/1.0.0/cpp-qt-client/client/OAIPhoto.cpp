/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto::OAIPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto::OAIPhoto() {
    this->initializeModel();
}

OAIPhoto::~OAIPhoto() {}

void OAIPhoto::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_dateuploaded_isSet = false;
    m_dateuploaded_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_editability_isSet = false;
    m_editability_isValid = false;

    m_farm_isSet = false;
    m_farm_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_isfavorite_isSet = false;
    m_isfavorite_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_originalsecret_isSet = false;
    m_originalsecret_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_publiceditability_isSet = false;
    m_publiceditability_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_safe_isSet = false;
    m_safe_isValid = false;

    m_safety_level_isSet = false;
    m_safety_level_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_dateuploaded_isValid = ::OpenAPI::fromJsonValue(m_dateuploaded, json[QString("dateuploaded")]);
    m_dateuploaded_isSet = !json[QString("dateuploaded")].isNull() && m_dateuploaded_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_editability_isValid = ::OpenAPI::fromJsonValue(m_editability, json[QString("editability")]);
    m_editability_isSet = !json[QString("editability")].isNull() && m_editability_isValid;

    m_farm_isValid = ::OpenAPI::fromJsonValue(m_farm, json[QString("farm")]);
    m_farm_isSet = !json[QString("farm")].isNull() && m_farm_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_isfavorite_isValid = ::OpenAPI::fromJsonValue(m_isfavorite, json[QString("isfavorite")]);
    m_isfavorite_isSet = !json[QString("isfavorite")].isNull() && m_isfavorite_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_originalsecret_isValid = ::OpenAPI::fromJsonValue(m_originalsecret, json[QString("originalsecret")]);
    m_originalsecret_isSet = !json[QString("originalsecret")].isNull() && m_originalsecret_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_publiceditability_isValid = ::OpenAPI::fromJsonValue(m_publiceditability, json[QString("publiceditability")]);
    m_publiceditability_isSet = !json[QString("publiceditability")].isNull() && m_publiceditability_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_safe_isValid = ::OpenAPI::fromJsonValue(m_safe, json[QString("safe")]);
    m_safe_isSet = !json[QString("safe")].isNull() && m_safe_isValid;

    m_safety_level_isValid = ::OpenAPI::fromJsonValue(m_safety_level, json[QString("safety_level")]);
    m_safety_level_isSet = !json[QString("safety_level")].isNull() && m_safety_level_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_dateuploaded_isSet) {
        obj.insert(QString("dateuploaded"), ::OpenAPI::toJsonValue(m_dateuploaded));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_editability.isSet()) {
        obj.insert(QString("editability"), ::OpenAPI::toJsonValue(m_editability));
    }
    if (m_farm_isSet) {
        obj.insert(QString("farm"), ::OpenAPI::toJsonValue(m_farm));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_isfavorite_isSet) {
        obj.insert(QString("isfavorite"), ::OpenAPI::toJsonValue(m_isfavorite));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_notes.isSet()) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_originalsecret_isSet) {
        obj.insert(QString("originalsecret"), ::OpenAPI::toJsonValue(m_originalsecret));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_people.isSet()) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_publiceditability.isSet()) {
        obj.insert(QString("publiceditability"), ::OpenAPI::toJsonValue(m_publiceditability));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_safe_isSet) {
        obj.insert(QString("safe"), ::OpenAPI::toJsonValue(m_safe));
    }
    if (m_safety_level_isSet) {
        obj.insert(QString("safety_level"), ::OpenAPI::toJsonValue(m_safety_level));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_urls.isSet()) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIGetFavoritesContextByID_200_response_count OAIPhoto::getComments() const {
    return m_comments;
}
void OAIPhoto::setComments(const OAIGetFavoritesContextByID_200_response_count &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIPhoto::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIPhoto::is_comments_Valid() const{
    return m_comments_isValid;
}

OAIPhoto_dates OAIPhoto::getDates() const {
    return m_dates;
}
void OAIPhoto::setDates(const OAIPhoto_dates &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIPhoto::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIPhoto::is_dates_Valid() const{
    return m_dates_isValid;
}

QString OAIPhoto::getDateuploaded() const {
    return m_dateuploaded;
}
void OAIPhoto::setDateuploaded(const QString &dateuploaded) {
    m_dateuploaded = dateuploaded;
    m_dateuploaded_isSet = true;
}

bool OAIPhoto::is_dateuploaded_Set() const{
    return m_dateuploaded_isSet;
}

bool OAIPhoto::is_dateuploaded_Valid() const{
    return m_dateuploaded_isValid;
}

OAIGetFavoritesContextByID_200_response_count OAIPhoto::getDescription() const {
    return m_description;
}
void OAIPhoto::setDescription(const OAIGetFavoritesContextByID_200_response_count &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPhoto::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPhoto::is_description_Valid() const{
    return m_description_isValid;
}

OAIPhoto_editability OAIPhoto::getEditability() const {
    return m_editability;
}
void OAIPhoto::setEditability(const OAIPhoto_editability &editability) {
    m_editability = editability;
    m_editability_isSet = true;
}

bool OAIPhoto::is_editability_Set() const{
    return m_editability_isSet;
}

bool OAIPhoto::is_editability_Valid() const{
    return m_editability_isValid;
}

QString OAIPhoto::getFarm() const {
    return m_farm;
}
void OAIPhoto::setFarm(const QString &farm) {
    m_farm = farm;
    m_farm_isSet = true;
}

bool OAIPhoto::is_farm_Set() const{
    return m_farm_isSet;
}

bool OAIPhoto::is_farm_Valid() const{
    return m_farm_isValid;
}

QString OAIPhoto::getId() const {
    return m_id;
}
void OAIPhoto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPhoto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPhoto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPhoto::isIsfavorite() const {
    return m_isfavorite;
}
void OAIPhoto::setIsfavorite(const bool &isfavorite) {
    m_isfavorite = isfavorite;
    m_isfavorite_isSet = true;
}

bool OAIPhoto::is_isfavorite_Set() const{
    return m_isfavorite_isSet;
}

bool OAIPhoto::is_isfavorite_Valid() const{
    return m_isfavorite_isValid;
}

QString OAIPhoto::getLicense() const {
    return m_license;
}
void OAIPhoto::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIPhoto::is_license_Set() const{
    return m_license_isSet;
}

bool OAIPhoto::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIPhoto::getMedia() const {
    return m_media;
}
void OAIPhoto::setMedia(const QString &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIPhoto::is_media_Set() const{
    return m_media_isSet;
}

bool OAIPhoto::is_media_Valid() const{
    return m_media_isValid;
}

OAIPhoto_notes OAIPhoto::getNotes() const {
    return m_notes;
}
void OAIPhoto::setNotes(const OAIPhoto_notes &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPhoto::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPhoto::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIPhoto::getOriginalsecret() const {
    return m_originalsecret;
}
void OAIPhoto::setOriginalsecret(const QString &originalsecret) {
    m_originalsecret = originalsecret;
    m_originalsecret_isSet = true;
}

bool OAIPhoto::is_originalsecret_Set() const{
    return m_originalsecret_isSet;
}

bool OAIPhoto::is_originalsecret_Valid() const{
    return m_originalsecret_isValid;
}

OAIOwner OAIPhoto::getOwner() const {
    return m_owner;
}
void OAIPhoto::setOwner(const OAIOwner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPhoto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPhoto::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIPhoto_people OAIPhoto::getPeople() const {
    return m_people;
}
void OAIPhoto::setPeople(const OAIPhoto_people &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAIPhoto::is_people_Set() const{
    return m_people_isSet;
}

bool OAIPhoto::is_people_Valid() const{
    return m_people_isValid;
}

OAIPhoto_permissions OAIPhoto::getPermissions() const {
    return m_permissions;
}
void OAIPhoto::setPermissions(const OAIPhoto_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIPhoto::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIPhoto::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIPhoto_editability OAIPhoto::getPubliceditability() const {
    return m_publiceditability;
}
void OAIPhoto::setPubliceditability(const OAIPhoto_editability &publiceditability) {
    m_publiceditability = publiceditability;
    m_publiceditability_isSet = true;
}

bool OAIPhoto::is_publiceditability_Set() const{
    return m_publiceditability_isSet;
}

bool OAIPhoto::is_publiceditability_Valid() const{
    return m_publiceditability_isValid;
}

QString OAIPhoto::getRotation() const {
    return m_rotation;
}
void OAIPhoto::setRotation(const QString &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIPhoto::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIPhoto::is_rotation_Valid() const{
    return m_rotation_isValid;
}

bool OAIPhoto::isSafe() const {
    return m_safe;
}
void OAIPhoto::setSafe(const bool &safe) {
    m_safe = safe;
    m_safe_isSet = true;
}

bool OAIPhoto::is_safe_Set() const{
    return m_safe_isSet;
}

bool OAIPhoto::is_safe_Valid() const{
    return m_safe_isValid;
}

QString OAIPhoto::getSafetyLevel() const {
    return m_safety_level;
}
void OAIPhoto::setSafetyLevel(const QString &safety_level) {
    m_safety_level = safety_level;
    m_safety_level_isSet = true;
}

bool OAIPhoto::is_safety_level_Set() const{
    return m_safety_level_isSet;
}

bool OAIPhoto::is_safety_level_Valid() const{
    return m_safety_level_isValid;
}

QString OAIPhoto::getSecret() const {
    return m_secret;
}
void OAIPhoto::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIPhoto::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIPhoto::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIPhoto::getServer() const {
    return m_server;
}
void OAIPhoto::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIPhoto::is_server_Set() const{
    return m_server_isSet;
}

bool OAIPhoto::is_server_Valid() const{
    return m_server_isValid;
}

OAIPhoto_tags OAIPhoto::getTags() const {
    return m_tags;
}
void OAIPhoto::setTags(const OAIPhoto_tags &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPhoto::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPhoto::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIGetFavoritesContextByID_200_response_count OAIPhoto::getTitle() const {
    return m_title;
}
void OAIPhoto::setTitle(const OAIGetFavoritesContextByID_200_response_count &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPhoto::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPhoto::is_title_Valid() const{
    return m_title_isValid;
}

OAIPhoto_urls OAIPhoto::getUrls() const {
    return m_urls;
}
void OAIPhoto::setUrls(const OAIPhoto_urls &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIPhoto::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIPhoto::is_urls_Valid() const{
    return m_urls_isValid;
}

OAIPhoto_usage OAIPhoto::getUsage() const {
    return m_usage;
}
void OAIPhoto::setUsage(const OAIPhoto_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIPhoto::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIPhoto::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIPhoto::getViews() const {
    return m_views;
}
void OAIPhoto::setViews(const QString &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIPhoto::is_views_Set() const{
    return m_views_isSet;
}

bool OAIPhoto::is_views_Valid() const{
    return m_views_isValid;
}

OAIPhoto_visibility OAIPhoto::getVisibility() const {
    return m_visibility;
}
void OAIPhoto::setVisibility(const OAIPhoto_visibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIPhoto::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIPhoto::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dateuploaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_farm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isfavorite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_originalsecret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publiceditability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
