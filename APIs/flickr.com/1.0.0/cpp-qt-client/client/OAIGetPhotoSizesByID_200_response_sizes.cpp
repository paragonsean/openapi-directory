/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPhotoSizesByID_200_response_sizes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPhotoSizesByID_200_response_sizes::OAIGetPhotoSizesByID_200_response_sizes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPhotoSizesByID_200_response_sizes::OAIGetPhotoSizesByID_200_response_sizes() {
    this->initializeModel();
}

OAIGetPhotoSizesByID_200_response_sizes::~OAIGetPhotoSizesByID_200_response_sizes() {}

void OAIGetPhotoSizesByID_200_response_sizes::initializeModel() {

    m_canblog_isSet = false;
    m_canblog_isValid = false;

    m_candownload_isSet = false;
    m_candownload_isValid = false;

    m_canprint_isSet = false;
    m_canprint_isValid = false;

    m_sizes_isSet = false;
    m_sizes_isValid = false;
}

void OAIGetPhotoSizesByID_200_response_sizes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPhotoSizesByID_200_response_sizes::fromJsonObject(QJsonObject json) {

    m_canblog_isValid = ::OpenAPI::fromJsonValue(m_canblog, json[QString("canblog")]);
    m_canblog_isSet = !json[QString("canblog")].isNull() && m_canblog_isValid;

    m_candownload_isValid = ::OpenAPI::fromJsonValue(m_candownload, json[QString("candownload")]);
    m_candownload_isSet = !json[QString("candownload")].isNull() && m_candownload_isValid;

    m_canprint_isValid = ::OpenAPI::fromJsonValue(m_canprint, json[QString("canprint")]);
    m_canprint_isSet = !json[QString("canprint")].isNull() && m_canprint_isValid;

    m_sizes_isValid = ::OpenAPI::fromJsonValue(m_sizes, json[QString("sizes")]);
    m_sizes_isSet = !json[QString("sizes")].isNull() && m_sizes_isValid;
}

QString OAIGetPhotoSizesByID_200_response_sizes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPhotoSizesByID_200_response_sizes::asJsonObject() const {
    QJsonObject obj;
    if (m_canblog_isSet) {
        obj.insert(QString("canblog"), ::OpenAPI::toJsonValue(m_canblog));
    }
    if (m_candownload_isSet) {
        obj.insert(QString("candownload"), ::OpenAPI::toJsonValue(m_candownload));
    }
    if (m_canprint_isSet) {
        obj.insert(QString("canprint"), ::OpenAPI::toJsonValue(m_canprint));
    }
    if (m_sizes.size() > 0) {
        obj.insert(QString("sizes"), ::OpenAPI::toJsonValue(m_sizes));
    }
    return obj;
}

double OAIGetPhotoSizesByID_200_response_sizes::getCanblog() const {
    return m_canblog;
}
void OAIGetPhotoSizesByID_200_response_sizes::setCanblog(const double &canblog) {
    m_canblog = canblog;
    m_canblog_isSet = true;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_canblog_Set() const{
    return m_canblog_isSet;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_canblog_Valid() const{
    return m_canblog_isValid;
}

double OAIGetPhotoSizesByID_200_response_sizes::getCandownload() const {
    return m_candownload;
}
void OAIGetPhotoSizesByID_200_response_sizes::setCandownload(const double &candownload) {
    m_candownload = candownload;
    m_candownload_isSet = true;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_candownload_Set() const{
    return m_candownload_isSet;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_candownload_Valid() const{
    return m_candownload_isValid;
}

double OAIGetPhotoSizesByID_200_response_sizes::getCanprint() const {
    return m_canprint;
}
void OAIGetPhotoSizesByID_200_response_sizes::setCanprint(const double &canprint) {
    m_canprint = canprint;
    m_canprint_isSet = true;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_canprint_Set() const{
    return m_canprint_isSet;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_canprint_Valid() const{
    return m_canprint_isValid;
}

QList<OAISize> OAIGetPhotoSizesByID_200_response_sizes::getSizes() const {
    return m_sizes;
}
void OAIGetPhotoSizesByID_200_response_sizes::setSizes(const QList<OAISize> &sizes) {
    m_sizes = sizes;
    m_sizes_isSet = true;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_sizes_Set() const{
    return m_sizes_isSet;
}

bool OAIGetPhotoSizesByID_200_response_sizes::is_sizes_Valid() const{
    return m_sizes_isValid;
}

bool OAIGetPhotoSizesByID_200_response_sizes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canblog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candownload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPhotoSizesByID_200_response_sizes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
