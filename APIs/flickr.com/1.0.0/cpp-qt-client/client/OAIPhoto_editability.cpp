/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto_editability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto_editability::OAIPhoto_editability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto_editability::OAIPhoto_editability() {
    this->initializeModel();
}

OAIPhoto_editability::~OAIPhoto_editability() {}

void OAIPhoto_editability::initializeModel() {

    m_canaddmeta_isSet = false;
    m_canaddmeta_isValid = false;

    m_cancomment_isSet = false;
    m_cancomment_isValid = false;
}

void OAIPhoto_editability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto_editability::fromJsonObject(QJsonObject json) {

    m_canaddmeta_isValid = ::OpenAPI::fromJsonValue(m_canaddmeta, json[QString("canaddmeta")]);
    m_canaddmeta_isSet = !json[QString("canaddmeta")].isNull() && m_canaddmeta_isValid;

    m_cancomment_isValid = ::OpenAPI::fromJsonValue(m_cancomment, json[QString("cancomment")]);
    m_cancomment_isSet = !json[QString("cancomment")].isNull() && m_cancomment_isValid;
}

QString OAIPhoto_editability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto_editability::asJsonObject() const {
    QJsonObject obj;
    if (m_canaddmeta_isSet) {
        obj.insert(QString("canaddmeta"), ::OpenAPI::toJsonValue(m_canaddmeta));
    }
    if (m_cancomment_isSet) {
        obj.insert(QString("cancomment"), ::OpenAPI::toJsonValue(m_cancomment));
    }
    return obj;
}

bool OAIPhoto_editability::isCanaddmeta() const {
    return m_canaddmeta;
}
void OAIPhoto_editability::setCanaddmeta(const bool &canaddmeta) {
    m_canaddmeta = canaddmeta;
    m_canaddmeta_isSet = true;
}

bool OAIPhoto_editability::is_canaddmeta_Set() const{
    return m_canaddmeta_isSet;
}

bool OAIPhoto_editability::is_canaddmeta_Valid() const{
    return m_canaddmeta_isValid;
}

bool OAIPhoto_editability::isCancomment() const {
    return m_cancomment;
}
void OAIPhoto_editability::setCancomment(const bool &cancomment) {
    m_cancomment = cancomment;
    m_cancomment_isSet = true;
}

bool OAIPhoto_editability::is_cancomment_Set() const{
    return m_cancomment_isSet;
}

bool OAIPhoto_editability::is_cancomment_Valid() const{
    return m_cancomment_isValid;
}

bool OAIPhoto_editability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canaddmeta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancomment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto_editability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
