/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto_visibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto_visibility::OAIPhoto_visibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto_visibility::OAIPhoto_visibility() {
    this->initializeModel();
}

OAIPhoto_visibility::~OAIPhoto_visibility() {}

void OAIPhoto_visibility::initializeModel() {

    m_isfamily_isSet = false;
    m_isfamily_isValid = false;

    m_isfriend_isSet = false;
    m_isfriend_isValid = false;

    m_ispublic_isSet = false;
    m_ispublic_isValid = false;
}

void OAIPhoto_visibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto_visibility::fromJsonObject(QJsonObject json) {

    m_isfamily_isValid = ::OpenAPI::fromJsonValue(m_isfamily, json[QString("isfamily")]);
    m_isfamily_isSet = !json[QString("isfamily")].isNull() && m_isfamily_isValid;

    m_isfriend_isValid = ::OpenAPI::fromJsonValue(m_isfriend, json[QString("isfriend")]);
    m_isfriend_isSet = !json[QString("isfriend")].isNull() && m_isfriend_isValid;

    m_ispublic_isValid = ::OpenAPI::fromJsonValue(m_ispublic, json[QString("ispublic")]);
    m_ispublic_isSet = !json[QString("ispublic")].isNull() && m_ispublic_isValid;
}

QString OAIPhoto_visibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto_visibility::asJsonObject() const {
    QJsonObject obj;
    if (m_isfamily_isSet) {
        obj.insert(QString("isfamily"), ::OpenAPI::toJsonValue(m_isfamily));
    }
    if (m_isfriend_isSet) {
        obj.insert(QString("isfriend"), ::OpenAPI::toJsonValue(m_isfriend));
    }
    if (m_ispublic_isSet) {
        obj.insert(QString("ispublic"), ::OpenAPI::toJsonValue(m_ispublic));
    }
    return obj;
}

bool OAIPhoto_visibility::isIsfamily() const {
    return m_isfamily;
}
void OAIPhoto_visibility::setIsfamily(const bool &isfamily) {
    m_isfamily = isfamily;
    m_isfamily_isSet = true;
}

bool OAIPhoto_visibility::is_isfamily_Set() const{
    return m_isfamily_isSet;
}

bool OAIPhoto_visibility::is_isfamily_Valid() const{
    return m_isfamily_isValid;
}

bool OAIPhoto_visibility::isIsfriend() const {
    return m_isfriend;
}
void OAIPhoto_visibility::setIsfriend(const bool &isfriend) {
    m_isfriend = isfriend;
    m_isfriend_isSet = true;
}

bool OAIPhoto_visibility::is_isfriend_Set() const{
    return m_isfriend_isSet;
}

bool OAIPhoto_visibility::is_isfriend_Valid() const{
    return m_isfriend_isValid;
}

bool OAIPhoto_visibility::isIspublic() const {
    return m_ispublic;
}
void OAIPhoto_visibility::setIspublic(const bool &ispublic) {
    m_ispublic = ispublic;
    m_ispublic_isSet = true;
}

bool OAIPhoto_visibility::is_ispublic_Set() const{
    return m_ispublic_isSet;
}

bool OAIPhoto_visibility::is_ispublic_Valid() const{
    return m_ispublic_isValid;
}

bool OAIPhoto_visibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_isfamily_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isfriend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ispublic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto_visibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
