/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLicenseByID_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLicenseByID_200_response::OAIGetLicenseByID_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLicenseByID_200_response::OAIGetLicenseByID_200_response() {
    this->initializeModel();
}

OAIGetLicenseByID_200_response::~OAIGetLicenseByID_200_response() {}

void OAIGetLicenseByID_200_response::initializeModel() {

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;
}

void OAIGetLicenseByID_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLicenseByID_200_response::fromJsonObject(QJsonObject json) {

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("stat")]);
    m_stat_isSet = !json[QString("stat")].isNull() && m_stat_isValid;
}

QString OAIGetLicenseByID_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLicenseByID_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_licenses.isSet()) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_stat_isSet) {
        obj.insert(QString("stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    return obj;
}

OAIGetLicenseByID_200_response_licenses OAIGetLicenseByID_200_response::getLicenses() const {
    return m_licenses;
}
void OAIGetLicenseByID_200_response::setLicenses(const OAIGetLicenseByID_200_response_licenses &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIGetLicenseByID_200_response::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIGetLicenseByID_200_response::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QString OAIGetLicenseByID_200_response::getStat() const {
    return m_stat;
}
void OAIGetLicenseByID_200_response::setStat(const QString &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIGetLicenseByID_200_response::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIGetLicenseByID_200_response::is_stat_Valid() const{
    return m_stat_isValid;
}

bool OAIGetLicenseByID_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_licenses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLicenseByID_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
