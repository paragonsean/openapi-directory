/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicReply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicReply::OAITopicReply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicReply::OAITopicReply() {
    this->initializeModel();
}

OAITopicReply::~OAITopicReply() {}

void OAITopicReply::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_author_is_deleted_isSet = false;
    m_author_is_deleted_isValid = false;

    m_author_path_alias_isSet = false;
    m_author_path_alias_isValid = false;

    m_authorname_isSet = false;
    m_authorname_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_datecreate_isSet = false;
    m_datecreate_isValid = false;

    m_iconfarm_isSet = false;
    m_iconfarm_isValid = false;

    m_iconserver_isSet = false;
    m_iconserver_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_pro_isSet = false;
    m_is_pro_isValid = false;

    m_lastedit_isSet = false;
    m_lastedit_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAITopicReply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicReply::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_author_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_author_is_deleted, json[QString("author_is_deleted")]);
    m_author_is_deleted_isSet = !json[QString("author_is_deleted")].isNull() && m_author_is_deleted_isValid;

    m_author_path_alias_isValid = ::OpenAPI::fromJsonValue(m_author_path_alias, json[QString("author_path_alias")]);
    m_author_path_alias_isSet = !json[QString("author_path_alias")].isNull() && m_author_path_alias_isValid;

    m_authorname_isValid = ::OpenAPI::fromJsonValue(m_authorname, json[QString("authorname")]);
    m_authorname_isSet = !json[QString("authorname")].isNull() && m_authorname_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("can_delete")]);
    m_can_delete_isSet = !json[QString("can_delete")].isNull() && m_can_delete_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_datecreate_isValid = ::OpenAPI::fromJsonValue(m_datecreate, json[QString("datecreate")]);
    m_datecreate_isSet = !json[QString("datecreate")].isNull() && m_datecreate_isValid;

    m_iconfarm_isValid = ::OpenAPI::fromJsonValue(m_iconfarm, json[QString("iconfarm")]);
    m_iconfarm_isSet = !json[QString("iconfarm")].isNull() && m_iconfarm_isValid;

    m_iconserver_isValid = ::OpenAPI::fromJsonValue(m_iconserver, json[QString("iconserver")]);
    m_iconserver_isSet = !json[QString("iconserver")].isNull() && m_iconserver_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_pro_isValid = ::OpenAPI::fromJsonValue(m_is_pro, json[QString("is_pro")]);
    m_is_pro_isSet = !json[QString("is_pro")].isNull() && m_is_pro_isValid;

    m_lastedit_isValid = ::OpenAPI::fromJsonValue(m_lastedit, json[QString("lastedit")]);
    m_lastedit_isSet = !json[QString("lastedit")].isNull() && m_lastedit_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAITopicReply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicReply::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_author_is_deleted_isSet) {
        obj.insert(QString("author_is_deleted"), ::OpenAPI::toJsonValue(m_author_is_deleted));
    }
    if (m_author_path_alias_isSet) {
        obj.insert(QString("author_path_alias"), ::OpenAPI::toJsonValue(m_author_path_alias));
    }
    if (m_authorname_isSet) {
        obj.insert(QString("authorname"), ::OpenAPI::toJsonValue(m_authorname));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("can_delete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_datecreate_isSet) {
        obj.insert(QString("datecreate"), ::OpenAPI::toJsonValue(m_datecreate));
    }
    if (m_iconfarm_isSet) {
        obj.insert(QString("iconfarm"), ::OpenAPI::toJsonValue(m_iconfarm));
    }
    if (m_iconserver_isSet) {
        obj.insert(QString("iconserver"), ::OpenAPI::toJsonValue(m_iconserver));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_pro_isSet) {
        obj.insert(QString("is_pro"), ::OpenAPI::toJsonValue(m_is_pro));
    }
    if (m_lastedit_isSet) {
        obj.insert(QString("lastedit"), ::OpenAPI::toJsonValue(m_lastedit));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAITopicReply::getAuthor() const {
    return m_author;
}
void OAITopicReply::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAITopicReply::is_author_Set() const{
    return m_author_isSet;
}

bool OAITopicReply::is_author_Valid() const{
    return m_author_isValid;
}

bool OAITopicReply::isAuthorIsDeleted() const {
    return m_author_is_deleted;
}
void OAITopicReply::setAuthorIsDeleted(const bool &author_is_deleted) {
    m_author_is_deleted = author_is_deleted;
    m_author_is_deleted_isSet = true;
}

bool OAITopicReply::is_author_is_deleted_Set() const{
    return m_author_is_deleted_isSet;
}

bool OAITopicReply::is_author_is_deleted_Valid() const{
    return m_author_is_deleted_isValid;
}

QString OAITopicReply::getAuthorPathAlias() const {
    return m_author_path_alias;
}
void OAITopicReply::setAuthorPathAlias(const QString &author_path_alias) {
    m_author_path_alias = author_path_alias;
    m_author_path_alias_isSet = true;
}

bool OAITopicReply::is_author_path_alias_Set() const{
    return m_author_path_alias_isSet;
}

bool OAITopicReply::is_author_path_alias_Valid() const{
    return m_author_path_alias_isValid;
}

QString OAITopicReply::getAuthorname() const {
    return m_authorname;
}
void OAITopicReply::setAuthorname(const QString &authorname) {
    m_authorname = authorname;
    m_authorname_isSet = true;
}

bool OAITopicReply::is_authorname_Set() const{
    return m_authorname_isSet;
}

bool OAITopicReply::is_authorname_Valid() const{
    return m_authorname_isValid;
}

bool OAITopicReply::isCanDelete() const {
    return m_can_delete;
}
void OAITopicReply::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAITopicReply::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAITopicReply::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAITopicReply::isCanEdit() const {
    return m_can_edit;
}
void OAITopicReply::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAITopicReply::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAITopicReply::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

QString OAITopicReply::getDatecreate() const {
    return m_datecreate;
}
void OAITopicReply::setDatecreate(const QString &datecreate) {
    m_datecreate = datecreate;
    m_datecreate_isSet = true;
}

bool OAITopicReply::is_datecreate_Set() const{
    return m_datecreate_isSet;
}

bool OAITopicReply::is_datecreate_Valid() const{
    return m_datecreate_isValid;
}

QString OAITopicReply::getIconfarm() const {
    return m_iconfarm;
}
void OAITopicReply::setIconfarm(const QString &iconfarm) {
    m_iconfarm = iconfarm;
    m_iconfarm_isSet = true;
}

bool OAITopicReply::is_iconfarm_Set() const{
    return m_iconfarm_isSet;
}

bool OAITopicReply::is_iconfarm_Valid() const{
    return m_iconfarm_isValid;
}

QString OAITopicReply::getIconserver() const {
    return m_iconserver;
}
void OAITopicReply::setIconserver(const QString &iconserver) {
    m_iconserver = iconserver;
    m_iconserver_isSet = true;
}

bool OAITopicReply::is_iconserver_Set() const{
    return m_iconserver_isSet;
}

bool OAITopicReply::is_iconserver_Valid() const{
    return m_iconserver_isValid;
}

QString OAITopicReply::getId() const {
    return m_id;
}
void OAITopicReply::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITopicReply::is_id_Set() const{
    return m_id_isSet;
}

bool OAITopicReply::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITopicReply::isIsPro() const {
    return m_is_pro;
}
void OAITopicReply::setIsPro(const bool &is_pro) {
    m_is_pro = is_pro;
    m_is_pro_isSet = true;
}

bool OAITopicReply::is_is_pro_Set() const{
    return m_is_pro_isSet;
}

bool OAITopicReply::is_is_pro_Valid() const{
    return m_is_pro_isValid;
}

QString OAITopicReply::getLastedit() const {
    return m_lastedit;
}
void OAITopicReply::setLastedit(const QString &lastedit) {
    m_lastedit = lastedit;
    m_lastedit_isSet = true;
}

bool OAITopicReply::is_lastedit_Set() const{
    return m_lastedit_isSet;
}

bool OAITopicReply::is_lastedit_Valid() const{
    return m_lastedit_isValid;
}

OAIGetFavoritesContextByID_200_response_count OAITopicReply::getMessage() const {
    return m_message;
}
void OAITopicReply::setMessage(const OAIGetFavoritesContextByID_200_response_count &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITopicReply::is_message_Set() const{
    return m_message_isSet;
}

bool OAITopicReply::is_message_Valid() const{
    return m_message_isValid;
}

bool OAITopicReply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_path_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datecreate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iconfarm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iconserver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pro_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastedit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicReply::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
