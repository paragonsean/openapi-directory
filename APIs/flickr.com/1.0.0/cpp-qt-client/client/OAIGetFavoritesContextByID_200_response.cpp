/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFavoritesContextByID_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFavoritesContextByID_200_response::OAIGetFavoritesContextByID_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFavoritesContextByID_200_response::OAIGetFavoritesContextByID_200_response() {
    this->initializeModel();
}

OAIGetFavoritesContextByID_200_response::~OAIGetFavoritesContextByID_200_response() {}

void OAIGetFavoritesContextByID_200_response::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_nextphoto_isSet = false;
    m_nextphoto_isValid = false;

    m_prevphoto_isSet = false;
    m_prevphoto_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;
}

void OAIGetFavoritesContextByID_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFavoritesContextByID_200_response::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_nextphoto_isValid = ::OpenAPI::fromJsonValue(m_nextphoto, json[QString("nextphoto")]);
    m_nextphoto_isSet = !json[QString("nextphoto")].isNull() && m_nextphoto_isValid;

    m_prevphoto_isValid = ::OpenAPI::fromJsonValue(m_prevphoto, json[QString("prevphoto")]);
    m_prevphoto_isSet = !json[QString("prevphoto")].isNull() && m_prevphoto_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("stat")]);
    m_stat_isSet = !json[QString("stat")].isNull() && m_stat_isValid;
}

QString OAIGetFavoritesContextByID_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFavoritesContextByID_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_count.isSet()) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_nextphoto.isSet()) {
        obj.insert(QString("nextphoto"), ::OpenAPI::toJsonValue(m_nextphoto));
    }
    if (m_prevphoto.isSet()) {
        obj.insert(QString("prevphoto"), ::OpenAPI::toJsonValue(m_prevphoto));
    }
    if (m_stat_isSet) {
        obj.insert(QString("stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    return obj;
}

OAIGetFavoritesContextByID_200_response_count OAIGetFavoritesContextByID_200_response::getCount() const {
    return m_count;
}
void OAIGetFavoritesContextByID_200_response::setCount(const OAIGetFavoritesContextByID_200_response_count &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGetFavoritesContextByID_200_response::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGetFavoritesContextByID_200_response::is_count_Valid() const{
    return m_count_isValid;
}

OAIContextPhoto OAIGetFavoritesContextByID_200_response::getNextphoto() const {
    return m_nextphoto;
}
void OAIGetFavoritesContextByID_200_response::setNextphoto(const OAIContextPhoto &nextphoto) {
    m_nextphoto = nextphoto;
    m_nextphoto_isSet = true;
}

bool OAIGetFavoritesContextByID_200_response::is_nextphoto_Set() const{
    return m_nextphoto_isSet;
}

bool OAIGetFavoritesContextByID_200_response::is_nextphoto_Valid() const{
    return m_nextphoto_isValid;
}

OAIContextPhoto OAIGetFavoritesContextByID_200_response::getPrevphoto() const {
    return m_prevphoto;
}
void OAIGetFavoritesContextByID_200_response::setPrevphoto(const OAIContextPhoto &prevphoto) {
    m_prevphoto = prevphoto;
    m_prevphoto_isSet = true;
}

bool OAIGetFavoritesContextByID_200_response::is_prevphoto_Set() const{
    return m_prevphoto_isSet;
}

bool OAIGetFavoritesContextByID_200_response::is_prevphoto_Valid() const{
    return m_prevphoto_isValid;
}

QString OAIGetFavoritesContextByID_200_response::getStat() const {
    return m_stat;
}
void OAIGetFavoritesContextByID_200_response::setStat(const QString &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIGetFavoritesContextByID_200_response::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIGetFavoritesContextByID_200_response::is_stat_Valid() const{
    return m_stat_isValid;
}

bool OAIGetFavoritesContextByID_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nextphoto.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prevphoto.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFavoritesContextByID_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
