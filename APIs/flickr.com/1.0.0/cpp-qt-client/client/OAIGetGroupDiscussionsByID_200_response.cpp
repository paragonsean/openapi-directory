/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetGroupDiscussionsByID_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetGroupDiscussionsByID_200_response::OAIGetGroupDiscussionsByID_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetGroupDiscussionsByID_200_response::OAIGetGroupDiscussionsByID_200_response() {
    this->initializeModel();
}

OAIGetGroupDiscussionsByID_200_response::~OAIGetGroupDiscussionsByID_200_response() {}

void OAIGetGroupDiscussionsByID_200_response::initializeModel() {

    m_iconfarm_isSet = false;
    m_iconfarm_isValid = false;

    m_iconserver_isSet = false;
    m_iconserver_isValid = false;

    m_ispoolmoderated_isSet = false;
    m_ispoolmoderated_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetGroupDiscussionsByID_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetGroupDiscussionsByID_200_response::fromJsonObject(QJsonObject json) {

    m_iconfarm_isValid = ::OpenAPI::fromJsonValue(m_iconfarm, json[QString("iconfarm")]);
    m_iconfarm_isSet = !json[QString("iconfarm")].isNull() && m_iconfarm_isValid;

    m_iconserver_isValid = ::OpenAPI::fromJsonValue(m_iconserver, json[QString("iconserver")]);
    m_iconserver_isSet = !json[QString("iconserver")].isNull() && m_iconserver_isValid;

    m_ispoolmoderated_isValid = ::OpenAPI::fromJsonValue(m_ispoolmoderated, json[QString("ispoolmoderated")]);
    m_ispoolmoderated_isSet = !json[QString("ispoolmoderated")].isNull() && m_ispoolmoderated_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIGetGroupDiscussionsByID_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetGroupDiscussionsByID_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_iconfarm_isSet) {
        obj.insert(QString("iconfarm"), ::OpenAPI::toJsonValue(m_iconfarm));
    }
    if (m_iconserver_isSet) {
        obj.insert(QString("iconserver"), ::OpenAPI::toJsonValue(m_iconserver));
    }
    if (m_ispoolmoderated_isSet) {
        obj.insert(QString("ispoolmoderated"), ::OpenAPI::toJsonValue(m_ispoolmoderated));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_members_isSet) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIGetGroupDiscussionsByID_200_response::getIconfarm() const {
    return m_iconfarm;
}
void OAIGetGroupDiscussionsByID_200_response::setIconfarm(const double &iconfarm) {
    m_iconfarm = iconfarm;
    m_iconfarm_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_iconfarm_Set() const{
    return m_iconfarm_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_iconfarm_Valid() const{
    return m_iconfarm_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getIconserver() const {
    return m_iconserver;
}
void OAIGetGroupDiscussionsByID_200_response::setIconserver(const double &iconserver) {
    m_iconserver = iconserver;
    m_iconserver_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_iconserver_Set() const{
    return m_iconserver_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_iconserver_Valid() const{
    return m_iconserver_isValid;
}

bool OAIGetGroupDiscussionsByID_200_response::isIspoolmoderated() const {
    return m_ispoolmoderated;
}
void OAIGetGroupDiscussionsByID_200_response::setIspoolmoderated(const bool &ispoolmoderated) {
    m_ispoolmoderated = ispoolmoderated;
    m_ispoolmoderated_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_ispoolmoderated_Set() const{
    return m_ispoolmoderated_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_ispoolmoderated_Valid() const{
    return m_ispoolmoderated_isValid;
}

QString OAIGetGroupDiscussionsByID_200_response::getLang() const {
    return m_lang;
}
void OAIGetGroupDiscussionsByID_200_response::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_lang_Valid() const{
    return m_lang_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getMembers() const {
    return m_members;
}
void OAIGetGroupDiscussionsByID_200_response::setMembers(const double &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_members_Set() const{
    return m_members_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIGetGroupDiscussionsByID_200_response::getName() const {
    return m_name;
}
void OAIGetGroupDiscussionsByID_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_name_Valid() const{
    return m_name_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getPage() const {
    return m_page;
}
void OAIGetGroupDiscussionsByID_200_response::setPage(const double &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_page_Valid() const{
    return m_page_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getPages() const {
    return m_pages;
}
void OAIGetGroupDiscussionsByID_200_response::setPages(const double &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_pages_Valid() const{
    return m_pages_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getPerPage() const {
    return m_per_page;
}
void OAIGetGroupDiscussionsByID_200_response::setPerPage(const double &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_per_page_Valid() const{
    return m_per_page_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getPrivacy() const {
    return m_privacy;
}
void OAIGetGroupDiscussionsByID_200_response::setPrivacy(const double &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QList<OAITopic> OAIGetGroupDiscussionsByID_200_response::getTopics() const {
    return m_topics;
}
void OAIGetGroupDiscussionsByID_200_response::setTopics(const QList<OAITopic> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_topics_Valid() const{
    return m_topics_isValid;
}

double OAIGetGroupDiscussionsByID_200_response::getTotal() const {
    return m_total;
}
void OAIGetGroupDiscussionsByID_200_response::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetGroupDiscussionsByID_200_response::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetGroupDiscussionsByID_200_response::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetGroupDiscussionsByID_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iconfarm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iconserver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ispoolmoderated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetGroupDiscussionsByID_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
