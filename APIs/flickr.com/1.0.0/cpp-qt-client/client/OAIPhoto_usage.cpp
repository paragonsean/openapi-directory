/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto_usage::OAIPhoto_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto_usage::OAIPhoto_usage() {
    this->initializeModel();
}

OAIPhoto_usage::~OAIPhoto_usage() {}

void OAIPhoto_usage::initializeModel() {

    m_canblog_isSet = false;
    m_canblog_isValid = false;

    m_candownload_isSet = false;
    m_candownload_isValid = false;

    m_canprint_isSet = false;
    m_canprint_isValid = false;

    m_canshare_isSet = false;
    m_canshare_isValid = false;
}

void OAIPhoto_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto_usage::fromJsonObject(QJsonObject json) {

    m_canblog_isValid = ::OpenAPI::fromJsonValue(m_canblog, json[QString("canblog")]);
    m_canblog_isSet = !json[QString("canblog")].isNull() && m_canblog_isValid;

    m_candownload_isValid = ::OpenAPI::fromJsonValue(m_candownload, json[QString("candownload")]);
    m_candownload_isSet = !json[QString("candownload")].isNull() && m_candownload_isValid;

    m_canprint_isValid = ::OpenAPI::fromJsonValue(m_canprint, json[QString("canprint")]);
    m_canprint_isSet = !json[QString("canprint")].isNull() && m_canprint_isValid;

    m_canshare_isValid = ::OpenAPI::fromJsonValue(m_canshare, json[QString("canshare")]);
    m_canshare_isSet = !json[QString("canshare")].isNull() && m_canshare_isValid;
}

QString OAIPhoto_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_canblog_isSet) {
        obj.insert(QString("canblog"), ::OpenAPI::toJsonValue(m_canblog));
    }
    if (m_candownload_isSet) {
        obj.insert(QString("candownload"), ::OpenAPI::toJsonValue(m_candownload));
    }
    if (m_canprint_isSet) {
        obj.insert(QString("canprint"), ::OpenAPI::toJsonValue(m_canprint));
    }
    if (m_canshare_isSet) {
        obj.insert(QString("canshare"), ::OpenAPI::toJsonValue(m_canshare));
    }
    return obj;
}

bool OAIPhoto_usage::isCanblog() const {
    return m_canblog;
}
void OAIPhoto_usage::setCanblog(const bool &canblog) {
    m_canblog = canblog;
    m_canblog_isSet = true;
}

bool OAIPhoto_usage::is_canblog_Set() const{
    return m_canblog_isSet;
}

bool OAIPhoto_usage::is_canblog_Valid() const{
    return m_canblog_isValid;
}

bool OAIPhoto_usage::isCandownload() const {
    return m_candownload;
}
void OAIPhoto_usage::setCandownload(const bool &candownload) {
    m_candownload = candownload;
    m_candownload_isSet = true;
}

bool OAIPhoto_usage::is_candownload_Set() const{
    return m_candownload_isSet;
}

bool OAIPhoto_usage::is_candownload_Valid() const{
    return m_candownload_isValid;
}

bool OAIPhoto_usage::isCanprint() const {
    return m_canprint;
}
void OAIPhoto_usage::setCanprint(const bool &canprint) {
    m_canprint = canprint;
    m_canprint_isSet = true;
}

bool OAIPhoto_usage::is_canprint_Set() const{
    return m_canprint_isSet;
}

bool OAIPhoto_usage::is_canprint_Valid() const{
    return m_canprint_isValid;
}

bool OAIPhoto_usage::isCanshare() const {
    return m_canshare;
}
void OAIPhoto_usage::setCanshare(const bool &canshare) {
    m_canshare = canshare;
    m_canshare_isSet = true;
}

bool OAIPhoto_usage::is_canshare_Set() const{
    return m_canshare_isSet;
}

bool OAIPhoto_usage::is_canshare_Valid() const{
    return m_canshare_isValid;
}

bool OAIPhoto_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canblog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candownload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canshare_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
