/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlbum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlbum::OAIAlbum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlbum::OAIAlbum() {
    this->initializeModel();
}

OAIAlbum::~OAIAlbum() {}

void OAIAlbum::initializeModel() {

    m_can_comment_isSet = false;
    m_can_comment_isValid = false;

    m_count_comments_isSet = false;
    m_count_comments_isValid = false;

    m_count_views_isSet = false;
    m_count_views_isValid = false;

    m_date_create_isSet = false;
    m_date_create_isValid = false;

    m_date_update_isSet = false;
    m_date_update_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_farm_isSet = false;
    m_farm_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_photos_isSet = false;
    m_photos_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIAlbum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlbum::fromJsonObject(QJsonObject json) {

    m_can_comment_isValid = ::OpenAPI::fromJsonValue(m_can_comment, json[QString("can_comment")]);
    m_can_comment_isSet = !json[QString("can_comment")].isNull() && m_can_comment_isValid;

    m_count_comments_isValid = ::OpenAPI::fromJsonValue(m_count_comments, json[QString("count_comments")]);
    m_count_comments_isSet = !json[QString("count_comments")].isNull() && m_count_comments_isValid;

    m_count_views_isValid = ::OpenAPI::fromJsonValue(m_count_views, json[QString("count_views")]);
    m_count_views_isSet = !json[QString("count_views")].isNull() && m_count_views_isValid;

    m_date_create_isValid = ::OpenAPI::fromJsonValue(m_date_create, json[QString("date_create")]);
    m_date_create_isSet = !json[QString("date_create")].isNull() && m_date_create_isValid;

    m_date_update_isValid = ::OpenAPI::fromJsonValue(m_date_update, json[QString("date_update")]);
    m_date_update_isSet = !json[QString("date_update")].isNull() && m_date_update_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_farm_isValid = ::OpenAPI::fromJsonValue(m_farm, json[QString("farm")]);
    m_farm_isSet = !json[QString("farm")].isNull() && m_farm_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_photos_isValid = ::OpenAPI::fromJsonValue(m_photos, json[QString("photos")]);
    m_photos_isSet = !json[QString("photos")].isNull() && m_photos_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIAlbum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlbum::asJsonObject() const {
    QJsonObject obj;
    if (m_can_comment_isSet) {
        obj.insert(QString("can_comment"), ::OpenAPI::toJsonValue(m_can_comment));
    }
    if (m_count_comments_isSet) {
        obj.insert(QString("count_comments"), ::OpenAPI::toJsonValue(m_count_comments));
    }
    if (m_count_views_isSet) {
        obj.insert(QString("count_views"), ::OpenAPI::toJsonValue(m_count_views));
    }
    if (m_date_create_isSet) {
        obj.insert(QString("date_create"), ::OpenAPI::toJsonValue(m_date_create));
    }
    if (m_date_update_isSet) {
        obj.insert(QString("date_update"), ::OpenAPI::toJsonValue(m_date_update));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_farm_isSet) {
        obj.insert(QString("farm"), ::OpenAPI::toJsonValue(m_farm));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_photos_isSet) {
        obj.insert(QString("photos"), ::OpenAPI::toJsonValue(m_photos));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_videos_isSet) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

bool OAIAlbum::isCanComment() const {
    return m_can_comment;
}
void OAIAlbum::setCanComment(const bool &can_comment) {
    m_can_comment = can_comment;
    m_can_comment_isSet = true;
}

bool OAIAlbum::is_can_comment_Set() const{
    return m_can_comment_isSet;
}

bool OAIAlbum::is_can_comment_Valid() const{
    return m_can_comment_isValid;
}

double OAIAlbum::getCountComments() const {
    return m_count_comments;
}
void OAIAlbum::setCountComments(const double &count_comments) {
    m_count_comments = count_comments;
    m_count_comments_isSet = true;
}

bool OAIAlbum::is_count_comments_Set() const{
    return m_count_comments_isSet;
}

bool OAIAlbum::is_count_comments_Valid() const{
    return m_count_comments_isValid;
}

double OAIAlbum::getCountViews() const {
    return m_count_views;
}
void OAIAlbum::setCountViews(const double &count_views) {
    m_count_views = count_views;
    m_count_views_isSet = true;
}

bool OAIAlbum::is_count_views_Set() const{
    return m_count_views_isSet;
}

bool OAIAlbum::is_count_views_Valid() const{
    return m_count_views_isValid;
}

double OAIAlbum::getDateCreate() const {
    return m_date_create;
}
void OAIAlbum::setDateCreate(const double &date_create) {
    m_date_create = date_create;
    m_date_create_isSet = true;
}

bool OAIAlbum::is_date_create_Set() const{
    return m_date_create_isSet;
}

bool OAIAlbum::is_date_create_Valid() const{
    return m_date_create_isValid;
}

double OAIAlbum::getDateUpdate() const {
    return m_date_update;
}
void OAIAlbum::setDateUpdate(const double &date_update) {
    m_date_update = date_update;
    m_date_update_isSet = true;
}

bool OAIAlbum::is_date_update_Set() const{
    return m_date_update_isSet;
}

bool OAIAlbum::is_date_update_Valid() const{
    return m_date_update_isValid;
}

QString OAIAlbum::getDescription() const {
    return m_description;
}
void OAIAlbum::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlbum::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlbum::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAlbum::getFarm() const {
    return m_farm;
}
void OAIAlbum::setFarm(const QString &farm) {
    m_farm = farm;
    m_farm_isSet = true;
}

bool OAIAlbum::is_farm_Set() const{
    return m_farm_isSet;
}

bool OAIAlbum::is_farm_Valid() const{
    return m_farm_isValid;
}

QString OAIAlbum::getId() const {
    return m_id;
}
void OAIAlbum::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlbum::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlbum::is_id_Valid() const{
    return m_id_isValid;
}

double OAIAlbum::getPhotos() const {
    return m_photos;
}
void OAIAlbum::setPhotos(const double &photos) {
    m_photos = photos;
    m_photos_isSet = true;
}

bool OAIAlbum::is_photos_Set() const{
    return m_photos_isSet;
}

bool OAIAlbum::is_photos_Valid() const{
    return m_photos_isValid;
}

QString OAIAlbum::getPrimary() const {
    return m_primary;
}
void OAIAlbum::setPrimary(const QString &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIAlbum::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIAlbum::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIAlbum::getSecret() const {
    return m_secret;
}
void OAIAlbum::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIAlbum::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIAlbum::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIAlbum::getServer() const {
    return m_server;
}
void OAIAlbum::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIAlbum::is_server_Set() const{
    return m_server_isSet;
}

bool OAIAlbum::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIAlbum::getTitle() const {
    return m_title;
}
void OAIAlbum::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAlbum::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAlbum::is_title_Valid() const{
    return m_title_isValid;
}

double OAIAlbum::getVideos() const {
    return m_videos;
}
void OAIAlbum::setVideos(const double &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIAlbum::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIAlbum::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIAlbum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_farm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlbum::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
