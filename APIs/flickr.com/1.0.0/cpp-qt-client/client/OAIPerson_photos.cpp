/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson_photos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson_photos::OAIPerson_photos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson_photos::OAIPerson_photos() {
    this->initializeModel();
}

OAIPerson_photos::~OAIPerson_photos() {}

void OAIPerson_photos::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_firstdate_isSet = false;
    m_firstdate_isValid = false;

    m_firstdatetaken_isSet = false;
    m_firstdatetaken_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIPerson_photos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson_photos::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_firstdate_isValid = ::OpenAPI::fromJsonValue(m_firstdate, json[QString("firstdate")]);
    m_firstdate_isSet = !json[QString("firstdate")].isNull() && m_firstdate_isValid;

    m_firstdatetaken_isValid = ::OpenAPI::fromJsonValue(m_firstdatetaken, json[QString("firstdatetaken")]);
    m_firstdatetaken_isSet = !json[QString("firstdatetaken")].isNull() && m_firstdatetaken_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIPerson_photos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson_photos::asJsonObject() const {
    QJsonObject obj;
    if (m_count.isSet()) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_firstdate.isSet()) {
        obj.insert(QString("firstdate"), ::OpenAPI::toJsonValue(m_firstdate));
    }
    if (m_firstdatetaken.isSet()) {
        obj.insert(QString("firstdatetaken"), ::OpenAPI::toJsonValue(m_firstdatetaken));
    }
    if (m_views.isSet()) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

OAIGetFavoritesContextByID_200_response_count OAIPerson_photos::getCount() const {
    return m_count;
}
void OAIPerson_photos::setCount(const OAIGetFavoritesContextByID_200_response_count &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIPerson_photos::is_count_Set() const{
    return m_count_isSet;
}

bool OAIPerson_photos::is_count_Valid() const{
    return m_count_isValid;
}

OAIGetFavoritesContextByID_200_response_count OAIPerson_photos::getFirstdate() const {
    return m_firstdate;
}
void OAIPerson_photos::setFirstdate(const OAIGetFavoritesContextByID_200_response_count &firstdate) {
    m_firstdate = firstdate;
    m_firstdate_isSet = true;
}

bool OAIPerson_photos::is_firstdate_Set() const{
    return m_firstdate_isSet;
}

bool OAIPerson_photos::is_firstdate_Valid() const{
    return m_firstdate_isValid;
}

OAIGetFavoritesContextByID_200_response_count OAIPerson_photos::getFirstdatetaken() const {
    return m_firstdatetaken;
}
void OAIPerson_photos::setFirstdatetaken(const OAIGetFavoritesContextByID_200_response_count &firstdatetaken) {
    m_firstdatetaken = firstdatetaken;
    m_firstdatetaken_isSet = true;
}

bool OAIPerson_photos::is_firstdatetaken_Set() const{
    return m_firstdatetaken_isSet;
}

bool OAIPerson_photos::is_firstdatetaken_Valid() const{
    return m_firstdatetaken_isValid;
}

OAIGetFavoritesContextByID_200_response_count OAIPerson_photos::getViews() const {
    return m_views;
}
void OAIPerson_photos::setViews(const OAIGetFavoritesContextByID_200_response_count &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIPerson_photos::is_views_Set() const{
    return m_views_isSet;
}

bool OAIPerson_photos::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIPerson_photos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstdate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstdatetaken.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson_photos::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
