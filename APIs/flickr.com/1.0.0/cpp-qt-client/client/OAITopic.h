/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopic.h
 *
 * 
 */

#ifndef OAITopic_H
#define OAITopic_H

#include <QJsonObject>

#include "OAIGetFavoritesContextByID_200_response_count.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetFavoritesContextByID_200_response_count;

class OAITopic : public OAIObject {
public:
    OAITopic();
    OAITopic(QString json);
    ~OAITopic() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthor() const;
    void setAuthor(const QString &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    bool isAuthorIsDeleted() const;
    void setAuthorIsDeleted(const bool &author_is_deleted);
    bool is_author_is_deleted_Set() const;
    bool is_author_is_deleted_Valid() const;

    QString getAuthorPathAlias() const;
    void setAuthorPathAlias(const QString &author_path_alias);
    bool is_author_path_alias_Set() const;
    bool is_author_path_alias_Valid() const;

    QString getAuthorname() const;
    void setAuthorname(const QString &authorname);
    bool is_authorname_Set() const;
    bool is_authorname_Valid() const;

    bool isCanDelete() const;
    void setCanDelete(const bool &can_delete);
    bool is_can_delete_Set() const;
    bool is_can_delete_Valid() const;

    bool isCanEdit() const;
    void setCanEdit(const bool &can_edit);
    bool is_can_edit_Set() const;
    bool is_can_edit_Valid() const;

    bool isCanReply() const;
    void setCanReply(const bool &can_reply);
    bool is_can_reply_Set() const;
    bool is_can_reply_Valid() const;

    qint32 getCountReplies() const;
    void setCountReplies(const qint32 &count_replies);
    bool is_count_replies_Set() const;
    bool is_count_replies_Valid() const;

    QString getDatecreate() const;
    void setDatecreate(const QString &datecreate);
    bool is_datecreate_Set() const;
    bool is_datecreate_Valid() const;

    QString getDatelastpost() const;
    void setDatelastpost(const QString &datelastpost);
    bool is_datelastpost_Set() const;
    bool is_datelastpost_Valid() const;

    QString getIconfarm() const;
    void setIconfarm(const QString &iconfarm);
    bool is_iconfarm_Set() const;
    bool is_iconfarm_Valid() const;

    QString getIconserver() const;
    void setIconserver(const QString &iconserver);
    bool is_iconserver_Set() const;
    bool is_iconserver_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsLocked() const;
    void setIsLocked(const bool &is_locked);
    bool is_is_locked_Set() const;
    bool is_is_locked_Valid() const;

    bool isIsPro() const;
    void setIsPro(const bool &is_pro);
    bool is_is_pro_Set() const;
    bool is_is_pro_Valid() const;

    bool isIsSticky() const;
    void setIsSticky(const bool &is_sticky);
    bool is_is_sticky_Set() const;
    bool is_is_sticky_Valid() const;

    QString getLastReply() const;
    void setLastReply(const QString &last_reply);
    bool is_last_reply_Set() const;
    bool is_last_reply_Valid() const;

    QString getLastedit() const;
    void setLastedit(const QString &lastedit);
    bool is_lastedit_Set() const;
    bool is_lastedit_Valid() const;

    OAIGetFavoritesContextByID_200_response_count getMessage() const;
    void setMessage(const OAIGetFavoritesContextByID_200_response_count &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    bool m_author_is_deleted;
    bool m_author_is_deleted_isSet;
    bool m_author_is_deleted_isValid;

    QString m_author_path_alias;
    bool m_author_path_alias_isSet;
    bool m_author_path_alias_isValid;

    QString m_authorname;
    bool m_authorname_isSet;
    bool m_authorname_isValid;

    bool m_can_delete;
    bool m_can_delete_isSet;
    bool m_can_delete_isValid;

    bool m_can_edit;
    bool m_can_edit_isSet;
    bool m_can_edit_isValid;

    bool m_can_reply;
    bool m_can_reply_isSet;
    bool m_can_reply_isValid;

    qint32 m_count_replies;
    bool m_count_replies_isSet;
    bool m_count_replies_isValid;

    QString m_datecreate;
    bool m_datecreate_isSet;
    bool m_datecreate_isValid;

    QString m_datelastpost;
    bool m_datelastpost_isSet;
    bool m_datelastpost_isValid;

    QString m_iconfarm;
    bool m_iconfarm_isSet;
    bool m_iconfarm_isValid;

    QString m_iconserver;
    bool m_iconserver_isSet;
    bool m_iconserver_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_locked;
    bool m_is_locked_isSet;
    bool m_is_locked_isValid;

    bool m_is_pro;
    bool m_is_pro_isSet;
    bool m_is_pro_isValid;

    bool m_is_sticky;
    bool m_is_sticky_isSet;
    bool m_is_sticky_isValid;

    QString m_last_reply;
    bool m_last_reply_isSet;
    bool m_last_reply_isValid;

    QString m_lastedit;
    bool m_lastedit_isSet;
    bool m_lastedit_isValid;

    OAIGetFavoritesContextByID_200_response_count m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopic)

#endif // OAITopic_H
