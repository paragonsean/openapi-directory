/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICover.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICover::OAICover(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICover::OAICover() {
    this->initializeModel();
}

OAICover::~OAICover() {}

void OAICover::initializeModel() {

    m_farm_isSet = false;
    m_farm_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_isfamily_isSet = false;
    m_isfamily_isValid = false;

    m_isfriend_isSet = false;
    m_isfriend_isValid = false;

    m_ispublic_isSet = false;
    m_ispublic_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAICover::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICover::fromJsonObject(QJsonObject json) {

    m_farm_isValid = ::OpenAPI::fromJsonValue(m_farm, json[QString("farm")]);
    m_farm_isSet = !json[QString("farm")].isNull() && m_farm_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_isfamily_isValid = ::OpenAPI::fromJsonValue(m_isfamily, json[QString("isfamily")]);
    m_isfamily_isSet = !json[QString("isfamily")].isNull() && m_isfamily_isValid;

    m_isfriend_isValid = ::OpenAPI::fromJsonValue(m_isfriend, json[QString("isfriend")]);
    m_isfriend_isSet = !json[QString("isfriend")].isNull() && m_isfriend_isValid;

    m_ispublic_isValid = ::OpenAPI::fromJsonValue(m_ispublic, json[QString("ispublic")]);
    m_ispublic_isSet = !json[QString("ispublic")].isNull() && m_ispublic_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAICover::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICover::asJsonObject() const {
    QJsonObject obj;
    if (m_farm_isSet) {
        obj.insert(QString("farm"), ::OpenAPI::toJsonValue(m_farm));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_isfamily_isSet) {
        obj.insert(QString("isfamily"), ::OpenAPI::toJsonValue(m_isfamily));
    }
    if (m_isfriend_isSet) {
        obj.insert(QString("isfriend"), ::OpenAPI::toJsonValue(m_isfriend));
    }
    if (m_ispublic_isSet) {
        obj.insert(QString("ispublic"), ::OpenAPI::toJsonValue(m_ispublic));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

QString OAICover::getFarm() const {
    return m_farm;
}
void OAICover::setFarm(const QString &farm) {
    m_farm = farm;
    m_farm_isSet = true;
}

bool OAICover::is_farm_Set() const{
    return m_farm_isSet;
}

bool OAICover::is_farm_Valid() const{
    return m_farm_isValid;
}

QString OAICover::getId() const {
    return m_id;
}
void OAICover::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICover::is_id_Set() const{
    return m_id_isSet;
}

bool OAICover::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICover::isIsfamily() const {
    return m_isfamily;
}
void OAICover::setIsfamily(const bool &isfamily) {
    m_isfamily = isfamily;
    m_isfamily_isSet = true;
}

bool OAICover::is_isfamily_Set() const{
    return m_isfamily_isSet;
}

bool OAICover::is_isfamily_Valid() const{
    return m_isfamily_isValid;
}

bool OAICover::isIsfriend() const {
    return m_isfriend;
}
void OAICover::setIsfriend(const bool &isfriend) {
    m_isfriend = isfriend;
    m_isfriend_isSet = true;
}

bool OAICover::is_isfriend_Set() const{
    return m_isfriend_isSet;
}

bool OAICover::is_isfriend_Valid() const{
    return m_isfriend_isValid;
}

bool OAICover::isIspublic() const {
    return m_ispublic;
}
void OAICover::setIspublic(const bool &ispublic) {
    m_ispublic = ispublic;
    m_ispublic_isSet = true;
}

bool OAICover::is_ispublic_Set() const{
    return m_ispublic_isSet;
}

bool OAICover::is_ispublic_Valid() const{
    return m_ispublic_isValid;
}

QString OAICover::getOwner() const {
    return m_owner;
}
void OAICover::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICover::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICover::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICover::getSecret() const {
    return m_secret;
}
void OAICover::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAICover::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAICover::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAICover::getServer() const {
    return m_server;
}
void OAICover::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAICover::is_server_Set() const{
    return m_server_isSet;
}

bool OAICover::is_server_Valid() const{
    return m_server_isValid;
}

QString OAICover::getTitle() const {
    return m_title;
}
void OAICover::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICover::is_title_Set() const{
    return m_title_isSet;
}

bool OAICover::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICover::getY() const {
    return m_y;
}
void OAICover::setY(const QString &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAICover::is_y_Set() const{
    return m_y_isSet;
}

bool OAICover::is_y_Valid() const{
    return m_y_isValid;
}

bool OAICover::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_farm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isfamily_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isfriend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ispublic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICover::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
