/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOwner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOwner::OAIOwner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOwner::OAIOwner() {
    this->initializeModel();
}

OAIOwner::~OAIOwner() {}

void OAIOwner::initializeModel() {

    m_iconfarm_isSet = false;
    m_iconfarm_isValid = false;

    m_iconserver_isSet = false;
    m_iconserver_isValid = false;

    m_is_ad_free_isSet = false;
    m_is_ad_free_isValid = false;

    m_ispro_isSet = false;
    m_ispro_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_noindexfollow_isSet = false;
    m_noindexfollow_isValid = false;

    m_nsid_isSet = false;
    m_nsid_isValid = false;

    m_path_alias_isSet = false;
    m_path_alias_isValid = false;

    m_realname_isSet = false;
    m_realname_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIOwner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOwner::fromJsonObject(QJsonObject json) {

    m_iconfarm_isValid = ::OpenAPI::fromJsonValue(m_iconfarm, json[QString("iconfarm")]);
    m_iconfarm_isSet = !json[QString("iconfarm")].isNull() && m_iconfarm_isValid;

    m_iconserver_isValid = ::OpenAPI::fromJsonValue(m_iconserver, json[QString("iconserver")]);
    m_iconserver_isSet = !json[QString("iconserver")].isNull() && m_iconserver_isValid;

    m_is_ad_free_isValid = ::OpenAPI::fromJsonValue(m_is_ad_free, json[QString("is_ad_free")]);
    m_is_ad_free_isSet = !json[QString("is_ad_free")].isNull() && m_is_ad_free_isValid;

    m_ispro_isValid = ::OpenAPI::fromJsonValue(m_ispro, json[QString("ispro")]);
    m_ispro_isSet = !json[QString("ispro")].isNull() && m_ispro_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_noindexfollow_isValid = ::OpenAPI::fromJsonValue(m_noindexfollow, json[QString("noindexfollow")]);
    m_noindexfollow_isSet = !json[QString("noindexfollow")].isNull() && m_noindexfollow_isValid;

    m_nsid_isValid = ::OpenAPI::fromJsonValue(m_nsid, json[QString("nsid")]);
    m_nsid_isSet = !json[QString("nsid")].isNull() && m_nsid_isValid;

    m_path_alias_isValid = ::OpenAPI::fromJsonValue(m_path_alias, json[QString("path_alias")]);
    m_path_alias_isSet = !json[QString("path_alias")].isNull() && m_path_alias_isValid;

    m_realname_isValid = ::OpenAPI::fromJsonValue(m_realname, json[QString("realname")]);
    m_realname_isSet = !json[QString("realname")].isNull() && m_realname_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIOwner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOwner::asJsonObject() const {
    QJsonObject obj;
    if (m_iconfarm_isSet) {
        obj.insert(QString("iconfarm"), ::OpenAPI::toJsonValue(m_iconfarm));
    }
    if (m_iconserver_isSet) {
        obj.insert(QString("iconserver"), ::OpenAPI::toJsonValue(m_iconserver));
    }
    if (m_is_ad_free_isSet) {
        obj.insert(QString("is_ad_free"), ::OpenAPI::toJsonValue(m_is_ad_free));
    }
    if (m_ispro_isSet) {
        obj.insert(QString("ispro"), ::OpenAPI::toJsonValue(m_ispro));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_noindexfollow_isSet) {
        obj.insert(QString("noindexfollow"), ::OpenAPI::toJsonValue(m_noindexfollow));
    }
    if (m_nsid_isSet) {
        obj.insert(QString("nsid"), ::OpenAPI::toJsonValue(m_nsid));
    }
    if (m_path_alias_isSet) {
        obj.insert(QString("path_alias"), ::OpenAPI::toJsonValue(m_path_alias));
    }
    if (m_realname_isSet) {
        obj.insert(QString("realname"), ::OpenAPI::toJsonValue(m_realname));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIOwner::getIconfarm() const {
    return m_iconfarm;
}
void OAIOwner::setIconfarm(const QString &iconfarm) {
    m_iconfarm = iconfarm;
    m_iconfarm_isSet = true;
}

bool OAIOwner::is_iconfarm_Set() const{
    return m_iconfarm_isSet;
}

bool OAIOwner::is_iconfarm_Valid() const{
    return m_iconfarm_isValid;
}

QString OAIOwner::getIconserver() const {
    return m_iconserver;
}
void OAIOwner::setIconserver(const QString &iconserver) {
    m_iconserver = iconserver;
    m_iconserver_isSet = true;
}

bool OAIOwner::is_iconserver_Set() const{
    return m_iconserver_isSet;
}

bool OAIOwner::is_iconserver_Valid() const{
    return m_iconserver_isValid;
}

bool OAIOwner::isIsAdFree() const {
    return m_is_ad_free;
}
void OAIOwner::setIsAdFree(const bool &is_ad_free) {
    m_is_ad_free = is_ad_free;
    m_is_ad_free_isSet = true;
}

bool OAIOwner::is_is_ad_free_Set() const{
    return m_is_ad_free_isSet;
}

bool OAIOwner::is_is_ad_free_Valid() const{
    return m_is_ad_free_isValid;
}

bool OAIOwner::isIspro() const {
    return m_ispro;
}
void OAIOwner::setIspro(const bool &ispro) {
    m_ispro = ispro;
    m_ispro_isSet = true;
}

bool OAIOwner::is_ispro_Set() const{
    return m_ispro_isSet;
}

bool OAIOwner::is_ispro_Valid() const{
    return m_ispro_isValid;
}

QString OAIOwner::getLocation() const {
    return m_location;
}
void OAIOwner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOwner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOwner::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIOwner::isNoindexfollow() const {
    return m_noindexfollow;
}
void OAIOwner::setNoindexfollow(const bool &noindexfollow) {
    m_noindexfollow = noindexfollow;
    m_noindexfollow_isSet = true;
}

bool OAIOwner::is_noindexfollow_Set() const{
    return m_noindexfollow_isSet;
}

bool OAIOwner::is_noindexfollow_Valid() const{
    return m_noindexfollow_isValid;
}

QString OAIOwner::getNsid() const {
    return m_nsid;
}
void OAIOwner::setNsid(const QString &nsid) {
    m_nsid = nsid;
    m_nsid_isSet = true;
}

bool OAIOwner::is_nsid_Set() const{
    return m_nsid_isSet;
}

bool OAIOwner::is_nsid_Valid() const{
    return m_nsid_isValid;
}

QString OAIOwner::getPathAlias() const {
    return m_path_alias;
}
void OAIOwner::setPathAlias(const QString &path_alias) {
    m_path_alias = path_alias;
    m_path_alias_isSet = true;
}

bool OAIOwner::is_path_alias_Set() const{
    return m_path_alias_isSet;
}

bool OAIOwner::is_path_alias_Valid() const{
    return m_path_alias_isValid;
}

QString OAIOwner::getRealname() const {
    return m_realname;
}
void OAIOwner::setRealname(const QString &realname) {
    m_realname = realname;
    m_realname_isSet = true;
}

bool OAIOwner::is_realname_Set() const{
    return m_realname_isSet;
}

bool OAIOwner::is_realname_Valid() const{
    return m_realname_isValid;
}

QString OAIOwner::getUsername() const {
    return m_username;
}
void OAIOwner::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOwner::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOwner::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOwner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iconfarm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iconserver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ad_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ispro_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noindexfollow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOwner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
