/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag::OAITag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag::OAITag() {
    this->initializeModel();
}

OAITag::~OAITag() {}

void OAITag::initializeModel() {

    m__content_isSet = false;
    m__content_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_authorname_isSet = false;
    m_authorname_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_machine_tag_isSet = false;
    m_machine_tag_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;
}

void OAITag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag::fromJsonObject(QJsonObject json) {

    m__content_isValid = ::OpenAPI::fromJsonValue(m__content, json[QString("_content")]);
    m__content_isSet = !json[QString("_content")].isNull() && m__content_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_authorname_isValid = ::OpenAPI::fromJsonValue(m_authorname, json[QString("authorname")]);
    m_authorname_isSet = !json[QString("authorname")].isNull() && m_authorname_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_machine_tag_isValid = ::OpenAPI::fromJsonValue(m_machine_tag, json[QString("machine_tag")]);
    m_machine_tag_isSet = !json[QString("machine_tag")].isNull() && m_machine_tag_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;
}

QString OAITag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag::asJsonObject() const {
    QJsonObject obj;
    if (m__content_isSet) {
        obj.insert(QString("_content"), ::OpenAPI::toJsonValue(m__content));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_authorname_isSet) {
        obj.insert(QString("authorname"), ::OpenAPI::toJsonValue(m_authorname));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_machine_tag_isSet) {
        obj.insert(QString("machine_tag"), ::OpenAPI::toJsonValue(m_machine_tag));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    return obj;
}

QString OAITag::getContent() const {
    return m__content;
}
void OAITag::setContent(const QString &_content) {
    m__content = _content;
    m__content_isSet = true;
}

bool OAITag::is__content_Set() const{
    return m__content_isSet;
}

bool OAITag::is__content_Valid() const{
    return m__content_isValid;
}

QString OAITag::getAuthor() const {
    return m_author;
}
void OAITag::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAITag::is_author_Set() const{
    return m_author_isSet;
}

bool OAITag::is_author_Valid() const{
    return m_author_isValid;
}

QString OAITag::getAuthorname() const {
    return m_authorname;
}
void OAITag::setAuthorname(const QString &authorname) {
    m_authorname = authorname;
    m_authorname_isSet = true;
}

bool OAITag::is_authorname_Set() const{
    return m_authorname_isSet;
}

bool OAITag::is_authorname_Valid() const{
    return m_authorname_isValid;
}

QString OAITag::getId() const {
    return m_id;
}
void OAITag::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITag::is_id_Set() const{
    return m_id_isSet;
}

bool OAITag::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITag::isMachineTag() const {
    return m_machine_tag;
}
void OAITag::setMachineTag(const bool &machine_tag) {
    m_machine_tag = machine_tag;
    m_machine_tag_isSet = true;
}

bool OAITag::is_machine_tag_Set() const{
    return m_machine_tag_isSet;
}

bool OAITag::is_machine_tag_Valid() const{
    return m_machine_tag_isValid;
}

QString OAITag::getRaw() const {
    return m_raw;
}
void OAITag::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAITag::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAITag::is_raw_Valid() const{
    return m_raw_isValid;
}

bool OAITag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
