/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_blast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_blast::OAIGroup_blast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_blast::OAIGroup_blast() {
    this->initializeModel();
}

OAIGroup_blast::~OAIGroup_blast() {}

void OAIGroup_blast::initializeModel() {

    m__content_isSet = false;
    m__content_isValid = false;

    m_date_blast_added_isSet = false;
    m_date_blast_added_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGroup_blast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_blast::fromJsonObject(QJsonObject json) {

    m__content_isValid = ::OpenAPI::fromJsonValue(m__content, json[QString("_content")]);
    m__content_isSet = !json[QString("_content")].isNull() && m__content_isValid;

    m_date_blast_added_isValid = ::OpenAPI::fromJsonValue(m_date_blast_added, json[QString("date_blast_added")]);
    m_date_blast_added_isSet = !json[QString("date_blast_added")].isNull() && m_date_blast_added_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIGroup_blast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_blast::asJsonObject() const {
    QJsonObject obj;
    if (m__content_isSet) {
        obj.insert(QString("_content"), ::OpenAPI::toJsonValue(m__content));
    }
    if (m_date_blast_added_isSet) {
        obj.insert(QString("date_blast_added"), ::OpenAPI::toJsonValue(m_date_blast_added));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIGroup_blast::getContent() const {
    return m__content;
}
void OAIGroup_blast::setContent(const QString &_content) {
    m__content = _content;
    m__content_isSet = true;
}

bool OAIGroup_blast::is__content_Set() const{
    return m__content_isSet;
}

bool OAIGroup_blast::is__content_Valid() const{
    return m__content_isValid;
}

QString OAIGroup_blast::getDateBlastAdded() const {
    return m_date_blast_added;
}
void OAIGroup_blast::setDateBlastAdded(const QString &date_blast_added) {
    m_date_blast_added = date_blast_added;
    m_date_blast_added_isSet = true;
}

bool OAIGroup_blast::is_date_blast_added_Set() const{
    return m_date_blast_added_isSet;
}

bool OAIGroup_blast::is_date_blast_added_Valid() const{
    return m_date_blast_added_isValid;
}

QString OAIGroup_blast::getUserId() const {
    return m_user_id;
}
void OAIGroup_blast::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGroup_blast::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGroup_blast::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGroup_blast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_blast_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_blast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
