/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPhotoExifByID_200_response_photo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPhotoExifByID_200_response_photo::OAIGetPhotoExifByID_200_response_photo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPhotoExifByID_200_response_photo::OAIGetPhotoExifByID_200_response_photo() {
    this->initializeModel();
}

OAIGetPhotoExifByID_200_response_photo::~OAIGetPhotoExifByID_200_response_photo() {}

void OAIGetPhotoExifByID_200_response_photo::initializeModel() {

    m_camera_isSet = false;
    m_camera_isValid = false;

    m_exif_isSet = false;
    m_exif_isValid = false;

    m_farm_isSet = false;
    m_farm_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;
}

void OAIGetPhotoExifByID_200_response_photo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPhotoExifByID_200_response_photo::fromJsonObject(QJsonObject json) {

    m_camera_isValid = ::OpenAPI::fromJsonValue(m_camera, json[QString("camera")]);
    m_camera_isSet = !json[QString("camera")].isNull() && m_camera_isValid;

    m_exif_isValid = ::OpenAPI::fromJsonValue(m_exif, json[QString("exif")]);
    m_exif_isSet = !json[QString("exif")].isNull() && m_exif_isValid;

    m_farm_isValid = ::OpenAPI::fromJsonValue(m_farm, json[QString("farm")]);
    m_farm_isSet = !json[QString("farm")].isNull() && m_farm_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;
}

QString OAIGetPhotoExifByID_200_response_photo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPhotoExifByID_200_response_photo::asJsonObject() const {
    QJsonObject obj;
    if (m_camera_isSet) {
        obj.insert(QString("camera"), ::OpenAPI::toJsonValue(m_camera));
    }
    if (m_exif.size() > 0) {
        obj.insert(QString("exif"), ::OpenAPI::toJsonValue(m_exif));
    }
    if (m_farm_isSet) {
        obj.insert(QString("farm"), ::OpenAPI::toJsonValue(m_farm));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    return obj;
}

QString OAIGetPhotoExifByID_200_response_photo::getCamera() const {
    return m_camera;
}
void OAIGetPhotoExifByID_200_response_photo::setCamera(const QString &camera) {
    m_camera = camera;
    m_camera_isSet = true;
}

bool OAIGetPhotoExifByID_200_response_photo::is_camera_Set() const{
    return m_camera_isSet;
}

bool OAIGetPhotoExifByID_200_response_photo::is_camera_Valid() const{
    return m_camera_isValid;
}

QList<OAIGetPhotoExifByID_200_response_photo_exif_inner> OAIGetPhotoExifByID_200_response_photo::getExif() const {
    return m_exif;
}
void OAIGetPhotoExifByID_200_response_photo::setExif(const QList<OAIGetPhotoExifByID_200_response_photo_exif_inner> &exif) {
    m_exif = exif;
    m_exif_isSet = true;
}

bool OAIGetPhotoExifByID_200_response_photo::is_exif_Set() const{
    return m_exif_isSet;
}

bool OAIGetPhotoExifByID_200_response_photo::is_exif_Valid() const{
    return m_exif_isValid;
}

QString OAIGetPhotoExifByID_200_response_photo::getFarm() const {
    return m_farm;
}
void OAIGetPhotoExifByID_200_response_photo::setFarm(const QString &farm) {
    m_farm = farm;
    m_farm_isSet = true;
}

bool OAIGetPhotoExifByID_200_response_photo::is_farm_Set() const{
    return m_farm_isSet;
}

bool OAIGetPhotoExifByID_200_response_photo::is_farm_Valid() const{
    return m_farm_isValid;
}

QString OAIGetPhotoExifByID_200_response_photo::getId() const {
    return m_id;
}
void OAIGetPhotoExifByID_200_response_photo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetPhotoExifByID_200_response_photo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetPhotoExifByID_200_response_photo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetPhotoExifByID_200_response_photo::getSecret() const {
    return m_secret;
}
void OAIGetPhotoExifByID_200_response_photo::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIGetPhotoExifByID_200_response_photo::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIGetPhotoExifByID_200_response_photo::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIGetPhotoExifByID_200_response_photo::getServer() const {
    return m_server;
}
void OAIGetPhotoExifByID_200_response_photo::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIGetPhotoExifByID_200_response_photo::is_server_Set() const{
    return m_server_isSet;
}

bool OAIGetPhotoExifByID_200_response_photo::is_server_Valid() const{
    return m_server_isValid;
}

bool OAIGetPhotoExifByID_200_response_photo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_camera_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exif.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_farm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPhotoExifByID_200_response_photo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
