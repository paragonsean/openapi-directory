/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_roles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_roles::OAIGroup_roles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_roles::OAIGroup_roles() {
    this->initializeModel();
}

OAIGroup_roles::~OAIGroup_roles() {}

void OAIGroup_roles::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;
}

void OAIGroup_roles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_roles::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;
}

QString OAIGroup_roles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_roles::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_member_isSet) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_moderator_isSet) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    return obj;
}

QString OAIGroup_roles::getAdmin() const {
    return m_admin;
}
void OAIGroup_roles::setAdmin(const QString &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIGroup_roles::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIGroup_roles::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIGroup_roles::getMember() const {
    return m_member;
}
void OAIGroup_roles::setMember(const QString &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIGroup_roles::is_member_Set() const{
    return m_member_isSet;
}

bool OAIGroup_roles::is_member_Valid() const{
    return m_member_isValid;
}

QString OAIGroup_roles::getModerator() const {
    return m_moderator;
}
void OAIGroup_roles::setModerator(const QString &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIGroup_roles::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIGroup_roles::is_moderator_Valid() const{
    return m_moderator_isValid;
}

bool OAIGroup_roles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_roles::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
