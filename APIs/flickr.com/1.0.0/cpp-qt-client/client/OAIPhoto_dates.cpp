/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto_dates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto_dates::OAIPhoto_dates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto_dates::OAIPhoto_dates() {
    this->initializeModel();
}

OAIPhoto_dates::~OAIPhoto_dates() {}

void OAIPhoto_dates::initializeModel() {

    m_lastupdate_isSet = false;
    m_lastupdate_isValid = false;

    m_posted_isSet = false;
    m_posted_isValid = false;

    m_taken_isSet = false;
    m_taken_isValid = false;

    m_takengranularity_isSet = false;
    m_takengranularity_isValid = false;

    m_takenunknown_isSet = false;
    m_takenunknown_isValid = false;
}

void OAIPhoto_dates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto_dates::fromJsonObject(QJsonObject json) {

    m_lastupdate_isValid = ::OpenAPI::fromJsonValue(m_lastupdate, json[QString("lastupdate")]);
    m_lastupdate_isSet = !json[QString("lastupdate")].isNull() && m_lastupdate_isValid;

    m_posted_isValid = ::OpenAPI::fromJsonValue(m_posted, json[QString("posted")]);
    m_posted_isSet = !json[QString("posted")].isNull() && m_posted_isValid;

    m_taken_isValid = ::OpenAPI::fromJsonValue(m_taken, json[QString("taken")]);
    m_taken_isSet = !json[QString("taken")].isNull() && m_taken_isValid;

    m_takengranularity_isValid = ::OpenAPI::fromJsonValue(m_takengranularity, json[QString("takengranularity")]);
    m_takengranularity_isSet = !json[QString("takengranularity")].isNull() && m_takengranularity_isValid;

    m_takenunknown_isValid = ::OpenAPI::fromJsonValue(m_takenunknown, json[QString("takenunknown")]);
    m_takenunknown_isSet = !json[QString("takenunknown")].isNull() && m_takenunknown_isValid;
}

QString OAIPhoto_dates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto_dates::asJsonObject() const {
    QJsonObject obj;
    if (m_lastupdate_isSet) {
        obj.insert(QString("lastupdate"), ::OpenAPI::toJsonValue(m_lastupdate));
    }
    if (m_posted_isSet) {
        obj.insert(QString("posted"), ::OpenAPI::toJsonValue(m_posted));
    }
    if (m_taken_isSet) {
        obj.insert(QString("taken"), ::OpenAPI::toJsonValue(m_taken));
    }
    if (m_takengranularity_isSet) {
        obj.insert(QString("takengranularity"), ::OpenAPI::toJsonValue(m_takengranularity));
    }
    if (m_takenunknown_isSet) {
        obj.insert(QString("takenunknown"), ::OpenAPI::toJsonValue(m_takenunknown));
    }
    return obj;
}

QString OAIPhoto_dates::getLastupdate() const {
    return m_lastupdate;
}
void OAIPhoto_dates::setLastupdate(const QString &lastupdate) {
    m_lastupdate = lastupdate;
    m_lastupdate_isSet = true;
}

bool OAIPhoto_dates::is_lastupdate_Set() const{
    return m_lastupdate_isSet;
}

bool OAIPhoto_dates::is_lastupdate_Valid() const{
    return m_lastupdate_isValid;
}

QString OAIPhoto_dates::getPosted() const {
    return m_posted;
}
void OAIPhoto_dates::setPosted(const QString &posted) {
    m_posted = posted;
    m_posted_isSet = true;
}

bool OAIPhoto_dates::is_posted_Set() const{
    return m_posted_isSet;
}

bool OAIPhoto_dates::is_posted_Valid() const{
    return m_posted_isValid;
}

QString OAIPhoto_dates::getTaken() const {
    return m_taken;
}
void OAIPhoto_dates::setTaken(const QString &taken) {
    m_taken = taken;
    m_taken_isSet = true;
}

bool OAIPhoto_dates::is_taken_Set() const{
    return m_taken_isSet;
}

bool OAIPhoto_dates::is_taken_Valid() const{
    return m_taken_isValid;
}

QString OAIPhoto_dates::getTakengranularity() const {
    return m_takengranularity;
}
void OAIPhoto_dates::setTakengranularity(const QString &takengranularity) {
    m_takengranularity = takengranularity;
    m_takengranularity_isSet = true;
}

bool OAIPhoto_dates::is_takengranularity_Set() const{
    return m_takengranularity_isSet;
}

bool OAIPhoto_dates::is_takengranularity_Valid() const{
    return m_takengranularity_isValid;
}

bool OAIPhoto_dates::isTakenunknown() const {
    return m_takenunknown;
}
void OAIPhoto_dates::setTakenunknown(const bool &takenunknown) {
    m_takenunknown = takenunknown;
    m_takenunknown_isSet = true;
}

bool OAIPhoto_dates::is_takenunknown_Set() const{
    return m_takenunknown_isSet;
}

bool OAIPhoto_dates::is_takenunknown_Valid() const{
    return m_takenunknown_isValid;
}

bool OAIPhoto_dates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lastupdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_takengranularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_takenunknown_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto_dates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
