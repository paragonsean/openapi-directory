/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_restrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_restrictions::OAIGroup_restrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_restrictions::OAIGroup_restrictions() {
    this->initializeModel();
}

OAIGroup_restrictions::~OAIGroup_restrictions() {}

void OAIGroup_restrictions::initializeModel() {

    m_art_ok_isSet = false;
    m_art_ok_isValid = false;

    m_has_geo_isSet = false;
    m_has_geo_isValid = false;

    m_images_ok_isSet = false;
    m_images_ok_isValid = false;

    m_moderate_ok_isSet = false;
    m_moderate_ok_isValid = false;

    m_photos_ok_isSet = false;
    m_photos_ok_isValid = false;

    m_restricted_ok_isSet = false;
    m_restricted_ok_isValid = false;

    m_safe_ok_isSet = false;
    m_safe_ok_isValid = false;

    m_screens_ok_isSet = false;
    m_screens_ok_isValid = false;

    m_videos_ok_isSet = false;
    m_videos_ok_isValid = false;
}

void OAIGroup_restrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_restrictions::fromJsonObject(QJsonObject json) {

    m_art_ok_isValid = ::OpenAPI::fromJsonValue(m_art_ok, json[QString("art_ok")]);
    m_art_ok_isSet = !json[QString("art_ok")].isNull() && m_art_ok_isValid;

    m_has_geo_isValid = ::OpenAPI::fromJsonValue(m_has_geo, json[QString("has_geo")]);
    m_has_geo_isSet = !json[QString("has_geo")].isNull() && m_has_geo_isValid;

    m_images_ok_isValid = ::OpenAPI::fromJsonValue(m_images_ok, json[QString("images_ok")]);
    m_images_ok_isSet = !json[QString("images_ok")].isNull() && m_images_ok_isValid;

    m_moderate_ok_isValid = ::OpenAPI::fromJsonValue(m_moderate_ok, json[QString("moderate_ok")]);
    m_moderate_ok_isSet = !json[QString("moderate_ok")].isNull() && m_moderate_ok_isValid;

    m_photos_ok_isValid = ::OpenAPI::fromJsonValue(m_photos_ok, json[QString("photos_ok")]);
    m_photos_ok_isSet = !json[QString("photos_ok")].isNull() && m_photos_ok_isValid;

    m_restricted_ok_isValid = ::OpenAPI::fromJsonValue(m_restricted_ok, json[QString("restricted_ok")]);
    m_restricted_ok_isSet = !json[QString("restricted_ok")].isNull() && m_restricted_ok_isValid;

    m_safe_ok_isValid = ::OpenAPI::fromJsonValue(m_safe_ok, json[QString("safe_ok")]);
    m_safe_ok_isSet = !json[QString("safe_ok")].isNull() && m_safe_ok_isValid;

    m_screens_ok_isValid = ::OpenAPI::fromJsonValue(m_screens_ok, json[QString("screens_ok")]);
    m_screens_ok_isSet = !json[QString("screens_ok")].isNull() && m_screens_ok_isValid;

    m_videos_ok_isValid = ::OpenAPI::fromJsonValue(m_videos_ok, json[QString("videos_ok")]);
    m_videos_ok_isSet = !json[QString("videos_ok")].isNull() && m_videos_ok_isValid;
}

QString OAIGroup_restrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_restrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_art_ok_isSet) {
        obj.insert(QString("art_ok"), ::OpenAPI::toJsonValue(m_art_ok));
    }
    if (m_has_geo_isSet) {
        obj.insert(QString("has_geo"), ::OpenAPI::toJsonValue(m_has_geo));
    }
    if (m_images_ok_isSet) {
        obj.insert(QString("images_ok"), ::OpenAPI::toJsonValue(m_images_ok));
    }
    if (m_moderate_ok_isSet) {
        obj.insert(QString("moderate_ok"), ::OpenAPI::toJsonValue(m_moderate_ok));
    }
    if (m_photos_ok_isSet) {
        obj.insert(QString("photos_ok"), ::OpenAPI::toJsonValue(m_photos_ok));
    }
    if (m_restricted_ok_isSet) {
        obj.insert(QString("restricted_ok"), ::OpenAPI::toJsonValue(m_restricted_ok));
    }
    if (m_safe_ok_isSet) {
        obj.insert(QString("safe_ok"), ::OpenAPI::toJsonValue(m_safe_ok));
    }
    if (m_screens_ok_isSet) {
        obj.insert(QString("screens_ok"), ::OpenAPI::toJsonValue(m_screens_ok));
    }
    if (m_videos_ok_isSet) {
        obj.insert(QString("videos_ok"), ::OpenAPI::toJsonValue(m_videos_ok));
    }
    return obj;
}

bool OAIGroup_restrictions::isArtOk() const {
    return m_art_ok;
}
void OAIGroup_restrictions::setArtOk(const bool &art_ok) {
    m_art_ok = art_ok;
    m_art_ok_isSet = true;
}

bool OAIGroup_restrictions::is_art_ok_Set() const{
    return m_art_ok_isSet;
}

bool OAIGroup_restrictions::is_art_ok_Valid() const{
    return m_art_ok_isValid;
}

bool OAIGroup_restrictions::isHasGeo() const {
    return m_has_geo;
}
void OAIGroup_restrictions::setHasGeo(const bool &has_geo) {
    m_has_geo = has_geo;
    m_has_geo_isSet = true;
}

bool OAIGroup_restrictions::is_has_geo_Set() const{
    return m_has_geo_isSet;
}

bool OAIGroup_restrictions::is_has_geo_Valid() const{
    return m_has_geo_isValid;
}

bool OAIGroup_restrictions::isImagesOk() const {
    return m_images_ok;
}
void OAIGroup_restrictions::setImagesOk(const bool &images_ok) {
    m_images_ok = images_ok;
    m_images_ok_isSet = true;
}

bool OAIGroup_restrictions::is_images_ok_Set() const{
    return m_images_ok_isSet;
}

bool OAIGroup_restrictions::is_images_ok_Valid() const{
    return m_images_ok_isValid;
}

bool OAIGroup_restrictions::isModerateOk() const {
    return m_moderate_ok;
}
void OAIGroup_restrictions::setModerateOk(const bool &moderate_ok) {
    m_moderate_ok = moderate_ok;
    m_moderate_ok_isSet = true;
}

bool OAIGroup_restrictions::is_moderate_ok_Set() const{
    return m_moderate_ok_isSet;
}

bool OAIGroup_restrictions::is_moderate_ok_Valid() const{
    return m_moderate_ok_isValid;
}

bool OAIGroup_restrictions::isPhotosOk() const {
    return m_photos_ok;
}
void OAIGroup_restrictions::setPhotosOk(const bool &photos_ok) {
    m_photos_ok = photos_ok;
    m_photos_ok_isSet = true;
}

bool OAIGroup_restrictions::is_photos_ok_Set() const{
    return m_photos_ok_isSet;
}

bool OAIGroup_restrictions::is_photos_ok_Valid() const{
    return m_photos_ok_isValid;
}

bool OAIGroup_restrictions::isRestrictedOk() const {
    return m_restricted_ok;
}
void OAIGroup_restrictions::setRestrictedOk(const bool &restricted_ok) {
    m_restricted_ok = restricted_ok;
    m_restricted_ok_isSet = true;
}

bool OAIGroup_restrictions::is_restricted_ok_Set() const{
    return m_restricted_ok_isSet;
}

bool OAIGroup_restrictions::is_restricted_ok_Valid() const{
    return m_restricted_ok_isValid;
}

bool OAIGroup_restrictions::isSafeOk() const {
    return m_safe_ok;
}
void OAIGroup_restrictions::setSafeOk(const bool &safe_ok) {
    m_safe_ok = safe_ok;
    m_safe_ok_isSet = true;
}

bool OAIGroup_restrictions::is_safe_ok_Set() const{
    return m_safe_ok_isSet;
}

bool OAIGroup_restrictions::is_safe_ok_Valid() const{
    return m_safe_ok_isValid;
}

bool OAIGroup_restrictions::isScreensOk() const {
    return m_screens_ok;
}
void OAIGroup_restrictions::setScreensOk(const bool &screens_ok) {
    m_screens_ok = screens_ok;
    m_screens_ok_isSet = true;
}

bool OAIGroup_restrictions::is_screens_ok_Set() const{
    return m_screens_ok_isSet;
}

bool OAIGroup_restrictions::is_screens_ok_Valid() const{
    return m_screens_ok_isValid;
}

bool OAIGroup_restrictions::isVideosOk() const {
    return m_videos_ok;
}
void OAIGroup_restrictions::setVideosOk(const bool &videos_ok) {
    m_videos_ok = videos_ok;
    m_videos_ok_isSet = true;
}

bool OAIGroup_restrictions::is_videos_ok_Set() const{
    return m_videos_ok_isSet;
}

bool OAIGroup_restrictions::is_videos_ok_Valid() const{
    return m_videos_ok_isValid;
}

bool OAIGroup_restrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_art_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_geo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderate_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screens_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_restrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
