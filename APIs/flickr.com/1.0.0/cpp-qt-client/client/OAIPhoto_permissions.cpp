/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto_permissions::OAIPhoto_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto_permissions::OAIPhoto_permissions() {
    this->initializeModel();
}

OAIPhoto_permissions::~OAIPhoto_permissions() {}

void OAIPhoto_permissions::initializeModel() {

    m_permaddmeta_isSet = false;
    m_permaddmeta_isValid = false;

    m_permcomment_isSet = false;
    m_permcomment_isValid = false;
}

void OAIPhoto_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto_permissions::fromJsonObject(QJsonObject json) {

    m_permaddmeta_isValid = ::OpenAPI::fromJsonValue(m_permaddmeta, json[QString("permaddmeta")]);
    m_permaddmeta_isSet = !json[QString("permaddmeta")].isNull() && m_permaddmeta_isValid;

    m_permcomment_isValid = ::OpenAPI::fromJsonValue(m_permcomment, json[QString("permcomment")]);
    m_permcomment_isSet = !json[QString("permcomment")].isNull() && m_permcomment_isValid;
}

QString OAIPhoto_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_permaddmeta_isSet) {
        obj.insert(QString("permaddmeta"), ::OpenAPI::toJsonValue(m_permaddmeta));
    }
    if (m_permcomment_isSet) {
        obj.insert(QString("permcomment"), ::OpenAPI::toJsonValue(m_permcomment));
    }
    return obj;
}

QString OAIPhoto_permissions::getPermaddmeta() const {
    return m_permaddmeta;
}
void OAIPhoto_permissions::setPermaddmeta(const QString &permaddmeta) {
    m_permaddmeta = permaddmeta;
    m_permaddmeta_isSet = true;
}

bool OAIPhoto_permissions::is_permaddmeta_Set() const{
    return m_permaddmeta_isSet;
}

bool OAIPhoto_permissions::is_permaddmeta_Valid() const{
    return m_permaddmeta_isValid;
}

QString OAIPhoto_permissions::getPermcomment() const {
    return m_permcomment;
}
void OAIPhoto_permissions::setPermcomment(const QString &permcomment) {
    m_permcomment = permcomment;
    m_permcomment_isSet = true;
}

bool OAIPhoto_permissions::is_permcomment_Set() const{
    return m_permcomment_isSet;
}

bool OAIPhoto_permissions::is_permcomment_Valid() const{
    return m_permcomment_isValid;
}

bool OAIPhoto_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permaddmeta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permcomment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
