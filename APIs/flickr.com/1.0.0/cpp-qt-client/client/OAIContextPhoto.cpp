/**
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContextPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContextPhoto::OAIContextPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContextPhoto::OAIContextPhoto() {
    this->initializeModel();
}

OAIContextPhoto::~OAIContextPhoto() {}

void OAIContextPhoto::initializeModel() {

    m_farm_isSet = false;
    m_farm_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_faved_isSet = false;
    m_is_faved_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_safe_isSet = false;
    m_safe_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIContextPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContextPhoto::fromJsonObject(QJsonObject json) {

    m_farm_isValid = ::OpenAPI::fromJsonValue(m_farm, json[QString("farm")]);
    m_farm_isSet = !json[QString("farm")].isNull() && m_farm_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_faved_isValid = ::OpenAPI::fromJsonValue(m_is_faved, json[QString("is_faved")]);
    m_is_faved_isSet = !json[QString("is_faved")].isNull() && m_is_faved_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_safe_isValid = ::OpenAPI::fromJsonValue(m_safe, json[QString("safe")]);
    m_safe_isSet = !json[QString("safe")].isNull() && m_safe_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIContextPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContextPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_farm_isSet) {
        obj.insert(QString("farm"), ::OpenAPI::toJsonValue(m_farm));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_faved_isSet) {
        obj.insert(QString("is_faved"), ::OpenAPI::toJsonValue(m_is_faved));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_media_isSet) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_safe_isSet) {
        obj.insert(QString("safe"), ::OpenAPI::toJsonValue(m_safe));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_thumb_isSet) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIContextPhoto::getFarm() const {
    return m_farm;
}
void OAIContextPhoto::setFarm(const QString &farm) {
    m_farm = farm;
    m_farm_isSet = true;
}

bool OAIContextPhoto::is_farm_Set() const{
    return m_farm_isSet;
}

bool OAIContextPhoto::is_farm_Valid() const{
    return m_farm_isValid;
}

QString OAIContextPhoto::getId() const {
    return m_id;
}
void OAIContextPhoto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContextPhoto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContextPhoto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIContextPhoto::isIsFaved() const {
    return m_is_faved;
}
void OAIContextPhoto::setIsFaved(const bool &is_faved) {
    m_is_faved = is_faved;
    m_is_faved_isSet = true;
}

bool OAIContextPhoto::is_is_faved_Set() const{
    return m_is_faved_isSet;
}

bool OAIContextPhoto::is_is_faved_Valid() const{
    return m_is_faved_isValid;
}

qint32 OAIContextPhoto::getLicense() const {
    return m_license;
}
void OAIContextPhoto::setLicense(const qint32 &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIContextPhoto::is_license_Set() const{
    return m_license_isSet;
}

bool OAIContextPhoto::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIContextPhoto::getMedia() const {
    return m_media;
}
void OAIContextPhoto::setMedia(const QString &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIContextPhoto::is_media_Set() const{
    return m_media_isSet;
}

bool OAIContextPhoto::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIContextPhoto::getOwner() const {
    return m_owner;
}
void OAIContextPhoto::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIContextPhoto::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIContextPhoto::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIContextPhoto::isSafe() const {
    return m_safe;
}
void OAIContextPhoto::setSafe(const bool &safe) {
    m_safe = safe;
    m_safe_isSet = true;
}

bool OAIContextPhoto::is_safe_Set() const{
    return m_safe_isSet;
}

bool OAIContextPhoto::is_safe_Valid() const{
    return m_safe_isValid;
}

QString OAIContextPhoto::getSecret() const {
    return m_secret;
}
void OAIContextPhoto::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIContextPhoto::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIContextPhoto::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIContextPhoto::getServer() const {
    return m_server;
}
void OAIContextPhoto::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIContextPhoto::is_server_Set() const{
    return m_server_isSet;
}

bool OAIContextPhoto::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIContextPhoto::getThumb() const {
    return m_thumb;
}
void OAIContextPhoto::setThumb(const QString &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIContextPhoto::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIContextPhoto::is_thumb_Valid() const{
    return m_thumb_isValid;
}

QString OAIContextPhoto::getTitle() const {
    return m_title;
}
void OAIContextPhoto::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIContextPhoto::is_title_Set() const{
    return m_title_isSet;
}

bool OAIContextPhoto::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIContextPhoto::getUrl() const {
    return m_url;
}
void OAIContextPhoto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContextPhoto::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContextPhoto::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContextPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_farm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_faved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContextPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
