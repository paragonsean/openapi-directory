# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_photo_exif_by_id200_response_photo_exif_inner import GetPhotoExifByID200ResponsePhotoExifInner
from openapi_server import util


class GetPhotoExifByID200ResponsePhoto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, camera: str=None, exif: List[GetPhotoExifByID200ResponsePhotoExifInner]=None, farm: str=None, id: str=None, secret: str=None, server: str=None):
        """GetPhotoExifByID200ResponsePhoto - a model defined in OpenAPI

        :param camera: The camera of this GetPhotoExifByID200ResponsePhoto.
        :param exif: The exif of this GetPhotoExifByID200ResponsePhoto.
        :param farm: The farm of this GetPhotoExifByID200ResponsePhoto.
        :param id: The id of this GetPhotoExifByID200ResponsePhoto.
        :param secret: The secret of this GetPhotoExifByID200ResponsePhoto.
        :param server: The server of this GetPhotoExifByID200ResponsePhoto.
        """
        self.openapi_types = {
            'camera': str,
            'exif': List[GetPhotoExifByID200ResponsePhotoExifInner],
            'farm': str,
            'id': str,
            'secret': str,
            'server': str
        }

        self.attribute_map = {
            'camera': 'camera',
            'exif': 'exif',
            'farm': 'farm',
            'id': 'id',
            'secret': 'secret',
            'server': 'server'
        }

        self._camera = camera
        self._exif = exif
        self._farm = farm
        self._id = id
        self._secret = secret
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPhotoExifByID200ResponsePhoto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getPhotoExifByID_200_response_photo of this GetPhotoExifByID200ResponsePhoto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def camera(self):
        """Gets the camera of this GetPhotoExifByID200ResponsePhoto.


        :return: The camera of this GetPhotoExifByID200ResponsePhoto.
        :rtype: str
        """
        return self._camera

    @camera.setter
    def camera(self, camera):
        """Sets the camera of this GetPhotoExifByID200ResponsePhoto.


        :param camera: The camera of this GetPhotoExifByID200ResponsePhoto.
        :type camera: str
        """

        self._camera = camera

    @property
    def exif(self):
        """Gets the exif of this GetPhotoExifByID200ResponsePhoto.


        :return: The exif of this GetPhotoExifByID200ResponsePhoto.
        :rtype: List[GetPhotoExifByID200ResponsePhotoExifInner]
        """
        return self._exif

    @exif.setter
    def exif(self, exif):
        """Sets the exif of this GetPhotoExifByID200ResponsePhoto.


        :param exif: The exif of this GetPhotoExifByID200ResponsePhoto.
        :type exif: List[GetPhotoExifByID200ResponsePhotoExifInner]
        """

        self._exif = exif

    @property
    def farm(self):
        """Gets the farm of this GetPhotoExifByID200ResponsePhoto.


        :return: The farm of this GetPhotoExifByID200ResponsePhoto.
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this GetPhotoExifByID200ResponsePhoto.


        :param farm: The farm of this GetPhotoExifByID200ResponsePhoto.
        :type farm: str
        """

        self._farm = farm

    @property
    def id(self):
        """Gets the id of this GetPhotoExifByID200ResponsePhoto.


        :return: The id of this GetPhotoExifByID200ResponsePhoto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetPhotoExifByID200ResponsePhoto.


        :param id: The id of this GetPhotoExifByID200ResponsePhoto.
        :type id: str
        """

        self._id = id

    @property
    def secret(self):
        """Gets the secret of this GetPhotoExifByID200ResponsePhoto.


        :return: The secret of this GetPhotoExifByID200ResponsePhoto.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this GetPhotoExifByID200ResponsePhoto.


        :param secret: The secret of this GetPhotoExifByID200ResponsePhoto.
        :type secret: str
        """

        self._secret = secret

    @property
    def server(self):
        """Gets the server of this GetPhotoExifByID200ResponsePhoto.


        :return: The server of this GetPhotoExifByID200ResponsePhoto.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this GetPhotoExifByID200ResponsePhoto.


        :param server: The server of this GetPhotoExifByID200ResponsePhoto.
        :type server: str
        """

        self._server = server
