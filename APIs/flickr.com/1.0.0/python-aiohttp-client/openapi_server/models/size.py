# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Size(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: float=None, label: str=None, media: str=None, source: str=None, url: str=None, width: float=None):
        """Size - a model defined in OpenAPI

        :param height: The height of this Size.
        :param label: The label of this Size.
        :param media: The media of this Size.
        :param source: The source of this Size.
        :param url: The url of this Size.
        :param width: The width of this Size.
        """
        self.openapi_types = {
            'height': float,
            'label': str,
            'media': str,
            'source': str,
            'url': str,
            'width': float
        }

        self.attribute_map = {
            'height': 'height',
            'label': 'label',
            'media': 'media',
            'source': 'source',
            'url': 'url',
            'width': 'width'
        }

        self._height = height
        self._label = label
        self._media = media
        self._source = source
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Size':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Size of this Size.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Size.


        :return: The height of this Size.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Size.


        :param height: The height of this Size.
        :type height: float
        """

        self._height = height

    @property
    def label(self):
        """Gets the label of this Size.


        :return: The label of this Size.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Size.


        :param label: The label of this Size.
        :type label: str
        """

        self._label = label

    @property
    def media(self):
        """Gets the media of this Size.


        :return: The media of this Size.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Size.


        :param media: The media of this Size.
        :type media: str
        """

        self._media = media

    @property
    def source(self):
        """Gets the source of this Size.


        :return: The source of this Size.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Size.


        :param source: The source of this Size.
        :type source: str
        """

        self._source = source

    @property
    def url(self):
        """Gets the url of this Size.


        :return: The url of this Size.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Size.


        :param url: The url of this Size.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this Size.


        :return: The width of this Size.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Size.


        :param width: The width of this Size.
        :type width: float
        """

        self._width = width
