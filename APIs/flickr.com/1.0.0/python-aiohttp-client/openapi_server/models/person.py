# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cover import Cover
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server.models.person_photos import PersonPhotos
from openapi_server.models.person_timezone import PersonTimezone
from openapi_server.models.photo_urls import PhotoURLs
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_buy_pro: bool=None, cover: Cover=None, coverphoto: PhotoURLs=None, coverphoto_farm: str=None, coverphoto_server: str=None, description: GetFavoritesContextByID200ResponseCount=None, disable_keyboard_shortcuts: GetFavoritesContextByID200ResponseCount=None, expire: bool=None, has_stats: bool=None, iconfarm: str=None, iconserver: str=None, id: str=None, is_ad_free: bool=None, ispro: bool=None, location: GetFavoritesContextByID200ResponseCount=None, mbox_sha1sum: GetFavoritesContextByID200ResponseCount=None, mobileurl: GetFavoritesContextByID200ResponseCount=None, nsid: str=None, path_alias: str=None, photos: PersonPhotos=None, photosurl: GetFavoritesContextByID200ResponseCount=None, profileurl: GetFavoritesContextByID200ResponseCount=None, realname: GetFavoritesContextByID200ResponseCount=None, timezone: PersonTimezone=None, unread_messages: GetFavoritesContextByID200ResponseCount=None, user_secret: str=None, username: GetFavoritesContextByID200ResponseCount=None, yintl: str=None):
        """Person - a model defined in OpenAPI

        :param can_buy_pro: The can_buy_pro of this Person.
        :param cover: The cover of this Person.
        :param coverphoto: The coverphoto of this Person.
        :param coverphoto_farm: The coverphoto_farm of this Person.
        :param coverphoto_server: The coverphoto_server of this Person.
        :param description: The description of this Person.
        :param disable_keyboard_shortcuts: The disable_keyboard_shortcuts of this Person.
        :param expire: The expire of this Person.
        :param has_stats: The has_stats of this Person.
        :param iconfarm: The iconfarm of this Person.
        :param iconserver: The iconserver of this Person.
        :param id: The id of this Person.
        :param is_ad_free: The is_ad_free of this Person.
        :param ispro: The ispro of this Person.
        :param location: The location of this Person.
        :param mbox_sha1sum: The mbox_sha1sum of this Person.
        :param mobileurl: The mobileurl of this Person.
        :param nsid: The nsid of this Person.
        :param path_alias: The path_alias of this Person.
        :param photos: The photos of this Person.
        :param photosurl: The photosurl of this Person.
        :param profileurl: The profileurl of this Person.
        :param realname: The realname of this Person.
        :param timezone: The timezone of this Person.
        :param unread_messages: The unread_messages of this Person.
        :param user_secret: The user_secret of this Person.
        :param username: The username of this Person.
        :param yintl: The yintl of this Person.
        """
        self.openapi_types = {
            'can_buy_pro': bool,
            'cover': Cover,
            'coverphoto': PhotoURLs,
            'coverphoto_farm': str,
            'coverphoto_server': str,
            'description': GetFavoritesContextByID200ResponseCount,
            'disable_keyboard_shortcuts': GetFavoritesContextByID200ResponseCount,
            'expire': bool,
            'has_stats': bool,
            'iconfarm': str,
            'iconserver': str,
            'id': str,
            'is_ad_free': bool,
            'ispro': bool,
            'location': GetFavoritesContextByID200ResponseCount,
            'mbox_sha1sum': GetFavoritesContextByID200ResponseCount,
            'mobileurl': GetFavoritesContextByID200ResponseCount,
            'nsid': str,
            'path_alias': str,
            'photos': PersonPhotos,
            'photosurl': GetFavoritesContextByID200ResponseCount,
            'profileurl': GetFavoritesContextByID200ResponseCount,
            'realname': GetFavoritesContextByID200ResponseCount,
            'timezone': PersonTimezone,
            'unread_messages': GetFavoritesContextByID200ResponseCount,
            'user_secret': str,
            'username': GetFavoritesContextByID200ResponseCount,
            'yintl': str
        }

        self.attribute_map = {
            'can_buy_pro': 'can_buy_pro',
            'cover': 'cover',
            'coverphoto': 'coverphoto',
            'coverphoto_farm': 'coverphoto_farm',
            'coverphoto_server': 'coverphoto_server',
            'description': 'description',
            'disable_keyboard_shortcuts': 'disable_keyboard_shortcuts',
            'expire': 'expire',
            'has_stats': 'has_stats',
            'iconfarm': 'iconfarm',
            'iconserver': 'iconserver',
            'id': 'id',
            'is_ad_free': 'is_ad_free',
            'ispro': 'ispro',
            'location': 'location',
            'mbox_sha1sum': 'mbox_sha1sum',
            'mobileurl': 'mobileurl',
            'nsid': 'nsid',
            'path_alias': 'path_alias',
            'photos': 'photos',
            'photosurl': 'photosurl',
            'profileurl': 'profileurl',
            'realname': 'realname',
            'timezone': 'timezone',
            'unread_messages': 'unread_messages',
            'user_secret': 'user_secret',
            'username': 'username',
            'yintl': 'yintl'
        }

        self._can_buy_pro = can_buy_pro
        self._cover = cover
        self._coverphoto = coverphoto
        self._coverphoto_farm = coverphoto_farm
        self._coverphoto_server = coverphoto_server
        self._description = description
        self._disable_keyboard_shortcuts = disable_keyboard_shortcuts
        self._expire = expire
        self._has_stats = has_stats
        self._iconfarm = iconfarm
        self._iconserver = iconserver
        self._id = id
        self._is_ad_free = is_ad_free
        self._ispro = ispro
        self._location = location
        self._mbox_sha1sum = mbox_sha1sum
        self._mobileurl = mobileurl
        self._nsid = nsid
        self._path_alias = path_alias
        self._photos = photos
        self._photosurl = photosurl
        self._profileurl = profileurl
        self._realname = realname
        self._timezone = timezone
        self._unread_messages = unread_messages
        self._user_secret = user_secret
        self._username = username
        self._yintl = yintl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_buy_pro(self):
        """Gets the can_buy_pro of this Person.


        :return: The can_buy_pro of this Person.
        :rtype: bool
        """
        return self._can_buy_pro

    @can_buy_pro.setter
    def can_buy_pro(self, can_buy_pro):
        """Sets the can_buy_pro of this Person.


        :param can_buy_pro: The can_buy_pro of this Person.
        :type can_buy_pro: bool
        """

        self._can_buy_pro = can_buy_pro

    @property
    def cover(self):
        """Gets the cover of this Person.


        :return: The cover of this Person.
        :rtype: Cover
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Person.


        :param cover: The cover of this Person.
        :type cover: Cover
        """

        self._cover = cover

    @property
    def coverphoto(self):
        """Gets the coverphoto of this Person.


        :return: The coverphoto of this Person.
        :rtype: PhotoURLs
        """
        return self._coverphoto

    @coverphoto.setter
    def coverphoto(self, coverphoto):
        """Sets the coverphoto of this Person.


        :param coverphoto: The coverphoto of this Person.
        :type coverphoto: PhotoURLs
        """

        self._coverphoto = coverphoto

    @property
    def coverphoto_farm(self):
        """Gets the coverphoto_farm of this Person.


        :return: The coverphoto_farm of this Person.
        :rtype: str
        """
        return self._coverphoto_farm

    @coverphoto_farm.setter
    def coverphoto_farm(self, coverphoto_farm):
        """Sets the coverphoto_farm of this Person.


        :param coverphoto_farm: The coverphoto_farm of this Person.
        :type coverphoto_farm: str
        """

        self._coverphoto_farm = coverphoto_farm

    @property
    def coverphoto_server(self):
        """Gets the coverphoto_server of this Person.


        :return: The coverphoto_server of this Person.
        :rtype: str
        """
        return self._coverphoto_server

    @coverphoto_server.setter
    def coverphoto_server(self, coverphoto_server):
        """Sets the coverphoto_server of this Person.


        :param coverphoto_server: The coverphoto_server of this Person.
        :type coverphoto_server: str
        """

        self._coverphoto_server = coverphoto_server

    @property
    def description(self):
        """Gets the description of this Person.


        :return: The description of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Person.


        :param description: The description of this Person.
        :type description: GetFavoritesContextByID200ResponseCount
        """

        self._description = description

    @property
    def disable_keyboard_shortcuts(self):
        """Gets the disable_keyboard_shortcuts of this Person.


        :return: The disable_keyboard_shortcuts of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._disable_keyboard_shortcuts

    @disable_keyboard_shortcuts.setter
    def disable_keyboard_shortcuts(self, disable_keyboard_shortcuts):
        """Sets the disable_keyboard_shortcuts of this Person.


        :param disable_keyboard_shortcuts: The disable_keyboard_shortcuts of this Person.
        :type disable_keyboard_shortcuts: GetFavoritesContextByID200ResponseCount
        """

        self._disable_keyboard_shortcuts = disable_keyboard_shortcuts

    @property
    def expire(self):
        """Gets the expire of this Person.


        :return: The expire of this Person.
        :rtype: bool
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this Person.


        :param expire: The expire of this Person.
        :type expire: bool
        """

        self._expire = expire

    @property
    def has_stats(self):
        """Gets the has_stats of this Person.


        :return: The has_stats of this Person.
        :rtype: bool
        """
        return self._has_stats

    @has_stats.setter
    def has_stats(self, has_stats):
        """Sets the has_stats of this Person.


        :param has_stats: The has_stats of this Person.
        :type has_stats: bool
        """

        self._has_stats = has_stats

    @property
    def iconfarm(self):
        """Gets the iconfarm of this Person.


        :return: The iconfarm of this Person.
        :rtype: str
        """
        return self._iconfarm

    @iconfarm.setter
    def iconfarm(self, iconfarm):
        """Sets the iconfarm of this Person.


        :param iconfarm: The iconfarm of this Person.
        :type iconfarm: str
        """

        self._iconfarm = iconfarm

    @property
    def iconserver(self):
        """Gets the iconserver of this Person.


        :return: The iconserver of this Person.
        :rtype: str
        """
        return self._iconserver

    @iconserver.setter
    def iconserver(self, iconserver):
        """Sets the iconserver of this Person.


        :param iconserver: The iconserver of this Person.
        :type iconserver: str
        """

        self._iconserver = iconserver

    @property
    def id(self):
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def is_ad_free(self):
        """Gets the is_ad_free of this Person.


        :return: The is_ad_free of this Person.
        :rtype: bool
        """
        return self._is_ad_free

    @is_ad_free.setter
    def is_ad_free(self, is_ad_free):
        """Sets the is_ad_free of this Person.


        :param is_ad_free: The is_ad_free of this Person.
        :type is_ad_free: bool
        """

        self._is_ad_free = is_ad_free

    @property
    def ispro(self):
        """Gets the ispro of this Person.


        :return: The ispro of this Person.
        :rtype: bool
        """
        return self._ispro

    @ispro.setter
    def ispro(self, ispro):
        """Sets the ispro of this Person.


        :param ispro: The ispro of this Person.
        :type ispro: bool
        """

        self._ispro = ispro

    @property
    def location(self):
        """Gets the location of this Person.


        :return: The location of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Person.


        :param location: The location of this Person.
        :type location: GetFavoritesContextByID200ResponseCount
        """

        self._location = location

    @property
    def mbox_sha1sum(self):
        """Gets the mbox_sha1sum of this Person.


        :return: The mbox_sha1sum of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._mbox_sha1sum

    @mbox_sha1sum.setter
    def mbox_sha1sum(self, mbox_sha1sum):
        """Sets the mbox_sha1sum of this Person.


        :param mbox_sha1sum: The mbox_sha1sum of this Person.
        :type mbox_sha1sum: GetFavoritesContextByID200ResponseCount
        """

        self._mbox_sha1sum = mbox_sha1sum

    @property
    def mobileurl(self):
        """Gets the mobileurl of this Person.


        :return: The mobileurl of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._mobileurl

    @mobileurl.setter
    def mobileurl(self, mobileurl):
        """Sets the mobileurl of this Person.


        :param mobileurl: The mobileurl of this Person.
        :type mobileurl: GetFavoritesContextByID200ResponseCount
        """

        self._mobileurl = mobileurl

    @property
    def nsid(self):
        """Gets the nsid of this Person.


        :return: The nsid of this Person.
        :rtype: str
        """
        return self._nsid

    @nsid.setter
    def nsid(self, nsid):
        """Sets the nsid of this Person.


        :param nsid: The nsid of this Person.
        :type nsid: str
        """

        self._nsid = nsid

    @property
    def path_alias(self):
        """Gets the path_alias of this Person.


        :return: The path_alias of this Person.
        :rtype: str
        """
        return self._path_alias

    @path_alias.setter
    def path_alias(self, path_alias):
        """Sets the path_alias of this Person.


        :param path_alias: The path_alias of this Person.
        :type path_alias: str
        """

        self._path_alias = path_alias

    @property
    def photos(self):
        """Gets the photos of this Person.


        :return: The photos of this Person.
        :rtype: PersonPhotos
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Person.


        :param photos: The photos of this Person.
        :type photos: PersonPhotos
        """

        self._photos = photos

    @property
    def photosurl(self):
        """Gets the photosurl of this Person.


        :return: The photosurl of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._photosurl

    @photosurl.setter
    def photosurl(self, photosurl):
        """Sets the photosurl of this Person.


        :param photosurl: The photosurl of this Person.
        :type photosurl: GetFavoritesContextByID200ResponseCount
        """

        self._photosurl = photosurl

    @property
    def profileurl(self):
        """Gets the profileurl of this Person.


        :return: The profileurl of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._profileurl

    @profileurl.setter
    def profileurl(self, profileurl):
        """Sets the profileurl of this Person.


        :param profileurl: The profileurl of this Person.
        :type profileurl: GetFavoritesContextByID200ResponseCount
        """

        self._profileurl = profileurl

    @property
    def realname(self):
        """Gets the realname of this Person.


        :return: The realname of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._realname

    @realname.setter
    def realname(self, realname):
        """Sets the realname of this Person.


        :param realname: The realname of this Person.
        :type realname: GetFavoritesContextByID200ResponseCount
        """

        self._realname = realname

    @property
    def timezone(self):
        """Gets the timezone of this Person.


        :return: The timezone of this Person.
        :rtype: PersonTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Person.


        :param timezone: The timezone of this Person.
        :type timezone: PersonTimezone
        """

        self._timezone = timezone

    @property
    def unread_messages(self):
        """Gets the unread_messages of this Person.


        :return: The unread_messages of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._unread_messages

    @unread_messages.setter
    def unread_messages(self, unread_messages):
        """Sets the unread_messages of this Person.


        :param unread_messages: The unread_messages of this Person.
        :type unread_messages: GetFavoritesContextByID200ResponseCount
        """

        self._unread_messages = unread_messages

    @property
    def user_secret(self):
        """Gets the user_secret of this Person.


        :return: The user_secret of this Person.
        :rtype: str
        """
        return self._user_secret

    @user_secret.setter
    def user_secret(self, user_secret):
        """Sets the user_secret of this Person.


        :param user_secret: The user_secret of this Person.
        :type user_secret: str
        """

        self._user_secret = user_secret

    @property
    def username(self):
        """Gets the username of this Person.


        :return: The username of this Person.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Person.


        :param username: The username of this Person.
        :type username: GetFavoritesContextByID200ResponseCount
        """

        self._username = username

    @property
    def yintl(self):
        """Gets the yintl of this Person.


        :return: The yintl of this Person.
        :rtype: str
        """
        return self._yintl

    @yintl.setter
    def yintl(self, yintl):
        """Sets the yintl of this Person.


        :param yintl: The yintl of this Person.
        :type yintl: str
        """

        self._yintl = yintl
