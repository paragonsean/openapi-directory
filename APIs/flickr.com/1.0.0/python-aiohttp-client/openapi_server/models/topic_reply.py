# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server import util


class TopicReply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, author_is_deleted: bool=None, author_path_alias: str=None, authorname: str=None, can_delete: bool=None, can_edit: bool=None, datecreate: str=None, iconfarm: str=None, iconserver: str=None, id: str=None, is_pro: bool=None, lastedit: str=None, message: GetFavoritesContextByID200ResponseCount=None):
        """TopicReply - a model defined in OpenAPI

        :param author: The author of this TopicReply.
        :param author_is_deleted: The author_is_deleted of this TopicReply.
        :param author_path_alias: The author_path_alias of this TopicReply.
        :param authorname: The authorname of this TopicReply.
        :param can_delete: The can_delete of this TopicReply.
        :param can_edit: The can_edit of this TopicReply.
        :param datecreate: The datecreate of this TopicReply.
        :param iconfarm: The iconfarm of this TopicReply.
        :param iconserver: The iconserver of this TopicReply.
        :param id: The id of this TopicReply.
        :param is_pro: The is_pro of this TopicReply.
        :param lastedit: The lastedit of this TopicReply.
        :param message: The message of this TopicReply.
        """
        self.openapi_types = {
            'author': str,
            'author_is_deleted': bool,
            'author_path_alias': str,
            'authorname': str,
            'can_delete': bool,
            'can_edit': bool,
            'datecreate': str,
            'iconfarm': str,
            'iconserver': str,
            'id': str,
            'is_pro': bool,
            'lastedit': str,
            'message': GetFavoritesContextByID200ResponseCount
        }

        self.attribute_map = {
            'author': 'author',
            'author_is_deleted': 'author_is_deleted',
            'author_path_alias': 'author_path_alias',
            'authorname': 'authorname',
            'can_delete': 'can_delete',
            'can_edit': 'can_edit',
            'datecreate': 'datecreate',
            'iconfarm': 'iconfarm',
            'iconserver': 'iconserver',
            'id': 'id',
            'is_pro': 'is_pro',
            'lastedit': 'lastedit',
            'message': 'message'
        }

        self._author = author
        self._author_is_deleted = author_is_deleted
        self._author_path_alias = author_path_alias
        self._authorname = authorname
        self._can_delete = can_delete
        self._can_edit = can_edit
        self._datecreate = datecreate
        self._iconfarm = iconfarm
        self._iconserver = iconserver
        self._id = id
        self._is_pro = is_pro
        self._lastedit = lastedit
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicReply':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicReply of this TopicReply.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this TopicReply.


        :return: The author of this TopicReply.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TopicReply.


        :param author: The author of this TopicReply.
        :type author: str
        """

        self._author = author

    @property
    def author_is_deleted(self):
        """Gets the author_is_deleted of this TopicReply.


        :return: The author_is_deleted of this TopicReply.
        :rtype: bool
        """
        return self._author_is_deleted

    @author_is_deleted.setter
    def author_is_deleted(self, author_is_deleted):
        """Sets the author_is_deleted of this TopicReply.


        :param author_is_deleted: The author_is_deleted of this TopicReply.
        :type author_is_deleted: bool
        """

        self._author_is_deleted = author_is_deleted

    @property
    def author_path_alias(self):
        """Gets the author_path_alias of this TopicReply.


        :return: The author_path_alias of this TopicReply.
        :rtype: str
        """
        return self._author_path_alias

    @author_path_alias.setter
    def author_path_alias(self, author_path_alias):
        """Sets the author_path_alias of this TopicReply.


        :param author_path_alias: The author_path_alias of this TopicReply.
        :type author_path_alias: str
        """

        self._author_path_alias = author_path_alias

    @property
    def authorname(self):
        """Gets the authorname of this TopicReply.


        :return: The authorname of this TopicReply.
        :rtype: str
        """
        return self._authorname

    @authorname.setter
    def authorname(self, authorname):
        """Sets the authorname of this TopicReply.


        :param authorname: The authorname of this TopicReply.
        :type authorname: str
        """

        self._authorname = authorname

    @property
    def can_delete(self):
        """Gets the can_delete of this TopicReply.


        :return: The can_delete of this TopicReply.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this TopicReply.


        :param can_delete: The can_delete of this TopicReply.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this TopicReply.


        :return: The can_edit of this TopicReply.
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this TopicReply.


        :param can_edit: The can_edit of this TopicReply.
        :type can_edit: bool
        """

        self._can_edit = can_edit

    @property
    def datecreate(self):
        """Gets the datecreate of this TopicReply.


        :return: The datecreate of this TopicReply.
        :rtype: str
        """
        return self._datecreate

    @datecreate.setter
    def datecreate(self, datecreate):
        """Sets the datecreate of this TopicReply.


        :param datecreate: The datecreate of this TopicReply.
        :type datecreate: str
        """

        self._datecreate = datecreate

    @property
    def iconfarm(self):
        """Gets the iconfarm of this TopicReply.


        :return: The iconfarm of this TopicReply.
        :rtype: str
        """
        return self._iconfarm

    @iconfarm.setter
    def iconfarm(self, iconfarm):
        """Sets the iconfarm of this TopicReply.


        :param iconfarm: The iconfarm of this TopicReply.
        :type iconfarm: str
        """

        self._iconfarm = iconfarm

    @property
    def iconserver(self):
        """Gets the iconserver of this TopicReply.


        :return: The iconserver of this TopicReply.
        :rtype: str
        """
        return self._iconserver

    @iconserver.setter
    def iconserver(self, iconserver):
        """Sets the iconserver of this TopicReply.


        :param iconserver: The iconserver of this TopicReply.
        :type iconserver: str
        """

        self._iconserver = iconserver

    @property
    def id(self):
        """Gets the id of this TopicReply.


        :return: The id of this TopicReply.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TopicReply.


        :param id: The id of this TopicReply.
        :type id: str
        """

        self._id = id

    @property
    def is_pro(self):
        """Gets the is_pro of this TopicReply.


        :return: The is_pro of this TopicReply.
        :rtype: bool
        """
        return self._is_pro

    @is_pro.setter
    def is_pro(self, is_pro):
        """Sets the is_pro of this TopicReply.


        :param is_pro: The is_pro of this TopicReply.
        :type is_pro: bool
        """

        self._is_pro = is_pro

    @property
    def lastedit(self):
        """Gets the lastedit of this TopicReply.


        :return: The lastedit of this TopicReply.
        :rtype: str
        """
        return self._lastedit

    @lastedit.setter
    def lastedit(self, lastedit):
        """Sets the lastedit of this TopicReply.


        :param lastedit: The lastedit of this TopicReply.
        :type lastedit: str
        """

        self._lastedit = lastedit

    @property
    def message(self):
        """Gets the message of this TopicReply.


        :return: The message of this TopicReply.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TopicReply.


        :param message: The message of this TopicReply.
        :type message: GetFavoritesContextByID200ResponseCount
        """

        self._message = message
