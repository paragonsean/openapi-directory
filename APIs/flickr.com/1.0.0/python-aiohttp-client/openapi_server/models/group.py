# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cover import Cover
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server.models.group_blast import GroupBlast
from openapi_server.models.group_restrictions import GroupRestrictions
from openapi_server.models.group_roles import GroupRoles
from openapi_server.models.group_throttle import GroupThrottle
from openapi_server.models.photo_urls import PhotoURLs
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blast: GroupBlast=None, cover: Cover=None, coverphoto_farm: str=None, coverphoto_server: str=None, coverphoto_url: PhotoURLs=None, description: GetFavoritesContextByID200ResponseCount=None, iconfarm: str=None, iconserver: str=None, id: str=None, is_admin: bool=None, is_member: bool=None, is_moderator: bool=None, ispoolmoderated: bool=None, lang: str=None, members: GetFavoritesContextByID200ResponseCount=None, name: GetFavoritesContextByID200ResponseCount=None, path_alias: str=None, pool_count: GetFavoritesContextByID200ResponseCount=None, pool_rows: int=None, privacy: GetFavoritesContextByID200ResponseCount=None, restrictions: GroupRestrictions=None, roles: GroupRoles=None, rules: GetFavoritesContextByID200ResponseCount=None, throttle: GroupThrottle=None, topic_count: GetFavoritesContextByID200ResponseCount=None):
        """Group - a model defined in OpenAPI

        :param blast: The blast of this Group.
        :param cover: The cover of this Group.
        :param coverphoto_farm: The coverphoto_farm of this Group.
        :param coverphoto_server: The coverphoto_server of this Group.
        :param coverphoto_url: The coverphoto_url of this Group.
        :param description: The description of this Group.
        :param iconfarm: The iconfarm of this Group.
        :param iconserver: The iconserver of this Group.
        :param id: The id of this Group.
        :param is_admin: The is_admin of this Group.
        :param is_member: The is_member of this Group.
        :param is_moderator: The is_moderator of this Group.
        :param ispoolmoderated: The ispoolmoderated of this Group.
        :param lang: The lang of this Group.
        :param members: The members of this Group.
        :param name: The name of this Group.
        :param path_alias: The path_alias of this Group.
        :param pool_count: The pool_count of this Group.
        :param pool_rows: The pool_rows of this Group.
        :param privacy: The privacy of this Group.
        :param restrictions: The restrictions of this Group.
        :param roles: The roles of this Group.
        :param rules: The rules of this Group.
        :param throttle: The throttle of this Group.
        :param topic_count: The topic_count of this Group.
        """
        self.openapi_types = {
            'blast': GroupBlast,
            'cover': Cover,
            'coverphoto_farm': str,
            'coverphoto_server': str,
            'coverphoto_url': PhotoURLs,
            'description': GetFavoritesContextByID200ResponseCount,
            'iconfarm': str,
            'iconserver': str,
            'id': str,
            'is_admin': bool,
            'is_member': bool,
            'is_moderator': bool,
            'ispoolmoderated': bool,
            'lang': str,
            'members': GetFavoritesContextByID200ResponseCount,
            'name': GetFavoritesContextByID200ResponseCount,
            'path_alias': str,
            'pool_count': GetFavoritesContextByID200ResponseCount,
            'pool_rows': int,
            'privacy': GetFavoritesContextByID200ResponseCount,
            'restrictions': GroupRestrictions,
            'roles': GroupRoles,
            'rules': GetFavoritesContextByID200ResponseCount,
            'throttle': GroupThrottle,
            'topic_count': GetFavoritesContextByID200ResponseCount
        }

        self.attribute_map = {
            'blast': 'blast',
            'cover': 'cover',
            'coverphoto_farm': 'coverphoto_farm',
            'coverphoto_server': 'coverphoto_server',
            'coverphoto_url': 'coverphoto_url',
            'description': 'description',
            'iconfarm': 'iconfarm',
            'iconserver': 'iconserver',
            'id': 'id',
            'is_admin': 'is_admin',
            'is_member': 'is_member',
            'is_moderator': 'is_moderator',
            'ispoolmoderated': 'ispoolmoderated',
            'lang': 'lang',
            'members': 'members',
            'name': 'name',
            'path_alias': 'path_alias',
            'pool_count': 'pool_count',
            'pool_rows': 'pool_rows',
            'privacy': 'privacy',
            'restrictions': 'restrictions',
            'roles': 'roles',
            'rules': 'rules',
            'throttle': 'throttle',
            'topic_count': 'topic_count'
        }

        self._blast = blast
        self._cover = cover
        self._coverphoto_farm = coverphoto_farm
        self._coverphoto_server = coverphoto_server
        self._coverphoto_url = coverphoto_url
        self._description = description
        self._iconfarm = iconfarm
        self._iconserver = iconserver
        self._id = id
        self._is_admin = is_admin
        self._is_member = is_member
        self._is_moderator = is_moderator
        self._ispoolmoderated = ispoolmoderated
        self._lang = lang
        self._members = members
        self._name = name
        self._path_alias = path_alias
        self._pool_count = pool_count
        self._pool_rows = pool_rows
        self._privacy = privacy
        self._restrictions = restrictions
        self._roles = roles
        self._rules = rules
        self._throttle = throttle
        self._topic_count = topic_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blast(self):
        """Gets the blast of this Group.


        :return: The blast of this Group.
        :rtype: GroupBlast
        """
        return self._blast

    @blast.setter
    def blast(self, blast):
        """Sets the blast of this Group.


        :param blast: The blast of this Group.
        :type blast: GroupBlast
        """

        self._blast = blast

    @property
    def cover(self):
        """Gets the cover of this Group.


        :return: The cover of this Group.
        :rtype: Cover
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Group.


        :param cover: The cover of this Group.
        :type cover: Cover
        """

        self._cover = cover

    @property
    def coverphoto_farm(self):
        """Gets the coverphoto_farm of this Group.


        :return: The coverphoto_farm of this Group.
        :rtype: str
        """
        return self._coverphoto_farm

    @coverphoto_farm.setter
    def coverphoto_farm(self, coverphoto_farm):
        """Sets the coverphoto_farm of this Group.


        :param coverphoto_farm: The coverphoto_farm of this Group.
        :type coverphoto_farm: str
        """

        self._coverphoto_farm = coverphoto_farm

    @property
    def coverphoto_server(self):
        """Gets the coverphoto_server of this Group.


        :return: The coverphoto_server of this Group.
        :rtype: str
        """
        return self._coverphoto_server

    @coverphoto_server.setter
    def coverphoto_server(self, coverphoto_server):
        """Sets the coverphoto_server of this Group.


        :param coverphoto_server: The coverphoto_server of this Group.
        :type coverphoto_server: str
        """

        self._coverphoto_server = coverphoto_server

    @property
    def coverphoto_url(self):
        """Gets the coverphoto_url of this Group.


        :return: The coverphoto_url of this Group.
        :rtype: PhotoURLs
        """
        return self._coverphoto_url

    @coverphoto_url.setter
    def coverphoto_url(self, coverphoto_url):
        """Sets the coverphoto_url of this Group.


        :param coverphoto_url: The coverphoto_url of this Group.
        :type coverphoto_url: PhotoURLs
        """

        self._coverphoto_url = coverphoto_url

    @property
    def description(self):
        """Gets the description of this Group.


        :return: The description of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.


        :param description: The description of this Group.
        :type description: GetFavoritesContextByID200ResponseCount
        """

        self._description = description

    @property
    def iconfarm(self):
        """Gets the iconfarm of this Group.


        :return: The iconfarm of this Group.
        :rtype: str
        """
        return self._iconfarm

    @iconfarm.setter
    def iconfarm(self, iconfarm):
        """Sets the iconfarm of this Group.


        :param iconfarm: The iconfarm of this Group.
        :type iconfarm: str
        """

        self._iconfarm = iconfarm

    @property
    def iconserver(self):
        """Gets the iconserver of this Group.


        :return: The iconserver of this Group.
        :rtype: str
        """
        return self._iconserver

    @iconserver.setter
    def iconserver(self, iconserver):
        """Sets the iconserver of this Group.


        :param iconserver: The iconserver of this Group.
        :type iconserver: str
        """

        self._iconserver = iconserver

    @property
    def id(self):
        """Gets the id of this Group.


        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.


        :param id: The id of this Group.
        :type id: str
        """

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this Group.


        :return: The is_admin of this Group.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this Group.


        :param is_admin: The is_admin of this Group.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_member(self):
        """Gets the is_member of this Group.


        :return: The is_member of this Group.
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this Group.


        :param is_member: The is_member of this Group.
        :type is_member: bool
        """

        self._is_member = is_member

    @property
    def is_moderator(self):
        """Gets the is_moderator of this Group.


        :return: The is_moderator of this Group.
        :rtype: bool
        """
        return self._is_moderator

    @is_moderator.setter
    def is_moderator(self, is_moderator):
        """Sets the is_moderator of this Group.


        :param is_moderator: The is_moderator of this Group.
        :type is_moderator: bool
        """

        self._is_moderator = is_moderator

    @property
    def ispoolmoderated(self):
        """Gets the ispoolmoderated of this Group.


        :return: The ispoolmoderated of this Group.
        :rtype: bool
        """
        return self._ispoolmoderated

    @ispoolmoderated.setter
    def ispoolmoderated(self, ispoolmoderated):
        """Sets the ispoolmoderated of this Group.


        :param ispoolmoderated: The ispoolmoderated of this Group.
        :type ispoolmoderated: bool
        """

        self._ispoolmoderated = ispoolmoderated

    @property
    def lang(self):
        """Gets the lang of this Group.


        :return: The lang of this Group.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Group.


        :param lang: The lang of this Group.
        :type lang: str
        """

        self._lang = lang

    @property
    def members(self):
        """Gets the members of this Group.


        :return: The members of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Group.


        :param members: The members of this Group.
        :type members: GetFavoritesContextByID200ResponseCount
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this Group.


        :return: The name of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.
        :type name: GetFavoritesContextByID200ResponseCount
        """

        self._name = name

    @property
    def path_alias(self):
        """Gets the path_alias of this Group.


        :return: The path_alias of this Group.
        :rtype: str
        """
        return self._path_alias

    @path_alias.setter
    def path_alias(self, path_alias):
        """Sets the path_alias of this Group.


        :param path_alias: The path_alias of this Group.
        :type path_alias: str
        """

        self._path_alias = path_alias

    @property
    def pool_count(self):
        """Gets the pool_count of this Group.


        :return: The pool_count of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._pool_count

    @pool_count.setter
    def pool_count(self, pool_count):
        """Sets the pool_count of this Group.


        :param pool_count: The pool_count of this Group.
        :type pool_count: GetFavoritesContextByID200ResponseCount
        """

        self._pool_count = pool_count

    @property
    def pool_rows(self):
        """Gets the pool_rows of this Group.


        :return: The pool_rows of this Group.
        :rtype: int
        """
        return self._pool_rows

    @pool_rows.setter
    def pool_rows(self, pool_rows):
        """Sets the pool_rows of this Group.


        :param pool_rows: The pool_rows of this Group.
        :type pool_rows: int
        """

        self._pool_rows = pool_rows

    @property
    def privacy(self):
        """Gets the privacy of this Group.


        :return: The privacy of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this Group.


        :param privacy: The privacy of this Group.
        :type privacy: GetFavoritesContextByID200ResponseCount
        """

        self._privacy = privacy

    @property
    def restrictions(self):
        """Gets the restrictions of this Group.


        :return: The restrictions of this Group.
        :rtype: GroupRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Group.


        :param restrictions: The restrictions of this Group.
        :type restrictions: GroupRestrictions
        """

        self._restrictions = restrictions

    @property
    def roles(self):
        """Gets the roles of this Group.


        :return: The roles of this Group.
        :rtype: GroupRoles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Group.


        :param roles: The roles of this Group.
        :type roles: GroupRoles
        """

        self._roles = roles

    @property
    def rules(self):
        """Gets the rules of this Group.


        :return: The rules of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Group.


        :param rules: The rules of this Group.
        :type rules: GetFavoritesContextByID200ResponseCount
        """

        self._rules = rules

    @property
    def throttle(self):
        """Gets the throttle of this Group.


        :return: The throttle of this Group.
        :rtype: GroupThrottle
        """
        return self._throttle

    @throttle.setter
    def throttle(self, throttle):
        """Sets the throttle of this Group.


        :param throttle: The throttle of this Group.
        :type throttle: GroupThrottle
        """

        self._throttle = throttle

    @property
    def topic_count(self):
        """Gets the topic_count of this Group.


        :return: The topic_count of this Group.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._topic_count

    @topic_count.setter
    def topic_count(self, topic_count):
        """Sets the topic_count of this Group.


        :param topic_count: The topic_count of this Group.
        :type topic_count: GetFavoritesContextByID200ResponseCount
        """

        self._topic_count = topic_count
