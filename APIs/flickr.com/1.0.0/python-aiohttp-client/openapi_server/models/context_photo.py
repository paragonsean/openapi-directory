# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContextPhoto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, farm: str=None, id: str=None, is_faved: bool=None, license: int=None, media: str=None, owner: str=None, safe: bool=None, secret: str=None, server: str=None, thumb: str=None, title: str=None, url: str=None):
        """ContextPhoto - a model defined in OpenAPI

        :param farm: The farm of this ContextPhoto.
        :param id: The id of this ContextPhoto.
        :param is_faved: The is_faved of this ContextPhoto.
        :param license: The license of this ContextPhoto.
        :param media: The media of this ContextPhoto.
        :param owner: The owner of this ContextPhoto.
        :param safe: The safe of this ContextPhoto.
        :param secret: The secret of this ContextPhoto.
        :param server: The server of this ContextPhoto.
        :param thumb: The thumb of this ContextPhoto.
        :param title: The title of this ContextPhoto.
        :param url: The url of this ContextPhoto.
        """
        self.openapi_types = {
            'farm': str,
            'id': str,
            'is_faved': bool,
            'license': int,
            'media': str,
            'owner': str,
            'safe': bool,
            'secret': str,
            'server': str,
            'thumb': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'farm': 'farm',
            'id': 'id',
            'is_faved': 'is_faved',
            'license': 'license',
            'media': 'media',
            'owner': 'owner',
            'safe': 'safe',
            'secret': 'secret',
            'server': 'server',
            'thumb': 'thumb',
            'title': 'title',
            'url': 'url'
        }

        self._farm = farm
        self._id = id
        self._is_faved = is_faved
        self._license = license
        self._media = media
        self._owner = owner
        self._safe = safe
        self._secret = secret
        self._server = server
        self._thumb = thumb
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextPhoto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContextPhoto of this ContextPhoto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def farm(self):
        """Gets the farm of this ContextPhoto.


        :return: The farm of this ContextPhoto.
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this ContextPhoto.


        :param farm: The farm of this ContextPhoto.
        :type farm: str
        """

        self._farm = farm

    @property
    def id(self):
        """Gets the id of this ContextPhoto.


        :return: The id of this ContextPhoto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContextPhoto.


        :param id: The id of this ContextPhoto.
        :type id: str
        """

        self._id = id

    @property
    def is_faved(self):
        """Gets the is_faved of this ContextPhoto.


        :return: The is_faved of this ContextPhoto.
        :rtype: bool
        """
        return self._is_faved

    @is_faved.setter
    def is_faved(self, is_faved):
        """Sets the is_faved of this ContextPhoto.


        :param is_faved: The is_faved of this ContextPhoto.
        :type is_faved: bool
        """

        self._is_faved = is_faved

    @property
    def license(self):
        """Gets the license of this ContextPhoto.


        :return: The license of this ContextPhoto.
        :rtype: int
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ContextPhoto.


        :param license: The license of this ContextPhoto.
        :type license: int
        """

        self._license = license

    @property
    def media(self):
        """Gets the media of this ContextPhoto.


        :return: The media of this ContextPhoto.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ContextPhoto.


        :param media: The media of this ContextPhoto.
        :type media: str
        """

        self._media = media

    @property
    def owner(self):
        """Gets the owner of this ContextPhoto.


        :return: The owner of this ContextPhoto.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ContextPhoto.


        :param owner: The owner of this ContextPhoto.
        :type owner: str
        """

        self._owner = owner

    @property
    def safe(self):
        """Gets the safe of this ContextPhoto.


        :return: The safe of this ContextPhoto.
        :rtype: bool
        """
        return self._safe

    @safe.setter
    def safe(self, safe):
        """Sets the safe of this ContextPhoto.


        :param safe: The safe of this ContextPhoto.
        :type safe: bool
        """

        self._safe = safe

    @property
    def secret(self):
        """Gets the secret of this ContextPhoto.


        :return: The secret of this ContextPhoto.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ContextPhoto.


        :param secret: The secret of this ContextPhoto.
        :type secret: str
        """

        self._secret = secret

    @property
    def server(self):
        """Gets the server of this ContextPhoto.


        :return: The server of this ContextPhoto.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ContextPhoto.


        :param server: The server of this ContextPhoto.
        :type server: str
        """

        self._server = server

    @property
    def thumb(self):
        """Gets the thumb of this ContextPhoto.


        :return: The thumb of this ContextPhoto.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this ContextPhoto.


        :param thumb: The thumb of this ContextPhoto.
        :type thumb: str
        """

        self._thumb = thumb

    @property
    def title(self):
        """Gets the title of this ContextPhoto.


        :return: The title of this ContextPhoto.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContextPhoto.


        :param title: The title of this ContextPhoto.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this ContextPhoto.


        :return: The url of this ContextPhoto.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContextPhoto.


        :param url: The url of this ContextPhoto.
        :type url: str
        """

        self._url = url
