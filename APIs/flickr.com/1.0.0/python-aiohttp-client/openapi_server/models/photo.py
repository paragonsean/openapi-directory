# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server.models.owner import Owner
from openapi_server.models.photo_dates import PhotoDates
from openapi_server.models.photo_editability import PhotoEditability
from openapi_server.models.photo_notes import PhotoNotes
from openapi_server.models.photo_people import PhotoPeople
from openapi_server.models.photo_permissions import PhotoPermissions
from openapi_server.models.photo_tags import PhotoTags
from openapi_server.models.photo_urls import PhotoUrls
from openapi_server.models.photo_usage import PhotoUsage
from openapi_server.models.photo_visibility import PhotoVisibility
from openapi_server import util


class Photo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: GetFavoritesContextByID200ResponseCount=None, dates: PhotoDates=None, dateuploaded: str=None, description: GetFavoritesContextByID200ResponseCount=None, editability: PhotoEditability=None, farm: str=None, id: str=None, isfavorite: bool=None, license: str=None, media: str=None, notes: PhotoNotes=None, originalsecret: str=None, owner: Owner=None, people: PhotoPeople=None, permissions: PhotoPermissions=None, publiceditability: PhotoEditability=None, rotation: str=None, safe: bool=None, safety_level: str=None, secret: str=None, server: str=None, tags: PhotoTags=None, title: GetFavoritesContextByID200ResponseCount=None, urls: PhotoUrls=None, usage: PhotoUsage=None, views: str=None, visibility: PhotoVisibility=None):
        """Photo - a model defined in OpenAPI

        :param comments: The comments of this Photo.
        :param dates: The dates of this Photo.
        :param dateuploaded: The dateuploaded of this Photo.
        :param description: The description of this Photo.
        :param editability: The editability of this Photo.
        :param farm: The farm of this Photo.
        :param id: The id of this Photo.
        :param isfavorite: The isfavorite of this Photo.
        :param license: The license of this Photo.
        :param media: The media of this Photo.
        :param notes: The notes of this Photo.
        :param originalsecret: The originalsecret of this Photo.
        :param owner: The owner of this Photo.
        :param people: The people of this Photo.
        :param permissions: The permissions of this Photo.
        :param publiceditability: The publiceditability of this Photo.
        :param rotation: The rotation of this Photo.
        :param safe: The safe of this Photo.
        :param safety_level: The safety_level of this Photo.
        :param secret: The secret of this Photo.
        :param server: The server of this Photo.
        :param tags: The tags of this Photo.
        :param title: The title of this Photo.
        :param urls: The urls of this Photo.
        :param usage: The usage of this Photo.
        :param views: The views of this Photo.
        :param visibility: The visibility of this Photo.
        """
        self.openapi_types = {
            'comments': GetFavoritesContextByID200ResponseCount,
            'dates': PhotoDates,
            'dateuploaded': str,
            'description': GetFavoritesContextByID200ResponseCount,
            'editability': PhotoEditability,
            'farm': str,
            'id': str,
            'isfavorite': bool,
            'license': str,
            'media': str,
            'notes': PhotoNotes,
            'originalsecret': str,
            'owner': Owner,
            'people': PhotoPeople,
            'permissions': PhotoPermissions,
            'publiceditability': PhotoEditability,
            'rotation': str,
            'safe': bool,
            'safety_level': str,
            'secret': str,
            'server': str,
            'tags': PhotoTags,
            'title': GetFavoritesContextByID200ResponseCount,
            'urls': PhotoUrls,
            'usage': PhotoUsage,
            'views': str,
            'visibility': PhotoVisibility
        }

        self.attribute_map = {
            'comments': 'comments',
            'dates': 'dates',
            'dateuploaded': 'dateuploaded',
            'description': 'description',
            'editability': 'editability',
            'farm': 'farm',
            'id': 'id',
            'isfavorite': 'isfavorite',
            'license': 'license',
            'media': 'media',
            'notes': 'notes',
            'originalsecret': 'originalsecret',
            'owner': 'owner',
            'people': 'people',
            'permissions': 'permissions',
            'publiceditability': 'publiceditability',
            'rotation': 'rotation',
            'safe': 'safe',
            'safety_level': 'safety_level',
            'secret': 'secret',
            'server': 'server',
            'tags': 'tags',
            'title': 'title',
            'urls': 'urls',
            'usage': 'usage',
            'views': 'views',
            'visibility': 'visibility'
        }

        self._comments = comments
        self._dates = dates
        self._dateuploaded = dateuploaded
        self._description = description
        self._editability = editability
        self._farm = farm
        self._id = id
        self._isfavorite = isfavorite
        self._license = license
        self._media = media
        self._notes = notes
        self._originalsecret = originalsecret
        self._owner = owner
        self._people = people
        self._permissions = permissions
        self._publiceditability = publiceditability
        self._rotation = rotation
        self._safe = safe
        self._safety_level = safety_level
        self._secret = secret
        self._server = server
        self._tags = tags
        self._title = title
        self._urls = urls
        self._usage = usage
        self._views = views
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Photo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Photo of this Photo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this Photo.


        :return: The comments of this Photo.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Photo.


        :param comments: The comments of this Photo.
        :type comments: GetFavoritesContextByID200ResponseCount
        """

        self._comments = comments

    @property
    def dates(self):
        """Gets the dates of this Photo.


        :return: The dates of this Photo.
        :rtype: PhotoDates
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this Photo.


        :param dates: The dates of this Photo.
        :type dates: PhotoDates
        """

        self._dates = dates

    @property
    def dateuploaded(self):
        """Gets the dateuploaded of this Photo.


        :return: The dateuploaded of this Photo.
        :rtype: str
        """
        return self._dateuploaded

    @dateuploaded.setter
    def dateuploaded(self, dateuploaded):
        """Sets the dateuploaded of this Photo.


        :param dateuploaded: The dateuploaded of this Photo.
        :type dateuploaded: str
        """

        self._dateuploaded = dateuploaded

    @property
    def description(self):
        """Gets the description of this Photo.


        :return: The description of this Photo.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Photo.


        :param description: The description of this Photo.
        :type description: GetFavoritesContextByID200ResponseCount
        """

        self._description = description

    @property
    def editability(self):
        """Gets the editability of this Photo.


        :return: The editability of this Photo.
        :rtype: PhotoEditability
        """
        return self._editability

    @editability.setter
    def editability(self, editability):
        """Sets the editability of this Photo.


        :param editability: The editability of this Photo.
        :type editability: PhotoEditability
        """

        self._editability = editability

    @property
    def farm(self):
        """Gets the farm of this Photo.


        :return: The farm of this Photo.
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this Photo.


        :param farm: The farm of this Photo.
        :type farm: str
        """

        self._farm = farm

    @property
    def id(self):
        """Gets the id of this Photo.


        :return: The id of this Photo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Photo.


        :param id: The id of this Photo.
        :type id: str
        """

        self._id = id

    @property
    def isfavorite(self):
        """Gets the isfavorite of this Photo.


        :return: The isfavorite of this Photo.
        :rtype: bool
        """
        return self._isfavorite

    @isfavorite.setter
    def isfavorite(self, isfavorite):
        """Sets the isfavorite of this Photo.


        :param isfavorite: The isfavorite of this Photo.
        :type isfavorite: bool
        """

        self._isfavorite = isfavorite

    @property
    def license(self):
        """Gets the license of this Photo.


        :return: The license of this Photo.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Photo.


        :param license: The license of this Photo.
        :type license: str
        """

        self._license = license

    @property
    def media(self):
        """Gets the media of this Photo.


        :return: The media of this Photo.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Photo.


        :param media: The media of this Photo.
        :type media: str
        """

        self._media = media

    @property
    def notes(self):
        """Gets the notes of this Photo.


        :return: The notes of this Photo.
        :rtype: PhotoNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Photo.


        :param notes: The notes of this Photo.
        :type notes: PhotoNotes
        """

        self._notes = notes

    @property
    def originalsecret(self):
        """Gets the originalsecret of this Photo.


        :return: The originalsecret of this Photo.
        :rtype: str
        """
        return self._originalsecret

    @originalsecret.setter
    def originalsecret(self, originalsecret):
        """Sets the originalsecret of this Photo.


        :param originalsecret: The originalsecret of this Photo.
        :type originalsecret: str
        """

        self._originalsecret = originalsecret

    @property
    def owner(self):
        """Gets the owner of this Photo.


        :return: The owner of this Photo.
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Photo.


        :param owner: The owner of this Photo.
        :type owner: Owner
        """

        self._owner = owner

    @property
    def people(self):
        """Gets the people of this Photo.


        :return: The people of this Photo.
        :rtype: PhotoPeople
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this Photo.


        :param people: The people of this Photo.
        :type people: PhotoPeople
        """

        self._people = people

    @property
    def permissions(self):
        """Gets the permissions of this Photo.


        :return: The permissions of this Photo.
        :rtype: PhotoPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Photo.


        :param permissions: The permissions of this Photo.
        :type permissions: PhotoPermissions
        """

        self._permissions = permissions

    @property
    def publiceditability(self):
        """Gets the publiceditability of this Photo.


        :return: The publiceditability of this Photo.
        :rtype: PhotoEditability
        """
        return self._publiceditability

    @publiceditability.setter
    def publiceditability(self, publiceditability):
        """Sets the publiceditability of this Photo.


        :param publiceditability: The publiceditability of this Photo.
        :type publiceditability: PhotoEditability
        """

        self._publiceditability = publiceditability

    @property
    def rotation(self):
        """Gets the rotation of this Photo.


        :return: The rotation of this Photo.
        :rtype: str
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this Photo.


        :param rotation: The rotation of this Photo.
        :type rotation: str
        """

        self._rotation = rotation

    @property
    def safe(self):
        """Gets the safe of this Photo.


        :return: The safe of this Photo.
        :rtype: bool
        """
        return self._safe

    @safe.setter
    def safe(self, safe):
        """Sets the safe of this Photo.


        :param safe: The safe of this Photo.
        :type safe: bool
        """

        self._safe = safe

    @property
    def safety_level(self):
        """Gets the safety_level of this Photo.


        :return: The safety_level of this Photo.
        :rtype: str
        """
        return self._safety_level

    @safety_level.setter
    def safety_level(self, safety_level):
        """Sets the safety_level of this Photo.


        :param safety_level: The safety_level of this Photo.
        :type safety_level: str
        """

        self._safety_level = safety_level

    @property
    def secret(self):
        """Gets the secret of this Photo.


        :return: The secret of this Photo.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Photo.


        :param secret: The secret of this Photo.
        :type secret: str
        """

        self._secret = secret

    @property
    def server(self):
        """Gets the server of this Photo.


        :return: The server of this Photo.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this Photo.


        :param server: The server of this Photo.
        :type server: str
        """

        self._server = server

    @property
    def tags(self):
        """Gets the tags of this Photo.


        :return: The tags of this Photo.
        :rtype: PhotoTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Photo.


        :param tags: The tags of this Photo.
        :type tags: PhotoTags
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Photo.


        :return: The title of this Photo.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Photo.


        :param title: The title of this Photo.
        :type title: GetFavoritesContextByID200ResponseCount
        """

        self._title = title

    @property
    def urls(self):
        """Gets the urls of this Photo.


        :return: The urls of this Photo.
        :rtype: PhotoUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Photo.


        :param urls: The urls of this Photo.
        :type urls: PhotoUrls
        """

        self._urls = urls

    @property
    def usage(self):
        """Gets the usage of this Photo.


        :return: The usage of this Photo.
        :rtype: PhotoUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Photo.


        :param usage: The usage of this Photo.
        :type usage: PhotoUsage
        """

        self._usage = usage

    @property
    def views(self):
        """Gets the views of this Photo.


        :return: The views of this Photo.
        :rtype: str
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Photo.


        :param views: The views of this Photo.
        :type views: str
        """

        self._views = views

    @property
    def visibility(self):
        """Gets the visibility of this Photo.


        :return: The visibility of this Photo.
        :rtype: PhotoVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Photo.


        :param visibility: The visibility of this Photo.
        :type visibility: PhotoVisibility
        """

        self._visibility = visibility
