# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, art_ok: bool=None, has_geo: bool=None, images_ok: bool=None, moderate_ok: bool=None, photos_ok: bool=None, restricted_ok: bool=None, safe_ok: bool=None, screens_ok: bool=None, videos_ok: bool=None):
        """GroupRestrictions - a model defined in OpenAPI

        :param art_ok: The art_ok of this GroupRestrictions.
        :param has_geo: The has_geo of this GroupRestrictions.
        :param images_ok: The images_ok of this GroupRestrictions.
        :param moderate_ok: The moderate_ok of this GroupRestrictions.
        :param photos_ok: The photos_ok of this GroupRestrictions.
        :param restricted_ok: The restricted_ok of this GroupRestrictions.
        :param safe_ok: The safe_ok of this GroupRestrictions.
        :param screens_ok: The screens_ok of this GroupRestrictions.
        :param videos_ok: The videos_ok of this GroupRestrictions.
        """
        self.openapi_types = {
            'art_ok': bool,
            'has_geo': bool,
            'images_ok': bool,
            'moderate_ok': bool,
            'photos_ok': bool,
            'restricted_ok': bool,
            'safe_ok': bool,
            'screens_ok': bool,
            'videos_ok': bool
        }

        self.attribute_map = {
            'art_ok': 'art_ok',
            'has_geo': 'has_geo',
            'images_ok': 'images_ok',
            'moderate_ok': 'moderate_ok',
            'photos_ok': 'photos_ok',
            'restricted_ok': 'restricted_ok',
            'safe_ok': 'safe_ok',
            'screens_ok': 'screens_ok',
            'videos_ok': 'videos_ok'
        }

        self._art_ok = art_ok
        self._has_geo = has_geo
        self._images_ok = images_ok
        self._moderate_ok = moderate_ok
        self._photos_ok = photos_ok
        self._restricted_ok = restricted_ok
        self._safe_ok = safe_ok
        self._screens_ok = screens_ok
        self._videos_ok = videos_ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group_restrictions of this GroupRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def art_ok(self):
        """Gets the art_ok of this GroupRestrictions.


        :return: The art_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._art_ok

    @art_ok.setter
    def art_ok(self, art_ok):
        """Sets the art_ok of this GroupRestrictions.


        :param art_ok: The art_ok of this GroupRestrictions.
        :type art_ok: bool
        """

        self._art_ok = art_ok

    @property
    def has_geo(self):
        """Gets the has_geo of this GroupRestrictions.


        :return: The has_geo of this GroupRestrictions.
        :rtype: bool
        """
        return self._has_geo

    @has_geo.setter
    def has_geo(self, has_geo):
        """Sets the has_geo of this GroupRestrictions.


        :param has_geo: The has_geo of this GroupRestrictions.
        :type has_geo: bool
        """

        self._has_geo = has_geo

    @property
    def images_ok(self):
        """Gets the images_ok of this GroupRestrictions.


        :return: The images_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._images_ok

    @images_ok.setter
    def images_ok(self, images_ok):
        """Sets the images_ok of this GroupRestrictions.


        :param images_ok: The images_ok of this GroupRestrictions.
        :type images_ok: bool
        """

        self._images_ok = images_ok

    @property
    def moderate_ok(self):
        """Gets the moderate_ok of this GroupRestrictions.


        :return: The moderate_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._moderate_ok

    @moderate_ok.setter
    def moderate_ok(self, moderate_ok):
        """Sets the moderate_ok of this GroupRestrictions.


        :param moderate_ok: The moderate_ok of this GroupRestrictions.
        :type moderate_ok: bool
        """

        self._moderate_ok = moderate_ok

    @property
    def photos_ok(self):
        """Gets the photos_ok of this GroupRestrictions.


        :return: The photos_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._photos_ok

    @photos_ok.setter
    def photos_ok(self, photos_ok):
        """Sets the photos_ok of this GroupRestrictions.


        :param photos_ok: The photos_ok of this GroupRestrictions.
        :type photos_ok: bool
        """

        self._photos_ok = photos_ok

    @property
    def restricted_ok(self):
        """Gets the restricted_ok of this GroupRestrictions.


        :return: The restricted_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._restricted_ok

    @restricted_ok.setter
    def restricted_ok(self, restricted_ok):
        """Sets the restricted_ok of this GroupRestrictions.


        :param restricted_ok: The restricted_ok of this GroupRestrictions.
        :type restricted_ok: bool
        """

        self._restricted_ok = restricted_ok

    @property
    def safe_ok(self):
        """Gets the safe_ok of this GroupRestrictions.


        :return: The safe_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._safe_ok

    @safe_ok.setter
    def safe_ok(self, safe_ok):
        """Sets the safe_ok of this GroupRestrictions.


        :param safe_ok: The safe_ok of this GroupRestrictions.
        :type safe_ok: bool
        """

        self._safe_ok = safe_ok

    @property
    def screens_ok(self):
        """Gets the screens_ok of this GroupRestrictions.


        :return: The screens_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._screens_ok

    @screens_ok.setter
    def screens_ok(self, screens_ok):
        """Sets the screens_ok of this GroupRestrictions.


        :param screens_ok: The screens_ok of this GroupRestrictions.
        :type screens_ok: bool
        """

        self._screens_ok = screens_ok

    @property
    def videos_ok(self):
        """Gets the videos_ok of this GroupRestrictions.


        :return: The videos_ok of this GroupRestrictions.
        :rtype: bool
        """
        return self._videos_ok

    @videos_ok.setter
    def videos_ok(self, videos_ok):
        """Sets the videos_ok of this GroupRestrictions.


        :param videos_ok: The videos_ok of this GroupRestrictions.
        :type videos_ok: bool
        """

        self._videos_ok = videos_ok
