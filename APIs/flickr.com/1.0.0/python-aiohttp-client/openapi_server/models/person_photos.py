# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server import util


class PersonPhotos(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: GetFavoritesContextByID200ResponseCount=None, firstdate: GetFavoritesContextByID200ResponseCount=None, firstdatetaken: GetFavoritesContextByID200ResponseCount=None, views: GetFavoritesContextByID200ResponseCount=None):
        """PersonPhotos - a model defined in OpenAPI

        :param count: The count of this PersonPhotos.
        :param firstdate: The firstdate of this PersonPhotos.
        :param firstdatetaken: The firstdatetaken of this PersonPhotos.
        :param views: The views of this PersonPhotos.
        """
        self.openapi_types = {
            'count': GetFavoritesContextByID200ResponseCount,
            'firstdate': GetFavoritesContextByID200ResponseCount,
            'firstdatetaken': GetFavoritesContextByID200ResponseCount,
            'views': GetFavoritesContextByID200ResponseCount
        }

        self.attribute_map = {
            'count': 'count',
            'firstdate': 'firstdate',
            'firstdatetaken': 'firstdatetaken',
            'views': 'views'
        }

        self._count = count
        self._firstdate = firstdate
        self._firstdatetaken = firstdatetaken
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonPhotos':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person_photos of this PersonPhotos.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this PersonPhotos.


        :return: The count of this PersonPhotos.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PersonPhotos.


        :param count: The count of this PersonPhotos.
        :type count: GetFavoritesContextByID200ResponseCount
        """

        self._count = count

    @property
    def firstdate(self):
        """Gets the firstdate of this PersonPhotos.


        :return: The firstdate of this PersonPhotos.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._firstdate

    @firstdate.setter
    def firstdate(self, firstdate):
        """Sets the firstdate of this PersonPhotos.


        :param firstdate: The firstdate of this PersonPhotos.
        :type firstdate: GetFavoritesContextByID200ResponseCount
        """

        self._firstdate = firstdate

    @property
    def firstdatetaken(self):
        """Gets the firstdatetaken of this PersonPhotos.


        :return: The firstdatetaken of this PersonPhotos.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._firstdatetaken

    @firstdatetaken.setter
    def firstdatetaken(self, firstdatetaken):
        """Sets the firstdatetaken of this PersonPhotos.


        :param firstdatetaken: The firstdatetaken of this PersonPhotos.
        :type firstdatetaken: GetFavoritesContextByID200ResponseCount
        """

        self._firstdatetaken = firstdatetaken

    @property
    def views(self):
        """Gets the views of this PersonPhotos.


        :return: The views of this PersonPhotos.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this PersonPhotos.


        :param views: The views of this PersonPhotos.
        :type views: GetFavoritesContextByID200ResponseCount
        """

        self._views = views
