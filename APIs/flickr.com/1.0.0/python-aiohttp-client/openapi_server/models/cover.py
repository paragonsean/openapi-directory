# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cover(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, farm: str=None, id: str=None, isfamily: bool=None, isfriend: bool=None, ispublic: bool=None, owner: str=None, secret: str=None, server: str=None, title: str=None, y: str=None):
        """Cover - a model defined in OpenAPI

        :param farm: The farm of this Cover.
        :param id: The id of this Cover.
        :param isfamily: The isfamily of this Cover.
        :param isfriend: The isfriend of this Cover.
        :param ispublic: The ispublic of this Cover.
        :param owner: The owner of this Cover.
        :param secret: The secret of this Cover.
        :param server: The server of this Cover.
        :param title: The title of this Cover.
        :param y: The y of this Cover.
        """
        self.openapi_types = {
            'farm': str,
            'id': str,
            'isfamily': bool,
            'isfriend': bool,
            'ispublic': bool,
            'owner': str,
            'secret': str,
            'server': str,
            'title': str,
            'y': str
        }

        self.attribute_map = {
            'farm': 'farm',
            'id': 'id',
            'isfamily': 'isfamily',
            'isfriend': 'isfriend',
            'ispublic': 'ispublic',
            'owner': 'owner',
            'secret': 'secret',
            'server': 'server',
            'title': 'title',
            'y': 'y'
        }

        self._farm = farm
        self._id = id
        self._isfamily = isfamily
        self._isfriend = isfriend
        self._ispublic = ispublic
        self._owner = owner
        self._secret = secret
        self._server = server
        self._title = title
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cover':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cover of this Cover.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def farm(self):
        """Gets the farm of this Cover.


        :return: The farm of this Cover.
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this Cover.


        :param farm: The farm of this Cover.
        :type farm: str
        """

        self._farm = farm

    @property
    def id(self):
        """Gets the id of this Cover.


        :return: The id of this Cover.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cover.


        :param id: The id of this Cover.
        :type id: str
        """

        self._id = id

    @property
    def isfamily(self):
        """Gets the isfamily of this Cover.


        :return: The isfamily of this Cover.
        :rtype: bool
        """
        return self._isfamily

    @isfamily.setter
    def isfamily(self, isfamily):
        """Sets the isfamily of this Cover.


        :param isfamily: The isfamily of this Cover.
        :type isfamily: bool
        """

        self._isfamily = isfamily

    @property
    def isfriend(self):
        """Gets the isfriend of this Cover.


        :return: The isfriend of this Cover.
        :rtype: bool
        """
        return self._isfriend

    @isfriend.setter
    def isfriend(self, isfriend):
        """Sets the isfriend of this Cover.


        :param isfriend: The isfriend of this Cover.
        :type isfriend: bool
        """

        self._isfriend = isfriend

    @property
    def ispublic(self):
        """Gets the ispublic of this Cover.


        :return: The ispublic of this Cover.
        :rtype: bool
        """
        return self._ispublic

    @ispublic.setter
    def ispublic(self, ispublic):
        """Sets the ispublic of this Cover.


        :param ispublic: The ispublic of this Cover.
        :type ispublic: bool
        """

        self._ispublic = ispublic

    @property
    def owner(self):
        """Gets the owner of this Cover.


        :return: The owner of this Cover.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Cover.


        :param owner: The owner of this Cover.
        :type owner: str
        """

        self._owner = owner

    @property
    def secret(self):
        """Gets the secret of this Cover.


        :return: The secret of this Cover.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Cover.


        :param secret: The secret of this Cover.
        :type secret: str
        """

        self._secret = secret

    @property
    def server(self):
        """Gets the server of this Cover.


        :return: The server of this Cover.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this Cover.


        :param server: The server of this Cover.
        :type server: str
        """

        self._server = server

    @property
    def title(self):
        """Gets the title of this Cover.


        :return: The title of this Cover.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Cover.


        :param title: The title of this Cover.
        :type title: str
        """

        self._title = title

    @property
    def y(self):
        """Gets the y of this Cover.


        :return: The y of this Cover.
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Cover.


        :param y: The y of this Cover.
        :type y: str
        """

        self._y = y
