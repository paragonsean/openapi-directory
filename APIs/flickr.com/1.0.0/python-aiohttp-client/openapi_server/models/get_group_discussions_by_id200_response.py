# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.topic import Topic
from openapi_server import util


class GetGroupDiscussionsByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iconfarm: float=None, iconserver: float=None, ispoolmoderated: bool=None, lang: str=None, members: float=None, name: str=None, page: float=None, pages: float=None, per_page: float=None, privacy: float=None, topics: List[Topic]=None, total: float=None):
        """GetGroupDiscussionsByID200Response - a model defined in OpenAPI

        :param iconfarm: The iconfarm of this GetGroupDiscussionsByID200Response.
        :param iconserver: The iconserver of this GetGroupDiscussionsByID200Response.
        :param ispoolmoderated: The ispoolmoderated of this GetGroupDiscussionsByID200Response.
        :param lang: The lang of this GetGroupDiscussionsByID200Response.
        :param members: The members of this GetGroupDiscussionsByID200Response.
        :param name: The name of this GetGroupDiscussionsByID200Response.
        :param page: The page of this GetGroupDiscussionsByID200Response.
        :param pages: The pages of this GetGroupDiscussionsByID200Response.
        :param per_page: The per_page of this GetGroupDiscussionsByID200Response.
        :param privacy: The privacy of this GetGroupDiscussionsByID200Response.
        :param topics: The topics of this GetGroupDiscussionsByID200Response.
        :param total: The total of this GetGroupDiscussionsByID200Response.
        """
        self.openapi_types = {
            'iconfarm': float,
            'iconserver': float,
            'ispoolmoderated': bool,
            'lang': str,
            'members': float,
            'name': str,
            'page': float,
            'pages': float,
            'per_page': float,
            'privacy': float,
            'topics': List[Topic],
            'total': float
        }

        self.attribute_map = {
            'iconfarm': 'iconfarm',
            'iconserver': 'iconserver',
            'ispoolmoderated': 'ispoolmoderated',
            'lang': 'lang',
            'members': 'members',
            'name': 'name',
            'page': 'page',
            'pages': 'pages',
            'per_page': 'per_page',
            'privacy': 'privacy',
            'topics': 'topics',
            'total': 'total'
        }

        self._iconfarm = iconfarm
        self._iconserver = iconserver
        self._ispoolmoderated = ispoolmoderated
        self._lang = lang
        self._members = members
        self._name = name
        self._page = page
        self._pages = pages
        self._per_page = per_page
        self._privacy = privacy
        self._topics = topics
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetGroupDiscussionsByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getGroupDiscussionsByID_200_response of this GetGroupDiscussionsByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iconfarm(self):
        """Gets the iconfarm of this GetGroupDiscussionsByID200Response.


        :return: The iconfarm of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._iconfarm

    @iconfarm.setter
    def iconfarm(self, iconfarm):
        """Sets the iconfarm of this GetGroupDiscussionsByID200Response.


        :param iconfarm: The iconfarm of this GetGroupDiscussionsByID200Response.
        :type iconfarm: float
        """

        self._iconfarm = iconfarm

    @property
    def iconserver(self):
        """Gets the iconserver of this GetGroupDiscussionsByID200Response.


        :return: The iconserver of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._iconserver

    @iconserver.setter
    def iconserver(self, iconserver):
        """Sets the iconserver of this GetGroupDiscussionsByID200Response.


        :param iconserver: The iconserver of this GetGroupDiscussionsByID200Response.
        :type iconserver: float
        """

        self._iconserver = iconserver

    @property
    def ispoolmoderated(self):
        """Gets the ispoolmoderated of this GetGroupDiscussionsByID200Response.


        :return: The ispoolmoderated of this GetGroupDiscussionsByID200Response.
        :rtype: bool
        """
        return self._ispoolmoderated

    @ispoolmoderated.setter
    def ispoolmoderated(self, ispoolmoderated):
        """Sets the ispoolmoderated of this GetGroupDiscussionsByID200Response.


        :param ispoolmoderated: The ispoolmoderated of this GetGroupDiscussionsByID200Response.
        :type ispoolmoderated: bool
        """

        self._ispoolmoderated = ispoolmoderated

    @property
    def lang(self):
        """Gets the lang of this GetGroupDiscussionsByID200Response.


        :return: The lang of this GetGroupDiscussionsByID200Response.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this GetGroupDiscussionsByID200Response.


        :param lang: The lang of this GetGroupDiscussionsByID200Response.
        :type lang: str
        """

        self._lang = lang

    @property
    def members(self):
        """Gets the members of this GetGroupDiscussionsByID200Response.


        :return: The members of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this GetGroupDiscussionsByID200Response.


        :param members: The members of this GetGroupDiscussionsByID200Response.
        :type members: float
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this GetGroupDiscussionsByID200Response.


        :return: The name of this GetGroupDiscussionsByID200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetGroupDiscussionsByID200Response.


        :param name: The name of this GetGroupDiscussionsByID200Response.
        :type name: str
        """

        self._name = name

    @property
    def page(self):
        """Gets the page of this GetGroupDiscussionsByID200Response.


        :return: The page of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GetGroupDiscussionsByID200Response.


        :param page: The page of this GetGroupDiscussionsByID200Response.
        :type page: float
        """

        self._page = page

    @property
    def pages(self):
        """Gets the pages of this GetGroupDiscussionsByID200Response.


        :return: The pages of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this GetGroupDiscussionsByID200Response.


        :param pages: The pages of this GetGroupDiscussionsByID200Response.
        :type pages: float
        """

        self._pages = pages

    @property
    def per_page(self):
        """Gets the per_page of this GetGroupDiscussionsByID200Response.


        :return: The per_page of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this GetGroupDiscussionsByID200Response.


        :param per_page: The per_page of this GetGroupDiscussionsByID200Response.
        :type per_page: float
        """

        self._per_page = per_page

    @property
    def privacy(self):
        """Gets the privacy of this GetGroupDiscussionsByID200Response.


        :return: The privacy of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this GetGroupDiscussionsByID200Response.


        :param privacy: The privacy of this GetGroupDiscussionsByID200Response.
        :type privacy: float
        """

        self._privacy = privacy

    @property
    def topics(self):
        """Gets the topics of this GetGroupDiscussionsByID200Response.


        :return: The topics of this GetGroupDiscussionsByID200Response.
        :rtype: List[Topic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this GetGroupDiscussionsByID200Response.


        :param topics: The topics of this GetGroupDiscussionsByID200Response.
        :type topics: List[Topic]
        """

        self._topics = topics

    @property
    def total(self):
        """Gets the total of this GetGroupDiscussionsByID200Response.


        :return: The total of this GetGroupDiscussionsByID200Response.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetGroupDiscussionsByID200Response.


        :param total: The total of this GetGroupDiscussionsByID200Response.
        :type total: float
        """

        self._total = total
