# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Owner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iconfarm: str=None, iconserver: str=None, is_ad_free: bool=None, ispro: bool=None, location: str=None, noindexfollow: bool=None, nsid: str=None, path_alias: str=None, realname: str=None, username: str=None):
        """Owner - a model defined in OpenAPI

        :param iconfarm: The iconfarm of this Owner.
        :param iconserver: The iconserver of this Owner.
        :param is_ad_free: The is_ad_free of this Owner.
        :param ispro: The ispro of this Owner.
        :param location: The location of this Owner.
        :param noindexfollow: The noindexfollow of this Owner.
        :param nsid: The nsid of this Owner.
        :param path_alias: The path_alias of this Owner.
        :param realname: The realname of this Owner.
        :param username: The username of this Owner.
        """
        self.openapi_types = {
            'iconfarm': str,
            'iconserver': str,
            'is_ad_free': bool,
            'ispro': bool,
            'location': str,
            'noindexfollow': bool,
            'nsid': str,
            'path_alias': str,
            'realname': str,
            'username': str
        }

        self.attribute_map = {
            'iconfarm': 'iconfarm',
            'iconserver': 'iconserver',
            'is_ad_free': 'is_ad_free',
            'ispro': 'ispro',
            'location': 'location',
            'noindexfollow': 'noindexfollow',
            'nsid': 'nsid',
            'path_alias': 'path_alias',
            'realname': 'realname',
            'username': 'username'
        }

        self._iconfarm = iconfarm
        self._iconserver = iconserver
        self._is_ad_free = is_ad_free
        self._ispro = ispro
        self._location = location
        self._noindexfollow = noindexfollow
        self._nsid = nsid
        self._path_alias = path_alias
        self._realname = realname
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Owner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Owner of this Owner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iconfarm(self):
        """Gets the iconfarm of this Owner.


        :return: The iconfarm of this Owner.
        :rtype: str
        """
        return self._iconfarm

    @iconfarm.setter
    def iconfarm(self, iconfarm):
        """Sets the iconfarm of this Owner.


        :param iconfarm: The iconfarm of this Owner.
        :type iconfarm: str
        """

        self._iconfarm = iconfarm

    @property
    def iconserver(self):
        """Gets the iconserver of this Owner.


        :return: The iconserver of this Owner.
        :rtype: str
        """
        return self._iconserver

    @iconserver.setter
    def iconserver(self, iconserver):
        """Sets the iconserver of this Owner.


        :param iconserver: The iconserver of this Owner.
        :type iconserver: str
        """

        self._iconserver = iconserver

    @property
    def is_ad_free(self):
        """Gets the is_ad_free of this Owner.


        :return: The is_ad_free of this Owner.
        :rtype: bool
        """
        return self._is_ad_free

    @is_ad_free.setter
    def is_ad_free(self, is_ad_free):
        """Sets the is_ad_free of this Owner.


        :param is_ad_free: The is_ad_free of this Owner.
        :type is_ad_free: bool
        """

        self._is_ad_free = is_ad_free

    @property
    def ispro(self):
        """Gets the ispro of this Owner.


        :return: The ispro of this Owner.
        :rtype: bool
        """
        return self._ispro

    @ispro.setter
    def ispro(self, ispro):
        """Sets the ispro of this Owner.


        :param ispro: The ispro of this Owner.
        :type ispro: bool
        """

        self._ispro = ispro

    @property
    def location(self):
        """Gets the location of this Owner.


        :return: The location of this Owner.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Owner.


        :param location: The location of this Owner.
        :type location: str
        """

        self._location = location

    @property
    def noindexfollow(self):
        """Gets the noindexfollow of this Owner.


        :return: The noindexfollow of this Owner.
        :rtype: bool
        """
        return self._noindexfollow

    @noindexfollow.setter
    def noindexfollow(self, noindexfollow):
        """Sets the noindexfollow of this Owner.


        :param noindexfollow: The noindexfollow of this Owner.
        :type noindexfollow: bool
        """

        self._noindexfollow = noindexfollow

    @property
    def nsid(self):
        """Gets the nsid of this Owner.


        :return: The nsid of this Owner.
        :rtype: str
        """
        return self._nsid

    @nsid.setter
    def nsid(self, nsid):
        """Sets the nsid of this Owner.


        :param nsid: The nsid of this Owner.
        :type nsid: str
        """

        self._nsid = nsid

    @property
    def path_alias(self):
        """Gets the path_alias of this Owner.


        :return: The path_alias of this Owner.
        :rtype: str
        """
        return self._path_alias

    @path_alias.setter
    def path_alias(self, path_alias):
        """Sets the path_alias of this Owner.


        :param path_alias: The path_alias of this Owner.
        :type path_alias: str
        """

        self._path_alias = path_alias

    @property
    def realname(self):
        """Gets the realname of this Owner.


        :return: The realname of this Owner.
        :rtype: str
        """
        return self._realname

    @realname.setter
    def realname(self, realname):
        """Sets the realname of this Owner.


        :param realname: The realname of this Owner.
        :type realname: str
        """

        self._realname = realname

    @property
    def username(self):
        """Gets the username of this Owner.


        :return: The username of this Owner.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Owner.


        :param username: The username of this Owner.
        :type username: str
        """

        self._username = username
