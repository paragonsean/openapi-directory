# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, author_is_deleted: bool=None, author_path_alias: str=None, authorname: str=None, can_delete: bool=None, can_edit: bool=None, can_reply: bool=None, count_replies: int=None, datecreate: str=None, datelastpost: str=None, iconfarm: str=None, iconserver: str=None, id: str=None, is_locked: bool=None, is_pro: bool=None, is_sticky: bool=None, last_reply: str=None, lastedit: str=None, message: GetFavoritesContextByID200ResponseCount=None, role: str=None, subject: str=None):
        """Topic - a model defined in OpenAPI

        :param author: The author of this Topic.
        :param author_is_deleted: The author_is_deleted of this Topic.
        :param author_path_alias: The author_path_alias of this Topic.
        :param authorname: The authorname of this Topic.
        :param can_delete: The can_delete of this Topic.
        :param can_edit: The can_edit of this Topic.
        :param can_reply: The can_reply of this Topic.
        :param count_replies: The count_replies of this Topic.
        :param datecreate: The datecreate of this Topic.
        :param datelastpost: The datelastpost of this Topic.
        :param iconfarm: The iconfarm of this Topic.
        :param iconserver: The iconserver of this Topic.
        :param id: The id of this Topic.
        :param is_locked: The is_locked of this Topic.
        :param is_pro: The is_pro of this Topic.
        :param is_sticky: The is_sticky of this Topic.
        :param last_reply: The last_reply of this Topic.
        :param lastedit: The lastedit of this Topic.
        :param message: The message of this Topic.
        :param role: The role of this Topic.
        :param subject: The subject of this Topic.
        """
        self.openapi_types = {
            'author': str,
            'author_is_deleted': bool,
            'author_path_alias': str,
            'authorname': str,
            'can_delete': bool,
            'can_edit': bool,
            'can_reply': bool,
            'count_replies': int,
            'datecreate': str,
            'datelastpost': str,
            'iconfarm': str,
            'iconserver': str,
            'id': str,
            'is_locked': bool,
            'is_pro': bool,
            'is_sticky': bool,
            'last_reply': str,
            'lastedit': str,
            'message': GetFavoritesContextByID200ResponseCount,
            'role': str,
            'subject': str
        }

        self.attribute_map = {
            'author': 'author',
            'author_is_deleted': 'author_is_deleted',
            'author_path_alias': 'author_path_alias',
            'authorname': 'authorname',
            'can_delete': 'can_delete',
            'can_edit': 'can_edit',
            'can_reply': 'can_reply',
            'count_replies': 'count_replies',
            'datecreate': 'datecreate',
            'datelastpost': 'datelastpost',
            'iconfarm': 'iconfarm',
            'iconserver': 'iconserver',
            'id': 'id',
            'is_locked': 'is_locked',
            'is_pro': 'is_pro',
            'is_sticky': 'is_sticky',
            'last_reply': 'last_reply',
            'lastedit': 'lastedit',
            'message': 'message',
            'role': 'role',
            'subject': 'subject'
        }

        self._author = author
        self._author_is_deleted = author_is_deleted
        self._author_path_alias = author_path_alias
        self._authorname = authorname
        self._can_delete = can_delete
        self._can_edit = can_edit
        self._can_reply = can_reply
        self._count_replies = count_replies
        self._datecreate = datecreate
        self._datelastpost = datelastpost
        self._iconfarm = iconfarm
        self._iconserver = iconserver
        self._id = id
        self._is_locked = is_locked
        self._is_pro = is_pro
        self._is_sticky = is_sticky
        self._last_reply = last_reply
        self._lastedit = lastedit
        self._message = message
        self._role = role
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topic of this Topic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Topic.


        :return: The author of this Topic.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Topic.


        :param author: The author of this Topic.
        :type author: str
        """

        self._author = author

    @property
    def author_is_deleted(self):
        """Gets the author_is_deleted of this Topic.


        :return: The author_is_deleted of this Topic.
        :rtype: bool
        """
        return self._author_is_deleted

    @author_is_deleted.setter
    def author_is_deleted(self, author_is_deleted):
        """Sets the author_is_deleted of this Topic.


        :param author_is_deleted: The author_is_deleted of this Topic.
        :type author_is_deleted: bool
        """

        self._author_is_deleted = author_is_deleted

    @property
    def author_path_alias(self):
        """Gets the author_path_alias of this Topic.


        :return: The author_path_alias of this Topic.
        :rtype: str
        """
        return self._author_path_alias

    @author_path_alias.setter
    def author_path_alias(self, author_path_alias):
        """Sets the author_path_alias of this Topic.


        :param author_path_alias: The author_path_alias of this Topic.
        :type author_path_alias: str
        """

        self._author_path_alias = author_path_alias

    @property
    def authorname(self):
        """Gets the authorname of this Topic.


        :return: The authorname of this Topic.
        :rtype: str
        """
        return self._authorname

    @authorname.setter
    def authorname(self, authorname):
        """Sets the authorname of this Topic.


        :param authorname: The authorname of this Topic.
        :type authorname: str
        """

        self._authorname = authorname

    @property
    def can_delete(self):
        """Gets the can_delete of this Topic.


        :return: The can_delete of this Topic.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this Topic.


        :param can_delete: The can_delete of this Topic.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this Topic.


        :return: The can_edit of this Topic.
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this Topic.


        :param can_edit: The can_edit of this Topic.
        :type can_edit: bool
        """

        self._can_edit = can_edit

    @property
    def can_reply(self):
        """Gets the can_reply of this Topic.


        :return: The can_reply of this Topic.
        :rtype: bool
        """
        return self._can_reply

    @can_reply.setter
    def can_reply(self, can_reply):
        """Sets the can_reply of this Topic.


        :param can_reply: The can_reply of this Topic.
        :type can_reply: bool
        """

        self._can_reply = can_reply

    @property
    def count_replies(self):
        """Gets the count_replies of this Topic.


        :return: The count_replies of this Topic.
        :rtype: int
        """
        return self._count_replies

    @count_replies.setter
    def count_replies(self, count_replies):
        """Sets the count_replies of this Topic.


        :param count_replies: The count_replies of this Topic.
        :type count_replies: int
        """

        self._count_replies = count_replies

    @property
    def datecreate(self):
        """Gets the datecreate of this Topic.


        :return: The datecreate of this Topic.
        :rtype: str
        """
        return self._datecreate

    @datecreate.setter
    def datecreate(self, datecreate):
        """Sets the datecreate of this Topic.


        :param datecreate: The datecreate of this Topic.
        :type datecreate: str
        """

        self._datecreate = datecreate

    @property
    def datelastpost(self):
        """Gets the datelastpost of this Topic.


        :return: The datelastpost of this Topic.
        :rtype: str
        """
        return self._datelastpost

    @datelastpost.setter
    def datelastpost(self, datelastpost):
        """Sets the datelastpost of this Topic.


        :param datelastpost: The datelastpost of this Topic.
        :type datelastpost: str
        """

        self._datelastpost = datelastpost

    @property
    def iconfarm(self):
        """Gets the iconfarm of this Topic.


        :return: The iconfarm of this Topic.
        :rtype: str
        """
        return self._iconfarm

    @iconfarm.setter
    def iconfarm(self, iconfarm):
        """Sets the iconfarm of this Topic.


        :param iconfarm: The iconfarm of this Topic.
        :type iconfarm: str
        """

        self._iconfarm = iconfarm

    @property
    def iconserver(self):
        """Gets the iconserver of this Topic.


        :return: The iconserver of this Topic.
        :rtype: str
        """
        return self._iconserver

    @iconserver.setter
    def iconserver(self, iconserver):
        """Sets the iconserver of this Topic.


        :param iconserver: The iconserver of this Topic.
        :type iconserver: str
        """

        self._iconserver = iconserver

    @property
    def id(self):
        """Gets the id of this Topic.


        :return: The id of this Topic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Topic.


        :param id: The id of this Topic.
        :type id: str
        """

        self._id = id

    @property
    def is_locked(self):
        """Gets the is_locked of this Topic.


        :return: The is_locked of this Topic.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Topic.


        :param is_locked: The is_locked of this Topic.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def is_pro(self):
        """Gets the is_pro of this Topic.


        :return: The is_pro of this Topic.
        :rtype: bool
        """
        return self._is_pro

    @is_pro.setter
    def is_pro(self, is_pro):
        """Sets the is_pro of this Topic.


        :param is_pro: The is_pro of this Topic.
        :type is_pro: bool
        """

        self._is_pro = is_pro

    @property
    def is_sticky(self):
        """Gets the is_sticky of this Topic.


        :return: The is_sticky of this Topic.
        :rtype: bool
        """
        return self._is_sticky

    @is_sticky.setter
    def is_sticky(self, is_sticky):
        """Sets the is_sticky of this Topic.


        :param is_sticky: The is_sticky of this Topic.
        :type is_sticky: bool
        """

        self._is_sticky = is_sticky

    @property
    def last_reply(self):
        """Gets the last_reply of this Topic.


        :return: The last_reply of this Topic.
        :rtype: str
        """
        return self._last_reply

    @last_reply.setter
    def last_reply(self, last_reply):
        """Sets the last_reply of this Topic.


        :param last_reply: The last_reply of this Topic.
        :type last_reply: str
        """

        self._last_reply = last_reply

    @property
    def lastedit(self):
        """Gets the lastedit of this Topic.


        :return: The lastedit of this Topic.
        :rtype: str
        """
        return self._lastedit

    @lastedit.setter
    def lastedit(self, lastedit):
        """Sets the lastedit of this Topic.


        :param lastedit: The lastedit of this Topic.
        :type lastedit: str
        """

        self._lastedit = lastedit

    @property
    def message(self):
        """Gets the message of this Topic.


        :return: The message of this Topic.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Topic.


        :param message: The message of this Topic.
        :type message: GetFavoritesContextByID200ResponseCount
        """

        self._message = message

    @property
    def role(self):
        """Gets the role of this Topic.


        :return: The role of this Topic.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Topic.


        :param role: The role of this Topic.
        :type role: str
        """

        self._role = role

    @property
    def subject(self):
        """Gets the subject of this Topic.


        :return: The subject of this Topic.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Topic.


        :param subject: The subject of this Topic.
        :type subject: str
        """

        self._subject = subject
