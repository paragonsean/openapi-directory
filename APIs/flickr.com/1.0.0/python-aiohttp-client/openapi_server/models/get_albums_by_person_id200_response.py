# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album import Album
from openapi_server import util


class GetAlbumsByPersonID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page: float=None, pages: float=None, perpage: float=None, photosets: List[Album]=None, total: float=None):
        """GetAlbumsByPersonID200Response - a model defined in OpenAPI

        :param page: The page of this GetAlbumsByPersonID200Response.
        :param pages: The pages of this GetAlbumsByPersonID200Response.
        :param perpage: The perpage of this GetAlbumsByPersonID200Response.
        :param photosets: The photosets of this GetAlbumsByPersonID200Response.
        :param total: The total of this GetAlbumsByPersonID200Response.
        """
        self.openapi_types = {
            'page': float,
            'pages': float,
            'perpage': float,
            'photosets': List[Album],
            'total': float
        }

        self.attribute_map = {
            'page': 'page',
            'pages': 'pages',
            'perpage': 'perpage',
            'photosets': 'photosets',
            'total': 'total'
        }

        self._page = page
        self._pages = pages
        self._perpage = perpage
        self._photosets = photosets
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAlbumsByPersonID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getAlbumsByPersonID_200_response of this GetAlbumsByPersonID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page(self):
        """Gets the page of this GetAlbumsByPersonID200Response.


        :return: The page of this GetAlbumsByPersonID200Response.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GetAlbumsByPersonID200Response.


        :param page: The page of this GetAlbumsByPersonID200Response.
        :type page: float
        """

        self._page = page

    @property
    def pages(self):
        """Gets the pages of this GetAlbumsByPersonID200Response.


        :return: The pages of this GetAlbumsByPersonID200Response.
        :rtype: float
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this GetAlbumsByPersonID200Response.


        :param pages: The pages of this GetAlbumsByPersonID200Response.
        :type pages: float
        """

        self._pages = pages

    @property
    def perpage(self):
        """Gets the perpage of this GetAlbumsByPersonID200Response.


        :return: The perpage of this GetAlbumsByPersonID200Response.
        :rtype: float
        """
        return self._perpage

    @perpage.setter
    def perpage(self, perpage):
        """Sets the perpage of this GetAlbumsByPersonID200Response.


        :param perpage: The perpage of this GetAlbumsByPersonID200Response.
        :type perpage: float
        """

        self._perpage = perpage

    @property
    def photosets(self):
        """Gets the photosets of this GetAlbumsByPersonID200Response.


        :return: The photosets of this GetAlbumsByPersonID200Response.
        :rtype: List[Album]
        """
        return self._photosets

    @photosets.setter
    def photosets(self, photosets):
        """Sets the photosets of this GetAlbumsByPersonID200Response.


        :param photosets: The photosets of this GetAlbumsByPersonID200Response.
        :type photosets: List[Album]
        """

        self._photosets = photosets

    @property
    def total(self):
        """Gets the total of this GetAlbumsByPersonID200Response.


        :return: The total of this GetAlbumsByPersonID200Response.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetAlbumsByPersonID200Response.


        :param total: The total of this GetAlbumsByPersonID200Response.
        :type total: float
        """

        self._total = total
