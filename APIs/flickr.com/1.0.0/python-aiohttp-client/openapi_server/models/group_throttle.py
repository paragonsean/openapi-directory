# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupThrottle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, mode: str=None, remaining: str=None):
        """GroupThrottle - a model defined in OpenAPI

        :param count: The count of this GroupThrottle.
        :param mode: The mode of this GroupThrottle.
        :param remaining: The remaining of this GroupThrottle.
        """
        self.openapi_types = {
            'count': int,
            'mode': str,
            'remaining': str
        }

        self.attribute_map = {
            'count': 'count',
            'mode': 'mode',
            'remaining': 'remaining'
        }

        self._count = count
        self._mode = mode
        self._remaining = remaining

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupThrottle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group_throttle of this GroupThrottle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GroupThrottle.


        :return: The count of this GroupThrottle.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GroupThrottle.


        :param count: The count of this GroupThrottle.
        :type count: int
        """

        self._count = count

    @property
    def mode(self):
        """Gets the mode of this GroupThrottle.


        :return: The mode of this GroupThrottle.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GroupThrottle.


        :param mode: The mode of this GroupThrottle.
        :type mode: str
        """

        self._mode = mode

    @property
    def remaining(self):
        """Gets the remaining of this GroupThrottle.


        :return: The remaining of this GroupThrottle.
        :rtype: str
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this GroupThrottle.


        :param remaining: The remaining of this GroupThrottle.
        :type remaining: str
        """

        self._remaining = remaining
