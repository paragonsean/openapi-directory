# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Album(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_comment: bool=None, count_comments: float=None, count_views: float=None, date_create: float=None, date_update: float=None, description: str=None, farm: str=None, id: str=None, photos: float=None, primary: str=None, secret: str=None, server: str=None, title: str=None, videos: float=None):
        """Album - a model defined in OpenAPI

        :param can_comment: The can_comment of this Album.
        :param count_comments: The count_comments of this Album.
        :param count_views: The count_views of this Album.
        :param date_create: The date_create of this Album.
        :param date_update: The date_update of this Album.
        :param description: The description of this Album.
        :param farm: The farm of this Album.
        :param id: The id of this Album.
        :param photos: The photos of this Album.
        :param primary: The primary of this Album.
        :param secret: The secret of this Album.
        :param server: The server of this Album.
        :param title: The title of this Album.
        :param videos: The videos of this Album.
        """
        self.openapi_types = {
            'can_comment': bool,
            'count_comments': float,
            'count_views': float,
            'date_create': float,
            'date_update': float,
            'description': str,
            'farm': str,
            'id': str,
            'photos': float,
            'primary': str,
            'secret': str,
            'server': str,
            'title': str,
            'videos': float
        }

        self.attribute_map = {
            'can_comment': 'can_comment',
            'count_comments': 'count_comments',
            'count_views': 'count_views',
            'date_create': 'date_create',
            'date_update': 'date_update',
            'description': 'description',
            'farm': 'farm',
            'id': 'id',
            'photos': 'photos',
            'primary': 'primary',
            'secret': 'secret',
            'server': 'server',
            'title': 'title',
            'videos': 'videos'
        }

        self._can_comment = can_comment
        self._count_comments = count_comments
        self._count_views = count_views
        self._date_create = date_create
        self._date_update = date_update
        self._description = description
        self._farm = farm
        self._id = id
        self._photos = photos
        self._primary = primary
        self._secret = secret
        self._server = server
        self._title = title
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Album':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Album of this Album.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_comment(self):
        """Gets the can_comment of this Album.


        :return: The can_comment of this Album.
        :rtype: bool
        """
        return self._can_comment

    @can_comment.setter
    def can_comment(self, can_comment):
        """Sets the can_comment of this Album.


        :param can_comment: The can_comment of this Album.
        :type can_comment: bool
        """

        self._can_comment = can_comment

    @property
    def count_comments(self):
        """Gets the count_comments of this Album.


        :return: The count_comments of this Album.
        :rtype: float
        """
        return self._count_comments

    @count_comments.setter
    def count_comments(self, count_comments):
        """Sets the count_comments of this Album.


        :param count_comments: The count_comments of this Album.
        :type count_comments: float
        """

        self._count_comments = count_comments

    @property
    def count_views(self):
        """Gets the count_views of this Album.


        :return: The count_views of this Album.
        :rtype: float
        """
        return self._count_views

    @count_views.setter
    def count_views(self, count_views):
        """Sets the count_views of this Album.


        :param count_views: The count_views of this Album.
        :type count_views: float
        """

        self._count_views = count_views

    @property
    def date_create(self):
        """Gets the date_create of this Album.


        :return: The date_create of this Album.
        :rtype: float
        """
        return self._date_create

    @date_create.setter
    def date_create(self, date_create):
        """Sets the date_create of this Album.


        :param date_create: The date_create of this Album.
        :type date_create: float
        """

        self._date_create = date_create

    @property
    def date_update(self):
        """Gets the date_update of this Album.


        :return: The date_update of this Album.
        :rtype: float
        """
        return self._date_update

    @date_update.setter
    def date_update(self, date_update):
        """Sets the date_update of this Album.


        :param date_update: The date_update of this Album.
        :type date_update: float
        """

        self._date_update = date_update

    @property
    def description(self):
        """Gets the description of this Album.


        :return: The description of this Album.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Album.


        :param description: The description of this Album.
        :type description: str
        """

        self._description = description

    @property
    def farm(self):
        """Gets the farm of this Album.


        :return: The farm of this Album.
        :rtype: str
        """
        return self._farm

    @farm.setter
    def farm(self, farm):
        """Sets the farm of this Album.


        :param farm: The farm of this Album.
        :type farm: str
        """

        self._farm = farm

    @property
    def id(self):
        """Gets the id of this Album.


        :return: The id of this Album.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Album.


        :param id: The id of this Album.
        :type id: str
        """

        self._id = id

    @property
    def photos(self):
        """Gets the photos of this Album.


        :return: The photos of this Album.
        :rtype: float
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Album.


        :param photos: The photos of this Album.
        :type photos: float
        """

        self._photos = photos

    @property
    def primary(self):
        """Gets the primary of this Album.


        :return: The primary of this Album.
        :rtype: str
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this Album.


        :param primary: The primary of this Album.
        :type primary: str
        """

        self._primary = primary

    @property
    def secret(self):
        """Gets the secret of this Album.


        :return: The secret of this Album.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Album.


        :param secret: The secret of this Album.
        :type secret: str
        """

        self._secret = secret

    @property
    def server(self):
        """Gets the server of this Album.


        :return: The server of this Album.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this Album.


        :param server: The server of this Album.
        :type server: str
        """

        self._server = server

    @property
    def title(self):
        """Gets the title of this Album.


        :return: The title of this Album.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Album.


        :param title: The title of this Album.
        :type title: str
        """

        self._title = title

    @property
    def videos(self):
        """Gets the videos of this Album.


        :return: The videos of this Album.
        :rtype: float
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this Album.


        :param videos: The videos of this Album.
        :type videos: float
        """

        self._videos = videos
