# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_photo import ContextPhoto
from openapi_server.models.get_favorites_context_by_id200_response_count import GetFavoritesContextByID200ResponseCount
from openapi_server import util


class GetFavoritesContextByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: GetFavoritesContextByID200ResponseCount=None, nextphoto: ContextPhoto=None, prevphoto: ContextPhoto=None, stat: str=None):
        """GetFavoritesContextByID200Response - a model defined in OpenAPI

        :param count: The count of this GetFavoritesContextByID200Response.
        :param nextphoto: The nextphoto of this GetFavoritesContextByID200Response.
        :param prevphoto: The prevphoto of this GetFavoritesContextByID200Response.
        :param stat: The stat of this GetFavoritesContextByID200Response.
        """
        self.openapi_types = {
            'count': GetFavoritesContextByID200ResponseCount,
            'nextphoto': ContextPhoto,
            'prevphoto': ContextPhoto,
            'stat': str
        }

        self.attribute_map = {
            'count': 'count',
            'nextphoto': 'nextphoto',
            'prevphoto': 'prevphoto',
            'stat': 'stat'
        }

        self._count = count
        self._nextphoto = nextphoto
        self._prevphoto = prevphoto
        self._stat = stat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFavoritesContextByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getFavoritesContextByID_200_response of this GetFavoritesContextByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GetFavoritesContextByID200Response.


        :return: The count of this GetFavoritesContextByID200Response.
        :rtype: GetFavoritesContextByID200ResponseCount
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetFavoritesContextByID200Response.


        :param count: The count of this GetFavoritesContextByID200Response.
        :type count: GetFavoritesContextByID200ResponseCount
        """

        self._count = count

    @property
    def nextphoto(self):
        """Gets the nextphoto of this GetFavoritesContextByID200Response.


        :return: The nextphoto of this GetFavoritesContextByID200Response.
        :rtype: ContextPhoto
        """
        return self._nextphoto

    @nextphoto.setter
    def nextphoto(self, nextphoto):
        """Sets the nextphoto of this GetFavoritesContextByID200Response.


        :param nextphoto: The nextphoto of this GetFavoritesContextByID200Response.
        :type nextphoto: ContextPhoto
        """

        self._nextphoto = nextphoto

    @property
    def prevphoto(self):
        """Gets the prevphoto of this GetFavoritesContextByID200Response.


        :return: The prevphoto of this GetFavoritesContextByID200Response.
        :rtype: ContextPhoto
        """
        return self._prevphoto

    @prevphoto.setter
    def prevphoto(self, prevphoto):
        """Sets the prevphoto of this GetFavoritesContextByID200Response.


        :param prevphoto: The prevphoto of this GetFavoritesContextByID200Response.
        :type prevphoto: ContextPhoto
        """

        self._prevphoto = prevphoto

    @property
    def stat(self):
        """Gets the stat of this GetFavoritesContextByID200Response.


        :return: The stat of this GetFavoritesContextByID200Response.
        :rtype: str
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this GetFavoritesContextByID200Response.


        :param stat: The stat of this GetFavoritesContextByID200Response.
        :type stat: str
        """

        self._stat = stat
