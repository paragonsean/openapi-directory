/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Topic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetGroupDiscussionsByID200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:49.490227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetGroupDiscussionsByID200Response {
  public static final String SERIALIZED_NAME_ICONFARM = "iconfarm";
  @SerializedName(SERIALIZED_NAME_ICONFARM)
  private BigDecimal iconfarm;

  public static final String SERIALIZED_NAME_ICONSERVER = "iconserver";
  @SerializedName(SERIALIZED_NAME_ICONSERVER)
  private BigDecimal iconserver;

  public static final String SERIALIZED_NAME_ISPOOLMODERATED = "ispoolmoderated";
  @SerializedName(SERIALIZED_NAME_ISPOOLMODERATED)
  private Boolean ispoolmoderated;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private BigDecimal members;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private BigDecimal page;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private BigDecimal pages;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private BigDecimal perPage;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private BigDecimal privacy;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Topic> topics = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public GetGroupDiscussionsByID200Response() {
  }

  public GetGroupDiscussionsByID200Response iconfarm(BigDecimal iconfarm) {
    this.iconfarm = iconfarm;
    return this;
  }

  /**
   * Get iconfarm
   * @return iconfarm
   */
  @javax.annotation.Nullable
  public BigDecimal getIconfarm() {
    return iconfarm;
  }

  public void setIconfarm(BigDecimal iconfarm) {
    this.iconfarm = iconfarm;
  }


  public GetGroupDiscussionsByID200Response iconserver(BigDecimal iconserver) {
    this.iconserver = iconserver;
    return this;
  }

  /**
   * Get iconserver
   * @return iconserver
   */
  @javax.annotation.Nullable
  public BigDecimal getIconserver() {
    return iconserver;
  }

  public void setIconserver(BigDecimal iconserver) {
    this.iconserver = iconserver;
  }


  public GetGroupDiscussionsByID200Response ispoolmoderated(Boolean ispoolmoderated) {
    this.ispoolmoderated = ispoolmoderated;
    return this;
  }

  /**
   * Get ispoolmoderated
   * @return ispoolmoderated
   */
  @javax.annotation.Nullable
  public Boolean getIspoolmoderated() {
    return ispoolmoderated;
  }

  public void setIspoolmoderated(Boolean ispoolmoderated) {
    this.ispoolmoderated = ispoolmoderated;
  }


  public GetGroupDiscussionsByID200Response lang(String lang) {
    this.lang = lang;
    return this;
  }

  /**
   * Get lang
   * @return lang
   */
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public GetGroupDiscussionsByID200Response members(BigDecimal members) {
    this.members = members;
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nullable
  public BigDecimal getMembers() {
    return members;
  }

  public void setMembers(BigDecimal members) {
    this.members = members;
  }


  public GetGroupDiscussionsByID200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetGroupDiscussionsByID200Response page(BigDecimal page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public BigDecimal getPage() {
    return page;
  }

  public void setPage(BigDecimal page) {
    this.page = page;
  }


  public GetGroupDiscussionsByID200Response pages(BigDecimal pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public BigDecimal getPages() {
    return pages;
  }

  public void setPages(BigDecimal pages) {
    this.pages = pages;
  }


  public GetGroupDiscussionsByID200Response perPage(BigDecimal perPage) {
    this.perPage = perPage;
    return this;
  }

  /**
   * Get perPage
   * @return perPage
   */
  @javax.annotation.Nullable
  public BigDecimal getPerPage() {
    return perPage;
  }

  public void setPerPage(BigDecimal perPage) {
    this.perPage = perPage;
  }


  public GetGroupDiscussionsByID200Response privacy(BigDecimal privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nullable
  public BigDecimal getPrivacy() {
    return privacy;
  }

  public void setPrivacy(BigDecimal privacy) {
    this.privacy = privacy;
  }


  public GetGroupDiscussionsByID200Response topics(List<Topic> topics) {
    this.topics = topics;
    return this;
  }

  public GetGroupDiscussionsByID200Response addTopicsItem(Topic topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * Get topics
   * @return topics
   */
  @javax.annotation.Nullable
  public List<Topic> getTopics() {
    return topics;
  }

  public void setTopics(List<Topic> topics) {
    this.topics = topics;
  }


  public GetGroupDiscussionsByID200Response total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetGroupDiscussionsByID200Response getGroupDiscussionsByID200Response = (GetGroupDiscussionsByID200Response) o;
    return Objects.equals(this.iconfarm, getGroupDiscussionsByID200Response.iconfarm) &&
        Objects.equals(this.iconserver, getGroupDiscussionsByID200Response.iconserver) &&
        Objects.equals(this.ispoolmoderated, getGroupDiscussionsByID200Response.ispoolmoderated) &&
        Objects.equals(this.lang, getGroupDiscussionsByID200Response.lang) &&
        Objects.equals(this.members, getGroupDiscussionsByID200Response.members) &&
        Objects.equals(this.name, getGroupDiscussionsByID200Response.name) &&
        Objects.equals(this.page, getGroupDiscussionsByID200Response.page) &&
        Objects.equals(this.pages, getGroupDiscussionsByID200Response.pages) &&
        Objects.equals(this.perPage, getGroupDiscussionsByID200Response.perPage) &&
        Objects.equals(this.privacy, getGroupDiscussionsByID200Response.privacy) &&
        Objects.equals(this.topics, getGroupDiscussionsByID200Response.topics) &&
        Objects.equals(this.total, getGroupDiscussionsByID200Response.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iconfarm, iconserver, ispoolmoderated, lang, members, name, page, pages, perPage, privacy, topics, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetGroupDiscussionsByID200Response {\n");
    sb.append("    iconfarm: ").append(toIndentedString(iconfarm)).append("\n");
    sb.append("    iconserver: ").append(toIndentedString(iconserver)).append("\n");
    sb.append("    ispoolmoderated: ").append(toIndentedString(ispoolmoderated)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iconfarm");
    openapiFields.add("iconserver");
    openapiFields.add("ispoolmoderated");
    openapiFields.add("lang");
    openapiFields.add("members");
    openapiFields.add("name");
    openapiFields.add("page");
    openapiFields.add("pages");
    openapiFields.add("per_page");
    openapiFields.add("privacy");
    openapiFields.add("topics");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetGroupDiscussionsByID200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetGroupDiscussionsByID200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetGroupDiscussionsByID200Response is not found in the empty JSON string", GetGroupDiscussionsByID200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetGroupDiscussionsByID200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGroupDiscussionsByID200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull()) {
        JsonArray jsonArraytopics = jsonObj.getAsJsonArray("topics");
        if (jsonArraytopics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
          }

          // validate the optional field `topics` (array)
          for (int i = 0; i < jsonArraytopics.size(); i++) {
            Topic.validateJsonElement(jsonArraytopics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetGroupDiscussionsByID200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetGroupDiscussionsByID200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetGroupDiscussionsByID200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetGroupDiscussionsByID200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetGroupDiscussionsByID200Response>() {
           @Override
           public void write(JsonWriter out, GetGroupDiscussionsByID200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetGroupDiscussionsByID200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetGroupDiscussionsByID200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetGroupDiscussionsByID200Response
   * @throws IOException if the JSON string is invalid with respect to GetGroupDiscussionsByID200Response
   */
  public static GetGroupDiscussionsByID200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetGroupDiscussionsByID200Response.class);
  }

  /**
   * Convert an instance of GetGroupDiscussionsByID200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

