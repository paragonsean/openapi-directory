/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetPhotoExifByID200ResponsePhotoExifInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPhotoExifByID200ResponsePhoto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:49.490227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPhotoExifByID200ResponsePhoto {
  public static final String SERIALIZED_NAME_CAMERA = "camera";
  @SerializedName(SERIALIZED_NAME_CAMERA)
  private String camera;

  public static final String SERIALIZED_NAME_EXIF = "exif";
  @SerializedName(SERIALIZED_NAME_EXIF)
  private List<GetPhotoExifByID200ResponsePhotoExifInner> exif = new ArrayList<>();

  public static final String SERIALIZED_NAME_FARM = "farm";
  @SerializedName(SERIALIZED_NAME_FARM)
  private String farm;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public GetPhotoExifByID200ResponsePhoto() {
  }

  public GetPhotoExifByID200ResponsePhoto camera(String camera) {
    this.camera = camera;
    return this;
  }

  /**
   * Get camera
   * @return camera
   */
  @javax.annotation.Nullable
  public String getCamera() {
    return camera;
  }

  public void setCamera(String camera) {
    this.camera = camera;
  }


  public GetPhotoExifByID200ResponsePhoto exif(List<GetPhotoExifByID200ResponsePhotoExifInner> exif) {
    this.exif = exif;
    return this;
  }

  public GetPhotoExifByID200ResponsePhoto addExifItem(GetPhotoExifByID200ResponsePhotoExifInner exifItem) {
    if (this.exif == null) {
      this.exif = new ArrayList<>();
    }
    this.exif.add(exifItem);
    return this;
  }

  /**
   * Get exif
   * @return exif
   */
  @javax.annotation.Nullable
  public List<GetPhotoExifByID200ResponsePhotoExifInner> getExif() {
    return exif;
  }

  public void setExif(List<GetPhotoExifByID200ResponsePhotoExifInner> exif) {
    this.exif = exif;
  }


  public GetPhotoExifByID200ResponsePhoto farm(String farm) {
    this.farm = farm;
    return this;
  }

  /**
   * Get farm
   * @return farm
   */
  @javax.annotation.Nullable
  public String getFarm() {
    return farm;
  }

  public void setFarm(String farm) {
    this.farm = farm;
  }


  public GetPhotoExifByID200ResponsePhoto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetPhotoExifByID200ResponsePhoto secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public GetPhotoExifByID200ResponsePhoto server(String server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPhotoExifByID200ResponsePhoto getPhotoExifByID200ResponsePhoto = (GetPhotoExifByID200ResponsePhoto) o;
    return Objects.equals(this.camera, getPhotoExifByID200ResponsePhoto.camera) &&
        Objects.equals(this.exif, getPhotoExifByID200ResponsePhoto.exif) &&
        Objects.equals(this.farm, getPhotoExifByID200ResponsePhoto.farm) &&
        Objects.equals(this.id, getPhotoExifByID200ResponsePhoto.id) &&
        Objects.equals(this.secret, getPhotoExifByID200ResponsePhoto.secret) &&
        Objects.equals(this.server, getPhotoExifByID200ResponsePhoto.server);
  }

  @Override
  public int hashCode() {
    return Objects.hash(camera, exif, farm, id, secret, server);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPhotoExifByID200ResponsePhoto {\n");
    sb.append("    camera: ").append(toIndentedString(camera)).append("\n");
    sb.append("    exif: ").append(toIndentedString(exif)).append("\n");
    sb.append("    farm: ").append(toIndentedString(farm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("camera");
    openapiFields.add("exif");
    openapiFields.add("farm");
    openapiFields.add("id");
    openapiFields.add("secret");
    openapiFields.add("server");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPhotoExifByID200ResponsePhoto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPhotoExifByID200ResponsePhoto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPhotoExifByID200ResponsePhoto is not found in the empty JSON string", GetPhotoExifByID200ResponsePhoto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPhotoExifByID200ResponsePhoto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPhotoExifByID200ResponsePhoto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("camera") != null && !jsonObj.get("camera").isJsonNull()) && !jsonObj.get("camera").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `camera` to be a primitive type in the JSON string but got `%s`", jsonObj.get("camera").toString()));
      }
      if (jsonObj.get("exif") != null && !jsonObj.get("exif").isJsonNull()) {
        JsonArray jsonArrayexif = jsonObj.getAsJsonArray("exif");
        if (jsonArrayexif != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exif").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exif` to be an array in the JSON string but got `%s`", jsonObj.get("exif").toString()));
          }

          // validate the optional field `exif` (array)
          for (int i = 0; i < jsonArrayexif.size(); i++) {
            GetPhotoExifByID200ResponsePhotoExifInner.validateJsonElement(jsonArrayexif.get(i));
          };
        }
      }
      if ((jsonObj.get("farm") != null && !jsonObj.get("farm").isJsonNull()) && !jsonObj.get("farm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `farm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("farm").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPhotoExifByID200ResponsePhoto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPhotoExifByID200ResponsePhoto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPhotoExifByID200ResponsePhoto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPhotoExifByID200ResponsePhoto.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPhotoExifByID200ResponsePhoto>() {
           @Override
           public void write(JsonWriter out, GetPhotoExifByID200ResponsePhoto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPhotoExifByID200ResponsePhoto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPhotoExifByID200ResponsePhoto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPhotoExifByID200ResponsePhoto
   * @throws IOException if the JSON string is invalid with respect to GetPhotoExifByID200ResponsePhoto
   */
  public static GetPhotoExifByID200ResponsePhoto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPhotoExifByID200ResponsePhoto.class);
  }

  /**
   * Convert an instance of GetPhotoExifByID200ResponsePhoto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

