/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Album
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:49.490227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Album {
  public static final String SERIALIZED_NAME_CAN_COMMENT = "can_comment";
  @SerializedName(SERIALIZED_NAME_CAN_COMMENT)
  private Boolean canComment;

  public static final String SERIALIZED_NAME_COUNT_COMMENTS = "count_comments";
  @SerializedName(SERIALIZED_NAME_COUNT_COMMENTS)
  private BigDecimal countComments;

  public static final String SERIALIZED_NAME_COUNT_VIEWS = "count_views";
  @SerializedName(SERIALIZED_NAME_COUNT_VIEWS)
  private BigDecimal countViews;

  public static final String SERIALIZED_NAME_DATE_CREATE = "date_create";
  @SerializedName(SERIALIZED_NAME_DATE_CREATE)
  private BigDecimal dateCreate;

  public static final String SERIALIZED_NAME_DATE_UPDATE = "date_update";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATE)
  private BigDecimal dateUpdate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FARM = "farm";
  @SerializedName(SERIALIZED_NAME_FARM)
  private String farm;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private BigDecimal photos;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private String primary;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private BigDecimal videos;

  public Album() {
  }

  public Album canComment(Boolean canComment) {
    this.canComment = canComment;
    return this;
  }

  /**
   * Get canComment
   * @return canComment
   */
  @javax.annotation.Nullable
  public Boolean getCanComment() {
    return canComment;
  }

  public void setCanComment(Boolean canComment) {
    this.canComment = canComment;
  }


  public Album countComments(BigDecimal countComments) {
    this.countComments = countComments;
    return this;
  }

  /**
   * Get countComments
   * @return countComments
   */
  @javax.annotation.Nullable
  public BigDecimal getCountComments() {
    return countComments;
  }

  public void setCountComments(BigDecimal countComments) {
    this.countComments = countComments;
  }


  public Album countViews(BigDecimal countViews) {
    this.countViews = countViews;
    return this;
  }

  /**
   * Get countViews
   * @return countViews
   */
  @javax.annotation.Nullable
  public BigDecimal getCountViews() {
    return countViews;
  }

  public void setCountViews(BigDecimal countViews) {
    this.countViews = countViews;
  }


  public Album dateCreate(BigDecimal dateCreate) {
    this.dateCreate = dateCreate;
    return this;
  }

  /**
   * Get dateCreate
   * @return dateCreate
   */
  @javax.annotation.Nullable
  public BigDecimal getDateCreate() {
    return dateCreate;
  }

  public void setDateCreate(BigDecimal dateCreate) {
    this.dateCreate = dateCreate;
  }


  public Album dateUpdate(BigDecimal dateUpdate) {
    this.dateUpdate = dateUpdate;
    return this;
  }

  /**
   * Get dateUpdate
   * @return dateUpdate
   */
  @javax.annotation.Nullable
  public BigDecimal getDateUpdate() {
    return dateUpdate;
  }

  public void setDateUpdate(BigDecimal dateUpdate) {
    this.dateUpdate = dateUpdate;
  }


  public Album description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Album farm(String farm) {
    this.farm = farm;
    return this;
  }

  /**
   * Get farm
   * @return farm
   */
  @javax.annotation.Nullable
  public String getFarm() {
    return farm;
  }

  public void setFarm(String farm) {
    this.farm = farm;
  }


  public Album id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Album photos(BigDecimal photos) {
    this.photos = photos;
    return this;
  }

  /**
   * Get photos
   * @return photos
   */
  @javax.annotation.Nullable
  public BigDecimal getPhotos() {
    return photos;
  }

  public void setPhotos(BigDecimal photos) {
    this.photos = photos;
  }


  public Album primary(String primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Get primary
   * @return primary
   */
  @javax.annotation.Nullable
  public String getPrimary() {
    return primary;
  }

  public void setPrimary(String primary) {
    this.primary = primary;
  }


  public Album secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public Album server(String server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public Album title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Album videos(BigDecimal videos) {
    this.videos = videos;
    return this;
  }

  /**
   * Get videos
   * @return videos
   */
  @javax.annotation.Nullable
  public BigDecimal getVideos() {
    return videos;
  }

  public void setVideos(BigDecimal videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Album album = (Album) o;
    return Objects.equals(this.canComment, album.canComment) &&
        Objects.equals(this.countComments, album.countComments) &&
        Objects.equals(this.countViews, album.countViews) &&
        Objects.equals(this.dateCreate, album.dateCreate) &&
        Objects.equals(this.dateUpdate, album.dateUpdate) &&
        Objects.equals(this.description, album.description) &&
        Objects.equals(this.farm, album.farm) &&
        Objects.equals(this.id, album.id) &&
        Objects.equals(this.photos, album.photos) &&
        Objects.equals(this.primary, album.primary) &&
        Objects.equals(this.secret, album.secret) &&
        Objects.equals(this.server, album.server) &&
        Objects.equals(this.title, album.title) &&
        Objects.equals(this.videos, album.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canComment, countComments, countViews, dateCreate, dateUpdate, description, farm, id, photos, primary, secret, server, title, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Album {\n");
    sb.append("    canComment: ").append(toIndentedString(canComment)).append("\n");
    sb.append("    countComments: ").append(toIndentedString(countComments)).append("\n");
    sb.append("    countViews: ").append(toIndentedString(countViews)).append("\n");
    sb.append("    dateCreate: ").append(toIndentedString(dateCreate)).append("\n");
    sb.append("    dateUpdate: ").append(toIndentedString(dateUpdate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    farm: ").append(toIndentedString(farm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_comment");
    openapiFields.add("count_comments");
    openapiFields.add("count_views");
    openapiFields.add("date_create");
    openapiFields.add("date_update");
    openapiFields.add("description");
    openapiFields.add("farm");
    openapiFields.add("id");
    openapiFields.add("photos");
    openapiFields.add("primary");
    openapiFields.add("secret");
    openapiFields.add("server");
    openapiFields.add("title");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Album
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Album.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Album is not found in the empty JSON string", Album.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Album.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Album` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("farm") != null && !jsonObj.get("farm").isJsonNull()) && !jsonObj.get("farm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `farm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("farm").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("primary") != null && !jsonObj.get("primary").isJsonNull()) && !jsonObj.get("primary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Album.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Album' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Album> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Album.class));

       return (TypeAdapter<T>) new TypeAdapter<Album>() {
           @Override
           public void write(JsonWriter out, Album value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Album read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Album given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Album
   * @throws IOException if the JSON string is invalid with respect to Album
   */
  public static Album fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Album.class);
  }

  /**
   * Convert an instance of Album to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

