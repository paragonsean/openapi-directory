/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetFavoritesContextByID200ResponseCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPhotoExifByID200ResponsePhotoExifInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:49.490227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPhotoExifByID200ResponsePhotoExifInner {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private GetFavoritesContextByID200ResponseCount raw;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TAGSPACE = "tagspace";
  @SerializedName(SERIALIZED_NAME_TAGSPACE)
  private String tagspace;

  public static final String SERIALIZED_NAME_TAGSPACEID = "tagspaceid";
  @SerializedName(SERIALIZED_NAME_TAGSPACEID)
  private String tagspaceid;

  public GetPhotoExifByID200ResponsePhotoExifInner() {
  }

  public GetPhotoExifByID200ResponsePhotoExifInner label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public GetPhotoExifByID200ResponsePhotoExifInner raw(GetFavoritesContextByID200ResponseCount raw) {
    this.raw = raw;
    return this;
  }

  /**
   * Get raw
   * @return raw
   */
  @javax.annotation.Nullable
  public GetFavoritesContextByID200ResponseCount getRaw() {
    return raw;
  }

  public void setRaw(GetFavoritesContextByID200ResponseCount raw) {
    this.raw = raw;
  }


  public GetPhotoExifByID200ResponsePhotoExifInner tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public GetPhotoExifByID200ResponsePhotoExifInner tagspace(String tagspace) {
    this.tagspace = tagspace;
    return this;
  }

  /**
   * Get tagspace
   * @return tagspace
   */
  @javax.annotation.Nullable
  public String getTagspace() {
    return tagspace;
  }

  public void setTagspace(String tagspace) {
    this.tagspace = tagspace;
  }


  public GetPhotoExifByID200ResponsePhotoExifInner tagspaceid(String tagspaceid) {
    this.tagspaceid = tagspaceid;
    return this;
  }

  /**
   * Get tagspaceid
   * @return tagspaceid
   */
  @javax.annotation.Nullable
  public String getTagspaceid() {
    return tagspaceid;
  }

  public void setTagspaceid(String tagspaceid) {
    this.tagspaceid = tagspaceid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPhotoExifByID200ResponsePhotoExifInner getPhotoExifByID200ResponsePhotoExifInner = (GetPhotoExifByID200ResponsePhotoExifInner) o;
    return Objects.equals(this.label, getPhotoExifByID200ResponsePhotoExifInner.label) &&
        Objects.equals(this.raw, getPhotoExifByID200ResponsePhotoExifInner.raw) &&
        Objects.equals(this.tag, getPhotoExifByID200ResponsePhotoExifInner.tag) &&
        Objects.equals(this.tagspace, getPhotoExifByID200ResponsePhotoExifInner.tagspace) &&
        Objects.equals(this.tagspaceid, getPhotoExifByID200ResponsePhotoExifInner.tagspaceid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, raw, tag, tagspace, tagspaceid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPhotoExifByID200ResponsePhotoExifInner {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tagspace: ").append(toIndentedString(tagspace)).append("\n");
    sb.append("    tagspaceid: ").append(toIndentedString(tagspaceid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("raw");
    openapiFields.add("tag");
    openapiFields.add("tagspace");
    openapiFields.add("tagspaceid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPhotoExifByID200ResponsePhotoExifInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPhotoExifByID200ResponsePhotoExifInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPhotoExifByID200ResponsePhotoExifInner is not found in the empty JSON string", GetPhotoExifByID200ResponsePhotoExifInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPhotoExifByID200ResponsePhotoExifInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPhotoExifByID200ResponsePhotoExifInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `raw`
      if (jsonObj.get("raw") != null && !jsonObj.get("raw").isJsonNull()) {
        GetFavoritesContextByID200ResponseCount.validateJsonElement(jsonObj.get("raw"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("tagspace") != null && !jsonObj.get("tagspace").isJsonNull()) && !jsonObj.get("tagspace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagspace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagspace").toString()));
      }
      if ((jsonObj.get("tagspaceid") != null && !jsonObj.get("tagspaceid").isJsonNull()) && !jsonObj.get("tagspaceid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagspaceid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagspaceid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPhotoExifByID200ResponsePhotoExifInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPhotoExifByID200ResponsePhotoExifInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPhotoExifByID200ResponsePhotoExifInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPhotoExifByID200ResponsePhotoExifInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPhotoExifByID200ResponsePhotoExifInner>() {
           @Override
           public void write(JsonWriter out, GetPhotoExifByID200ResponsePhotoExifInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPhotoExifByID200ResponsePhotoExifInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPhotoExifByID200ResponsePhotoExifInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPhotoExifByID200ResponsePhotoExifInner
   * @throws IOException if the JSON string is invalid with respect to GetPhotoExifByID200ResponsePhotoExifInner
   */
  public static GetPhotoExifByID200ResponsePhotoExifInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPhotoExifByID200ResponsePhotoExifInner.class);
  }

  /**
   * Convert an instance of GetPhotoExifByID200ResponsePhotoExifInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

