/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Photo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetFavoritesByPersonID200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:49.490227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetFavoritesByPersonID200Response {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private BigDecimal page;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private BigDecimal pages;

  public static final String SERIALIZED_NAME_PERPAGE = "perpage";
  @SerializedName(SERIALIZED_NAME_PERPAGE)
  private BigDecimal perpage;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<Photo> photos = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public GetFavoritesByPersonID200Response() {
  }

  public GetFavoritesByPersonID200Response page(BigDecimal page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public BigDecimal getPage() {
    return page;
  }

  public void setPage(BigDecimal page) {
    this.page = page;
  }


  public GetFavoritesByPersonID200Response pages(BigDecimal pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public BigDecimal getPages() {
    return pages;
  }

  public void setPages(BigDecimal pages) {
    this.pages = pages;
  }


  public GetFavoritesByPersonID200Response perpage(BigDecimal perpage) {
    this.perpage = perpage;
    return this;
  }

  /**
   * Get perpage
   * @return perpage
   */
  @javax.annotation.Nullable
  public BigDecimal getPerpage() {
    return perpage;
  }

  public void setPerpage(BigDecimal perpage) {
    this.perpage = perpage;
  }


  public GetFavoritesByPersonID200Response photos(List<Photo> photos) {
    this.photos = photos;
    return this;
  }

  public GetFavoritesByPersonID200Response addPhotosItem(Photo photosItem) {
    if (this.photos == null) {
      this.photos = new ArrayList<>();
    }
    this.photos.add(photosItem);
    return this;
  }

  /**
   * Get photos
   * @return photos
   */
  @javax.annotation.Nullable
  public List<Photo> getPhotos() {
    return photos;
  }

  public void setPhotos(List<Photo> photos) {
    this.photos = photos;
  }


  public GetFavoritesByPersonID200Response total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFavoritesByPersonID200Response getFavoritesByPersonID200Response = (GetFavoritesByPersonID200Response) o;
    return Objects.equals(this.page, getFavoritesByPersonID200Response.page) &&
        Objects.equals(this.pages, getFavoritesByPersonID200Response.pages) &&
        Objects.equals(this.perpage, getFavoritesByPersonID200Response.perpage) &&
        Objects.equals(this.photos, getFavoritesByPersonID200Response.photos) &&
        Objects.equals(this.total, getFavoritesByPersonID200Response.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, pages, perpage, photos, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFavoritesByPersonID200Response {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    perpage: ").append(toIndentedString(perpage)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page");
    openapiFields.add("pages");
    openapiFields.add("perpage");
    openapiFields.add("photos");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetFavoritesByPersonID200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFavoritesByPersonID200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFavoritesByPersonID200Response is not found in the empty JSON string", GetFavoritesByPersonID200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFavoritesByPersonID200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFavoritesByPersonID200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull()) {
        JsonArray jsonArrayphotos = jsonObj.getAsJsonArray("photos");
        if (jsonArrayphotos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("photos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
          }

          // validate the optional field `photos` (array)
          for (int i = 0; i < jsonArrayphotos.size(); i++) {
            Photo.validateJsonElement(jsonArrayphotos.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFavoritesByPersonID200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFavoritesByPersonID200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFavoritesByPersonID200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFavoritesByPersonID200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFavoritesByPersonID200Response>() {
           @Override
           public void write(JsonWriter out, GetFavoritesByPersonID200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFavoritesByPersonID200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetFavoritesByPersonID200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetFavoritesByPersonID200Response
   * @throws IOException if the JSON string is invalid with respect to GetFavoritesByPersonID200Response
   */
  public static GetFavoritesByPersonID200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFavoritesByPersonID200Response.class);
  }

  /**
   * Convert an instance of GetFavoritesByPersonID200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

