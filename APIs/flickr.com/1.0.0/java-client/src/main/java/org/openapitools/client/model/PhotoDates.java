/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PhotoDates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:49.490227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhotoDates {
  public static final String SERIALIZED_NAME_LASTUPDATE = "lastupdate";
  @SerializedName(SERIALIZED_NAME_LASTUPDATE)
  private String lastupdate;

  public static final String SERIALIZED_NAME_POSTED = "posted";
  @SerializedName(SERIALIZED_NAME_POSTED)
  private String posted;

  public static final String SERIALIZED_NAME_TAKEN = "taken";
  @SerializedName(SERIALIZED_NAME_TAKEN)
  private String taken;

  public static final String SERIALIZED_NAME_TAKENGRANULARITY = "takengranularity";
  @SerializedName(SERIALIZED_NAME_TAKENGRANULARITY)
  private String takengranularity;

  public static final String SERIALIZED_NAME_TAKENUNKNOWN = "takenunknown";
  @SerializedName(SERIALIZED_NAME_TAKENUNKNOWN)
  private Boolean takenunknown;

  public PhotoDates() {
  }

  public PhotoDates lastupdate(String lastupdate) {
    this.lastupdate = lastupdate;
    return this;
  }

  /**
   * Get lastupdate
   * @return lastupdate
   */
  @javax.annotation.Nullable
  public String getLastupdate() {
    return lastupdate;
  }

  public void setLastupdate(String lastupdate) {
    this.lastupdate = lastupdate;
  }


  public PhotoDates posted(String posted) {
    this.posted = posted;
    return this;
  }

  /**
   * Get posted
   * @return posted
   */
  @javax.annotation.Nullable
  public String getPosted() {
    return posted;
  }

  public void setPosted(String posted) {
    this.posted = posted;
  }


  public PhotoDates taken(String taken) {
    this.taken = taken;
    return this;
  }

  /**
   * Get taken
   * @return taken
   */
  @javax.annotation.Nullable
  public String getTaken() {
    return taken;
  }

  public void setTaken(String taken) {
    this.taken = taken;
  }


  public PhotoDates takengranularity(String takengranularity) {
    this.takengranularity = takengranularity;
    return this;
  }

  /**
   * Get takengranularity
   * @return takengranularity
   */
  @javax.annotation.Nullable
  public String getTakengranularity() {
    return takengranularity;
  }

  public void setTakengranularity(String takengranularity) {
    this.takengranularity = takengranularity;
  }


  public PhotoDates takenunknown(Boolean takenunknown) {
    this.takenunknown = takenunknown;
    return this;
  }

  /**
   * Get takenunknown
   * @return takenunknown
   */
  @javax.annotation.Nullable
  public Boolean getTakenunknown() {
    return takenunknown;
  }

  public void setTakenunknown(Boolean takenunknown) {
    this.takenunknown = takenunknown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhotoDates photoDates = (PhotoDates) o;
    return Objects.equals(this.lastupdate, photoDates.lastupdate) &&
        Objects.equals(this.posted, photoDates.posted) &&
        Objects.equals(this.taken, photoDates.taken) &&
        Objects.equals(this.takengranularity, photoDates.takengranularity) &&
        Objects.equals(this.takenunknown, photoDates.takenunknown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastupdate, posted, taken, takengranularity, takenunknown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhotoDates {\n");
    sb.append("    lastupdate: ").append(toIndentedString(lastupdate)).append("\n");
    sb.append("    posted: ").append(toIndentedString(posted)).append("\n");
    sb.append("    taken: ").append(toIndentedString(taken)).append("\n");
    sb.append("    takengranularity: ").append(toIndentedString(takengranularity)).append("\n");
    sb.append("    takenunknown: ").append(toIndentedString(takenunknown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastupdate");
    openapiFields.add("posted");
    openapiFields.add("taken");
    openapiFields.add("takengranularity");
    openapiFields.add("takenunknown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhotoDates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhotoDates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhotoDates is not found in the empty JSON string", PhotoDates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhotoDates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhotoDates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastupdate") != null && !jsonObj.get("lastupdate").isJsonNull()) && !jsonObj.get("lastupdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastupdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastupdate").toString()));
      }
      if ((jsonObj.get("posted") != null && !jsonObj.get("posted").isJsonNull()) && !jsonObj.get("posted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posted").toString()));
      }
      if ((jsonObj.get("taken") != null && !jsonObj.get("taken").isJsonNull()) && !jsonObj.get("taken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taken").toString()));
      }
      if ((jsonObj.get("takengranularity") != null && !jsonObj.get("takengranularity").isJsonNull()) && !jsonObj.get("takengranularity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `takengranularity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("takengranularity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhotoDates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhotoDates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhotoDates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhotoDates.class));

       return (TypeAdapter<T>) new TypeAdapter<PhotoDates>() {
           @Override
           public void write(JsonWriter out, PhotoDates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhotoDates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhotoDates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhotoDates
   * @throws IOException if the JSON string is invalid with respect to PhotoDates
   */
  public static PhotoDates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhotoDates.class);
  }

  /**
   * Convert an instance of PhotoDates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

