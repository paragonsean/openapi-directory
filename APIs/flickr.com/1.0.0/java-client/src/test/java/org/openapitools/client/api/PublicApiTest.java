/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Echo200Response;
import java.io.File;
import org.openapitools.client.model.GetAlbumByID200Response;
import org.openapitools.client.model.GetAlbumsByPersonID200Response;
import org.openapitools.client.model.GetFavoritesByPersonID200Response;
import org.openapitools.client.model.GetFavoritesContextByID200Response;
import org.openapitools.client.model.GetGalleryPhotosByID200Response;
import org.openapitools.client.model.GetGroupByID200Response;
import org.openapitools.client.model.GetGroupDiscussionsByID200Response;
import org.openapitools.client.model.GetGroupTopicByID200Response;
import org.openapitools.client.model.GetGroupTopicRepliesByID200Response;
import org.openapitools.client.model.GetLicenseByID200Response;
import org.openapitools.client.model.GetPersonByID200Response;
import org.openapitools.client.model.GetPhotoByID200Response;
import org.openapitools.client.model.GetPhotoExifByID200Response;
import org.openapitools.client.model.GetPhotoSizesByID200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Disabled
public class PublicApiTest {

    private final PublicApi api = new PublicApi();

    /**
     * Echos the input parameters back in the response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void echoTest() throws ApiException {
        String apiKey = null;
        String echo = null;
        Echo200Response response = api.echo(apiKey, echo);
        // TODO: test validations
    }

    /**
     * Returns an access token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessTokenTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthNonce = null;
        String oauthTimestamp = null;
        String oauthSignatureMethod = null;
        String oauthVersion = null;
        String oauthSignature = null;
        String oauthVerifier = null;
        String oauthToken = null;
        String response = api.getAccessToken(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken);
        // TODO: test validations
    }

    /**
     * Returns a list of photos in an album.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumByIDTest() throws ApiException {
        String apiKey = null;
        String photosetId = null;
        GetAlbumByID200Response response = api.getAlbumByID(apiKey, photosetId);
        // TODO: test validations
    }

    /**
     * Returns next and previous photos for a photo in a set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumContextByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String photosetId = null;
        GetFavoritesContextByID200Response response = api.getAlbumContextByID(apiKey, photoId, photosetId);
        // TODO: test validations
    }

    /**
     * Returns the albums belonging to the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumsByPersonIDTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        GetAlbumsByPersonID200Response response = api.getAlbumsByPersonID(apiKey, userId, page, perPage);
        // TODO: test validations
    }

    /**
     * Returns a list of the user&#39;s favorite photos. Only photos which the calling user has permission to see are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritesByPersonIDTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        BigDecimal minFaveDate = null;
        BigDecimal maxFaveDate = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        GetFavoritesByPersonID200Response response = api.getFavoritesByPersonID(apiKey, userId, minFaveDate, maxFaveDate, page, perPage);
        // TODO: test validations
    }

    /**
     * Returns next and previous favorites for a photo in a user&#39;s favorites
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritesContextByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String userId = null;
        GetFavoritesContextByID200Response response = api.getFavoritesContextByID(apiKey, photoId, userId);
        // TODO: test validations
    }

    /**
     * Returns a list of photos in a gallery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGalleryPhotosByIDTest() throws ApiException {
        String apiKey = null;
        String galleryId = null;
        GetGalleryPhotosByID200Response response = api.getGalleryPhotosByID(apiKey, galleryId);
        // TODO: test validations
    }

    /**
     * Get information about a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupByIDTest() throws ApiException {
        String apiKey = null;
        String groupId = null;
        String groupPathAlias = null;
        String lang = null;
        GetGroupByID200Response response = api.getGroupByID(apiKey, groupId, groupPathAlias, lang);
        // TODO: test validations
    }

    /**
     * Get a list of discussion topics in a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupDiscussionsByIDTest() throws ApiException {
        String apiKey = null;
        String groupId = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        GetGroupDiscussionsByID200Response response = api.getGroupDiscussionsByID(apiKey, groupId, page, perPage);
        // TODO: test validations
    }

    /**
     * Returns a list of pool photos for a given group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupPhotosByIDTest() throws ApiException {
        String apiKey = null;
        String groupId = null;
        GetGalleryPhotosByID200Response response = api.getGroupPhotosByID(apiKey, groupId);
        // TODO: test validations
    }

    /**
     * Get information about a group discussion topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTopicByIDTest() throws ApiException {
        String apiKey = null;
        String topicId = null;
        String groupId = null;
        GetGroupTopicByID200Response response = api.getGroupTopicByID(apiKey, topicId, groupId);
        // TODO: test validations
    }

    /**
     * Get information on a group topic reply
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTopicRepliesByIDTest() throws ApiException {
        String apiKey = null;
        String topicId = null;
        String replyId = null;
        String groupId = null;
        GetGroupTopicRepliesByID200Response response = api.getGroupTopicRepliesByID(apiKey, topicId, replyId, groupId);
        // TODO: test validations
    }

    /**
     * Fetches a list of available photo licenses for Flickr
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseByIDTest() throws ApiException {
        String apiKey = null;
        GetLicenseByID200Response response = api.getLicenseByID(apiKey);
        // TODO: test validations
    }

    /**
     * Return photos from the given user&#39;s photostream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaByPersonIDTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        BigDecimal safeSearch = null;
        BigDecimal minUploadDate = null;
        BigDecimal maxUploadDate = null;
        BigDecimal minTakenDate = null;
        BigDecimal maxTakenDate = null;
        BigDecimal contentType = null;
        BigDecimal privacyFilter = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        GetFavoritesByPersonID200Response response = api.getMediaByPersonID(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage);
        // TODO: test validations
    }

    /**
     * Return a list of photos matching some criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMediaBySearchTest() throws ApiException {
        String apiKey = null;
        String text = null;
        String tags = null;
        String userId = null;
        String minUploadDate = null;
        String maxUploadDate = null;
        String minTakenDate = null;
        String maxTakenDate = null;
        String license = null;
        String sort = null;
        BigDecimal privacyFilter = null;
        String bbox = null;
        String accuracy = null;
        BigDecimal safeSearch = null;
        BigDecimal contentType = null;
        String machineTags = null;
        String machineTagMode = null;
        String groupId = null;
        String contacts = null;
        String woeId = null;
        String placeId = null;
        String media = null;
        String hasGeo = null;
        String geoContext = null;
        String lat = null;
        String lon = null;
        BigDecimal radius = null;
        String radiusUnits = null;
        Boolean isCommons = null;
        Boolean inGallery = null;
        Boolean isGetty = null;
        BigDecimal perPage = null;
        BigDecimal page = null;
        GetFavoritesByPersonID200Response response = api.getMediaBySearch(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page);
        // TODO: test validations
    }

    /**
     * Returns a person
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonByIDTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        GetPersonByID200Response response = api.getPersonByID(apiKey, userId);
        // TODO: test validations
    }

    /**
     * Returns a photo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        GetPhotoByID200Response response = api.getPhotoByID(apiKey, photoId);
        // TODO: test validations
    }

    /**
     * Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoExifByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String secret = null;
        GetPhotoExifByID200Response response = api.getPhotoExifByID(apiKey, photoId, secret);
        // TODO: test validations
    }

    /**
     * Returns photo sizes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoSizesByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        GetPhotoSizesByID200Response response = api.getPhotoSizesByID(apiKey, photoId);
        // TODO: test validations
    }

    /**
     * Returns next and previous photos in a photo list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotolistContextByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String photolistId = null;
        GetFavoritesContextByID200Response response = api.getPhotolistContextByID(apiKey, photoId, photolistId);
        // TODO: test validations
    }

    /**
     * Returns next and previous photos for a photo in a photostream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotostreamContextByIDTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        GetFavoritesContextByID200Response response = api.getPhotostreamContextByID(apiKey, photoId);
        // TODO: test validations
    }

    /**
     * Returns an oauth token and oauth token secret
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRequestTokenTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthNonce = null;
        String oauthTimestamp = null;
        String oauthSignatureMethod = null;
        String oauthVersion = null;
        String oauthSignature = null;
        String oauthCallback = null;
        String response = api.getRequestToken(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback);
        // TODO: test validations
    }

    /**
     * Returns next and previous photos for a photo in a group pool
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restmethodflickrGroupsPoolsGetContextGetTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String groupId = null;
        GetFavoritesContextByID200Response response = api.restmethodflickrGroupsPoolsGetContextGet(apiKey, photoId, groupId);
        // TODO: test validations
    }

    /**
     * Uploads a new photo to Flickr
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadPhotoTest() throws ApiException {
        String apiKey = null;
        File photo = null;
        String contentType = null;
        String description = null;
        String hidden = null;
        String isFamily = null;
        String isFriend = null;
        String isPublic = null;
        String safetyLevel = null;
        String tags = null;
        String title = null;
        Object response = api.uploadPhoto(apiKey, photo, contentType, description, hidden, isFamily, isFriend, isPublic, safetyLevel, tags, title);
        // TODO: test validations
    }

}
