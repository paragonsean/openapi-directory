/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InboundSendRaw
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundSendRaw {
  public static final String SERIALIZED_NAME_CLIENT_ADDRESS = "client_address";
  @SerializedName(SERIALIZED_NAME_CLIENT_ADDRESS)
  private String clientAddress;

  public static final String SERIALIZED_NAME_HELO = "helo";
  @SerializedName(SERIALIZED_NAME_HELO)
  private String helo;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MAIL_FROM = "mail_from";
  @SerializedName(SERIALIZED_NAME_MAIL_FROM)
  private String mailFrom;

  public static final String SERIALIZED_NAME_RAW_MESSAGE = "raw_message";
  @SerializedName(SERIALIZED_NAME_RAW_MESSAGE)
  private String rawMessage;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<String> to = new ArrayList<>();

  public InboundSendRaw() {
  }

  public InboundSendRaw clientAddress(String clientAddress) {
    this.clientAddress = clientAddress;
    return this;
  }

  /**
   * Get clientAddress
   * @return clientAddress
   */
  @javax.annotation.Nullable
  public String getClientAddress() {
    return clientAddress;
  }

  public void setClientAddress(String clientAddress) {
    this.clientAddress = clientAddress;
  }


  public InboundSendRaw helo(String helo) {
    this.helo = helo;
    return this;
  }

  /**
   * Get helo
   * @return helo
   */
  @javax.annotation.Nullable
  public String getHelo() {
    return helo;
  }

  public void setHelo(String helo) {
    this.helo = helo;
  }


  public InboundSendRaw key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public InboundSendRaw mailFrom(String mailFrom) {
    this.mailFrom = mailFrom;
    return this;
  }

  /**
   * Get mailFrom
   * @return mailFrom
   */
  @javax.annotation.Nullable
  public String getMailFrom() {
    return mailFrom;
  }

  public void setMailFrom(String mailFrom) {
    this.mailFrom = mailFrom;
  }


  public InboundSendRaw rawMessage(String rawMessage) {
    this.rawMessage = rawMessage;
    return this;
  }

  /**
   * Get rawMessage
   * @return rawMessage
   */
  @javax.annotation.Nullable
  public String getRawMessage() {
    return rawMessage;
  }

  public void setRawMessage(String rawMessage) {
    this.rawMessage = rawMessage;
  }


  public InboundSendRaw to(List<String> to) {
    this.to = to;
    return this;
  }

  public InboundSendRaw addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundSendRaw inboundSendRaw = (InboundSendRaw) o;
    return Objects.equals(this.clientAddress, inboundSendRaw.clientAddress) &&
        Objects.equals(this.helo, inboundSendRaw.helo) &&
        Objects.equals(this.key, inboundSendRaw.key) &&
        Objects.equals(this.mailFrom, inboundSendRaw.mailFrom) &&
        Objects.equals(this.rawMessage, inboundSendRaw.rawMessage) &&
        Objects.equals(this.to, inboundSendRaw.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientAddress, helo, key, mailFrom, rawMessage, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundSendRaw {\n");
    sb.append("    clientAddress: ").append(toIndentedString(clientAddress)).append("\n");
    sb.append("    helo: ").append(toIndentedString(helo)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    mailFrom: ").append(toIndentedString(mailFrom)).append("\n");
    sb.append("    rawMessage: ").append(toIndentedString(rawMessage)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_address");
    openapiFields.add("helo");
    openapiFields.add("key");
    openapiFields.add("mail_from");
    openapiFields.add("raw_message");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundSendRaw
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundSendRaw.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundSendRaw is not found in the empty JSON string", InboundSendRaw.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundSendRaw.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundSendRaw` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_address") != null && !jsonObj.get("client_address").isJsonNull()) && !jsonObj.get("client_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_address").toString()));
      }
      if ((jsonObj.get("helo") != null && !jsonObj.get("helo").isJsonNull()) && !jsonObj.get("helo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helo").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("mail_from") != null && !jsonObj.get("mail_from").isJsonNull()) && !jsonObj.get("mail_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail_from").toString()));
      }
      if ((jsonObj.get("raw_message") != null && !jsonObj.get("raw_message").isJsonNull()) && !jsonObj.get("raw_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_message").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull() && !jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundSendRaw.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundSendRaw' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundSendRaw> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundSendRaw.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundSendRaw>() {
           @Override
           public void write(JsonWriter out, InboundSendRaw value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundSendRaw read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundSendRaw given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundSendRaw
   * @throws IOException if the JSON string is invalid with respect to InboundSendRaw
   */
  public static InboundSendRaw fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundSendRaw.class);
  }

  /**
   * Convert an instance of InboundSendRaw to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

