/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessagesInfoResponseOpensDetailInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagesInfoResponseOpensDetailInner {
  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private Integer ts;

  public static final String SERIALIZED_NAME_UA = "ua";
  @SerializedName(SERIALIZED_NAME_UA)
  private String ua;

  public MessagesInfoResponseOpensDetailInner() {
  }

  public MessagesInfoResponseOpensDetailInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public MessagesInfoResponseOpensDetailInner location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public MessagesInfoResponseOpensDetailInner ts(Integer ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Get ts
   * @return ts
   */
  @javax.annotation.Nullable
  public Integer getTs() {
    return ts;
  }

  public void setTs(Integer ts) {
    this.ts = ts;
  }


  public MessagesInfoResponseOpensDetailInner ua(String ua) {
    this.ua = ua;
    return this;
  }

  /**
   * Get ua
   * @return ua
   */
  @javax.annotation.Nullable
  public String getUa() {
    return ua;
  }

  public void setUa(String ua) {
    this.ua = ua;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagesInfoResponseOpensDetailInner messagesInfoResponseOpensDetailInner = (MessagesInfoResponseOpensDetailInner) o;
    return Objects.equals(this.ip, messagesInfoResponseOpensDetailInner.ip) &&
        Objects.equals(this.location, messagesInfoResponseOpensDetailInner.location) &&
        Objects.equals(this.ts, messagesInfoResponseOpensDetailInner.ts) &&
        Objects.equals(this.ua, messagesInfoResponseOpensDetailInner.ua);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ip, location, ts, ua);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagesInfoResponseOpensDetailInner {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    ua: ").append(toIndentedString(ua)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ip");
    openapiFields.add("location");
    openapiFields.add("ts");
    openapiFields.add("ua");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagesInfoResponseOpensDetailInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagesInfoResponseOpensDetailInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagesInfoResponseOpensDetailInner is not found in the empty JSON string", MessagesInfoResponseOpensDetailInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagesInfoResponseOpensDetailInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagesInfoResponseOpensDetailInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("ua") != null && !jsonObj.get("ua").isJsonNull()) && !jsonObj.get("ua").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ua` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ua").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagesInfoResponseOpensDetailInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagesInfoResponseOpensDetailInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagesInfoResponseOpensDetailInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagesInfoResponseOpensDetailInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagesInfoResponseOpensDetailInner>() {
           @Override
           public void write(JsonWriter out, MessagesInfoResponseOpensDetailInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagesInfoResponseOpensDetailInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagesInfoResponseOpensDetailInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagesInfoResponseOpensDetailInner
   * @throws IOException if the JSON string is invalid with respect to MessagesInfoResponseOpensDetailInner
   */
  public static MessagesInfoResponseOpensDetailInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagesInfoResponseOpensDetailInner.class);
  }

  /**
   * Convert an instance of MessagesInfoResponseOpensDetailInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

