/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IpInfoCustomDns;
import org.openapitools.client.model.IpInfoWarmup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IpsListPoolsResponseInnerIpsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpsListPoolsResponseInnerIpsInner {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_DNS = "custom_dns";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DNS)
  private IpInfoCustomDns customDns;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private String pool;

  public static final String SERIALIZED_NAME_WARMUP = "warmup";
  @SerializedName(SERIALIZED_NAME_WARMUP)
  private IpInfoWarmup warmup;

  public IpsListPoolsResponseInnerIpsInner() {
  }

  public IpsListPoolsResponseInnerIpsInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public IpsListPoolsResponseInnerIpsInner customDns(IpInfoCustomDns customDns) {
    this.customDns = customDns;
    return this;
  }

  /**
   * Get customDns
   * @return customDns
   */
  @javax.annotation.Nullable
  public IpInfoCustomDns getCustomDns() {
    return customDns;
  }

  public void setCustomDns(IpInfoCustomDns customDns) {
    this.customDns = customDns;
  }


  public IpsListPoolsResponseInnerIpsInner domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public IpsListPoolsResponseInnerIpsInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public IpsListPoolsResponseInnerIpsInner pool(String pool) {
    this.pool = pool;
    return this;
  }

  /**
   * Get pool
   * @return pool
   */
  @javax.annotation.Nullable
  public String getPool() {
    return pool;
  }

  public void setPool(String pool) {
    this.pool = pool;
  }


  public IpsListPoolsResponseInnerIpsInner warmup(IpInfoWarmup warmup) {
    this.warmup = warmup;
    return this;
  }

  /**
   * Get warmup
   * @return warmup
   */
  @javax.annotation.Nullable
  public IpInfoWarmup getWarmup() {
    return warmup;
  }

  public void setWarmup(IpInfoWarmup warmup) {
    this.warmup = warmup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpsListPoolsResponseInnerIpsInner ipsListPoolsResponseInnerIpsInner = (IpsListPoolsResponseInnerIpsInner) o;
    return Objects.equals(this.createdAt, ipsListPoolsResponseInnerIpsInner.createdAt) &&
        Objects.equals(this.customDns, ipsListPoolsResponseInnerIpsInner.customDns) &&
        Objects.equals(this.domain, ipsListPoolsResponseInnerIpsInner.domain) &&
        Objects.equals(this.ip, ipsListPoolsResponseInnerIpsInner.ip) &&
        Objects.equals(this.pool, ipsListPoolsResponseInnerIpsInner.pool) &&
        Objects.equals(this.warmup, ipsListPoolsResponseInnerIpsInner.warmup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, customDns, domain, ip, pool, warmup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpsListPoolsResponseInnerIpsInner {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customDns: ").append(toIndentedString(customDns)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    warmup: ").append(toIndentedString(warmup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("custom_dns");
    openapiFields.add("domain");
    openapiFields.add("ip");
    openapiFields.add("pool");
    openapiFields.add("warmup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpsListPoolsResponseInnerIpsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpsListPoolsResponseInnerIpsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpsListPoolsResponseInnerIpsInner is not found in the empty JSON string", IpsListPoolsResponseInnerIpsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpsListPoolsResponseInnerIpsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpsListPoolsResponseInnerIpsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `custom_dns`
      if (jsonObj.get("custom_dns") != null && !jsonObj.get("custom_dns").isJsonNull()) {
        IpInfoCustomDns.validateJsonElement(jsonObj.get("custom_dns"));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("pool") != null && !jsonObj.get("pool").isJsonNull()) && !jsonObj.get("pool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pool").toString()));
      }
      // validate the optional field `warmup`
      if (jsonObj.get("warmup") != null && !jsonObj.get("warmup").isJsonNull()) {
        IpInfoWarmup.validateJsonElement(jsonObj.get("warmup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpsListPoolsResponseInnerIpsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpsListPoolsResponseInnerIpsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpsListPoolsResponseInnerIpsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpsListPoolsResponseInnerIpsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<IpsListPoolsResponseInnerIpsInner>() {
           @Override
           public void write(JsonWriter out, IpsListPoolsResponseInnerIpsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpsListPoolsResponseInnerIpsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpsListPoolsResponseInnerIpsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpsListPoolsResponseInnerIpsInner
   * @throws IOException if the JSON string is invalid with respect to IpsListPoolsResponseInnerIpsInner
   */
  public static IpsListPoolsResponseInnerIpsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpsListPoolsResponseInnerIpsInner.class);
  }

  /**
   * Convert an instance of IpsListPoolsResponseInnerIpsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

