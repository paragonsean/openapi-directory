/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeseriesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeseriesInner {
  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private Integer clicks;

  public static final String SERIALIZED_NAME_COMPLAINTS = "complaints";
  @SerializedName(SERIALIZED_NAME_COMPLAINTS)
  private Integer complaints;

  public static final String SERIALIZED_NAME_HARD_BOUNCES = "hard_bounces";
  @SerializedName(SERIALIZED_NAME_HARD_BOUNCES)
  private Integer hardBounces;

  public static final String SERIALIZED_NAME_OPENS = "opens";
  @SerializedName(SERIALIZED_NAME_OPENS)
  private Integer opens;

  public static final String SERIALIZED_NAME_REJECTS = "rejects";
  @SerializedName(SERIALIZED_NAME_REJECTS)
  private Integer rejects;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private Integer sent;

  public static final String SERIALIZED_NAME_SOFT_BOUNCES = "soft_bounces";
  @SerializedName(SERIALIZED_NAME_SOFT_BOUNCES)
  private Integer softBounces;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_UNIQUE_CLICKS = "unique_clicks";
  @SerializedName(SERIALIZED_NAME_UNIQUE_CLICKS)
  private Integer uniqueClicks;

  public static final String SERIALIZED_NAME_UNIQUE_OPENS = "unique_opens";
  @SerializedName(SERIALIZED_NAME_UNIQUE_OPENS)
  private Integer uniqueOpens;

  public static final String SERIALIZED_NAME_UNSUBS = "unsubs";
  @SerializedName(SERIALIZED_NAME_UNSUBS)
  private Integer unsubs;

  public TimeseriesInner() {
  }

  public TimeseriesInner clicks(Integer clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * Get clicks
   * @return clicks
   */
  @javax.annotation.Nullable
  public Integer getClicks() {
    return clicks;
  }

  public void setClicks(Integer clicks) {
    this.clicks = clicks;
  }


  public TimeseriesInner complaints(Integer complaints) {
    this.complaints = complaints;
    return this;
  }

  /**
   * Get complaints
   * @return complaints
   */
  @javax.annotation.Nullable
  public Integer getComplaints() {
    return complaints;
  }

  public void setComplaints(Integer complaints) {
    this.complaints = complaints;
  }


  public TimeseriesInner hardBounces(Integer hardBounces) {
    this.hardBounces = hardBounces;
    return this;
  }

  /**
   * Get hardBounces
   * @return hardBounces
   */
  @javax.annotation.Nullable
  public Integer getHardBounces() {
    return hardBounces;
  }

  public void setHardBounces(Integer hardBounces) {
    this.hardBounces = hardBounces;
  }


  public TimeseriesInner opens(Integer opens) {
    this.opens = opens;
    return this;
  }

  /**
   * Get opens
   * @return opens
   */
  @javax.annotation.Nullable
  public Integer getOpens() {
    return opens;
  }

  public void setOpens(Integer opens) {
    this.opens = opens;
  }


  public TimeseriesInner rejects(Integer rejects) {
    this.rejects = rejects;
    return this;
  }

  /**
   * Get rejects
   * @return rejects
   */
  @javax.annotation.Nullable
  public Integer getRejects() {
    return rejects;
  }

  public void setRejects(Integer rejects) {
    this.rejects = rejects;
  }


  public TimeseriesInner sent(Integer sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public Integer getSent() {
    return sent;
  }

  public void setSent(Integer sent) {
    this.sent = sent;
  }


  public TimeseriesInner softBounces(Integer softBounces) {
    this.softBounces = softBounces;
    return this;
  }

  /**
   * Get softBounces
   * @return softBounces
   */
  @javax.annotation.Nullable
  public Integer getSoftBounces() {
    return softBounces;
  }

  public void setSoftBounces(Integer softBounces) {
    this.softBounces = softBounces;
  }


  public TimeseriesInner time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public TimeseriesInner uniqueClicks(Integer uniqueClicks) {
    this.uniqueClicks = uniqueClicks;
    return this;
  }

  /**
   * Get uniqueClicks
   * @return uniqueClicks
   */
  @javax.annotation.Nullable
  public Integer getUniqueClicks() {
    return uniqueClicks;
  }

  public void setUniqueClicks(Integer uniqueClicks) {
    this.uniqueClicks = uniqueClicks;
  }


  public TimeseriesInner uniqueOpens(Integer uniqueOpens) {
    this.uniqueOpens = uniqueOpens;
    return this;
  }

  /**
   * Get uniqueOpens
   * @return uniqueOpens
   */
  @javax.annotation.Nullable
  public Integer getUniqueOpens() {
    return uniqueOpens;
  }

  public void setUniqueOpens(Integer uniqueOpens) {
    this.uniqueOpens = uniqueOpens;
  }


  public TimeseriesInner unsubs(Integer unsubs) {
    this.unsubs = unsubs;
    return this;
  }

  /**
   * Get unsubs
   * @return unsubs
   */
  @javax.annotation.Nullable
  public Integer getUnsubs() {
    return unsubs;
  }

  public void setUnsubs(Integer unsubs) {
    this.unsubs = unsubs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeseriesInner timeseriesInner = (TimeseriesInner) o;
    return Objects.equals(this.clicks, timeseriesInner.clicks) &&
        Objects.equals(this.complaints, timeseriesInner.complaints) &&
        Objects.equals(this.hardBounces, timeseriesInner.hardBounces) &&
        Objects.equals(this.opens, timeseriesInner.opens) &&
        Objects.equals(this.rejects, timeseriesInner.rejects) &&
        Objects.equals(this.sent, timeseriesInner.sent) &&
        Objects.equals(this.softBounces, timeseriesInner.softBounces) &&
        Objects.equals(this.time, timeseriesInner.time) &&
        Objects.equals(this.uniqueClicks, timeseriesInner.uniqueClicks) &&
        Objects.equals(this.uniqueOpens, timeseriesInner.uniqueOpens) &&
        Objects.equals(this.unsubs, timeseriesInner.unsubs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clicks, complaints, hardBounces, opens, rejects, sent, softBounces, time, uniqueClicks, uniqueOpens, unsubs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeseriesInner {\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("    hardBounces: ").append(toIndentedString(hardBounces)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    rejects: ").append(toIndentedString(rejects)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    softBounces: ").append(toIndentedString(softBounces)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    uniqueClicks: ").append(toIndentedString(uniqueClicks)).append("\n");
    sb.append("    uniqueOpens: ").append(toIndentedString(uniqueOpens)).append("\n");
    sb.append("    unsubs: ").append(toIndentedString(unsubs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clicks");
    openapiFields.add("complaints");
    openapiFields.add("hard_bounces");
    openapiFields.add("opens");
    openapiFields.add("rejects");
    openapiFields.add("sent");
    openapiFields.add("soft_bounces");
    openapiFields.add("time");
    openapiFields.add("unique_clicks");
    openapiFields.add("unique_opens");
    openapiFields.add("unsubs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeseriesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeseriesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeseriesInner is not found in the empty JSON string", TimeseriesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeseriesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeseriesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeseriesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeseriesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeseriesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeseriesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeseriesInner>() {
           @Override
           public void write(JsonWriter out, TimeseriesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeseriesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeseriesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeseriesInner
   * @throws IOException if the JSON string is invalid with respect to TimeseriesInner
   */
  public static TimeseriesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeseriesInner.class);
  }

  /**
   * Convert an instance of TimeseriesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

