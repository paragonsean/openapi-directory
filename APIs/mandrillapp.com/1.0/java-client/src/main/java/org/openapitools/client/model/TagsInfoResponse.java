/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SendersInfoResponseStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TagsInfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagsInfoResponse {
  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private Integer clicks;

  public static final String SERIALIZED_NAME_COMPLAINTS = "complaints";
  @SerializedName(SERIALIZED_NAME_COMPLAINTS)
  private Integer complaints;

  public static final String SERIALIZED_NAME_HARD_BOUNCES = "hard_bounces";
  @SerializedName(SERIALIZED_NAME_HARD_BOUNCES)
  private Integer hardBounces;

  public static final String SERIALIZED_NAME_OPENS = "opens";
  @SerializedName(SERIALIZED_NAME_OPENS)
  private Integer opens;

  public static final String SERIALIZED_NAME_REJECTS = "rejects";
  @SerializedName(SERIALIZED_NAME_REJECTS)
  private Integer rejects;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private Integer sent;

  public static final String SERIALIZED_NAME_SOFT_BOUNCES = "soft_bounces";
  @SerializedName(SERIALIZED_NAME_SOFT_BOUNCES)
  private Integer softBounces;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private SendersInfoResponseStats stats;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_UNSUBS = "unsubs";
  @SerializedName(SERIALIZED_NAME_UNSUBS)
  private Integer unsubs;

  public TagsInfoResponse() {
  }

  public TagsInfoResponse clicks(Integer clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * Get clicks
   * @return clicks
   */
  @javax.annotation.Nullable
  public Integer getClicks() {
    return clicks;
  }

  public void setClicks(Integer clicks) {
    this.clicks = clicks;
  }


  public TagsInfoResponse complaints(Integer complaints) {
    this.complaints = complaints;
    return this;
  }

  /**
   * Get complaints
   * @return complaints
   */
  @javax.annotation.Nullable
  public Integer getComplaints() {
    return complaints;
  }

  public void setComplaints(Integer complaints) {
    this.complaints = complaints;
  }


  public TagsInfoResponse hardBounces(Integer hardBounces) {
    this.hardBounces = hardBounces;
    return this;
  }

  /**
   * Get hardBounces
   * @return hardBounces
   */
  @javax.annotation.Nullable
  public Integer getHardBounces() {
    return hardBounces;
  }

  public void setHardBounces(Integer hardBounces) {
    this.hardBounces = hardBounces;
  }


  public TagsInfoResponse opens(Integer opens) {
    this.opens = opens;
    return this;
  }

  /**
   * Get opens
   * @return opens
   */
  @javax.annotation.Nullable
  public Integer getOpens() {
    return opens;
  }

  public void setOpens(Integer opens) {
    this.opens = opens;
  }


  public TagsInfoResponse rejects(Integer rejects) {
    this.rejects = rejects;
    return this;
  }

  /**
   * Get rejects
   * @return rejects
   */
  @javax.annotation.Nullable
  public Integer getRejects() {
    return rejects;
  }

  public void setRejects(Integer rejects) {
    this.rejects = rejects;
  }


  public TagsInfoResponse sent(Integer sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public Integer getSent() {
    return sent;
  }

  public void setSent(Integer sent) {
    this.sent = sent;
  }


  public TagsInfoResponse softBounces(Integer softBounces) {
    this.softBounces = softBounces;
    return this;
  }

  /**
   * Get softBounces
   * @return softBounces
   */
  @javax.annotation.Nullable
  public Integer getSoftBounces() {
    return softBounces;
  }

  public void setSoftBounces(Integer softBounces) {
    this.softBounces = softBounces;
  }


  public TagsInfoResponse stats(SendersInfoResponseStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public SendersInfoResponseStats getStats() {
    return stats;
  }

  public void setStats(SendersInfoResponseStats stats) {
    this.stats = stats;
  }


  public TagsInfoResponse tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public TagsInfoResponse unsubs(Integer unsubs) {
    this.unsubs = unsubs;
    return this;
  }

  /**
   * Get unsubs
   * @return unsubs
   */
  @javax.annotation.Nullable
  public Integer getUnsubs() {
    return unsubs;
  }

  public void setUnsubs(Integer unsubs) {
    this.unsubs = unsubs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagsInfoResponse tagsInfoResponse = (TagsInfoResponse) o;
    return Objects.equals(this.clicks, tagsInfoResponse.clicks) &&
        Objects.equals(this.complaints, tagsInfoResponse.complaints) &&
        Objects.equals(this.hardBounces, tagsInfoResponse.hardBounces) &&
        Objects.equals(this.opens, tagsInfoResponse.opens) &&
        Objects.equals(this.rejects, tagsInfoResponse.rejects) &&
        Objects.equals(this.sent, tagsInfoResponse.sent) &&
        Objects.equals(this.softBounces, tagsInfoResponse.softBounces) &&
        Objects.equals(this.stats, tagsInfoResponse.stats) &&
        Objects.equals(this.tag, tagsInfoResponse.tag) &&
        Objects.equals(this.unsubs, tagsInfoResponse.unsubs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clicks, complaints, hardBounces, opens, rejects, sent, softBounces, stats, tag, unsubs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagsInfoResponse {\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("    hardBounces: ").append(toIndentedString(hardBounces)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    rejects: ").append(toIndentedString(rejects)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    softBounces: ").append(toIndentedString(softBounces)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    unsubs: ").append(toIndentedString(unsubs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clicks");
    openapiFields.add("complaints");
    openapiFields.add("hard_bounces");
    openapiFields.add("opens");
    openapiFields.add("rejects");
    openapiFields.add("sent");
    openapiFields.add("soft_bounces");
    openapiFields.add("stats");
    openapiFields.add("tag");
    openapiFields.add("unsubs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagsInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagsInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagsInfoResponse is not found in the empty JSON string", TagsInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagsInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagsInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        SendersInfoResponseStats.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagsInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagsInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagsInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagsInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TagsInfoResponse>() {
           @Override
           public void write(JsonWriter out, TagsInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagsInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagsInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagsInfoResponse
   * @throws IOException if the JSON string is invalid with respect to TagsInfoResponse
   */
  public static TagsInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagsInfoResponse.class);
  }

  /**
   * Convert an instance of TagsInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

