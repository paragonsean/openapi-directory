/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplatesListResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplatesListResponseInner {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_FROM_EMAIL = "from_email";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL)
  private String fromEmail;

  public static final String SERIALIZED_NAME_FROM_NAME = "from_name";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISH_CODE = "publish_code";
  @SerializedName(SERIALIZED_NAME_PUBLISH_CODE)
  private String publishCode;

  public static final String SERIALIZED_NAME_PUBLISH_FROM_EMAIL = "publish_from_email";
  @SerializedName(SERIALIZED_NAME_PUBLISH_FROM_EMAIL)
  private String publishFromEmail;

  public static final String SERIALIZED_NAME_PUBLISH_FROM_NAME = "publish_from_name";
  @SerializedName(SERIALIZED_NAME_PUBLISH_FROM_NAME)
  private String publishFromName;

  public static final String SERIALIZED_NAME_PUBLISH_NAME = "publish_name";
  @SerializedName(SERIALIZED_NAME_PUBLISH_NAME)
  private String publishName;

  public static final String SERIALIZED_NAME_PUBLISH_SUBJECT = "publish_subject";
  @SerializedName(SERIALIZED_NAME_PUBLISH_SUBJECT)
  private String publishSubject;

  public static final String SERIALIZED_NAME_PUBLISH_TEXT = "publish_text";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TEXT)
  private String publishText;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private String publishedAt;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public TemplatesListResponseInner() {
  }

  public TemplatesListResponseInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public TemplatesListResponseInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public TemplatesListResponseInner fromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
    return this;
  }

  /**
   * Get fromEmail
   * @return fromEmail
   */
  @javax.annotation.Nullable
  public String getFromEmail() {
    return fromEmail;
  }

  public void setFromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
  }


  public TemplatesListResponseInner fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

  /**
   * Get fromName
   * @return fromName
   */
  @javax.annotation.Nullable
  public String getFromName() {
    return fromName;
  }

  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public TemplatesListResponseInner labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public TemplatesListResponseInner addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public TemplatesListResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TemplatesListResponseInner publishCode(String publishCode) {
    this.publishCode = publishCode;
    return this;
  }

  /**
   * Get publishCode
   * @return publishCode
   */
  @javax.annotation.Nullable
  public String getPublishCode() {
    return publishCode;
  }

  public void setPublishCode(String publishCode) {
    this.publishCode = publishCode;
  }


  public TemplatesListResponseInner publishFromEmail(String publishFromEmail) {
    this.publishFromEmail = publishFromEmail;
    return this;
  }

  /**
   * Get publishFromEmail
   * @return publishFromEmail
   */
  @javax.annotation.Nullable
  public String getPublishFromEmail() {
    return publishFromEmail;
  }

  public void setPublishFromEmail(String publishFromEmail) {
    this.publishFromEmail = publishFromEmail;
  }


  public TemplatesListResponseInner publishFromName(String publishFromName) {
    this.publishFromName = publishFromName;
    return this;
  }

  /**
   * Get publishFromName
   * @return publishFromName
   */
  @javax.annotation.Nullable
  public String getPublishFromName() {
    return publishFromName;
  }

  public void setPublishFromName(String publishFromName) {
    this.publishFromName = publishFromName;
  }


  public TemplatesListResponseInner publishName(String publishName) {
    this.publishName = publishName;
    return this;
  }

  /**
   * Get publishName
   * @return publishName
   */
  @javax.annotation.Nullable
  public String getPublishName() {
    return publishName;
  }

  public void setPublishName(String publishName) {
    this.publishName = publishName;
  }


  public TemplatesListResponseInner publishSubject(String publishSubject) {
    this.publishSubject = publishSubject;
    return this;
  }

  /**
   * Get publishSubject
   * @return publishSubject
   */
  @javax.annotation.Nullable
  public String getPublishSubject() {
    return publishSubject;
  }

  public void setPublishSubject(String publishSubject) {
    this.publishSubject = publishSubject;
  }


  public TemplatesListResponseInner publishText(String publishText) {
    this.publishText = publishText;
    return this;
  }

  /**
   * Get publishText
   * @return publishText
   */
  @javax.annotation.Nullable
  public String getPublishText() {
    return publishText;
  }

  public void setPublishText(String publishText) {
    this.publishText = publishText;
  }


  public TemplatesListResponseInner publishedAt(String publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * Get publishedAt
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public String getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(String publishedAt) {
    this.publishedAt = publishedAt;
  }


  public TemplatesListResponseInner slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public TemplatesListResponseInner subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public TemplatesListResponseInner text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public TemplatesListResponseInner updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatesListResponseInner templatesListResponseInner = (TemplatesListResponseInner) o;
    return Objects.equals(this.code, templatesListResponseInner.code) &&
        Objects.equals(this.createdAt, templatesListResponseInner.createdAt) &&
        Objects.equals(this.fromEmail, templatesListResponseInner.fromEmail) &&
        Objects.equals(this.fromName, templatesListResponseInner.fromName) &&
        Objects.equals(this.labels, templatesListResponseInner.labels) &&
        Objects.equals(this.name, templatesListResponseInner.name) &&
        Objects.equals(this.publishCode, templatesListResponseInner.publishCode) &&
        Objects.equals(this.publishFromEmail, templatesListResponseInner.publishFromEmail) &&
        Objects.equals(this.publishFromName, templatesListResponseInner.publishFromName) &&
        Objects.equals(this.publishName, templatesListResponseInner.publishName) &&
        Objects.equals(this.publishSubject, templatesListResponseInner.publishSubject) &&
        Objects.equals(this.publishText, templatesListResponseInner.publishText) &&
        Objects.equals(this.publishedAt, templatesListResponseInner.publishedAt) &&
        Objects.equals(this.slug, templatesListResponseInner.slug) &&
        Objects.equals(this.subject, templatesListResponseInner.subject) &&
        Objects.equals(this.text, templatesListResponseInner.text) &&
        Objects.equals(this.updatedAt, templatesListResponseInner.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, createdAt, fromEmail, fromName, labels, name, publishCode, publishFromEmail, publishFromName, publishName, publishSubject, publishText, publishedAt, slug, subject, text, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatesListResponseInner {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publishCode: ").append(toIndentedString(publishCode)).append("\n");
    sb.append("    publishFromEmail: ").append(toIndentedString(publishFromEmail)).append("\n");
    sb.append("    publishFromName: ").append(toIndentedString(publishFromName)).append("\n");
    sb.append("    publishName: ").append(toIndentedString(publishName)).append("\n");
    sb.append("    publishSubject: ").append(toIndentedString(publishSubject)).append("\n");
    sb.append("    publishText: ").append(toIndentedString(publishText)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("created_at");
    openapiFields.add("from_email");
    openapiFields.add("from_name");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("publish_code");
    openapiFields.add("publish_from_email");
    openapiFields.add("publish_from_name");
    openapiFields.add("publish_name");
    openapiFields.add("publish_subject");
    openapiFields.add("publish_text");
    openapiFields.add("published_at");
    openapiFields.add("slug");
    openapiFields.add("subject");
    openapiFields.add("text");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplatesListResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplatesListResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplatesListResponseInner is not found in the empty JSON string", TemplatesListResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplatesListResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplatesListResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("from_email") != null && !jsonObj.get("from_email").isJsonNull()) && !jsonObj.get("from_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_email").toString()));
      }
      if ((jsonObj.get("from_name") != null && !jsonObj.get("from_name").isJsonNull()) && !jsonObj.get("from_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("publish_code") != null && !jsonObj.get("publish_code").isJsonNull()) && !jsonObj.get("publish_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_code").toString()));
      }
      if ((jsonObj.get("publish_from_email") != null && !jsonObj.get("publish_from_email").isJsonNull()) && !jsonObj.get("publish_from_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_from_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_from_email").toString()));
      }
      if ((jsonObj.get("publish_from_name") != null && !jsonObj.get("publish_from_name").isJsonNull()) && !jsonObj.get("publish_from_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_from_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_from_name").toString()));
      }
      if ((jsonObj.get("publish_name") != null && !jsonObj.get("publish_name").isJsonNull()) && !jsonObj.get("publish_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_name").toString()));
      }
      if ((jsonObj.get("publish_subject") != null && !jsonObj.get("publish_subject").isJsonNull()) && !jsonObj.get("publish_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_subject").toString()));
      }
      if ((jsonObj.get("publish_text") != null && !jsonObj.get("publish_text").isJsonNull()) && !jsonObj.get("publish_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_text").toString()));
      }
      if ((jsonObj.get("published_at") != null && !jsonObj.get("published_at").isJsonNull()) && !jsonObj.get("published_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_at").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplatesListResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplatesListResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplatesListResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplatesListResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplatesListResponseInner>() {
           @Override
           public void write(JsonWriter out, TemplatesListResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplatesListResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplatesListResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplatesListResponseInner
   * @throws IOException if the JSON string is invalid with respect to TemplatesListResponseInner
   */
  public static TemplatesListResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplatesListResponseInner.class);
  }

  /**
   * Convert an instance of TemplatesListResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

