/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UsersInfoResponseStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersInfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersInfoResponse {
  public static final String SERIALIZED_NAME_BACKLOG = "backlog";
  @SerializedName(SERIALIZED_NAME_BACKLOG)
  private Integer backlog;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_HOURLY_QUOTA = "hourly_quota";
  @SerializedName(SERIALIZED_NAME_HOURLY_QUOTA)
  private Integer hourlyQuota;

  public static final String SERIALIZED_NAME_PUBLIC_ID = "public_id";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ID)
  private String publicId;

  public static final String SERIALIZED_NAME_REPUTATION = "reputation";
  @SerializedName(SERIALIZED_NAME_REPUTATION)
  private Integer reputation;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private UsersInfoResponseStats stats;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public UsersInfoResponse() {
  }

  public UsersInfoResponse backlog(Integer backlog) {
    this.backlog = backlog;
    return this;
  }

  /**
   * Get backlog
   * @return backlog
   */
  @javax.annotation.Nullable
  public Integer getBacklog() {
    return backlog;
  }

  public void setBacklog(Integer backlog) {
    this.backlog = backlog;
  }


  public UsersInfoResponse createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public UsersInfoResponse hourlyQuota(Integer hourlyQuota) {
    this.hourlyQuota = hourlyQuota;
    return this;
  }

  /**
   * Get hourlyQuota
   * @return hourlyQuota
   */
  @javax.annotation.Nullable
  public Integer getHourlyQuota() {
    return hourlyQuota;
  }

  public void setHourlyQuota(Integer hourlyQuota) {
    this.hourlyQuota = hourlyQuota;
  }


  public UsersInfoResponse publicId(String publicId) {
    this.publicId = publicId;
    return this;
  }

  /**
   * Get publicId
   * @return publicId
   */
  @javax.annotation.Nullable
  public String getPublicId() {
    return publicId;
  }

  public void setPublicId(String publicId) {
    this.publicId = publicId;
  }


  public UsersInfoResponse reputation(Integer reputation) {
    this.reputation = reputation;
    return this;
  }

  /**
   * Get reputation
   * @return reputation
   */
  @javax.annotation.Nullable
  public Integer getReputation() {
    return reputation;
  }

  public void setReputation(Integer reputation) {
    this.reputation = reputation;
  }


  public UsersInfoResponse stats(UsersInfoResponseStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public UsersInfoResponseStats getStats() {
    return stats;
  }

  public void setStats(UsersInfoResponseStats stats) {
    this.stats = stats;
  }


  public UsersInfoResponse username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersInfoResponse usersInfoResponse = (UsersInfoResponse) o;
    return Objects.equals(this.backlog, usersInfoResponse.backlog) &&
        Objects.equals(this.createdAt, usersInfoResponse.createdAt) &&
        Objects.equals(this.hourlyQuota, usersInfoResponse.hourlyQuota) &&
        Objects.equals(this.publicId, usersInfoResponse.publicId) &&
        Objects.equals(this.reputation, usersInfoResponse.reputation) &&
        Objects.equals(this.stats, usersInfoResponse.stats) &&
        Objects.equals(this.username, usersInfoResponse.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backlog, createdAt, hourlyQuota, publicId, reputation, stats, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersInfoResponse {\n");
    sb.append("    backlog: ").append(toIndentedString(backlog)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    hourlyQuota: ").append(toIndentedString(hourlyQuota)).append("\n");
    sb.append("    publicId: ").append(toIndentedString(publicId)).append("\n");
    sb.append("    reputation: ").append(toIndentedString(reputation)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backlog");
    openapiFields.add("created_at");
    openapiFields.add("hourly_quota");
    openapiFields.add("public_id");
    openapiFields.add("reputation");
    openapiFields.add("stats");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersInfoResponse is not found in the empty JSON string", UsersInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("public_id") != null && !jsonObj.get("public_id").isJsonNull()) && !jsonObj.get("public_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_id").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        UsersInfoResponseStats.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersInfoResponse>() {
           @Override
           public void write(JsonWriter out, UsersInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersInfoResponse
   * @throws IOException if the JSON string is invalid with respect to UsersInfoResponse
   */
  public static UsersInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersInfoResponse.class);
  }

  /**
   * Convert an instance of UsersInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

