/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SenderDomainInfoDkim;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UrlsTrackingDomainsResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UrlsTrackingDomainsResponseInner {
  public static final String SERIALIZED_NAME_CNAME = "cname";
  @SerializedName(SERIALIZED_NAME_CNAME)
  private SenderDomainInfoDkim cname;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_LAST_TESTED_AT = "last_tested_at";
  @SerializedName(SERIALIZED_NAME_LAST_TESTED_AT)
  private String lastTestedAt;

  public static final String SERIALIZED_NAME_VALID_TRACKING = "valid_tracking";
  @SerializedName(SERIALIZED_NAME_VALID_TRACKING)
  private Boolean validTracking;

  public UrlsTrackingDomainsResponseInner() {
  }

  public UrlsTrackingDomainsResponseInner cname(SenderDomainInfoDkim cname) {
    this.cname = cname;
    return this;
  }

  /**
   * Get cname
   * @return cname
   */
  @javax.annotation.Nullable
  public SenderDomainInfoDkim getCname() {
    return cname;
  }

  public void setCname(SenderDomainInfoDkim cname) {
    this.cname = cname;
  }


  public UrlsTrackingDomainsResponseInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public UrlsTrackingDomainsResponseInner domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public UrlsTrackingDomainsResponseInner lastTestedAt(String lastTestedAt) {
    this.lastTestedAt = lastTestedAt;
    return this;
  }

  /**
   * Get lastTestedAt
   * @return lastTestedAt
   */
  @javax.annotation.Nullable
  public String getLastTestedAt() {
    return lastTestedAt;
  }

  public void setLastTestedAt(String lastTestedAt) {
    this.lastTestedAt = lastTestedAt;
  }


  public UrlsTrackingDomainsResponseInner validTracking(Boolean validTracking) {
    this.validTracking = validTracking;
    return this;
  }

  /**
   * Get validTracking
   * @return validTracking
   */
  @javax.annotation.Nullable
  public Boolean getValidTracking() {
    return validTracking;
  }

  public void setValidTracking(Boolean validTracking) {
    this.validTracking = validTracking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlsTrackingDomainsResponseInner urlsTrackingDomainsResponseInner = (UrlsTrackingDomainsResponseInner) o;
    return Objects.equals(this.cname, urlsTrackingDomainsResponseInner.cname) &&
        Objects.equals(this.createdAt, urlsTrackingDomainsResponseInner.createdAt) &&
        Objects.equals(this.domain, urlsTrackingDomainsResponseInner.domain) &&
        Objects.equals(this.lastTestedAt, urlsTrackingDomainsResponseInner.lastTestedAt) &&
        Objects.equals(this.validTracking, urlsTrackingDomainsResponseInner.validTracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cname, createdAt, domain, lastTestedAt, validTracking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlsTrackingDomainsResponseInner {\n");
    sb.append("    cname: ").append(toIndentedString(cname)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    lastTestedAt: ").append(toIndentedString(lastTestedAt)).append("\n");
    sb.append("    validTracking: ").append(toIndentedString(validTracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cname");
    openapiFields.add("created_at");
    openapiFields.add("domain");
    openapiFields.add("last_tested_at");
    openapiFields.add("valid_tracking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UrlsTrackingDomainsResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlsTrackingDomainsResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlsTrackingDomainsResponseInner is not found in the empty JSON string", UrlsTrackingDomainsResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlsTrackingDomainsResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlsTrackingDomainsResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cname`
      if (jsonObj.get("cname") != null && !jsonObj.get("cname").isJsonNull()) {
        SenderDomainInfoDkim.validateJsonElement(jsonObj.get("cname"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("last_tested_at") != null && !jsonObj.get("last_tested_at").isJsonNull()) && !jsonObj.get("last_tested_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_tested_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_tested_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlsTrackingDomainsResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlsTrackingDomainsResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlsTrackingDomainsResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlsTrackingDomainsResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlsTrackingDomainsResponseInner>() {
           @Override
           public void write(JsonWriter out, UrlsTrackingDomainsResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlsTrackingDomainsResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UrlsTrackingDomainsResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UrlsTrackingDomainsResponseInner
   * @throws IOException if the JSON string is invalid with respect to UrlsTrackingDomainsResponseInner
   */
  public static UrlsTrackingDomainsResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlsTrackingDomainsResponseInner.class);
  }

  /**
   * Convert an instance of UrlsTrackingDomainsResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

