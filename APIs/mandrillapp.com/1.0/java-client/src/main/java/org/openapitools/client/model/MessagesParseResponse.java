/*
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessagesContentResponseAttachmentsInner;
import org.openapitools.client.model.MessagesContentResponseHeaders;
import org.openapitools.client.model.MessagesContentResponseTo;
import org.openapitools.client.model.MessagesParseResponseAttachmentsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessagesParseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:49.454529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagesParseResponse {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<MessagesParseResponseAttachmentsInner> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM_EMAIL = "from_email";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL)
  private String fromEmail;

  public static final String SERIALIZED_NAME_FROM_NAME = "from_name";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private MessagesContentResponseHeaders headers;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<MessagesContentResponseAttachmentsInner> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<MessagesContentResponseTo> to = new ArrayList<>();

  public MessagesParseResponse() {
  }

  public MessagesParseResponse attachments(List<MessagesParseResponseAttachmentsInner> attachments) {
    this.attachments = attachments;
    return this;
  }

  public MessagesParseResponse addAttachmentsItem(MessagesParseResponseAttachmentsInner attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<MessagesParseResponseAttachmentsInner> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<MessagesParseResponseAttachmentsInner> attachments) {
    this.attachments = attachments;
  }


  public MessagesParseResponse fromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
    return this;
  }

  /**
   * Get fromEmail
   * @return fromEmail
   */
  @javax.annotation.Nullable
  public String getFromEmail() {
    return fromEmail;
  }

  public void setFromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
  }


  public MessagesParseResponse fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

  /**
   * Get fromName
   * @return fromName
   */
  @javax.annotation.Nullable
  public String getFromName() {
    return fromName;
  }

  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public MessagesParseResponse headers(MessagesContentResponseHeaders headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public MessagesContentResponseHeaders getHeaders() {
    return headers;
  }

  public void setHeaders(MessagesContentResponseHeaders headers) {
    this.headers = headers;
  }


  public MessagesParseResponse html(String html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public MessagesParseResponse images(List<MessagesContentResponseAttachmentsInner> images) {
    this.images = images;
    return this;
  }

  public MessagesParseResponse addImagesItem(MessagesContentResponseAttachmentsInner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public List<MessagesContentResponseAttachmentsInner> getImages() {
    return images;
  }

  public void setImages(List<MessagesContentResponseAttachmentsInner> images) {
    this.images = images;
  }


  public MessagesParseResponse subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MessagesParseResponse text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public MessagesParseResponse to(List<MessagesContentResponseTo> to) {
    this.to = to;
    return this;
  }

  public MessagesParseResponse addToItem(MessagesContentResponseTo toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public List<MessagesContentResponseTo> getTo() {
    return to;
  }

  public void setTo(List<MessagesContentResponseTo> to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagesParseResponse messagesParseResponse = (MessagesParseResponse) o;
    return Objects.equals(this.attachments, messagesParseResponse.attachments) &&
        Objects.equals(this.fromEmail, messagesParseResponse.fromEmail) &&
        Objects.equals(this.fromName, messagesParseResponse.fromName) &&
        Objects.equals(this.headers, messagesParseResponse.headers) &&
        Objects.equals(this.html, messagesParseResponse.html) &&
        Objects.equals(this.images, messagesParseResponse.images) &&
        Objects.equals(this.subject, messagesParseResponse.subject) &&
        Objects.equals(this.text, messagesParseResponse.text) &&
        Objects.equals(this.to, messagesParseResponse.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, fromEmail, fromName, headers, html, images, subject, text, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagesParseResponse {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("from_email");
    openapiFields.add("from_name");
    openapiFields.add("headers");
    openapiFields.add("html");
    openapiFields.add("images");
    openapiFields.add("subject");
    openapiFields.add("text");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagesParseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagesParseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagesParseResponse is not found in the empty JSON string", MessagesParseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagesParseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagesParseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            MessagesParseResponseAttachmentsInner.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("from_email") != null && !jsonObj.get("from_email").isJsonNull()) && !jsonObj.get("from_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_email").toString()));
      }
      if ((jsonObj.get("from_name") != null && !jsonObj.get("from_name").isJsonNull()) && !jsonObj.get("from_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_name").toString()));
      }
      // validate the optional field `headers`
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        MessagesContentResponseHeaders.validateJsonElement(jsonObj.get("headers"));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            MessagesContentResponseAttachmentsInner.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        JsonArray jsonArrayto = jsonObj.getAsJsonArray("to");
        if (jsonArrayto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("to").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
          }

          // validate the optional field `to` (array)
          for (int i = 0; i < jsonArrayto.size(); i++) {
            MessagesContentResponseTo.validateJsonElement(jsonArrayto.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagesParseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagesParseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagesParseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagesParseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagesParseResponse>() {
           @Override
           public void write(JsonWriter out, MessagesParseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagesParseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagesParseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagesParseResponse
   * @throws IOException if the JSON string is invalid with respect to MessagesParseResponse
   */
  public static MessagesParseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagesParseResponse.class);
  }

  /**
   * Convert an instance of MessagesParseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

