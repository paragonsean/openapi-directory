/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessagesInfoResponseClicksDetailInner from './MessagesInfoResponseClicksDetailInner';
import MessagesInfoResponseMetadata from './MessagesInfoResponseMetadata';
import MessagesInfoResponseOpensDetailInner from './MessagesInfoResponseOpensDetailInner';
import MessagesInfoResponseSmtpEventsInner from './MessagesInfoResponseSmtpEventsInner';

/**
 * The MessagesInfoResponse model module.
 * @module model/MessagesInfoResponse
 * @version 1.0
 */
class MessagesInfoResponse {
    /**
     * Constructs a new <code>MessagesInfoResponse</code>.
     * @alias module:model/MessagesInfoResponse
     */
    constructor() { 
        
        MessagesInfoResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessagesInfoResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessagesInfoResponse} obj Optional instance to populate.
     * @return {module:model/MessagesInfoResponse} The populated <code>MessagesInfoResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessagesInfoResponse();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('clicks')) {
                obj['clicks'] = ApiClient.convertToType(data['clicks'], 'Number');
            }
            if (data.hasOwnProperty('clicks_detail')) {
                obj['clicks_detail'] = ApiClient.convertToType(data['clicks_detail'], [MessagesInfoResponseClicksDetailInner]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = MessagesInfoResponseMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('opens')) {
                obj['opens'] = ApiClient.convertToType(data['opens'], 'Number');
            }
            if (data.hasOwnProperty('opens_detail')) {
                obj['opens_detail'] = ApiClient.convertToType(data['opens_detail'], [MessagesInfoResponseOpensDetailInner]);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('smtp_events')) {
                obj['smtp_events'] = ApiClient.convertToType(data['smtp_events'], [MessagesInfoResponseSmtpEventsInner]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessagesInfoResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessagesInfoResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        if (data['clicks_detail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clicks_detail'])) {
                throw new Error("Expected the field `clicks_detail` to be an array in the JSON data but got " + data['clicks_detail']);
            }
            // validate the optional field `clicks_detail` (array)
            for (const item of data['clicks_detail']) {
                MessagesInfoResponseClicksDetailInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          MessagesInfoResponseMetadata.validateJSON(data['metadata']);
        }
        if (data['opens_detail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['opens_detail'])) {
                throw new Error("Expected the field `opens_detail` to be an array in the JSON data but got " + data['opens_detail']);
            }
            // validate the optional field `opens_detail` (array)
            for (const item of data['opens_detail']) {
                MessagesInfoResponseOpensDetailInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        if (data['smtp_events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['smtp_events'])) {
                throw new Error("Expected the field `smtp_events` to be an array in the JSON data but got " + data['smtp_events']);
            }
            // validate the optional field `smtp_events` (array)
            for (const item of data['smtp_events']) {
                MessagesInfoResponseSmtpEventsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }

        return true;
    }


}



/**
 * @member {String} _id
 */
MessagesInfoResponse.prototype['_id'] = undefined;

/**
 * @member {Number} clicks
 */
MessagesInfoResponse.prototype['clicks'] = undefined;

/**
 * @member {Array.<module:model/MessagesInfoResponseClicksDetailInner>} clicks_detail
 */
MessagesInfoResponse.prototype['clicks_detail'] = undefined;

/**
 * @member {String} email
 */
MessagesInfoResponse.prototype['email'] = undefined;

/**
 * @member {module:model/MessagesInfoResponseMetadata} metadata
 */
MessagesInfoResponse.prototype['metadata'] = undefined;

/**
 * @member {Number} opens
 */
MessagesInfoResponse.prototype['opens'] = undefined;

/**
 * @member {Array.<module:model/MessagesInfoResponseOpensDetailInner>} opens_detail
 */
MessagesInfoResponse.prototype['opens_detail'] = undefined;

/**
 * @member {String} sender
 */
MessagesInfoResponse.prototype['sender'] = undefined;

/**
 * @member {Array.<module:model/MessagesInfoResponseSmtpEventsInner>} smtp_events
 */
MessagesInfoResponse.prototype['smtp_events'] = undefined;

/**
 * @member {String} state
 */
MessagesInfoResponse.prototype['state'] = undefined;

/**
 * @member {String} subject
 */
MessagesInfoResponse.prototype['subject'] = undefined;

/**
 * @member {Array.<String>} tags
 */
MessagesInfoResponse.prototype['tags'] = undefined;

/**
 * @member {String} template
 */
MessagesInfoResponse.prototype['template'] = undefined;

/**
 * @member {Number} ts
 */
MessagesInfoResponse.prototype['ts'] = undefined;






export default MessagesInfoResponse;

