/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import Domain from '../model/Domain';
import Email from '../model/Email';
import ExportsActivity from '../model/ExportsActivity';
import ExportsInfoResponse from '../model/ExportsInfoResponse';
import ExportsListResponseInner from '../model/ExportsListResponseInner';
import ExportsSatus from '../model/ExportsSatus';
import Id from '../model/Id';
import InboundAddRoute from '../model/InboundAddRoute';
import InboundDomainsResponseInner from '../model/InboundDomainsResponseInner';
import InboundInfo from '../model/InboundInfo';
import InboundRoutesResponseInner from '../model/InboundRoutesResponseInner';
import InboundSendRaw from '../model/InboundSendRaw';
import InboundSendRawResponseInner from '../model/InboundSendRawResponseInner';
import InboundUpdateRoute from '../model/InboundUpdateRoute';
import Ip from '../model/Ip';
import IpDomain from '../model/IpDomain';
import IpInfo from '../model/IpInfo';
import IpsCheckCustomDnsResponse from '../model/IpsCheckCustomDnsResponse';
import IpsDeletePoolResponse from '../model/IpsDeletePoolResponse';
import IpsDeleteResponse from '../model/IpsDeleteResponse';
import IpsListPoolsResponseInner from '../model/IpsListPoolsResponseInner';
import IpsListPoolsResponseInnerIpsInner from '../model/IpsListPoolsResponseInnerIpsInner';
import IpsPool from '../model/IpsPool';
import IpsPoolKey from '../model/IpsPoolKey';
import IpsProvision from '../model/IpsProvision';
import IpsProvisionResponse from '../model/IpsProvisionResponse';
import IpsSetPool from '../model/IpsSetPool';
import MessageSendStatusInner from '../model/MessageSendStatusInner';
import MessagesCancelScheduled from '../model/MessagesCancelScheduled';
import MessagesContentResponse from '../model/MessagesContentResponse';
import MessagesInfoResponse from '../model/MessagesInfoResponse';
import MessagesListScheduled from '../model/MessagesListScheduled';
import MessagesListScheduledResponseInner from '../model/MessagesListScheduledResponseInner';
import MessagesParse from '../model/MessagesParse';
import MessagesParseResponse from '../model/MessagesParseResponse';
import MessagesReschedule from '../model/MessagesReschedule';
import MessagesSearch from '../model/MessagesSearch';
import MessagesSearchResponseInner from '../model/MessagesSearchResponseInner';
import MessagesSearchTimeSeries from '../model/MessagesSearchTimeSeries';
import MessagesSend from '../model/MessagesSend';
import MessagesSendRaw from '../model/MessagesSendRaw';
import MessagesSendTemplate from '../model/MessagesSendTemplate';
import MetadataInfo from '../model/MetadataInfo';
import MetadataListResponseInner from '../model/MetadataListResponseInner';
import MetadataTemplate from '../model/MetadataTemplate';
import Name from '../model/Name';
import NotifyEmail from '../model/NotifyEmail';
import RejectsAdd from '../model/RejectsAdd';
import RejectsAddResponse from '../model/RejectsAddResponse';
import RejectsDelete from '../model/RejectsDelete';
import RejectsDeleteResponse from '../model/RejectsDeleteResponse';
import RejectsList from '../model/RejectsList';
import RejectsListResponseInner from '../model/RejectsListResponseInner';
import RejectsListResponseInnerSender from '../model/RejectsListResponseInnerSender';
import Route from '../model/Route';
import SchedulingchangeInfo from '../model/SchedulingchangeInfo';
import SenderAddress from '../model/SenderAddress';
import SenderDomainInfo from '../model/SenderDomainInfo';
import SendersDomainsResponseInner from '../model/SendersDomainsResponseInner';
import SendersInfoResponse from '../model/SendersInfoResponse';
import SendersVerifyDomain from '../model/SendersVerifyDomain';
import SendersVerifyDomainResponse from '../model/SendersVerifyDomainResponse';
import SubaccountInfo from '../model/SubaccountInfo';
import SubaccountInfo2 from '../model/SubaccountInfo2';
import SubaccountsInfoResponse from '../model/SubaccountsInfoResponse';
import SubaccountsListResponseInner from '../model/SubaccountsListResponseInner';
import TagKey from '../model/TagKey';
import TagsDeleteResponse from '../model/TagsDeleteResponse';
import TagsInfoResponse from '../model/TagsInfoResponse';
import TagsListResponseInner from '../model/TagsListResponseInner';
import Template from '../model/Template';
import TemplateDetailed from '../model/TemplateDetailed';
import TemplatesList from '../model/TemplatesList';
import TemplatesListResponseInner from '../model/TemplatesListResponseInner';
import TemplatesRender from '../model/TemplatesRender';
import TemplatesRenderResponse from '../model/TemplatesRenderResponse';
import TimeSeriesInner from '../model/TimeSeriesInner';
import TimeseriesInner from '../model/TimeseriesInner';
import TrackingDomainStatus from '../model/TrackingDomainStatus';
import UrlInfosInner from '../model/UrlInfosInner';
import UrlKey from '../model/UrlKey';
import UrlsTimeSeries from '../model/UrlsTimeSeries';
import UrlsTimeSeriesResponseInner from '../model/UrlsTimeSeriesResponseInner';
import UrlsTrackingDomainsResponseInner from '../model/UrlsTrackingDomainsResponseInner';
import UsersInfoResponse from '../model/UsersInfoResponse';
import UsersPing2Response from '../model/UsersPing2Response';
import Webhook from '../model/Webhook';
import WebhookKey from '../model/WebhookKey';
import WebhooksAdd from '../model/WebhooksAdd';
import WebhooksListResponseInner from '../model/WebhooksListResponseInner';
import WebhooksUpdate from '../model/WebhooksUpdate';
import WhitelistsAddResponse from '../model/WhitelistsAddResponse';
import WhitelistsDeleteResponse from '../model/WhitelistsDeleteResponse';
import WhitelistsListResponseInner from '../model/WhitelistsListResponseInner';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exportsActivityJsonPost operation.
     * @callback module:api/DefaultApi~exportsActivityJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportsSatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins an export of your activity history. The activity will be exported to a zip archive containing a single file named activity.csv in the same format as you would be able to export from your account's activity view. It includes the following fields: Date, Email Address, Sender, Subject, Status, Tags, Opens, Clicks, Bounce Detail. If you have configured any custom metadata fields, they will be included in the exported data.
     * @param {module:model/ExportsActivity} body 
     * @param {module:api/DefaultApi~exportsActivityJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportsSatus}
     */
    exportsActivityJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportsActivityJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExportsSatus;
      return this.apiClient.callApi(
        '/exports/activity.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportsInfoJsonPost operation.
     * @callback module:api/DefaultApi~exportsInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportsInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an export job. If the export job's state is 'complete', the returned data will include a URL you can use to fetch the results. Every export job produces a zip archive, but the format of the archive is distinct for each job type. The api calls that initiate exports include more details about the output format for that job type.
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~exportsInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportsInfoResponse}
     */
    exportsInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportsInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExportsInfoResponse;
      return this.apiClient.callApi(
        '/exports/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportsListJsonPost operation.
     * @callback module:api/DefaultApi~exportsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExportsListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of your exports.
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~exportsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExportsListResponseInner>}
     */
    exportsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ExportsListResponseInner];
      return this.apiClient.callApi(
        '/exports/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportsRejectsJsonPost operation.
     * @callback module:api/DefaultApi~exportsRejectsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportsSatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins an export of your rejection blacklist. The blacklist will be exported to a zip archive containing a single file named rejects.csv that includes the following fields: email, reason, detail, created_at, expires_at, last_event_at, expires_at.
     * @param {module:model/NotifyEmail} body 
     * @param {module:api/DefaultApi~exportsRejectsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportsSatus}
     */
    exportsRejectsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportsRejectsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExportsSatus;
      return this.apiClient.callApi(
        '/exports/rejects.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportsWhitelistJsonPost operation.
     * @callback module:api/DefaultApi~exportsWhitelistJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportsSatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins an export of your rejection whitelist. The whitelist will be exported to a zip archive containing a single file named whitelist.csv that includes the following fields: email, detail, created_at.
     * @param {module:model/NotifyEmail} body 
     * @param {module:api/DefaultApi~exportsWhitelistJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportsSatus}
     */
    exportsWhitelistJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportsWhitelistJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExportsSatus;
      return this.apiClient.callApi(
        '/exports/whitelist.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundAddDomainJsonPost operation.
     * @callback module:api/DefaultApi~inboundAddDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an inbound domain to your account
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~inboundAddDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundInfo}
     */
    inboundAddDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundAddDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InboundInfo;
      return this.apiClient.callApi(
        '/inbound/add-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundAddRouteJsonPost operation.
     * @callback module:api/DefaultApi~inboundAddRouteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Route} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new mailbox route to an inbound domain
     * @param {module:model/InboundAddRoute} body 
     * @param {module:api/DefaultApi~inboundAddRouteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Route}
     */
    inboundAddRouteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundAddRouteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Route;
      return this.apiClient.callApi(
        '/inbound/add-route.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundCheckDomainJsonPost operation.
     * @callback module:api/DefaultApi~inboundCheckDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the MX settings for an inbound domain. The domain must have already been added with the add-domain call
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~inboundCheckDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundInfo}
     */
    inboundCheckDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundCheckDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InboundInfo;
      return this.apiClient.callApi(
        '/inbound/check-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundDeleteDomainJsonPost operation.
     * @callback module:api/DefaultApi~inboundDeleteDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an inbound domain from the account. All mail will stop routing for this domain immediately.
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~inboundDeleteDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundInfo}
     */
    inboundDeleteDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundDeleteDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InboundInfo;
      return this.apiClient.callApi(
        '/inbound/delete-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundDeleteRouteJsonPost operation.
     * @callback module:api/DefaultApi~inboundDeleteRouteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Route} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing inbound mailbox route
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~inboundDeleteRouteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Route}
     */
    inboundDeleteRouteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundDeleteRouteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Route;
      return this.apiClient.callApi(
        '/inbound/delete-route.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundDomainsJsonPost operation.
     * @callback module:api/DefaultApi~inboundDomainsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboundDomainsResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the domains that have been configured for inbound delivery
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~inboundDomainsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboundDomainsResponseInner>}
     */
    inboundDomainsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundDomainsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboundDomainsResponseInner];
      return this.apiClient.callApi(
        '/inbound/domains.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundRoutesJsonPost operation.
     * @callback module:api/DefaultApi~inboundRoutesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboundRoutesResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the mailbox routes defined for an inbound domain
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~inboundRoutesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboundRoutesResponseInner>}
     */
    inboundRoutesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundRoutesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboundRoutesResponseInner];
      return this.apiClient.callApi(
        '/inbound/routes.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundSendRawJsonPost operation.
     * @callback module:api/DefaultApi~inboundSendRawJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboundSendRawResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Take a raw MIME document destined for a domain with inbound domains set up, and send it to the inbound hook exactly as if it had been sent over SMTP
     * @param {module:model/InboundSendRaw} body 
     * @param {module:api/DefaultApi~inboundSendRawJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboundSendRawResponseInner>}
     */
    inboundSendRawJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundSendRawJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboundSendRawResponseInner];
      return this.apiClient.callApi(
        '/inbound/send-raw.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboundUpdateRouteJsonPost operation.
     * @callback module:api/DefaultApi~inboundUpdateRouteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Route} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the pattern or webhook of an existing inbound mailbox route. If null is provided for any fields, the values will remain unchanged.
     * @param {module:model/InboundUpdateRoute} body 
     * @param {module:api/DefaultApi~inboundUpdateRouteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Route}
     */
    inboundUpdateRouteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inboundUpdateRouteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Route;
      return this.apiClient.callApi(
        '/inbound/update-route.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsCancelWarmupJsonPost operation.
     * @callback module:api/DefaultApi~ipsCancelWarmupJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the warmup process for a dedicated IP.
     * @param {module:model/Ip} body 
     * @param {module:api/DefaultApi~ipsCancelWarmupJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpInfo}
     */
    ipsCancelWarmupJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsCancelWarmupJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpInfo;
      return this.apiClient.callApi(
        '/ips/cancel-warmup.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsCheckCustomDnsJsonPost operation.
     * @callback module:api/DefaultApi~ipsCheckCustomDnsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpsCheckCustomDnsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests whether a domain name is valid for use as the custom reverse DNS for a dedicated IP.
     * @param {module:model/IpDomain} body 
     * @param {module:api/DefaultApi~ipsCheckCustomDnsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpsCheckCustomDnsResponse}
     */
    ipsCheckCustomDnsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsCheckCustomDnsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpsCheckCustomDnsResponse;
      return this.apiClient.callApi(
        '/ips/check-custom-dns.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsCreatePoolJsonPost operation.
     * @callback module:api/DefaultApi~ipsCreatePoolJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpsPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a pool and returns it. If a pool already exists with this name, no action will be performed.
     * @param {module:model/IpsPoolKey} body 
     * @param {module:api/DefaultApi~ipsCreatePoolJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpsPool}
     */
    ipsCreatePoolJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsCreatePoolJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpsPool;
      return this.apiClient.callApi(
        '/ips/create-pool.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsDeleteJsonPost operation.
     * @callback module:api/DefaultApi~ipsDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dedicated IP. This is permanent and cannot be undone.
     * @param {module:model/Ip} body 
     * @param {module:api/DefaultApi~ipsDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpsDeleteResponse}
     */
    ipsDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpsDeleteResponse;
      return this.apiClient.callApi(
        '/ips/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsDeletePoolJsonPost operation.
     * @callback module:api/DefaultApi~ipsDeletePoolJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpsDeletePoolResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pool. A pool must be empty before you can delete it, and you cannot delete your default pool.
     * @param {module:model/IpsPoolKey} body 
     * @param {module:api/DefaultApi~ipsDeletePoolJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpsDeletePoolResponse}
     */
    ipsDeletePoolJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsDeletePoolJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpsDeletePoolResponse;
      return this.apiClient.callApi(
        '/ips/delete-pool.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsInfoJsonPost operation.
     * @callback module:api/DefaultApi~ipsInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a single dedicated ip.
     * @param {module:model/Ip} body 
     * @param {module:api/DefaultApi~ipsInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpInfo}
     */
    ipsInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpInfo;
      return this.apiClient.callApi(
        '/ips/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsListJsonPost operation.
     * @callback module:api/DefaultApi~ipsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IpsListPoolsResponseInnerIpsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists your dedicated IPs.
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~ipsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IpsListPoolsResponseInnerIpsInner>}
     */
    ipsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [IpsListPoolsResponseInnerIpsInner];
      return this.apiClient.callApi(
        '/ips/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsListPoolsJsonPost operation.
     * @callback module:api/DefaultApi~ipsListPoolsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IpsListPoolsResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists your dedicated IP pools.
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~ipsListPoolsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IpsListPoolsResponseInner>}
     */
    ipsListPoolsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsListPoolsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [IpsListPoolsResponseInner];
      return this.apiClient.callApi(
        '/ips/list-pools.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsPoolInfoJsonPost operation.
     * @callback module:api/DefaultApi~ipsPoolInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpsPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a single dedicated IP pool.
     * @param {module:model/IpsPoolKey} body 
     * @param {module:api/DefaultApi~ipsPoolInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpsPool}
     */
    ipsPoolInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsPoolInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpsPool;
      return this.apiClient.callApi(
        '/ips/pool-info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsProvisionJsonPost operation.
     * @callback module:api/DefaultApi~ipsProvisionJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpsProvisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests an additional dedicated IP for your account. Accounts may have one outstanding request at any time, and provisioning requests are processed within 24 hours.
     * @param {module:model/IpsProvision} body 
     * @param {module:api/DefaultApi~ipsProvisionJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpsProvisionResponse}
     */
    ipsProvisionJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsProvisionJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpsProvisionResponse;
      return this.apiClient.callApi(
        '/ips/provision.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsSetCustomDnsJsonPost operation.
     * @callback module:api/DefaultApi~ipsSetCustomDnsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the custom DNS name for a dedicated IP.
     * @param {module:model/IpDomain} body 
     * @param {module:api/DefaultApi~ipsSetCustomDnsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpInfo}
     */
    ipsSetCustomDnsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsSetCustomDnsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpInfo;
      return this.apiClient.callApi(
        '/ips/set-custom-dns.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsSetPoolJsonPost operation.
     * @callback module:api/DefaultApi~ipsSetPoolJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a dedicated IP to a different pool.
     * @param {module:model/IpsSetPool} body 
     * @param {module:api/DefaultApi~ipsSetPoolJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpInfo}
     */
    ipsSetPoolJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsSetPoolJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpInfo;
      return this.apiClient.callApi(
        '/ips/set-pool.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsStartWarmupJsonPost operation.
     * @callback module:api/DefaultApi~ipsStartWarmupJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins the warmup process for a dedicated IP. During the warmup process, Mandrill will gradually increase the percentage of your mail that is sent over the warming-up IP, over a period of roughly 30 days. The rest of your mail will be sent over shared IPs or other dedicated IPs in the same pool.
     * @param {module:model/Ip} body 
     * @param {module:api/DefaultApi~ipsStartWarmupJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpInfo}
     */
    ipsStartWarmupJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipsStartWarmupJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IpInfo;
      return this.apiClient.callApi(
        '/ips/start-warmup.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesCancelScheduledJsonPost operation.
     * @callback module:api/DefaultApi~messagesCancelScheduledJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchedulingchangeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled email.
     * @param {module:model/MessagesCancelScheduled} body 
     * @param {module:api/DefaultApi~messagesCancelScheduledJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchedulingchangeInfo}
     */
    messagesCancelScheduledJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesCancelScheduledJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SchedulingchangeInfo;
      return this.apiClient.callApi(
        '/messages/cancel-scheduled.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesContentJsonPost operation.
     * @callback module:api/DefaultApi~messagesContentJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the full content of a recently sent message
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~messagesContentJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesContentResponse}
     */
    messagesContentJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesContentJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MessagesContentResponse;
      return this.apiClient.callApi(
        '/messages/content.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesInfoJsonPost operation.
     * @callback module:api/DefaultApi~messagesInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information for a single recently sent message
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~messagesInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesInfoResponse}
     */
    messagesInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MessagesInfoResponse;
      return this.apiClient.callApi(
        '/messages/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesListScheduledJsonPost operation.
     * @callback module:api/DefaultApi~messagesListScheduledJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessagesListScheduledResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries your scheduled emails by sender or recipient, or both.
     * @param {module:model/MessagesListScheduled} body 
     * @param {module:api/DefaultApi~messagesListScheduledJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessagesListScheduledResponseInner>}
     */
    messagesListScheduledJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesListScheduledJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MessagesListScheduledResponseInner];
      return this.apiClient.callApi(
        '/messages/list-scheduled.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesParseJsonPost operation.
     * @callback module:api/DefaultApi~messagesParseJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesParseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse the full MIME document for an email message, returning the content of the message broken into its constituent pieces
     * @param {module:model/MessagesParse} body 
     * @param {module:api/DefaultApi~messagesParseJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesParseResponse}
     */
    messagesParseJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesParseJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MessagesParseResponse;
      return this.apiClient.callApi(
        '/messages/parse.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesRescheduleJsonPost operation.
     * @callback module:api/DefaultApi~messagesRescheduleJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchedulingchangeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reschedules a scheduled email.
     * @param {module:model/MessagesReschedule} body 
     * @param {module:api/DefaultApi~messagesRescheduleJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchedulingchangeInfo}
     */
    messagesRescheduleJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesRescheduleJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SchedulingchangeInfo;
      return this.apiClient.callApi(
        '/messages/reschedule.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesSearchJsonPost operation.
     * @callback module:api/DefaultApi~messagesSearchJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessagesSearchResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the content of recently sent messages and optionally narrow by date range, tags and senders. This method may be called up to 20 times per minute. If you need the data more often, you can use /messages/info.json to get the information for a single message, or webhooks to push activity to your own application for querying.
     * @param {module:model/MessagesSearch} body 
     * @param {module:api/DefaultApi~messagesSearchJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessagesSearchResponseInner>}
     */
    messagesSearchJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesSearchJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MessagesSearchResponseInner];
      return this.apiClient.callApi(
        '/messages/search.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesSearchTimeSeriesJsonPost operation.
     * @callback module:api/DefaultApi~messagesSearchTimeSeriesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeseriesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the content of recently sent messages and return the aggregated hourly stats for matching messages
     * @param {module:model/MessagesSearchTimeSeries} body 
     * @param {module:api/DefaultApi~messagesSearchTimeSeriesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeseriesInner>}
     */
    messagesSearchTimeSeriesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesSearchTimeSeriesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TimeseriesInner];
      return this.apiClient.callApi(
        '/messages/search-time-series.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesSendJsonPost operation.
     * @callback module:api/DefaultApi~messagesSendJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageSendStatusInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new transactional message through Mandrill
     * @param {module:model/MessagesSend} body 
     * @param {module:api/DefaultApi~messagesSendJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageSendStatusInner>}
     */
    messagesSendJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesSendJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MessageSendStatusInner];
      return this.apiClient.callApi(
        '/messages/send.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesSendRawJsonPost operation.
     * @callback module:api/DefaultApi~messagesSendRawJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageSendStatusInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Take a raw MIME document for a message, and send it exactly as if it were sent through Mandrill's SMTP servers
     * @param {module:model/MessagesSendRaw} body 
     * @param {module:api/DefaultApi~messagesSendRawJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageSendStatusInner>}
     */
    messagesSendRawJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesSendRawJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MessageSendStatusInner];
      return this.apiClient.callApi(
        '/messages/send-raw.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesSendTemplateJsonPost operation.
     * @callback module:api/DefaultApi~messagesSendTemplateJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageSendStatusInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new transactional message through Mandrill using a template
     * @param {module:model/MessagesSendTemplate} body 
     * @param {module:api/DefaultApi~messagesSendTemplateJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageSendStatusInner>}
     */
    messagesSendTemplateJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messagesSendTemplateJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MessageSendStatusInner];
      return this.apiClient.callApi(
        '/messages/send-template.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataAddJsonPost operation.
     * @callback module:api/DefaultApi~metadataAddJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new custom metadata field to be indexed for the account.
     * @param {module:model/MetadataTemplate} body 
     * @param {module:api/DefaultApi~metadataAddJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataInfo}
     */
    metadataAddJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling metadataAddJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MetadataInfo;
      return this.apiClient.callApi(
        '/metadata/add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataDeleteJsonPost operation.
     * @callback module:api/DefaultApi~metadataDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing custom metadata field. Deletion isn't instataneous, and /metadata/list will continue to return the field until the asynchronous deletion process is complete.
     * @param {module:model/Name} body 
     * @param {module:api/DefaultApi~metadataDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataInfo}
     */
    metadataDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling metadataDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MetadataInfo;
      return this.apiClient.callApi(
        '/metadata/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataListJsonPost operation.
     * @callback module:api/DefaultApi~metadataListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MetadataListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of custom metadata fields indexed for the account.
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~metadataListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MetadataListResponseInner>}
     */
    metadataListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling metadataListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [MetadataListResponseInner];
      return this.apiClient.callApi(
        '/metadata/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataUpdateJsonPost operation.
     * @callback module:api/DefaultApi~metadataUpdateJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing custom metadata field.
     * @param {module:model/MetadataTemplate} body 
     * @param {module:api/DefaultApi~metadataUpdateJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataInfo}
     */
    metadataUpdateJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling metadataUpdateJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = MetadataInfo;
      return this.apiClient.callApi(
        '/metadata/update.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectsAddJsonPost operation.
     * @callback module:api/DefaultApi~rejectsAddJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RejectsAddResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an email to your email rejection blacklist. Addresses that you add manually will never expire and there is no reputation penalty for removing them from your blacklist. Attempting to blacklist an address that has been whitelisted will have no effect.
     * @param {module:model/RejectsAdd} body 
     * @param {module:api/DefaultApi~rejectsAddJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RejectsAddResponse}
     */
    rejectsAddJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rejectsAddJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RejectsAddResponse;
      return this.apiClient.callApi(
        '/rejects/add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectsDeleteJsonPost operation.
     * @callback module:api/DefaultApi~rejectsDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RejectsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an email rejection. There is no limit to how many rejections you can remove from your blacklist, but keep in mind that each deletion has an affect on your reputation.
     * @param {module:model/RejectsDelete} body 
     * @param {module:api/DefaultApi~rejectsDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RejectsDeleteResponse}
     */
    rejectsDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rejectsDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RejectsDeleteResponse;
      return this.apiClient.callApi(
        '/rejects/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectsListJsonPost operation.
     * @callback module:api/DefaultApi~rejectsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RejectsListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves your email rejection blacklist. You can provide an email address to limit the results. Returns up to 1000 results. By default, entries that have expired are excluded from the results; set include_expired to true to include them.
     * @param {module:model/RejectsList} body 
     * @param {module:api/DefaultApi~rejectsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RejectsListResponseInner>}
     */
    rejectsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rejectsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [RejectsListResponseInner];
      return this.apiClient.callApi(
        '/rejects/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersAddDomainJsonPost operation.
     * @callback module:api/DefaultApi~sendersAddDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderDomainInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a sender domain to your account. Sender domains are added automatically as you send, but you can use this call to add them ahead of time.
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~sendersAddDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderDomainInfo}
     */
    sendersAddDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersAddDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SenderDomainInfo;
      return this.apiClient.callApi(
        '/senders/add-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersCheckDomainJsonPost operation.
     * @callback module:api/DefaultApi~sendersCheckDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderDomainInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the SPF and DKIM settings for a domain. If you haven't already added this domain to your account, it will be added automatically.
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~sendersCheckDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderDomainInfo}
     */
    sendersCheckDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersCheckDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SenderDomainInfo;
      return this.apiClient.callApi(
        '/senders/check-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersDomainsJsonPost operation.
     * @callback module:api/DefaultApi~sendersDomainsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SendersDomainsResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the sender domains that have been added to this account.
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~sendersDomainsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SendersDomainsResponseInner>}
     */
    sendersDomainsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersDomainsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SendersDomainsResponseInner];
      return this.apiClient.callApi(
        '/senders/domains.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersInfoJsonPost operation.
     * @callback module:api/DefaultApi~sendersInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendersInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return more detailed information about a single sender, including aggregates of recent stats
     * @param {module:model/SenderAddress} body 
     * @param {module:api/DefaultApi~sendersInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendersInfoResponse}
     */
    sendersInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SendersInfoResponse;
      return this.apiClient.callApi(
        '/senders/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersListJsonPost operation.
     * @callback module:api/DefaultApi~sendersListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RejectsListResponseInnerSender>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the senders that have tried to use this account.
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~sendersListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RejectsListResponseInnerSender>}
     */
    sendersListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [RejectsListResponseInnerSender];
      return this.apiClient.callApi(
        '/senders/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersTimeSeriesJsonPost operation.
     * @callback module:api/DefaultApi~sendersTimeSeriesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeSeriesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the recent history (hourly stats for the last 30 days) for a sender
     * @param {module:model/SenderAddress} body 
     * @param {module:api/DefaultApi~sendersTimeSeriesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeSeriesInner>}
     */
    sendersTimeSeriesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersTimeSeriesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TimeSeriesInner];
      return this.apiClient.callApi(
        '/senders/time-series.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendersVerifyDomainJsonPost operation.
     * @callback module:api/DefaultApi~sendersVerifyDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendersVerifyDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a verification email in order to verify ownership of a domain. Domain verification is an optional step to confirm ownership of a domain. Once a domain has been verified in a Mandrill account, other accounts may not have their messages signed by that domain unless they also verify the domain. This prevents other Mandrill accounts from sending mail signed by your domain.
     * @param {module:model/SendersVerifyDomain} body 
     * @param {module:api/DefaultApi~sendersVerifyDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendersVerifyDomainResponse}
     */
    sendersVerifyDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendersVerifyDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SendersVerifyDomainResponse;
      return this.apiClient.callApi(
        '/senders/verify-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsAddJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsAddJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubaccountInfo2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new subaccount
     * @param {module:model/SubaccountInfo} body 
     * @param {module:api/DefaultApi~subaccountsAddJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubaccountInfo2}
     */
    subaccountsAddJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsAddJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubaccountInfo2;
      return this.apiClient.callApi(
        '/subaccounts/add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsDeleteJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubaccountInfo2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing subaccount. Any email related to the subaccount will be saved, but stats will be removed and any future sending calls to this subaccount will fail.
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~subaccountsDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubaccountInfo2}
     */
    subaccountsDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubaccountInfo2;
      return this.apiClient.callApi(
        '/subaccounts/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsInfoJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubaccountsInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given the ID of an existing subaccount, return the data about it
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~subaccountsInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubaccountsInfoResponse}
     */
    subaccountsInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubaccountsInfoResponse;
      return this.apiClient.callApi(
        '/subaccounts/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsListJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubaccountsListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of subaccounts defined for the account, optionally filtered by a prefix
     * @param {module:model/UrlKey} body 
     * @param {module:api/DefaultApi~subaccountsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubaccountsListResponseInner>}
     */
    subaccountsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SubaccountsListResponseInner];
      return this.apiClient.callApi(
        '/subaccounts/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsPauseJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsPauseJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubaccountInfo2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause a subaccount's sending. Any future emails delivered to this subaccount will be queued for a maximum of 3 days until the subaccount is resumed.
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~subaccountsPauseJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubaccountInfo2}
     */
    subaccountsPauseJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsPauseJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubaccountInfo2;
      return this.apiClient.callApi(
        '/subaccounts/pause.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsResumeJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsResumeJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubaccountInfo2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume a paused subaccount's sending
     * @param {module:model/Id} body 
     * @param {module:api/DefaultApi~subaccountsResumeJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubaccountInfo2}
     */
    subaccountsResumeJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsResumeJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubaccountInfo2;
      return this.apiClient.callApi(
        '/subaccounts/resume.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsUpdateJsonPost operation.
     * @callback module:api/DefaultApi~subaccountsUpdateJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubaccountInfo2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing subaccount
     * @param {module:model/SubaccountInfo} body 
     * @param {module:api/DefaultApi~subaccountsUpdateJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubaccountInfo2}
     */
    subaccountsUpdateJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsUpdateJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubaccountInfo2;
      return this.apiClient.callApi(
        '/subaccounts/update.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsAllTimeSeriesJsonPost operation.
     * @callback module:api/DefaultApi~tagsAllTimeSeriesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeseriesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the recent history (hourly stats for the last 30 days) for all tags
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~tagsAllTimeSeriesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeseriesInner>}
     */
    tagsAllTimeSeriesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tagsAllTimeSeriesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TimeseriesInner];
      return this.apiClient.callApi(
        '/tags/all-time-series.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDeleteJsonPost operation.
     * @callback module:api/DefaultApi~tagsDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a tag permanently. Deleting a tag removes the tag from any messages that have been sent, and also deletes the tag's stats. There is no way to undo this operation, so use it carefully.
     * @param {module:model/TagKey} body 
     * @param {module:api/DefaultApi~tagsDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagsDeleteResponse}
     */
    tagsDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tagsDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TagsDeleteResponse;
      return this.apiClient.callApi(
        '/tags/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsInfoJsonPost operation.
     * @callback module:api/DefaultApi~tagsInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagsInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return more detailed information about a single tag, including aggregates of recent stats
     * @param {module:model/TagKey} body 
     * @param {module:api/DefaultApi~tagsInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagsInfoResponse}
     */
    tagsInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tagsInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TagsInfoResponse;
      return this.apiClient.callApi(
        '/tags/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsListJsonPost operation.
     * @callback module:api/DefaultApi~tagsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all of the user-defined tag information
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~tagsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsListResponseInner>}
     */
    tagsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tagsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsListResponseInner];
      return this.apiClient.callApi(
        '/tags/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTimeSeriesJsonPost operation.
     * @callback module:api/DefaultApi~tagsTimeSeriesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeseriesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the recent history (hourly stats for the last 30 days) for a tag
     * @param {module:model/TagKey} body 
     * @param {module:api/DefaultApi~tagsTimeSeriesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeseriesInner>}
     */
    tagsTimeSeriesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tagsTimeSeriesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TimeseriesInner];
      return this.apiClient.callApi(
        '/tags/time-series.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesAddJsonPost operation.
     * @callback module:api/DefaultApi~templatesAddJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new template
     * @param {module:model/Template} body 
     * @param {module:api/DefaultApi~templatesAddJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailed}
     */
    templatesAddJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesAddJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplateDetailed;
      return this.apiClient.callApi(
        '/templates/add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesDeleteJsonPost operation.
     * @callback module:api/DefaultApi~templatesDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * @param {module:model/Name} body 
     * @param {module:api/DefaultApi~templatesDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailed}
     */
    templatesDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplateDetailed;
      return this.apiClient.callApi(
        '/templates/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesInfoJsonPost operation.
     * @callback module:api/DefaultApi~templatesInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information for an existing template
     * @param {module:model/Name} body 
     * @param {module:api/DefaultApi~templatesInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailed}
     */
    templatesInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplateDetailed;
      return this.apiClient.callApi(
        '/templates/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesListJsonPost operation.
     * @callback module:api/DefaultApi~templatesListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TemplatesListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of all the templates available to this user
     * @param {module:model/TemplatesList} body 
     * @param {module:api/DefaultApi~templatesListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TemplatesListResponseInner>}
     */
    templatesListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TemplatesListResponseInner];
      return this.apiClient.callApi(
        '/templates/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesPublishJsonPost operation.
     * @callback module:api/DefaultApi~templatesPublishJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish the content for the template. Any new messages sent using this template will start using the content that was previously in draft.
     * @param {module:model/Name} body 
     * @param {module:api/DefaultApi~templatesPublishJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailed}
     */
    templatesPublishJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesPublishJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplateDetailed;
      return this.apiClient.callApi(
        '/templates/publish.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesRenderJsonPost operation.
     * @callback module:api/DefaultApi~templatesRenderJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplatesRenderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inject content and optionally merge fields into a template, returning the HTML that results
     * @param {module:model/TemplatesRender} body 
     * @param {module:api/DefaultApi~templatesRenderJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplatesRenderResponse}
     */
    templatesRenderJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesRenderJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplatesRenderResponse;
      return this.apiClient.callApi(
        '/templates/render.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesTimeSeriesJsonPost operation.
     * @callback module:api/DefaultApi~templatesTimeSeriesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeSeriesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the recent history (hourly stats for the last 30 days) for a template
     * @param {module:model/Name} body 
     * @param {module:api/DefaultApi~templatesTimeSeriesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeSeriesInner>}
     */
    templatesTimeSeriesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesTimeSeriesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TimeSeriesInner];
      return this.apiClient.callApi(
        '/templates/time-series.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesUpdateJsonPost operation.
     * @callback module:api/DefaultApi~templatesUpdateJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the code for an existing template. If null is provided for any fields, the values will remain unchanged.
     * @param {module:model/Template} body 
     * @param {module:api/DefaultApi~templatesUpdateJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailed}
     */
    templatesUpdateJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesUpdateJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TemplateDetailed;
      return this.apiClient.callApi(
        '/templates/update.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsAddTrackingDomainJsonPost operation.
     * @callback module:api/DefaultApi~urlsAddTrackingDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingDomainStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tracking domain to your account
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~urlsAddTrackingDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingDomainStatus}
     */
    urlsAddTrackingDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling urlsAddTrackingDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TrackingDomainStatus;
      return this.apiClient.callApi(
        '/urls/add-tracking-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsCheckTrackingDomainJsonPost operation.
     * @callback module:api/DefaultApi~urlsCheckTrackingDomainJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingDomainStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the CNAME settings for a tracking domain. The domain must have been added already with the add-tracking-domain call
     * @param {module:model/Domain} body 
     * @param {module:api/DefaultApi~urlsCheckTrackingDomainJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingDomainStatus}
     */
    urlsCheckTrackingDomainJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling urlsCheckTrackingDomainJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TrackingDomainStatus;
      return this.apiClient.callApi(
        '/urls/check-tracking-domain.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsListJsonPost operation.
     * @callback module:api/DefaultApi~urlsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UrlInfosInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the 100 most clicked URLs
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~urlsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UrlInfosInner>}
     */
    urlsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling urlsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UrlInfosInner];
      return this.apiClient.callApi(
        '/urls/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsSearchJsonPost operation.
     * @callback module:api/DefaultApi~urlsSearchJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UrlInfosInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 100 most clicked URLs that match the search query given
     * @param {module:model/UrlKey} body 
     * @param {module:api/DefaultApi~urlsSearchJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UrlInfosInner>}
     */
    urlsSearchJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling urlsSearchJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UrlInfosInner];
      return this.apiClient.callApi(
        '/urls/search.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsTimeSeriesJsonPost operation.
     * @callback module:api/DefaultApi~urlsTimeSeriesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UrlsTimeSeriesResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the recent history (hourly stats for the last 30 days) for a url
     * @param {module:model/UrlsTimeSeries} body 
     * @param {module:api/DefaultApi~urlsTimeSeriesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UrlsTimeSeriesResponseInner>}
     */
    urlsTimeSeriesJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling urlsTimeSeriesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UrlsTimeSeriesResponseInner];
      return this.apiClient.callApi(
        '/urls/time-series.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsTrackingDomainsJsonPost operation.
     * @callback module:api/DefaultApi~urlsTrackingDomainsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UrlsTrackingDomainsResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of tracking domains set up for this account
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~urlsTrackingDomainsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UrlsTrackingDomainsResponseInner>}
     */
    urlsTrackingDomainsJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling urlsTrackingDomainsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UrlsTrackingDomainsResponseInner];
      return this.apiClient.callApi(
        '/urls/tracking-domains.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersInfoJsonPost operation.
     * @callback module:api/DefaultApi~usersInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the information about the API-connected user
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~usersInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersInfoResponse}
     */
    usersInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UsersInfoResponse;
      return this.apiClient.callApi(
        '/users/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPing2JsonPost operation.
     * @callback module:api/DefaultApi~usersPing2JsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPing2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate an API key and respond to a ping (anal JSON parser version)
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~usersPing2JsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPing2Response}
     */
    usersPing2JsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPing2JsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UsersPing2Response;
      return this.apiClient.callApi(
        '/users/ping2.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPingJsonPost operation.
     * @callback module:api/DefaultApi~usersPingJsonPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate an API key and respond to a ping
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~usersPingJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPingJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPingJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/ping.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSendersJsonPost operation.
     * @callback module:api/DefaultApi~usersSendersJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RejectsListResponseInnerSender>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the senders that have tried to use this account, both verified and unverified
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~usersSendersJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RejectsListResponseInnerSender>}
     */
    usersSendersJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersSendersJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [RejectsListResponseInnerSender];
      return this.apiClient.callApi(
        '/users/senders.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksAddJsonPost operation.
     * @callback module:api/DefaultApi~webhooksAddJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new webhook
     * @param {module:model/WebhooksAdd} body 
     * @param {module:api/DefaultApi~webhooksAddJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    webhooksAddJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhooksAddJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/webhooks/add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksDeleteJsonPost operation.
     * @callback module:api/DefaultApi~webhooksDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing webhook
     * @param {module:model/WebhookKey} body 
     * @param {module:api/DefaultApi~webhooksDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    webhooksDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhooksDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/webhooks/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksInfoJsonPost operation.
     * @callback module:api/DefaultApi~webhooksInfoJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given the ID of an existing webhook, return the data about it
     * @param {module:model/WebhookKey} body 
     * @param {module:api/DefaultApi~webhooksInfoJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    webhooksInfoJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhooksInfoJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/webhooks/info.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksListJsonPost operation.
     * @callback module:api/DefaultApi~webhooksListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebhooksListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of all webhooks defined on the account
     * @param {module:model/ApiKey} body 
     * @param {module:api/DefaultApi~webhooksListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebhooksListResponseInner>}
     */
    webhooksListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhooksListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WebhooksListResponseInner];
      return this.apiClient.callApi(
        '/webhooks/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksUpdateJsonPost operation.
     * @callback module:api/DefaultApi~webhooksUpdateJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing webhook
     * @param {module:model/WebhooksUpdate} body 
     * @param {module:api/DefaultApi~webhooksUpdateJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    webhooksUpdateJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhooksUpdateJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/webhooks/update.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the whitelistsAddJsonPost operation.
     * @callback module:api/DefaultApi~whitelistsAddJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhitelistsAddResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an email to your email rejection whitelist. If the address is currently on your blacklist, that blacklist entry will be removed automatically.
     * @param {module:model/Email} body 
     * @param {module:api/DefaultApi~whitelistsAddJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhitelistsAddResponse}
     */
    whitelistsAddJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling whitelistsAddJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WhitelistsAddResponse;
      return this.apiClient.callApi(
        '/whitelists/add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the whitelistsDeleteJsonPost operation.
     * @callback module:api/DefaultApi~whitelistsDeleteJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhitelistsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an email address from the whitelist.
     * @param {module:model/Email} body 
     * @param {module:api/DefaultApi~whitelistsDeleteJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhitelistsDeleteResponse}
     */
    whitelistsDeleteJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling whitelistsDeleteJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WhitelistsDeleteResponse;
      return this.apiClient.callApi(
        '/whitelists/delete.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the whitelistsListJsonPost operation.
     * @callback module:api/DefaultApi~whitelistsListJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WhitelistsListResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves your email rejection whitelist. You can provide an email address or search prefix to limit the results. Returns up to 1000 results.
     * @param {module:model/Email} body 
     * @param {module:api/DefaultApi~whitelistsListJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WhitelistsListResponseInner>}
     */
    whitelistsListJsonPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling whitelistsListJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WhitelistsListResponseInner];
      return this.apiClient.callApi(
        '/whitelists/list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
