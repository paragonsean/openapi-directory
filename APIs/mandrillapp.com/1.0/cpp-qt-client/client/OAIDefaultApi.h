/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_key.h"
#include "OAIDomain.h"
#include "OAIEmail.h"
#include "OAIExports_activity.h"
#include "OAIExports_info_response.h"
#include "OAIExports_list_response_inner.h"
#include "OAIExports_satus.h"
#include "OAIId.h"
#include "OAIInbound_add_route.h"
#include "OAIInbound_domains_response_inner.h"
#include "OAIInbound_info.h"
#include "OAIInbound_routes_response_inner.h"
#include "OAIInbound_send_raw.h"
#include "OAIInbound_send_raw_response_inner.h"
#include "OAIInbound_update_route.h"
#include "OAIIp.h"
#include "OAIIp_domain.h"
#include "OAIIp_info.h"
#include "OAIIps_check_custom_dns_response.h"
#include "OAIIps_delete_pool_response.h"
#include "OAIIps_delete_response.h"
#include "OAIIps_list_pools_response_inner.h"
#include "OAIIps_list_pools_response_inner_ips_inner.h"
#include "OAIIps_pool.h"
#include "OAIIps_pool_key.h"
#include "OAIIps_provision.h"
#include "OAIIps_provision_response.h"
#include "OAIIps_set_pool.h"
#include "OAIMessage_send_status_inner.h"
#include "OAIMessages_cancel_scheduled.h"
#include "OAIMessages_content_response.h"
#include "OAIMessages_info_response.h"
#include "OAIMessages_list_scheduled.h"
#include "OAIMessages_list_scheduled_response_inner.h"
#include "OAIMessages_parse.h"
#include "OAIMessages_parse_response.h"
#include "OAIMessages_reschedule.h"
#include "OAIMessages_search.h"
#include "OAIMessages_search_response_inner.h"
#include "OAIMessages_search_time_series.h"
#include "OAIMessages_send.h"
#include "OAIMessages_send_raw.h"
#include "OAIMessages_send_template.h"
#include "OAIMetadata_info.h"
#include "OAIMetadata_list_response_inner.h"
#include "OAIMetadata_template.h"
#include "OAIName.h"
#include "OAINotify_email.h"
#include "OAIRejects_add.h"
#include "OAIRejects_add_response.h"
#include "OAIRejects_delete.h"
#include "OAIRejects_delete_response.h"
#include "OAIRejects_list.h"
#include "OAIRejects_list_response_inner.h"
#include "OAIRejects_list_response_inner_sender.h"
#include "OAIRoute.h"
#include "OAISchedulingchange_info.h"
#include "OAISender_address.h"
#include "OAISender_domain_info.h"
#include "OAISenders_domains_response_inner.h"
#include "OAISenders_info_response.h"
#include "OAISenders_verify_domain.h"
#include "OAISenders_verify_domain_response.h"
#include "OAISubaccount_info.h"
#include "OAISubaccount_info2.h"
#include "OAISubaccounts_info_response.h"
#include "OAISubaccounts_list_response_inner.h"
#include "OAITag_key.h"
#include "OAITags_delete_response.h"
#include "OAITags_info_response.h"
#include "OAITags_list_response_inner.h"
#include "OAITemplate.h"
#include "OAITemplate_detailed.h"
#include "OAITemplates_list.h"
#include "OAITemplates_list_response_inner.h"
#include "OAITemplates_render.h"
#include "OAITemplates_render_response.h"
#include "OAITime_series_inner.h"
#include "OAITimeseries_inner.h"
#include "OAITracking_domain_status.h"
#include "OAIUrl_infos_inner.h"
#include "OAIUrl_key.h"
#include "OAIUrls_time_series.h"
#include "OAIUrls_time_series_response_inner.h"
#include "OAIUrls_tracking_domains_response_inner.h"
#include "OAIUsers_info_response.h"
#include "OAIUsers_ping2_response.h"
#include "OAIWebhook.h"
#include "OAIWebhook_key.h"
#include "OAIWebhooks_add.h"
#include "OAIWebhooks_list_response_inner.h"
#include "OAIWebhooks_update.h"
#include "OAIWhitelists_add_response.h"
#include "OAIWhitelists_delete_response.h"
#include "OAIWhitelists_list_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIExports_activity [required]
    */
    virtual void exportsActivityJsonPost(const OAIExports_activity &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void exportsInfoJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void exportsListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAINotify_email [required]
    */
    virtual void exportsRejectsJsonPost(const OAINotify_email &body);

    /**
    * @param[in]  body OAINotify_email [required]
    */
    virtual void exportsWhitelistJsonPost(const OAINotify_email &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void inboundAddDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIInbound_add_route [required]
    */
    virtual void inboundAddRouteJsonPost(const OAIInbound_add_route &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void inboundCheckDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void inboundDeleteDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void inboundDeleteRouteJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void inboundDomainsJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void inboundRoutesJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIInbound_send_raw [required]
    */
    virtual void inboundSendRawJsonPost(const OAIInbound_send_raw &body);

    /**
    * @param[in]  body OAIInbound_update_route [required]
    */
    virtual void inboundUpdateRouteJsonPost(const OAIInbound_update_route &body);

    /**
    * @param[in]  body OAIIp [required]
    */
    virtual void ipsCancelWarmupJsonPost(const OAIIp &body);

    /**
    * @param[in]  body OAIIp_domain [required]
    */
    virtual void ipsCheckCustomDnsJsonPost(const OAIIp_domain &body);

    /**
    * @param[in]  body OAIIps_pool_key [required]
    */
    virtual void ipsCreatePoolJsonPost(const OAIIps_pool_key &body);

    /**
    * @param[in]  body OAIIp [required]
    */
    virtual void ipsDeleteJsonPost(const OAIIp &body);

    /**
    * @param[in]  body OAIIps_pool_key [required]
    */
    virtual void ipsDeletePoolJsonPost(const OAIIps_pool_key &body);

    /**
    * @param[in]  body OAIIp [required]
    */
    virtual void ipsInfoJsonPost(const OAIIp &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void ipsListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void ipsListPoolsJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIIps_pool_key [required]
    */
    virtual void ipsPoolInfoJsonPost(const OAIIps_pool_key &body);

    /**
    * @param[in]  body OAIIps_provision [required]
    */
    virtual void ipsProvisionJsonPost(const OAIIps_provision &body);

    /**
    * @param[in]  body OAIIp_domain [required]
    */
    virtual void ipsSetCustomDnsJsonPost(const OAIIp_domain &body);

    /**
    * @param[in]  body OAIIps_set_pool [required]
    */
    virtual void ipsSetPoolJsonPost(const OAIIps_set_pool &body);

    /**
    * @param[in]  body OAIIp [required]
    */
    virtual void ipsStartWarmupJsonPost(const OAIIp &body);

    /**
    * @param[in]  body OAIMessages_cancel_scheduled [required]
    */
    virtual void messagesCancelScheduledJsonPost(const OAIMessages_cancel_scheduled &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void messagesContentJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void messagesInfoJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIMessages_list_scheduled [required]
    */
    virtual void messagesListScheduledJsonPost(const OAIMessages_list_scheduled &body);

    /**
    * @param[in]  body OAIMessages_parse [required]
    */
    virtual void messagesParseJsonPost(const OAIMessages_parse &body);

    /**
    * @param[in]  body OAIMessages_reschedule [required]
    */
    virtual void messagesRescheduleJsonPost(const OAIMessages_reschedule &body);

    /**
    * @param[in]  body OAIMessages_search [required]
    */
    virtual void messagesSearchJsonPost(const OAIMessages_search &body);

    /**
    * @param[in]  body OAIMessages_search_time_series [required]
    */
    virtual void messagesSearchTimeSeriesJsonPost(const OAIMessages_search_time_series &body);

    /**
    * @param[in]  body OAIMessages_send [required]
    */
    virtual void messagesSendJsonPost(const OAIMessages_send &body);

    /**
    * @param[in]  body OAIMessages_send_raw [required]
    */
    virtual void messagesSendRawJsonPost(const OAIMessages_send_raw &body);

    /**
    * @param[in]  body OAIMessages_send_template [required]
    */
    virtual void messagesSendTemplateJsonPost(const OAIMessages_send_template &body);

    /**
    * @param[in]  body OAIMetadata_template [required]
    */
    virtual void metadataAddJsonPost(const OAIMetadata_template &body);

    /**
    * @param[in]  body OAIName [required]
    */
    virtual void metadataDeleteJsonPost(const OAIName &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void metadataListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIMetadata_template [required]
    */
    virtual void metadataUpdateJsonPost(const OAIMetadata_template &body);

    /**
    * @param[in]  body OAIRejects_add [required]
    */
    virtual void rejectsAddJsonPost(const OAIRejects_add &body);

    /**
    * @param[in]  body OAIRejects_delete [required]
    */
    virtual void rejectsDeleteJsonPost(const OAIRejects_delete &body);

    /**
    * @param[in]  body OAIRejects_list [required]
    */
    virtual void rejectsListJsonPost(const OAIRejects_list &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void sendersAddDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void sendersCheckDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void sendersDomainsJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAISender_address [required]
    */
    virtual void sendersInfoJsonPost(const OAISender_address &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void sendersListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAISender_address [required]
    */
    virtual void sendersTimeSeriesJsonPost(const OAISender_address &body);

    /**
    * @param[in]  body OAISenders_verify_domain [required]
    */
    virtual void sendersVerifyDomainJsonPost(const OAISenders_verify_domain &body);

    /**
    * @param[in]  body OAISubaccount_info [required]
    */
    virtual void subaccountsAddJsonPost(const OAISubaccount_info &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void subaccountsDeleteJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void subaccountsInfoJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIUrl_key [required]
    */
    virtual void subaccountsListJsonPost(const OAIUrl_key &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void subaccountsPauseJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAIId [required]
    */
    virtual void subaccountsResumeJsonPost(const OAIId &body);

    /**
    * @param[in]  body OAISubaccount_info [required]
    */
    virtual void subaccountsUpdateJsonPost(const OAISubaccount_info &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void tagsAllTimeSeriesJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAITag_key [required]
    */
    virtual void tagsDeleteJsonPost(const OAITag_key &body);

    /**
    * @param[in]  body OAITag_key [required]
    */
    virtual void tagsInfoJsonPost(const OAITag_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void tagsListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAITag_key [required]
    */
    virtual void tagsTimeSeriesJsonPost(const OAITag_key &body);

    /**
    * @param[in]  body OAITemplate [required]
    */
    virtual void templatesAddJsonPost(const OAITemplate &body);

    /**
    * @param[in]  body OAIName [required]
    */
    virtual void templatesDeleteJsonPost(const OAIName &body);

    /**
    * @param[in]  body OAIName [required]
    */
    virtual void templatesInfoJsonPost(const OAIName &body);

    /**
    * @param[in]  body OAITemplates_list [required]
    */
    virtual void templatesListJsonPost(const OAITemplates_list &body);

    /**
    * @param[in]  body OAIName [required]
    */
    virtual void templatesPublishJsonPost(const OAIName &body);

    /**
    * @param[in]  body OAITemplates_render [required]
    */
    virtual void templatesRenderJsonPost(const OAITemplates_render &body);

    /**
    * @param[in]  body OAIName [required]
    */
    virtual void templatesTimeSeriesJsonPost(const OAIName &body);

    /**
    * @param[in]  body OAITemplate [required]
    */
    virtual void templatesUpdateJsonPost(const OAITemplate &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void urlsAddTrackingDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIDomain [required]
    */
    virtual void urlsCheckTrackingDomainJsonPost(const OAIDomain &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void urlsListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIUrl_key [required]
    */
    virtual void urlsSearchJsonPost(const OAIUrl_key &body);

    /**
    * @param[in]  body OAIUrls_time_series [required]
    */
    virtual void urlsTimeSeriesJsonPost(const OAIUrls_time_series &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void urlsTrackingDomainsJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void usersInfoJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void usersPing2JsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void usersPingJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void usersSendersJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIWebhooks_add [required]
    */
    virtual void webhooksAddJsonPost(const OAIWebhooks_add &body);

    /**
    * @param[in]  body OAIWebhook_key [required]
    */
    virtual void webhooksDeleteJsonPost(const OAIWebhook_key &body);

    /**
    * @param[in]  body OAIWebhook_key [required]
    */
    virtual void webhooksInfoJsonPost(const OAIWebhook_key &body);

    /**
    * @param[in]  body OAIApi_key [required]
    */
    virtual void webhooksListJsonPost(const OAIApi_key &body);

    /**
    * @param[in]  body OAIWebhooks_update [required]
    */
    virtual void webhooksUpdateJsonPost(const OAIWebhooks_update &body);

    /**
    * @param[in]  body OAIEmail [required]
    */
    virtual void whitelistsAddJsonPost(const OAIEmail &body);

    /**
    * @param[in]  body OAIEmail [required]
    */
    virtual void whitelistsDeleteJsonPost(const OAIEmail &body);

    /**
    * @param[in]  body OAIEmail [required]
    */
    virtual void whitelistsListJsonPost(const OAIEmail &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportsActivityJsonPostCallback(OAIHttpRequestWorker *worker);
    void exportsInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void exportsListJsonPostCallback(OAIHttpRequestWorker *worker);
    void exportsRejectsJsonPostCallback(OAIHttpRequestWorker *worker);
    void exportsWhitelistJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundAddDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundAddRouteJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundCheckDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundDeleteDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundDeleteRouteJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundDomainsJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundRoutesJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundSendRawJsonPostCallback(OAIHttpRequestWorker *worker);
    void inboundUpdateRouteJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsCancelWarmupJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsCheckCustomDnsJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsCreatePoolJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsDeletePoolJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsListJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsListPoolsJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsPoolInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsProvisionJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsSetCustomDnsJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsSetPoolJsonPostCallback(OAIHttpRequestWorker *worker);
    void ipsStartWarmupJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesCancelScheduledJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesContentJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesListScheduledJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesParseJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesRescheduleJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesSearchJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesSearchTimeSeriesJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesSendJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesSendRawJsonPostCallback(OAIHttpRequestWorker *worker);
    void messagesSendTemplateJsonPostCallback(OAIHttpRequestWorker *worker);
    void metadataAddJsonPostCallback(OAIHttpRequestWorker *worker);
    void metadataDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void metadataListJsonPostCallback(OAIHttpRequestWorker *worker);
    void metadataUpdateJsonPostCallback(OAIHttpRequestWorker *worker);
    void rejectsAddJsonPostCallback(OAIHttpRequestWorker *worker);
    void rejectsDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void rejectsListJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersAddDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersCheckDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersDomainsJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersListJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersTimeSeriesJsonPostCallback(OAIHttpRequestWorker *worker);
    void sendersVerifyDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsAddJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsListJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsPauseJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsResumeJsonPostCallback(OAIHttpRequestWorker *worker);
    void subaccountsUpdateJsonPostCallback(OAIHttpRequestWorker *worker);
    void tagsAllTimeSeriesJsonPostCallback(OAIHttpRequestWorker *worker);
    void tagsDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void tagsInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void tagsListJsonPostCallback(OAIHttpRequestWorker *worker);
    void tagsTimeSeriesJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesAddJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesListJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesPublishJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesRenderJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesTimeSeriesJsonPostCallback(OAIHttpRequestWorker *worker);
    void templatesUpdateJsonPostCallback(OAIHttpRequestWorker *worker);
    void urlsAddTrackingDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void urlsCheckTrackingDomainJsonPostCallback(OAIHttpRequestWorker *worker);
    void urlsListJsonPostCallback(OAIHttpRequestWorker *worker);
    void urlsSearchJsonPostCallback(OAIHttpRequestWorker *worker);
    void urlsTimeSeriesJsonPostCallback(OAIHttpRequestWorker *worker);
    void urlsTrackingDomainsJsonPostCallback(OAIHttpRequestWorker *worker);
    void usersInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void usersPing2JsonPostCallback(OAIHttpRequestWorker *worker);
    void usersPingJsonPostCallback(OAIHttpRequestWorker *worker);
    void usersSendersJsonPostCallback(OAIHttpRequestWorker *worker);
    void webhooksAddJsonPostCallback(OAIHttpRequestWorker *worker);
    void webhooksDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void webhooksInfoJsonPostCallback(OAIHttpRequestWorker *worker);
    void webhooksListJsonPostCallback(OAIHttpRequestWorker *worker);
    void webhooksUpdateJsonPostCallback(OAIHttpRequestWorker *worker);
    void whitelistsAddJsonPostCallback(OAIHttpRequestWorker *worker);
    void whitelistsDeleteJsonPostCallback(OAIHttpRequestWorker *worker);
    void whitelistsListJsonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportsActivityJsonPostSignal(OAIExports_satus summary);
    void exportsInfoJsonPostSignal(OAIExports_info_response summary);
    void exportsListJsonPostSignal(QList<OAIExports_list_response_inner> summary);
    void exportsRejectsJsonPostSignal(OAIExports_satus summary);
    void exportsWhitelistJsonPostSignal(OAIExports_satus summary);
    void inboundAddDomainJsonPostSignal(OAIInbound_info summary);
    void inboundAddRouteJsonPostSignal(OAIRoute summary);
    void inboundCheckDomainJsonPostSignal(OAIInbound_info summary);
    void inboundDeleteDomainJsonPostSignal(OAIInbound_info summary);
    void inboundDeleteRouteJsonPostSignal(OAIRoute summary);
    void inboundDomainsJsonPostSignal(QList<OAIInbound_domains_response_inner> summary);
    void inboundRoutesJsonPostSignal(QList<OAIInbound_routes_response_inner> summary);
    void inboundSendRawJsonPostSignal(QList<OAIInbound_send_raw_response_inner> summary);
    void inboundUpdateRouteJsonPostSignal(OAIRoute summary);
    void ipsCancelWarmupJsonPostSignal(OAIIp_info summary);
    void ipsCheckCustomDnsJsonPostSignal(OAIIps_check_custom_dns_response summary);
    void ipsCreatePoolJsonPostSignal(OAIIps_pool summary);
    void ipsDeleteJsonPostSignal(OAIIps_delete_response summary);
    void ipsDeletePoolJsonPostSignal(OAIIps_delete_pool_response summary);
    void ipsInfoJsonPostSignal(OAIIp_info summary);
    void ipsListJsonPostSignal(QList<OAIIps_list_pools_response_inner_ips_inner> summary);
    void ipsListPoolsJsonPostSignal(QList<OAIIps_list_pools_response_inner> summary);
    void ipsPoolInfoJsonPostSignal(OAIIps_pool summary);
    void ipsProvisionJsonPostSignal(OAIIps_provision_response summary);
    void ipsSetCustomDnsJsonPostSignal(OAIIp_info summary);
    void ipsSetPoolJsonPostSignal(OAIIp_info summary);
    void ipsStartWarmupJsonPostSignal(OAIIp_info summary);
    void messagesCancelScheduledJsonPostSignal(OAISchedulingchange_info summary);
    void messagesContentJsonPostSignal(OAIMessages_content_response summary);
    void messagesInfoJsonPostSignal(OAIMessages_info_response summary);
    void messagesListScheduledJsonPostSignal(QList<OAIMessages_list_scheduled_response_inner> summary);
    void messagesParseJsonPostSignal(OAIMessages_parse_response summary);
    void messagesRescheduleJsonPostSignal(OAISchedulingchange_info summary);
    void messagesSearchJsonPostSignal(QList<OAIMessages_search_response_inner> summary);
    void messagesSearchTimeSeriesJsonPostSignal(QList<OAITimeseries_inner> summary);
    void messagesSendJsonPostSignal(QList<OAIMessage_send_status_inner> summary);
    void messagesSendRawJsonPostSignal(QList<OAIMessage_send_status_inner> summary);
    void messagesSendTemplateJsonPostSignal(QList<OAIMessage_send_status_inner> summary);
    void metadataAddJsonPostSignal(OAIMetadata_info summary);
    void metadataDeleteJsonPostSignal(OAIMetadata_info summary);
    void metadataListJsonPostSignal(QList<OAIMetadata_list_response_inner> summary);
    void metadataUpdateJsonPostSignal(OAIMetadata_info summary);
    void rejectsAddJsonPostSignal(OAIRejects_add_response summary);
    void rejectsDeleteJsonPostSignal(OAIRejects_delete_response summary);
    void rejectsListJsonPostSignal(QList<OAIRejects_list_response_inner> summary);
    void sendersAddDomainJsonPostSignal(OAISender_domain_info summary);
    void sendersCheckDomainJsonPostSignal(OAISender_domain_info summary);
    void sendersDomainsJsonPostSignal(QList<OAISenders_domains_response_inner> summary);
    void sendersInfoJsonPostSignal(OAISenders_info_response summary);
    void sendersListJsonPostSignal(QList<OAIRejects_list_response_inner_sender> summary);
    void sendersTimeSeriesJsonPostSignal(QList<OAITime_series_inner> summary);
    void sendersVerifyDomainJsonPostSignal(OAISenders_verify_domain_response summary);
    void subaccountsAddJsonPostSignal(OAISubaccount_info2 summary);
    void subaccountsDeleteJsonPostSignal(OAISubaccount_info2 summary);
    void subaccountsInfoJsonPostSignal(OAISubaccounts_info_response summary);
    void subaccountsListJsonPostSignal(QList<OAISubaccounts_list_response_inner> summary);
    void subaccountsPauseJsonPostSignal(OAISubaccount_info2 summary);
    void subaccountsResumeJsonPostSignal(OAISubaccount_info2 summary);
    void subaccountsUpdateJsonPostSignal(OAISubaccount_info2 summary);
    void tagsAllTimeSeriesJsonPostSignal(QList<OAITimeseries_inner> summary);
    void tagsDeleteJsonPostSignal(OAITags_delete_response summary);
    void tagsInfoJsonPostSignal(OAITags_info_response summary);
    void tagsListJsonPostSignal(QList<OAITags_list_response_inner> summary);
    void tagsTimeSeriesJsonPostSignal(QList<OAITimeseries_inner> summary);
    void templatesAddJsonPostSignal(OAITemplate_detailed summary);
    void templatesDeleteJsonPostSignal(OAITemplate_detailed summary);
    void templatesInfoJsonPostSignal(OAITemplate_detailed summary);
    void templatesListJsonPostSignal(QList<OAITemplates_list_response_inner> summary);
    void templatesPublishJsonPostSignal(OAITemplate_detailed summary);
    void templatesRenderJsonPostSignal(OAITemplates_render_response summary);
    void templatesTimeSeriesJsonPostSignal(QList<OAITime_series_inner> summary);
    void templatesUpdateJsonPostSignal(OAITemplate_detailed summary);
    void urlsAddTrackingDomainJsonPostSignal(OAITracking_domain_status summary);
    void urlsCheckTrackingDomainJsonPostSignal(OAITracking_domain_status summary);
    void urlsListJsonPostSignal(QList<OAIUrl_infos_inner> summary);
    void urlsSearchJsonPostSignal(QList<OAIUrl_infos_inner> summary);
    void urlsTimeSeriesJsonPostSignal(QList<OAIUrls_time_series_response_inner> summary);
    void urlsTrackingDomainsJsonPostSignal(QList<OAIUrls_tracking_domains_response_inner> summary);
    void usersInfoJsonPostSignal(OAIUsers_info_response summary);
    void usersPing2JsonPostSignal(OAIUsers_ping2_response summary);
    void usersPingJsonPostSignal();
    void usersSendersJsonPostSignal(QList<OAIRejects_list_response_inner_sender> summary);
    void webhooksAddJsonPostSignal(OAIWebhook summary);
    void webhooksDeleteJsonPostSignal(OAIWebhook summary);
    void webhooksInfoJsonPostSignal(OAIWebhook summary);
    void webhooksListJsonPostSignal(QList<OAIWebhooks_list_response_inner> summary);
    void webhooksUpdateJsonPostSignal(OAIWebhook summary);
    void whitelistsAddJsonPostSignal(OAIWhitelists_add_response summary);
    void whitelistsDeleteJsonPostSignal(OAIWhitelists_delete_response summary);
    void whitelistsListJsonPostSignal(QList<OAIWhitelists_list_response_inner> summary);


    void exportsActivityJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIExports_satus summary);
    void exportsInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIExports_info_response summary);
    void exportsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIExports_list_response_inner> summary);
    void exportsRejectsJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIExports_satus summary);
    void exportsWhitelistJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIExports_satus summary);
    void inboundAddDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIInbound_info summary);
    void inboundAddRouteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIRoute summary);
    void inboundCheckDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIInbound_info summary);
    void inboundDeleteDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIInbound_info summary);
    void inboundDeleteRouteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIRoute summary);
    void inboundDomainsJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbound_domains_response_inner> summary);
    void inboundRoutesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbound_routes_response_inner> summary);
    void inboundSendRawJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbound_send_raw_response_inner> summary);
    void inboundUpdateRouteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIRoute summary);
    void ipsCancelWarmupJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIp_info summary);
    void ipsCheckCustomDnsJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIps_check_custom_dns_response summary);
    void ipsCreatePoolJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIps_pool summary);
    void ipsDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIps_delete_response summary);
    void ipsDeletePoolJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIps_delete_pool_response summary);
    void ipsInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIp_info summary);
    void ipsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIIps_list_pools_response_inner_ips_inner> summary);
    void ipsListPoolsJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIIps_list_pools_response_inner> summary);
    void ipsPoolInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIps_pool summary);
    void ipsProvisionJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIps_provision_response summary);
    void ipsSetCustomDnsJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIp_info summary);
    void ipsSetPoolJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIp_info summary);
    void ipsStartWarmupJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIIp_info summary);
    void messagesCancelScheduledJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISchedulingchange_info summary);
    void messagesContentJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIMessages_content_response summary);
    void messagesInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIMessages_info_response summary);
    void messagesListScheduledJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessages_list_scheduled_response_inner> summary);
    void messagesParseJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIMessages_parse_response summary);
    void messagesRescheduleJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISchedulingchange_info summary);
    void messagesSearchJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessages_search_response_inner> summary);
    void messagesSearchTimeSeriesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeseries_inner> summary);
    void messagesSendJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage_send_status_inner> summary);
    void messagesSendRawJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage_send_status_inner> summary);
    void messagesSendTemplateJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessage_send_status_inner> summary);
    void metadataAddJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIMetadata_info summary);
    void metadataDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIMetadata_info summary);
    void metadataListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIMetadata_list_response_inner> summary);
    void metadataUpdateJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIMetadata_info summary);
    void rejectsAddJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIRejects_add_response summary);
    void rejectsDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIRejects_delete_response summary);
    void rejectsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIRejects_list_response_inner> summary);
    void sendersAddDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISender_domain_info summary);
    void sendersCheckDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISender_domain_info summary);
    void sendersDomainsJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAISenders_domains_response_inner> summary);
    void sendersInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISenders_info_response summary);
    void sendersListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIRejects_list_response_inner_sender> summary);
    void sendersTimeSeriesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITime_series_inner> summary);
    void sendersVerifyDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISenders_verify_domain_response summary);
    void subaccountsAddJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISubaccount_info2 summary);
    void subaccountsDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISubaccount_info2 summary);
    void subaccountsInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISubaccounts_info_response summary);
    void subaccountsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAISubaccounts_list_response_inner> summary);
    void subaccountsPauseJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISubaccount_info2 summary);
    void subaccountsResumeJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISubaccount_info2 summary);
    void subaccountsUpdateJsonPostSignalFull(OAIHttpRequestWorker *worker, OAISubaccount_info2 summary);
    void tagsAllTimeSeriesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeseries_inner> summary);
    void tagsDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITags_delete_response summary);
    void tagsInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITags_info_response summary);
    void tagsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_list_response_inner> summary);
    void tagsTimeSeriesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeseries_inner> summary);
    void templatesAddJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITemplate_detailed summary);
    void templatesDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITemplate_detailed summary);
    void templatesInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITemplate_detailed summary);
    void templatesListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITemplates_list_response_inner> summary);
    void templatesPublishJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITemplate_detailed summary);
    void templatesRenderJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITemplates_render_response summary);
    void templatesTimeSeriesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAITime_series_inner> summary);
    void templatesUpdateJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITemplate_detailed summary);
    void urlsAddTrackingDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITracking_domain_status summary);
    void urlsCheckTrackingDomainJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITracking_domain_status summary);
    void urlsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIUrl_infos_inner> summary);
    void urlsSearchJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIUrl_infos_inner> summary);
    void urlsTimeSeriesJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIUrls_time_series_response_inner> summary);
    void urlsTrackingDomainsJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIUrls_tracking_domains_response_inner> summary);
    void usersInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIUsers_info_response summary);
    void usersPing2JsonPostSignalFull(OAIHttpRequestWorker *worker, OAIUsers_ping2_response summary);
    void usersPingJsonPostSignalFull(OAIHttpRequestWorker *worker);
    void usersSendersJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIRejects_list_response_inner_sender> summary);
    void webhooksAddJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void webhooksDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void webhooksInfoJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void webhooksListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebhooks_list_response_inner> summary);
    void webhooksUpdateJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void whitelistsAddJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIWhitelists_add_response summary);
    void whitelistsDeleteJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIWhitelists_delete_response summary);
    void whitelistsListJsonPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIWhitelists_list_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use exportsActivityJsonPostSignalError() instead")
    void exportsActivityJsonPostSignalE(OAIExports_satus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsActivityJsonPostSignalError(OAIExports_satus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsInfoJsonPostSignalError() instead")
    void exportsInfoJsonPostSignalE(OAIExports_info_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsInfoJsonPostSignalError(OAIExports_info_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsListJsonPostSignalError() instead")
    void exportsListJsonPostSignalE(QList<OAIExports_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsListJsonPostSignalError(QList<OAIExports_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsRejectsJsonPostSignalError() instead")
    void exportsRejectsJsonPostSignalE(OAIExports_satus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsRejectsJsonPostSignalError(OAIExports_satus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsWhitelistJsonPostSignalError() instead")
    void exportsWhitelistJsonPostSignalE(OAIExports_satus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsWhitelistJsonPostSignalError(OAIExports_satus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundAddDomainJsonPostSignalError() instead")
    void inboundAddDomainJsonPostSignalE(OAIInbound_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundAddDomainJsonPostSignalError(OAIInbound_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundAddRouteJsonPostSignalError() instead")
    void inboundAddRouteJsonPostSignalE(OAIRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundAddRouteJsonPostSignalError(OAIRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundCheckDomainJsonPostSignalError() instead")
    void inboundCheckDomainJsonPostSignalE(OAIInbound_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundCheckDomainJsonPostSignalError(OAIInbound_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundDeleteDomainJsonPostSignalError() instead")
    void inboundDeleteDomainJsonPostSignalE(OAIInbound_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundDeleteDomainJsonPostSignalError(OAIInbound_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundDeleteRouteJsonPostSignalError() instead")
    void inboundDeleteRouteJsonPostSignalE(OAIRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundDeleteRouteJsonPostSignalError(OAIRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundDomainsJsonPostSignalError() instead")
    void inboundDomainsJsonPostSignalE(QList<OAIInbound_domains_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundDomainsJsonPostSignalError(QList<OAIInbound_domains_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundRoutesJsonPostSignalError() instead")
    void inboundRoutesJsonPostSignalE(QList<OAIInbound_routes_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundRoutesJsonPostSignalError(QList<OAIInbound_routes_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundSendRawJsonPostSignalError() instead")
    void inboundSendRawJsonPostSignalE(QList<OAIInbound_send_raw_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundSendRawJsonPostSignalError(QList<OAIInbound_send_raw_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundUpdateRouteJsonPostSignalError() instead")
    void inboundUpdateRouteJsonPostSignalE(OAIRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundUpdateRouteJsonPostSignalError(OAIRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsCancelWarmupJsonPostSignalError() instead")
    void ipsCancelWarmupJsonPostSignalE(OAIIp_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCancelWarmupJsonPostSignalError(OAIIp_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsCheckCustomDnsJsonPostSignalError() instead")
    void ipsCheckCustomDnsJsonPostSignalE(OAIIps_check_custom_dns_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCheckCustomDnsJsonPostSignalError(OAIIps_check_custom_dns_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsCreatePoolJsonPostSignalError() instead")
    void ipsCreatePoolJsonPostSignalE(OAIIps_pool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCreatePoolJsonPostSignalError(OAIIps_pool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsDeleteJsonPostSignalError() instead")
    void ipsDeleteJsonPostSignalE(OAIIps_delete_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsDeleteJsonPostSignalError(OAIIps_delete_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsDeletePoolJsonPostSignalError() instead")
    void ipsDeletePoolJsonPostSignalE(OAIIps_delete_pool_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsDeletePoolJsonPostSignalError(OAIIps_delete_pool_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsInfoJsonPostSignalError() instead")
    void ipsInfoJsonPostSignalE(OAIIp_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsInfoJsonPostSignalError(OAIIp_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsListJsonPostSignalError() instead")
    void ipsListJsonPostSignalE(QList<OAIIps_list_pools_response_inner_ips_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsListJsonPostSignalError(QList<OAIIps_list_pools_response_inner_ips_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsListPoolsJsonPostSignalError() instead")
    void ipsListPoolsJsonPostSignalE(QList<OAIIps_list_pools_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsListPoolsJsonPostSignalError(QList<OAIIps_list_pools_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsPoolInfoJsonPostSignalError() instead")
    void ipsPoolInfoJsonPostSignalE(OAIIps_pool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsPoolInfoJsonPostSignalError(OAIIps_pool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsProvisionJsonPostSignalError() instead")
    void ipsProvisionJsonPostSignalE(OAIIps_provision_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsProvisionJsonPostSignalError(OAIIps_provision_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsSetCustomDnsJsonPostSignalError() instead")
    void ipsSetCustomDnsJsonPostSignalE(OAIIp_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsSetCustomDnsJsonPostSignalError(OAIIp_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsSetPoolJsonPostSignalError() instead")
    void ipsSetPoolJsonPostSignalE(OAIIp_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsSetPoolJsonPostSignalError(OAIIp_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsStartWarmupJsonPostSignalError() instead")
    void ipsStartWarmupJsonPostSignalE(OAIIp_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsStartWarmupJsonPostSignalError(OAIIp_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesCancelScheduledJsonPostSignalError() instead")
    void messagesCancelScheduledJsonPostSignalE(OAISchedulingchange_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesCancelScheduledJsonPostSignalError(OAISchedulingchange_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesContentJsonPostSignalError() instead")
    void messagesContentJsonPostSignalE(OAIMessages_content_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesContentJsonPostSignalError(OAIMessages_content_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesInfoJsonPostSignalError() instead")
    void messagesInfoJsonPostSignalE(OAIMessages_info_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesInfoJsonPostSignalError(OAIMessages_info_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesListScheduledJsonPostSignalError() instead")
    void messagesListScheduledJsonPostSignalE(QList<OAIMessages_list_scheduled_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesListScheduledJsonPostSignalError(QList<OAIMessages_list_scheduled_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesParseJsonPostSignalError() instead")
    void messagesParseJsonPostSignalE(OAIMessages_parse_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesParseJsonPostSignalError(OAIMessages_parse_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesRescheduleJsonPostSignalError() instead")
    void messagesRescheduleJsonPostSignalE(OAISchedulingchange_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesRescheduleJsonPostSignalError(OAISchedulingchange_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSearchJsonPostSignalError() instead")
    void messagesSearchJsonPostSignalE(QList<OAIMessages_search_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSearchJsonPostSignalError(QList<OAIMessages_search_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSearchTimeSeriesJsonPostSignalError() instead")
    void messagesSearchTimeSeriesJsonPostSignalE(QList<OAITimeseries_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSearchTimeSeriesJsonPostSignalError(QList<OAITimeseries_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendJsonPostSignalError() instead")
    void messagesSendJsonPostSignalE(QList<OAIMessage_send_status_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendJsonPostSignalError(QList<OAIMessage_send_status_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendRawJsonPostSignalError() instead")
    void messagesSendRawJsonPostSignalE(QList<OAIMessage_send_status_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendRawJsonPostSignalError(QList<OAIMessage_send_status_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendTemplateJsonPostSignalError() instead")
    void messagesSendTemplateJsonPostSignalE(QList<OAIMessage_send_status_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendTemplateJsonPostSignalError(QList<OAIMessage_send_status_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataAddJsonPostSignalError() instead")
    void metadataAddJsonPostSignalE(OAIMetadata_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataAddJsonPostSignalError(OAIMetadata_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataDeleteJsonPostSignalError() instead")
    void metadataDeleteJsonPostSignalE(OAIMetadata_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataDeleteJsonPostSignalError(OAIMetadata_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataListJsonPostSignalError() instead")
    void metadataListJsonPostSignalE(QList<OAIMetadata_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataListJsonPostSignalError(QList<OAIMetadata_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataUpdateJsonPostSignalError() instead")
    void metadataUpdateJsonPostSignalE(OAIMetadata_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataUpdateJsonPostSignalError(OAIMetadata_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectsAddJsonPostSignalError() instead")
    void rejectsAddJsonPostSignalE(OAIRejects_add_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectsAddJsonPostSignalError(OAIRejects_add_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectsDeleteJsonPostSignalError() instead")
    void rejectsDeleteJsonPostSignalE(OAIRejects_delete_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectsDeleteJsonPostSignalError(OAIRejects_delete_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectsListJsonPostSignalError() instead")
    void rejectsListJsonPostSignalE(QList<OAIRejects_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectsListJsonPostSignalError(QList<OAIRejects_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersAddDomainJsonPostSignalError() instead")
    void sendersAddDomainJsonPostSignalE(OAISender_domain_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersAddDomainJsonPostSignalError(OAISender_domain_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersCheckDomainJsonPostSignalError() instead")
    void sendersCheckDomainJsonPostSignalE(OAISender_domain_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersCheckDomainJsonPostSignalError(OAISender_domain_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersDomainsJsonPostSignalError() instead")
    void sendersDomainsJsonPostSignalE(QList<OAISenders_domains_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersDomainsJsonPostSignalError(QList<OAISenders_domains_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersInfoJsonPostSignalError() instead")
    void sendersInfoJsonPostSignalE(OAISenders_info_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersInfoJsonPostSignalError(OAISenders_info_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersListJsonPostSignalError() instead")
    void sendersListJsonPostSignalE(QList<OAIRejects_list_response_inner_sender> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersListJsonPostSignalError(QList<OAIRejects_list_response_inner_sender> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersTimeSeriesJsonPostSignalError() instead")
    void sendersTimeSeriesJsonPostSignalE(QList<OAITime_series_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersTimeSeriesJsonPostSignalError(QList<OAITime_series_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersVerifyDomainJsonPostSignalError() instead")
    void sendersVerifyDomainJsonPostSignalE(OAISenders_verify_domain_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersVerifyDomainJsonPostSignalError(OAISenders_verify_domain_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsAddJsonPostSignalError() instead")
    void subaccountsAddJsonPostSignalE(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsAddJsonPostSignalError(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsDeleteJsonPostSignalError() instead")
    void subaccountsDeleteJsonPostSignalE(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsDeleteJsonPostSignalError(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsInfoJsonPostSignalError() instead")
    void subaccountsInfoJsonPostSignalE(OAISubaccounts_info_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsInfoJsonPostSignalError(OAISubaccounts_info_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsListJsonPostSignalError() instead")
    void subaccountsListJsonPostSignalE(QList<OAISubaccounts_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsListJsonPostSignalError(QList<OAISubaccounts_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsPauseJsonPostSignalError() instead")
    void subaccountsPauseJsonPostSignalE(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsPauseJsonPostSignalError(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsResumeJsonPostSignalError() instead")
    void subaccountsResumeJsonPostSignalE(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsResumeJsonPostSignalError(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsUpdateJsonPostSignalError() instead")
    void subaccountsUpdateJsonPostSignalE(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsUpdateJsonPostSignalError(OAISubaccount_info2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsAllTimeSeriesJsonPostSignalError() instead")
    void tagsAllTimeSeriesJsonPostSignalE(QList<OAITimeseries_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsAllTimeSeriesJsonPostSignalError(QList<OAITimeseries_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteJsonPostSignalError() instead")
    void tagsDeleteJsonPostSignalE(OAITags_delete_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteJsonPostSignalError(OAITags_delete_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsInfoJsonPostSignalError() instead")
    void tagsInfoJsonPostSignalE(OAITags_info_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsInfoJsonPostSignalError(OAITags_info_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsListJsonPostSignalError() instead")
    void tagsListJsonPostSignalE(QList<OAITags_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsListJsonPostSignalError(QList<OAITags_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTimeSeriesJsonPostSignalError() instead")
    void tagsTimeSeriesJsonPostSignalE(QList<OAITimeseries_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTimeSeriesJsonPostSignalError(QList<OAITimeseries_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesAddJsonPostSignalError() instead")
    void templatesAddJsonPostSignalE(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesAddJsonPostSignalError(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesDeleteJsonPostSignalError() instead")
    void templatesDeleteJsonPostSignalE(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesDeleteJsonPostSignalError(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesInfoJsonPostSignalError() instead")
    void templatesInfoJsonPostSignalE(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesInfoJsonPostSignalError(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesListJsonPostSignalError() instead")
    void templatesListJsonPostSignalE(QList<OAITemplates_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesListJsonPostSignalError(QList<OAITemplates_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesPublishJsonPostSignalError() instead")
    void templatesPublishJsonPostSignalE(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesPublishJsonPostSignalError(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesRenderJsonPostSignalError() instead")
    void templatesRenderJsonPostSignalE(OAITemplates_render_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesRenderJsonPostSignalError(OAITemplates_render_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesTimeSeriesJsonPostSignalError() instead")
    void templatesTimeSeriesJsonPostSignalE(QList<OAITime_series_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesTimeSeriesJsonPostSignalError(QList<OAITime_series_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesUpdateJsonPostSignalError() instead")
    void templatesUpdateJsonPostSignalE(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesUpdateJsonPostSignalError(OAITemplate_detailed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsAddTrackingDomainJsonPostSignalError() instead")
    void urlsAddTrackingDomainJsonPostSignalE(OAITracking_domain_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsAddTrackingDomainJsonPostSignalError(OAITracking_domain_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsCheckTrackingDomainJsonPostSignalError() instead")
    void urlsCheckTrackingDomainJsonPostSignalE(OAITracking_domain_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsCheckTrackingDomainJsonPostSignalError(OAITracking_domain_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsListJsonPostSignalError() instead")
    void urlsListJsonPostSignalE(QList<OAIUrl_infos_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsListJsonPostSignalError(QList<OAIUrl_infos_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsSearchJsonPostSignalError() instead")
    void urlsSearchJsonPostSignalE(QList<OAIUrl_infos_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsSearchJsonPostSignalError(QList<OAIUrl_infos_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsTimeSeriesJsonPostSignalError() instead")
    void urlsTimeSeriesJsonPostSignalE(QList<OAIUrls_time_series_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsTimeSeriesJsonPostSignalError(QList<OAIUrls_time_series_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsTrackingDomainsJsonPostSignalError() instead")
    void urlsTrackingDomainsJsonPostSignalE(QList<OAIUrls_tracking_domains_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsTrackingDomainsJsonPostSignalError(QList<OAIUrls_tracking_domains_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInfoJsonPostSignalError() instead")
    void usersInfoJsonPostSignalE(OAIUsers_info_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInfoJsonPostSignalError(OAIUsers_info_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPing2JsonPostSignalError() instead")
    void usersPing2JsonPostSignalE(OAIUsers_ping2_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPing2JsonPostSignalError(OAIUsers_ping2_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPingJsonPostSignalError() instead")
    void usersPingJsonPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPingJsonPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSendersJsonPostSignalError() instead")
    void usersSendersJsonPostSignalE(QList<OAIRejects_list_response_inner_sender> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSendersJsonPostSignalError(QList<OAIRejects_list_response_inner_sender> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksAddJsonPostSignalError() instead")
    void webhooksAddJsonPostSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksAddJsonPostSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksDeleteJsonPostSignalError() instead")
    void webhooksDeleteJsonPostSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksDeleteJsonPostSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksInfoJsonPostSignalError() instead")
    void webhooksInfoJsonPostSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksInfoJsonPostSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksListJsonPostSignalError() instead")
    void webhooksListJsonPostSignalE(QList<OAIWebhooks_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksListJsonPostSignalError(QList<OAIWebhooks_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksUpdateJsonPostSignalError() instead")
    void webhooksUpdateJsonPostSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksUpdateJsonPostSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whitelistsAddJsonPostSignalError() instead")
    void whitelistsAddJsonPostSignalE(OAIWhitelists_add_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void whitelistsAddJsonPostSignalError(OAIWhitelists_add_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whitelistsDeleteJsonPostSignalError() instead")
    void whitelistsDeleteJsonPostSignalE(OAIWhitelists_delete_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void whitelistsDeleteJsonPostSignalError(OAIWhitelists_delete_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whitelistsListJsonPostSignalError() instead")
    void whitelistsListJsonPostSignalE(QList<OAIWhitelists_list_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void whitelistsListJsonPostSignalError(QList<OAIWhitelists_list_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportsActivityJsonPostSignalErrorFull() instead")
    void exportsActivityJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsActivityJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsInfoJsonPostSignalErrorFull() instead")
    void exportsInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsListJsonPostSignalErrorFull() instead")
    void exportsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsRejectsJsonPostSignalErrorFull() instead")
    void exportsRejectsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsRejectsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportsWhitelistJsonPostSignalErrorFull() instead")
    void exportsWhitelistJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportsWhitelistJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundAddDomainJsonPostSignalErrorFull() instead")
    void inboundAddDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundAddDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundAddRouteJsonPostSignalErrorFull() instead")
    void inboundAddRouteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundAddRouteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundCheckDomainJsonPostSignalErrorFull() instead")
    void inboundCheckDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundCheckDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundDeleteDomainJsonPostSignalErrorFull() instead")
    void inboundDeleteDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundDeleteDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundDeleteRouteJsonPostSignalErrorFull() instead")
    void inboundDeleteRouteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundDeleteRouteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundDomainsJsonPostSignalErrorFull() instead")
    void inboundDomainsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundDomainsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundRoutesJsonPostSignalErrorFull() instead")
    void inboundRoutesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundRoutesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundSendRawJsonPostSignalErrorFull() instead")
    void inboundSendRawJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundSendRawJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboundUpdateRouteJsonPostSignalErrorFull() instead")
    void inboundUpdateRouteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboundUpdateRouteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsCancelWarmupJsonPostSignalErrorFull() instead")
    void ipsCancelWarmupJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCancelWarmupJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsCheckCustomDnsJsonPostSignalErrorFull() instead")
    void ipsCheckCustomDnsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCheckCustomDnsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsCreatePoolJsonPostSignalErrorFull() instead")
    void ipsCreatePoolJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCreatePoolJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsDeleteJsonPostSignalErrorFull() instead")
    void ipsDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsDeletePoolJsonPostSignalErrorFull() instead")
    void ipsDeletePoolJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsDeletePoolJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsInfoJsonPostSignalErrorFull() instead")
    void ipsInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsListJsonPostSignalErrorFull() instead")
    void ipsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsListPoolsJsonPostSignalErrorFull() instead")
    void ipsListPoolsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsListPoolsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsPoolInfoJsonPostSignalErrorFull() instead")
    void ipsPoolInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsPoolInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsProvisionJsonPostSignalErrorFull() instead")
    void ipsProvisionJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsProvisionJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsSetCustomDnsJsonPostSignalErrorFull() instead")
    void ipsSetCustomDnsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsSetCustomDnsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsSetPoolJsonPostSignalErrorFull() instead")
    void ipsSetPoolJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsSetPoolJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsStartWarmupJsonPostSignalErrorFull() instead")
    void ipsStartWarmupJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsStartWarmupJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesCancelScheduledJsonPostSignalErrorFull() instead")
    void messagesCancelScheduledJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesCancelScheduledJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesContentJsonPostSignalErrorFull() instead")
    void messagesContentJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesContentJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesInfoJsonPostSignalErrorFull() instead")
    void messagesInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesListScheduledJsonPostSignalErrorFull() instead")
    void messagesListScheduledJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesListScheduledJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesParseJsonPostSignalErrorFull() instead")
    void messagesParseJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesParseJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesRescheduleJsonPostSignalErrorFull() instead")
    void messagesRescheduleJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesRescheduleJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSearchJsonPostSignalErrorFull() instead")
    void messagesSearchJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSearchJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSearchTimeSeriesJsonPostSignalErrorFull() instead")
    void messagesSearchTimeSeriesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSearchTimeSeriesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendJsonPostSignalErrorFull() instead")
    void messagesSendJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendRawJsonPostSignalErrorFull() instead")
    void messagesSendRawJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendRawJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesSendTemplateJsonPostSignalErrorFull() instead")
    void messagesSendTemplateJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesSendTemplateJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataAddJsonPostSignalErrorFull() instead")
    void metadataAddJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataAddJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataDeleteJsonPostSignalErrorFull() instead")
    void metadataDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataListJsonPostSignalErrorFull() instead")
    void metadataListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataUpdateJsonPostSignalErrorFull() instead")
    void metadataUpdateJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataUpdateJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectsAddJsonPostSignalErrorFull() instead")
    void rejectsAddJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectsAddJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectsDeleteJsonPostSignalErrorFull() instead")
    void rejectsDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectsDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectsListJsonPostSignalErrorFull() instead")
    void rejectsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersAddDomainJsonPostSignalErrorFull() instead")
    void sendersAddDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersAddDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersCheckDomainJsonPostSignalErrorFull() instead")
    void sendersCheckDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersCheckDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersDomainsJsonPostSignalErrorFull() instead")
    void sendersDomainsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersDomainsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersInfoJsonPostSignalErrorFull() instead")
    void sendersInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersListJsonPostSignalErrorFull() instead")
    void sendersListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersTimeSeriesJsonPostSignalErrorFull() instead")
    void sendersTimeSeriesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersTimeSeriesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendersVerifyDomainJsonPostSignalErrorFull() instead")
    void sendersVerifyDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendersVerifyDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsAddJsonPostSignalErrorFull() instead")
    void subaccountsAddJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsAddJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsDeleteJsonPostSignalErrorFull() instead")
    void subaccountsDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsInfoJsonPostSignalErrorFull() instead")
    void subaccountsInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsListJsonPostSignalErrorFull() instead")
    void subaccountsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsPauseJsonPostSignalErrorFull() instead")
    void subaccountsPauseJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsPauseJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsResumeJsonPostSignalErrorFull() instead")
    void subaccountsResumeJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsResumeJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subaccountsUpdateJsonPostSignalErrorFull() instead")
    void subaccountsUpdateJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subaccountsUpdateJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsAllTimeSeriesJsonPostSignalErrorFull() instead")
    void tagsAllTimeSeriesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsAllTimeSeriesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteJsonPostSignalErrorFull() instead")
    void tagsDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsInfoJsonPostSignalErrorFull() instead")
    void tagsInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsListJsonPostSignalErrorFull() instead")
    void tagsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTimeSeriesJsonPostSignalErrorFull() instead")
    void tagsTimeSeriesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTimeSeriesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesAddJsonPostSignalErrorFull() instead")
    void templatesAddJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesAddJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesDeleteJsonPostSignalErrorFull() instead")
    void templatesDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesInfoJsonPostSignalErrorFull() instead")
    void templatesInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesListJsonPostSignalErrorFull() instead")
    void templatesListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesPublishJsonPostSignalErrorFull() instead")
    void templatesPublishJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesPublishJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesRenderJsonPostSignalErrorFull() instead")
    void templatesRenderJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesRenderJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesTimeSeriesJsonPostSignalErrorFull() instead")
    void templatesTimeSeriesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesTimeSeriesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesUpdateJsonPostSignalErrorFull() instead")
    void templatesUpdateJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesUpdateJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsAddTrackingDomainJsonPostSignalErrorFull() instead")
    void urlsAddTrackingDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsAddTrackingDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsCheckTrackingDomainJsonPostSignalErrorFull() instead")
    void urlsCheckTrackingDomainJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsCheckTrackingDomainJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsListJsonPostSignalErrorFull() instead")
    void urlsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsSearchJsonPostSignalErrorFull() instead")
    void urlsSearchJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsSearchJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsTimeSeriesJsonPostSignalErrorFull() instead")
    void urlsTimeSeriesJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsTimeSeriesJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsTrackingDomainsJsonPostSignalErrorFull() instead")
    void urlsTrackingDomainsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsTrackingDomainsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInfoJsonPostSignalErrorFull() instead")
    void usersInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPing2JsonPostSignalErrorFull() instead")
    void usersPing2JsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPing2JsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPingJsonPostSignalErrorFull() instead")
    void usersPingJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPingJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSendersJsonPostSignalErrorFull() instead")
    void usersSendersJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSendersJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksAddJsonPostSignalErrorFull() instead")
    void webhooksAddJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksAddJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksDeleteJsonPostSignalErrorFull() instead")
    void webhooksDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksInfoJsonPostSignalErrorFull() instead")
    void webhooksInfoJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksInfoJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksListJsonPostSignalErrorFull() instead")
    void webhooksListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksUpdateJsonPostSignalErrorFull() instead")
    void webhooksUpdateJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksUpdateJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whitelistsAddJsonPostSignalErrorFull() instead")
    void whitelistsAddJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void whitelistsAddJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whitelistsDeleteJsonPostSignalErrorFull() instead")
    void whitelistsDeleteJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void whitelistsDeleteJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whitelistsListJsonPostSignalErrorFull() instead")
    void whitelistsListJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void whitelistsListJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
