/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_search.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_search::OAIMessages_search(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_search::OAIMessages_search() {
    this->initializeModel();
}

OAIMessages_search::~OAIMessages_search() {}

void OAIMessages_search::initializeModel() {

    m_api_keys_isSet = false;
    m_api_keys_isValid = false;

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_senders_isSet = false;
    m_senders_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIMessages_search::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_search::fromJsonObject(QJsonObject json) {

    m_api_keys_isValid = ::OpenAPI::fromJsonValue(m_api_keys, json[QString("api_keys")]);
    m_api_keys_isSet = !json[QString("api_keys")].isNull() && m_api_keys_isValid;

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("date_from")]);
    m_date_from_isSet = !json[QString("date_from")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("date_to")]);
    m_date_to_isSet = !json[QString("date_to")].isNull() && m_date_to_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_senders_isValid = ::OpenAPI::fromJsonValue(m_senders, json[QString("senders")]);
    m_senders_isSet = !json[QString("senders")].isNull() && m_senders_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIMessages_search::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_search::asJsonObject() const {
    QJsonObject obj;
    if (m_api_keys.size() > 0) {
        obj.insert(QString("api_keys"), ::OpenAPI::toJsonValue(m_api_keys));
    }
    if (m_date_from_isSet) {
        obj.insert(QString("date_from"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("date_to"), ::OpenAPI::toJsonValue(m_date_to));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_senders.size() > 0) {
        obj.insert(QString("senders"), ::OpenAPI::toJsonValue(m_senders));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAIMessages_search::getApiKeys() const {
    return m_api_keys;
}
void OAIMessages_search::setApiKeys(const QList<QString> &api_keys) {
    m_api_keys = api_keys;
    m_api_keys_isSet = true;
}

bool OAIMessages_search::is_api_keys_Set() const{
    return m_api_keys_isSet;
}

bool OAIMessages_search::is_api_keys_Valid() const{
    return m_api_keys_isValid;
}

QString OAIMessages_search::getDateFrom() const {
    return m_date_from;
}
void OAIMessages_search::setDateFrom(const QString &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAIMessages_search::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIMessages_search::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAIMessages_search::getDateTo() const {
    return m_date_to;
}
void OAIMessages_search::setDateTo(const QString &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAIMessages_search::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAIMessages_search::is_date_to_Valid() const{
    return m_date_to_isValid;
}

QString OAIMessages_search::getKey() const {
    return m_key;
}
void OAIMessages_search::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMessages_search::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMessages_search::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIMessages_search::getLimit() const {
    return m_limit;
}
void OAIMessages_search::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIMessages_search::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIMessages_search::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIMessages_search::getQuery() const {
    return m_query;
}
void OAIMessages_search::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIMessages_search::is_query_Set() const{
    return m_query_isSet;
}

bool OAIMessages_search::is_query_Valid() const{
    return m_query_isValid;
}

QList<QString> OAIMessages_search::getSenders() const {
    return m_senders;
}
void OAIMessages_search::setSenders(const QList<QString> &senders) {
    m_senders = senders;
    m_senders_isSet = true;
}

bool OAIMessages_search::is_senders_Set() const{
    return m_senders_isSet;
}

bool OAIMessages_search::is_senders_Valid() const{
    return m_senders_isValid;
}

QList<QString> OAIMessages_search::getTags() const {
    return m_tags;
}
void OAIMessages_search::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMessages_search::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMessages_search::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIMessages_search::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_senders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_search::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
