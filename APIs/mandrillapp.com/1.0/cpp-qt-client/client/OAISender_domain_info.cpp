/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISender_domain_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISender_domain_info::OAISender_domain_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISender_domain_info::OAISender_domain_info() {
    this->initializeModel();
}

OAISender_domain_info::~OAISender_domain_info() {}

void OAISender_domain_info::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dkim_isSet = false;
    m_dkim_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_last_tested_at_isSet = false;
    m_last_tested_at_isValid = false;

    m_spf_isSet = false;
    m_spf_isValid = false;

    m_valid_signing_isSet = false;
    m_valid_signing_isValid = false;

    m_verified_at_isSet = false;
    m_verified_at_isValid = false;
}

void OAISender_domain_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISender_domain_info::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dkim_isValid = ::OpenAPI::fromJsonValue(m_dkim, json[QString("dkim")]);
    m_dkim_isSet = !json[QString("dkim")].isNull() && m_dkim_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_last_tested_at_isValid = ::OpenAPI::fromJsonValue(m_last_tested_at, json[QString("last_tested_at")]);
    m_last_tested_at_isSet = !json[QString("last_tested_at")].isNull() && m_last_tested_at_isValid;

    m_spf_isValid = ::OpenAPI::fromJsonValue(m_spf, json[QString("spf")]);
    m_spf_isSet = !json[QString("spf")].isNull() && m_spf_isValid;

    m_valid_signing_isValid = ::OpenAPI::fromJsonValue(m_valid_signing, json[QString("valid_signing")]);
    m_valid_signing_isSet = !json[QString("valid_signing")].isNull() && m_valid_signing_isValid;

    m_verified_at_isValid = ::OpenAPI::fromJsonValue(m_verified_at, json[QString("verified_at")]);
    m_verified_at_isSet = !json[QString("verified_at")].isNull() && m_verified_at_isValid;
}

QString OAISender_domain_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISender_domain_info::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dkim.isSet()) {
        obj.insert(QString("dkim"), ::OpenAPI::toJsonValue(m_dkim));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_last_tested_at_isSet) {
        obj.insert(QString("last_tested_at"), ::OpenAPI::toJsonValue(m_last_tested_at));
    }
    if (m_spf.isSet()) {
        obj.insert(QString("spf"), ::OpenAPI::toJsonValue(m_spf));
    }
    if (m_valid_signing_isSet) {
        obj.insert(QString("valid_signing"), ::OpenAPI::toJsonValue(m_valid_signing));
    }
    if (m_verified_at_isSet) {
        obj.insert(QString("verified_at"), ::OpenAPI::toJsonValue(m_verified_at));
    }
    return obj;
}

QString OAISender_domain_info::getCreatedAt() const {
    return m_created_at;
}
void OAISender_domain_info::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISender_domain_info::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISender_domain_info::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAISender_domain_info_dkim OAISender_domain_info::getDkim() const {
    return m_dkim;
}
void OAISender_domain_info::setDkim(const OAISender_domain_info_dkim &dkim) {
    m_dkim = dkim;
    m_dkim_isSet = true;
}

bool OAISender_domain_info::is_dkim_Set() const{
    return m_dkim_isSet;
}

bool OAISender_domain_info::is_dkim_Valid() const{
    return m_dkim_isValid;
}

QString OAISender_domain_info::getDomain() const {
    return m_domain;
}
void OAISender_domain_info::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAISender_domain_info::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAISender_domain_info::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAISender_domain_info::getLastTestedAt() const {
    return m_last_tested_at;
}
void OAISender_domain_info::setLastTestedAt(const QString &last_tested_at) {
    m_last_tested_at = last_tested_at;
    m_last_tested_at_isSet = true;
}

bool OAISender_domain_info::is_last_tested_at_Set() const{
    return m_last_tested_at_isSet;
}

bool OAISender_domain_info::is_last_tested_at_Valid() const{
    return m_last_tested_at_isValid;
}

OAISender_domain_info_dkim OAISender_domain_info::getSpf() const {
    return m_spf;
}
void OAISender_domain_info::setSpf(const OAISender_domain_info_dkim &spf) {
    m_spf = spf;
    m_spf_isSet = true;
}

bool OAISender_domain_info::is_spf_Set() const{
    return m_spf_isSet;
}

bool OAISender_domain_info::is_spf_Valid() const{
    return m_spf_isValid;
}

bool OAISender_domain_info::isValidSigning() const {
    return m_valid_signing;
}
void OAISender_domain_info::setValidSigning(const bool &valid_signing) {
    m_valid_signing = valid_signing;
    m_valid_signing_isSet = true;
}

bool OAISender_domain_info::is_valid_signing_Set() const{
    return m_valid_signing_isSet;
}

bool OAISender_domain_info::is_valid_signing_Valid() const{
    return m_valid_signing_isValid;
}

QString OAISender_domain_info::getVerifiedAt() const {
    return m_verified_at;
}
void OAISender_domain_info::setVerifiedAt(const QString &verified_at) {
    m_verified_at = verified_at;
    m_verified_at_isSet = true;
}

bool OAISender_domain_info::is_verified_at_Set() const{
    return m_verified_at_isSet;
}

bool OAISender_domain_info::is_verified_at_Valid() const{
    return m_verified_at_isValid;
}

bool OAISender_domain_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_tested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_signing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISender_domain_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
