/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedulingchange_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedulingchange_info::OAISchedulingchange_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedulingchange_info::OAISchedulingchange_info() {
    this->initializeModel();
}

OAISchedulingchange_info::~OAISchedulingchange_info() {}

void OAISchedulingchange_info::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_from_email_isSet = false;
    m_from_email_isValid = false;

    m_send_at_isSet = false;
    m_send_at_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAISchedulingchange_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedulingchange_info::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_from_email_isValid = ::OpenAPI::fromJsonValue(m_from_email, json[QString("from_email")]);
    m_from_email_isSet = !json[QString("from_email")].isNull() && m_from_email_isValid;

    m_send_at_isValid = ::OpenAPI::fromJsonValue(m_send_at, json[QString("send_at")]);
    m_send_at_isSet = !json[QString("send_at")].isNull() && m_send_at_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAISchedulingchange_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedulingchange_info::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_from_email_isSet) {
        obj.insert(QString("from_email"), ::OpenAPI::toJsonValue(m_from_email));
    }
    if (m_send_at_isSet) {
        obj.insert(QString("send_at"), ::OpenAPI::toJsonValue(m_send_at));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAISchedulingchange_info::getId() const {
    return m__id;
}
void OAISchedulingchange_info::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAISchedulingchange_info::is__id_Set() const{
    return m__id_isSet;
}

bool OAISchedulingchange_info::is__id_Valid() const{
    return m__id_isValid;
}

QString OAISchedulingchange_info::getCreatedAt() const {
    return m_created_at;
}
void OAISchedulingchange_info::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISchedulingchange_info::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISchedulingchange_info::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISchedulingchange_info::getFromEmail() const {
    return m_from_email;
}
void OAISchedulingchange_info::setFromEmail(const QString &from_email) {
    m_from_email = from_email;
    m_from_email_isSet = true;
}

bool OAISchedulingchange_info::is_from_email_Set() const{
    return m_from_email_isSet;
}

bool OAISchedulingchange_info::is_from_email_Valid() const{
    return m_from_email_isValid;
}

QString OAISchedulingchange_info::getSendAt() const {
    return m_send_at;
}
void OAISchedulingchange_info::setSendAt(const QString &send_at) {
    m_send_at = send_at;
    m_send_at_isSet = true;
}

bool OAISchedulingchange_info::is_send_at_Set() const{
    return m_send_at_isSet;
}

bool OAISchedulingchange_info::is_send_at_Valid() const{
    return m_send_at_isValid;
}

QString OAISchedulingchange_info::getSubject() const {
    return m_subject;
}
void OAISchedulingchange_info::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAISchedulingchange_info::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISchedulingchange_info::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAISchedulingchange_info::getTo() const {
    return m_to;
}
void OAISchedulingchange_info::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISchedulingchange_info::is_to_Set() const{
    return m_to_isSet;
}

bool OAISchedulingchange_info::is_to_Valid() const{
    return m_to_isValid;
}

bool OAISchedulingchange_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedulingchange_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
