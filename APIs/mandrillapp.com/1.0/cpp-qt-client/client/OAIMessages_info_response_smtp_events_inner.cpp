/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_info_response_smtp_events_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_info_response_smtp_events_inner::OAIMessages_info_response_smtp_events_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_info_response_smtp_events_inner::OAIMessages_info_response_smtp_events_inner() {
    this->initializeModel();
}

OAIMessages_info_response_smtp_events_inner::~OAIMessages_info_response_smtp_events_inner() {}

void OAIMessages_info_response_smtp_events_inner::initializeModel() {

    m_diag_isSet = false;
    m_diag_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMessages_info_response_smtp_events_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_info_response_smtp_events_inner::fromJsonObject(QJsonObject json) {

    m_diag_isValid = ::OpenAPI::fromJsonValue(m_diag, json[QString("diag")]);
    m_diag_isSet = !json[QString("diag")].isNull() && m_diag_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMessages_info_response_smtp_events_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_info_response_smtp_events_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_diag_isSet) {
        obj.insert(QString("diag"), ::OpenAPI::toJsonValue(m_diag));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMessages_info_response_smtp_events_inner::getDiag() const {
    return m_diag;
}
void OAIMessages_info_response_smtp_events_inner::setDiag(const QString &diag) {
    m_diag = diag;
    m_diag_isSet = true;
}

bool OAIMessages_info_response_smtp_events_inner::is_diag_Set() const{
    return m_diag_isSet;
}

bool OAIMessages_info_response_smtp_events_inner::is_diag_Valid() const{
    return m_diag_isValid;
}

qint32 OAIMessages_info_response_smtp_events_inner::getTs() const {
    return m_ts;
}
void OAIMessages_info_response_smtp_events_inner::setTs(const qint32 &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIMessages_info_response_smtp_events_inner::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIMessages_info_response_smtp_events_inner::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIMessages_info_response_smtp_events_inner::getType() const {
    return m_type;
}
void OAIMessages_info_response_smtp_events_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessages_info_response_smtp_events_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessages_info_response_smtp_events_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMessages_info_response_smtp_events_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_info_response_smtp_events_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
