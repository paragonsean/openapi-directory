/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhooks_update.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhooks_update::OAIWebhooks_update(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhooks_update::OAIWebhooks_update() {
    this->initializeModel();
}

OAIWebhooks_update::~OAIWebhooks_update() {}

void OAIWebhooks_update::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhooks_update::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhooks_update::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhooks_update::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhooks_update::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWebhooks_update::getDescription() const {
    return m_description;
}
void OAIWebhooks_update::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebhooks_update::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebhooks_update::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIWebhooks_update::getEvents() const {
    return m_events;
}
void OAIWebhooks_update::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhooks_update::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhooks_update::is_events_Valid() const{
    return m_events_isValid;
}

qint32 OAIWebhooks_update::getId() const {
    return m_id;
}
void OAIWebhooks_update::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhooks_update::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhooks_update::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhooks_update::getKey() const {
    return m_key;
}
void OAIWebhooks_update::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIWebhooks_update::is_key_Set() const{
    return m_key_isSet;
}

bool OAIWebhooks_update::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIWebhooks_update::getUrl() const {
    return m_url;
}
void OAIWebhooks_update::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhooks_update::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhooks_update::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhooks_update::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhooks_update::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
