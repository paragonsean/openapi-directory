/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrl_infos_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrl_infos_inner::OAIUrl_infos_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrl_infos_inner::OAIUrl_infos_inner() {
    this->initializeModel();
}

OAIUrl_infos_inner::~OAIUrl_infos_inner() {}

void OAIUrl_infos_inner::initializeModel() {

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_unique_clicks_isSet = false;
    m_unique_clicks_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUrl_infos_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrl_infos_inner::fromJsonObject(QJsonObject json) {

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_unique_clicks_isValid = ::OpenAPI::fromJsonValue(m_unique_clicks, json[QString("unique_clicks")]);
    m_unique_clicks_isSet = !json[QString("unique_clicks")].isNull() && m_unique_clicks_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUrl_infos_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrl_infos_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_unique_clicks_isSet) {
        obj.insert(QString("unique_clicks"), ::OpenAPI::toJsonValue(m_unique_clicks));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIUrl_infos_inner::getClicks() const {
    return m_clicks;
}
void OAIUrl_infos_inner::setClicks(const qint32 &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIUrl_infos_inner::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIUrl_infos_inner::is_clicks_Valid() const{
    return m_clicks_isValid;
}

qint32 OAIUrl_infos_inner::getSent() const {
    return m_sent;
}
void OAIUrl_infos_inner::setSent(const qint32 &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIUrl_infos_inner::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIUrl_infos_inner::is_sent_Valid() const{
    return m_sent_isValid;
}

qint32 OAIUrl_infos_inner::getUniqueClicks() const {
    return m_unique_clicks;
}
void OAIUrl_infos_inner::setUniqueClicks(const qint32 &unique_clicks) {
    m_unique_clicks = unique_clicks;
    m_unique_clicks_isSet = true;
}

bool OAIUrl_infos_inner::is_unique_clicks_Set() const{
    return m_unique_clicks_isSet;
}

bool OAIUrl_infos_inner::is_unique_clicks_Valid() const{
    return m_unique_clicks_isValid;
}

QString OAIUrl_infos_inner::getUrl() const {
    return m_url;
}
void OAIUrl_infos_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUrl_infos_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUrl_infos_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUrl_infos_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrl_infos_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
