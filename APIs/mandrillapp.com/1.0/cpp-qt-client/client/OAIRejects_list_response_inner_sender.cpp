/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRejects_list_response_inner_sender.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRejects_list_response_inner_sender::OAIRejects_list_response_inner_sender(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRejects_list_response_inner_sender::OAIRejects_list_response_inner_sender() {
    this->initializeModel();
}

OAIRejects_list_response_inner_sender::~OAIRejects_list_response_inner_sender() {}

void OAIRejects_list_response_inner_sender::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_complaints_isSet = false;
    m_complaints_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_hard_bounces_isSet = false;
    m_hard_bounces_isValid = false;

    m_opens_isSet = false;
    m_opens_isValid = false;

    m_rejects_isSet = false;
    m_rejects_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_soft_bounces_isSet = false;
    m_soft_bounces_isValid = false;

    m_unique_clicks_isSet = false;
    m_unique_clicks_isValid = false;

    m_unique_opens_isSet = false;
    m_unique_opens_isValid = false;

    m_unsubs_isSet = false;
    m_unsubs_isValid = false;
}

void OAIRejects_list_response_inner_sender::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRejects_list_response_inner_sender::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_complaints_isValid = ::OpenAPI::fromJsonValue(m_complaints, json[QString("complaints")]);
    m_complaints_isSet = !json[QString("complaints")].isNull() && m_complaints_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_hard_bounces_isValid = ::OpenAPI::fromJsonValue(m_hard_bounces, json[QString("hard_bounces")]);
    m_hard_bounces_isSet = !json[QString("hard_bounces")].isNull() && m_hard_bounces_isValid;

    m_opens_isValid = ::OpenAPI::fromJsonValue(m_opens, json[QString("opens")]);
    m_opens_isSet = !json[QString("opens")].isNull() && m_opens_isValid;

    m_rejects_isValid = ::OpenAPI::fromJsonValue(m_rejects, json[QString("rejects")]);
    m_rejects_isSet = !json[QString("rejects")].isNull() && m_rejects_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_soft_bounces_isValid = ::OpenAPI::fromJsonValue(m_soft_bounces, json[QString("soft_bounces")]);
    m_soft_bounces_isSet = !json[QString("soft_bounces")].isNull() && m_soft_bounces_isValid;

    m_unique_clicks_isValid = ::OpenAPI::fromJsonValue(m_unique_clicks, json[QString("unique_clicks")]);
    m_unique_clicks_isSet = !json[QString("unique_clicks")].isNull() && m_unique_clicks_isValid;

    m_unique_opens_isValid = ::OpenAPI::fromJsonValue(m_unique_opens, json[QString("unique_opens")]);
    m_unique_opens_isSet = !json[QString("unique_opens")].isNull() && m_unique_opens_isValid;

    m_unsubs_isValid = ::OpenAPI::fromJsonValue(m_unsubs, json[QString("unsubs")]);
    m_unsubs_isSet = !json[QString("unsubs")].isNull() && m_unsubs_isValid;
}

QString OAIRejects_list_response_inner_sender::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRejects_list_response_inner_sender::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_complaints_isSet) {
        obj.insert(QString("complaints"), ::OpenAPI::toJsonValue(m_complaints));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_hard_bounces_isSet) {
        obj.insert(QString("hard_bounces"), ::OpenAPI::toJsonValue(m_hard_bounces));
    }
    if (m_opens_isSet) {
        obj.insert(QString("opens"), ::OpenAPI::toJsonValue(m_opens));
    }
    if (m_rejects_isSet) {
        obj.insert(QString("rejects"), ::OpenAPI::toJsonValue(m_rejects));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_soft_bounces_isSet) {
        obj.insert(QString("soft_bounces"), ::OpenAPI::toJsonValue(m_soft_bounces));
    }
    if (m_unique_clicks_isSet) {
        obj.insert(QString("unique_clicks"), ::OpenAPI::toJsonValue(m_unique_clicks));
    }
    if (m_unique_opens_isSet) {
        obj.insert(QString("unique_opens"), ::OpenAPI::toJsonValue(m_unique_opens));
    }
    if (m_unsubs_isSet) {
        obj.insert(QString("unsubs"), ::OpenAPI::toJsonValue(m_unsubs));
    }
    return obj;
}

QString OAIRejects_list_response_inner_sender::getAddress() const {
    return m_address;
}
void OAIRejects_list_response_inner_sender::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_address_Set() const{
    return m_address_isSet;
}

bool OAIRejects_list_response_inner_sender::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getClicks() const {
    return m_clicks;
}
void OAIRejects_list_response_inner_sender::setClicks(const qint32 &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIRejects_list_response_inner_sender::is_clicks_Valid() const{
    return m_clicks_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getComplaints() const {
    return m_complaints;
}
void OAIRejects_list_response_inner_sender::setComplaints(const qint32 &complaints) {
    m_complaints = complaints;
    m_complaints_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_complaints_Set() const{
    return m_complaints_isSet;
}

bool OAIRejects_list_response_inner_sender::is_complaints_Valid() const{
    return m_complaints_isValid;
}

QString OAIRejects_list_response_inner_sender::getCreatedAt() const {
    return m_created_at;
}
void OAIRejects_list_response_inner_sender::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRejects_list_response_inner_sender::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getHardBounces() const {
    return m_hard_bounces;
}
void OAIRejects_list_response_inner_sender::setHardBounces(const qint32 &hard_bounces) {
    m_hard_bounces = hard_bounces;
    m_hard_bounces_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_hard_bounces_Set() const{
    return m_hard_bounces_isSet;
}

bool OAIRejects_list_response_inner_sender::is_hard_bounces_Valid() const{
    return m_hard_bounces_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getOpens() const {
    return m_opens;
}
void OAIRejects_list_response_inner_sender::setOpens(const qint32 &opens) {
    m_opens = opens;
    m_opens_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_opens_Set() const{
    return m_opens_isSet;
}

bool OAIRejects_list_response_inner_sender::is_opens_Valid() const{
    return m_opens_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getRejects() const {
    return m_rejects;
}
void OAIRejects_list_response_inner_sender::setRejects(const qint32 &rejects) {
    m_rejects = rejects;
    m_rejects_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_rejects_Set() const{
    return m_rejects_isSet;
}

bool OAIRejects_list_response_inner_sender::is_rejects_Valid() const{
    return m_rejects_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getSent() const {
    return m_sent;
}
void OAIRejects_list_response_inner_sender::setSent(const qint32 &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIRejects_list_response_inner_sender::is_sent_Valid() const{
    return m_sent_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getSoftBounces() const {
    return m_soft_bounces;
}
void OAIRejects_list_response_inner_sender::setSoftBounces(const qint32 &soft_bounces) {
    m_soft_bounces = soft_bounces;
    m_soft_bounces_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_soft_bounces_Set() const{
    return m_soft_bounces_isSet;
}

bool OAIRejects_list_response_inner_sender::is_soft_bounces_Valid() const{
    return m_soft_bounces_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getUniqueClicks() const {
    return m_unique_clicks;
}
void OAIRejects_list_response_inner_sender::setUniqueClicks(const qint32 &unique_clicks) {
    m_unique_clicks = unique_clicks;
    m_unique_clicks_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_unique_clicks_Set() const{
    return m_unique_clicks_isSet;
}

bool OAIRejects_list_response_inner_sender::is_unique_clicks_Valid() const{
    return m_unique_clicks_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getUniqueOpens() const {
    return m_unique_opens;
}
void OAIRejects_list_response_inner_sender::setUniqueOpens(const qint32 &unique_opens) {
    m_unique_opens = unique_opens;
    m_unique_opens_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_unique_opens_Set() const{
    return m_unique_opens_isSet;
}

bool OAIRejects_list_response_inner_sender::is_unique_opens_Valid() const{
    return m_unique_opens_isValid;
}

qint32 OAIRejects_list_response_inner_sender::getUnsubs() const {
    return m_unsubs;
}
void OAIRejects_list_response_inner_sender::setUnsubs(const qint32 &unsubs) {
    m_unsubs = unsubs;
    m_unsubs_isSet = true;
}

bool OAIRejects_list_response_inner_sender::is_unsubs_Set() const{
    return m_unsubs_isSet;
}

bool OAIRejects_list_response_inner_sender::is_unsubs_Valid() const{
    return m_unsubs_isValid;
}

bool OAIRejects_list_response_inner_sender::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complaints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_bounces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_bounces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_opens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRejects_list_response_inner_sender::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
