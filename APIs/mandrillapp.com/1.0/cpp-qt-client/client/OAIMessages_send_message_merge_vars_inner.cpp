/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_send_message_merge_vars_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_send_message_merge_vars_inner::OAIMessages_send_message_merge_vars_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_send_message_merge_vars_inner::OAIMessages_send_message_merge_vars_inner() {
    this->initializeModel();
}

OAIMessages_send_message_merge_vars_inner::~OAIMessages_send_message_merge_vars_inner() {}

void OAIMessages_send_message_merge_vars_inner::initializeModel() {

    m_rcpt_isSet = false;
    m_rcpt_isValid = false;

    m_vars_isSet = false;
    m_vars_isValid = false;
}

void OAIMessages_send_message_merge_vars_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_send_message_merge_vars_inner::fromJsonObject(QJsonObject json) {

    m_rcpt_isValid = ::OpenAPI::fromJsonValue(m_rcpt, json[QString("rcpt")]);
    m_rcpt_isSet = !json[QString("rcpt")].isNull() && m_rcpt_isValid;

    m_vars_isValid = ::OpenAPI::fromJsonValue(m_vars, json[QString("vars")]);
    m_vars_isSet = !json[QString("vars")].isNull() && m_vars_isValid;
}

QString OAIMessages_send_message_merge_vars_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_send_message_merge_vars_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_rcpt_isSet) {
        obj.insert(QString("rcpt"), ::OpenAPI::toJsonValue(m_rcpt));
    }
    if (m_vars.size() > 0) {
        obj.insert(QString("vars"), ::OpenAPI::toJsonValue(m_vars));
    }
    return obj;
}

QString OAIMessages_send_message_merge_vars_inner::getRcpt() const {
    return m_rcpt;
}
void OAIMessages_send_message_merge_vars_inner::setRcpt(const QString &rcpt) {
    m_rcpt = rcpt;
    m_rcpt_isSet = true;
}

bool OAIMessages_send_message_merge_vars_inner::is_rcpt_Set() const{
    return m_rcpt_isSet;
}

bool OAIMessages_send_message_merge_vars_inner::is_rcpt_Valid() const{
    return m_rcpt_isValid;
}

QList<OAIMessages_send_message_global_merge_vars_inner> OAIMessages_send_message_merge_vars_inner::getVars() const {
    return m_vars;
}
void OAIMessages_send_message_merge_vars_inner::setVars(const QList<OAIMessages_send_message_global_merge_vars_inner> &vars) {
    m_vars = vars;
    m_vars_isSet = true;
}

bool OAIMessages_send_message_merge_vars_inner::is_vars_Set() const{
    return m_vars_isSet;
}

bool OAIMessages_send_message_merge_vars_inner::is_vars_Valid() const{
    return m_vars_isValid;
}

bool OAIMessages_send_message_merge_vars_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rcpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_send_message_merge_vars_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
