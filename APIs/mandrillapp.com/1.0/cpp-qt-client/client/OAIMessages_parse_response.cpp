/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_parse_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_parse_response::OAIMessages_parse_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_parse_response::OAIMessages_parse_response() {
    this->initializeModel();
}

OAIMessages_parse_response::~OAIMessages_parse_response() {}

void OAIMessages_parse_response::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_from_email_isSet = false;
    m_from_email_isValid = false;

    m_from_name_isSet = false;
    m_from_name_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessages_parse_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_parse_response::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_from_email_isValid = ::OpenAPI::fromJsonValue(m_from_email, json[QString("from_email")]);
    m_from_email_isSet = !json[QString("from_email")].isNull() && m_from_email_isValid;

    m_from_name_isValid = ::OpenAPI::fromJsonValue(m_from_name, json[QString("from_name")]);
    m_from_name_isSet = !json[QString("from_name")].isNull() && m_from_name_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessages_parse_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_parse_response::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_from_email_isSet) {
        obj.insert(QString("from_email"), ::OpenAPI::toJsonValue(m_from_email));
    }
    if (m_from_name_isSet) {
        obj.insert(QString("from_name"), ::OpenAPI::toJsonValue(m_from_name));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QList<OAIMessages_parse_response_attachments_inner> OAIMessages_parse_response::getAttachments() const {
    return m_attachments;
}
void OAIMessages_parse_response::setAttachments(const QList<OAIMessages_parse_response_attachments_inner> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIMessages_parse_response::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIMessages_parse_response::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIMessages_parse_response::getFromEmail() const {
    return m_from_email;
}
void OAIMessages_parse_response::setFromEmail(const QString &from_email) {
    m_from_email = from_email;
    m_from_email_isSet = true;
}

bool OAIMessages_parse_response::is_from_email_Set() const{
    return m_from_email_isSet;
}

bool OAIMessages_parse_response::is_from_email_Valid() const{
    return m_from_email_isValid;
}

QString OAIMessages_parse_response::getFromName() const {
    return m_from_name;
}
void OAIMessages_parse_response::setFromName(const QString &from_name) {
    m_from_name = from_name;
    m_from_name_isSet = true;
}

bool OAIMessages_parse_response::is_from_name_Set() const{
    return m_from_name_isSet;
}

bool OAIMessages_parse_response::is_from_name_Valid() const{
    return m_from_name_isValid;
}

OAIMessages_content_response_headers OAIMessages_parse_response::getHeaders() const {
    return m_headers;
}
void OAIMessages_parse_response::setHeaders(const OAIMessages_content_response_headers &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIMessages_parse_response::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIMessages_parse_response::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIMessages_parse_response::getHtml() const {
    return m_html;
}
void OAIMessages_parse_response::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIMessages_parse_response::is_html_Set() const{
    return m_html_isSet;
}

bool OAIMessages_parse_response::is_html_Valid() const{
    return m_html_isValid;
}

QList<OAIMessages_content_response_attachments_inner> OAIMessages_parse_response::getImages() const {
    return m_images;
}
void OAIMessages_parse_response::setImages(const QList<OAIMessages_content_response_attachments_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIMessages_parse_response::is_images_Set() const{
    return m_images_isSet;
}

bool OAIMessages_parse_response::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIMessages_parse_response::getSubject() const {
    return m_subject;
}
void OAIMessages_parse_response::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIMessages_parse_response::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMessages_parse_response::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIMessages_parse_response::getText() const {
    return m_text;
}
void OAIMessages_parse_response::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessages_parse_response::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessages_parse_response::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIMessages_content_response_to> OAIMessages_parse_response::getTo() const {
    return m_to;
}
void OAIMessages_parse_response::setTo(const QList<OAIMessages_content_response_to> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessages_parse_response::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessages_parse_response::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessages_parse_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_parse_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
