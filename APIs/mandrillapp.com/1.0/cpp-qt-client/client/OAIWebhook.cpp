/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_batches_sent_isSet = false;
    m_batches_sent_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_events_sent_isSet = false;
    m_events_sent_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_error_isSet = false;
    m_last_error_isValid = false;

    m_last_sent_at_isSet = false;
    m_last_sent_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("auth_key")]);
    m_auth_key_isSet = !json[QString("auth_key")].isNull() && m_auth_key_isValid;

    m_batches_sent_isValid = ::OpenAPI::fromJsonValue(m_batches_sent, json[QString("batches_sent")]);
    m_batches_sent_isSet = !json[QString("batches_sent")].isNull() && m_batches_sent_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_events_sent_isValid = ::OpenAPI::fromJsonValue(m_events_sent, json[QString("events_sent")]);
    m_events_sent_isSet = !json[QString("events_sent")].isNull() && m_events_sent_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_error_isValid = ::OpenAPI::fromJsonValue(m_last_error, json[QString("last_error")]);
    m_last_error_isSet = !json[QString("last_error")].isNull() && m_last_error_isValid;

    m_last_sent_at_isValid = ::OpenAPI::fromJsonValue(m_last_sent_at, json[QString("last_sent_at")]);
    m_last_sent_at_isSet = !json[QString("last_sent_at")].isNull() && m_last_sent_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_key_isSet) {
        obj.insert(QString("auth_key"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_batches_sent_isSet) {
        obj.insert(QString("batches_sent"), ::OpenAPI::toJsonValue(m_batches_sent));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_events_sent_isSet) {
        obj.insert(QString("events_sent"), ::OpenAPI::toJsonValue(m_events_sent));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_error_isSet) {
        obj.insert(QString("last_error"), ::OpenAPI::toJsonValue(m_last_error));
    }
    if (m_last_sent_at_isSet) {
        obj.insert(QString("last_sent_at"), ::OpenAPI::toJsonValue(m_last_sent_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWebhook::getAuthKey() const {
    return m_auth_key;
}
void OAIWebhook::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIWebhook::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIWebhook::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

qint32 OAIWebhook::getBatchesSent() const {
    return m_batches_sent;
}
void OAIWebhook::setBatchesSent(const qint32 &batches_sent) {
    m_batches_sent = batches_sent;
    m_batches_sent_isSet = true;
}

bool OAIWebhook::is_batches_sent_Set() const{
    return m_batches_sent_isSet;
}

bool OAIWebhook::is_batches_sent_Valid() const{
    return m_batches_sent_isValid;
}

QString OAIWebhook::getCreatedAt() const {
    return m_created_at;
}
void OAIWebhook::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWebhook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWebhook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIWebhook::getDescription() const {
    return m_description;
}
void OAIWebhook::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebhook::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebhook::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIWebhook::getEvents() const {
    return m_events;
}
void OAIWebhook::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhook::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhook::is_events_Valid() const{
    return m_events_isValid;
}

qint32 OAIWebhook::getEventsSent() const {
    return m_events_sent;
}
void OAIWebhook::setEventsSent(const qint32 &events_sent) {
    m_events_sent = events_sent;
    m_events_sent_isSet = true;
}

bool OAIWebhook::is_events_sent_Set() const{
    return m_events_sent_isSet;
}

bool OAIWebhook::is_events_sent_Valid() const{
    return m_events_sent_isValid;
}

qint32 OAIWebhook::getId() const {
    return m_id;
}
void OAIWebhook::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhook::getLastError() const {
    return m_last_error;
}
void OAIWebhook::setLastError(const QString &last_error) {
    m_last_error = last_error;
    m_last_error_isSet = true;
}

bool OAIWebhook::is_last_error_Set() const{
    return m_last_error_isSet;
}

bool OAIWebhook::is_last_error_Valid() const{
    return m_last_error_isValid;
}

QString OAIWebhook::getLastSentAt() const {
    return m_last_sent_at;
}
void OAIWebhook::setLastSentAt(const QString &last_sent_at) {
    m_last_sent_at = last_sent_at;
    m_last_sent_at_isSet = true;
}

bool OAIWebhook::is_last_sent_at_Set() const{
    return m_last_sent_at_isSet;
}

bool OAIWebhook::is_last_sent_at_Valid() const{
    return m_last_sent_at_isValid;
}

QString OAIWebhook::getUrl() const {
    return m_url;
}
void OAIWebhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batches_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
