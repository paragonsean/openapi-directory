/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExports_info_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExports_info_response::OAIExports_info_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExports_info_response::OAIExports_info_response() {
    this->initializeModel();
}

OAIExports_info_response::~OAIExports_info_response() {}

void OAIExports_info_response::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_result_url_isSet = false;
    m_result_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExports_info_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExports_info_response::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_result_url_isValid = ::OpenAPI::fromJsonValue(m_result_url, json[QString("result_url")]);
    m_result_url_isSet = !json[QString("result_url")].isNull() && m_result_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExports_info_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExports_info_response::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_result_url_isSet) {
        obj.insert(QString("result_url"), ::OpenAPI::toJsonValue(m_result_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExports_info_response::getCreatedAt() const {
    return m_created_at;
}
void OAIExports_info_response::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIExports_info_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIExports_info_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIExports_info_response::getFinishedAt() const {
    return m_finished_at;
}
void OAIExports_info_response::setFinishedAt(const QString &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIExports_info_response::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIExports_info_response::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QString OAIExports_info_response::getId() const {
    return m_id;
}
void OAIExports_info_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExports_info_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExports_info_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExports_info_response::getResultUrl() const {
    return m_result_url;
}
void OAIExports_info_response::setResultUrl(const QString &result_url) {
    m_result_url = result_url;
    m_result_url_isSet = true;
}

bool OAIExports_info_response::is_result_url_Set() const{
    return m_result_url_isSet;
}

bool OAIExports_info_response::is_result_url_Valid() const{
    return m_result_url_isValid;
}

QString OAIExports_info_response::getState() const {
    return m_state;
}
void OAIExports_info_response::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExports_info_response::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExports_info_response::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIExports_info_response::getType() const {
    return m_type;
}
void OAIExports_info_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExports_info_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExports_info_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExports_info_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExports_info_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
