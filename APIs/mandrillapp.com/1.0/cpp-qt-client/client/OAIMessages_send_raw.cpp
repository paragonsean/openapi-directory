/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_send_raw.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_send_raw::OAIMessages_send_raw(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_send_raw::OAIMessages_send_raw() {
    this->initializeModel();
}

OAIMessages_send_raw::~OAIMessages_send_raw() {}

void OAIMessages_send_raw::initializeModel() {

    m_async_isSet = false;
    m_async_isValid = false;

    m_from_email_isSet = false;
    m_from_email_isValid = false;

    m_from_name_isSet = false;
    m_from_name_isValid = false;

    m_ip_pool_isSet = false;
    m_ip_pool_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_raw_message_isSet = false;
    m_raw_message_isValid = false;

    m_send_at_isSet = false;
    m_send_at_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessages_send_raw::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_send_raw::fromJsonObject(QJsonObject json) {

    m_async_isValid = ::OpenAPI::fromJsonValue(m_async, json[QString("async")]);
    m_async_isSet = !json[QString("async")].isNull() && m_async_isValid;

    m_from_email_isValid = ::OpenAPI::fromJsonValue(m_from_email, json[QString("from_email")]);
    m_from_email_isSet = !json[QString("from_email")].isNull() && m_from_email_isValid;

    m_from_name_isValid = ::OpenAPI::fromJsonValue(m_from_name, json[QString("from_name")]);
    m_from_name_isSet = !json[QString("from_name")].isNull() && m_from_name_isValid;

    m_ip_pool_isValid = ::OpenAPI::fromJsonValue(m_ip_pool, json[QString("ip_pool")]);
    m_ip_pool_isSet = !json[QString("ip_pool")].isNull() && m_ip_pool_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_raw_message_isValid = ::OpenAPI::fromJsonValue(m_raw_message, json[QString("raw_message")]);
    m_raw_message_isSet = !json[QString("raw_message")].isNull() && m_raw_message_isValid;

    m_send_at_isValid = ::OpenAPI::fromJsonValue(m_send_at, json[QString("send_at")]);
    m_send_at_isSet = !json[QString("send_at")].isNull() && m_send_at_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessages_send_raw::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_send_raw::asJsonObject() const {
    QJsonObject obj;
    if (m_async_isSet) {
        obj.insert(QString("async"), ::OpenAPI::toJsonValue(m_async));
    }
    if (m_from_email_isSet) {
        obj.insert(QString("from_email"), ::OpenAPI::toJsonValue(m_from_email));
    }
    if (m_from_name_isSet) {
        obj.insert(QString("from_name"), ::OpenAPI::toJsonValue(m_from_name));
    }
    if (m_ip_pool_isSet) {
        obj.insert(QString("ip_pool"), ::OpenAPI::toJsonValue(m_ip_pool));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_raw_message_isSet) {
        obj.insert(QString("raw_message"), ::OpenAPI::toJsonValue(m_raw_message));
    }
    if (m_send_at_isSet) {
        obj.insert(QString("send_at"), ::OpenAPI::toJsonValue(m_send_at));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

bool OAIMessages_send_raw::isAsync() const {
    return m_async;
}
void OAIMessages_send_raw::setAsync(const bool &async) {
    m_async = async;
    m_async_isSet = true;
}

bool OAIMessages_send_raw::is_async_Set() const{
    return m_async_isSet;
}

bool OAIMessages_send_raw::is_async_Valid() const{
    return m_async_isValid;
}

QString OAIMessages_send_raw::getFromEmail() const {
    return m_from_email;
}
void OAIMessages_send_raw::setFromEmail(const QString &from_email) {
    m_from_email = from_email;
    m_from_email_isSet = true;
}

bool OAIMessages_send_raw::is_from_email_Set() const{
    return m_from_email_isSet;
}

bool OAIMessages_send_raw::is_from_email_Valid() const{
    return m_from_email_isValid;
}

QString OAIMessages_send_raw::getFromName() const {
    return m_from_name;
}
void OAIMessages_send_raw::setFromName(const QString &from_name) {
    m_from_name = from_name;
    m_from_name_isSet = true;
}

bool OAIMessages_send_raw::is_from_name_Set() const{
    return m_from_name_isSet;
}

bool OAIMessages_send_raw::is_from_name_Valid() const{
    return m_from_name_isValid;
}

QString OAIMessages_send_raw::getIpPool() const {
    return m_ip_pool;
}
void OAIMessages_send_raw::setIpPool(const QString &ip_pool) {
    m_ip_pool = ip_pool;
    m_ip_pool_isSet = true;
}

bool OAIMessages_send_raw::is_ip_pool_Set() const{
    return m_ip_pool_isSet;
}

bool OAIMessages_send_raw::is_ip_pool_Valid() const{
    return m_ip_pool_isValid;
}

QString OAIMessages_send_raw::getKey() const {
    return m_key;
}
void OAIMessages_send_raw::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMessages_send_raw::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMessages_send_raw::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIMessages_send_raw::getRawMessage() const {
    return m_raw_message;
}
void OAIMessages_send_raw::setRawMessage(const QString &raw_message) {
    m_raw_message = raw_message;
    m_raw_message_isSet = true;
}

bool OAIMessages_send_raw::is_raw_message_Set() const{
    return m_raw_message_isSet;
}

bool OAIMessages_send_raw::is_raw_message_Valid() const{
    return m_raw_message_isValid;
}

QString OAIMessages_send_raw::getSendAt() const {
    return m_send_at;
}
void OAIMessages_send_raw::setSendAt(const QString &send_at) {
    m_send_at = send_at;
    m_send_at_isSet = true;
}

bool OAIMessages_send_raw::is_send_at_Set() const{
    return m_send_at_isSet;
}

bool OAIMessages_send_raw::is_send_at_Valid() const{
    return m_send_at_isValid;
}

QList<QString> OAIMessages_send_raw::getTo() const {
    return m_to;
}
void OAIMessages_send_raw::setTo(const QList<QString> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessages_send_raw::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessages_send_raw::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessages_send_raw::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_send_raw::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
