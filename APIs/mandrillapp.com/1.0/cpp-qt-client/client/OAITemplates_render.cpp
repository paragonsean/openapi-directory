/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplates_render.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplates_render::OAITemplates_render(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplates_render::OAITemplates_render() {
    this->initializeModel();
}

OAITemplates_render::~OAITemplates_render() {}

void OAITemplates_render::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_merge_vars_isSet = false;
    m_merge_vars_isValid = false;

    m_template_content_isSet = false;
    m_template_content_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;
}

void OAITemplates_render::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplates_render::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_merge_vars_isValid = ::OpenAPI::fromJsonValue(m_merge_vars, json[QString("merge_vars")]);
    m_merge_vars_isSet = !json[QString("merge_vars")].isNull() && m_merge_vars_isValid;

    m_template_content_isValid = ::OpenAPI::fromJsonValue(m_template_content, json[QString("template_content")]);
    m_template_content_isSet = !json[QString("template_content")].isNull() && m_template_content_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("template_name")]);
    m_template_name_isSet = !json[QString("template_name")].isNull() && m_template_name_isValid;
}

QString OAITemplates_render::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplates_render::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_merge_vars.size() > 0) {
        obj.insert(QString("merge_vars"), ::OpenAPI::toJsonValue(m_merge_vars));
    }
    if (m_template_content.size() > 0) {
        obj.insert(QString("template_content"), ::OpenAPI::toJsonValue(m_template_content));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("template_name"), ::OpenAPI::toJsonValue(m_template_name));
    }
    return obj;
}

QString OAITemplates_render::getKey() const {
    return m_key;
}
void OAITemplates_render::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITemplates_render::is_key_Set() const{
    return m_key_isSet;
}

bool OAITemplates_render::is_key_Valid() const{
    return m_key_isValid;
}

QList<OAIMessages_send_message_global_merge_vars_inner> OAITemplates_render::getMergeVars() const {
    return m_merge_vars;
}
void OAITemplates_render::setMergeVars(const QList<OAIMessages_send_message_global_merge_vars_inner> &merge_vars) {
    m_merge_vars = merge_vars;
    m_merge_vars_isSet = true;
}

bool OAITemplates_render::is_merge_vars_Set() const{
    return m_merge_vars_isSet;
}

bool OAITemplates_render::is_merge_vars_Valid() const{
    return m_merge_vars_isValid;
}

QList<OAIMessages_send_message_global_merge_vars_inner> OAITemplates_render::getTemplateContent() const {
    return m_template_content;
}
void OAITemplates_render::setTemplateContent(const QList<OAIMessages_send_message_global_merge_vars_inner> &template_content) {
    m_template_content = template_content;
    m_template_content_isSet = true;
}

bool OAITemplates_render::is_template_content_Set() const{
    return m_template_content_isSet;
}

bool OAITemplates_render::is_template_content_Valid() const{
    return m_template_content_isValid;
}

QString OAITemplates_render::getTemplateName() const {
    return m_template_name;
}
void OAITemplates_render::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAITemplates_render::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAITemplates_render::is_template_name_Valid() const{
    return m_template_name_isValid;
}

bool OAITemplates_render::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplates_render::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
