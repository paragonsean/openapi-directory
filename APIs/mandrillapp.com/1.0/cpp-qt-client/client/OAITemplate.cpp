/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplate::OAITemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplate::OAITemplate() {
    this->initializeModel();
}

OAITemplate::~OAITemplate() {}

void OAITemplate::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_from_email_isSet = false;
    m_from_email_isValid = false;

    m_from_name_isSet = false;
    m_from_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publish_isSet = false;
    m_publish_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAITemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplate::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_from_email_isValid = ::OpenAPI::fromJsonValue(m_from_email, json[QString("from_email")]);
    m_from_email_isSet = !json[QString("from_email")].isNull() && m_from_email_isValid;

    m_from_name_isValid = ::OpenAPI::fromJsonValue(m_from_name, json[QString("from_name")]);
    m_from_name_isSet = !json[QString("from_name")].isNull() && m_from_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publish_isValid = ::OpenAPI::fromJsonValue(m_publish, json[QString("publish")]);
    m_publish_isSet = !json[QString("publish")].isNull() && m_publish_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAITemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_from_email_isSet) {
        obj.insert(QString("from_email"), ::OpenAPI::toJsonValue(m_from_email));
    }
    if (m_from_name_isSet) {
        obj.insert(QString("from_name"), ::OpenAPI::toJsonValue(m_from_name));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publish_isSet) {
        obj.insert(QString("publish"), ::OpenAPI::toJsonValue(m_publish));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAITemplate::getCode() const {
    return m_code;
}
void OAITemplate::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITemplate::is_code_Set() const{
    return m_code_isSet;
}

bool OAITemplate::is_code_Valid() const{
    return m_code_isValid;
}

QString OAITemplate::getFromEmail() const {
    return m_from_email;
}
void OAITemplate::setFromEmail(const QString &from_email) {
    m_from_email = from_email;
    m_from_email_isSet = true;
}

bool OAITemplate::is_from_email_Set() const{
    return m_from_email_isSet;
}

bool OAITemplate::is_from_email_Valid() const{
    return m_from_email_isValid;
}

QString OAITemplate::getFromName() const {
    return m_from_name;
}
void OAITemplate::setFromName(const QString &from_name) {
    m_from_name = from_name;
    m_from_name_isSet = true;
}

bool OAITemplate::is_from_name_Set() const{
    return m_from_name_isSet;
}

bool OAITemplate::is_from_name_Valid() const{
    return m_from_name_isValid;
}

QString OAITemplate::getKey() const {
    return m_key;
}
void OAITemplate::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITemplate::is_key_Set() const{
    return m_key_isSet;
}

bool OAITemplate::is_key_Valid() const{
    return m_key_isValid;
}

QList<QString> OAITemplate::getLabels() const {
    return m_labels;
}
void OAITemplate::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAITemplate::getName() const {
    return m_name;
}
void OAITemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplate::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITemplate::isPublish() const {
    return m_publish;
}
void OAITemplate::setPublish(const bool &publish) {
    m_publish = publish;
    m_publish_isSet = true;
}

bool OAITemplate::is_publish_Set() const{
    return m_publish_isSet;
}

bool OAITemplate::is_publish_Valid() const{
    return m_publish_isValid;
}

QString OAITemplate::getSubject() const {
    return m_subject;
}
void OAITemplate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITemplate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITemplate::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAITemplate::getText() const {
    return m_text;
}
void OAITemplate::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITemplate::is_text_Set() const{
    return m_text_isSet;
}

bool OAITemplate::is_text_Valid() const{
    return m_text_isValid;
}

bool OAITemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
