/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_send_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_send_template::OAIMessages_send_template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_send_template::OAIMessages_send_template() {
    this->initializeModel();
}

OAIMessages_send_template::~OAIMessages_send_template() {}

void OAIMessages_send_template::initializeModel() {

    m_async_isSet = false;
    m_async_isValid = false;

    m_ip_pool_isSet = false;
    m_ip_pool_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_send_at_isSet = false;
    m_send_at_isValid = false;

    m_template_content_isSet = false;
    m_template_content_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;
}

void OAIMessages_send_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_send_template::fromJsonObject(QJsonObject json) {

    m_async_isValid = ::OpenAPI::fromJsonValue(m_async, json[QString("async")]);
    m_async_isSet = !json[QString("async")].isNull() && m_async_isValid;

    m_ip_pool_isValid = ::OpenAPI::fromJsonValue(m_ip_pool, json[QString("ip_pool")]);
    m_ip_pool_isSet = !json[QString("ip_pool")].isNull() && m_ip_pool_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_send_at_isValid = ::OpenAPI::fromJsonValue(m_send_at, json[QString("send_at")]);
    m_send_at_isSet = !json[QString("send_at")].isNull() && m_send_at_isValid;

    m_template_content_isValid = ::OpenAPI::fromJsonValue(m_template_content, json[QString("template_content")]);
    m_template_content_isSet = !json[QString("template_content")].isNull() && m_template_content_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("template_name")]);
    m_template_name_isSet = !json[QString("template_name")].isNull() && m_template_name_isValid;
}

QString OAIMessages_send_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_send_template::asJsonObject() const {
    QJsonObject obj;
    if (m_async_isSet) {
        obj.insert(QString("async"), ::OpenAPI::toJsonValue(m_async));
    }
    if (m_ip_pool_isSet) {
        obj.insert(QString("ip_pool"), ::OpenAPI::toJsonValue(m_ip_pool));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_send_at_isSet) {
        obj.insert(QString("send_at"), ::OpenAPI::toJsonValue(m_send_at));
    }
    if (m_template_content.size() > 0) {
        obj.insert(QString("template_content"), ::OpenAPI::toJsonValue(m_template_content));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("template_name"), ::OpenAPI::toJsonValue(m_template_name));
    }
    return obj;
}

bool OAIMessages_send_template::isAsync() const {
    return m_async;
}
void OAIMessages_send_template::setAsync(const bool &async) {
    m_async = async;
    m_async_isSet = true;
}

bool OAIMessages_send_template::is_async_Set() const{
    return m_async_isSet;
}

bool OAIMessages_send_template::is_async_Valid() const{
    return m_async_isValid;
}

QString OAIMessages_send_template::getIpPool() const {
    return m_ip_pool;
}
void OAIMessages_send_template::setIpPool(const QString &ip_pool) {
    m_ip_pool = ip_pool;
    m_ip_pool_isSet = true;
}

bool OAIMessages_send_template::is_ip_pool_Set() const{
    return m_ip_pool_isSet;
}

bool OAIMessages_send_template::is_ip_pool_Valid() const{
    return m_ip_pool_isValid;
}

QString OAIMessages_send_template::getKey() const {
    return m_key;
}
void OAIMessages_send_template::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMessages_send_template::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMessages_send_template::is_key_Valid() const{
    return m_key_isValid;
}

OAIMessages_send_message OAIMessages_send_template::getMessage() const {
    return m_message;
}
void OAIMessages_send_template::setMessage(const OAIMessages_send_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMessages_send_template::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMessages_send_template::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIMessages_send_template::getSendAt() const {
    return m_send_at;
}
void OAIMessages_send_template::setSendAt(const QString &send_at) {
    m_send_at = send_at;
    m_send_at_isSet = true;
}

bool OAIMessages_send_template::is_send_at_Set() const{
    return m_send_at_isSet;
}

bool OAIMessages_send_template::is_send_at_Valid() const{
    return m_send_at_isValid;
}

QList<OAIMessages_send_message_global_merge_vars_inner> OAIMessages_send_template::getTemplateContent() const {
    return m_template_content;
}
void OAIMessages_send_template::setTemplateContent(const QList<OAIMessages_send_message_global_merge_vars_inner> &template_content) {
    m_template_content = template_content;
    m_template_content_isSet = true;
}

bool OAIMessages_send_template::is_template_content_Set() const{
    return m_template_content_isSet;
}

bool OAIMessages_send_template::is_template_content_Valid() const{
    return m_template_content_isValid;
}

QString OAIMessages_send_template::getTemplateName() const {
    return m_template_name;
}
void OAIMessages_send_template::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIMessages_send_template::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIMessages_send_template::is_template_name_Valid() const{
    return m_template_name_isValid;
}

bool OAIMessages_send_template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_send_template::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
