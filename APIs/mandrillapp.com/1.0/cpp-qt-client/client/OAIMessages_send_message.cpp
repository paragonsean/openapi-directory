/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_send_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_send_message::OAIMessages_send_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_send_message::OAIMessages_send_message() {
    this->initializeModel();
}

OAIMessages_send_message::~OAIMessages_send_message() {}

void OAIMessages_send_message::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_bcc_address_isSet = false;
    m_bcc_address_isValid = false;

    m_from_email_isSet = false;
    m_from_email_isValid = false;

    m_from_name_isSet = false;
    m_from_name_isValid = false;

    m_global_merge_vars_isSet = false;
    m_global_merge_vars_isValid = false;

    m_google_analytics_campaign_isSet = false;
    m_google_analytics_campaign_isValid = false;

    m_google_analytics_domains_isSet = false;
    m_google_analytics_domains_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_important_isSet = false;
    m_important_isValid = false;

    m_merge_isSet = false;
    m_merge_isValid = false;

    m_merge_vars_isSet = false;
    m_merge_vars_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recipient_metadata_isSet = false;
    m_recipient_metadata_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIMessages_send_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_send_message::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_bcc_address_isValid = ::OpenAPI::fromJsonValue(m_bcc_address, json[QString("bcc_address")]);
    m_bcc_address_isSet = !json[QString("bcc_address")].isNull() && m_bcc_address_isValid;

    m_from_email_isValid = ::OpenAPI::fromJsonValue(m_from_email, json[QString("from_email")]);
    m_from_email_isSet = !json[QString("from_email")].isNull() && m_from_email_isValid;

    m_from_name_isValid = ::OpenAPI::fromJsonValue(m_from_name, json[QString("from_name")]);
    m_from_name_isSet = !json[QString("from_name")].isNull() && m_from_name_isValid;

    m_global_merge_vars_isValid = ::OpenAPI::fromJsonValue(m_global_merge_vars, json[QString("global_merge_vars")]);
    m_global_merge_vars_isSet = !json[QString("global_merge_vars")].isNull() && m_global_merge_vars_isValid;

    m_google_analytics_campaign_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_campaign, json[QString("google_analytics_campaign")]);
    m_google_analytics_campaign_isSet = !json[QString("google_analytics_campaign")].isNull() && m_google_analytics_campaign_isValid;

    m_google_analytics_domains_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_domains, json[QString("google_analytics_domains")]);
    m_google_analytics_domains_isSet = !json[QString("google_analytics_domains")].isNull() && m_google_analytics_domains_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_important_isValid = ::OpenAPI::fromJsonValue(m_important, json[QString("important")]);
    m_important_isSet = !json[QString("important")].isNull() && m_important_isValid;

    m_merge_isValid = ::OpenAPI::fromJsonValue(m_merge, json[QString("merge")]);
    m_merge_isSet = !json[QString("merge")].isNull() && m_merge_isValid;

    m_merge_vars_isValid = ::OpenAPI::fromJsonValue(m_merge_vars, json[QString("merge_vars")]);
    m_merge_vars_isSet = !json[QString("merge_vars")].isNull() && m_merge_vars_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_recipient_metadata_isValid = ::OpenAPI::fromJsonValue(m_recipient_metadata, json[QString("recipient_metadata")]);
    m_recipient_metadata_isSet = !json[QString("recipient_metadata")].isNull() && m_recipient_metadata_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIMessages_send_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_send_message::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_bcc_address_isSet) {
        obj.insert(QString("bcc_address"), ::OpenAPI::toJsonValue(m_bcc_address));
    }
    if (m_from_email_isSet) {
        obj.insert(QString("from_email"), ::OpenAPI::toJsonValue(m_from_email));
    }
    if (m_from_name_isSet) {
        obj.insert(QString("from_name"), ::OpenAPI::toJsonValue(m_from_name));
    }
    if (m_global_merge_vars.size() > 0) {
        obj.insert(QString("global_merge_vars"), ::OpenAPI::toJsonValue(m_global_merge_vars));
    }
    if (m_google_analytics_campaign_isSet) {
        obj.insert(QString("google_analytics_campaign"), ::OpenAPI::toJsonValue(m_google_analytics_campaign));
    }
    if (m_google_analytics_domains.size() > 0) {
        obj.insert(QString("google_analytics_domains"), ::OpenAPI::toJsonValue(m_google_analytics_domains));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_important_isSet) {
        obj.insert(QString("important"), ::OpenAPI::toJsonValue(m_important));
    }
    if (m_merge_isSet) {
        obj.insert(QString("merge"), ::OpenAPI::toJsonValue(m_merge));
    }
    if (m_merge_vars.size() > 0) {
        obj.insert(QString("merge_vars"), ::OpenAPI::toJsonValue(m_merge_vars));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recipient_metadata.size() > 0) {
        obj.insert(QString("recipient_metadata"), ::OpenAPI::toJsonValue(m_recipient_metadata));
    }
    if (m_subaccount_isSet) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QList<OAIMessages_content_response_attachments_inner> OAIMessages_send_message::getAttachments() const {
    return m_attachments;
}
void OAIMessages_send_message::setAttachments(const QList<OAIMessages_content_response_attachments_inner> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIMessages_send_message::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIMessages_send_message::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIMessages_send_message::getBccAddress() const {
    return m_bcc_address;
}
void OAIMessages_send_message::setBccAddress(const QString &bcc_address) {
    m_bcc_address = bcc_address;
    m_bcc_address_isSet = true;
}

bool OAIMessages_send_message::is_bcc_address_Set() const{
    return m_bcc_address_isSet;
}

bool OAIMessages_send_message::is_bcc_address_Valid() const{
    return m_bcc_address_isValid;
}

QString OAIMessages_send_message::getFromEmail() const {
    return m_from_email;
}
void OAIMessages_send_message::setFromEmail(const QString &from_email) {
    m_from_email = from_email;
    m_from_email_isSet = true;
}

bool OAIMessages_send_message::is_from_email_Set() const{
    return m_from_email_isSet;
}

bool OAIMessages_send_message::is_from_email_Valid() const{
    return m_from_email_isValid;
}

QString OAIMessages_send_message::getFromName() const {
    return m_from_name;
}
void OAIMessages_send_message::setFromName(const QString &from_name) {
    m_from_name = from_name;
    m_from_name_isSet = true;
}

bool OAIMessages_send_message::is_from_name_Set() const{
    return m_from_name_isSet;
}

bool OAIMessages_send_message::is_from_name_Valid() const{
    return m_from_name_isValid;
}

QList<OAIMessages_send_message_global_merge_vars_inner> OAIMessages_send_message::getGlobalMergeVars() const {
    return m_global_merge_vars;
}
void OAIMessages_send_message::setGlobalMergeVars(const QList<OAIMessages_send_message_global_merge_vars_inner> &global_merge_vars) {
    m_global_merge_vars = global_merge_vars;
    m_global_merge_vars_isSet = true;
}

bool OAIMessages_send_message::is_global_merge_vars_Set() const{
    return m_global_merge_vars_isSet;
}

bool OAIMessages_send_message::is_global_merge_vars_Valid() const{
    return m_global_merge_vars_isValid;
}

QString OAIMessages_send_message::getGoogleAnalyticsCampaign() const {
    return m_google_analytics_campaign;
}
void OAIMessages_send_message::setGoogleAnalyticsCampaign(const QString &google_analytics_campaign) {
    m_google_analytics_campaign = google_analytics_campaign;
    m_google_analytics_campaign_isSet = true;
}

bool OAIMessages_send_message::is_google_analytics_campaign_Set() const{
    return m_google_analytics_campaign_isSet;
}

bool OAIMessages_send_message::is_google_analytics_campaign_Valid() const{
    return m_google_analytics_campaign_isValid;
}

QList<QString> OAIMessages_send_message::getGoogleAnalyticsDomains() const {
    return m_google_analytics_domains;
}
void OAIMessages_send_message::setGoogleAnalyticsDomains(const QList<QString> &google_analytics_domains) {
    m_google_analytics_domains = google_analytics_domains;
    m_google_analytics_domains_isSet = true;
}

bool OAIMessages_send_message::is_google_analytics_domains_Set() const{
    return m_google_analytics_domains_isSet;
}

bool OAIMessages_send_message::is_google_analytics_domains_Valid() const{
    return m_google_analytics_domains_isValid;
}

OAIMessages_content_response_headers OAIMessages_send_message::getHeaders() const {
    return m_headers;
}
void OAIMessages_send_message::setHeaders(const OAIMessages_content_response_headers &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIMessages_send_message::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIMessages_send_message::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIMessages_send_message::getHtml() const {
    return m_html;
}
void OAIMessages_send_message::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIMessages_send_message::is_html_Set() const{
    return m_html_isSet;
}

bool OAIMessages_send_message::is_html_Valid() const{
    return m_html_isValid;
}

QList<OAIMessages_content_response_attachments_inner> OAIMessages_send_message::getImages() const {
    return m_images;
}
void OAIMessages_send_message::setImages(const QList<OAIMessages_content_response_attachments_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIMessages_send_message::is_images_Set() const{
    return m_images_isSet;
}

bool OAIMessages_send_message::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIMessages_send_message::isImportant() const {
    return m_important;
}
void OAIMessages_send_message::setImportant(const bool &important) {
    m_important = important;
    m_important_isSet = true;
}

bool OAIMessages_send_message::is_important_Set() const{
    return m_important_isSet;
}

bool OAIMessages_send_message::is_important_Valid() const{
    return m_important_isValid;
}

bool OAIMessages_send_message::isMerge() const {
    return m_merge;
}
void OAIMessages_send_message::setMerge(const bool &merge) {
    m_merge = merge;
    m_merge_isSet = true;
}

bool OAIMessages_send_message::is_merge_Set() const{
    return m_merge_isSet;
}

bool OAIMessages_send_message::is_merge_Valid() const{
    return m_merge_isValid;
}

QList<OAIMessages_send_message_merge_vars_inner> OAIMessages_send_message::getMergeVars() const {
    return m_merge_vars;
}
void OAIMessages_send_message::setMergeVars(const QList<OAIMessages_send_message_merge_vars_inner> &merge_vars) {
    m_merge_vars = merge_vars;
    m_merge_vars_isSet = true;
}

bool OAIMessages_send_message::is_merge_vars_Set() const{
    return m_merge_vars_isSet;
}

bool OAIMessages_send_message::is_merge_vars_Valid() const{
    return m_merge_vars_isValid;
}

OAIMessages_send_message_metadata OAIMessages_send_message::getMetadata() const {
    return m_metadata;
}
void OAIMessages_send_message::setMetadata(const OAIMessages_send_message_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIMessages_send_message::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIMessages_send_message::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMessages_send_message_recipient_metadata_inner> OAIMessages_send_message::getRecipientMetadata() const {
    return m_recipient_metadata;
}
void OAIMessages_send_message::setRecipientMetadata(const QList<OAIMessages_send_message_recipient_metadata_inner> &recipient_metadata) {
    m_recipient_metadata = recipient_metadata;
    m_recipient_metadata_isSet = true;
}

bool OAIMessages_send_message::is_recipient_metadata_Set() const{
    return m_recipient_metadata_isSet;
}

bool OAIMessages_send_message::is_recipient_metadata_Valid() const{
    return m_recipient_metadata_isValid;
}

QString OAIMessages_send_message::getSubaccount() const {
    return m_subaccount;
}
void OAIMessages_send_message::setSubaccount(const QString &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIMessages_send_message::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIMessages_send_message::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

QString OAIMessages_send_message::getSubject() const {
    return m_subject;
}
void OAIMessages_send_message::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIMessages_send_message::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMessages_send_message::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAIMessages_send_message::getTags() const {
    return m_tags;
}
void OAIMessages_send_message::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMessages_send_message::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMessages_send_message::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIMessages_send_message::getText() const {
    return m_text;
}
void OAIMessages_send_message::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessages_send_message::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessages_send_message::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIMessages_send_message_to_inner> OAIMessages_send_message::getTo() const {
    return m_to;
}
void OAIMessages_send_message::setTo(const QList<OAIMessages_send_message_to_inner> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMessages_send_message::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMessages_send_message::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIMessages_send_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcc_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_merge_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_important_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_send_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
