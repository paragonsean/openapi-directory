/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrls_tracking_domains_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrls_tracking_domains_response_inner::OAIUrls_tracking_domains_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrls_tracking_domains_response_inner::OAIUrls_tracking_domains_response_inner() {
    this->initializeModel();
}

OAIUrls_tracking_domains_response_inner::~OAIUrls_tracking_domains_response_inner() {}

void OAIUrls_tracking_domains_response_inner::initializeModel() {

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_last_tested_at_isSet = false;
    m_last_tested_at_isValid = false;

    m_valid_tracking_isSet = false;
    m_valid_tracking_isValid = false;
}

void OAIUrls_tracking_domains_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrls_tracking_domains_response_inner::fromJsonObject(QJsonObject json) {

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("cname")]);
    m_cname_isSet = !json[QString("cname")].isNull() && m_cname_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_last_tested_at_isValid = ::OpenAPI::fromJsonValue(m_last_tested_at, json[QString("last_tested_at")]);
    m_last_tested_at_isSet = !json[QString("last_tested_at")].isNull() && m_last_tested_at_isValid;

    m_valid_tracking_isValid = ::OpenAPI::fromJsonValue(m_valid_tracking, json[QString("valid_tracking")]);
    m_valid_tracking_isSet = !json[QString("valid_tracking")].isNull() && m_valid_tracking_isValid;
}

QString OAIUrls_tracking_domains_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrls_tracking_domains_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cname.isSet()) {
        obj.insert(QString("cname"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_last_tested_at_isSet) {
        obj.insert(QString("last_tested_at"), ::OpenAPI::toJsonValue(m_last_tested_at));
    }
    if (m_valid_tracking_isSet) {
        obj.insert(QString("valid_tracking"), ::OpenAPI::toJsonValue(m_valid_tracking));
    }
    return obj;
}

OAISender_domain_info_dkim OAIUrls_tracking_domains_response_inner::getCname() const {
    return m_cname;
}
void OAIUrls_tracking_domains_response_inner::setCname(const OAISender_domain_info_dkim &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAIUrls_tracking_domains_response_inner::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAIUrls_tracking_domains_response_inner::is_cname_Valid() const{
    return m_cname_isValid;
}

QString OAIUrls_tracking_domains_response_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIUrls_tracking_domains_response_inner::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUrls_tracking_domains_response_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUrls_tracking_domains_response_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUrls_tracking_domains_response_inner::getDomain() const {
    return m_domain;
}
void OAIUrls_tracking_domains_response_inner::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIUrls_tracking_domains_response_inner::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIUrls_tracking_domains_response_inner::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIUrls_tracking_domains_response_inner::getLastTestedAt() const {
    return m_last_tested_at;
}
void OAIUrls_tracking_domains_response_inner::setLastTestedAt(const QString &last_tested_at) {
    m_last_tested_at = last_tested_at;
    m_last_tested_at_isSet = true;
}

bool OAIUrls_tracking_domains_response_inner::is_last_tested_at_Set() const{
    return m_last_tested_at_isSet;
}

bool OAIUrls_tracking_domains_response_inner::is_last_tested_at_Valid() const{
    return m_last_tested_at_isValid;
}

bool OAIUrls_tracking_domains_response_inner::isValidTracking() const {
    return m_valid_tracking;
}
void OAIUrls_tracking_domains_response_inner::setValidTracking(const bool &valid_tracking) {
    m_valid_tracking = valid_tracking;
    m_valid_tracking_isSet = true;
}

bool OAIUrls_tracking_domains_response_inner::is_valid_tracking_Set() const{
    return m_valid_tracking_isSet;
}

bool OAIUrls_tracking_domains_response_inner::is_valid_tracking_Valid() const{
    return m_valid_tracking_isValid;
}

bool OAIUrls_tracking_domains_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cname.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_tested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrls_tracking_domains_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
