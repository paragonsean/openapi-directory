/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsers_info_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsers_info_response::OAIUsers_info_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsers_info_response::OAIUsers_info_response() {
    this->initializeModel();
}

OAIUsers_info_response::~OAIUsers_info_response() {}

void OAIUsers_info_response::initializeModel() {

    m_backlog_isSet = false;
    m_backlog_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_hourly_quota_isSet = false;
    m_hourly_quota_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_reputation_isSet = false;
    m_reputation_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUsers_info_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsers_info_response::fromJsonObject(QJsonObject json) {

    m_backlog_isValid = ::OpenAPI::fromJsonValue(m_backlog, json[QString("backlog")]);
    m_backlog_isSet = !json[QString("backlog")].isNull() && m_backlog_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_hourly_quota_isValid = ::OpenAPI::fromJsonValue(m_hourly_quota, json[QString("hourly_quota")]);
    m_hourly_quota_isSet = !json[QString("hourly_quota")].isNull() && m_hourly_quota_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("public_id")]);
    m_public_id_isSet = !json[QString("public_id")].isNull() && m_public_id_isValid;

    m_reputation_isValid = ::OpenAPI::fromJsonValue(m_reputation, json[QString("reputation")]);
    m_reputation_isSet = !json[QString("reputation")].isNull() && m_reputation_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUsers_info_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsers_info_response::asJsonObject() const {
    QJsonObject obj;
    if (m_backlog_isSet) {
        obj.insert(QString("backlog"), ::OpenAPI::toJsonValue(m_backlog));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_hourly_quota_isSet) {
        obj.insert(QString("hourly_quota"), ::OpenAPI::toJsonValue(m_hourly_quota));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("public_id"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_reputation_isSet) {
        obj.insert(QString("reputation"), ::OpenAPI::toJsonValue(m_reputation));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

qint32 OAIUsers_info_response::getBacklog() const {
    return m_backlog;
}
void OAIUsers_info_response::setBacklog(const qint32 &backlog) {
    m_backlog = backlog;
    m_backlog_isSet = true;
}

bool OAIUsers_info_response::is_backlog_Set() const{
    return m_backlog_isSet;
}

bool OAIUsers_info_response::is_backlog_Valid() const{
    return m_backlog_isValid;
}

QString OAIUsers_info_response::getCreatedAt() const {
    return m_created_at;
}
void OAIUsers_info_response::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUsers_info_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUsers_info_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIUsers_info_response::getHourlyQuota() const {
    return m_hourly_quota;
}
void OAIUsers_info_response::setHourlyQuota(const qint32 &hourly_quota) {
    m_hourly_quota = hourly_quota;
    m_hourly_quota_isSet = true;
}

bool OAIUsers_info_response::is_hourly_quota_Set() const{
    return m_hourly_quota_isSet;
}

bool OAIUsers_info_response::is_hourly_quota_Valid() const{
    return m_hourly_quota_isValid;
}

QString OAIUsers_info_response::getPublicId() const {
    return m_public_id;
}
void OAIUsers_info_response::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIUsers_info_response::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIUsers_info_response::is_public_id_Valid() const{
    return m_public_id_isValid;
}

qint32 OAIUsers_info_response::getReputation() const {
    return m_reputation;
}
void OAIUsers_info_response::setReputation(const qint32 &reputation) {
    m_reputation = reputation;
    m_reputation_isSet = true;
}

bool OAIUsers_info_response::is_reputation_Set() const{
    return m_reputation_isSet;
}

bool OAIUsers_info_response::is_reputation_Valid() const{
    return m_reputation_isValid;
}

OAIUsers_info_response_stats OAIUsers_info_response::getStats() const {
    return m_stats;
}
void OAIUsers_info_response::setStats(const OAIUsers_info_response_stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIUsers_info_response::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIUsers_info_response::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIUsers_info_response::getUsername() const {
    return m_username;
}
void OAIUsers_info_response::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUsers_info_response::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUsers_info_response::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUsers_info_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backlog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsers_info_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
