/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessages_info_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessages_info_response::OAIMessages_info_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessages_info_response::OAIMessages_info_response() {
    this->initializeModel();
}

OAIMessages_info_response::~OAIMessages_info_response() {}

void OAIMessages_info_response::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_clicks_detail_isSet = false;
    m_clicks_detail_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_opens_isSet = false;
    m_opens_isValid = false;

    m_opens_detail_isSet = false;
    m_opens_detail_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_smtp_events_isSet = false;
    m_smtp_events_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;
}

void OAIMessages_info_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessages_info_response::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_clicks_detail_isValid = ::OpenAPI::fromJsonValue(m_clicks_detail, json[QString("clicks_detail")]);
    m_clicks_detail_isSet = !json[QString("clicks_detail")].isNull() && m_clicks_detail_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_opens_isValid = ::OpenAPI::fromJsonValue(m_opens, json[QString("opens")]);
    m_opens_isSet = !json[QString("opens")].isNull() && m_opens_isValid;

    m_opens_detail_isValid = ::OpenAPI::fromJsonValue(m_opens_detail, json[QString("opens_detail")]);
    m_opens_detail_isSet = !json[QString("opens_detail")].isNull() && m_opens_detail_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_smtp_events_isValid = ::OpenAPI::fromJsonValue(m_smtp_events, json[QString("smtp_events")]);
    m_smtp_events_isSet = !json[QString("smtp_events")].isNull() && m_smtp_events_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;
}

QString OAIMessages_info_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessages_info_response::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_clicks_detail.size() > 0) {
        obj.insert(QString("clicks_detail"), ::OpenAPI::toJsonValue(m_clicks_detail));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_opens_isSet) {
        obj.insert(QString("opens"), ::OpenAPI::toJsonValue(m_opens));
    }
    if (m_opens_detail.size() > 0) {
        obj.insert(QString("opens_detail"), ::OpenAPI::toJsonValue(m_opens_detail));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_smtp_events.size() > 0) {
        obj.insert(QString("smtp_events"), ::OpenAPI::toJsonValue(m_smtp_events));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    return obj;
}

QString OAIMessages_info_response::getId() const {
    return m__id;
}
void OAIMessages_info_response::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIMessages_info_response::is__id_Set() const{
    return m__id_isSet;
}

bool OAIMessages_info_response::is__id_Valid() const{
    return m__id_isValid;
}

qint32 OAIMessages_info_response::getClicks() const {
    return m_clicks;
}
void OAIMessages_info_response::setClicks(const qint32 &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIMessages_info_response::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIMessages_info_response::is_clicks_Valid() const{
    return m_clicks_isValid;
}

QList<OAIMessages_info_response_clicks_detail_inner> OAIMessages_info_response::getClicksDetail() const {
    return m_clicks_detail;
}
void OAIMessages_info_response::setClicksDetail(const QList<OAIMessages_info_response_clicks_detail_inner> &clicks_detail) {
    m_clicks_detail = clicks_detail;
    m_clicks_detail_isSet = true;
}

bool OAIMessages_info_response::is_clicks_detail_Set() const{
    return m_clicks_detail_isSet;
}

bool OAIMessages_info_response::is_clicks_detail_Valid() const{
    return m_clicks_detail_isValid;
}

QString OAIMessages_info_response::getEmail() const {
    return m_email;
}
void OAIMessages_info_response::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMessages_info_response::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMessages_info_response::is_email_Valid() const{
    return m_email_isValid;
}

OAIMessages_info_response_metadata OAIMessages_info_response::getMetadata() const {
    return m_metadata;
}
void OAIMessages_info_response::setMetadata(const OAIMessages_info_response_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIMessages_info_response::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIMessages_info_response::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIMessages_info_response::getOpens() const {
    return m_opens;
}
void OAIMessages_info_response::setOpens(const qint32 &opens) {
    m_opens = opens;
    m_opens_isSet = true;
}

bool OAIMessages_info_response::is_opens_Set() const{
    return m_opens_isSet;
}

bool OAIMessages_info_response::is_opens_Valid() const{
    return m_opens_isValid;
}

QList<OAIMessages_info_response_opens_detail_inner> OAIMessages_info_response::getOpensDetail() const {
    return m_opens_detail;
}
void OAIMessages_info_response::setOpensDetail(const QList<OAIMessages_info_response_opens_detail_inner> &opens_detail) {
    m_opens_detail = opens_detail;
    m_opens_detail_isSet = true;
}

bool OAIMessages_info_response::is_opens_detail_Set() const{
    return m_opens_detail_isSet;
}

bool OAIMessages_info_response::is_opens_detail_Valid() const{
    return m_opens_detail_isValid;
}

QString OAIMessages_info_response::getSender() const {
    return m_sender;
}
void OAIMessages_info_response::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIMessages_info_response::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIMessages_info_response::is_sender_Valid() const{
    return m_sender_isValid;
}

QList<OAIMessages_info_response_smtp_events_inner> OAIMessages_info_response::getSmtpEvents() const {
    return m_smtp_events;
}
void OAIMessages_info_response::setSmtpEvents(const QList<OAIMessages_info_response_smtp_events_inner> &smtp_events) {
    m_smtp_events = smtp_events;
    m_smtp_events_isSet = true;
}

bool OAIMessages_info_response::is_smtp_events_Set() const{
    return m_smtp_events_isSet;
}

bool OAIMessages_info_response::is_smtp_events_Valid() const{
    return m_smtp_events_isValid;
}

QString OAIMessages_info_response::getState() const {
    return m_state;
}
void OAIMessages_info_response::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMessages_info_response::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMessages_info_response::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMessages_info_response::getSubject() const {
    return m_subject;
}
void OAIMessages_info_response::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIMessages_info_response::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMessages_info_response::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAIMessages_info_response::getTags() const {
    return m_tags;
}
void OAIMessages_info_response::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMessages_info_response::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMessages_info_response::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIMessages_info_response::getRTemplate() const {
    return m_r_template;
}
void OAIMessages_info_response::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIMessages_info_response::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIMessages_info_response::is_r_template_Valid() const{
    return m_r_template_isValid;
}

qint32 OAIMessages_info_response::getTs() const {
    return m_ts;
}
void OAIMessages_info_response::setTs(const qint32 &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIMessages_info_response::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIMessages_info_response::is_ts_Valid() const{
    return m_ts_isValid;
}

bool OAIMessages_info_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clicks_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opens_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessages_info_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
