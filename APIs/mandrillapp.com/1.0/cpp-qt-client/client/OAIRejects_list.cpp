/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRejects_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRejects_list::OAIRejects_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRejects_list::OAIRejects_list() {
    this->initializeModel();
}

OAIRejects_list::~OAIRejects_list() {}

void OAIRejects_list::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_include_expired_isSet = false;
    m_include_expired_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_subaccount_isSet = false;
    m_subaccount_isValid = false;
}

void OAIRejects_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRejects_list::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_include_expired_isValid = ::OpenAPI::fromJsonValue(m_include_expired, json[QString("include_expired")]);
    m_include_expired_isSet = !json[QString("include_expired")].isNull() && m_include_expired_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_subaccount_isValid = ::OpenAPI::fromJsonValue(m_subaccount, json[QString("subaccount")]);
    m_subaccount_isSet = !json[QString("subaccount")].isNull() && m_subaccount_isValid;
}

QString OAIRejects_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRejects_list::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_include_expired_isSet) {
        obj.insert(QString("include_expired"), ::OpenAPI::toJsonValue(m_include_expired));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_subaccount_isSet) {
        obj.insert(QString("subaccount"), ::OpenAPI::toJsonValue(m_subaccount));
    }
    return obj;
}

QString OAIRejects_list::getEmail() const {
    return m_email;
}
void OAIRejects_list::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRejects_list::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRejects_list::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIRejects_list::isIncludeExpired() const {
    return m_include_expired;
}
void OAIRejects_list::setIncludeExpired(const bool &include_expired) {
    m_include_expired = include_expired;
    m_include_expired_isSet = true;
}

bool OAIRejects_list::is_include_expired_Set() const{
    return m_include_expired_isSet;
}

bool OAIRejects_list::is_include_expired_Valid() const{
    return m_include_expired_isValid;
}

QString OAIRejects_list::getKey() const {
    return m_key;
}
void OAIRejects_list::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIRejects_list::is_key_Set() const{
    return m_key_isSet;
}

bool OAIRejects_list::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIRejects_list::getSubaccount() const {
    return m_subaccount;
}
void OAIRejects_list::setSubaccount(const QString &subaccount) {
    m_subaccount = subaccount;
    m_subaccount_isSet = true;
}

bool OAIRejects_list::is_subaccount_Set() const{
    return m_subaccount_isSet;
}

bool OAIRejects_list::is_subaccount_Valid() const{
    return m_subaccount_isValid;
}

bool OAIRejects_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRejects_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
