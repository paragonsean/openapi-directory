/**
 * Mandrill
 * Mandrill is a reliable, scalable, and secure delivery API for transactional emails from websites and applications. It's ideal for sending data-driven transactional emails, including targeted e-commerce and personalized one-to-one messages. 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_send_status_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_send_status_inner::OAIMessage_send_status_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_send_status_inner::OAIMessage_send_status_inner() {
    this->initializeModel();
}

OAIMessage_send_status_inner::~OAIMessage_send_status_inner() {}

void OAIMessage_send_status_inner::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_reject_reason_isSet = false;
    m_reject_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMessage_send_status_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_send_status_inner::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_reject_reason_isValid = ::OpenAPI::fromJsonValue(m_reject_reason, json[QString("reject_reason")]);
    m_reject_reason_isSet = !json[QString("reject_reason")].isNull() && m_reject_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIMessage_send_status_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_send_status_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_reject_reason_isSet) {
        obj.insert(QString("reject_reason"), ::OpenAPI::toJsonValue(m_reject_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIMessage_send_status_inner::getId() const {
    return m__id;
}
void OAIMessage_send_status_inner::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIMessage_send_status_inner::is__id_Set() const{
    return m__id_isSet;
}

bool OAIMessage_send_status_inner::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIMessage_send_status_inner::getEmail() const {
    return m_email;
}
void OAIMessage_send_status_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMessage_send_status_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMessage_send_status_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIMessage_send_status_inner::getRejectReason() const {
    return m_reject_reason;
}
void OAIMessage_send_status_inner::setRejectReason(const QString &reject_reason) {
    m_reject_reason = reject_reason;
    m_reject_reason_isSet = true;
}

bool OAIMessage_send_status_inner::is_reject_reason_Set() const{
    return m_reject_reason_isSet;
}

bool OAIMessage_send_status_inner::is_reject_reason_Valid() const{
    return m_reject_reason_isValid;
}

QString OAIMessage_send_status_inner::getStatus() const {
    return m_status;
}
void OAIMessage_send_status_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessage_send_status_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessage_send_status_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMessage_send_status_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_send_status_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
