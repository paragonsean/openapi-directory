# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpsCheckCustomDnsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, valid: bool=None):
        """IpsCheckCustomDnsResponse - a model defined in OpenAPI

        :param error: The error of this IpsCheckCustomDnsResponse.
        :param valid: The valid of this IpsCheckCustomDnsResponse.
        """
        self.openapi_types = {
            'error': str,
            'valid': bool
        }

        self.attribute_map = {
            'error': 'error',
            'valid': 'valid'
        }

        self._error = error
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpsCheckCustomDnsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ips_check-custom-dns-response of this IpsCheckCustomDnsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this IpsCheckCustomDnsResponse.


        :return: The error of this IpsCheckCustomDnsResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this IpsCheckCustomDnsResponse.


        :param error: The error of this IpsCheckCustomDnsResponse.
        :type error: str
        """

        self._error = error

    @property
    def valid(self):
        """Gets the valid of this IpsCheckCustomDnsResponse.


        :return: The valid of this IpsCheckCustomDnsResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this IpsCheckCustomDnsResponse.


        :param valid: The valid of this IpsCheckCustomDnsResponse.
        :type valid: bool
        """

        self._valid = valid
