# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessagesSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_keys: List[str]=None, date_from: str=None, date_to: str=None, key: str=None, limit: int=None, query: str=None, senders: List[str]=None, tags: List[str]=None):
        """MessagesSearch - a model defined in OpenAPI

        :param api_keys: The api_keys of this MessagesSearch.
        :param date_from: The date_from of this MessagesSearch.
        :param date_to: The date_to of this MessagesSearch.
        :param key: The key of this MessagesSearch.
        :param limit: The limit of this MessagesSearch.
        :param query: The query of this MessagesSearch.
        :param senders: The senders of this MessagesSearch.
        :param tags: The tags of this MessagesSearch.
        """
        self.openapi_types = {
            'api_keys': List[str],
            'date_from': str,
            'date_to': str,
            'key': str,
            'limit': int,
            'query': str,
            'senders': List[str],
            'tags': List[str]
        }

        self.attribute_map = {
            'api_keys': 'api_keys',
            'date_from': 'date_from',
            'date_to': 'date_to',
            'key': 'key',
            'limit': 'limit',
            'query': 'query',
            'senders': 'senders',
            'tags': 'tags'
        }

        self._api_keys = api_keys
        self._date_from = date_from
        self._date_to = date_to
        self._key = key
        self._limit = limit
        self._query = query
        self._senders = senders
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_search of this MessagesSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_keys(self):
        """Gets the api_keys of this MessagesSearch.


        :return: The api_keys of this MessagesSearch.
        :rtype: List[str]
        """
        return self._api_keys

    @api_keys.setter
    def api_keys(self, api_keys):
        """Sets the api_keys of this MessagesSearch.


        :param api_keys: The api_keys of this MessagesSearch.
        :type api_keys: List[str]
        """

        self._api_keys = api_keys

    @property
    def date_from(self):
        """Gets the date_from of this MessagesSearch.


        :return: The date_from of this MessagesSearch.
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this MessagesSearch.


        :param date_from: The date_from of this MessagesSearch.
        :type date_from: str
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this MessagesSearch.


        :return: The date_to of this MessagesSearch.
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this MessagesSearch.


        :param date_to: The date_to of this MessagesSearch.
        :type date_to: str
        """

        self._date_to = date_to

    @property
    def key(self):
        """Gets the key of this MessagesSearch.


        :return: The key of this MessagesSearch.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MessagesSearch.


        :param key: The key of this MessagesSearch.
        :type key: str
        """

        self._key = key

    @property
    def limit(self):
        """Gets the limit of this MessagesSearch.


        :return: The limit of this MessagesSearch.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this MessagesSearch.


        :param limit: The limit of this MessagesSearch.
        :type limit: int
        """

        self._limit = limit

    @property
    def query(self):
        """Gets the query of this MessagesSearch.


        :return: The query of this MessagesSearch.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MessagesSearch.


        :param query: The query of this MessagesSearch.
        :type query: str
        """

        self._query = query

    @property
    def senders(self):
        """Gets the senders of this MessagesSearch.


        :return: The senders of this MessagesSearch.
        :rtype: List[str]
        """
        return self._senders

    @senders.setter
    def senders(self, senders):
        """Sets the senders of this MessagesSearch.


        :param senders: The senders of this MessagesSearch.
        :type senders: List[str]
        """

        self._senders = senders

    @property
    def tags(self):
        """Gets the tags of this MessagesSearch.


        :return: The tags of this MessagesSearch.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MessagesSearch.


        :param tags: The tags of this MessagesSearch.
        :type tags: List[str]
        """

        self._tags = tags
