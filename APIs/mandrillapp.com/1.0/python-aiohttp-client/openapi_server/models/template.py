# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Template(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, from_email: str=None, from_name: str=None, key: str=None, labels: List[str]=None, name: str=None, publish: bool=None, subject: str=None, text: str=None):
        """Template - a model defined in OpenAPI

        :param code: The code of this Template.
        :param from_email: The from_email of this Template.
        :param from_name: The from_name of this Template.
        :param key: The key of this Template.
        :param labels: The labels of this Template.
        :param name: The name of this Template.
        :param publish: The publish of this Template.
        :param subject: The subject of this Template.
        :param text: The text of this Template.
        """
        self.openapi_types = {
            'code': str,
            'from_email': str,
            'from_name': str,
            'key': str,
            'labels': List[str],
            'name': str,
            'publish': bool,
            'subject': str,
            'text': str
        }

        self.attribute_map = {
            'code': 'code',
            'from_email': 'from_email',
            'from_name': 'from_name',
            'key': 'key',
            'labels': 'labels',
            'name': 'name',
            'publish': 'publish',
            'subject': 'subject',
            'text': 'text'
        }

        self._code = code
        self._from_email = from_email
        self._from_name = from_name
        self._key = key
        self._labels = labels
        self._name = name
        self._publish = publish
        self._subject = subject
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Template':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The template of this Template.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Template.


        :return: The code of this Template.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Template.


        :param code: The code of this Template.
        :type code: str
        """

        self._code = code

    @property
    def from_email(self):
        """Gets the from_email of this Template.


        :return: The from_email of this Template.
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this Template.


        :param from_email: The from_email of this Template.
        :type from_email: str
        """

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this Template.


        :return: The from_name of this Template.
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this Template.


        :param from_name: The from_name of this Template.
        :type from_name: str
        """

        self._from_name = from_name

    @property
    def key(self):
        """Gets the key of this Template.


        :return: The key of this Template.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Template.


        :param key: The key of this Template.
        :type key: str
        """

        self._key = key

    @property
    def labels(self):
        """Gets the labels of this Template.


        :return: The labels of this Template.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Template.


        :param labels: The labels of this Template.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Template.


        :return: The name of this Template.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.


        :param name: The name of this Template.
        :type name: str
        """

        self._name = name

    @property
    def publish(self):
        """Gets the publish of this Template.


        :return: The publish of this Template.
        :rtype: bool
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this Template.


        :param publish: The publish of this Template.
        :type publish: bool
        """

        self._publish = publish

    @property
    def subject(self):
        """Gets the subject of this Template.


        :return: The subject of this Template.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Template.


        :param subject: The subject of this Template.
        :type subject: str
        """

        self._subject = subject

    @property
    def text(self):
        """Gets the text of this Template.


        :return: The text of this Template.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Template.


        :param text: The text of this Template.
        :type text: str
        """

        self._text = text
