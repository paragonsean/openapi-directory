# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.senders_info_response_stats import SendersInfoResponseStats
from openapi_server import util


class SendersInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, clicks: int=None, complaints: int=None, created_at: str=None, hard_bounces: int=None, opens: int=None, rejects: int=None, sent: int=None, soft_bounces: int=None, stats: SendersInfoResponseStats=None, unsubs: int=None):
        """SendersInfoResponse - a model defined in OpenAPI

        :param address: The address of this SendersInfoResponse.
        :param clicks: The clicks of this SendersInfoResponse.
        :param complaints: The complaints of this SendersInfoResponse.
        :param created_at: The created_at of this SendersInfoResponse.
        :param hard_bounces: The hard_bounces of this SendersInfoResponse.
        :param opens: The opens of this SendersInfoResponse.
        :param rejects: The rejects of this SendersInfoResponse.
        :param sent: The sent of this SendersInfoResponse.
        :param soft_bounces: The soft_bounces of this SendersInfoResponse.
        :param stats: The stats of this SendersInfoResponse.
        :param unsubs: The unsubs of this SendersInfoResponse.
        """
        self.openapi_types = {
            'address': str,
            'clicks': int,
            'complaints': int,
            'created_at': str,
            'hard_bounces': int,
            'opens': int,
            'rejects': int,
            'sent': int,
            'soft_bounces': int,
            'stats': SendersInfoResponseStats,
            'unsubs': int
        }

        self.attribute_map = {
            'address': 'address',
            'clicks': 'clicks',
            'complaints': 'complaints',
            'created_at': 'created_at',
            'hard_bounces': 'hard_bounces',
            'opens': 'opens',
            'rejects': 'rejects',
            'sent': 'sent',
            'soft_bounces': 'soft_bounces',
            'stats': 'stats',
            'unsubs': 'unsubs'
        }

        self._address = address
        self._clicks = clicks
        self._complaints = complaints
        self._created_at = created_at
        self._hard_bounces = hard_bounces
        self._opens = opens
        self._rejects = rejects
        self._sent = sent
        self._soft_bounces = soft_bounces
        self._stats = stats
        self._unsubs = unsubs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendersInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The senders_info-response of this SendersInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SendersInfoResponse.


        :return: The address of this SendersInfoResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SendersInfoResponse.


        :param address: The address of this SendersInfoResponse.
        :type address: str
        """

        self._address = address

    @property
    def clicks(self):
        """Gets the clicks of this SendersInfoResponse.


        :return: The clicks of this SendersInfoResponse.
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this SendersInfoResponse.


        :param clicks: The clicks of this SendersInfoResponse.
        :type clicks: int
        """

        self._clicks = clicks

    @property
    def complaints(self):
        """Gets the complaints of this SendersInfoResponse.


        :return: The complaints of this SendersInfoResponse.
        :rtype: int
        """
        return self._complaints

    @complaints.setter
    def complaints(self, complaints):
        """Sets the complaints of this SendersInfoResponse.


        :param complaints: The complaints of this SendersInfoResponse.
        :type complaints: int
        """

        self._complaints = complaints

    @property
    def created_at(self):
        """Gets the created_at of this SendersInfoResponse.


        :return: The created_at of this SendersInfoResponse.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SendersInfoResponse.


        :param created_at: The created_at of this SendersInfoResponse.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def hard_bounces(self):
        """Gets the hard_bounces of this SendersInfoResponse.


        :return: The hard_bounces of this SendersInfoResponse.
        :rtype: int
        """
        return self._hard_bounces

    @hard_bounces.setter
    def hard_bounces(self, hard_bounces):
        """Sets the hard_bounces of this SendersInfoResponse.


        :param hard_bounces: The hard_bounces of this SendersInfoResponse.
        :type hard_bounces: int
        """

        self._hard_bounces = hard_bounces

    @property
    def opens(self):
        """Gets the opens of this SendersInfoResponse.


        :return: The opens of this SendersInfoResponse.
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this SendersInfoResponse.


        :param opens: The opens of this SendersInfoResponse.
        :type opens: int
        """

        self._opens = opens

    @property
    def rejects(self):
        """Gets the rejects of this SendersInfoResponse.


        :return: The rejects of this SendersInfoResponse.
        :rtype: int
        """
        return self._rejects

    @rejects.setter
    def rejects(self, rejects):
        """Sets the rejects of this SendersInfoResponse.


        :param rejects: The rejects of this SendersInfoResponse.
        :type rejects: int
        """

        self._rejects = rejects

    @property
    def sent(self):
        """Gets the sent of this SendersInfoResponse.


        :return: The sent of this SendersInfoResponse.
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this SendersInfoResponse.


        :param sent: The sent of this SendersInfoResponse.
        :type sent: int
        """

        self._sent = sent

    @property
    def soft_bounces(self):
        """Gets the soft_bounces of this SendersInfoResponse.


        :return: The soft_bounces of this SendersInfoResponse.
        :rtype: int
        """
        return self._soft_bounces

    @soft_bounces.setter
    def soft_bounces(self, soft_bounces):
        """Sets the soft_bounces of this SendersInfoResponse.


        :param soft_bounces: The soft_bounces of this SendersInfoResponse.
        :type soft_bounces: int
        """

        self._soft_bounces = soft_bounces

    @property
    def stats(self):
        """Gets the stats of this SendersInfoResponse.


        :return: The stats of this SendersInfoResponse.
        :rtype: SendersInfoResponseStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this SendersInfoResponse.


        :param stats: The stats of this SendersInfoResponse.
        :type stats: SendersInfoResponseStats
        """

        self._stats = stats

    @property
    def unsubs(self):
        """Gets the unsubs of this SendersInfoResponse.


        :return: The unsubs of this SendersInfoResponse.
        :rtype: int
        """
        return self._unsubs

    @unsubs.setter
    def unsubs(self, unsubs):
        """Sets the unsubs of this SendersInfoResponse.


        :param unsubs: The unsubs of this SendersInfoResponse.
        :type unsubs: int
        """

        self._unsubs = unsubs
