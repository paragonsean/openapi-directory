# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.messages_content_response_attachments_inner import MessagesContentResponseAttachmentsInner
from openapi_server.models.messages_content_response_headers import MessagesContentResponseHeaders
from openapi_server.models.messages_content_response_to import MessagesContentResponseTo
from openapi_server import util


class MessagesContentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, attachments: List[MessagesContentResponseAttachmentsInner]=None, from_email: str=None, from_name: str=None, headers: MessagesContentResponseHeaders=None, html: str=None, subject: str=None, tags: List[str]=None, text: str=None, to: MessagesContentResponseTo=None, ts: int=None):
        """MessagesContentResponse - a model defined in OpenAPI

        :param id: The id of this MessagesContentResponse.
        :param attachments: The attachments of this MessagesContentResponse.
        :param from_email: The from_email of this MessagesContentResponse.
        :param from_name: The from_name of this MessagesContentResponse.
        :param headers: The headers of this MessagesContentResponse.
        :param html: The html of this MessagesContentResponse.
        :param subject: The subject of this MessagesContentResponse.
        :param tags: The tags of this MessagesContentResponse.
        :param text: The text of this MessagesContentResponse.
        :param to: The to of this MessagesContentResponse.
        :param ts: The ts of this MessagesContentResponse.
        """
        self.openapi_types = {
            'id': str,
            'attachments': List[MessagesContentResponseAttachmentsInner],
            'from_email': str,
            'from_name': str,
            'headers': MessagesContentResponseHeaders,
            'html': str,
            'subject': str,
            'tags': List[str],
            'text': str,
            'to': MessagesContentResponseTo,
            'ts': int
        }

        self.attribute_map = {
            'id': '_id',
            'attachments': 'attachments',
            'from_email': 'from_email',
            'from_name': 'from_name',
            'headers': 'headers',
            'html': 'html',
            'subject': 'subject',
            'tags': 'tags',
            'text': 'text',
            'to': 'to',
            'ts': 'ts'
        }

        self._id = id
        self._attachments = attachments
        self._from_email = from_email
        self._from_name = from_name
        self._headers = headers
        self._html = html
        self._subject = subject
        self._tags = tags
        self._text = text
        self._to = to
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesContentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_content-response of this MessagesContentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MessagesContentResponse.


        :return: The id of this MessagesContentResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessagesContentResponse.


        :param id: The id of this MessagesContentResponse.
        :type id: str
        """

        self._id = id

    @property
    def attachments(self):
        """Gets the attachments of this MessagesContentResponse.


        :return: The attachments of this MessagesContentResponse.
        :rtype: List[MessagesContentResponseAttachmentsInner]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MessagesContentResponse.


        :param attachments: The attachments of this MessagesContentResponse.
        :type attachments: List[MessagesContentResponseAttachmentsInner]
        """

        self._attachments = attachments

    @property
    def from_email(self):
        """Gets the from_email of this MessagesContentResponse.


        :return: The from_email of this MessagesContentResponse.
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this MessagesContentResponse.


        :param from_email: The from_email of this MessagesContentResponse.
        :type from_email: str
        """

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this MessagesContentResponse.


        :return: The from_name of this MessagesContentResponse.
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this MessagesContentResponse.


        :param from_name: The from_name of this MessagesContentResponse.
        :type from_name: str
        """

        self._from_name = from_name

    @property
    def headers(self):
        """Gets the headers of this MessagesContentResponse.


        :return: The headers of this MessagesContentResponse.
        :rtype: MessagesContentResponseHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this MessagesContentResponse.


        :param headers: The headers of this MessagesContentResponse.
        :type headers: MessagesContentResponseHeaders
        """

        self._headers = headers

    @property
    def html(self):
        """Gets the html of this MessagesContentResponse.


        :return: The html of this MessagesContentResponse.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this MessagesContentResponse.


        :param html: The html of this MessagesContentResponse.
        :type html: str
        """

        self._html = html

    @property
    def subject(self):
        """Gets the subject of this MessagesContentResponse.


        :return: The subject of this MessagesContentResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MessagesContentResponse.


        :param subject: The subject of this MessagesContentResponse.
        :type subject: str
        """

        self._subject = subject

    @property
    def tags(self):
        """Gets the tags of this MessagesContentResponse.


        :return: The tags of this MessagesContentResponse.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MessagesContentResponse.


        :param tags: The tags of this MessagesContentResponse.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def text(self):
        """Gets the text of this MessagesContentResponse.


        :return: The text of this MessagesContentResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessagesContentResponse.


        :param text: The text of this MessagesContentResponse.
        :type text: str
        """

        self._text = text

    @property
    def to(self):
        """Gets the to of this MessagesContentResponse.


        :return: The to of this MessagesContentResponse.
        :rtype: MessagesContentResponseTo
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessagesContentResponse.


        :param to: The to of this MessagesContentResponse.
        :type to: MessagesContentResponseTo
        """

        self._to = to

    @property
    def ts(self):
        """Gets the ts of this MessagesContentResponse.


        :return: The ts of this MessagesContentResponse.
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this MessagesContentResponse.


        :param ts: The ts of this MessagesContentResponse.
        :type ts: int
        """

        self._ts = ts
