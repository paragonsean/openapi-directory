# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.messages_send_message_global_merge_vars_inner import MessagesSendMessageGlobalMergeVarsInner
from openapi_server import util


class TemplatesRender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, merge_vars: List[MessagesSendMessageGlobalMergeVarsInner]=None, template_content: List[MessagesSendMessageGlobalMergeVarsInner]=None, template_name: str=None):
        """TemplatesRender - a model defined in OpenAPI

        :param key: The key of this TemplatesRender.
        :param merge_vars: The merge_vars of this TemplatesRender.
        :param template_content: The template_content of this TemplatesRender.
        :param template_name: The template_name of this TemplatesRender.
        """
        self.openapi_types = {
            'key': str,
            'merge_vars': List[MessagesSendMessageGlobalMergeVarsInner],
            'template_content': List[MessagesSendMessageGlobalMergeVarsInner],
            'template_name': str
        }

        self.attribute_map = {
            'key': 'key',
            'merge_vars': 'merge_vars',
            'template_content': 'template_content',
            'template_name': 'template_name'
        }

        self._key = key
        self._merge_vars = merge_vars
        self._template_content = template_content
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplatesRender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The templates_render of this TemplatesRender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this TemplatesRender.


        :return: The key of this TemplatesRender.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TemplatesRender.


        :param key: The key of this TemplatesRender.
        :type key: str
        """

        self._key = key

    @property
    def merge_vars(self):
        """Gets the merge_vars of this TemplatesRender.


        :return: The merge_vars of this TemplatesRender.
        :rtype: List[MessagesSendMessageGlobalMergeVarsInner]
        """
        return self._merge_vars

    @merge_vars.setter
    def merge_vars(self, merge_vars):
        """Sets the merge_vars of this TemplatesRender.


        :param merge_vars: The merge_vars of this TemplatesRender.
        :type merge_vars: List[MessagesSendMessageGlobalMergeVarsInner]
        """

        self._merge_vars = merge_vars

    @property
    def template_content(self):
        """Gets the template_content of this TemplatesRender.


        :return: The template_content of this TemplatesRender.
        :rtype: List[MessagesSendMessageGlobalMergeVarsInner]
        """
        return self._template_content

    @template_content.setter
    def template_content(self, template_content):
        """Sets the template_content of this TemplatesRender.


        :param template_content: The template_content of this TemplatesRender.
        :type template_content: List[MessagesSendMessageGlobalMergeVarsInner]
        """

        self._template_content = template_content

    @property
    def template_name(self):
        """Gets the template_name of this TemplatesRender.


        :return: The template_name of this TemplatesRender.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this TemplatesRender.


        :param template_name: The template_name of this TemplatesRender.
        :type template_name: str
        """

        self._template_name = template_name
