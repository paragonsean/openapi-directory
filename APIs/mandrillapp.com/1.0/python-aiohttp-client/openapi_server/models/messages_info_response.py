# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.messages_info_response_clicks_detail_inner import MessagesInfoResponseClicksDetailInner
from openapi_server.models.messages_info_response_metadata import MessagesInfoResponseMetadata
from openapi_server.models.messages_info_response_opens_detail_inner import MessagesInfoResponseOpensDetailInner
from openapi_server.models.messages_info_response_smtp_events_inner import MessagesInfoResponseSmtpEventsInner
from openapi_server import util


class MessagesInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, clicks: int=None, clicks_detail: List[MessagesInfoResponseClicksDetailInner]=None, email: str=None, metadata: MessagesInfoResponseMetadata=None, opens: int=None, opens_detail: List[MessagesInfoResponseOpensDetailInner]=None, sender: str=None, smtp_events: List[MessagesInfoResponseSmtpEventsInner]=None, state: str=None, subject: str=None, tags: List[str]=None, template: str=None, ts: int=None):
        """MessagesInfoResponse - a model defined in OpenAPI

        :param id: The id of this MessagesInfoResponse.
        :param clicks: The clicks of this MessagesInfoResponse.
        :param clicks_detail: The clicks_detail of this MessagesInfoResponse.
        :param email: The email of this MessagesInfoResponse.
        :param metadata: The metadata of this MessagesInfoResponse.
        :param opens: The opens of this MessagesInfoResponse.
        :param opens_detail: The opens_detail of this MessagesInfoResponse.
        :param sender: The sender of this MessagesInfoResponse.
        :param smtp_events: The smtp_events of this MessagesInfoResponse.
        :param state: The state of this MessagesInfoResponse.
        :param subject: The subject of this MessagesInfoResponse.
        :param tags: The tags of this MessagesInfoResponse.
        :param template: The template of this MessagesInfoResponse.
        :param ts: The ts of this MessagesInfoResponse.
        """
        self.openapi_types = {
            'id': str,
            'clicks': int,
            'clicks_detail': List[MessagesInfoResponseClicksDetailInner],
            'email': str,
            'metadata': MessagesInfoResponseMetadata,
            'opens': int,
            'opens_detail': List[MessagesInfoResponseOpensDetailInner],
            'sender': str,
            'smtp_events': List[MessagesInfoResponseSmtpEventsInner],
            'state': str,
            'subject': str,
            'tags': List[str],
            'template': str,
            'ts': int
        }

        self.attribute_map = {
            'id': '_id',
            'clicks': 'clicks',
            'clicks_detail': 'clicks_detail',
            'email': 'email',
            'metadata': 'metadata',
            'opens': 'opens',
            'opens_detail': 'opens_detail',
            'sender': 'sender',
            'smtp_events': 'smtp_events',
            'state': 'state',
            'subject': 'subject',
            'tags': 'tags',
            'template': 'template',
            'ts': 'ts'
        }

        self._id = id
        self._clicks = clicks
        self._clicks_detail = clicks_detail
        self._email = email
        self._metadata = metadata
        self._opens = opens
        self._opens_detail = opens_detail
        self._sender = sender
        self._smtp_events = smtp_events
        self._state = state
        self._subject = subject
        self._tags = tags
        self._template = template
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_info-response of this MessagesInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MessagesInfoResponse.


        :return: The id of this MessagesInfoResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessagesInfoResponse.


        :param id: The id of this MessagesInfoResponse.
        :type id: str
        """

        self._id = id

    @property
    def clicks(self):
        """Gets the clicks of this MessagesInfoResponse.


        :return: The clicks of this MessagesInfoResponse.
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this MessagesInfoResponse.


        :param clicks: The clicks of this MessagesInfoResponse.
        :type clicks: int
        """

        self._clicks = clicks

    @property
    def clicks_detail(self):
        """Gets the clicks_detail of this MessagesInfoResponse.


        :return: The clicks_detail of this MessagesInfoResponse.
        :rtype: List[MessagesInfoResponseClicksDetailInner]
        """
        return self._clicks_detail

    @clicks_detail.setter
    def clicks_detail(self, clicks_detail):
        """Sets the clicks_detail of this MessagesInfoResponse.


        :param clicks_detail: The clicks_detail of this MessagesInfoResponse.
        :type clicks_detail: List[MessagesInfoResponseClicksDetailInner]
        """

        self._clicks_detail = clicks_detail

    @property
    def email(self):
        """Gets the email of this MessagesInfoResponse.


        :return: The email of this MessagesInfoResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MessagesInfoResponse.


        :param email: The email of this MessagesInfoResponse.
        :type email: str
        """

        self._email = email

    @property
    def metadata(self):
        """Gets the metadata of this MessagesInfoResponse.


        :return: The metadata of this MessagesInfoResponse.
        :rtype: MessagesInfoResponseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MessagesInfoResponse.


        :param metadata: The metadata of this MessagesInfoResponse.
        :type metadata: MessagesInfoResponseMetadata
        """

        self._metadata = metadata

    @property
    def opens(self):
        """Gets the opens of this MessagesInfoResponse.


        :return: The opens of this MessagesInfoResponse.
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """Sets the opens of this MessagesInfoResponse.


        :param opens: The opens of this MessagesInfoResponse.
        :type opens: int
        """

        self._opens = opens

    @property
    def opens_detail(self):
        """Gets the opens_detail of this MessagesInfoResponse.


        :return: The opens_detail of this MessagesInfoResponse.
        :rtype: List[MessagesInfoResponseOpensDetailInner]
        """
        return self._opens_detail

    @opens_detail.setter
    def opens_detail(self, opens_detail):
        """Sets the opens_detail of this MessagesInfoResponse.


        :param opens_detail: The opens_detail of this MessagesInfoResponse.
        :type opens_detail: List[MessagesInfoResponseOpensDetailInner]
        """

        self._opens_detail = opens_detail

    @property
    def sender(self):
        """Gets the sender of this MessagesInfoResponse.


        :return: The sender of this MessagesInfoResponse.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MessagesInfoResponse.


        :param sender: The sender of this MessagesInfoResponse.
        :type sender: str
        """

        self._sender = sender

    @property
    def smtp_events(self):
        """Gets the smtp_events of this MessagesInfoResponse.


        :return: The smtp_events of this MessagesInfoResponse.
        :rtype: List[MessagesInfoResponseSmtpEventsInner]
        """
        return self._smtp_events

    @smtp_events.setter
    def smtp_events(self, smtp_events):
        """Sets the smtp_events of this MessagesInfoResponse.


        :param smtp_events: The smtp_events of this MessagesInfoResponse.
        :type smtp_events: List[MessagesInfoResponseSmtpEventsInner]
        """

        self._smtp_events = smtp_events

    @property
    def state(self):
        """Gets the state of this MessagesInfoResponse.


        :return: The state of this MessagesInfoResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MessagesInfoResponse.


        :param state: The state of this MessagesInfoResponse.
        :type state: str
        """

        self._state = state

    @property
    def subject(self):
        """Gets the subject of this MessagesInfoResponse.


        :return: The subject of this MessagesInfoResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MessagesInfoResponse.


        :param subject: The subject of this MessagesInfoResponse.
        :type subject: str
        """

        self._subject = subject

    @property
    def tags(self):
        """Gets the tags of this MessagesInfoResponse.


        :return: The tags of this MessagesInfoResponse.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MessagesInfoResponse.


        :param tags: The tags of this MessagesInfoResponse.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def template(self):
        """Gets the template of this MessagesInfoResponse.


        :return: The template of this MessagesInfoResponse.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this MessagesInfoResponse.


        :param template: The template of this MessagesInfoResponse.
        :type template: str
        """

        self._template = template

    @property
    def ts(self):
        """Gets the ts of this MessagesInfoResponse.


        :return: The ts of this MessagesInfoResponse.
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this MessagesInfoResponse.


        :param ts: The ts of this MessagesInfoResponse.
        :type ts: int
        """

        self._ts = ts
