# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpInfoWarmup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_at: str=None, start_at: str=None, warming_up: bool=None):
        """IpInfoWarmup - a model defined in OpenAPI

        :param end_at: The end_at of this IpInfoWarmup.
        :param start_at: The start_at of this IpInfoWarmup.
        :param warming_up: The warming_up of this IpInfoWarmup.
        """
        self.openapi_types = {
            'end_at': str,
            'start_at': str,
            'warming_up': bool
        }

        self.attribute_map = {
            'end_at': 'end_at',
            'start_at': 'start_at',
            'warming_up': 'warming_up'
        }

        self._end_at = end_at
        self._start_at = start_at
        self._warming_up = warming_up

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpInfoWarmup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ip_info_warmup of this IpInfoWarmup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_at(self):
        """Gets the end_at of this IpInfoWarmup.


        :return: The end_at of this IpInfoWarmup.
        :rtype: str
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this IpInfoWarmup.


        :param end_at: The end_at of this IpInfoWarmup.
        :type end_at: str
        """

        self._end_at = end_at

    @property
    def start_at(self):
        """Gets the start_at of this IpInfoWarmup.


        :return: The start_at of this IpInfoWarmup.
        :rtype: str
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this IpInfoWarmup.


        :param start_at: The start_at of this IpInfoWarmup.
        :type start_at: str
        """

        self._start_at = start_at

    @property
    def warming_up(self):
        """Gets the warming_up of this IpInfoWarmup.


        :return: The warming_up of this IpInfoWarmup.
        :rtype: bool
        """
        return self._warming_up

    @warming_up.setter
    def warming_up(self, warming_up):
        """Sets the warming_up of this IpInfoWarmup.


        :param warming_up: The warming_up of this IpInfoWarmup.
        :type warming_up: bool
        """

        self._warming_up = warming_up
