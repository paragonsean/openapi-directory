# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessagesSendRaw(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _async: bool=None, from_email: str=None, from_name: str=None, ip_pool: str=None, key: str=None, raw_message: str=None, send_at: str=None, to: List[str]=None):
        """MessagesSendRaw - a model defined in OpenAPI

        :param _async: The _async of this MessagesSendRaw.
        :param from_email: The from_email of this MessagesSendRaw.
        :param from_name: The from_name of this MessagesSendRaw.
        :param ip_pool: The ip_pool of this MessagesSendRaw.
        :param key: The key of this MessagesSendRaw.
        :param raw_message: The raw_message of this MessagesSendRaw.
        :param send_at: The send_at of this MessagesSendRaw.
        :param to: The to of this MessagesSendRaw.
        """
        self.openapi_types = {
            '_async': bool,
            'from_email': str,
            'from_name': str,
            'ip_pool': str,
            'key': str,
            'raw_message': str,
            'send_at': str,
            'to': List[str]
        }

        self.attribute_map = {
            '_async': 'async',
            'from_email': 'from_email',
            'from_name': 'from_name',
            'ip_pool': 'ip_pool',
            'key': 'key',
            'raw_message': 'raw_message',
            'send_at': 'send_at',
            'to': 'to'
        }

        self.__async = _async
        self._from_email = from_email
        self._from_name = from_name
        self._ip_pool = ip_pool
        self._key = key
        self._raw_message = raw_message
        self._send_at = send_at
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesSendRaw':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_send-raw of this MessagesSendRaw.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _async(self):
        """Gets the _async of this MessagesSendRaw.


        :return: The _async of this MessagesSendRaw.
        :rtype: bool
        """
        return self.__async

    @_async.setter
    def _async(self, _async):
        """Sets the _async of this MessagesSendRaw.


        :param _async: The _async of this MessagesSendRaw.
        :type _async: bool
        """

        self.__async = _async

    @property
    def from_email(self):
        """Gets the from_email of this MessagesSendRaw.


        :return: The from_email of this MessagesSendRaw.
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this MessagesSendRaw.


        :param from_email: The from_email of this MessagesSendRaw.
        :type from_email: str
        """

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this MessagesSendRaw.


        :return: The from_name of this MessagesSendRaw.
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this MessagesSendRaw.


        :param from_name: The from_name of this MessagesSendRaw.
        :type from_name: str
        """

        self._from_name = from_name

    @property
    def ip_pool(self):
        """Gets the ip_pool of this MessagesSendRaw.


        :return: The ip_pool of this MessagesSendRaw.
        :rtype: str
        """
        return self._ip_pool

    @ip_pool.setter
    def ip_pool(self, ip_pool):
        """Sets the ip_pool of this MessagesSendRaw.


        :param ip_pool: The ip_pool of this MessagesSendRaw.
        :type ip_pool: str
        """

        self._ip_pool = ip_pool

    @property
    def key(self):
        """Gets the key of this MessagesSendRaw.


        :return: The key of this MessagesSendRaw.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MessagesSendRaw.


        :param key: The key of this MessagesSendRaw.
        :type key: str
        """

        self._key = key

    @property
    def raw_message(self):
        """Gets the raw_message of this MessagesSendRaw.


        :return: The raw_message of this MessagesSendRaw.
        :rtype: str
        """
        return self._raw_message

    @raw_message.setter
    def raw_message(self, raw_message):
        """Sets the raw_message of this MessagesSendRaw.


        :param raw_message: The raw_message of this MessagesSendRaw.
        :type raw_message: str
        """

        self._raw_message = raw_message

    @property
    def send_at(self):
        """Gets the send_at of this MessagesSendRaw.


        :return: The send_at of this MessagesSendRaw.
        :rtype: str
        """
        return self._send_at

    @send_at.setter
    def send_at(self, send_at):
        """Sets the send_at of this MessagesSendRaw.


        :param send_at: The send_at of this MessagesSendRaw.
        :type send_at: str
        """

        self._send_at = send_at

    @property
    def to(self):
        """Gets the to of this MessagesSendRaw.


        :return: The to of this MessagesSendRaw.
        :rtype: List[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessagesSendRaw.


        :param to: The to of this MessagesSendRaw.
        :type to: List[str]
        """

        self._to = to
