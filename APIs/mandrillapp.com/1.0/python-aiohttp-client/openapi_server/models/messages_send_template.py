# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.messages_send_message import MessagesSendMessage
from openapi_server.models.messages_send_message_global_merge_vars_inner import MessagesSendMessageGlobalMergeVarsInner
from openapi_server import util


class MessagesSendTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _async: bool=None, ip_pool: str=None, key: str=None, message: MessagesSendMessage=None, send_at: str=None, template_content: List[MessagesSendMessageGlobalMergeVarsInner]=None, template_name: str=None):
        """MessagesSendTemplate - a model defined in OpenAPI

        :param _async: The _async of this MessagesSendTemplate.
        :param ip_pool: The ip_pool of this MessagesSendTemplate.
        :param key: The key of this MessagesSendTemplate.
        :param message: The message of this MessagesSendTemplate.
        :param send_at: The send_at of this MessagesSendTemplate.
        :param template_content: The template_content of this MessagesSendTemplate.
        :param template_name: The template_name of this MessagesSendTemplate.
        """
        self.openapi_types = {
            '_async': bool,
            'ip_pool': str,
            'key': str,
            'message': MessagesSendMessage,
            'send_at': str,
            'template_content': List[MessagesSendMessageGlobalMergeVarsInner],
            'template_name': str
        }

        self.attribute_map = {
            '_async': 'async',
            'ip_pool': 'ip_pool',
            'key': 'key',
            'message': 'message',
            'send_at': 'send_at',
            'template_content': 'template_content',
            'template_name': 'template_name'
        }

        self.__async = _async
        self._ip_pool = ip_pool
        self._key = key
        self._message = message
        self._send_at = send_at
        self._template_content = template_content
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesSendTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_send-template of this MessagesSendTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _async(self):
        """Gets the _async of this MessagesSendTemplate.


        :return: The _async of this MessagesSendTemplate.
        :rtype: bool
        """
        return self.__async

    @_async.setter
    def _async(self, _async):
        """Sets the _async of this MessagesSendTemplate.


        :param _async: The _async of this MessagesSendTemplate.
        :type _async: bool
        """

        self.__async = _async

    @property
    def ip_pool(self):
        """Gets the ip_pool of this MessagesSendTemplate.


        :return: The ip_pool of this MessagesSendTemplate.
        :rtype: str
        """
        return self._ip_pool

    @ip_pool.setter
    def ip_pool(self, ip_pool):
        """Sets the ip_pool of this MessagesSendTemplate.


        :param ip_pool: The ip_pool of this MessagesSendTemplate.
        :type ip_pool: str
        """

        self._ip_pool = ip_pool

    @property
    def key(self):
        """Gets the key of this MessagesSendTemplate.


        :return: The key of this MessagesSendTemplate.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MessagesSendTemplate.


        :param key: The key of this MessagesSendTemplate.
        :type key: str
        """

        self._key = key

    @property
    def message(self):
        """Gets the message of this MessagesSendTemplate.


        :return: The message of this MessagesSendTemplate.
        :rtype: MessagesSendMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessagesSendTemplate.


        :param message: The message of this MessagesSendTemplate.
        :type message: MessagesSendMessage
        """

        self._message = message

    @property
    def send_at(self):
        """Gets the send_at of this MessagesSendTemplate.


        :return: The send_at of this MessagesSendTemplate.
        :rtype: str
        """
        return self._send_at

    @send_at.setter
    def send_at(self, send_at):
        """Sets the send_at of this MessagesSendTemplate.


        :param send_at: The send_at of this MessagesSendTemplate.
        :type send_at: str
        """

        self._send_at = send_at

    @property
    def template_content(self):
        """Gets the template_content of this MessagesSendTemplate.


        :return: The template_content of this MessagesSendTemplate.
        :rtype: List[MessagesSendMessageGlobalMergeVarsInner]
        """
        return self._template_content

    @template_content.setter
    def template_content(self, template_content):
        """Sets the template_content of this MessagesSendTemplate.


        :param template_content: The template_content of this MessagesSendTemplate.
        :type template_content: List[MessagesSendMessageGlobalMergeVarsInner]
        """

        self._template_content = template_content

    @property
    def template_name(self):
        """Gets the template_name of this MessagesSendTemplate.


        :return: The template_name of this MessagesSendTemplate.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this MessagesSendTemplate.


        :param template_name: The template_name of this MessagesSendTemplate.
        :type template_name: str
        """

        self._template_name = template_name
