# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.messages_content_response_attachments_inner import MessagesContentResponseAttachmentsInner
from openapi_server.models.messages_content_response_headers import MessagesContentResponseHeaders
from openapi_server.models.messages_content_response_to import MessagesContentResponseTo
from openapi_server.models.messages_parse_response_attachments_inner import MessagesParseResponseAttachmentsInner
from openapi_server import util


class MessagesParseResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[MessagesParseResponseAttachmentsInner]=None, from_email: str=None, from_name: str=None, headers: MessagesContentResponseHeaders=None, html: str=None, images: List[MessagesContentResponseAttachmentsInner]=None, subject: str=None, text: str=None, to: List[MessagesContentResponseTo]=None):
        """MessagesParseResponse - a model defined in OpenAPI

        :param attachments: The attachments of this MessagesParseResponse.
        :param from_email: The from_email of this MessagesParseResponse.
        :param from_name: The from_name of this MessagesParseResponse.
        :param headers: The headers of this MessagesParseResponse.
        :param html: The html of this MessagesParseResponse.
        :param images: The images of this MessagesParseResponse.
        :param subject: The subject of this MessagesParseResponse.
        :param text: The text of this MessagesParseResponse.
        :param to: The to of this MessagesParseResponse.
        """
        self.openapi_types = {
            'attachments': List[MessagesParseResponseAttachmentsInner],
            'from_email': str,
            'from_name': str,
            'headers': MessagesContentResponseHeaders,
            'html': str,
            'images': List[MessagesContentResponseAttachmentsInner],
            'subject': str,
            'text': str,
            'to': List[MessagesContentResponseTo]
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'from_email': 'from_email',
            'from_name': 'from_name',
            'headers': 'headers',
            'html': 'html',
            'images': 'images',
            'subject': 'subject',
            'text': 'text',
            'to': 'to'
        }

        self._attachments = attachments
        self._from_email = from_email
        self._from_name = from_name
        self._headers = headers
        self._html = html
        self._images = images
        self._subject = subject
        self._text = text
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagesParseResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messages_parse-response of this MessagesParseResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this MessagesParseResponse.


        :return: The attachments of this MessagesParseResponse.
        :rtype: List[MessagesParseResponseAttachmentsInner]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MessagesParseResponse.


        :param attachments: The attachments of this MessagesParseResponse.
        :type attachments: List[MessagesParseResponseAttachmentsInner]
        """

        self._attachments = attachments

    @property
    def from_email(self):
        """Gets the from_email of this MessagesParseResponse.


        :return: The from_email of this MessagesParseResponse.
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this MessagesParseResponse.


        :param from_email: The from_email of this MessagesParseResponse.
        :type from_email: str
        """

        self._from_email = from_email

    @property
    def from_name(self):
        """Gets the from_name of this MessagesParseResponse.


        :return: The from_name of this MessagesParseResponse.
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this MessagesParseResponse.


        :param from_name: The from_name of this MessagesParseResponse.
        :type from_name: str
        """

        self._from_name = from_name

    @property
    def headers(self):
        """Gets the headers of this MessagesParseResponse.


        :return: The headers of this MessagesParseResponse.
        :rtype: MessagesContentResponseHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this MessagesParseResponse.


        :param headers: The headers of this MessagesParseResponse.
        :type headers: MessagesContentResponseHeaders
        """

        self._headers = headers

    @property
    def html(self):
        """Gets the html of this MessagesParseResponse.


        :return: The html of this MessagesParseResponse.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this MessagesParseResponse.


        :param html: The html of this MessagesParseResponse.
        :type html: str
        """

        self._html = html

    @property
    def images(self):
        """Gets the images of this MessagesParseResponse.


        :return: The images of this MessagesParseResponse.
        :rtype: List[MessagesContentResponseAttachmentsInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this MessagesParseResponse.


        :param images: The images of this MessagesParseResponse.
        :type images: List[MessagesContentResponseAttachmentsInner]
        """

        self._images = images

    @property
    def subject(self):
        """Gets the subject of this MessagesParseResponse.


        :return: The subject of this MessagesParseResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MessagesParseResponse.


        :param subject: The subject of this MessagesParseResponse.
        :type subject: str
        """

        self._subject = subject

    @property
    def text(self):
        """Gets the text of this MessagesParseResponse.


        :return: The text of this MessagesParseResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessagesParseResponse.


        :param text: The text of this MessagesParseResponse.
        :type text: str
        """

        self._text = text

    @property
    def to(self):
        """Gets the to of this MessagesParseResponse.


        :return: The to of this MessagesParseResponse.
        :rtype: List[MessagesContentResponseTo]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MessagesParseResponse.


        :param to: The to of this MessagesParseResponse.
        :type to: List[MessagesContentResponseTo]
        """

        self._to = to
