/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironmentWithSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironmentWithSettings::OAIDeploymentEnvironmentWithSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironmentWithSettings::OAIDeploymentEnvironmentWithSettings() {
    this->initializeModel();
}

OAIDeploymentEnvironmentWithSettings::~OAIDeploymentEnvironmentWithSettings() {}

void OAIDeploymentEnvironmentWithSettings::initializeModel() {

    m_deployment_environment_id_isSet = false;
    m_deployment_environment_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_projects_mode_isSet = false;
    m_projects_mode_isValid = false;

    m_security_descriptor_isSet = false;
    m_security_descriptor_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_environment_access_key_isSet = false;
    m_environment_access_key_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_selected_projects_isSet = false;
    m_selected_projects_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIDeploymentEnvironmentWithSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironmentWithSettings::fromJsonObject(QJsonObject json) {

    m_deployment_environment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_environment_id, json[QString("deploymentEnvironmentId")]);
    m_deployment_environment_id_isSet = !json[QString("deploymentEnvironmentId")].isNull() && m_deployment_environment_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_projects_mode_isValid = ::OpenAPI::fromJsonValue(m_projects_mode, json[QString("projectsMode")]);
    m_projects_mode_isSet = !json[QString("projectsMode")].isNull() && m_projects_mode_isValid;

    m_security_descriptor_isValid = ::OpenAPI::fromJsonValue(m_security_descriptor, json[QString("securityDescriptor")]);
    m_security_descriptor_isSet = !json[QString("securityDescriptor")].isNull() && m_security_descriptor_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_environment_access_key_isValid = ::OpenAPI::fromJsonValue(m_environment_access_key, json[QString("environmentAccessKey")]);
    m_environment_access_key_isSet = !json[QString("environmentAccessKey")].isNull() && m_environment_access_key_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_selected_projects_isValid = ::OpenAPI::fromJsonValue(m_selected_projects, json[QString("selectedProjects")]);
    m_selected_projects_isSet = !json[QString("selectedProjects")].isNull() && m_selected_projects_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAIDeploymentEnvironmentWithSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironmentWithSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_environment_id_isSet) {
        obj.insert(QString("deploymentEnvironmentId"), ::OpenAPI::toJsonValue(m_deployment_environment_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_projects_mode.isSet()) {
        obj.insert(QString("projectsMode"), ::OpenAPI::toJsonValue(m_projects_mode));
    }
    if (m_security_descriptor.isSet()) {
        obj.insert(QString("securityDescriptor"), ::OpenAPI::toJsonValue(m_security_descriptor));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_environment_access_key_isSet) {
        obj.insert(QString("environmentAccessKey"), ::OpenAPI::toJsonValue(m_environment_access_key));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_selected_projects.size() > 0) {
        obj.insert(QString("selectedProjects"), ::OpenAPI::toJsonValue(m_selected_projects));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

qint32 OAIDeploymentEnvironmentWithSettings::getDeploymentEnvironmentId() const {
    return m_deployment_environment_id;
}
void OAIDeploymentEnvironmentWithSettings::setDeploymentEnvironmentId(const qint32 &deployment_environment_id) {
    m_deployment_environment_id = deployment_environment_id;
    m_deployment_environment_id_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_deployment_environment_id_Set() const{
    return m_deployment_environment_id_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_deployment_environment_id_Valid() const{
    return m_deployment_environment_id_isValid;
}

QString OAIDeploymentEnvironmentWithSettings::getName() const {
    return m_name;
}
void OAIDeploymentEnvironmentWithSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_name_Valid() const{
    return m_name_isValid;
}

OAIDeploymentProviderType OAIDeploymentEnvironmentWithSettings::getProvider() const {
    return m_provider;
}
void OAIDeploymentEnvironmentWithSettings::setProvider(const OAIDeploymentProviderType &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_provider_Valid() const{
    return m_provider_isValid;
}

QDateTime OAIDeploymentEnvironmentWithSettings::getCreated() const {
    return m_created;
}
void OAIDeploymentEnvironmentWithSettings::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIDeploymentEnvironmentWithSettings::getUpdated() const {
    return m_updated;
}
void OAIDeploymentEnvironmentWithSettings::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIDeploymentEnvironmentWithSettings::getAccountId() const {
    return m_account_id;
}
void OAIDeploymentEnvironmentWithSettings::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIDeploymentProjectSelectionMode OAIDeploymentEnvironmentWithSettings::getProjectsMode() const {
    return m_projects_mode;
}
void OAIDeploymentEnvironmentWithSettings::setProjectsMode(const OAIDeploymentProjectSelectionMode &projects_mode) {
    m_projects_mode = projects_mode;
    m_projects_mode_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_projects_mode_Set() const{
    return m_projects_mode_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_projects_mode_Valid() const{
    return m_projects_mode_isValid;
}

OAISecurityDescriptor OAIDeploymentEnvironmentWithSettings::getSecurityDescriptor() const {
    return m_security_descriptor;
}
void OAIDeploymentEnvironmentWithSettings::setSecurityDescriptor(const OAISecurityDescriptor &security_descriptor) {
    m_security_descriptor = security_descriptor;
    m_security_descriptor_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_security_descriptor_Set() const{
    return m_security_descriptor_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_security_descriptor_Valid() const{
    return m_security_descriptor_isValid;
}

QString OAIDeploymentEnvironmentWithSettings::getTags() const {
    return m_tags;
}
void OAIDeploymentEnvironmentWithSettings::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDeploymentEnvironmentWithSettings::getEnvironmentAccessKey() const {
    return m_environment_access_key;
}
void OAIDeploymentEnvironmentWithSettings::setEnvironmentAccessKey(const QString &environment_access_key) {
    m_environment_access_key = environment_access_key;
    m_environment_access_key_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_environment_access_key_Set() const{
    return m_environment_access_key_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_environment_access_key_Valid() const{
    return m_environment_access_key_isValid;
}

QList<OAIDeploymentEnvironmentProject> OAIDeploymentEnvironmentWithSettings::getProjects() const {
    return m_projects;
}
void OAIDeploymentEnvironmentWithSettings::setProjects(const QList<OAIDeploymentEnvironmentProject> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_projects_Valid() const{
    return m_projects_isValid;
}

QList<qint32> OAIDeploymentEnvironmentWithSettings::getSelectedProjects() const {
    return m_selected_projects;
}
void OAIDeploymentEnvironmentWithSettings::setSelectedProjects(const QList<qint32> &selected_projects) {
    m_selected_projects = selected_projects;
    m_selected_projects_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_selected_projects_Set() const{
    return m_selected_projects_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_selected_projects_Valid() const{
    return m_selected_projects_isValid;
}

OAIDeploymentEnvironmentSettings OAIDeploymentEnvironmentWithSettings::getSettings() const {
    return m_settings;
}
void OAIDeploymentEnvironmentWithSettings::setSettings(const OAIDeploymentEnvironmentSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIDeploymentEnvironmentWithSettings::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIDeploymentEnvironmentWithSettings::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIDeploymentEnvironmentWithSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironmentWithSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
