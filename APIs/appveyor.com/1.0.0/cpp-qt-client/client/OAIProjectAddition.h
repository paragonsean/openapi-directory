/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectAddition.h
 *
 * &#x60;repositoryAuthentication&#x60; is only used for git, mercurial, subversion &#x60;repositoryProvider&#x60;.
 */

#ifndef OAIProjectAddition_H
#define OAIProjectAddition_H

#include <QJsonObject>

#include "OAIRepositoryAuthenticationType.h"
#include "OAIRepositoryProvider.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProjectAddition : public OAIObject {
public:
    OAIProjectAddition();
    OAIProjectAddition(QString json);
    ~OAIProjectAddition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRepositoryAuthenticationType getRepositoryAuthentication() const;
    void setRepositoryAuthentication(const OAIRepositoryAuthenticationType &repository_authentication);
    bool is_repository_authentication_Set() const;
    bool is_repository_authentication_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    QString getRepositoryPassword() const;
    void setRepositoryPassword(const QString &repository_password);
    bool is_repository_password_Set() const;
    bool is_repository_password_Valid() const;

    OAIRepositoryProvider getRepositoryProvider() const;
    void setRepositoryProvider(const OAIRepositoryProvider &repository_provider);
    bool is_repository_provider_Set() const;
    bool is_repository_provider_Valid() const;

    QString getRepositoryUsername() const;
    void setRepositoryUsername(const QString &repository_username);
    bool is_repository_username_Set() const;
    bool is_repository_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRepositoryAuthenticationType m_repository_authentication;
    bool m_repository_authentication_isSet;
    bool m_repository_authentication_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    QString m_repository_password;
    bool m_repository_password_isSet;
    bool m_repository_password_isValid;

    OAIRepositoryProvider m_repository_provider;
    bool m_repository_provider_isSet;
    bool m_repository_provider_isValid;

    QString m_repository_username;
    bool m_repository_username_isSet;
    bool m_repository_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectAddition)

#endif // OAIProjectAddition_H
