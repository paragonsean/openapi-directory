/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationProviderSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationProviderSettings::OAINotificationProviderSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationProviderSettings::OAINotificationProviderSettings() {
    this->initializeModel();
}

OAINotificationProviderSettings::~OAINotificationProviderSettings() {}

void OAINotificationProviderSettings::initializeModel() {

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAINotificationProviderSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationProviderSettings::fromJsonObject(QJsonObject json) {

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAINotificationProviderSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationProviderSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAINotificationProviderType OAINotificationProviderSettings::getProvider() const {
    return m_provider;
}
void OAINotificationProviderSettings::setProvider(const OAINotificationProviderType &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAINotificationProviderSettings::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAINotificationProviderSettings::is_provider_Valid() const{
    return m_provider_isValid;
}

OAINotificationSettings OAINotificationProviderSettings::getSettings() const {
    return m_settings;
}
void OAINotificationProviderSettings::setSettings(const OAINotificationSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAINotificationProviderSettings::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAINotificationProviderSettings::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAINotificationProviderSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationProviderSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provider_isValid && m_settings_isValid && true;
}

} // namespace OpenAPI
