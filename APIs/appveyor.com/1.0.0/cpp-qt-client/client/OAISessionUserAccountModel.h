/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISessionUserAccountModel.h
 *
 * 
 */

#ifndef OAISessionUserAccountModel_H
#define OAISessionUserAccountModel_H

#include <QJsonObject>

#include "OAIFeatureFlags.h"
#include "OAIPermissionName.h"
#include "OAIPlanName.h"
#include "OAIPlanStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISessionUserAccountModel : public OAIObject {
public:
    OAISessionUserAccountModel();
    OAISessionUserAccountModel(QString json);
    ~OAISessionUserAccountModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    qint32 getAccountId() const;
    void setAccountId(const qint32 &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    bool isAllowCustomBuildEnvironment() const;
    void setAllowCustomBuildEnvironment(const bool &allow_custom_build_environment);
    bool is_allow_custom_build_environment_Set() const;
    bool is_allow_custom_build_environment_Valid() const;

    bool isBlocked() const;
    void setBlocked(const bool &blocked);
    bool is_blocked_Set() const;
    bool is_blocked_Valid() const;

    OAIFeatureFlags getFeatureFlags() const;
    void setFeatureFlags(const OAIFeatureFlags &feature_flags);
    bool is_feature_flags_Set() const;
    bool is_feature_flags_Valid() const;

    bool isGitHubPlan() const;
    void setGitHubPlan(const bool &git_hub_plan);
    bool is_git_hub_plan_Set() const;
    bool is_git_hub_plan_Valid() const;

    QString getGitHubPlanOrg() const;
    void setGitHubPlanOrg(const QString &git_hub_plan_org);
    bool is_git_hub_plan_org_Set() const;
    bool is_git_hub_plan_org_Valid() const;

    bool isIsCollaborator() const;
    void setIsCollaborator(const bool &is_collaborator);
    bool is_is_collaborator_Set() const;
    bool is_is_collaborator_Valid() const;

    bool isIsEnterprisePlan() const;
    void setIsEnterprisePlan(const bool &is_enterprise_plan);
    bool is_is_enterprise_plan_Set() const;
    bool is_is_enterprise_plan_Valid() const;

    bool isIsOwner() const;
    void setIsOwner(const bool &is_owner);
    bool is_is_owner_Set() const;
    bool is_is_owner_Valid() const;

    bool isManualPayments() const;
    void setManualPayments(const bool &manual_payments);
    bool is_manual_payments_Set() const;
    bool is_manual_payments_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPermissionName> getPermissions() const;
    void setPermissions(const QList<OAIPermissionName> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QDateTime getPlanEnd() const;
    void setPlanEnd(const QDateTime &plan_end);
    bool is_plan_end_Set() const;
    bool is_plan_end_Valid() const;

    OAIPlanName getPlanId() const;
    void setPlanId(const OAIPlanName &plan_id);
    bool is_plan_id_Set() const;
    bool is_plan_id_Valid() const;

    QDateTime getPlanStart() const;
    void setPlanStart(const QDateTime &plan_start);
    bool is_plan_start_Set() const;
    bool is_plan_start_Valid() const;

    OAIPlanStatus getPlanStatus() const;
    void setPlanStatus(const OAIPlanStatus &plan_status);
    bool is_plan_status_Set() const;
    bool is_plan_status_Valid() const;

    qint32 getRoleId() const;
    void setRoleId(const qint32 &role_id);
    bool is_role_id_Set() const;
    bool is_role_id_Valid() const;

    QString getRoleName() const;
    void setRoleName(const QString &role_name);
    bool is_role_name_Set() const;
    bool is_role_name_Valid() const;

    QString getTimeZoneId() const;
    void setTimeZoneId(const QString &time_zone_id);
    bool is_time_zone_id_Set() const;
    bool is_time_zone_id_Valid() const;

    bool isUnpaid() const;
    void setUnpaid(const bool &unpaid);
    bool is_unpaid_Set() const;
    bool is_unpaid_Valid() const;

    bool isUnverified() const;
    void setUnverified(const bool &unverified);
    bool is_unverified_Set() const;
    bool is_unverified_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    qint32 m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    bool m_allow_custom_build_environment;
    bool m_allow_custom_build_environment_isSet;
    bool m_allow_custom_build_environment_isValid;

    bool m_blocked;
    bool m_blocked_isSet;
    bool m_blocked_isValid;

    OAIFeatureFlags m_feature_flags;
    bool m_feature_flags_isSet;
    bool m_feature_flags_isValid;

    bool m_git_hub_plan;
    bool m_git_hub_plan_isSet;
    bool m_git_hub_plan_isValid;

    QString m_git_hub_plan_org;
    bool m_git_hub_plan_org_isSet;
    bool m_git_hub_plan_org_isValid;

    bool m_is_collaborator;
    bool m_is_collaborator_isSet;
    bool m_is_collaborator_isValid;

    bool m_is_enterprise_plan;
    bool m_is_enterprise_plan_isSet;
    bool m_is_enterprise_plan_isValid;

    bool m_is_owner;
    bool m_is_owner_isSet;
    bool m_is_owner_isValid;

    bool m_manual_payments;
    bool m_manual_payments_isSet;
    bool m_manual_payments_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPermissionName> m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QDateTime m_plan_end;
    bool m_plan_end_isSet;
    bool m_plan_end_isValid;

    OAIPlanName m_plan_id;
    bool m_plan_id_isSet;
    bool m_plan_id_isValid;

    QDateTime m_plan_start;
    bool m_plan_start_isSet;
    bool m_plan_start_isValid;

    OAIPlanStatus m_plan_status;
    bool m_plan_status_isSet;
    bool m_plan_status_isValid;

    qint32 m_role_id;
    bool m_role_id_isSet;
    bool m_role_id_isValid;

    QString m_role_name;
    bool m_role_name_isSet;
    bool m_role_name_isValid;

    QString m_time_zone_id;
    bool m_time_zone_id_isSet;
    bool m_time_zone_id_isValid;

    bool m_unpaid;
    bool m_unpaid_isSet;
    bool m_unpaid_isValid;

    bool m_unverified;
    bool m_unverified_isSet;
    bool m_unverified_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISessionUserAccountModel)

#endif // OAISessionUserAccountModel_H
