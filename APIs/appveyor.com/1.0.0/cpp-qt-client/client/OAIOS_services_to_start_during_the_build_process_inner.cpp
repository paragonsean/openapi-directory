/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOS_services_to_start_during_the_build_process_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOS_services_to_start_during_the_build_process_inner::OAIOS_services_to_start_during_the_build_process_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOS_services_to_start_during_the_build_process_inner::OAIOS_services_to_start_during_the_build_process_inner() {
    this->initializeModel();
}

OAIOS_services_to_start_during_the_build_process_inner::~OAIOS_services_to_start_during_the_build_process_inner() {}

void OAIOS_services_to_start_during_the_build_process_inner::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOS_services_to_start_during_the_build_process_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOS_services_to_start_during_the_build_process_inner::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOS_services_to_start_during_the_build_process_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOS_services_to_start_during_the_build_process_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIOSServiceName OAIOS_services_to_start_during_the_build_process_inner::getValue() const {
    return m_value;
}
void OAIOS_services_to_start_during_the_build_process_inner::setValue(const OAIOSServiceName &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOS_services_to_start_during_the_build_process_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOS_services_to_start_during_the_build_process_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOS_services_to_start_during_the_build_process_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOS_services_to_start_during_the_build_process_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
