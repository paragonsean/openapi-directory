/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironmentSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironmentSettings::OAIDeploymentEnvironmentSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironmentSettings::OAIDeploymentEnvironmentSettings() {
    this->initializeModel();
}

OAIDeploymentEnvironmentSettings::~OAIDeploymentEnvironmentSettings() {}

void OAIDeploymentEnvironmentSettings::initializeModel() {

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_provider_settings_isSet = false;
    m_provider_settings_isValid = false;
}

void OAIDeploymentEnvironmentSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironmentSettings::fromJsonObject(QJsonObject json) {

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_provider_settings_isValid = ::OpenAPI::fromJsonValue(m_provider_settings, json[QString("providerSettings")]);
    m_provider_settings_isSet = !json[QString("providerSettings")].isNull() && m_provider_settings_isValid;
}

QString OAIDeploymentEnvironmentSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironmentSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_provider_settings.size() > 0) {
        obj.insert(QString("providerSettings"), ::OpenAPI::toJsonValue(m_provider_settings));
    }
    return obj;
}

QList<OAIStoredNameValue> OAIDeploymentEnvironmentSettings::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIDeploymentEnvironmentSettings::setEnvironmentVariables(const QList<OAIStoredNameValue> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIDeploymentEnvironmentSettings::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIDeploymentEnvironmentSettings::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QList<OAINotificationProviderSettings> OAIDeploymentEnvironmentSettings::getNotifications() const {
    return m_notifications;
}
void OAIDeploymentEnvironmentSettings::setNotifications(const QList<OAINotificationProviderSettings> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIDeploymentEnvironmentSettings::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIDeploymentEnvironmentSettings::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QList<OAIStoredNameValue> OAIDeploymentEnvironmentSettings::getProviderSettings() const {
    return m_provider_settings;
}
void OAIDeploymentEnvironmentSettings::setProviderSettings(const QList<OAIStoredNameValue> &provider_settings) {
    m_provider_settings = provider_settings;
    m_provider_settings_isSet = true;
}

bool OAIDeploymentEnvironmentSettings::is_provider_settings_Set() const{
    return m_provider_settings_isSet;
}

bool OAIDeploymentEnvironmentSettings::is_provider_settings_Valid() const{
    return m_provider_settings_isValid;
}

bool OAIDeploymentEnvironmentSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironmentSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
