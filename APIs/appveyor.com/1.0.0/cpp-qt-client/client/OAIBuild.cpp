/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_author_username_isSet = false;
    m_author_username_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_committed_isSet = false;
    m_committed_isValid = false;

    m_committer_name_isSet = false;
    m_committer_name_isValid = false;

    m_committer_username_isSet = false;
    m_committer_username_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_is_tag_isSet = false;
    m_is_tag_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_message_extended_isSet = false;
    m_message_extended_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_pull_request_id_isSet = false;
    m_pull_request_id_isValid = false;

    m_pull_request_name_isSet = false;
    m_pull_request_name_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("authorName")]);
    m_author_name_isSet = !json[QString("authorName")].isNull() && m_author_name_isValid;

    m_author_username_isValid = ::OpenAPI::fromJsonValue(m_author_username, json[QString("authorUsername")]);
    m_author_username_isSet = !json[QString("authorUsername")].isNull() && m_author_username_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("buildNumber")]);
    m_build_number_isSet = !json[QString("buildNumber")].isNull() && m_build_number_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_committed_isValid = ::OpenAPI::fromJsonValue(m_committed, json[QString("committed")]);
    m_committed_isSet = !json[QString("committed")].isNull() && m_committed_isValid;

    m_committer_name_isValid = ::OpenAPI::fromJsonValue(m_committer_name, json[QString("committerName")]);
    m_committer_name_isSet = !json[QString("committerName")].isNull() && m_committer_name_isValid;

    m_committer_username_isValid = ::OpenAPI::fromJsonValue(m_committer_username, json[QString("committerUsername")]);
    m_committer_username_isSet = !json[QString("committerUsername")].isNull() && m_committer_username_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_is_tag_isValid = ::OpenAPI::fromJsonValue(m_is_tag, json[QString("isTag")]);
    m_is_tag_isSet = !json[QString("isTag")].isNull() && m_is_tag_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_message_extended_isValid = ::OpenAPI::fromJsonValue(m_message_extended, json[QString("messageExtended")]);
    m_message_extended_isSet = !json[QString("messageExtended")].isNull() && m_message_extended_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_pull_request_id_isValid = ::OpenAPI::fromJsonValue(m_pull_request_id, json[QString("pullRequestId")]);
    m_pull_request_id_isSet = !json[QString("pullRequestId")].isNull() && m_pull_request_id_isValid;

    m_pull_request_name_isValid = ::OpenAPI::fromJsonValue(m_pull_request_name, json[QString("pullRequestName")]);
    m_pull_request_name_isSet = !json[QString("pullRequestName")].isNull() && m_pull_request_name_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_author_name_isSet) {
        obj.insert(QString("authorName"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_author_username_isSet) {
        obj.insert(QString("authorUsername"), ::OpenAPI::toJsonValue(m_author_username));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("buildNumber"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_committed_isSet) {
        obj.insert(QString("committed"), ::OpenAPI::toJsonValue(m_committed));
    }
    if (m_committer_name_isSet) {
        obj.insert(QString("committerName"), ::OpenAPI::toJsonValue(m_committer_name));
    }
    if (m_committer_username_isSet) {
        obj.insert(QString("committerUsername"), ::OpenAPI::toJsonValue(m_committer_username));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_is_tag_isSet) {
        obj.insert(QString("isTag"), ::OpenAPI::toJsonValue(m_is_tag));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_message_extended_isSet) {
        obj.insert(QString("messageExtended"), ::OpenAPI::toJsonValue(m_message_extended));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_pull_request_id_isSet) {
        obj.insert(QString("pullRequestId"), ::OpenAPI::toJsonValue(m_pull_request_id));
    }
    if (m_pull_request_name_isSet) {
        obj.insert(QString("pullRequestName"), ::OpenAPI::toJsonValue(m_pull_request_name));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIBuild::getBranch() const {
    return m_branch;
}
void OAIBuild::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIBuild::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIBuild::is_branch_Valid() const{
    return m_branch_isValid;
}

qint32 OAIBuild::getBuildId() const {
    return m_build_id;
}
void OAIBuild::setBuildId(const qint32 &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIBuild::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIBuild::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIBuild::getMessage() const {
    return m_message;
}
void OAIBuild::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBuild::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBuild::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBuild::getVersion() const {
    return m_version;
}
void OAIBuild::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBuild::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBuild::is_version_Valid() const{
    return m_version_isValid;
}

QDateTime OAIBuild::getCreated() const {
    return m_created;
}
void OAIBuild::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIBuild::is_created_Set() const{
    return m_created_isSet;
}

bool OAIBuild::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIBuild::getUpdated() const {
    return m_updated;
}
void OAIBuild::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIBuild::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIBuild::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIBuild::getAuthorName() const {
    return m_author_name;
}
void OAIBuild::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIBuild::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIBuild::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAIBuild::getAuthorUsername() const {
    return m_author_username;
}
void OAIBuild::setAuthorUsername(const QString &author_username) {
    m_author_username = author_username;
    m_author_username_isSet = true;
}

bool OAIBuild::is_author_username_Set() const{
    return m_author_username_isSet;
}

bool OAIBuild::is_author_username_Valid() const{
    return m_author_username_isValid;
}

qint32 OAIBuild::getBuildNumber() const {
    return m_build_number;
}
void OAIBuild::setBuildNumber(const qint32 &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIBuild::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIBuild::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QString OAIBuild::getCommitId() const {
    return m_commit_id;
}
void OAIBuild::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIBuild::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIBuild::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QDateTime OAIBuild::getCommitted() const {
    return m_committed;
}
void OAIBuild::setCommitted(const QDateTime &committed) {
    m_committed = committed;
    m_committed_isSet = true;
}

bool OAIBuild::is_committed_Set() const{
    return m_committed_isSet;
}

bool OAIBuild::is_committed_Valid() const{
    return m_committed_isValid;
}

QString OAIBuild::getCommitterName() const {
    return m_committer_name;
}
void OAIBuild::setCommitterName(const QString &committer_name) {
    m_committer_name = committer_name;
    m_committer_name_isSet = true;
}

bool OAIBuild::is_committer_name_Set() const{
    return m_committer_name_isSet;
}

bool OAIBuild::is_committer_name_Valid() const{
    return m_committer_name_isValid;
}

QString OAIBuild::getCommitterUsername() const {
    return m_committer_username;
}
void OAIBuild::setCommitterUsername(const QString &committer_username) {
    m_committer_username = committer_username;
    m_committer_username_isSet = true;
}

bool OAIBuild::is_committer_username_Set() const{
    return m_committer_username_isSet;
}

bool OAIBuild::is_committer_username_Valid() const{
    return m_committer_username_isValid;
}

QDateTime OAIBuild::getFinished() const {
    return m_finished;
}
void OAIBuild::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIBuild::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIBuild::is_finished_Valid() const{
    return m_finished_isValid;
}

bool OAIBuild::isIsTag() const {
    return m_is_tag;
}
void OAIBuild::setIsTag(const bool &is_tag) {
    m_is_tag = is_tag;
    m_is_tag_isSet = true;
}

bool OAIBuild::is_is_tag_Set() const{
    return m_is_tag_isSet;
}

bool OAIBuild::is_is_tag_Valid() const{
    return m_is_tag_isValid;
}

QList<OAIBuildJob> OAIBuild::getJobs() const {
    return m_jobs;
}
void OAIBuild::setJobs(const QList<OAIBuildJob> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIBuild::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIBuild::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QString OAIBuild::getMessageExtended() const {
    return m_message_extended;
}
void OAIBuild::setMessageExtended(const QString &message_extended) {
    m_message_extended = message_extended;
    m_message_extended_isSet = true;
}

bool OAIBuild::is_message_extended_Set() const{
    return m_message_extended_isSet;
}

bool OAIBuild::is_message_extended_Valid() const{
    return m_message_extended_isValid;
}

QList<OAIBuildMessage> OAIBuild::getMessages() const {
    return m_messages;
}
void OAIBuild::setMessages(const QList<OAIBuildMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIBuild::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIBuild::is_messages_Valid() const{
    return m_messages_isValid;
}

qint32 OAIBuild::getProjectId() const {
    return m_project_id;
}
void OAIBuild::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIBuild::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIBuild::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint32 OAIBuild::getPullRequestId() const {
    return m_pull_request_id;
}
void OAIBuild::setPullRequestId(const qint32 &pull_request_id) {
    m_pull_request_id = pull_request_id;
    m_pull_request_id_isSet = true;
}

bool OAIBuild::is_pull_request_id_Set() const{
    return m_pull_request_id_isSet;
}

bool OAIBuild::is_pull_request_id_Valid() const{
    return m_pull_request_id_isValid;
}

QString OAIBuild::getPullRequestName() const {
    return m_pull_request_name;
}
void OAIBuild::setPullRequestName(const QString &pull_request_name) {
    m_pull_request_name = pull_request_name;
    m_pull_request_name_isSet = true;
}

bool OAIBuild::is_pull_request_name_Set() const{
    return m_pull_request_name_isSet;
}

bool OAIBuild::is_pull_request_name_Valid() const{
    return m_pull_request_name_isValid;
}

QDateTime OAIBuild::getStarted() const {
    return m_started;
}
void OAIBuild::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIBuild::is_started_Set() const{
    return m_started_isSet;
}

bool OAIBuild::is_started_Valid() const{
    return m_started_isValid;
}

OAIStatus OAIBuild::getStatus() const {
    return m_status;
}
void OAIBuild::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuild::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuild::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_extended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
