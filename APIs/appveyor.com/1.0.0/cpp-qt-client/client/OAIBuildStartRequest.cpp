/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildStartRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildStartRequest::OAIBuildStartRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildStartRequest::OAIBuildStartRequest() {
    this->initializeModel();
}

OAIBuildStartRequest::~OAIBuildStartRequest() {}

void OAIBuildStartRequest::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_project_slug_isSet = false;
    m_project_slug_isValid = false;

    m_pull_request_id_isSet = false;
    m_pull_request_id_isValid = false;
}

void OAIBuildStartRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildStartRequest::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_project_slug_isValid = ::OpenAPI::fromJsonValue(m_project_slug, json[QString("projectSlug")]);
    m_project_slug_isSet = !json[QString("projectSlug")].isNull() && m_project_slug_isValid;

    m_pull_request_id_isValid = ::OpenAPI::fromJsonValue(m_pull_request_id, json[QString("pullRequestId")]);
    m_pull_request_id_isSet = !json[QString("pullRequestId")].isNull() && m_pull_request_id_isValid;
}

QString OAIBuildStartRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildStartRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_project_slug_isSet) {
        obj.insert(QString("projectSlug"), ::OpenAPI::toJsonValue(m_project_slug));
    }
    if (m_pull_request_id_isSet) {
        obj.insert(QString("pullRequestId"), ::OpenAPI::toJsonValue(m_pull_request_id));
    }
    return obj;
}

QString OAIBuildStartRequest::getAccountName() const {
    return m_account_name;
}
void OAIBuildStartRequest::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIBuildStartRequest::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIBuildStartRequest::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIBuildStartRequest::getBranch() const {
    return m_branch;
}
void OAIBuildStartRequest::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIBuildStartRequest::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIBuildStartRequest::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIBuildStartRequest::getCommitId() const {
    return m_commit_id;
}
void OAIBuildStartRequest::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIBuildStartRequest::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIBuildStartRequest::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QMap<QString, QString> OAIBuildStartRequest::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIBuildStartRequest::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIBuildStartRequest::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIBuildStartRequest::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIBuildStartRequest::getProjectSlug() const {
    return m_project_slug;
}
void OAIBuildStartRequest::setProjectSlug(const QString &project_slug) {
    m_project_slug = project_slug;
    m_project_slug_isSet = true;
}

bool OAIBuildStartRequest::is_project_slug_Set() const{
    return m_project_slug_isSet;
}

bool OAIBuildStartRequest::is_project_slug_Valid() const{
    return m_project_slug_isValid;
}

qint32 OAIBuildStartRequest::getPullRequestId() const {
    return m_pull_request_id;
}
void OAIBuildStartRequest::setPullRequestId(const qint32 &pull_request_id) {
    m_pull_request_id = pull_request_id;
    m_pull_request_id_isSet = true;
}

bool OAIBuildStartRequest::is_pull_request_id_Set() const{
    return m_pull_request_id_isSet;
}

bool OAIBuildStartRequest::is_pull_request_id_Valid() const{
    return m_pull_request_id_isValid;
}

bool OAIBuildStartRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildStartRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_name_isValid && m_project_slug_isValid && true;
}

} // namespace OpenAPI
