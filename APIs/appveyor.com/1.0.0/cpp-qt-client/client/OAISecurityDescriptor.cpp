/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityDescriptor::OAISecurityDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityDescriptor::OAISecurityDescriptor() {
    this->initializeModel();
}

OAISecurityDescriptor::~OAISecurityDescriptor() {}

void OAISecurityDescriptor::initializeModel() {

    m_access_right_definitions_isSet = false;
    m_access_right_definitions_isValid = false;

    m_role_aces_isSet = false;
    m_role_aces_isValid = false;
}

void OAISecurityDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityDescriptor::fromJsonObject(QJsonObject json) {

    m_access_right_definitions_isValid = ::OpenAPI::fromJsonValue(m_access_right_definitions, json[QString("accessRightDefinitions")]);
    m_access_right_definitions_isSet = !json[QString("accessRightDefinitions")].isNull() && m_access_right_definitions_isValid;

    m_role_aces_isValid = ::OpenAPI::fromJsonValue(m_role_aces, json[QString("roleAces")]);
    m_role_aces_isSet = !json[QString("roleAces")].isNull() && m_role_aces_isValid;
}

QString OAISecurityDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_access_right_definitions.size() > 0) {
        obj.insert(QString("accessRightDefinitions"), ::OpenAPI::toJsonValue(m_access_right_definitions));
    }
    if (m_role_aces.size() > 0) {
        obj.insert(QString("roleAces"), ::OpenAPI::toJsonValue(m_role_aces));
    }
    return obj;
}

QList<OAIAceAccessRightDefinition> OAISecurityDescriptor::getAccessRightDefinitions() const {
    return m_access_right_definitions;
}
void OAISecurityDescriptor::setAccessRightDefinitions(const QList<OAIAceAccessRightDefinition> &access_right_definitions) {
    m_access_right_definitions = access_right_definitions;
    m_access_right_definitions_isSet = true;
}

bool OAISecurityDescriptor::is_access_right_definitions_Set() const{
    return m_access_right_definitions_isSet;
}

bool OAISecurityDescriptor::is_access_right_definitions_Valid() const{
    return m_access_right_definitions_isValid;
}

QList<OAIRoleAce> OAISecurityDescriptor::getRoleAces() const {
    return m_role_aces;
}
void OAISecurityDescriptor::setRoleAces(const QList<OAIRoleAce> &role_aces) {
    m_role_aces = role_aces;
    m_role_aces_isSet = true;
}

bool OAISecurityDescriptor::is_role_aces_Set() const{
    return m_role_aces_isSet;
}

bool OAISecurityDescriptor::is_role_aces_Valid() const{
    return m_role_aces_isValid;
}

bool OAISecurityDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_right_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_aces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
