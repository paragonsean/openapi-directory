/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentDeploymentModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentDeploymentModel::OAIEnvironmentDeploymentModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentDeploymentModel::OAIEnvironmentDeploymentModel() {
    this->initializeModel();
}

OAIEnvironmentDeploymentModel::~OAIEnvironmentDeploymentModel() {}

void OAIEnvironmentDeploymentModel::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIEnvironmentDeploymentModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentDeploymentModel::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIEnvironmentDeploymentModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentDeploymentModel::asJsonObject() const {
    QJsonObject obj;
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

OAIBuildLookupModel OAIEnvironmentDeploymentModel::getBuild() const {
    return m_build;
}
void OAIEnvironmentDeploymentModel::setBuild(const OAIBuildLookupModel &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIEnvironmentDeploymentModel::is_build_Set() const{
    return m_build_isSet;
}

bool OAIEnvironmentDeploymentModel::is_build_Valid() const{
    return m_build_isValid;
}

qint32 OAIEnvironmentDeploymentModel::getDeploymentId() const {
    return m_deployment_id;
}
void OAIEnvironmentDeploymentModel::setDeploymentId(const qint32 &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIEnvironmentDeploymentModel::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIEnvironmentDeploymentModel::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QDateTime OAIEnvironmentDeploymentModel::getFinished() const {
    return m_finished;
}
void OAIEnvironmentDeploymentModel::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIEnvironmentDeploymentModel::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIEnvironmentDeploymentModel::is_finished_Valid() const{
    return m_finished_isValid;
}

QDateTime OAIEnvironmentDeploymentModel::getStarted() const {
    return m_started;
}
void OAIEnvironmentDeploymentModel::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIEnvironmentDeploymentModel::is_started_Set() const{
    return m_started_isSet;
}

bool OAIEnvironmentDeploymentModel::is_started_Valid() const{
    return m_started_isValid;
}

OAIStatus OAIEnvironmentDeploymentModel::getStatus() const {
    return m_status;
}
void OAIEnvironmentDeploymentModel::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEnvironmentDeploymentModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEnvironmentDeploymentModel::is_status_Valid() const{
    return m_status_isValid;
}

OAIProjectLookupModel OAIEnvironmentDeploymentModel::getProject() const {
    return m_project;
}
void OAIEnvironmentDeploymentModel::setProject(const OAIProjectLookupModel &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIEnvironmentDeploymentModel::is_project_Set() const{
    return m_project_isSet;
}

bool OAIEnvironmentDeploymentModel::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIEnvironmentDeploymentModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentDeploymentModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
