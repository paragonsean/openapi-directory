/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuildApi_H
#define OAI_OAIBuildApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifactModel.h"
#include "OAIBuild.h"
#include "OAIBuildStartRequest.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIReRunBuildRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuildApi : public QObject {
    Q_OBJECT

public:
    OAIBuildApi(const int timeOut = 0);
    ~OAIBuildApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  build_version QString [required]
    */
    virtual void cancelBuild(const QString &account_name, const QString &project_slug, const QString &build_version);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  artifact_file_name QString [required]
    */
    virtual void getBuildArtifact(const QString &job_id, const QString &artifact_file_name);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getBuildArtifacts(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getBuildLog(const QString &job_id);

    /**
    * @param[in]  body OAIReRunBuildRequest [required]
    */
    virtual void reRunBuild(const OAIReRunBuildRequest &body);

    /**
    * @param[in]  body OAIBuildStartRequest [required]
    */
    virtual void startBuild(const OAIBuildStartRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelBuildCallback(OAIHttpRequestWorker *worker);
    void getBuildArtifactCallback(OAIHttpRequestWorker *worker);
    void getBuildArtifactsCallback(OAIHttpRequestWorker *worker);
    void getBuildLogCallback(OAIHttpRequestWorker *worker);
    void reRunBuildCallback(OAIHttpRequestWorker *worker);
    void startBuildCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelBuildSignal();
    void getBuildArtifactSignal(OAIHttpFileElement summary);
    void getBuildArtifactsSignal(QList<OAIArtifactModel> summary);
    void getBuildLogSignal(OAIHttpFileElement summary);
    void reRunBuildSignal(OAIBuild summary);
    void startBuildSignal(OAIBuild summary);


    void cancelBuildSignalFull(OAIHttpRequestWorker *worker);
    void getBuildArtifactSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getBuildArtifactsSignalFull(OAIHttpRequestWorker *worker, QList<OAIArtifactModel> summary);
    void getBuildLogSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void reRunBuildSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void startBuildSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);

    Q_DECL_DEPRECATED_X("Use cancelBuildSignalError() instead")
    void cancelBuildSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBuildSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuildArtifactSignalError() instead")
    void getBuildArtifactSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuildArtifactSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuildArtifactsSignalError() instead")
    void getBuildArtifactsSignalE(QList<OAIArtifactModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuildArtifactsSignalError(QList<OAIArtifactModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuildLogSignalError() instead")
    void getBuildLogSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuildLogSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reRunBuildSignalError() instead")
    void reRunBuildSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reRunBuildSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startBuildSignalError() instead")
    void startBuildSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startBuildSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelBuildSignalErrorFull() instead")
    void cancelBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuildArtifactSignalErrorFull() instead")
    void getBuildArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuildArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuildArtifactsSignalErrorFull() instead")
    void getBuildArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuildArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuildLogSignalErrorFull() instead")
    void getBuildLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuildLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reRunBuildSignalErrorFull() instead")
    void reRunBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reRunBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startBuildSignalErrorFull() instead")
    void startBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
