/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    return obj;
}

OAIBuild OAIDeployment::getBuild() const {
    return m_build;
}
void OAIDeployment::setBuild(const OAIBuild &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIDeployment::is_build_Set() const{
    return m_build_isSet;
}

bool OAIDeployment::is_build_Valid() const{
    return m_build_isValid;
}

qint32 OAIDeployment::getDeploymentId() const {
    return m_deployment_id;
}
void OAIDeployment::setDeploymentId(const qint32 &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIDeployment::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIDeployment::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QDateTime OAIDeployment::getFinished() const {
    return m_finished;
}
void OAIDeployment::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIDeployment::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIDeployment::is_finished_Valid() const{
    return m_finished_isValid;
}

QDateTime OAIDeployment::getStarted() const {
    return m_started;
}
void OAIDeployment::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIDeployment::is_started_Set() const{
    return m_started_isSet;
}

bool OAIDeployment::is_started_Valid() const{
    return m_started_isValid;
}

OAIStatus OAIDeployment::getStatus() const {
    return m_status;
}
void OAIDeployment::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeployment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeployment::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDeployment::getCreated() const {
    return m_created;
}
void OAIDeployment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDeployment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDeployment::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIDeployment::getUpdated() const {
    return m_updated;
}
void OAIDeployment::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDeployment::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDeployment::is_updated_Valid() const{
    return m_updated_isValid;
}

OAIDeploymentEnvironment OAIDeployment::getEnvironment() const {
    return m_environment;
}
void OAIDeployment::setEnvironment(const OAIDeploymentEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDeployment::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDeployment::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAIDeploymentJob> OAIDeployment::getJobs() const {
    return m_jobs;
}
void OAIDeployment::setJobs(const QList<OAIDeploymentJob> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIDeployment::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIDeployment::is_jobs_Valid() const{
    return m_jobs_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
