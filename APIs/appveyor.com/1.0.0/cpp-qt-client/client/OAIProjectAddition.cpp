/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectAddition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectAddition::OAIProjectAddition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectAddition::OAIProjectAddition() {
    this->initializeModel();
}

OAIProjectAddition::~OAIProjectAddition() {}

void OAIProjectAddition::initializeModel() {

    m_repository_authentication_isSet = false;
    m_repository_authentication_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_repository_password_isSet = false;
    m_repository_password_isValid = false;

    m_repository_provider_isSet = false;
    m_repository_provider_isValid = false;

    m_repository_username_isSet = false;
    m_repository_username_isValid = false;
}

void OAIProjectAddition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectAddition::fromJsonObject(QJsonObject json) {

    m_repository_authentication_isValid = ::OpenAPI::fromJsonValue(m_repository_authentication, json[QString("repositoryAuthentication")]);
    m_repository_authentication_isSet = !json[QString("repositoryAuthentication")].isNull() && m_repository_authentication_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_repository_password_isValid = ::OpenAPI::fromJsonValue(m_repository_password, json[QString("repositoryPassword")]);
    m_repository_password_isSet = !json[QString("repositoryPassword")].isNull() && m_repository_password_isValid;

    m_repository_provider_isValid = ::OpenAPI::fromJsonValue(m_repository_provider, json[QString("repositoryProvider")]);
    m_repository_provider_isSet = !json[QString("repositoryProvider")].isNull() && m_repository_provider_isValid;

    m_repository_username_isValid = ::OpenAPI::fromJsonValue(m_repository_username, json[QString("repositoryUsername")]);
    m_repository_username_isSet = !json[QString("repositoryUsername")].isNull() && m_repository_username_isValid;
}

QString OAIProjectAddition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectAddition::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_authentication.isSet()) {
        obj.insert(QString("repositoryAuthentication"), ::OpenAPI::toJsonValue(m_repository_authentication));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_repository_password_isSet) {
        obj.insert(QString("repositoryPassword"), ::OpenAPI::toJsonValue(m_repository_password));
    }
    if (m_repository_provider.isSet()) {
        obj.insert(QString("repositoryProvider"), ::OpenAPI::toJsonValue(m_repository_provider));
    }
    if (m_repository_username_isSet) {
        obj.insert(QString("repositoryUsername"), ::OpenAPI::toJsonValue(m_repository_username));
    }
    return obj;
}

OAIRepositoryAuthenticationType OAIProjectAddition::getRepositoryAuthentication() const {
    return m_repository_authentication;
}
void OAIProjectAddition::setRepositoryAuthentication(const OAIRepositoryAuthenticationType &repository_authentication) {
    m_repository_authentication = repository_authentication;
    m_repository_authentication_isSet = true;
}

bool OAIProjectAddition::is_repository_authentication_Set() const{
    return m_repository_authentication_isSet;
}

bool OAIProjectAddition::is_repository_authentication_Valid() const{
    return m_repository_authentication_isValid;
}

QString OAIProjectAddition::getRepositoryName() const {
    return m_repository_name;
}
void OAIProjectAddition::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIProjectAddition::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIProjectAddition::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIProjectAddition::getRepositoryPassword() const {
    return m_repository_password;
}
void OAIProjectAddition::setRepositoryPassword(const QString &repository_password) {
    m_repository_password = repository_password;
    m_repository_password_isSet = true;
}

bool OAIProjectAddition::is_repository_password_Set() const{
    return m_repository_password_isSet;
}

bool OAIProjectAddition::is_repository_password_Valid() const{
    return m_repository_password_isValid;
}

OAIRepositoryProvider OAIProjectAddition::getRepositoryProvider() const {
    return m_repository_provider;
}
void OAIProjectAddition::setRepositoryProvider(const OAIRepositoryProvider &repository_provider) {
    m_repository_provider = repository_provider;
    m_repository_provider_isSet = true;
}

bool OAIProjectAddition::is_repository_provider_Set() const{
    return m_repository_provider_isSet;
}

bool OAIProjectAddition::is_repository_provider_Valid() const{
    return m_repository_provider_isValid;
}

QString OAIProjectAddition::getRepositoryUsername() const {
    return m_repository_username;
}
void OAIProjectAddition::setRepositoryUsername(const QString &repository_username) {
    m_repository_username = repository_username;
    m_repository_username_isSet = true;
}

bool OAIProjectAddition::is_repository_username_Set() const{
    return m_repository_username_isSet;
}

bool OAIProjectAddition::is_repository_username_Valid() const{
    return m_repository_username_isValid;
}

bool OAIProjectAddition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectAddition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && m_repository_provider_isValid && true;
}

} // namespace OpenAPI
