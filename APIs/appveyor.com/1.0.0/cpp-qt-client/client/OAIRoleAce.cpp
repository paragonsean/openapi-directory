/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleAce.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleAce::OAIRoleAce(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleAce::OAIRoleAce() {
    this->initializeModel();
}

OAIRoleAce::~OAIRoleAce() {}

void OAIRoleAce::initializeModel() {

    m_access_rights_isSet = false;
    m_access_rights_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;
}

void OAIRoleAce::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleAce::fromJsonObject(QJsonObject json) {

    m_access_rights_isValid = ::OpenAPI::fromJsonValue(m_access_rights, json[QString("accessRights")]);
    m_access_rights_isSet = !json[QString("accessRights")].isNull() && m_access_rights_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("isAdmin")]);
    m_is_admin_isSet = !json[QString("isAdmin")].isNull() && m_is_admin_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;
}

QString OAIRoleAce::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleAce::asJsonObject() const {
    QJsonObject obj;
    if (m_access_rights.size() > 0) {
        obj.insert(QString("accessRights"), ::OpenAPI::toJsonValue(m_access_rights));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("isAdmin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    return obj;
}

QList<OAIAceAccessRight> OAIRoleAce::getAccessRights() const {
    return m_access_rights;
}
void OAIRoleAce::setAccessRights(const QList<OAIAceAccessRight> &access_rights) {
    m_access_rights = access_rights;
    m_access_rights_isSet = true;
}

bool OAIRoleAce::is_access_rights_Set() const{
    return m_access_rights_isSet;
}

bool OAIRoleAce::is_access_rights_Valid() const{
    return m_access_rights_isValid;
}

bool OAIRoleAce::isIsAdmin() const {
    return m_is_admin;
}
void OAIRoleAce::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIRoleAce::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIRoleAce::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

QString OAIRoleAce::getName() const {
    return m_name;
}
void OAIRoleAce::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleAce::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleAce::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRoleAce::getRoleId() const {
    return m_role_id;
}
void OAIRoleAce::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIRoleAce::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIRoleAce::is_role_id_Valid() const{
    return m_role_id_isValid;
}

bool OAIRoleAce::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleAce::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
