/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccountSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccountSettings::OAIUserAccountSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccountSettings::OAIUserAccountSettings() {
    this->initializeModel();
}

OAIUserAccountSettings::~OAIUserAccountSettings() {}

void OAIUserAccountSettings::initializeModel() {

    m_failed_build_notification_isSet = false;
    m_failed_build_notification_isValid = false;

    m_failed_deployment_notification_isSet = false;
    m_failed_deployment_notification_isValid = false;

    m_notify_when_build_status_changed_only_isSet = false;
    m_notify_when_build_status_changed_only_isValid = false;

    m_notify_when_deployment_status_changed_only_isSet = false;
    m_notify_when_deployment_status_changed_only_isValid = false;

    m_successful_build_notification_isSet = false;
    m_successful_build_notification_isValid = false;

    m_successful_deployment_notification_isSet = false;
    m_successful_deployment_notification_isValid = false;
}

void OAIUserAccountSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccountSettings::fromJsonObject(QJsonObject json) {

    m_failed_build_notification_isValid = ::OpenAPI::fromJsonValue(m_failed_build_notification, json[QString("failedBuildNotification")]);
    m_failed_build_notification_isSet = !json[QString("failedBuildNotification")].isNull() && m_failed_build_notification_isValid;

    m_failed_deployment_notification_isValid = ::OpenAPI::fromJsonValue(m_failed_deployment_notification, json[QString("failedDeploymentNotification")]);
    m_failed_deployment_notification_isSet = !json[QString("failedDeploymentNotification")].isNull() && m_failed_deployment_notification_isValid;

    m_notify_when_build_status_changed_only_isValid = ::OpenAPI::fromJsonValue(m_notify_when_build_status_changed_only, json[QString("notifyWhenBuildStatusChangedOnly")]);
    m_notify_when_build_status_changed_only_isSet = !json[QString("notifyWhenBuildStatusChangedOnly")].isNull() && m_notify_when_build_status_changed_only_isValid;

    m_notify_when_deployment_status_changed_only_isValid = ::OpenAPI::fromJsonValue(m_notify_when_deployment_status_changed_only, json[QString("notifyWhenDeploymentStatusChangedOnly")]);
    m_notify_when_deployment_status_changed_only_isSet = !json[QString("notifyWhenDeploymentStatusChangedOnly")].isNull() && m_notify_when_deployment_status_changed_only_isValid;

    m_successful_build_notification_isValid = ::OpenAPI::fromJsonValue(m_successful_build_notification, json[QString("successfulBuildNotification")]);
    m_successful_build_notification_isSet = !json[QString("successfulBuildNotification")].isNull() && m_successful_build_notification_isValid;

    m_successful_deployment_notification_isValid = ::OpenAPI::fromJsonValue(m_successful_deployment_notification, json[QString("successfulDeploymentNotification")]);
    m_successful_deployment_notification_isSet = !json[QString("successfulDeploymentNotification")].isNull() && m_successful_deployment_notification_isValid;
}

QString OAIUserAccountSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccountSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_build_notification.isSet()) {
        obj.insert(QString("failedBuildNotification"), ::OpenAPI::toJsonValue(m_failed_build_notification));
    }
    if (m_failed_deployment_notification.isSet()) {
        obj.insert(QString("failedDeploymentNotification"), ::OpenAPI::toJsonValue(m_failed_deployment_notification));
    }
    if (m_notify_when_build_status_changed_only_isSet) {
        obj.insert(QString("notifyWhenBuildStatusChangedOnly"), ::OpenAPI::toJsonValue(m_notify_when_build_status_changed_only));
    }
    if (m_notify_when_deployment_status_changed_only_isSet) {
        obj.insert(QString("notifyWhenDeploymentStatusChangedOnly"), ::OpenAPI::toJsonValue(m_notify_when_deployment_status_changed_only));
    }
    if (m_successful_build_notification.isSet()) {
        obj.insert(QString("successfulBuildNotification"), ::OpenAPI::toJsonValue(m_successful_build_notification));
    }
    if (m_successful_deployment_notification.isSet()) {
        obj.insert(QString("successfulDeploymentNotification"), ::OpenAPI::toJsonValue(m_successful_deployment_notification));
    }
    return obj;
}

OAIBuildNotificationFrequency OAIUserAccountSettings::getFailedBuildNotification() const {
    return m_failed_build_notification;
}
void OAIUserAccountSettings::setFailedBuildNotification(const OAIBuildNotificationFrequency &failed_build_notification) {
    m_failed_build_notification = failed_build_notification;
    m_failed_build_notification_isSet = true;
}

bool OAIUserAccountSettings::is_failed_build_notification_Set() const{
    return m_failed_build_notification_isSet;
}

bool OAIUserAccountSettings::is_failed_build_notification_Valid() const{
    return m_failed_build_notification_isValid;
}

OAIDeploymentNotificationFrequency OAIUserAccountSettings::getFailedDeploymentNotification() const {
    return m_failed_deployment_notification;
}
void OAIUserAccountSettings::setFailedDeploymentNotification(const OAIDeploymentNotificationFrequency &failed_deployment_notification) {
    m_failed_deployment_notification = failed_deployment_notification;
    m_failed_deployment_notification_isSet = true;
}

bool OAIUserAccountSettings::is_failed_deployment_notification_Set() const{
    return m_failed_deployment_notification_isSet;
}

bool OAIUserAccountSettings::is_failed_deployment_notification_Valid() const{
    return m_failed_deployment_notification_isValid;
}

bool OAIUserAccountSettings::isNotifyWhenBuildStatusChangedOnly() const {
    return m_notify_when_build_status_changed_only;
}
void OAIUserAccountSettings::setNotifyWhenBuildStatusChangedOnly(const bool &notify_when_build_status_changed_only) {
    m_notify_when_build_status_changed_only = notify_when_build_status_changed_only;
    m_notify_when_build_status_changed_only_isSet = true;
}

bool OAIUserAccountSettings::is_notify_when_build_status_changed_only_Set() const{
    return m_notify_when_build_status_changed_only_isSet;
}

bool OAIUserAccountSettings::is_notify_when_build_status_changed_only_Valid() const{
    return m_notify_when_build_status_changed_only_isValid;
}

bool OAIUserAccountSettings::isNotifyWhenDeploymentStatusChangedOnly() const {
    return m_notify_when_deployment_status_changed_only;
}
void OAIUserAccountSettings::setNotifyWhenDeploymentStatusChangedOnly(const bool &notify_when_deployment_status_changed_only) {
    m_notify_when_deployment_status_changed_only = notify_when_deployment_status_changed_only;
    m_notify_when_deployment_status_changed_only_isSet = true;
}

bool OAIUserAccountSettings::is_notify_when_deployment_status_changed_only_Set() const{
    return m_notify_when_deployment_status_changed_only_isSet;
}

bool OAIUserAccountSettings::is_notify_when_deployment_status_changed_only_Valid() const{
    return m_notify_when_deployment_status_changed_only_isValid;
}

OAIBuildNotificationFrequency OAIUserAccountSettings::getSuccessfulBuildNotification() const {
    return m_successful_build_notification;
}
void OAIUserAccountSettings::setSuccessfulBuildNotification(const OAIBuildNotificationFrequency &successful_build_notification) {
    m_successful_build_notification = successful_build_notification;
    m_successful_build_notification_isSet = true;
}

bool OAIUserAccountSettings::is_successful_build_notification_Set() const{
    return m_successful_build_notification_isSet;
}

bool OAIUserAccountSettings::is_successful_build_notification_Valid() const{
    return m_successful_build_notification_isValid;
}

OAIDeploymentNotificationFrequency OAIUserAccountSettings::getSuccessfulDeploymentNotification() const {
    return m_successful_deployment_notification;
}
void OAIUserAccountSettings::setSuccessfulDeploymentNotification(const OAIDeploymentNotificationFrequency &successful_deployment_notification) {
    m_successful_deployment_notification = successful_deployment_notification;
    m_successful_deployment_notification_isSet = true;
}

bool OAIUserAccountSettings::is_successful_deployment_notification_Set() const{
    return m_successful_deployment_notification_isSet;
}

bool OAIUserAccountSettings::is_successful_deployment_notification_Valid() const{
    return m_successful_deployment_notification_isValid;
}

bool OAIUserAccountSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_build_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_deployment_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_when_build_status_changed_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_when_deployment_status_changed_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_build_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_deployment_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccountSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failed_build_notification_isValid && m_failed_deployment_notification_isValid && m_successful_build_notification_isValid && m_successful_deployment_notification_isValid && true;
}

} // namespace OpenAPI
