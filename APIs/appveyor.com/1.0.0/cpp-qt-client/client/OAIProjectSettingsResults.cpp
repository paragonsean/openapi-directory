/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSettingsResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSettingsResults::OAIProjectSettingsResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSettingsResults::OAIProjectSettingsResults() {
    this->initializeModel();
}

OAIProjectSettingsResults::~OAIProjectSettingsResults() {}

void OAIProjectSettingsResults::initializeModel() {

    m_build_clouds_isSet = false;
    m_build_clouds_isValid = false;

    m_default_image_name_isSet = false;
    m_default_image_name_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIProjectSettingsResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSettingsResults::fromJsonObject(QJsonObject json) {

    m_build_clouds_isValid = ::OpenAPI::fromJsonValue(m_build_clouds, json[QString("buildClouds")]);
    m_build_clouds_isSet = !json[QString("buildClouds")].isNull() && m_build_clouds_isValid;

    m_default_image_name_isValid = ::OpenAPI::fromJsonValue(m_default_image_name, json[QString("defaultImageName")]);
    m_default_image_name_isSet = !json[QString("defaultImageName")].isNull() && m_default_image_name_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAIProjectSettingsResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSettingsResults::asJsonObject() const {
    QJsonObject obj;
    if (m_build_clouds.size() > 0) {
        obj.insert(QString("buildClouds"), ::OpenAPI::toJsonValue(m_build_clouds));
    }
    if (m_default_image_name_isSet) {
        obj.insert(QString("defaultImageName"), ::OpenAPI::toJsonValue(m_default_image_name));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

QList<OAIStringValueObject> OAIProjectSettingsResults::getBuildClouds() const {
    return m_build_clouds;
}
void OAIProjectSettingsResults::setBuildClouds(const QList<OAIStringValueObject> &build_clouds) {
    m_build_clouds = build_clouds;
    m_build_clouds_isSet = true;
}

bool OAIProjectSettingsResults::is_build_clouds_Set() const{
    return m_build_clouds_isSet;
}

bool OAIProjectSettingsResults::is_build_clouds_Valid() const{
    return m_build_clouds_isValid;
}

QString OAIProjectSettingsResults::getDefaultImageName() const {
    return m_default_image_name;
}
void OAIProjectSettingsResults::setDefaultImageName(const QString &default_image_name) {
    m_default_image_name = default_image_name;
    m_default_image_name_isSet = true;
}

bool OAIProjectSettingsResults::is_default_image_name_Set() const{
    return m_default_image_name_isSet;
}

bool OAIProjectSettingsResults::is_default_image_name_Valid() const{
    return m_default_image_name_isValid;
}

QList<OAIBuildWorkerImage> OAIProjectSettingsResults::getImages() const {
    return m_images;
}
void OAIProjectSettingsResults::setImages(const QList<OAIBuildWorkerImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIProjectSettingsResults::is_images_Set() const{
    return m_images_isSet;
}

bool OAIProjectSettingsResults::is_images_Valid() const{
    return m_images_isValid;
}

OAIProject OAIProjectSettingsResults::getProject() const {
    return m_project;
}
void OAIProjectSettingsResults::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectSettingsResults::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectSettingsResults::is_project_Valid() const{
    return m_project_isValid;
}

OAIProjectWithConfiguration OAIProjectSettingsResults::getSettings() const {
    return m_settings;
}
void OAIProjectSettingsResults::setSettings(const OAIProjectWithConfiguration &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIProjectSettingsResults::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIProjectSettingsResults::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIProjectSettingsResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_clouds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSettingsResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
