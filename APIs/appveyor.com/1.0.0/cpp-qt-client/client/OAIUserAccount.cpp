/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccount::OAIUserAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccount::OAIUserAccount() {
    this->initializeModel();
}

OAIUserAccount::~OAIUserAccount() {}

void OAIUserAccount::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_is_collaborator_isSet = false;
    m_is_collaborator_isValid = false;

    m_is_owner_isSet = false;
    m_is_owner_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_two_factor_auth_enabled_isSet = false;
    m_two_factor_auth_enabled_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccount::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_is_collaborator_isValid = ::OpenAPI::fromJsonValue(m_is_collaborator, json[QString("isCollaborator")]);
    m_is_collaborator_isSet = !json[QString("isCollaborator")].isNull() && m_is_collaborator_isValid;

    m_is_owner_isValid = ::OpenAPI::fromJsonValue(m_is_owner, json[QString("isOwner")]);
    m_is_owner_isSet = !json[QString("isOwner")].isNull() && m_is_owner_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_two_factor_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_two_factor_auth_enabled, json[QString("twoFactorAuthEnabled")]);
    m_two_factor_auth_enabled_isSet = !json[QString("twoFactorAuthEnabled")].isNull() && m_two_factor_auth_enabled_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_is_collaborator_isSet) {
        obj.insert(QString("isCollaborator"), ::OpenAPI::toJsonValue(m_is_collaborator));
    }
    if (m_is_owner_isSet) {
        obj.insert(QString("isOwner"), ::OpenAPI::toJsonValue(m_is_owner));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_two_factor_auth_enabled_isSet) {
        obj.insert(QString("twoFactorAuthEnabled"), ::OpenAPI::toJsonValue(m_two_factor_auth_enabled));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIUserAccount::getCreated() const {
    return m_created;
}
void OAIUserAccount::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUserAccount::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUserAccount::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIUserAccount::getUpdated() const {
    return m_updated;
}
void OAIUserAccount::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIUserAccount::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIUserAccount::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIUserAccount::getAccountId() const {
    return m_account_id;
}
void OAIUserAccount::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUserAccount::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUserAccount::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUserAccount::getAccountName() const {
    return m_account_name;
}
void OAIUserAccount::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUserAccount::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUserAccount::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIUserAccount::getEmail() const {
    return m_email;
}
void OAIUserAccount::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserAccount::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserAccount::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserAccount::getFullName() const {
    return m_full_name;
}
void OAIUserAccount::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUserAccount::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUserAccount::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIUserAccount::isIsCollaborator() const {
    return m_is_collaborator;
}
void OAIUserAccount::setIsCollaborator(const bool &is_collaborator) {
    m_is_collaborator = is_collaborator;
    m_is_collaborator_isSet = true;
}

bool OAIUserAccount::is_is_collaborator_Set() const{
    return m_is_collaborator_isSet;
}

bool OAIUserAccount::is_is_collaborator_Valid() const{
    return m_is_collaborator_isValid;
}

bool OAIUserAccount::isIsOwner() const {
    return m_is_owner;
}
void OAIUserAccount::setIsOwner(const bool &is_owner) {
    m_is_owner = is_owner;
    m_is_owner_isSet = true;
}

bool OAIUserAccount::is_is_owner_Set() const{
    return m_is_owner_isSet;
}

bool OAIUserAccount::is_is_owner_Valid() const{
    return m_is_owner_isValid;
}

qint32 OAIUserAccount::getPageSize() const {
    return m_page_size;
}
void OAIUserAccount::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIUserAccount::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIUserAccount::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIUserAccount::getPassword() const {
    return m_password;
}
void OAIUserAccount::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUserAccount::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUserAccount::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIUserAccount::getRoleId() const {
    return m_role_id;
}
void OAIUserAccount::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIUserAccount::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIUserAccount::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QString OAIUserAccount::getRoleName() const {
    return m_role_name;
}
void OAIUserAccount::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIUserAccount::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIUserAccount::is_role_name_Valid() const{
    return m_role_name_isValid;
}

bool OAIUserAccount::isTwoFactorAuthEnabled() const {
    return m_two_factor_auth_enabled;
}
void OAIUserAccount::setTwoFactorAuthEnabled(const bool &two_factor_auth_enabled) {
    m_two_factor_auth_enabled = two_factor_auth_enabled;
    m_two_factor_auth_enabled_isSet = true;
}

bool OAIUserAccount::is_two_factor_auth_enabled_Set() const{
    return m_two_factor_auth_enabled_isSet;
}

bool OAIUserAccount::is_two_factor_auth_enabled_Valid() const{
    return m_two_factor_auth_enabled_isValid;
}

qint32 OAIUserAccount::getUserId() const {
    return m_user_id;
}
void OAIUserAccount::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserAccount::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserAccount::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_collaborator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_full_name_isValid && true;
}

} // namespace OpenAPI
