/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuild.h
 *
 * 
 */

#ifndef OAIBuild_H
#define OAIBuild_H

#include <QJsonObject>

#include "OAIBuildJob.h"
#include "OAIBuildMessage.h"
#include "OAIStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuildJob;
class OAIBuildMessage;

class OAIBuild : public OAIObject {
public:
    OAIBuild();
    OAIBuild(QString json);
    ~OAIBuild() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    qint32 getBuildId() const;
    void setBuildId(const qint32 &build_id);
    bool is_build_id_Set() const;
    bool is_build_id_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getAuthorName() const;
    void setAuthorName(const QString &author_name);
    bool is_author_name_Set() const;
    bool is_author_name_Valid() const;

    QString getAuthorUsername() const;
    void setAuthorUsername(const QString &author_username);
    bool is_author_username_Set() const;
    bool is_author_username_Valid() const;

    qint32 getBuildNumber() const;
    void setBuildNumber(const qint32 &build_number);
    bool is_build_number_Set() const;
    bool is_build_number_Valid() const;

    QString getCommitId() const;
    void setCommitId(const QString &commit_id);
    bool is_commit_id_Set() const;
    bool is_commit_id_Valid() const;

    QDateTime getCommitted() const;
    void setCommitted(const QDateTime &committed);
    bool is_committed_Set() const;
    bool is_committed_Valid() const;

    QString getCommitterName() const;
    void setCommitterName(const QString &committer_name);
    bool is_committer_name_Set() const;
    bool is_committer_name_Valid() const;

    QString getCommitterUsername() const;
    void setCommitterUsername(const QString &committer_username);
    bool is_committer_username_Set() const;
    bool is_committer_username_Valid() const;

    QDateTime getFinished() const;
    void setFinished(const QDateTime &finished);
    bool is_finished_Set() const;
    bool is_finished_Valid() const;

    bool isIsTag() const;
    void setIsTag(const bool &is_tag);
    bool is_is_tag_Set() const;
    bool is_is_tag_Valid() const;

    QList<OAIBuildJob> getJobs() const;
    void setJobs(const QList<OAIBuildJob> &jobs);
    bool is_jobs_Set() const;
    bool is_jobs_Valid() const;

    QString getMessageExtended() const;
    void setMessageExtended(const QString &message_extended);
    bool is_message_extended_Set() const;
    bool is_message_extended_Valid() const;

    QList<OAIBuildMessage> getMessages() const;
    void setMessages(const QList<OAIBuildMessage> &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    qint32 getProjectId() const;
    void setProjectId(const qint32 &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    qint32 getPullRequestId() const;
    void setPullRequestId(const qint32 &pull_request_id);
    bool is_pull_request_id_Set() const;
    bool is_pull_request_id_Valid() const;

    QString getPullRequestName() const;
    void setPullRequestName(const QString &pull_request_name);
    bool is_pull_request_name_Set() const;
    bool is_pull_request_name_Valid() const;

    QDateTime getStarted() const;
    void setStarted(const QDateTime &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    qint32 m_build_id;
    bool m_build_id_isSet;
    bool m_build_id_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_author_name;
    bool m_author_name_isSet;
    bool m_author_name_isValid;

    QString m_author_username;
    bool m_author_username_isSet;
    bool m_author_username_isValid;

    qint32 m_build_number;
    bool m_build_number_isSet;
    bool m_build_number_isValid;

    QString m_commit_id;
    bool m_commit_id_isSet;
    bool m_commit_id_isValid;

    QDateTime m_committed;
    bool m_committed_isSet;
    bool m_committed_isValid;

    QString m_committer_name;
    bool m_committer_name_isSet;
    bool m_committer_name_isValid;

    QString m_committer_username;
    bool m_committer_username_isSet;
    bool m_committer_username_isValid;

    QDateTime m_finished;
    bool m_finished_isSet;
    bool m_finished_isValid;

    bool m_is_tag;
    bool m_is_tag_isSet;
    bool m_is_tag_isValid;

    QList<OAIBuildJob> m_jobs;
    bool m_jobs_isSet;
    bool m_jobs_isValid;

    QString m_message_extended;
    bool m_message_extended_isSet;
    bool m_message_extended_isValid;

    QList<OAIBuildMessage> m_messages;
    bool m_messages_isSet;
    bool m_messages_isValid;

    qint32 m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    qint32 m_pull_request_id;
    bool m_pull_request_id_isSet;
    bool m_pull_request_id_isValid;

    QString m_pull_request_name;
    bool m_pull_request_name_isSet;
    bool m_pull_request_name_isValid;

    QDateTime m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuild)

#endif // OAIBuild_H
