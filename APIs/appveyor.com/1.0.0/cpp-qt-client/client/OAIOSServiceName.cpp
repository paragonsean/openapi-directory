/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSServiceName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSServiceName::OAIOSServiceName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSServiceName::OAIOSServiceName() {
    this->initializeModel();
}

OAIOSServiceName::~OAIOSServiceName() {}

void OAIOSServiceName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOSServiceName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOSServiceName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("iis", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::IIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mongodb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MONGODB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("msmq", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSMQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2008r2sp2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2008R2SP2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2008r2sp2rs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2008R2SP2RS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2012sp1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2012SP1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2012sp1rs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2012SP1RS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2014", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2014;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2014rs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2014RS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mssql2016", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MSSQL2016;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mysql", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::MYSQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("postgresql", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOSServiceName::POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOSServiceName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOSServiceName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOSServiceName::IIS:
            val = "iis";
            break;
        case eOAIOSServiceName::MONGODB:
            val = "mongodb";
            break;
        case eOAIOSServiceName::MSMQ:
            val = "msmq";
            break;
        case eOAIOSServiceName::MSSQL2008R2SP2:
            val = "mssql2008r2sp2";
            break;
        case eOAIOSServiceName::MSSQL2008R2SP2RS:
            val = "mssql2008r2sp2rs";
            break;
        case eOAIOSServiceName::MSSQL2012SP1:
            val = "mssql2012sp1";
            break;
        case eOAIOSServiceName::MSSQL2012SP1RS:
            val = "mssql2012sp1rs";
            break;
        case eOAIOSServiceName::MSSQL2014:
            val = "mssql2014";
            break;
        case eOAIOSServiceName::MSSQL2014RS:
            val = "mssql2014rs";
            break;
        case eOAIOSServiceName::MSSQL2016:
            val = "mssql2016";
            break;
        case eOAIOSServiceName::MYSQL:
            val = "mysql";
            break;
        case eOAIOSServiceName::POSTGRESQL:
            val = "postgresql";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOSServiceName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOSServiceName::eOAIOSServiceName OAIOSServiceName::getValue() const {
    return m_value;
}

void OAIOSServiceName::setValue(const OAIOSServiceName::eOAIOSServiceName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOSServiceName::isSet() const {
    
    return m_value_isSet;
}

bool OAIOSServiceName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
