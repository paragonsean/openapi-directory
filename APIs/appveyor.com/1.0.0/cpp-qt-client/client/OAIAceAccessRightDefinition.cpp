/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAceAccessRightDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAceAccessRightDefinition::OAIAceAccessRightDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAceAccessRightDefinition::OAIAceAccessRightDefinition() {
    this->initializeModel();
}

OAIAceAccessRightDefinition::~OAIAceAccessRightDefinition() {}

void OAIAceAccessRightDefinition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAceAccessRightDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAceAccessRightDefinition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAceAccessRightDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAceAccessRightDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAceAccessRightDefinition::getDescription() const {
    return m_description;
}
void OAIAceAccessRightDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAceAccessRightDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAceAccessRightDefinition::is_description_Valid() const{
    return m_description_isValid;
}

OAIAccessRightName OAIAceAccessRightDefinition::getName() const {
    return m_name;
}
void OAIAceAccessRightDefinition::setName(const OAIAccessRightName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAceAccessRightDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAceAccessRightDefinition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAceAccessRightDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAceAccessRightDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
