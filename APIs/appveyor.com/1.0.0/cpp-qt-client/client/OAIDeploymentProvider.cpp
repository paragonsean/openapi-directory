/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentProvider::OAIDeploymentProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentProvider::OAIDeploymentProvider() {
    this->initializeModel();
}

OAIDeploymentProvider::~OAIDeploymentProvider() {}

void OAIDeploymentProvider::initializeModel() {

    m_on_branch_isSet = false;
    m_on_branch_isValid = false;

    m_on_environment_variables_isSet = false;
    m_on_environment_variables_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provider_settings_isSet = false;
    m_provider_settings_isValid = false;
}

void OAIDeploymentProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentProvider::fromJsonObject(QJsonObject json) {

    m_on_branch_isValid = ::OpenAPI::fromJsonValue(m_on_branch, json[QString("onBranch")]);
    m_on_branch_isSet = !json[QString("onBranch")].isNull() && m_on_branch_isValid;

    m_on_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_on_environment_variables, json[QString("onEnvironmentVariables")]);
    m_on_environment_variables_isSet = !json[QString("onEnvironmentVariables")].isNull() && m_on_environment_variables_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provider_settings_isValid = ::OpenAPI::fromJsonValue(m_provider_settings, json[QString("providerSettings")]);
    m_provider_settings_isSet = !json[QString("providerSettings")].isNull() && m_provider_settings_isValid;
}

QString OAIDeploymentProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_on_branch.size() > 0) {
        obj.insert(QString("onBranch"), ::OpenAPI::toJsonValue(m_on_branch));
    }
    if (m_on_environment_variables.size() > 0) {
        obj.insert(QString("onEnvironmentVariables"), ::OpenAPI::toJsonValue(m_on_environment_variables));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provider_settings.size() > 0) {
        obj.insert(QString("providerSettings"), ::OpenAPI::toJsonValue(m_provider_settings));
    }
    return obj;
}

QList<OAIStringValueObject> OAIDeploymentProvider::getOnBranch() const {
    return m_on_branch;
}
void OAIDeploymentProvider::setOnBranch(const QList<OAIStringValueObject> &on_branch) {
    m_on_branch = on_branch;
    m_on_branch_isSet = true;
}

bool OAIDeploymentProvider::is_on_branch_Set() const{
    return m_on_branch_isSet;
}

bool OAIDeploymentProvider::is_on_branch_Valid() const{
    return m_on_branch_isValid;
}

QList<OAIStoredNameValue> OAIDeploymentProvider::getOnEnvironmentVariables() const {
    return m_on_environment_variables;
}
void OAIDeploymentProvider::setOnEnvironmentVariables(const QList<OAIStoredNameValue> &on_environment_variables) {
    m_on_environment_variables = on_environment_variables;
    m_on_environment_variables_isSet = true;
}

bool OAIDeploymentProvider::is_on_environment_variables_Set() const{
    return m_on_environment_variables_isSet;
}

bool OAIDeploymentProvider::is_on_environment_variables_Valid() const{
    return m_on_environment_variables_isValid;
}

OAIDeploymentProviderType OAIDeploymentProvider::getProvider() const {
    return m_provider;
}
void OAIDeploymentProvider::setProvider(const OAIDeploymentProviderType &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDeploymentProvider::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDeploymentProvider::is_provider_Valid() const{
    return m_provider_isValid;
}

QList<OAIStoredNameValue> OAIDeploymentProvider::getProviderSettings() const {
    return m_provider_settings;
}
void OAIDeploymentProvider::setProviderSettings(const QList<OAIStoredNameValue> &provider_settings) {
    m_provider_settings = provider_settings;
    m_provider_settings_isSet = true;
}

bool OAIDeploymentProvider::is_provider_settings_Set() const{
    return m_provider_settings_isSet;
}

bool OAIDeploymentProvider::is_provider_settings_Valid() const{
    return m_provider_settings_isValid;
}

bool OAIDeploymentProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_branch.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provider_isValid && true;
}

} // namespace OpenAPI
