/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject.h
 *
 * 
 */

#ifndef OAIProject_H
#define OAIProject_H

#include <QJsonObject>

#include "OAIBuild.h"
#include "OAINuGetFeed.h"
#include "OAIRepositoryProvider.h"
#include "OAIRepositoryScm.h"
#include "OAISecurityDescriptor.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuild;
class OAINuGetFeed;
class OAISecurityDescriptor;

class OAIProject : public OAIObject {
public:
    OAIProject();
    OAIProject(QString json);
    ~OAIProject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountName() const;
    void setAccountName(const QString &account_name);
    bool is_account_name_Set() const;
    bool is_account_name_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getProjectId() const;
    void setProjectId(const qint32 &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    qint32 getAccountId() const;
    void setAccountId(const qint32 &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    bool isAlwaysBuildClosedPullRequests() const;
    void setAlwaysBuildClosedPullRequests(const bool &always_build_closed_pull_requests);
    bool is_always_build_closed_pull_requests_Set() const;
    bool is_always_build_closed_pull_requests_Valid() const;

    QList<OAIBuild> getBuilds() const;
    void setBuilds(const QList<OAIBuild> &builds);
    bool is_builds_Set() const;
    bool is_builds_Valid() const;

    qint32 getCurrentBuildId() const;
    void setCurrentBuildId(const qint32 &current_build_id);
    bool is_current_build_id_Set() const;
    bool is_current_build_id_Valid() const;

    bool isDisablePullRequestWebhooks() const;
    void setDisablePullRequestWebhooks(const bool &disable_pull_request_webhooks);
    bool is_disable_pull_request_webhooks_Set() const;
    bool is_disable_pull_request_webhooks_Valid() const;

    bool isDisablePushWebhooks() const;
    void setDisablePushWebhooks(const bool &disable_push_webhooks);
    bool is_disable_push_webhooks_Set() const;
    bool is_disable_push_webhooks_Valid() const;

    bool isEnableDeploymentInPullRequests() const;
    void setEnableDeploymentInPullRequests(const bool &enable_deployment_in_pull_requests);
    bool is_enable_deployment_in_pull_requests_Set() const;
    bool is_enable_deployment_in_pull_requests_Valid() const;

    bool isEnableSecureVariablesInPullRequests() const;
    void setEnableSecureVariablesInPullRequests(const bool &enable_secure_variables_in_pull_requests);
    bool is_enable_secure_variables_in_pull_requests_Set() const;
    bool is_enable_secure_variables_in_pull_requests_Valid() const;

    bool isEnableSecureVariablesInPullRequestsFromSameRepo() const;
    void setEnableSecureVariablesInPullRequestsFromSameRepo(const bool &enable_secure_variables_in_pull_requests_from_same_repo);
    bool is_enable_secure_variables_in_pull_requests_from_same_repo_Set() const;
    bool is_enable_secure_variables_in_pull_requests_from_same_repo_Valid() const;

    bool isIsGitHubApp() const;
    void setIsGitHubApp(const bool &is_git_hub_app);
    bool is_is_git_hub_app_Set() const;
    bool is_is_git_hub_app_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    OAINuGetFeed getNuGetFeed() const;
    void setNuGetFeed(const OAINuGetFeed &nu_get_feed);
    bool is_nu_get_feed_Set() const;
    bool is_nu_get_feed_Valid() const;

    QString getRepositoryBranch() const;
    void setRepositoryBranch(const QString &repository_branch);
    bool is_repository_branch_Set() const;
    bool is_repository_branch_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    OAIRepositoryScm getRepositoryScm() const;
    void setRepositoryScm(const OAIRepositoryScm &repository_scm);
    bool is_repository_scm_Set() const;
    bool is_repository_scm_Valid() const;

    OAIRepositoryProvider getRepositoryType() const;
    void setRepositoryType(const OAIRepositoryProvider &repository_type);
    bool is_repository_type_Set() const;
    bool is_repository_type_Valid() const;

    bool isRollingBuilds() const;
    void setRollingBuilds(const bool &rolling_builds);
    bool is_rolling_builds_Set() const;
    bool is_rolling_builds_Valid() const;

    bool isRollingBuildsDoNotCancelRunningBuilds() const;
    void setRollingBuildsDoNotCancelRunningBuilds(const bool &rolling_builds_do_not_cancel_running_builds);
    bool is_rolling_builds_do_not_cancel_running_builds_Set() const;
    bool is_rolling_builds_do_not_cancel_running_builds_Valid() const;

    bool isRollingBuildsOnlyForPullRequests() const;
    void setRollingBuildsOnlyForPullRequests(const bool &rolling_builds_only_for_pull_requests);
    bool is_rolling_builds_only_for_pull_requests_Set() const;
    bool is_rolling_builds_only_for_pull_requests_Valid() const;

    bool isSaveBuildCacheInPullRequests() const;
    void setSaveBuildCacheInPullRequests(const bool &save_build_cache_in_pull_requests);
    bool is_save_build_cache_in_pull_requests_Set() const;
    bool is_save_build_cache_in_pull_requests_Valid() const;

    OAISecurityDescriptor getSecurityDescriptor() const;
    void setSecurityDescriptor(const OAISecurityDescriptor &security_descriptor);
    bool is_security_descriptor_Set() const;
    bool is_security_descriptor_Valid() const;

    bool isSkipBranchesWithoutAppveyorYml() const;
    void setSkipBranchesWithoutAppveyorYml(const bool &skip_branches_without_appveyor_yml);
    bool is_skip_branches_without_appveyor_yml_Set() const;
    bool is_skip_branches_without_appveyor_yml_Valid() const;

    QString getTags() const;
    void setTags(const QString &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_name;
    bool m_account_name_isSet;
    bool m_account_name_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    qint32 m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    bool m_always_build_closed_pull_requests;
    bool m_always_build_closed_pull_requests_isSet;
    bool m_always_build_closed_pull_requests_isValid;

    QList<OAIBuild> m_builds;
    bool m_builds_isSet;
    bool m_builds_isValid;

    qint32 m_current_build_id;
    bool m_current_build_id_isSet;
    bool m_current_build_id_isValid;

    bool m_disable_pull_request_webhooks;
    bool m_disable_pull_request_webhooks_isSet;
    bool m_disable_pull_request_webhooks_isValid;

    bool m_disable_push_webhooks;
    bool m_disable_push_webhooks_isSet;
    bool m_disable_push_webhooks_isValid;

    bool m_enable_deployment_in_pull_requests;
    bool m_enable_deployment_in_pull_requests_isSet;
    bool m_enable_deployment_in_pull_requests_isValid;

    bool m_enable_secure_variables_in_pull_requests;
    bool m_enable_secure_variables_in_pull_requests_isSet;
    bool m_enable_secure_variables_in_pull_requests_isValid;

    bool m_enable_secure_variables_in_pull_requests_from_same_repo;
    bool m_enable_secure_variables_in_pull_requests_from_same_repo_isSet;
    bool m_enable_secure_variables_in_pull_requests_from_same_repo_isValid;

    bool m_is_git_hub_app;
    bool m_is_git_hub_app_isSet;
    bool m_is_git_hub_app_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    OAINuGetFeed m_nu_get_feed;
    bool m_nu_get_feed_isSet;
    bool m_nu_get_feed_isValid;

    QString m_repository_branch;
    bool m_repository_branch_isSet;
    bool m_repository_branch_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    OAIRepositoryScm m_repository_scm;
    bool m_repository_scm_isSet;
    bool m_repository_scm_isValid;

    OAIRepositoryProvider m_repository_type;
    bool m_repository_type_isSet;
    bool m_repository_type_isValid;

    bool m_rolling_builds;
    bool m_rolling_builds_isSet;
    bool m_rolling_builds_isValid;

    bool m_rolling_builds_do_not_cancel_running_builds;
    bool m_rolling_builds_do_not_cancel_running_builds_isSet;
    bool m_rolling_builds_do_not_cancel_running_builds_isValid;

    bool m_rolling_builds_only_for_pull_requests;
    bool m_rolling_builds_only_for_pull_requests_isSet;
    bool m_rolling_builds_only_for_pull_requests_isValid;

    bool m_save_build_cache_in_pull_requests;
    bool m_save_build_cache_in_pull_requests_isSet;
    bool m_save_build_cache_in_pull_requests_isValid;

    OAISecurityDescriptor m_security_descriptor;
    bool m_security_descriptor_isSet;
    bool m_security_descriptor_isValid;

    bool m_skip_branches_without_appveyor_yml;
    bool m_skip_branches_without_appveyor_yml_isSet;
    bool m_skip_branches_without_appveyor_yml_isValid;

    QString m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject)

#endif // OAIProject_H
