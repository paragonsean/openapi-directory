/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaboratorUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaboratorUpdate::OAICollaboratorUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaboratorUpdate::OAICollaboratorUpdate() {
    this->initializeModel();
}

OAICollaboratorUpdate::~OAICollaboratorUpdate() {}

void OAICollaboratorUpdate::initializeModel() {

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICollaboratorUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaboratorUpdate::fromJsonObject(QJsonObject json) {

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAICollaboratorUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaboratorUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAICollaboratorUpdate::getRoleId() const {
    return m_role_id;
}
void OAICollaboratorUpdate::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAICollaboratorUpdate::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAICollaboratorUpdate::is_role_id_Valid() const{
    return m_role_id_isValid;
}

qint32 OAICollaboratorUpdate::getUserId() const {
    return m_user_id;
}
void OAICollaboratorUpdate::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICollaboratorUpdate::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICollaboratorUpdate::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICollaboratorUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaboratorUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
