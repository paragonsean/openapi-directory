/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionUserModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionUserModel::OAISessionUserModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionUserModel::OAISessionUserModel() {
    this->initializeModel();
}

OAISessionUserModel::~OAISessionUserModel() {}

void OAISessionUserModel::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_bit_bucket_username_isSet = false;
    m_bit_bucket_username_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_git_hub_username_isSet = false;
    m_git_hub_username_isValid = false;

    m_git_lab_user_id_isSet = false;
    m_git_lab_user_id_isValid = false;

    m_gravatar_hash_isSet = false;
    m_gravatar_hash_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_two_factor_auth_enabled_isSet = false;
    m_two_factor_auth_enabled_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_vso_username_isSet = false;
    m_vso_username_isValid = false;
}

void OAISessionUserModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionUserModel::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_bit_bucket_username_isValid = ::OpenAPI::fromJsonValue(m_bit_bucket_username, json[QString("bitBucketUsername")]);
    m_bit_bucket_username_isSet = !json[QString("bitBucketUsername")].isNull() && m_bit_bucket_username_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_git_hub_username_isValid = ::OpenAPI::fromJsonValue(m_git_hub_username, json[QString("gitHubUsername")]);
    m_git_hub_username_isSet = !json[QString("gitHubUsername")].isNull() && m_git_hub_username_isValid;

    m_git_lab_user_id_isValid = ::OpenAPI::fromJsonValue(m_git_lab_user_id, json[QString("gitLabUserId")]);
    m_git_lab_user_id_isSet = !json[QString("gitLabUserId")].isNull() && m_git_lab_user_id_isValid;

    m_gravatar_hash_isValid = ::OpenAPI::fromJsonValue(m_gravatar_hash, json[QString("gravatarHash")]);
    m_gravatar_hash_isSet = !json[QString("gravatarHash")].isNull() && m_gravatar_hash_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_two_factor_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_two_factor_auth_enabled, json[QString("twoFactorAuthEnabled")]);
    m_two_factor_auth_enabled_isSet = !json[QString("twoFactorAuthEnabled")].isNull() && m_two_factor_auth_enabled_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_vso_username_isValid = ::OpenAPI::fromJsonValue(m_vso_username, json[QString("vsoUsername")]);
    m_vso_username_isSet = !json[QString("vsoUsername")].isNull() && m_vso_username_isValid;
}

QString OAISessionUserModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionUserModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_bit_bucket_username_isSet) {
        obj.insert(QString("bitBucketUsername"), ::OpenAPI::toJsonValue(m_bit_bucket_username));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_git_hub_username_isSet) {
        obj.insert(QString("gitHubUsername"), ::OpenAPI::toJsonValue(m_git_hub_username));
    }
    if (m_git_lab_user_id_isSet) {
        obj.insert(QString("gitLabUserId"), ::OpenAPI::toJsonValue(m_git_lab_user_id));
    }
    if (m_gravatar_hash_isSet) {
        obj.insert(QString("gravatarHash"), ::OpenAPI::toJsonValue(m_gravatar_hash));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_two_factor_auth_enabled_isSet) {
        obj.insert(QString("twoFactorAuthEnabled"), ::OpenAPI::toJsonValue(m_two_factor_auth_enabled));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_vso_username_isSet) {
        obj.insert(QString("vsoUsername"), ::OpenAPI::toJsonValue(m_vso_username));
    }
    return obj;
}

QDateTime OAISessionUserModel::getCreated() const {
    return m_created;
}
void OAISessionUserModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISessionUserModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAISessionUserModel::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAISessionUserModel::getUpdated() const {
    return m_updated;
}
void OAISessionUserModel::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAISessionUserModel::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAISessionUserModel::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAISessionUserModel::getBitBucketUsername() const {
    return m_bit_bucket_username;
}
void OAISessionUserModel::setBitBucketUsername(const QString &bit_bucket_username) {
    m_bit_bucket_username = bit_bucket_username;
    m_bit_bucket_username_isSet = true;
}

bool OAISessionUserModel::is_bit_bucket_username_Set() const{
    return m_bit_bucket_username_isSet;
}

bool OAISessionUserModel::is_bit_bucket_username_Valid() const{
    return m_bit_bucket_username_isValid;
}

QString OAISessionUserModel::getEmail() const {
    return m_email;
}
void OAISessionUserModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISessionUserModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAISessionUserModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISessionUserModel::getFullName() const {
    return m_full_name;
}
void OAISessionUserModel::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAISessionUserModel::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAISessionUserModel::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAISessionUserModel::getGitHubUsername() const {
    return m_git_hub_username;
}
void OAISessionUserModel::setGitHubUsername(const QString &git_hub_username) {
    m_git_hub_username = git_hub_username;
    m_git_hub_username_isSet = true;
}

bool OAISessionUserModel::is_git_hub_username_Set() const{
    return m_git_hub_username_isSet;
}

bool OAISessionUserModel::is_git_hub_username_Valid() const{
    return m_git_hub_username_isValid;
}

QString OAISessionUserModel::getGitLabUserId() const {
    return m_git_lab_user_id;
}
void OAISessionUserModel::setGitLabUserId(const QString &git_lab_user_id) {
    m_git_lab_user_id = git_lab_user_id;
    m_git_lab_user_id_isSet = true;
}

bool OAISessionUserModel::is_git_lab_user_id_Set() const{
    return m_git_lab_user_id_isSet;
}

bool OAISessionUserModel::is_git_lab_user_id_Valid() const{
    return m_git_lab_user_id_isValid;
}

QString OAISessionUserModel::getGravatarHash() const {
    return m_gravatar_hash;
}
void OAISessionUserModel::setGravatarHash(const QString &gravatar_hash) {
    m_gravatar_hash = gravatar_hash;
    m_gravatar_hash_isSet = true;
}

bool OAISessionUserModel::is_gravatar_hash_Set() const{
    return m_gravatar_hash_isSet;
}

bool OAISessionUserModel::is_gravatar_hash_Valid() const{
    return m_gravatar_hash_isValid;
}

qint32 OAISessionUserModel::getPageSize() const {
    return m_page_size;
}
void OAISessionUserModel::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISessionUserModel::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISessionUserModel::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAISessionUserModel::isTwoFactorAuthEnabled() const {
    return m_two_factor_auth_enabled;
}
void OAISessionUserModel::setTwoFactorAuthEnabled(const bool &two_factor_auth_enabled) {
    m_two_factor_auth_enabled = two_factor_auth_enabled;
    m_two_factor_auth_enabled_isSet = true;
}

bool OAISessionUserModel::is_two_factor_auth_enabled_Set() const{
    return m_two_factor_auth_enabled_isSet;
}

bool OAISessionUserModel::is_two_factor_auth_enabled_Valid() const{
    return m_two_factor_auth_enabled_isValid;
}

qint32 OAISessionUserModel::getUserId() const {
    return m_user_id;
}
void OAISessionUserModel::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISessionUserModel::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISessionUserModel::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAISessionUserModel::getVsoUsername() const {
    return m_vso_username;
}
void OAISessionUserModel::setVsoUsername(const QString &vso_username) {
    m_vso_username = vso_username;
    m_vso_username_isSet = true;
}

bool OAISessionUserModel::is_vso_username_Set() const{
    return m_vso_username_isSet;
}

bool OAISessionUserModel::is_vso_username_Valid() const{
    return m_vso_username_isValid;
}

bool OAISessionUserModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bit_bucket_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_lab_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravatar_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vso_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionUserModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
