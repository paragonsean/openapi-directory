/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectConfiguration::OAIProjectConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectConfiguration::OAIProjectConfiguration() {
    this->initializeModel();
}

OAIProjectConfiguration::~OAIProjectConfiguration() {}

void OAIProjectConfiguration::initializeModel() {

    m_after_build_scripts_isSet = false;
    m_after_build_scripts_isValid = false;

    m_after_deploy_scripts_isSet = false;
    m_after_deploy_scripts_isValid = false;

    m_after_test_scripts_isSet = false;
    m_after_test_scripts_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_assembly_file_version_format_isSet = false;
    m_assembly_file_version_format_isValid = false;

    m_assembly_info_file_isSet = false;
    m_assembly_info_file_isValid = false;

    m_assembly_informational_version_format_isSet = false;
    m_assembly_informational_version_format_isValid = false;

    m_assembly_version_format_isSet = false;
    m_assembly_version_format_isValid = false;

    m_before_build_scripts_isSet = false;
    m_before_build_scripts_isValid = false;

    m_before_deploy_scripts_isSet = false;
    m_before_deploy_scripts_isValid = false;

    m_before_package_scripts_isSet = false;
    m_before_package_scripts_isValid = false;

    m_before_test_scripts_isSet = false;
    m_before_test_scripts_isValid = false;

    m_branches_mode_isSet = false;
    m_branches_mode_isValid = false;

    m_build_cloud_isSet = false;
    m_build_cloud_isValid = false;

    m_build_mode_isSet = false;
    m_build_mode_isValid = false;

    m_build_scripts_isSet = false;
    m_build_scripts_isValid = false;

    m_cache_entries_isSet = false;
    m_cache_entries_isValid = false;

    m_clone_depth_isSet = false;
    m_clone_depth_isValid = false;

    m_clone_folder_isSet = false;
    m_clone_folder_isValid = false;

    m_clone_scripts_isSet = false;
    m_clone_scripts_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_configure_nu_get_account_source_isSet = false;
    m_configure_nu_get_account_source_isValid = false;

    m_configure_nu_get_project_source_isSet = false;
    m_configure_nu_get_project_source_isValid = false;

    m_deploy_mode_isSet = false;
    m_deploy_mode_isValid = false;

    m_deploy_scripts_isSet = false;
    m_deploy_scripts_isValid = false;

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_disable_nu_get_publish_for_octopus_packages_isSet = false;
    m_disable_nu_get_publish_for_octopus_packages_isValid = false;

    m_disable_nu_get_publish_on_pull_requests_isSet = false;
    m_disable_nu_get_publish_on_pull_requests_isValid = false;

    m_do_not_increment_build_number_on_pull_requests_isSet = false;
    m_do_not_increment_build_number_on_pull_requests_isValid = false;

    m_dotnet_csproj_assembly_version_format_isSet = false;
    m_dotnet_csproj_assembly_version_format_isValid = false;

    m_dotnet_csproj_file_isSet = false;
    m_dotnet_csproj_file_isValid = false;

    m_dotnet_csproj_file_version_format_isSet = false;
    m_dotnet_csproj_file_version_format_isValid = false;

    m_dotnet_csproj_informational_version_format_isSet = false;
    m_dotnet_csproj_informational_version_format_isValid = false;

    m_dotnet_csproj_package_version_format_isSet = false;
    m_dotnet_csproj_package_version_format_isValid = false;

    m_dotnet_csproj_version_format_isSet = false;
    m_dotnet_csproj_version_format_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_environment_variables_matrix_isSet = false;
    m_environment_variables_matrix_isValid = false;

    m_exclude_branches_isSet = false;
    m_exclude_branches_isValid = false;

    m_force_https_clone_isSet = false;
    m_force_https_clone_isValid = false;

    m_hosts_entries_isSet = false;
    m_hosts_entries_isValid = false;

    m_hot_fix_scripts_isSet = false;
    m_hot_fix_scripts_isValid = false;

    m_include_branches_isSet = false;
    m_include_branches_isValid = false;

    m_include_nu_get_references_isSet = false;
    m_include_nu_get_references_isValid = false;

    m_init_scripts_isSet = false;
    m_init_scripts_isValid = false;

    m_install_scripts_isSet = false;
    m_install_scripts_isValid = false;

    m_matrix_allow_failures_isSet = false;
    m_matrix_allow_failures_isValid = false;

    m_matrix_except_isSet = false;
    m_matrix_except_isValid = false;

    m_matrix_exclude_isSet = false;
    m_matrix_exclude_isValid = false;

    m_matrix_fast_finish_isSet = false;
    m_matrix_fast_finish_isValid = false;

    m_matrix_only_isSet = false;
    m_matrix_only_isValid = false;

    m_max_jobs_isSet = false;
    m_max_jobs_isValid = false;

    m_ms_build_in_parallel_isSet = false;
    m_ms_build_in_parallel_isValid = false;

    m_ms_build_project_file_name_isSet = false;
    m_ms_build_project_file_name_isValid = false;

    m_ms_build_verbosity_isSet = false;
    m_ms_build_verbosity_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_on_build_error_scripts_isSet = false;
    m_on_build_error_scripts_isValid = false;

    m_on_build_finish_scripts_isSet = false;
    m_on_build_finish_scripts_isValid = false;

    m_on_build_success_scripts_isSet = false;
    m_on_build_success_scripts_isValid = false;

    m_only_commits_files_isSet = false;
    m_only_commits_files_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_package_asp_net_core_projects_isSet = false;
    m_package_asp_net_core_projects_isValid = false;

    m_package_azure_cloud_service_projects_isSet = false;
    m_package_azure_cloud_service_projects_isValid = false;

    m_package_dotnet_console_projects_isSet = false;
    m_package_dotnet_console_projects_isValid = false;

    m_package_nu_get_projects_isSet = false;
    m_package_nu_get_projects_isValid = false;

    m_package_nu_get_symbols_isSet = false;
    m_package_nu_get_symbols_isValid = false;

    m_package_web_application_projects_isSet = false;
    m_package_web_application_projects_isValid = false;

    m_package_web_application_projects_beanstalk_isSet = false;
    m_package_web_application_projects_beanstalk_isValid = false;

    m_package_web_application_projects_octopus_isSet = false;
    m_package_web_application_projects_octopus_isValid = false;

    m_package_web_application_projects_x_copy_isSet = false;
    m_package_web_application_projects_x_copy_isValid = false;

    m_patch_assembly_info_isSet = false;
    m_patch_assembly_info_isValid = false;

    m_patch_dotnet_csproj_isSet = false;
    m_patch_dotnet_csproj_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_shallow_clone_isSet = false;
    m_shallow_clone_isValid = false;

    m_skip_branch_with_pull_requests_isSet = false;
    m_skip_branch_with_pull_requests_isValid = false;

    m_skip_commits_files_isSet = false;
    m_skip_commits_files_isValid = false;

    m_skip_non_tags_isSet = false;
    m_skip_non_tags_isValid = false;

    m_skip_tags_isSet = false;
    m_skip_tags_isValid = false;

    m_stacks_isSet = false;
    m_stacks_isValid = false;

    m_test_assemblies_isSet = false;
    m_test_assemblies_isValid = false;

    m_test_categories_isSet = false;
    m_test_categories_isValid = false;

    m_test_categories_matrix_isSet = false;
    m_test_categories_matrix_isValid = false;

    m_test_categories_mode_isSet = false;
    m_test_categories_mode_isValid = false;

    m_test_mode_isSet = false;
    m_test_mode_isValid = false;

    m_test_scripts_isSet = false;
    m_test_scripts_isValid = false;

    m_xamarin_register_android_product_isSet = false;
    m_xamarin_register_android_product_isValid = false;

    m_xamarin_register_ios_product_isSet = false;
    m_xamarin_register_ios_product_isValid = false;
}

void OAIProjectConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectConfiguration::fromJsonObject(QJsonObject json) {

    m_after_build_scripts_isValid = ::OpenAPI::fromJsonValue(m_after_build_scripts, json[QString("afterBuildScripts")]);
    m_after_build_scripts_isSet = !json[QString("afterBuildScripts")].isNull() && m_after_build_scripts_isValid;

    m_after_deploy_scripts_isValid = ::OpenAPI::fromJsonValue(m_after_deploy_scripts, json[QString("afterDeployScripts")]);
    m_after_deploy_scripts_isSet = !json[QString("afterDeployScripts")].isNull() && m_after_deploy_scripts_isValid;

    m_after_test_scripts_isValid = ::OpenAPI::fromJsonValue(m_after_test_scripts, json[QString("afterTestScripts")]);
    m_after_test_scripts_isSet = !json[QString("afterTestScripts")].isNull() && m_after_test_scripts_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_assembly_file_version_format_isValid = ::OpenAPI::fromJsonValue(m_assembly_file_version_format, json[QString("assemblyFileVersionFormat")]);
    m_assembly_file_version_format_isSet = !json[QString("assemblyFileVersionFormat")].isNull() && m_assembly_file_version_format_isValid;

    m_assembly_info_file_isValid = ::OpenAPI::fromJsonValue(m_assembly_info_file, json[QString("assemblyInfoFile")]);
    m_assembly_info_file_isSet = !json[QString("assemblyInfoFile")].isNull() && m_assembly_info_file_isValid;

    m_assembly_informational_version_format_isValid = ::OpenAPI::fromJsonValue(m_assembly_informational_version_format, json[QString("assemblyInformationalVersionFormat")]);
    m_assembly_informational_version_format_isSet = !json[QString("assemblyInformationalVersionFormat")].isNull() && m_assembly_informational_version_format_isValid;

    m_assembly_version_format_isValid = ::OpenAPI::fromJsonValue(m_assembly_version_format, json[QString("assemblyVersionFormat")]);
    m_assembly_version_format_isSet = !json[QString("assemblyVersionFormat")].isNull() && m_assembly_version_format_isValid;

    m_before_build_scripts_isValid = ::OpenAPI::fromJsonValue(m_before_build_scripts, json[QString("beforeBuildScripts")]);
    m_before_build_scripts_isSet = !json[QString("beforeBuildScripts")].isNull() && m_before_build_scripts_isValid;

    m_before_deploy_scripts_isValid = ::OpenAPI::fromJsonValue(m_before_deploy_scripts, json[QString("beforeDeployScripts")]);
    m_before_deploy_scripts_isSet = !json[QString("beforeDeployScripts")].isNull() && m_before_deploy_scripts_isValid;

    m_before_package_scripts_isValid = ::OpenAPI::fromJsonValue(m_before_package_scripts, json[QString("beforePackageScripts")]);
    m_before_package_scripts_isSet = !json[QString("beforePackageScripts")].isNull() && m_before_package_scripts_isValid;

    m_before_test_scripts_isValid = ::OpenAPI::fromJsonValue(m_before_test_scripts, json[QString("beforeTestScripts")]);
    m_before_test_scripts_isSet = !json[QString("beforeTestScripts")].isNull() && m_before_test_scripts_isValid;

    m_branches_mode_isValid = ::OpenAPI::fromJsonValue(m_branches_mode, json[QString("branchesMode")]);
    m_branches_mode_isSet = !json[QString("branchesMode")].isNull() && m_branches_mode_isValid;

    m_build_cloud_isValid = ::OpenAPI::fromJsonValue(m_build_cloud, json[QString("buildCloud")]);
    m_build_cloud_isSet = !json[QString("buildCloud")].isNull() && m_build_cloud_isValid;

    m_build_mode_isValid = ::OpenAPI::fromJsonValue(m_build_mode, json[QString("buildMode")]);
    m_build_mode_isSet = !json[QString("buildMode")].isNull() && m_build_mode_isValid;

    m_build_scripts_isValid = ::OpenAPI::fromJsonValue(m_build_scripts, json[QString("buildScripts")]);
    m_build_scripts_isSet = !json[QString("buildScripts")].isNull() && m_build_scripts_isValid;

    m_cache_entries_isValid = ::OpenAPI::fromJsonValue(m_cache_entries, json[QString("cacheEntries")]);
    m_cache_entries_isSet = !json[QString("cacheEntries")].isNull() && m_cache_entries_isValid;

    m_clone_depth_isValid = ::OpenAPI::fromJsonValue(m_clone_depth, json[QString("cloneDepth")]);
    m_clone_depth_isSet = !json[QString("cloneDepth")].isNull() && m_clone_depth_isValid;

    m_clone_folder_isValid = ::OpenAPI::fromJsonValue(m_clone_folder, json[QString("cloneFolder")]);
    m_clone_folder_isSet = !json[QString("cloneFolder")].isNull() && m_clone_folder_isValid;

    m_clone_scripts_isValid = ::OpenAPI::fromJsonValue(m_clone_scripts, json[QString("cloneScripts")]);
    m_clone_scripts_isSet = !json[QString("cloneScripts")].isNull() && m_clone_scripts_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_configure_nu_get_account_source_isValid = ::OpenAPI::fromJsonValue(m_configure_nu_get_account_source, json[QString("configureNuGetAccountSource")]);
    m_configure_nu_get_account_source_isSet = !json[QString("configureNuGetAccountSource")].isNull() && m_configure_nu_get_account_source_isValid;

    m_configure_nu_get_project_source_isValid = ::OpenAPI::fromJsonValue(m_configure_nu_get_project_source, json[QString("configureNuGetProjectSource")]);
    m_configure_nu_get_project_source_isSet = !json[QString("configureNuGetProjectSource")].isNull() && m_configure_nu_get_project_source_isValid;

    m_deploy_mode_isValid = ::OpenAPI::fromJsonValue(m_deploy_mode, json[QString("deployMode")]);
    m_deploy_mode_isSet = !json[QString("deployMode")].isNull() && m_deploy_mode_isValid;

    m_deploy_scripts_isValid = ::OpenAPI::fromJsonValue(m_deploy_scripts, json[QString("deployScripts")]);
    m_deploy_scripts_isSet = !json[QString("deployScripts")].isNull() && m_deploy_scripts_isValid;

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_disable_nu_get_publish_for_octopus_packages_isValid = ::OpenAPI::fromJsonValue(m_disable_nu_get_publish_for_octopus_packages, json[QString("disableNuGetPublishForOctopusPackages")]);
    m_disable_nu_get_publish_for_octopus_packages_isSet = !json[QString("disableNuGetPublishForOctopusPackages")].isNull() && m_disable_nu_get_publish_for_octopus_packages_isValid;

    m_disable_nu_get_publish_on_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_disable_nu_get_publish_on_pull_requests, json[QString("disableNuGetPublishOnPullRequests")]);
    m_disable_nu_get_publish_on_pull_requests_isSet = !json[QString("disableNuGetPublishOnPullRequests")].isNull() && m_disable_nu_get_publish_on_pull_requests_isValid;

    m_do_not_increment_build_number_on_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_do_not_increment_build_number_on_pull_requests, json[QString("doNotIncrementBuildNumberOnPullRequests")]);
    m_do_not_increment_build_number_on_pull_requests_isSet = !json[QString("doNotIncrementBuildNumberOnPullRequests")].isNull() && m_do_not_increment_build_number_on_pull_requests_isValid;

    m_dotnet_csproj_assembly_version_format_isValid = ::OpenAPI::fromJsonValue(m_dotnet_csproj_assembly_version_format, json[QString("dotnetCsprojAssemblyVersionFormat")]);
    m_dotnet_csproj_assembly_version_format_isSet = !json[QString("dotnetCsprojAssemblyVersionFormat")].isNull() && m_dotnet_csproj_assembly_version_format_isValid;

    m_dotnet_csproj_file_isValid = ::OpenAPI::fromJsonValue(m_dotnet_csproj_file, json[QString("dotnetCsprojFile")]);
    m_dotnet_csproj_file_isSet = !json[QString("dotnetCsprojFile")].isNull() && m_dotnet_csproj_file_isValid;

    m_dotnet_csproj_file_version_format_isValid = ::OpenAPI::fromJsonValue(m_dotnet_csproj_file_version_format, json[QString("dotnetCsprojFileVersionFormat")]);
    m_dotnet_csproj_file_version_format_isSet = !json[QString("dotnetCsprojFileVersionFormat")].isNull() && m_dotnet_csproj_file_version_format_isValid;

    m_dotnet_csproj_informational_version_format_isValid = ::OpenAPI::fromJsonValue(m_dotnet_csproj_informational_version_format, json[QString("dotnetCsprojInformationalVersionFormat")]);
    m_dotnet_csproj_informational_version_format_isSet = !json[QString("dotnetCsprojInformationalVersionFormat")].isNull() && m_dotnet_csproj_informational_version_format_isValid;

    m_dotnet_csproj_package_version_format_isValid = ::OpenAPI::fromJsonValue(m_dotnet_csproj_package_version_format, json[QString("dotnetCsprojPackageVersionFormat")]);
    m_dotnet_csproj_package_version_format_isSet = !json[QString("dotnetCsprojPackageVersionFormat")].isNull() && m_dotnet_csproj_package_version_format_isValid;

    m_dotnet_csproj_version_format_isValid = ::OpenAPI::fromJsonValue(m_dotnet_csproj_version_format, json[QString("dotnetCsprojVersionFormat")]);
    m_dotnet_csproj_version_format_isSet = !json[QString("dotnetCsprojVersionFormat")].isNull() && m_dotnet_csproj_version_format_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_environment_variables_matrix_isValid = ::OpenAPI::fromJsonValue(m_environment_variables_matrix, json[QString("environmentVariablesMatrix")]);
    m_environment_variables_matrix_isSet = !json[QString("environmentVariablesMatrix")].isNull() && m_environment_variables_matrix_isValid;

    m_exclude_branches_isValid = ::OpenAPI::fromJsonValue(m_exclude_branches, json[QString("excludeBranches")]);
    m_exclude_branches_isSet = !json[QString("excludeBranches")].isNull() && m_exclude_branches_isValid;

    m_force_https_clone_isValid = ::OpenAPI::fromJsonValue(m_force_https_clone, json[QString("forceHttpsClone")]);
    m_force_https_clone_isSet = !json[QString("forceHttpsClone")].isNull() && m_force_https_clone_isValid;

    m_hosts_entries_isValid = ::OpenAPI::fromJsonValue(m_hosts_entries, json[QString("hostsEntries")]);
    m_hosts_entries_isSet = !json[QString("hostsEntries")].isNull() && m_hosts_entries_isValid;

    m_hot_fix_scripts_isValid = ::OpenAPI::fromJsonValue(m_hot_fix_scripts, json[QString("hotFixScripts")]);
    m_hot_fix_scripts_isSet = !json[QString("hotFixScripts")].isNull() && m_hot_fix_scripts_isValid;

    m_include_branches_isValid = ::OpenAPI::fromJsonValue(m_include_branches, json[QString("includeBranches")]);
    m_include_branches_isSet = !json[QString("includeBranches")].isNull() && m_include_branches_isValid;

    m_include_nu_get_references_isValid = ::OpenAPI::fromJsonValue(m_include_nu_get_references, json[QString("includeNuGetReferences")]);
    m_include_nu_get_references_isSet = !json[QString("includeNuGetReferences")].isNull() && m_include_nu_get_references_isValid;

    m_init_scripts_isValid = ::OpenAPI::fromJsonValue(m_init_scripts, json[QString("initScripts")]);
    m_init_scripts_isSet = !json[QString("initScripts")].isNull() && m_init_scripts_isValid;

    m_install_scripts_isValid = ::OpenAPI::fromJsonValue(m_install_scripts, json[QString("installScripts")]);
    m_install_scripts_isSet = !json[QString("installScripts")].isNull() && m_install_scripts_isValid;

    m_matrix_allow_failures_isValid = ::OpenAPI::fromJsonValue(m_matrix_allow_failures, json[QString("matrixAllowFailures")]);
    m_matrix_allow_failures_isSet = !json[QString("matrixAllowFailures")].isNull() && m_matrix_allow_failures_isValid;

    m_matrix_except_isValid = ::OpenAPI::fromJsonValue(m_matrix_except, json[QString("matrixExcept")]);
    m_matrix_except_isSet = !json[QString("matrixExcept")].isNull() && m_matrix_except_isValid;

    m_matrix_exclude_isValid = ::OpenAPI::fromJsonValue(m_matrix_exclude, json[QString("matrixExclude")]);
    m_matrix_exclude_isSet = !json[QString("matrixExclude")].isNull() && m_matrix_exclude_isValid;

    m_matrix_fast_finish_isValid = ::OpenAPI::fromJsonValue(m_matrix_fast_finish, json[QString("matrixFastFinish")]);
    m_matrix_fast_finish_isSet = !json[QString("matrixFastFinish")].isNull() && m_matrix_fast_finish_isValid;

    m_matrix_only_isValid = ::OpenAPI::fromJsonValue(m_matrix_only, json[QString("matrixOnly")]);
    m_matrix_only_isSet = !json[QString("matrixOnly")].isNull() && m_matrix_only_isValid;

    m_max_jobs_isValid = ::OpenAPI::fromJsonValue(m_max_jobs, json[QString("maxJobs")]);
    m_max_jobs_isSet = !json[QString("maxJobs")].isNull() && m_max_jobs_isValid;

    m_ms_build_in_parallel_isValid = ::OpenAPI::fromJsonValue(m_ms_build_in_parallel, json[QString("msBuildInParallel")]);
    m_ms_build_in_parallel_isSet = !json[QString("msBuildInParallel")].isNull() && m_ms_build_in_parallel_isValid;

    m_ms_build_project_file_name_isValid = ::OpenAPI::fromJsonValue(m_ms_build_project_file_name, json[QString("msBuildProjectFileName")]);
    m_ms_build_project_file_name_isSet = !json[QString("msBuildProjectFileName")].isNull() && m_ms_build_project_file_name_isValid;

    m_ms_build_verbosity_isValid = ::OpenAPI::fromJsonValue(m_ms_build_verbosity, json[QString("msBuildVerbosity")]);
    m_ms_build_verbosity_isSet = !json[QString("msBuildVerbosity")].isNull() && m_ms_build_verbosity_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_on_build_error_scripts_isValid = ::OpenAPI::fromJsonValue(m_on_build_error_scripts, json[QString("onBuildErrorScripts")]);
    m_on_build_error_scripts_isSet = !json[QString("onBuildErrorScripts")].isNull() && m_on_build_error_scripts_isValid;

    m_on_build_finish_scripts_isValid = ::OpenAPI::fromJsonValue(m_on_build_finish_scripts, json[QString("onBuildFinishScripts")]);
    m_on_build_finish_scripts_isSet = !json[QString("onBuildFinishScripts")].isNull() && m_on_build_finish_scripts_isValid;

    m_on_build_success_scripts_isValid = ::OpenAPI::fromJsonValue(m_on_build_success_scripts, json[QString("onBuildSuccessScripts")]);
    m_on_build_success_scripts_isSet = !json[QString("onBuildSuccessScripts")].isNull() && m_on_build_success_scripts_isValid;

    m_only_commits_files_isValid = ::OpenAPI::fromJsonValue(m_only_commits_files, json[QString("onlyCommitsFiles")]);
    m_only_commits_files_isSet = !json[QString("onlyCommitsFiles")].isNull() && m_only_commits_files_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_package_asp_net_core_projects_isValid = ::OpenAPI::fromJsonValue(m_package_asp_net_core_projects, json[QString("packageAspNetCoreProjects")]);
    m_package_asp_net_core_projects_isSet = !json[QString("packageAspNetCoreProjects")].isNull() && m_package_asp_net_core_projects_isValid;

    m_package_azure_cloud_service_projects_isValid = ::OpenAPI::fromJsonValue(m_package_azure_cloud_service_projects, json[QString("packageAzureCloudServiceProjects")]);
    m_package_azure_cloud_service_projects_isSet = !json[QString("packageAzureCloudServiceProjects")].isNull() && m_package_azure_cloud_service_projects_isValid;

    m_package_dotnet_console_projects_isValid = ::OpenAPI::fromJsonValue(m_package_dotnet_console_projects, json[QString("packageDotnetConsoleProjects")]);
    m_package_dotnet_console_projects_isSet = !json[QString("packageDotnetConsoleProjects")].isNull() && m_package_dotnet_console_projects_isValid;

    m_package_nu_get_projects_isValid = ::OpenAPI::fromJsonValue(m_package_nu_get_projects, json[QString("packageNuGetProjects")]);
    m_package_nu_get_projects_isSet = !json[QString("packageNuGetProjects")].isNull() && m_package_nu_get_projects_isValid;

    m_package_nu_get_symbols_isValid = ::OpenAPI::fromJsonValue(m_package_nu_get_symbols, json[QString("packageNuGetSymbols")]);
    m_package_nu_get_symbols_isSet = !json[QString("packageNuGetSymbols")].isNull() && m_package_nu_get_symbols_isValid;

    m_package_web_application_projects_isValid = ::OpenAPI::fromJsonValue(m_package_web_application_projects, json[QString("packageWebApplicationProjects")]);
    m_package_web_application_projects_isSet = !json[QString("packageWebApplicationProjects")].isNull() && m_package_web_application_projects_isValid;

    m_package_web_application_projects_beanstalk_isValid = ::OpenAPI::fromJsonValue(m_package_web_application_projects_beanstalk, json[QString("packageWebApplicationProjectsBeanstalk")]);
    m_package_web_application_projects_beanstalk_isSet = !json[QString("packageWebApplicationProjectsBeanstalk")].isNull() && m_package_web_application_projects_beanstalk_isValid;

    m_package_web_application_projects_octopus_isValid = ::OpenAPI::fromJsonValue(m_package_web_application_projects_octopus, json[QString("packageWebApplicationProjectsOctopus")]);
    m_package_web_application_projects_octopus_isSet = !json[QString("packageWebApplicationProjectsOctopus")].isNull() && m_package_web_application_projects_octopus_isValid;

    m_package_web_application_projects_x_copy_isValid = ::OpenAPI::fromJsonValue(m_package_web_application_projects_x_copy, json[QString("packageWebApplicationProjectsXCopy")]);
    m_package_web_application_projects_x_copy_isSet = !json[QString("packageWebApplicationProjectsXCopy")].isNull() && m_package_web_application_projects_x_copy_isValid;

    m_patch_assembly_info_isValid = ::OpenAPI::fromJsonValue(m_patch_assembly_info, json[QString("patchAssemblyInfo")]);
    m_patch_assembly_info_isSet = !json[QString("patchAssemblyInfo")].isNull() && m_patch_assembly_info_isValid;

    m_patch_dotnet_csproj_isValid = ::OpenAPI::fromJsonValue(m_patch_dotnet_csproj, json[QString("patchDotnetCsproj")]);
    m_patch_dotnet_csproj_isSet = !json[QString("patchDotnetCsproj")].isNull() && m_patch_dotnet_csproj_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_shallow_clone_isValid = ::OpenAPI::fromJsonValue(m_shallow_clone, json[QString("shallowClone")]);
    m_shallow_clone_isSet = !json[QString("shallowClone")].isNull() && m_shallow_clone_isValid;

    m_skip_branch_with_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_skip_branch_with_pull_requests, json[QString("skipBranchWithPullRequests")]);
    m_skip_branch_with_pull_requests_isSet = !json[QString("skipBranchWithPullRequests")].isNull() && m_skip_branch_with_pull_requests_isValid;

    m_skip_commits_files_isValid = ::OpenAPI::fromJsonValue(m_skip_commits_files, json[QString("skipCommitsFiles")]);
    m_skip_commits_files_isSet = !json[QString("skipCommitsFiles")].isNull() && m_skip_commits_files_isValid;

    m_skip_non_tags_isValid = ::OpenAPI::fromJsonValue(m_skip_non_tags, json[QString("skipNonTags")]);
    m_skip_non_tags_isSet = !json[QString("skipNonTags")].isNull() && m_skip_non_tags_isValid;

    m_skip_tags_isValid = ::OpenAPI::fromJsonValue(m_skip_tags, json[QString("skipTags")]);
    m_skip_tags_isSet = !json[QString("skipTags")].isNull() && m_skip_tags_isValid;

    m_stacks_isValid = ::OpenAPI::fromJsonValue(m_stacks, json[QString("stacks")]);
    m_stacks_isSet = !json[QString("stacks")].isNull() && m_stacks_isValid;

    m_test_assemblies_isValid = ::OpenAPI::fromJsonValue(m_test_assemblies, json[QString("testAssemblies")]);
    m_test_assemblies_isSet = !json[QString("testAssemblies")].isNull() && m_test_assemblies_isValid;

    m_test_categories_isValid = ::OpenAPI::fromJsonValue(m_test_categories, json[QString("testCategories")]);
    m_test_categories_isSet = !json[QString("testCategories")].isNull() && m_test_categories_isValid;

    m_test_categories_matrix_isValid = ::OpenAPI::fromJsonValue(m_test_categories_matrix, json[QString("testCategoriesMatrix")]);
    m_test_categories_matrix_isSet = !json[QString("testCategoriesMatrix")].isNull() && m_test_categories_matrix_isValid;

    m_test_categories_mode_isValid = ::OpenAPI::fromJsonValue(m_test_categories_mode, json[QString("testCategoriesMode")]);
    m_test_categories_mode_isSet = !json[QString("testCategoriesMode")].isNull() && m_test_categories_mode_isValid;

    m_test_mode_isValid = ::OpenAPI::fromJsonValue(m_test_mode, json[QString("testMode")]);
    m_test_mode_isSet = !json[QString("testMode")].isNull() && m_test_mode_isValid;

    m_test_scripts_isValid = ::OpenAPI::fromJsonValue(m_test_scripts, json[QString("testScripts")]);
    m_test_scripts_isSet = !json[QString("testScripts")].isNull() && m_test_scripts_isValid;

    m_xamarin_register_android_product_isValid = ::OpenAPI::fromJsonValue(m_xamarin_register_android_product, json[QString("xamarinRegisterAndroidProduct")]);
    m_xamarin_register_android_product_isSet = !json[QString("xamarinRegisterAndroidProduct")].isNull() && m_xamarin_register_android_product_isValid;

    m_xamarin_register_ios_product_isValid = ::OpenAPI::fromJsonValue(m_xamarin_register_ios_product, json[QString("xamarinRegisterIosProduct")]);
    m_xamarin_register_ios_product_isSet = !json[QString("xamarinRegisterIosProduct")].isNull() && m_xamarin_register_ios_product_isValid;
}

QString OAIProjectConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_after_build_scripts.size() > 0) {
        obj.insert(QString("afterBuildScripts"), ::OpenAPI::toJsonValue(m_after_build_scripts));
    }
    if (m_after_deploy_scripts.size() > 0) {
        obj.insert(QString("afterDeployScripts"), ::OpenAPI::toJsonValue(m_after_deploy_scripts));
    }
    if (m_after_test_scripts.size() > 0) {
        obj.insert(QString("afterTestScripts"), ::OpenAPI::toJsonValue(m_after_test_scripts));
    }
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_assembly_file_version_format_isSet) {
        obj.insert(QString("assemblyFileVersionFormat"), ::OpenAPI::toJsonValue(m_assembly_file_version_format));
    }
    if (m_assembly_info_file_isSet) {
        obj.insert(QString("assemblyInfoFile"), ::OpenAPI::toJsonValue(m_assembly_info_file));
    }
    if (m_assembly_informational_version_format_isSet) {
        obj.insert(QString("assemblyInformationalVersionFormat"), ::OpenAPI::toJsonValue(m_assembly_informational_version_format));
    }
    if (m_assembly_version_format_isSet) {
        obj.insert(QString("assemblyVersionFormat"), ::OpenAPI::toJsonValue(m_assembly_version_format));
    }
    if (m_before_build_scripts.size() > 0) {
        obj.insert(QString("beforeBuildScripts"), ::OpenAPI::toJsonValue(m_before_build_scripts));
    }
    if (m_before_deploy_scripts.size() > 0) {
        obj.insert(QString("beforeDeployScripts"), ::OpenAPI::toJsonValue(m_before_deploy_scripts));
    }
    if (m_before_package_scripts.size() > 0) {
        obj.insert(QString("beforePackageScripts"), ::OpenAPI::toJsonValue(m_before_package_scripts));
    }
    if (m_before_test_scripts.size() > 0) {
        obj.insert(QString("beforeTestScripts"), ::OpenAPI::toJsonValue(m_before_test_scripts));
    }
    if (m_branches_mode.isSet()) {
        obj.insert(QString("branchesMode"), ::OpenAPI::toJsonValue(m_branches_mode));
    }
    if (m_build_cloud.size() > 0) {
        obj.insert(QString("buildCloud"), ::OpenAPI::toJsonValue(m_build_cloud));
    }
    if (m_build_mode.isSet()) {
        obj.insert(QString("buildMode"), ::OpenAPI::toJsonValue(m_build_mode));
    }
    if (m_build_scripts.size() > 0) {
        obj.insert(QString("buildScripts"), ::OpenAPI::toJsonValue(m_build_scripts));
    }
    if (m_cache_entries.size() > 0) {
        obj.insert(QString("cacheEntries"), ::OpenAPI::toJsonValue(m_cache_entries));
    }
    if (m_clone_depth_isSet) {
        obj.insert(QString("cloneDepth"), ::OpenAPI::toJsonValue(m_clone_depth));
    }
    if (m_clone_folder_isSet) {
        obj.insert(QString("cloneFolder"), ::OpenAPI::toJsonValue(m_clone_folder));
    }
    if (m_clone_scripts.size() > 0) {
        obj.insert(QString("cloneScripts"), ::OpenAPI::toJsonValue(m_clone_scripts));
    }
    if (m_configuration.size() > 0) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_configure_nu_get_account_source_isSet) {
        obj.insert(QString("configureNuGetAccountSource"), ::OpenAPI::toJsonValue(m_configure_nu_get_account_source));
    }
    if (m_configure_nu_get_project_source_isSet) {
        obj.insert(QString("configureNuGetProjectSource"), ::OpenAPI::toJsonValue(m_configure_nu_get_project_source));
    }
    if (m_deploy_mode.isSet()) {
        obj.insert(QString("deployMode"), ::OpenAPI::toJsonValue(m_deploy_mode));
    }
    if (m_deploy_scripts.size() > 0) {
        obj.insert(QString("deployScripts"), ::OpenAPI::toJsonValue(m_deploy_scripts));
    }
    if (m_deployments.size() > 0) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_disable_nu_get_publish_for_octopus_packages_isSet) {
        obj.insert(QString("disableNuGetPublishForOctopusPackages"), ::OpenAPI::toJsonValue(m_disable_nu_get_publish_for_octopus_packages));
    }
    if (m_disable_nu_get_publish_on_pull_requests_isSet) {
        obj.insert(QString("disableNuGetPublishOnPullRequests"), ::OpenAPI::toJsonValue(m_disable_nu_get_publish_on_pull_requests));
    }
    if (m_do_not_increment_build_number_on_pull_requests_isSet) {
        obj.insert(QString("doNotIncrementBuildNumberOnPullRequests"), ::OpenAPI::toJsonValue(m_do_not_increment_build_number_on_pull_requests));
    }
    if (m_dotnet_csproj_assembly_version_format_isSet) {
        obj.insert(QString("dotnetCsprojAssemblyVersionFormat"), ::OpenAPI::toJsonValue(m_dotnet_csproj_assembly_version_format));
    }
    if (m_dotnet_csproj_file_isSet) {
        obj.insert(QString("dotnetCsprojFile"), ::OpenAPI::toJsonValue(m_dotnet_csproj_file));
    }
    if (m_dotnet_csproj_file_version_format_isSet) {
        obj.insert(QString("dotnetCsprojFileVersionFormat"), ::OpenAPI::toJsonValue(m_dotnet_csproj_file_version_format));
    }
    if (m_dotnet_csproj_informational_version_format_isSet) {
        obj.insert(QString("dotnetCsprojInformationalVersionFormat"), ::OpenAPI::toJsonValue(m_dotnet_csproj_informational_version_format));
    }
    if (m_dotnet_csproj_package_version_format_isSet) {
        obj.insert(QString("dotnetCsprojPackageVersionFormat"), ::OpenAPI::toJsonValue(m_dotnet_csproj_package_version_format));
    }
    if (m_dotnet_csproj_version_format_isSet) {
        obj.insert(QString("dotnetCsprojVersionFormat"), ::OpenAPI::toJsonValue(m_dotnet_csproj_version_format));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_environment_variables_matrix.size() > 0) {
        obj.insert(QString("environmentVariablesMatrix"), ::OpenAPI::toJsonValue(m_environment_variables_matrix));
    }
    if (m_exclude_branches.size() > 0) {
        obj.insert(QString("excludeBranches"), ::OpenAPI::toJsonValue(m_exclude_branches));
    }
    if (m_force_https_clone_isSet) {
        obj.insert(QString("forceHttpsClone"), ::OpenAPI::toJsonValue(m_force_https_clone));
    }
    if (m_hosts_entries.size() > 0) {
        obj.insert(QString("hostsEntries"), ::OpenAPI::toJsonValue(m_hosts_entries));
    }
    if (m_hot_fix_scripts.size() > 0) {
        obj.insert(QString("hotFixScripts"), ::OpenAPI::toJsonValue(m_hot_fix_scripts));
    }
    if (m_include_branches.size() > 0) {
        obj.insert(QString("includeBranches"), ::OpenAPI::toJsonValue(m_include_branches));
    }
    if (m_include_nu_get_references_isSet) {
        obj.insert(QString("includeNuGetReferences"), ::OpenAPI::toJsonValue(m_include_nu_get_references));
    }
    if (m_init_scripts.size() > 0) {
        obj.insert(QString("initScripts"), ::OpenAPI::toJsonValue(m_init_scripts));
    }
    if (m_install_scripts.size() > 0) {
        obj.insert(QString("installScripts"), ::OpenAPI::toJsonValue(m_install_scripts));
    }
    if (m_matrix_allow_failures.size() > 0) {
        obj.insert(QString("matrixAllowFailures"), ::OpenAPI::toJsonValue(m_matrix_allow_failures));
    }
    if (m_matrix_except.size() > 0) {
        obj.insert(QString("matrixExcept"), ::OpenAPI::toJsonValue(m_matrix_except));
    }
    if (m_matrix_exclude.size() > 0) {
        obj.insert(QString("matrixExclude"), ::OpenAPI::toJsonValue(m_matrix_exclude));
    }
    if (m_matrix_fast_finish_isSet) {
        obj.insert(QString("matrixFastFinish"), ::OpenAPI::toJsonValue(m_matrix_fast_finish));
    }
    if (m_matrix_only.size() > 0) {
        obj.insert(QString("matrixOnly"), ::OpenAPI::toJsonValue(m_matrix_only));
    }
    if (m_max_jobs_isSet) {
        obj.insert(QString("maxJobs"), ::OpenAPI::toJsonValue(m_max_jobs));
    }
    if (m_ms_build_in_parallel_isSet) {
        obj.insert(QString("msBuildInParallel"), ::OpenAPI::toJsonValue(m_ms_build_in_parallel));
    }
    if (m_ms_build_project_file_name_isSet) {
        obj.insert(QString("msBuildProjectFileName"), ::OpenAPI::toJsonValue(m_ms_build_project_file_name));
    }
    if (m_ms_build_verbosity.isSet()) {
        obj.insert(QString("msBuildVerbosity"), ::OpenAPI::toJsonValue(m_ms_build_verbosity));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_on_build_error_scripts.size() > 0) {
        obj.insert(QString("onBuildErrorScripts"), ::OpenAPI::toJsonValue(m_on_build_error_scripts));
    }
    if (m_on_build_finish_scripts.size() > 0) {
        obj.insert(QString("onBuildFinishScripts"), ::OpenAPI::toJsonValue(m_on_build_finish_scripts));
    }
    if (m_on_build_success_scripts.size() > 0) {
        obj.insert(QString("onBuildSuccessScripts"), ::OpenAPI::toJsonValue(m_on_build_success_scripts));
    }
    if (m_only_commits_files.size() > 0) {
        obj.insert(QString("onlyCommitsFiles"), ::OpenAPI::toJsonValue(m_only_commits_files));
    }
    if (m_operating_system.size() > 0) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_package_asp_net_core_projects_isSet) {
        obj.insert(QString("packageAspNetCoreProjects"), ::OpenAPI::toJsonValue(m_package_asp_net_core_projects));
    }
    if (m_package_azure_cloud_service_projects_isSet) {
        obj.insert(QString("packageAzureCloudServiceProjects"), ::OpenAPI::toJsonValue(m_package_azure_cloud_service_projects));
    }
    if (m_package_dotnet_console_projects_isSet) {
        obj.insert(QString("packageDotnetConsoleProjects"), ::OpenAPI::toJsonValue(m_package_dotnet_console_projects));
    }
    if (m_package_nu_get_projects_isSet) {
        obj.insert(QString("packageNuGetProjects"), ::OpenAPI::toJsonValue(m_package_nu_get_projects));
    }
    if (m_package_nu_get_symbols_isSet) {
        obj.insert(QString("packageNuGetSymbols"), ::OpenAPI::toJsonValue(m_package_nu_get_symbols));
    }
    if (m_package_web_application_projects_isSet) {
        obj.insert(QString("packageWebApplicationProjects"), ::OpenAPI::toJsonValue(m_package_web_application_projects));
    }
    if (m_package_web_application_projects_beanstalk_isSet) {
        obj.insert(QString("packageWebApplicationProjectsBeanstalk"), ::OpenAPI::toJsonValue(m_package_web_application_projects_beanstalk));
    }
    if (m_package_web_application_projects_octopus_isSet) {
        obj.insert(QString("packageWebApplicationProjectsOctopus"), ::OpenAPI::toJsonValue(m_package_web_application_projects_octopus));
    }
    if (m_package_web_application_projects_x_copy_isSet) {
        obj.insert(QString("packageWebApplicationProjectsXCopy"), ::OpenAPI::toJsonValue(m_package_web_application_projects_x_copy));
    }
    if (m_patch_assembly_info_isSet) {
        obj.insert(QString("patchAssemblyInfo"), ::OpenAPI::toJsonValue(m_patch_assembly_info));
    }
    if (m_patch_dotnet_csproj_isSet) {
        obj.insert(QString("patchDotnetCsproj"), ::OpenAPI::toJsonValue(m_patch_dotnet_csproj));
    }
    if (m_platform.size() > 0) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_shallow_clone_isSet) {
        obj.insert(QString("shallowClone"), ::OpenAPI::toJsonValue(m_shallow_clone));
    }
    if (m_skip_branch_with_pull_requests_isSet) {
        obj.insert(QString("skipBranchWithPullRequests"), ::OpenAPI::toJsonValue(m_skip_branch_with_pull_requests));
    }
    if (m_skip_commits_files.size() > 0) {
        obj.insert(QString("skipCommitsFiles"), ::OpenAPI::toJsonValue(m_skip_commits_files));
    }
    if (m_skip_non_tags_isSet) {
        obj.insert(QString("skipNonTags"), ::OpenAPI::toJsonValue(m_skip_non_tags));
    }
    if (m_skip_tags_isSet) {
        obj.insert(QString("skipTags"), ::OpenAPI::toJsonValue(m_skip_tags));
    }
    if (m_stacks.size() > 0) {
        obj.insert(QString("stacks"), ::OpenAPI::toJsonValue(m_stacks));
    }
    if (m_test_assemblies.size() > 0) {
        obj.insert(QString("testAssemblies"), ::OpenAPI::toJsonValue(m_test_assemblies));
    }
    if (m_test_categories.size() > 0) {
        obj.insert(QString("testCategories"), ::OpenAPI::toJsonValue(m_test_categories));
    }
    if (m_test_categories_matrix.size() > 0) {
        obj.insert(QString("testCategoriesMatrix"), ::OpenAPI::toJsonValue(m_test_categories_matrix));
    }
    if (m_test_categories_mode_isSet) {
        obj.insert(QString("testCategoriesMode"), ::OpenAPI::toJsonValue(m_test_categories_mode));
    }
    if (m_test_mode.isSet()) {
        obj.insert(QString("testMode"), ::OpenAPI::toJsonValue(m_test_mode));
    }
    if (m_test_scripts.size() > 0) {
        obj.insert(QString("testScripts"), ::OpenAPI::toJsonValue(m_test_scripts));
    }
    if (m_xamarin_register_android_product_isSet) {
        obj.insert(QString("xamarinRegisterAndroidProduct"), ::OpenAPI::toJsonValue(m_xamarin_register_android_product));
    }
    if (m_xamarin_register_ios_product_isSet) {
        obj.insert(QString("xamarinRegisterIosProduct"), ::OpenAPI::toJsonValue(m_xamarin_register_ios_product));
    }
    return obj;
}

QList<OAIScript> OAIProjectConfiguration::getAfterBuildScripts() const {
    return m_after_build_scripts;
}
void OAIProjectConfiguration::setAfterBuildScripts(const QList<OAIScript> &after_build_scripts) {
    m_after_build_scripts = after_build_scripts;
    m_after_build_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_after_build_scripts_Set() const{
    return m_after_build_scripts_isSet;
}

bool OAIProjectConfiguration::is_after_build_scripts_Valid() const{
    return m_after_build_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getAfterDeployScripts() const {
    return m_after_deploy_scripts;
}
void OAIProjectConfiguration::setAfterDeployScripts(const QList<OAIScript> &after_deploy_scripts) {
    m_after_deploy_scripts = after_deploy_scripts;
    m_after_deploy_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_after_deploy_scripts_Set() const{
    return m_after_deploy_scripts_isSet;
}

bool OAIProjectConfiguration::is_after_deploy_scripts_Valid() const{
    return m_after_deploy_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getAfterTestScripts() const {
    return m_after_test_scripts;
}
void OAIProjectConfiguration::setAfterTestScripts(const QList<OAIScript> &after_test_scripts) {
    m_after_test_scripts = after_test_scripts;
    m_after_test_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_after_test_scripts_Set() const{
    return m_after_test_scripts_isSet;
}

bool OAIProjectConfiguration::is_after_test_scripts_Valid() const{
    return m_after_test_scripts_isValid;
}

QList<OAIArtifact> OAIProjectConfiguration::getArtifacts() const {
    return m_artifacts;
}
void OAIProjectConfiguration::setArtifacts(const QList<OAIArtifact> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIProjectConfiguration::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIProjectConfiguration::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QString OAIProjectConfiguration::getAssemblyFileVersionFormat() const {
    return m_assembly_file_version_format;
}
void OAIProjectConfiguration::setAssemblyFileVersionFormat(const QString &assembly_file_version_format) {
    m_assembly_file_version_format = assembly_file_version_format;
    m_assembly_file_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_assembly_file_version_format_Set() const{
    return m_assembly_file_version_format_isSet;
}

bool OAIProjectConfiguration::is_assembly_file_version_format_Valid() const{
    return m_assembly_file_version_format_isValid;
}

QString OAIProjectConfiguration::getAssemblyInfoFile() const {
    return m_assembly_info_file;
}
void OAIProjectConfiguration::setAssemblyInfoFile(const QString &assembly_info_file) {
    m_assembly_info_file = assembly_info_file;
    m_assembly_info_file_isSet = true;
}

bool OAIProjectConfiguration::is_assembly_info_file_Set() const{
    return m_assembly_info_file_isSet;
}

bool OAIProjectConfiguration::is_assembly_info_file_Valid() const{
    return m_assembly_info_file_isValid;
}

QString OAIProjectConfiguration::getAssemblyInformationalVersionFormat() const {
    return m_assembly_informational_version_format;
}
void OAIProjectConfiguration::setAssemblyInformationalVersionFormat(const QString &assembly_informational_version_format) {
    m_assembly_informational_version_format = assembly_informational_version_format;
    m_assembly_informational_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_assembly_informational_version_format_Set() const{
    return m_assembly_informational_version_format_isSet;
}

bool OAIProjectConfiguration::is_assembly_informational_version_format_Valid() const{
    return m_assembly_informational_version_format_isValid;
}

QString OAIProjectConfiguration::getAssemblyVersionFormat() const {
    return m_assembly_version_format;
}
void OAIProjectConfiguration::setAssemblyVersionFormat(const QString &assembly_version_format) {
    m_assembly_version_format = assembly_version_format;
    m_assembly_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_assembly_version_format_Set() const{
    return m_assembly_version_format_isSet;
}

bool OAIProjectConfiguration::is_assembly_version_format_Valid() const{
    return m_assembly_version_format_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getBeforeBuildScripts() const {
    return m_before_build_scripts;
}
void OAIProjectConfiguration::setBeforeBuildScripts(const QList<OAIScript> &before_build_scripts) {
    m_before_build_scripts = before_build_scripts;
    m_before_build_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_before_build_scripts_Set() const{
    return m_before_build_scripts_isSet;
}

bool OAIProjectConfiguration::is_before_build_scripts_Valid() const{
    return m_before_build_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getBeforeDeployScripts() const {
    return m_before_deploy_scripts;
}
void OAIProjectConfiguration::setBeforeDeployScripts(const QList<OAIScript> &before_deploy_scripts) {
    m_before_deploy_scripts = before_deploy_scripts;
    m_before_deploy_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_before_deploy_scripts_Set() const{
    return m_before_deploy_scripts_isSet;
}

bool OAIProjectConfiguration::is_before_deploy_scripts_Valid() const{
    return m_before_deploy_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getBeforePackageScripts() const {
    return m_before_package_scripts;
}
void OAIProjectConfiguration::setBeforePackageScripts(const QList<OAIScript> &before_package_scripts) {
    m_before_package_scripts = before_package_scripts;
    m_before_package_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_before_package_scripts_Set() const{
    return m_before_package_scripts_isSet;
}

bool OAIProjectConfiguration::is_before_package_scripts_Valid() const{
    return m_before_package_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getBeforeTestScripts() const {
    return m_before_test_scripts;
}
void OAIProjectConfiguration::setBeforeTestScripts(const QList<OAIScript> &before_test_scripts) {
    m_before_test_scripts = before_test_scripts;
    m_before_test_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_before_test_scripts_Set() const{
    return m_before_test_scripts_isSet;
}

bool OAIProjectConfiguration::is_before_test_scripts_Valid() const{
    return m_before_test_scripts_isValid;
}

OAIProjectBranchesMode OAIProjectConfiguration::getBranchesMode() const {
    return m_branches_mode;
}
void OAIProjectConfiguration::setBranchesMode(const OAIProjectBranchesMode &branches_mode) {
    m_branches_mode = branches_mode;
    m_branches_mode_isSet = true;
}

bool OAIProjectConfiguration::is_branches_mode_Set() const{
    return m_branches_mode_isSet;
}

bool OAIProjectConfiguration::is_branches_mode_Valid() const{
    return m_branches_mode_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getBuildCloud() const {
    return m_build_cloud;
}
void OAIProjectConfiguration::setBuildCloud(const QList<OAIStringValueObject> &build_cloud) {
    m_build_cloud = build_cloud;
    m_build_cloud_isSet = true;
}

bool OAIProjectConfiguration::is_build_cloud_Set() const{
    return m_build_cloud_isSet;
}

bool OAIProjectConfiguration::is_build_cloud_Valid() const{
    return m_build_cloud_isValid;
}

OAIBuildMode OAIProjectConfiguration::getBuildMode() const {
    return m_build_mode;
}
void OAIProjectConfiguration::setBuildMode(const OAIBuildMode &build_mode) {
    m_build_mode = build_mode;
    m_build_mode_isSet = true;
}

bool OAIProjectConfiguration::is_build_mode_Set() const{
    return m_build_mode_isSet;
}

bool OAIProjectConfiguration::is_build_mode_Valid() const{
    return m_build_mode_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getBuildScripts() const {
    return m_build_scripts;
}
void OAIProjectConfiguration::setBuildScripts(const QList<OAIScript> &build_scripts) {
    m_build_scripts = build_scripts;
    m_build_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_build_scripts_Set() const{
    return m_build_scripts_isSet;
}

bool OAIProjectConfiguration::is_build_scripts_Valid() const{
    return m_build_scripts_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getCacheEntries() const {
    return m_cache_entries;
}
void OAIProjectConfiguration::setCacheEntries(const QList<OAIStringValueObject> &cache_entries) {
    m_cache_entries = cache_entries;
    m_cache_entries_isSet = true;
}

bool OAIProjectConfiguration::is_cache_entries_Set() const{
    return m_cache_entries_isSet;
}

bool OAIProjectConfiguration::is_cache_entries_Valid() const{
    return m_cache_entries_isValid;
}

qint32 OAIProjectConfiguration::getCloneDepth() const {
    return m_clone_depth;
}
void OAIProjectConfiguration::setCloneDepth(const qint32 &clone_depth) {
    m_clone_depth = clone_depth;
    m_clone_depth_isSet = true;
}

bool OAIProjectConfiguration::is_clone_depth_Set() const{
    return m_clone_depth_isSet;
}

bool OAIProjectConfiguration::is_clone_depth_Valid() const{
    return m_clone_depth_isValid;
}

QString OAIProjectConfiguration::getCloneFolder() const {
    return m_clone_folder;
}
void OAIProjectConfiguration::setCloneFolder(const QString &clone_folder) {
    m_clone_folder = clone_folder;
    m_clone_folder_isSet = true;
}

bool OAIProjectConfiguration::is_clone_folder_Set() const{
    return m_clone_folder_isSet;
}

bool OAIProjectConfiguration::is_clone_folder_Valid() const{
    return m_clone_folder_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getCloneScripts() const {
    return m_clone_scripts;
}
void OAIProjectConfiguration::setCloneScripts(const QList<OAIScript> &clone_scripts) {
    m_clone_scripts = clone_scripts;
    m_clone_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_clone_scripts_Set() const{
    return m_clone_scripts_isSet;
}

bool OAIProjectConfiguration::is_clone_scripts_Valid() const{
    return m_clone_scripts_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getConfiguration() const {
    return m_configuration;
}
void OAIProjectConfiguration::setConfiguration(const QList<OAIStringValueObject> &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIProjectConfiguration::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIProjectConfiguration::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIProjectConfiguration::isConfigureNuGetAccountSource() const {
    return m_configure_nu_get_account_source;
}
void OAIProjectConfiguration::setConfigureNuGetAccountSource(const bool &configure_nu_get_account_source) {
    m_configure_nu_get_account_source = configure_nu_get_account_source;
    m_configure_nu_get_account_source_isSet = true;
}

bool OAIProjectConfiguration::is_configure_nu_get_account_source_Set() const{
    return m_configure_nu_get_account_source_isSet;
}

bool OAIProjectConfiguration::is_configure_nu_get_account_source_Valid() const{
    return m_configure_nu_get_account_source_isValid;
}

bool OAIProjectConfiguration::isConfigureNuGetProjectSource() const {
    return m_configure_nu_get_project_source;
}
void OAIProjectConfiguration::setConfigureNuGetProjectSource(const bool &configure_nu_get_project_source) {
    m_configure_nu_get_project_source = configure_nu_get_project_source;
    m_configure_nu_get_project_source_isSet = true;
}

bool OAIProjectConfiguration::is_configure_nu_get_project_source_Set() const{
    return m_configure_nu_get_project_source_isSet;
}

bool OAIProjectConfiguration::is_configure_nu_get_project_source_Valid() const{
    return m_configure_nu_get_project_source_isValid;
}

OAIDeployMode OAIProjectConfiguration::getDeployMode() const {
    return m_deploy_mode;
}
void OAIProjectConfiguration::setDeployMode(const OAIDeployMode &deploy_mode) {
    m_deploy_mode = deploy_mode;
    m_deploy_mode_isSet = true;
}

bool OAIProjectConfiguration::is_deploy_mode_Set() const{
    return m_deploy_mode_isSet;
}

bool OAIProjectConfiguration::is_deploy_mode_Valid() const{
    return m_deploy_mode_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getDeployScripts() const {
    return m_deploy_scripts;
}
void OAIProjectConfiguration::setDeployScripts(const QList<OAIScript> &deploy_scripts) {
    m_deploy_scripts = deploy_scripts;
    m_deploy_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_deploy_scripts_Set() const{
    return m_deploy_scripts_isSet;
}

bool OAIProjectConfiguration::is_deploy_scripts_Valid() const{
    return m_deploy_scripts_isValid;
}

QList<OAIDeploymentProvider> OAIProjectConfiguration::getDeployments() const {
    return m_deployments;
}
void OAIProjectConfiguration::setDeployments(const QList<OAIDeploymentProvider> &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIProjectConfiguration::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIProjectConfiguration::is_deployments_Valid() const{
    return m_deployments_isValid;
}

bool OAIProjectConfiguration::isDisableNuGetPublishForOctopusPackages() const {
    return m_disable_nu_get_publish_for_octopus_packages;
}
void OAIProjectConfiguration::setDisableNuGetPublishForOctopusPackages(const bool &disable_nu_get_publish_for_octopus_packages) {
    m_disable_nu_get_publish_for_octopus_packages = disable_nu_get_publish_for_octopus_packages;
    m_disable_nu_get_publish_for_octopus_packages_isSet = true;
}

bool OAIProjectConfiguration::is_disable_nu_get_publish_for_octopus_packages_Set() const{
    return m_disable_nu_get_publish_for_octopus_packages_isSet;
}

bool OAIProjectConfiguration::is_disable_nu_get_publish_for_octopus_packages_Valid() const{
    return m_disable_nu_get_publish_for_octopus_packages_isValid;
}

bool OAIProjectConfiguration::isDisableNuGetPublishOnPullRequests() const {
    return m_disable_nu_get_publish_on_pull_requests;
}
void OAIProjectConfiguration::setDisableNuGetPublishOnPullRequests(const bool &disable_nu_get_publish_on_pull_requests) {
    m_disable_nu_get_publish_on_pull_requests = disable_nu_get_publish_on_pull_requests;
    m_disable_nu_get_publish_on_pull_requests_isSet = true;
}

bool OAIProjectConfiguration::is_disable_nu_get_publish_on_pull_requests_Set() const{
    return m_disable_nu_get_publish_on_pull_requests_isSet;
}

bool OAIProjectConfiguration::is_disable_nu_get_publish_on_pull_requests_Valid() const{
    return m_disable_nu_get_publish_on_pull_requests_isValid;
}

bool OAIProjectConfiguration::isDoNotIncrementBuildNumberOnPullRequests() const {
    return m_do_not_increment_build_number_on_pull_requests;
}
void OAIProjectConfiguration::setDoNotIncrementBuildNumberOnPullRequests(const bool &do_not_increment_build_number_on_pull_requests) {
    m_do_not_increment_build_number_on_pull_requests = do_not_increment_build_number_on_pull_requests;
    m_do_not_increment_build_number_on_pull_requests_isSet = true;
}

bool OAIProjectConfiguration::is_do_not_increment_build_number_on_pull_requests_Set() const{
    return m_do_not_increment_build_number_on_pull_requests_isSet;
}

bool OAIProjectConfiguration::is_do_not_increment_build_number_on_pull_requests_Valid() const{
    return m_do_not_increment_build_number_on_pull_requests_isValid;
}

QString OAIProjectConfiguration::getDotnetCsprojAssemblyVersionFormat() const {
    return m_dotnet_csproj_assembly_version_format;
}
void OAIProjectConfiguration::setDotnetCsprojAssemblyVersionFormat(const QString &dotnet_csproj_assembly_version_format) {
    m_dotnet_csproj_assembly_version_format = dotnet_csproj_assembly_version_format;
    m_dotnet_csproj_assembly_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_dotnet_csproj_assembly_version_format_Set() const{
    return m_dotnet_csproj_assembly_version_format_isSet;
}

bool OAIProjectConfiguration::is_dotnet_csproj_assembly_version_format_Valid() const{
    return m_dotnet_csproj_assembly_version_format_isValid;
}

QString OAIProjectConfiguration::getDotnetCsprojFile() const {
    return m_dotnet_csproj_file;
}
void OAIProjectConfiguration::setDotnetCsprojFile(const QString &dotnet_csproj_file) {
    m_dotnet_csproj_file = dotnet_csproj_file;
    m_dotnet_csproj_file_isSet = true;
}

bool OAIProjectConfiguration::is_dotnet_csproj_file_Set() const{
    return m_dotnet_csproj_file_isSet;
}

bool OAIProjectConfiguration::is_dotnet_csproj_file_Valid() const{
    return m_dotnet_csproj_file_isValid;
}

QString OAIProjectConfiguration::getDotnetCsprojFileVersionFormat() const {
    return m_dotnet_csproj_file_version_format;
}
void OAIProjectConfiguration::setDotnetCsprojFileVersionFormat(const QString &dotnet_csproj_file_version_format) {
    m_dotnet_csproj_file_version_format = dotnet_csproj_file_version_format;
    m_dotnet_csproj_file_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_dotnet_csproj_file_version_format_Set() const{
    return m_dotnet_csproj_file_version_format_isSet;
}

bool OAIProjectConfiguration::is_dotnet_csproj_file_version_format_Valid() const{
    return m_dotnet_csproj_file_version_format_isValid;
}

QString OAIProjectConfiguration::getDotnetCsprojInformationalVersionFormat() const {
    return m_dotnet_csproj_informational_version_format;
}
void OAIProjectConfiguration::setDotnetCsprojInformationalVersionFormat(const QString &dotnet_csproj_informational_version_format) {
    m_dotnet_csproj_informational_version_format = dotnet_csproj_informational_version_format;
    m_dotnet_csproj_informational_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_dotnet_csproj_informational_version_format_Set() const{
    return m_dotnet_csproj_informational_version_format_isSet;
}

bool OAIProjectConfiguration::is_dotnet_csproj_informational_version_format_Valid() const{
    return m_dotnet_csproj_informational_version_format_isValid;
}

QString OAIProjectConfiguration::getDotnetCsprojPackageVersionFormat() const {
    return m_dotnet_csproj_package_version_format;
}
void OAIProjectConfiguration::setDotnetCsprojPackageVersionFormat(const QString &dotnet_csproj_package_version_format) {
    m_dotnet_csproj_package_version_format = dotnet_csproj_package_version_format;
    m_dotnet_csproj_package_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_dotnet_csproj_package_version_format_Set() const{
    return m_dotnet_csproj_package_version_format_isSet;
}

bool OAIProjectConfiguration::is_dotnet_csproj_package_version_format_Valid() const{
    return m_dotnet_csproj_package_version_format_isValid;
}

QString OAIProjectConfiguration::getDotnetCsprojVersionFormat() const {
    return m_dotnet_csproj_version_format;
}
void OAIProjectConfiguration::setDotnetCsprojVersionFormat(const QString &dotnet_csproj_version_format) {
    m_dotnet_csproj_version_format = dotnet_csproj_version_format;
    m_dotnet_csproj_version_format_isSet = true;
}

bool OAIProjectConfiguration::is_dotnet_csproj_version_format_Set() const{
    return m_dotnet_csproj_version_format_isSet;
}

bool OAIProjectConfiguration::is_dotnet_csproj_version_format_Valid() const{
    return m_dotnet_csproj_version_format_isValid;
}

QList<OAIStoredNameValue> OAIProjectConfiguration::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIProjectConfiguration::setEnvironmentVariables(const QList<OAIStoredNameValue> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIProjectConfiguration::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIProjectConfiguration::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QList<OAIStoredNameValueMatrix> OAIProjectConfiguration::getEnvironmentVariablesMatrix() const {
    return m_environment_variables_matrix;
}
void OAIProjectConfiguration::setEnvironmentVariablesMatrix(const QList<OAIStoredNameValueMatrix> &environment_variables_matrix) {
    m_environment_variables_matrix = environment_variables_matrix;
    m_environment_variables_matrix_isSet = true;
}

bool OAIProjectConfiguration::is_environment_variables_matrix_Set() const{
    return m_environment_variables_matrix_isSet;
}

bool OAIProjectConfiguration::is_environment_variables_matrix_Valid() const{
    return m_environment_variables_matrix_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getExcludeBranches() const {
    return m_exclude_branches;
}
void OAIProjectConfiguration::setExcludeBranches(const QList<OAIStringValueObject> &exclude_branches) {
    m_exclude_branches = exclude_branches;
    m_exclude_branches_isSet = true;
}

bool OAIProjectConfiguration::is_exclude_branches_Set() const{
    return m_exclude_branches_isSet;
}

bool OAIProjectConfiguration::is_exclude_branches_Valid() const{
    return m_exclude_branches_isValid;
}

bool OAIProjectConfiguration::isForceHttpsClone() const {
    return m_force_https_clone;
}
void OAIProjectConfiguration::setForceHttpsClone(const bool &force_https_clone) {
    m_force_https_clone = force_https_clone;
    m_force_https_clone_isSet = true;
}

bool OAIProjectConfiguration::is_force_https_clone_Set() const{
    return m_force_https_clone_isSet;
}

bool OAIProjectConfiguration::is_force_https_clone_Valid() const{
    return m_force_https_clone_isValid;
}

QList<OAIHostEntry> OAIProjectConfiguration::getHostsEntries() const {
    return m_hosts_entries;
}
void OAIProjectConfiguration::setHostsEntries(const QList<OAIHostEntry> &hosts_entries) {
    m_hosts_entries = hosts_entries;
    m_hosts_entries_isSet = true;
}

bool OAIProjectConfiguration::is_hosts_entries_Set() const{
    return m_hosts_entries_isSet;
}

bool OAIProjectConfiguration::is_hosts_entries_Valid() const{
    return m_hosts_entries_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getHotFixScripts() const {
    return m_hot_fix_scripts;
}
void OAIProjectConfiguration::setHotFixScripts(const QList<OAIScript> &hot_fix_scripts) {
    m_hot_fix_scripts = hot_fix_scripts;
    m_hot_fix_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_hot_fix_scripts_Set() const{
    return m_hot_fix_scripts_isSet;
}

bool OAIProjectConfiguration::is_hot_fix_scripts_Valid() const{
    return m_hot_fix_scripts_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getIncludeBranches() const {
    return m_include_branches;
}
void OAIProjectConfiguration::setIncludeBranches(const QList<OAIStringValueObject> &include_branches) {
    m_include_branches = include_branches;
    m_include_branches_isSet = true;
}

bool OAIProjectConfiguration::is_include_branches_Set() const{
    return m_include_branches_isSet;
}

bool OAIProjectConfiguration::is_include_branches_Valid() const{
    return m_include_branches_isValid;
}

bool OAIProjectConfiguration::isIncludeNuGetReferences() const {
    return m_include_nu_get_references;
}
void OAIProjectConfiguration::setIncludeNuGetReferences(const bool &include_nu_get_references) {
    m_include_nu_get_references = include_nu_get_references;
    m_include_nu_get_references_isSet = true;
}

bool OAIProjectConfiguration::is_include_nu_get_references_Set() const{
    return m_include_nu_get_references_isSet;
}

bool OAIProjectConfiguration::is_include_nu_get_references_Valid() const{
    return m_include_nu_get_references_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getInitScripts() const {
    return m_init_scripts;
}
void OAIProjectConfiguration::setInitScripts(const QList<OAIScript> &init_scripts) {
    m_init_scripts = init_scripts;
    m_init_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_init_scripts_Set() const{
    return m_init_scripts_isSet;
}

bool OAIProjectConfiguration::is_init_scripts_Valid() const{
    return m_init_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getInstallScripts() const {
    return m_install_scripts;
}
void OAIProjectConfiguration::setInstallScripts(const QList<OAIScript> &install_scripts) {
    m_install_scripts = install_scripts;
    m_install_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_install_scripts_Set() const{
    return m_install_scripts_isSet;
}

bool OAIProjectConfiguration::is_install_scripts_Valid() const{
    return m_install_scripts_isValid;
}

QList<OAIStoredNameValueMatrix> OAIProjectConfiguration::getMatrixAllowFailures() const {
    return m_matrix_allow_failures;
}
void OAIProjectConfiguration::setMatrixAllowFailures(const QList<OAIStoredNameValueMatrix> &matrix_allow_failures) {
    m_matrix_allow_failures = matrix_allow_failures;
    m_matrix_allow_failures_isSet = true;
}

bool OAIProjectConfiguration::is_matrix_allow_failures_Set() const{
    return m_matrix_allow_failures_isSet;
}

bool OAIProjectConfiguration::is_matrix_allow_failures_Valid() const{
    return m_matrix_allow_failures_isValid;
}

QList<OAIStoredNameValueMatrix> OAIProjectConfiguration::getMatrixExcept() const {
    return m_matrix_except;
}
void OAIProjectConfiguration::setMatrixExcept(const QList<OAIStoredNameValueMatrix> &matrix_except) {
    m_matrix_except = matrix_except;
    m_matrix_except_isSet = true;
}

bool OAIProjectConfiguration::is_matrix_except_Set() const{
    return m_matrix_except_isSet;
}

bool OAIProjectConfiguration::is_matrix_except_Valid() const{
    return m_matrix_except_isValid;
}

QList<OAIStoredNameValueMatrix> OAIProjectConfiguration::getMatrixExclude() const {
    return m_matrix_exclude;
}
void OAIProjectConfiguration::setMatrixExclude(const QList<OAIStoredNameValueMatrix> &matrix_exclude) {
    m_matrix_exclude = matrix_exclude;
    m_matrix_exclude_isSet = true;
}

bool OAIProjectConfiguration::is_matrix_exclude_Set() const{
    return m_matrix_exclude_isSet;
}

bool OAIProjectConfiguration::is_matrix_exclude_Valid() const{
    return m_matrix_exclude_isValid;
}

bool OAIProjectConfiguration::isMatrixFastFinish() const {
    return m_matrix_fast_finish;
}
void OAIProjectConfiguration::setMatrixFastFinish(const bool &matrix_fast_finish) {
    m_matrix_fast_finish = matrix_fast_finish;
    m_matrix_fast_finish_isSet = true;
}

bool OAIProjectConfiguration::is_matrix_fast_finish_Set() const{
    return m_matrix_fast_finish_isSet;
}

bool OAIProjectConfiguration::is_matrix_fast_finish_Valid() const{
    return m_matrix_fast_finish_isValid;
}

QList<OAIStoredNameValueMatrix> OAIProjectConfiguration::getMatrixOnly() const {
    return m_matrix_only;
}
void OAIProjectConfiguration::setMatrixOnly(const QList<OAIStoredNameValueMatrix> &matrix_only) {
    m_matrix_only = matrix_only;
    m_matrix_only_isSet = true;
}

bool OAIProjectConfiguration::is_matrix_only_Set() const{
    return m_matrix_only_isSet;
}

bool OAIProjectConfiguration::is_matrix_only_Valid() const{
    return m_matrix_only_isValid;
}

qint32 OAIProjectConfiguration::getMaxJobs() const {
    return m_max_jobs;
}
void OAIProjectConfiguration::setMaxJobs(const qint32 &max_jobs) {
    m_max_jobs = max_jobs;
    m_max_jobs_isSet = true;
}

bool OAIProjectConfiguration::is_max_jobs_Set() const{
    return m_max_jobs_isSet;
}

bool OAIProjectConfiguration::is_max_jobs_Valid() const{
    return m_max_jobs_isValid;
}

bool OAIProjectConfiguration::isMsBuildInParallel() const {
    return m_ms_build_in_parallel;
}
void OAIProjectConfiguration::setMsBuildInParallel(const bool &ms_build_in_parallel) {
    m_ms_build_in_parallel = ms_build_in_parallel;
    m_ms_build_in_parallel_isSet = true;
}

bool OAIProjectConfiguration::is_ms_build_in_parallel_Set() const{
    return m_ms_build_in_parallel_isSet;
}

bool OAIProjectConfiguration::is_ms_build_in_parallel_Valid() const{
    return m_ms_build_in_parallel_isValid;
}

QString OAIProjectConfiguration::getMsBuildProjectFileName() const {
    return m_ms_build_project_file_name;
}
void OAIProjectConfiguration::setMsBuildProjectFileName(const QString &ms_build_project_file_name) {
    m_ms_build_project_file_name = ms_build_project_file_name;
    m_ms_build_project_file_name_isSet = true;
}

bool OAIProjectConfiguration::is_ms_build_project_file_name_Set() const{
    return m_ms_build_project_file_name_isSet;
}

bool OAIProjectConfiguration::is_ms_build_project_file_name_Valid() const{
    return m_ms_build_project_file_name_isValid;
}

OAIMSBuildVerbosity OAIProjectConfiguration::getMsBuildVerbosity() const {
    return m_ms_build_verbosity;
}
void OAIProjectConfiguration::setMsBuildVerbosity(const OAIMSBuildVerbosity &ms_build_verbosity) {
    m_ms_build_verbosity = ms_build_verbosity;
    m_ms_build_verbosity_isSet = true;
}

bool OAIProjectConfiguration::is_ms_build_verbosity_Set() const{
    return m_ms_build_verbosity_isSet;
}

bool OAIProjectConfiguration::is_ms_build_verbosity_Valid() const{
    return m_ms_build_verbosity_isValid;
}

QList<OAINotificationProviderSettings> OAIProjectConfiguration::getNotifications() const {
    return m_notifications;
}
void OAIProjectConfiguration::setNotifications(const QList<OAINotificationProviderSettings> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIProjectConfiguration::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIProjectConfiguration::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getOnBuildErrorScripts() const {
    return m_on_build_error_scripts;
}
void OAIProjectConfiguration::setOnBuildErrorScripts(const QList<OAIScript> &on_build_error_scripts) {
    m_on_build_error_scripts = on_build_error_scripts;
    m_on_build_error_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_on_build_error_scripts_Set() const{
    return m_on_build_error_scripts_isSet;
}

bool OAIProjectConfiguration::is_on_build_error_scripts_Valid() const{
    return m_on_build_error_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getOnBuildFinishScripts() const {
    return m_on_build_finish_scripts;
}
void OAIProjectConfiguration::setOnBuildFinishScripts(const QList<OAIScript> &on_build_finish_scripts) {
    m_on_build_finish_scripts = on_build_finish_scripts;
    m_on_build_finish_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_on_build_finish_scripts_Set() const{
    return m_on_build_finish_scripts_isSet;
}

bool OAIProjectConfiguration::is_on_build_finish_scripts_Valid() const{
    return m_on_build_finish_scripts_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getOnBuildSuccessScripts() const {
    return m_on_build_success_scripts;
}
void OAIProjectConfiguration::setOnBuildSuccessScripts(const QList<OAIScript> &on_build_success_scripts) {
    m_on_build_success_scripts = on_build_success_scripts;
    m_on_build_success_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_on_build_success_scripts_Set() const{
    return m_on_build_success_scripts_isSet;
}

bool OAIProjectConfiguration::is_on_build_success_scripts_Valid() const{
    return m_on_build_success_scripts_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getOnlyCommitsFiles() const {
    return m_only_commits_files;
}
void OAIProjectConfiguration::setOnlyCommitsFiles(const QList<OAIStringValueObject> &only_commits_files) {
    m_only_commits_files = only_commits_files;
    m_only_commits_files_isSet = true;
}

bool OAIProjectConfiguration::is_only_commits_files_Set() const{
    return m_only_commits_files_isSet;
}

bool OAIProjectConfiguration::is_only_commits_files_Valid() const{
    return m_only_commits_files_isValid;
}

QList<OAIBuild_worker_image_inner> OAIProjectConfiguration::getOperatingSystem() const {
    return m_operating_system;
}
void OAIProjectConfiguration::setOperatingSystem(const QList<OAIBuild_worker_image_inner> &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIProjectConfiguration::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIProjectConfiguration::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

bool OAIProjectConfiguration::isPackageAspNetCoreProjects() const {
    return m_package_asp_net_core_projects;
}
void OAIProjectConfiguration::setPackageAspNetCoreProjects(const bool &package_asp_net_core_projects) {
    m_package_asp_net_core_projects = package_asp_net_core_projects;
    m_package_asp_net_core_projects_isSet = true;
}

bool OAIProjectConfiguration::is_package_asp_net_core_projects_Set() const{
    return m_package_asp_net_core_projects_isSet;
}

bool OAIProjectConfiguration::is_package_asp_net_core_projects_Valid() const{
    return m_package_asp_net_core_projects_isValid;
}

bool OAIProjectConfiguration::isPackageAzureCloudServiceProjects() const {
    return m_package_azure_cloud_service_projects;
}
void OAIProjectConfiguration::setPackageAzureCloudServiceProjects(const bool &package_azure_cloud_service_projects) {
    m_package_azure_cloud_service_projects = package_azure_cloud_service_projects;
    m_package_azure_cloud_service_projects_isSet = true;
}

bool OAIProjectConfiguration::is_package_azure_cloud_service_projects_Set() const{
    return m_package_azure_cloud_service_projects_isSet;
}

bool OAIProjectConfiguration::is_package_azure_cloud_service_projects_Valid() const{
    return m_package_azure_cloud_service_projects_isValid;
}

bool OAIProjectConfiguration::isPackageDotnetConsoleProjects() const {
    return m_package_dotnet_console_projects;
}
void OAIProjectConfiguration::setPackageDotnetConsoleProjects(const bool &package_dotnet_console_projects) {
    m_package_dotnet_console_projects = package_dotnet_console_projects;
    m_package_dotnet_console_projects_isSet = true;
}

bool OAIProjectConfiguration::is_package_dotnet_console_projects_Set() const{
    return m_package_dotnet_console_projects_isSet;
}

bool OAIProjectConfiguration::is_package_dotnet_console_projects_Valid() const{
    return m_package_dotnet_console_projects_isValid;
}

bool OAIProjectConfiguration::isPackageNuGetProjects() const {
    return m_package_nu_get_projects;
}
void OAIProjectConfiguration::setPackageNuGetProjects(const bool &package_nu_get_projects) {
    m_package_nu_get_projects = package_nu_get_projects;
    m_package_nu_get_projects_isSet = true;
}

bool OAIProjectConfiguration::is_package_nu_get_projects_Set() const{
    return m_package_nu_get_projects_isSet;
}

bool OAIProjectConfiguration::is_package_nu_get_projects_Valid() const{
    return m_package_nu_get_projects_isValid;
}

bool OAIProjectConfiguration::isPackageNuGetSymbols() const {
    return m_package_nu_get_symbols;
}
void OAIProjectConfiguration::setPackageNuGetSymbols(const bool &package_nu_get_symbols) {
    m_package_nu_get_symbols = package_nu_get_symbols;
    m_package_nu_get_symbols_isSet = true;
}

bool OAIProjectConfiguration::is_package_nu_get_symbols_Set() const{
    return m_package_nu_get_symbols_isSet;
}

bool OAIProjectConfiguration::is_package_nu_get_symbols_Valid() const{
    return m_package_nu_get_symbols_isValid;
}

bool OAIProjectConfiguration::isPackageWebApplicationProjects() const {
    return m_package_web_application_projects;
}
void OAIProjectConfiguration::setPackageWebApplicationProjects(const bool &package_web_application_projects) {
    m_package_web_application_projects = package_web_application_projects;
    m_package_web_application_projects_isSet = true;
}

bool OAIProjectConfiguration::is_package_web_application_projects_Set() const{
    return m_package_web_application_projects_isSet;
}

bool OAIProjectConfiguration::is_package_web_application_projects_Valid() const{
    return m_package_web_application_projects_isValid;
}

bool OAIProjectConfiguration::isPackageWebApplicationProjectsBeanstalk() const {
    return m_package_web_application_projects_beanstalk;
}
void OAIProjectConfiguration::setPackageWebApplicationProjectsBeanstalk(const bool &package_web_application_projects_beanstalk) {
    m_package_web_application_projects_beanstalk = package_web_application_projects_beanstalk;
    m_package_web_application_projects_beanstalk_isSet = true;
}

bool OAIProjectConfiguration::is_package_web_application_projects_beanstalk_Set() const{
    return m_package_web_application_projects_beanstalk_isSet;
}

bool OAIProjectConfiguration::is_package_web_application_projects_beanstalk_Valid() const{
    return m_package_web_application_projects_beanstalk_isValid;
}

bool OAIProjectConfiguration::isPackageWebApplicationProjectsOctopus() const {
    return m_package_web_application_projects_octopus;
}
void OAIProjectConfiguration::setPackageWebApplicationProjectsOctopus(const bool &package_web_application_projects_octopus) {
    m_package_web_application_projects_octopus = package_web_application_projects_octopus;
    m_package_web_application_projects_octopus_isSet = true;
}

bool OAIProjectConfiguration::is_package_web_application_projects_octopus_Set() const{
    return m_package_web_application_projects_octopus_isSet;
}

bool OAIProjectConfiguration::is_package_web_application_projects_octopus_Valid() const{
    return m_package_web_application_projects_octopus_isValid;
}

bool OAIProjectConfiguration::isPackageWebApplicationProjectsXCopy() const {
    return m_package_web_application_projects_x_copy;
}
void OAIProjectConfiguration::setPackageWebApplicationProjectsXCopy(const bool &package_web_application_projects_x_copy) {
    m_package_web_application_projects_x_copy = package_web_application_projects_x_copy;
    m_package_web_application_projects_x_copy_isSet = true;
}

bool OAIProjectConfiguration::is_package_web_application_projects_x_copy_Set() const{
    return m_package_web_application_projects_x_copy_isSet;
}

bool OAIProjectConfiguration::is_package_web_application_projects_x_copy_Valid() const{
    return m_package_web_application_projects_x_copy_isValid;
}

bool OAIProjectConfiguration::isPatchAssemblyInfo() const {
    return m_patch_assembly_info;
}
void OAIProjectConfiguration::setPatchAssemblyInfo(const bool &patch_assembly_info) {
    m_patch_assembly_info = patch_assembly_info;
    m_patch_assembly_info_isSet = true;
}

bool OAIProjectConfiguration::is_patch_assembly_info_Set() const{
    return m_patch_assembly_info_isSet;
}

bool OAIProjectConfiguration::is_patch_assembly_info_Valid() const{
    return m_patch_assembly_info_isValid;
}

bool OAIProjectConfiguration::isPatchDotnetCsproj() const {
    return m_patch_dotnet_csproj;
}
void OAIProjectConfiguration::setPatchDotnetCsproj(const bool &patch_dotnet_csproj) {
    m_patch_dotnet_csproj = patch_dotnet_csproj;
    m_patch_dotnet_csproj_isSet = true;
}

bool OAIProjectConfiguration::is_patch_dotnet_csproj_Set() const{
    return m_patch_dotnet_csproj_isSet;
}

bool OAIProjectConfiguration::is_patch_dotnet_csproj_Valid() const{
    return m_patch_dotnet_csproj_isValid;
}

QList<OAIProjectConfiguration_platform_inner> OAIProjectConfiguration::getPlatform() const {
    return m_platform;
}
void OAIProjectConfiguration::setPlatform(const QList<OAIProjectConfiguration_platform_inner> &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIProjectConfiguration::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIProjectConfiguration::is_platform_Valid() const{
    return m_platform_isValid;
}

QList<OAIOS_services_to_start_during_the_build_process_inner> OAIProjectConfiguration::getServices() const {
    return m_services;
}
void OAIProjectConfiguration::setServices(const QList<OAIOS_services_to_start_during_the_build_process_inner> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIProjectConfiguration::is_services_Set() const{
    return m_services_isSet;
}

bool OAIProjectConfiguration::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIProjectConfiguration::isShallowClone() const {
    return m_shallow_clone;
}
void OAIProjectConfiguration::setShallowClone(const bool &shallow_clone) {
    m_shallow_clone = shallow_clone;
    m_shallow_clone_isSet = true;
}

bool OAIProjectConfiguration::is_shallow_clone_Set() const{
    return m_shallow_clone_isSet;
}

bool OAIProjectConfiguration::is_shallow_clone_Valid() const{
    return m_shallow_clone_isValid;
}

bool OAIProjectConfiguration::isSkipBranchWithPullRequests() const {
    return m_skip_branch_with_pull_requests;
}
void OAIProjectConfiguration::setSkipBranchWithPullRequests(const bool &skip_branch_with_pull_requests) {
    m_skip_branch_with_pull_requests = skip_branch_with_pull_requests;
    m_skip_branch_with_pull_requests_isSet = true;
}

bool OAIProjectConfiguration::is_skip_branch_with_pull_requests_Set() const{
    return m_skip_branch_with_pull_requests_isSet;
}

bool OAIProjectConfiguration::is_skip_branch_with_pull_requests_Valid() const{
    return m_skip_branch_with_pull_requests_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getSkipCommitsFiles() const {
    return m_skip_commits_files;
}
void OAIProjectConfiguration::setSkipCommitsFiles(const QList<OAIStringValueObject> &skip_commits_files) {
    m_skip_commits_files = skip_commits_files;
    m_skip_commits_files_isSet = true;
}

bool OAIProjectConfiguration::is_skip_commits_files_Set() const{
    return m_skip_commits_files_isSet;
}

bool OAIProjectConfiguration::is_skip_commits_files_Valid() const{
    return m_skip_commits_files_isValid;
}

bool OAIProjectConfiguration::isSkipNonTags() const {
    return m_skip_non_tags;
}
void OAIProjectConfiguration::setSkipNonTags(const bool &skip_non_tags) {
    m_skip_non_tags = skip_non_tags;
    m_skip_non_tags_isSet = true;
}

bool OAIProjectConfiguration::is_skip_non_tags_Set() const{
    return m_skip_non_tags_isSet;
}

bool OAIProjectConfiguration::is_skip_non_tags_Valid() const{
    return m_skip_non_tags_isValid;
}

bool OAIProjectConfiguration::isSkipTags() const {
    return m_skip_tags;
}
void OAIProjectConfiguration::setSkipTags(const bool &skip_tags) {
    m_skip_tags = skip_tags;
    m_skip_tags_isSet = true;
}

bool OAIProjectConfiguration::is_skip_tags_Set() const{
    return m_skip_tags_isSet;
}

bool OAIProjectConfiguration::is_skip_tags_Valid() const{
    return m_skip_tags_isValid;
}

QList<OAIUnknownType> OAIProjectConfiguration::getStacks() const {
    return m_stacks;
}
void OAIProjectConfiguration::setStacks(const QList<OAIUnknownType> &stacks) {
    m_stacks = stacks;
    m_stacks_isSet = true;
}

bool OAIProjectConfiguration::is_stacks_Set() const{
    return m_stacks_isSet;
}

bool OAIProjectConfiguration::is_stacks_Valid() const{
    return m_stacks_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getTestAssemblies() const {
    return m_test_assemblies;
}
void OAIProjectConfiguration::setTestAssemblies(const QList<OAIStringValueObject> &test_assemblies) {
    m_test_assemblies = test_assemblies;
    m_test_assemblies_isSet = true;
}

bool OAIProjectConfiguration::is_test_assemblies_Set() const{
    return m_test_assemblies_isSet;
}

bool OAIProjectConfiguration::is_test_assemblies_Valid() const{
    return m_test_assemblies_isValid;
}

QList<OAIStringValueObject> OAIProjectConfiguration::getTestCategories() const {
    return m_test_categories;
}
void OAIProjectConfiguration::setTestCategories(const QList<OAIStringValueObject> &test_categories) {
    m_test_categories = test_categories;
    m_test_categories_isSet = true;
}

bool OAIProjectConfiguration::is_test_categories_Set() const{
    return m_test_categories_isSet;
}

bool OAIProjectConfiguration::is_test_categories_Valid() const{
    return m_test_categories_isValid;
}

QList<OAIProjectConfiguration_testCategoriesMatrix_inner> OAIProjectConfiguration::getTestCategoriesMatrix() const {
    return m_test_categories_matrix;
}
void OAIProjectConfiguration::setTestCategoriesMatrix(const QList<OAIProjectConfiguration_testCategoriesMatrix_inner> &test_categories_matrix) {
    m_test_categories_matrix = test_categories_matrix;
    m_test_categories_matrix_isSet = true;
}

bool OAIProjectConfiguration::is_test_categories_matrix_Set() const{
    return m_test_categories_matrix_isSet;
}

bool OAIProjectConfiguration::is_test_categories_matrix_Valid() const{
    return m_test_categories_matrix_isValid;
}

QString OAIProjectConfiguration::getTestCategoriesMode() const {
    return m_test_categories_mode;
}
void OAIProjectConfiguration::setTestCategoriesMode(const QString &test_categories_mode) {
    m_test_categories_mode = test_categories_mode;
    m_test_categories_mode_isSet = true;
}

bool OAIProjectConfiguration::is_test_categories_mode_Set() const{
    return m_test_categories_mode_isSet;
}

bool OAIProjectConfiguration::is_test_categories_mode_Valid() const{
    return m_test_categories_mode_isValid;
}

OAITestMode OAIProjectConfiguration::getTestMode() const {
    return m_test_mode;
}
void OAIProjectConfiguration::setTestMode(const OAITestMode &test_mode) {
    m_test_mode = test_mode;
    m_test_mode_isSet = true;
}

bool OAIProjectConfiguration::is_test_mode_Set() const{
    return m_test_mode_isSet;
}

bool OAIProjectConfiguration::is_test_mode_Valid() const{
    return m_test_mode_isValid;
}

QList<OAIScript> OAIProjectConfiguration::getTestScripts() const {
    return m_test_scripts;
}
void OAIProjectConfiguration::setTestScripts(const QList<OAIScript> &test_scripts) {
    m_test_scripts = test_scripts;
    m_test_scripts_isSet = true;
}

bool OAIProjectConfiguration::is_test_scripts_Set() const{
    return m_test_scripts_isSet;
}

bool OAIProjectConfiguration::is_test_scripts_Valid() const{
    return m_test_scripts_isValid;
}

bool OAIProjectConfiguration::isXamarinRegisterAndroidProduct() const {
    return m_xamarin_register_android_product;
}
void OAIProjectConfiguration::setXamarinRegisterAndroidProduct(const bool &xamarin_register_android_product) {
    m_xamarin_register_android_product = xamarin_register_android_product;
    m_xamarin_register_android_product_isSet = true;
}

bool OAIProjectConfiguration::is_xamarin_register_android_product_Set() const{
    return m_xamarin_register_android_product_isSet;
}

bool OAIProjectConfiguration::is_xamarin_register_android_product_Valid() const{
    return m_xamarin_register_android_product_isValid;
}

bool OAIProjectConfiguration::isXamarinRegisterIosProduct() const {
    return m_xamarin_register_ios_product;
}
void OAIProjectConfiguration::setXamarinRegisterIosProduct(const bool &xamarin_register_ios_product) {
    m_xamarin_register_ios_product = xamarin_register_ios_product;
    m_xamarin_register_ios_product_isSet = true;
}

bool OAIProjectConfiguration::is_xamarin_register_ios_product_Set() const{
    return m_xamarin_register_ios_product_isSet;
}

bool OAIProjectConfiguration::is_xamarin_register_ios_product_Valid() const{
    return m_xamarin_register_ios_product_isValid;
}

bool OAIProjectConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_build_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_after_deploy_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_after_test_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_file_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_info_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_informational_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assembly_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_build_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_deploy_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_package_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_test_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_cloud.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_nu_get_account_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_nu_get_project_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_nu_get_publish_for_octopus_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_nu_get_publish_on_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_increment_build_number_on_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_csproj_assembly_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_csproj_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_csproj_file_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_csproj_informational_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_csproj_package_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_csproj_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables_matrix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_https_clone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosts_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_fix_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_nu_get_references_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_init_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix_allow_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix_except.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix_exclude.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix_fast_finish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix_only.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_build_in_parallel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_build_project_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_build_verbosity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build_error_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build_finish_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build_success_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_commits_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_asp_net_core_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_azure_cloud_service_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_dotnet_console_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_nu_get_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_nu_get_symbols_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_web_application_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_web_application_projects_beanstalk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_web_application_projects_octopus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_web_application_projects_x_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_assembly_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_dotnet_csproj_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shallow_clone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_branch_with_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_commits_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_non_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_assemblies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_categories_matrix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_categories_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_xamarin_register_android_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xamarin_register_ios_product_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
