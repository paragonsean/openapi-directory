/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeploymentApi_H
#define OAI_OAIDeploymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeployment.h"
#include "OAIDeploymentCancellation.h"
#include "OAIDeploymentStartRequest.h"
#include "OAIError.h"
#include "OAIProjectDeployment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeploymentApi : public QObject {
    Q_OBJECT

public:
    OAIDeploymentApi(const int timeOut = 0);
    ~OAIDeploymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIDeploymentCancellation [required]
    */
    virtual void cancelDeployment(const OAIDeploymentCancellation &body);

    /**
    * @param[in]  deployment_id qint32 [required]
    */
    virtual void getDeployment(const qint32 &deployment_id);

    /**
    * @param[in]  body OAIDeploymentStartRequest [required]
    */
    virtual void startDeployment(const OAIDeploymentStartRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelDeploymentCallback(OAIHttpRequestWorker *worker);
    void getDeploymentCallback(OAIHttpRequestWorker *worker);
    void startDeploymentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelDeploymentSignal();
    void getDeploymentSignal(OAIProjectDeployment summary);
    void startDeploymentSignal(OAIDeployment summary);


    void cancelDeploymentSignalFull(OAIHttpRequestWorker *worker);
    void getDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIProjectDeployment summary);
    void startDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);

    Q_DECL_DEPRECATED_X("Use cancelDeploymentSignalError() instead")
    void cancelDeploymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelDeploymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentSignalError() instead")
    void getDeploymentSignalE(OAIProjectDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentSignalError(OAIProjectDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDeploymentSignalError() instead")
    void startDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelDeploymentSignalErrorFull() instead")
    void cancelDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentSignalErrorFull() instead")
    void getDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDeploymentSignalErrorFull() instead")
    void startDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
