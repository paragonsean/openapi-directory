/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollaboratorApi_H
#define OAI_OAICollaboratorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollaboratorUpdate.h"
#include "OAIError.h"
#include "OAIUserAccount.h"
#include "OAIUserAccountRolesResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollaboratorApi : public QObject {
    Q_OBJECT

public:
    OAICollaboratorApi(const int timeOut = 0);
    ~OAICollaboratorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint32 [required]
    */
    virtual void deleteCollaborator(const qint32 &user_id);

    /**
    * @param[in]  user_id qint32 [required]
    */
    virtual void getCollaborator(const qint32 &user_id);


    virtual void getCollaborators();

    /**
    * @param[in]  body OAICollaboratorUpdate [required]
    */
    virtual void updateCollaborator(const OAICollaboratorUpdate &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteCollaboratorCallback(OAIHttpRequestWorker *worker);
    void getCollaboratorCallback(OAIHttpRequestWorker *worker);
    void getCollaboratorsCallback(OAIHttpRequestWorker *worker);
    void updateCollaboratorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteCollaboratorSignal();
    void getCollaboratorSignal(OAIUserAccountRolesResults summary);
    void getCollaboratorsSignal(QList<OAIUserAccount> summary);
    void updateCollaboratorSignal();


    void deleteCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void getCollaboratorSignalFull(OAIHttpRequestWorker *worker, OAIUserAccountRolesResults summary);
    void getCollaboratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserAccount> summary);
    void updateCollaboratorSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteCollaboratorSignalError() instead")
    void deleteCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollaboratorSignalError() instead")
    void getCollaboratorSignalE(OAIUserAccountRolesResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollaboratorSignalError(OAIUserAccountRolesResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollaboratorsSignalError() instead")
    void getCollaboratorsSignalE(QList<OAIUserAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollaboratorsSignalError(QList<OAIUserAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollaboratorSignalError() instead")
    void updateCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteCollaboratorSignalErrorFull() instead")
    void deleteCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollaboratorSignalErrorFull() instead")
    void getCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollaboratorsSignalErrorFull() instead")
    void getCollaboratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollaboratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollaboratorSignalErrorFull() instead")
    void updateCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
