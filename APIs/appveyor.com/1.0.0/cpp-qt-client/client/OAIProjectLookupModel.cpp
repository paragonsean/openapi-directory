/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectLookupModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectLookupModel::OAIProjectLookupModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectLookupModel::OAIProjectLookupModel() {
    this->initializeModel();
}

OAIProjectLookupModel::~OAIProjectLookupModel() {}

void OAIProjectLookupModel::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;
}

void OAIProjectLookupModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectLookupModel::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;
}

QString OAIProjectLookupModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectLookupModel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    return obj;
}

QString OAIProjectLookupModel::getAccountName() const {
    return m_account_name;
}
void OAIProjectLookupModel::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIProjectLookupModel::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIProjectLookupModel::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIProjectLookupModel::getName() const {
    return m_name;
}
void OAIProjectLookupModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectLookupModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectLookupModel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIProjectLookupModel::getProjectId() const {
    return m_project_id;
}
void OAIProjectLookupModel::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectLookupModel::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectLookupModel::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProjectLookupModel::getSlug() const {
    return m_slug;
}
void OAIProjectLookupModel::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIProjectLookupModel::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIProjectLookupModel::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIProjectLookupModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectLookupModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_id_isValid && true;
}

} // namespace OpenAPI
