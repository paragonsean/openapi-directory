/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironmentLookupModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironmentLookupModel::OAIDeploymentEnvironmentLookupModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironmentLookupModel::OAIDeploymentEnvironmentLookupModel() {
    this->initializeModel();
}

OAIDeploymentEnvironmentLookupModel::~OAIDeploymentEnvironmentLookupModel() {}

void OAIDeploymentEnvironmentLookupModel::initializeModel() {

    m_deployment_environment_id_isSet = false;
    m_deployment_environment_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIDeploymentEnvironmentLookupModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironmentLookupModel::fromJsonObject(QJsonObject json) {

    m_deployment_environment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_environment_id, json[QString("deploymentEnvironmentId")]);
    m_deployment_environment_id_isSet = !json[QString("deploymentEnvironmentId")].isNull() && m_deployment_environment_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIDeploymentEnvironmentLookupModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironmentLookupModel::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_environment_id_isSet) {
        obj.insert(QString("deploymentEnvironmentId"), ::OpenAPI::toJsonValue(m_deployment_environment_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

qint32 OAIDeploymentEnvironmentLookupModel::getDeploymentEnvironmentId() const {
    return m_deployment_environment_id;
}
void OAIDeploymentEnvironmentLookupModel::setDeploymentEnvironmentId(const qint32 &deployment_environment_id) {
    m_deployment_environment_id = deployment_environment_id;
    m_deployment_environment_id_isSet = true;
}

bool OAIDeploymentEnvironmentLookupModel::is_deployment_environment_id_Set() const{
    return m_deployment_environment_id_isSet;
}

bool OAIDeploymentEnvironmentLookupModel::is_deployment_environment_id_Valid() const{
    return m_deployment_environment_id_isValid;
}

QString OAIDeploymentEnvironmentLookupModel::getName() const {
    return m_name;
}
void OAIDeploymentEnvironmentLookupModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentEnvironmentLookupModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentEnvironmentLookupModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIDeploymentProviderType OAIDeploymentEnvironmentLookupModel::getProvider() const {
    return m_provider;
}
void OAIDeploymentEnvironmentLookupModel::setProvider(const OAIDeploymentProviderType &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDeploymentEnvironmentLookupModel::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDeploymentEnvironmentLookupModel::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIDeploymentEnvironmentLookupModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironmentLookupModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
