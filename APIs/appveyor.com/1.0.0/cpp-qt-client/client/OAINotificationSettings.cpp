/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationSettings::OAINotificationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationSettings::OAINotificationSettings() {
    this->initializeModel();
}

OAINotificationSettings::~OAINotificationSettings() {}

void OAINotificationSettings::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_add_custom_request_body_isSet = false;
    m_add_custom_request_body_isValid = false;

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;

    m_body_template_isSet = false;
    m_body_template_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_custom_request_body_isSet = false;
    m_custom_request_body_isValid = false;

    m_custom_request_body_content_type_isSet = false;
    m_custom_request_body_content_type_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_headers_value_isSet = false;
    m_headers_value_isValid = false;

    m_incoming_webhook_url_isSet = false;
    m_incoming_webhook_url_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_on_build_failure_isSet = false;
    m_on_build_failure_isValid = false;

    m_on_build_status_changed_isSet = false;
    m_on_build_status_changed_isValid = false;

    m_on_build_success_isSet = false;
    m_on_build_success_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_recipients_value_isSet = false;
    m_recipients_value_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_server_url_isSet = false;
    m_server_url_isValid = false;

    m_subject_template_isSet = false;
    m_subject_template_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_vso_account_isSet = false;
    m_vso_account_isValid = false;
}

void OAINotificationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationSettings::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("$type")]);
    m_type_isSet = !json[QString("$type")].isNull() && m_type_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_add_custom_request_body_isValid = ::OpenAPI::fromJsonValue(m_add_custom_request_body, json[QString("addCustomRequestBody")]);
    m_add_custom_request_body_isSet = !json[QString("addCustomRequestBody")].isNull() && m_add_custom_request_body_isValid;

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("authToken")]);
    m_auth_token_isSet = !json[QString("authToken")].isNull() && m_auth_token_isValid;

    m_body_template_isValid = ::OpenAPI::fromJsonValue(m_body_template, json[QString("bodyTemplate")]);
    m_body_template_isSet = !json[QString("bodyTemplate")].isNull() && m_body_template_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_custom_request_body_isValid = ::OpenAPI::fromJsonValue(m_custom_request_body, json[QString("customRequestBody")]);
    m_custom_request_body_isSet = !json[QString("customRequestBody")].isNull() && m_custom_request_body_isValid;

    m_custom_request_body_content_type_isValid = ::OpenAPI::fromJsonValue(m_custom_request_body_content_type, json[QString("customRequestBodyContentType")]);
    m_custom_request_body_content_type_isSet = !json[QString("customRequestBodyContentType")].isNull() && m_custom_request_body_content_type_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_headers_value_isValid = ::OpenAPI::fromJsonValue(m_headers_value, json[QString("headersValue")]);
    m_headers_value_isSet = !json[QString("headersValue")].isNull() && m_headers_value_isValid;

    m_incoming_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_incoming_webhook_url, json[QString("incomingWebhookUrl")]);
    m_incoming_webhook_url_isSet = !json[QString("incomingWebhookUrl")].isNull() && m_incoming_webhook_url_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_on_build_failure_isValid = ::OpenAPI::fromJsonValue(m_on_build_failure, json[QString("onBuildFailure")]);
    m_on_build_failure_isSet = !json[QString("onBuildFailure")].isNull() && m_on_build_failure_isValid;

    m_on_build_status_changed_isValid = ::OpenAPI::fromJsonValue(m_on_build_status_changed, json[QString("onBuildStatusChanged")]);
    m_on_build_status_changed_isSet = !json[QString("onBuildStatusChanged")].isNull() && m_on_build_status_changed_isValid;

    m_on_build_success_isValid = ::OpenAPI::fromJsonValue(m_on_build_success, json[QString("onBuildSuccess")]);
    m_on_build_success_isSet = !json[QString("onBuildSuccess")].isNull() && m_on_build_success_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_recipients_value_isValid = ::OpenAPI::fromJsonValue(m_recipients_value, json[QString("recipientsValue")]);
    m_recipients_value_isSet = !json[QString("recipientsValue")].isNull() && m_recipients_value_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_server_url_isValid = ::OpenAPI::fromJsonValue(m_server_url, json[QString("serverUrl")]);
    m_server_url_isSet = !json[QString("serverUrl")].isNull() && m_server_url_isValid;

    m_subject_template_isValid = ::OpenAPI::fromJsonValue(m_subject_template, json[QString("subjectTemplate")]);
    m_subject_template_isSet = !json[QString("subjectTemplate")].isNull() && m_subject_template_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_vso_account_isValid = ::OpenAPI::fromJsonValue(m_vso_account, json[QString("vsoAccount")]);
    m_vso_account_isSet = !json[QString("vsoAccount")].isNull() && m_vso_account_isValid;
}

QString OAINotificationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("$type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_add_custom_request_body_isSet) {
        obj.insert(QString("addCustomRequestBody"), ::OpenAPI::toJsonValue(m_add_custom_request_body));
    }
    if (m_auth_token.isSet()) {
        obj.insert(QString("authToken"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    if (m_body_template_isSet) {
        obj.insert(QString("bodyTemplate"), ::OpenAPI::toJsonValue(m_body_template));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_custom_request_body_isSet) {
        obj.insert(QString("customRequestBody"), ::OpenAPI::toJsonValue(m_custom_request_body));
    }
    if (m_custom_request_body_content_type_isSet) {
        obj.insert(QString("customRequestBodyContentType"), ::OpenAPI::toJsonValue(m_custom_request_body_content_type));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_headers_value_isSet) {
        obj.insert(QString("headersValue"), ::OpenAPI::toJsonValue(m_headers_value));
    }
    if (m_incoming_webhook_url_isSet) {
        obj.insert(QString("incomingWebhookUrl"), ::OpenAPI::toJsonValue(m_incoming_webhook_url));
    }
    if (m_method.isSet()) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_on_build_failure_isSet) {
        obj.insert(QString("onBuildFailure"), ::OpenAPI::toJsonValue(m_on_build_failure));
    }
    if (m_on_build_status_changed_isSet) {
        obj.insert(QString("onBuildStatusChanged"), ::OpenAPI::toJsonValue(m_on_build_status_changed));
    }
    if (m_on_build_success_isSet) {
        obj.insert(QString("onBuildSuccess"), ::OpenAPI::toJsonValue(m_on_build_success));
    }
    if (m_password.isSet()) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_recipients_value_isSet) {
        obj.insert(QString("recipientsValue"), ::OpenAPI::toJsonValue(m_recipients_value));
    }
    if (m_room_isSet) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_server_url_isSet) {
        obj.insert(QString("serverUrl"), ::OpenAPI::toJsonValue(m_server_url));
    }
    if (m_subject_template_isSet) {
        obj.insert(QString("subjectTemplate"), ::OpenAPI::toJsonValue(m_subject_template));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_vso_account_isSet) {
        obj.insert(QString("vsoAccount"), ::OpenAPI::toJsonValue(m_vso_account));
    }
    return obj;
}

OAINotificationSettingsType OAINotificationSettings::getType() const {
    return m_type;
}
void OAINotificationSettings::setType(const OAINotificationSettingsType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationSettings::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationSettings::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINotificationSettings::getAccount() const {
    return m_account;
}
void OAINotificationSettings::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAINotificationSettings::is_account_Set() const{
    return m_account_isSet;
}

bool OAINotificationSettings::is_account_Valid() const{
    return m_account_isValid;
}

bool OAINotificationSettings::isAddCustomRequestBody() const {
    return m_add_custom_request_body;
}
void OAINotificationSettings::setAddCustomRequestBody(const bool &add_custom_request_body) {
    m_add_custom_request_body = add_custom_request_body;
    m_add_custom_request_body_isSet = true;
}

bool OAINotificationSettings::is_add_custom_request_body_Set() const{
    return m_add_custom_request_body_isSet;
}

bool OAINotificationSettings::is_add_custom_request_body_Valid() const{
    return m_add_custom_request_body_isValid;
}

OAIStoredValue OAINotificationSettings::getAuthToken() const {
    return m_auth_token;
}
void OAINotificationSettings::setAuthToken(const OAIStoredValue &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAINotificationSettings::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAINotificationSettings::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

QString OAINotificationSettings::getBodyTemplate() const {
    return m_body_template;
}
void OAINotificationSettings::setBodyTemplate(const QString &body_template) {
    m_body_template = body_template;
    m_body_template_isSet = true;
}

bool OAINotificationSettings::is_body_template_Set() const{
    return m_body_template_isSet;
}

bool OAINotificationSettings::is_body_template_Valid() const{
    return m_body_template_isValid;
}

QString OAINotificationSettings::getChannel() const {
    return m_channel;
}
void OAINotificationSettings::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAINotificationSettings::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAINotificationSettings::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAINotificationSettings::getCustomRequestBody() const {
    return m_custom_request_body;
}
void OAINotificationSettings::setCustomRequestBody(const QString &custom_request_body) {
    m_custom_request_body = custom_request_body;
    m_custom_request_body_isSet = true;
}

bool OAINotificationSettings::is_custom_request_body_Set() const{
    return m_custom_request_body_isSet;
}

bool OAINotificationSettings::is_custom_request_body_Valid() const{
    return m_custom_request_body_isValid;
}

QString OAINotificationSettings::getCustomRequestBodyContentType() const {
    return m_custom_request_body_content_type;
}
void OAINotificationSettings::setCustomRequestBodyContentType(const QString &custom_request_body_content_type) {
    m_custom_request_body_content_type = custom_request_body_content_type;
    m_custom_request_body_content_type_isSet = true;
}

bool OAINotificationSettings::is_custom_request_body_content_type_Set() const{
    return m_custom_request_body_content_type_isSet;
}

bool OAINotificationSettings::is_custom_request_body_content_type_Valid() const{
    return m_custom_request_body_content_type_isValid;
}

QString OAINotificationSettings::getFrom() const {
    return m_from;
}
void OAINotificationSettings::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAINotificationSettings::is_from_Set() const{
    return m_from_isSet;
}

bool OAINotificationSettings::is_from_Valid() const{
    return m_from_isValid;
}

QList<OAIStoredNameValue> OAINotificationSettings::getHeaders() const {
    return m_headers;
}
void OAINotificationSettings::setHeaders(const QList<OAIStoredNameValue> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAINotificationSettings::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAINotificationSettings::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAINotificationSettings::getHeadersValue() const {
    return m_headers_value;
}
void OAINotificationSettings::setHeadersValue(const QString &headers_value) {
    m_headers_value = headers_value;
    m_headers_value_isSet = true;
}

bool OAINotificationSettings::is_headers_value_Set() const{
    return m_headers_value_isSet;
}

bool OAINotificationSettings::is_headers_value_Valid() const{
    return m_headers_value_isValid;
}

QString OAINotificationSettings::getIncomingWebhookUrl() const {
    return m_incoming_webhook_url;
}
void OAINotificationSettings::setIncomingWebhookUrl(const QString &incoming_webhook_url) {
    m_incoming_webhook_url = incoming_webhook_url;
    m_incoming_webhook_url_isSet = true;
}

bool OAINotificationSettings::is_incoming_webhook_url_Set() const{
    return m_incoming_webhook_url_isSet;
}

bool OAINotificationSettings::is_incoming_webhook_url_Valid() const{
    return m_incoming_webhook_url_isValid;
}

OAIHttpMethodRestricted OAINotificationSettings::getMethod() const {
    return m_method;
}
void OAINotificationSettings::setMethod(const OAIHttpMethodRestricted &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAINotificationSettings::is_method_Set() const{
    return m_method_isSet;
}

bool OAINotificationSettings::is_method_Valid() const{
    return m_method_isValid;
}

bool OAINotificationSettings::isOnBuildFailure() const {
    return m_on_build_failure;
}
void OAINotificationSettings::setOnBuildFailure(const bool &on_build_failure) {
    m_on_build_failure = on_build_failure;
    m_on_build_failure_isSet = true;
}

bool OAINotificationSettings::is_on_build_failure_Set() const{
    return m_on_build_failure_isSet;
}

bool OAINotificationSettings::is_on_build_failure_Valid() const{
    return m_on_build_failure_isValid;
}

bool OAINotificationSettings::isOnBuildStatusChanged() const {
    return m_on_build_status_changed;
}
void OAINotificationSettings::setOnBuildStatusChanged(const bool &on_build_status_changed) {
    m_on_build_status_changed = on_build_status_changed;
    m_on_build_status_changed_isSet = true;
}

bool OAINotificationSettings::is_on_build_status_changed_Set() const{
    return m_on_build_status_changed_isSet;
}

bool OAINotificationSettings::is_on_build_status_changed_Valid() const{
    return m_on_build_status_changed_isValid;
}

bool OAINotificationSettings::isOnBuildSuccess() const {
    return m_on_build_success;
}
void OAINotificationSettings::setOnBuildSuccess(const bool &on_build_success) {
    m_on_build_success = on_build_success;
    m_on_build_success_isSet = true;
}

bool OAINotificationSettings::is_on_build_success_Set() const{
    return m_on_build_success_isSet;
}

bool OAINotificationSettings::is_on_build_success_Valid() const{
    return m_on_build_success_isValid;
}

OAIStoredValue OAINotificationSettings::getPassword() const {
    return m_password;
}
void OAINotificationSettings::setPassword(const OAIStoredValue &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAINotificationSettings::is_password_Set() const{
    return m_password_isSet;
}

bool OAINotificationSettings::is_password_Valid() const{
    return m_password_isValid;
}

QList<OAIStringValueObject> OAINotificationSettings::getRecipients() const {
    return m_recipients;
}
void OAINotificationSettings::setRecipients(const QList<OAIStringValueObject> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAINotificationSettings::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAINotificationSettings::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAINotificationSettings::getRecipientsValue() const {
    return m_recipients_value;
}
void OAINotificationSettings::setRecipientsValue(const QString &recipients_value) {
    m_recipients_value = recipients_value;
    m_recipients_value_isSet = true;
}

bool OAINotificationSettings::is_recipients_value_Set() const{
    return m_recipients_value_isSet;
}

bool OAINotificationSettings::is_recipients_value_Valid() const{
    return m_recipients_value_isValid;
}

QString OAINotificationSettings::getRoom() const {
    return m_room;
}
void OAINotificationSettings::setRoom(const QString &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAINotificationSettings::is_room_Set() const{
    return m_room_isSet;
}

bool OAINotificationSettings::is_room_Valid() const{
    return m_room_isValid;
}

QString OAINotificationSettings::getServerUrl() const {
    return m_server_url;
}
void OAINotificationSettings::setServerUrl(const QString &server_url) {
    m_server_url = server_url;
    m_server_url_isSet = true;
}

bool OAINotificationSettings::is_server_url_Set() const{
    return m_server_url_isSet;
}

bool OAINotificationSettings::is_server_url_Valid() const{
    return m_server_url_isValid;
}

QString OAINotificationSettings::getSubjectTemplate() const {
    return m_subject_template;
}
void OAINotificationSettings::setSubjectTemplate(const QString &subject_template) {
    m_subject_template = subject_template;
    m_subject_template_isSet = true;
}

bool OAINotificationSettings::is_subject_template_Set() const{
    return m_subject_template_isSet;
}

bool OAINotificationSettings::is_subject_template_Valid() const{
    return m_subject_template_isValid;
}

QString OAINotificationSettings::getRTemplate() const {
    return m_r_template;
}
void OAINotificationSettings::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAINotificationSettings::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAINotificationSettings::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAINotificationSettings::getUrl() const {
    return m_url;
}
void OAINotificationSettings::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINotificationSettings::is_url_Set() const{
    return m_url_isSet;
}

bool OAINotificationSettings::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINotificationSettings::getUsername() const {
    return m_username;
}
void OAINotificationSettings::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAINotificationSettings::is_username_Set() const{
    return m_username_isSet;
}

bool OAINotificationSettings::is_username_Valid() const{
    return m_username_isValid;
}

QString OAINotificationSettings::getVsoAccount() const {
    return m_vso_account;
}
void OAINotificationSettings::setVsoAccount(const QString &vso_account) {
    m_vso_account = vso_account;
    m_vso_account_isSet = true;
}

bool OAINotificationSettings::is_vso_account_Set() const{
    return m_vso_account_isSet;
}

bool OAINotificationSettings::is_vso_account_Valid() const{
    return m_vso_account_isValid;
}

bool OAINotificationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_custom_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_request_body_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build_status_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_build_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vso_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
