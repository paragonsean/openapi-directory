/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentStartRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentStartRequest::OAIDeploymentStartRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentStartRequest::OAIDeploymentStartRequest() {
    this->initializeModel();
}

OAIDeploymentStartRequest::~OAIDeploymentStartRequest() {}

void OAIDeploymentStartRequest::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_build_job_id_isSet = false;
    m_build_job_id_isValid = false;

    m_build_version_isSet = false;
    m_build_version_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_project_slug_isSet = false;
    m_project_slug_isValid = false;
}

void OAIDeploymentStartRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentStartRequest::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_build_job_id_isValid = ::OpenAPI::fromJsonValue(m_build_job_id, json[QString("buildJobId")]);
    m_build_job_id_isSet = !json[QString("buildJobId")].isNull() && m_build_job_id_isValid;

    m_build_version_isValid = ::OpenAPI::fromJsonValue(m_build_version, json[QString("buildVersion")]);
    m_build_version_isSet = !json[QString("buildVersion")].isNull() && m_build_version_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("environmentName")]);
    m_environment_name_isSet = !json[QString("environmentName")].isNull() && m_environment_name_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_project_slug_isValid = ::OpenAPI::fromJsonValue(m_project_slug, json[QString("projectSlug")]);
    m_project_slug_isSet = !json[QString("projectSlug")].isNull() && m_project_slug_isValid;
}

QString OAIDeploymentStartRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentStartRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_build_job_id_isSet) {
        obj.insert(QString("buildJobId"), ::OpenAPI::toJsonValue(m_build_job_id));
    }
    if (m_build_version_isSet) {
        obj.insert(QString("buildVersion"), ::OpenAPI::toJsonValue(m_build_version));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("environmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_project_slug_isSet) {
        obj.insert(QString("projectSlug"), ::OpenAPI::toJsonValue(m_project_slug));
    }
    return obj;
}

QString OAIDeploymentStartRequest::getAccountName() const {
    return m_account_name;
}
void OAIDeploymentStartRequest::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIDeploymentStartRequest::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIDeploymentStartRequest::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIDeploymentStartRequest::getBuildJobId() const {
    return m_build_job_id;
}
void OAIDeploymentStartRequest::setBuildJobId(const QString &build_job_id) {
    m_build_job_id = build_job_id;
    m_build_job_id_isSet = true;
}

bool OAIDeploymentStartRequest::is_build_job_id_Set() const{
    return m_build_job_id_isSet;
}

bool OAIDeploymentStartRequest::is_build_job_id_Valid() const{
    return m_build_job_id_isValid;
}

QString OAIDeploymentStartRequest::getBuildVersion() const {
    return m_build_version;
}
void OAIDeploymentStartRequest::setBuildVersion(const QString &build_version) {
    m_build_version = build_version;
    m_build_version_isSet = true;
}

bool OAIDeploymentStartRequest::is_build_version_Set() const{
    return m_build_version_isSet;
}

bool OAIDeploymentStartRequest::is_build_version_Valid() const{
    return m_build_version_isValid;
}

QString OAIDeploymentStartRequest::getEnvironmentName() const {
    return m_environment_name;
}
void OAIDeploymentStartRequest::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAIDeploymentStartRequest::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAIDeploymentStartRequest::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QMap<QString, QString> OAIDeploymentStartRequest::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIDeploymentStartRequest::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIDeploymentStartRequest::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIDeploymentStartRequest::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIDeploymentStartRequest::getProjectSlug() const {
    return m_project_slug;
}
void OAIDeploymentStartRequest::setProjectSlug(const QString &project_slug) {
    m_project_slug = project_slug;
    m_project_slug_isSet = true;
}

bool OAIDeploymentStartRequest::is_project_slug_Set() const{
    return m_project_slug_isSet;
}

bool OAIDeploymentStartRequest::is_project_slug_Valid() const{
    return m_project_slug_isValid;
}

bool OAIDeploymentStartRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentStartRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_name_isValid && m_build_version_isValid && m_environment_name_isValid && m_project_slug_isValid && true;
}

} // namespace OpenAPI
