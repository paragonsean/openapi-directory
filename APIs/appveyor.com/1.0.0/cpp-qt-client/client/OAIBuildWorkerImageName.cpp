/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildWorkerImageName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildWorkerImageName::OAIBuildWorkerImageName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildWorkerImageName::OAIBuildWorkerImageName() {
    this->initializeModel();
}

OAIBuildWorkerImageName::~OAIBuildWorkerImageName() {}

void OAIBuildWorkerImageName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBuildWorkerImageName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBuildWorkerImageName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Previous Ubuntu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::PREVIOUS_UBUNTU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Previous Ubuntu1604", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::PREVIOUS_UBUNTU1604;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Previous Ubuntu1804", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::PREVIOUS_UBUNTU1804;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Previous Visual Studio 2013", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::PREVIOUS_VISUAL_STUDIO_2013;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Previous Visual Studio 2015", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::PREVIOUS_VISUAL_STUDIO_2015;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Previous Visual Studio 2017", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::PREVIOUS_VISUAL_STUDIO_2017;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ubuntu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::UBUNTU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ubuntu1604", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::UBUNTU1604;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ubuntu1804", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::UBUNTU1804;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Studio 2013", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::VISUAL_STUDIO_2013;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Studio 2015", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::VISUAL_STUDIO_2015;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Studio 2015 2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::VISUAL_STUDIO_2015_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Studio 2017", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::VISUAL_STUDIO_2017;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Studio 2017 Preview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::VISUAL_STUDIO_2017_PREVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Visual Studio 2019 Preview", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::VISUAL_STUDIO_2019_PREVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WMF 5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::WMF_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Windows Server 2019", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBuildWorkerImageName::WINDOWS_SERVER_2019;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBuildWorkerImageName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBuildWorkerImageName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBuildWorkerImageName::PREVIOUS_UBUNTU:
            val = "Previous Ubuntu";
            break;
        case eOAIBuildWorkerImageName::PREVIOUS_UBUNTU1604:
            val = "Previous Ubuntu1604";
            break;
        case eOAIBuildWorkerImageName::PREVIOUS_UBUNTU1804:
            val = "Previous Ubuntu1804";
            break;
        case eOAIBuildWorkerImageName::PREVIOUS_VISUAL_STUDIO_2013:
            val = "Previous Visual Studio 2013";
            break;
        case eOAIBuildWorkerImageName::PREVIOUS_VISUAL_STUDIO_2015:
            val = "Previous Visual Studio 2015";
            break;
        case eOAIBuildWorkerImageName::PREVIOUS_VISUAL_STUDIO_2017:
            val = "Previous Visual Studio 2017";
            break;
        case eOAIBuildWorkerImageName::UBUNTU:
            val = "Ubuntu";
            break;
        case eOAIBuildWorkerImageName::UBUNTU1604:
            val = "Ubuntu1604";
            break;
        case eOAIBuildWorkerImageName::UBUNTU1804:
            val = "Ubuntu1804";
            break;
        case eOAIBuildWorkerImageName::VISUAL_STUDIO_2013:
            val = "Visual Studio 2013";
            break;
        case eOAIBuildWorkerImageName::VISUAL_STUDIO_2015:
            val = "Visual Studio 2015";
            break;
        case eOAIBuildWorkerImageName::VISUAL_STUDIO_2015_2:
            val = "Visual Studio 2015 2";
            break;
        case eOAIBuildWorkerImageName::VISUAL_STUDIO_2017:
            val = "Visual Studio 2017";
            break;
        case eOAIBuildWorkerImageName::VISUAL_STUDIO_2017_PREVIEW:
            val = "Visual Studio 2017 Preview";
            break;
        case eOAIBuildWorkerImageName::VISUAL_STUDIO_2019_PREVIEW:
            val = "Visual Studio 2019 Preview";
            break;
        case eOAIBuildWorkerImageName::WMF_5:
            val = "WMF 5";
            break;
        case eOAIBuildWorkerImageName::WINDOWS_SERVER_2019:
            val = "Windows Server 2019";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBuildWorkerImageName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBuildWorkerImageName::eOAIBuildWorkerImageName OAIBuildWorkerImageName::getValue() const {
    return m_value;
}

void OAIBuildWorkerImageName::setValue(const OAIBuildWorkerImageName::eOAIBuildWorkerImageName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBuildWorkerImageName::isSet() const {
    
    return m_value_isSet;
}

bool OAIBuildWorkerImageName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
