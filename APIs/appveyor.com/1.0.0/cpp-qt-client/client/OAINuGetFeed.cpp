/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINuGetFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINuGetFeed::OAINuGetFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINuGetFeed::OAINuGetFeed() {
    this->initializeModel();
}

OAINuGetFeed::~OAINuGetFeed() {}

void OAINuGetFeed::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_private_project_isSet = false;
    m_is_private_project_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nu_get_feed_id_isSet = false;
    m_nu_get_feed_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_publishing_enabled_isSet = false;
    m_publishing_enabled_isValid = false;
}

void OAINuGetFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINuGetFeed::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_private_project_isValid = ::OpenAPI::fromJsonValue(m_is_private_project, json[QString("isPrivateProject")]);
    m_is_private_project_isSet = !json[QString("isPrivateProject")].isNull() && m_is_private_project_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nu_get_feed_id_isValid = ::OpenAPI::fromJsonValue(m_nu_get_feed_id, json[QString("nuGetFeedId")]);
    m_nu_get_feed_id_isSet = !json[QString("nuGetFeedId")].isNull() && m_nu_get_feed_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_publishing_enabled_isValid = ::OpenAPI::fromJsonValue(m_publishing_enabled, json[QString("publishingEnabled")]);
    m_publishing_enabled_isSet = !json[QString("publishingEnabled")].isNull() && m_publishing_enabled_isValid;
}

QString OAINuGetFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINuGetFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_private_project_isSet) {
        obj.insert(QString("isPrivateProject"), ::OpenAPI::toJsonValue(m_is_private_project));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nu_get_feed_id_isSet) {
        obj.insert(QString("nuGetFeedId"), ::OpenAPI::toJsonValue(m_nu_get_feed_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_publishing_enabled_isSet) {
        obj.insert(QString("publishingEnabled"), ::OpenAPI::toJsonValue(m_publishing_enabled));
    }
    return obj;
}

QDateTime OAINuGetFeed::getCreated() const {
    return m_created;
}
void OAINuGetFeed::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAINuGetFeed::is_created_Set() const{
    return m_created_isSet;
}

bool OAINuGetFeed::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAINuGetFeed::getUpdated() const {
    return m_updated;
}
void OAINuGetFeed::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAINuGetFeed::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAINuGetFeed::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAINuGetFeed::getAccountId() const {
    return m_account_id;
}
void OAINuGetFeed::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAINuGetFeed::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAINuGetFeed::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAINuGetFeed::getId() const {
    return m_id;
}
void OAINuGetFeed::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINuGetFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAINuGetFeed::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINuGetFeed::isIsPrivateProject() const {
    return m_is_private_project;
}
void OAINuGetFeed::setIsPrivateProject(const bool &is_private_project) {
    m_is_private_project = is_private_project;
    m_is_private_project_isSet = true;
}

bool OAINuGetFeed::is_is_private_project_Set() const{
    return m_is_private_project_isSet;
}

bool OAINuGetFeed::is_is_private_project_Valid() const{
    return m_is_private_project_isValid;
}

QString OAINuGetFeed::getName() const {
    return m_name;
}
void OAINuGetFeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINuGetFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAINuGetFeed::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAINuGetFeed::getNuGetFeedId() const {
    return m_nu_get_feed_id;
}
void OAINuGetFeed::setNuGetFeedId(const qint32 &nu_get_feed_id) {
    m_nu_get_feed_id = nu_get_feed_id;
    m_nu_get_feed_id_isSet = true;
}

bool OAINuGetFeed::is_nu_get_feed_id_Set() const{
    return m_nu_get_feed_id_isSet;
}

bool OAINuGetFeed::is_nu_get_feed_id_Valid() const{
    return m_nu_get_feed_id_isValid;
}

qint32 OAINuGetFeed::getProjectId() const {
    return m_project_id;
}
void OAINuGetFeed::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAINuGetFeed::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAINuGetFeed::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAINuGetFeed::isPublishingEnabled() const {
    return m_publishing_enabled;
}
void OAINuGetFeed::setPublishingEnabled(const bool &publishing_enabled) {
    m_publishing_enabled = publishing_enabled;
    m_publishing_enabled_isSet = true;
}

bool OAINuGetFeed::is_publishing_enabled_Set() const{
    return m_publishing_enabled_isSet;
}

bool OAINuGetFeed::is_publishing_enabled_Valid() const{
    return m_publishing_enabled_isValid;
}

bool OAINuGetFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nu_get_feed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINuGetFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
