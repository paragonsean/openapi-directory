/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildJob::OAIBuildJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildJob::OAIBuildJob() {
    this->initializeModel();
}

OAIBuildJob::~OAIBuildJob() {}

void OAIBuildJob::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_allow_failure_isSet = false;
    m_allow_failure_isValid = false;

    m_artifacts_count_isSet = false;
    m_artifacts_count_isValid = false;

    m_compilation_errors_count_isSet = false;
    m_compilation_errors_count_isValid = false;

    m_compilation_messages_count_isSet = false;
    m_compilation_messages_count_isValid = false;

    m_compilation_warnings_count_isSet = false;
    m_compilation_warnings_count_isValid = false;

    m_failed_tests_count_isSet = false;
    m_failed_tests_count_isValid = false;

    m_messages_count_isSet = false;
    m_messages_count_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_passed_tests_count_isSet = false;
    m_passed_tests_count_isValid = false;

    m_tests_count_isSet = false;
    m_tests_count_isValid = false;
}

void OAIBuildJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildJob::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_allow_failure_isValid = ::OpenAPI::fromJsonValue(m_allow_failure, json[QString("allowFailure")]);
    m_allow_failure_isSet = !json[QString("allowFailure")].isNull() && m_allow_failure_isValid;

    m_artifacts_count_isValid = ::OpenAPI::fromJsonValue(m_artifacts_count, json[QString("artifactsCount")]);
    m_artifacts_count_isSet = !json[QString("artifactsCount")].isNull() && m_artifacts_count_isValid;

    m_compilation_errors_count_isValid = ::OpenAPI::fromJsonValue(m_compilation_errors_count, json[QString("compilationErrorsCount")]);
    m_compilation_errors_count_isSet = !json[QString("compilationErrorsCount")].isNull() && m_compilation_errors_count_isValid;

    m_compilation_messages_count_isValid = ::OpenAPI::fromJsonValue(m_compilation_messages_count, json[QString("compilationMessagesCount")]);
    m_compilation_messages_count_isSet = !json[QString("compilationMessagesCount")].isNull() && m_compilation_messages_count_isValid;

    m_compilation_warnings_count_isValid = ::OpenAPI::fromJsonValue(m_compilation_warnings_count, json[QString("compilationWarningsCount")]);
    m_compilation_warnings_count_isSet = !json[QString("compilationWarningsCount")].isNull() && m_compilation_warnings_count_isValid;

    m_failed_tests_count_isValid = ::OpenAPI::fromJsonValue(m_failed_tests_count, json[QString("failedTestsCount")]);
    m_failed_tests_count_isSet = !json[QString("failedTestsCount")].isNull() && m_failed_tests_count_isValid;

    m_messages_count_isValid = ::OpenAPI::fromJsonValue(m_messages_count, json[QString("messagesCount")]);
    m_messages_count_isSet = !json[QString("messagesCount")].isNull() && m_messages_count_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_passed_tests_count_isValid = ::OpenAPI::fromJsonValue(m_passed_tests_count, json[QString("passedTestsCount")]);
    m_passed_tests_count_isSet = !json[QString("passedTestsCount")].isNull() && m_passed_tests_count_isValid;

    m_tests_count_isValid = ::OpenAPI::fromJsonValue(m_tests_count, json[QString("testsCount")]);
    m_tests_count_isSet = !json[QString("testsCount")].isNull() && m_tests_count_isValid;
}

QString OAIBuildJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildJob::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_allow_failure_isSet) {
        obj.insert(QString("allowFailure"), ::OpenAPI::toJsonValue(m_allow_failure));
    }
    if (m_artifacts_count_isSet) {
        obj.insert(QString("artifactsCount"), ::OpenAPI::toJsonValue(m_artifacts_count));
    }
    if (m_compilation_errors_count_isSet) {
        obj.insert(QString("compilationErrorsCount"), ::OpenAPI::toJsonValue(m_compilation_errors_count));
    }
    if (m_compilation_messages_count_isSet) {
        obj.insert(QString("compilationMessagesCount"), ::OpenAPI::toJsonValue(m_compilation_messages_count));
    }
    if (m_compilation_warnings_count_isSet) {
        obj.insert(QString("compilationWarningsCount"), ::OpenAPI::toJsonValue(m_compilation_warnings_count));
    }
    if (m_failed_tests_count_isSet) {
        obj.insert(QString("failedTestsCount"), ::OpenAPI::toJsonValue(m_failed_tests_count));
    }
    if (m_messages_count_isSet) {
        obj.insert(QString("messagesCount"), ::OpenAPI::toJsonValue(m_messages_count));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_passed_tests_count_isSet) {
        obj.insert(QString("passedTestsCount"), ::OpenAPI::toJsonValue(m_passed_tests_count));
    }
    if (m_tests_count_isSet) {
        obj.insert(QString("testsCount"), ::OpenAPI::toJsonValue(m_tests_count));
    }
    return obj;
}

QDateTime OAIBuildJob::getCreated() const {
    return m_created;
}
void OAIBuildJob::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIBuildJob::is_created_Set() const{
    return m_created_isSet;
}

bool OAIBuildJob::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIBuildJob::getUpdated() const {
    return m_updated;
}
void OAIBuildJob::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIBuildJob::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIBuildJob::is_updated_Valid() const{
    return m_updated_isValid;
}

QDateTime OAIBuildJob::getFinished() const {
    return m_finished;
}
void OAIBuildJob::setFinished(const QDateTime &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIBuildJob::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIBuildJob::is_finished_Valid() const{
    return m_finished_isValid;
}

QString OAIBuildJob::getJobId() const {
    return m_job_id;
}
void OAIBuildJob::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIBuildJob::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIBuildJob::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIBuildJob::getName() const {
    return m_name;
}
void OAIBuildJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuildJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuildJob::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIBuildJob::getStarted() const {
    return m_started;
}
void OAIBuildJob::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIBuildJob::is_started_Set() const{
    return m_started_isSet;
}

bool OAIBuildJob::is_started_Valid() const{
    return m_started_isValid;
}

OAIStatus OAIBuildJob::getStatus() const {
    return m_status;
}
void OAIBuildJob::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildJob::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBuildJob::isAllowFailure() const {
    return m_allow_failure;
}
void OAIBuildJob::setAllowFailure(const bool &allow_failure) {
    m_allow_failure = allow_failure;
    m_allow_failure_isSet = true;
}

bool OAIBuildJob::is_allow_failure_Set() const{
    return m_allow_failure_isSet;
}

bool OAIBuildJob::is_allow_failure_Valid() const{
    return m_allow_failure_isValid;
}

qint32 OAIBuildJob::getArtifactsCount() const {
    return m_artifacts_count;
}
void OAIBuildJob::setArtifactsCount(const qint32 &artifacts_count) {
    m_artifacts_count = artifacts_count;
    m_artifacts_count_isSet = true;
}

bool OAIBuildJob::is_artifacts_count_Set() const{
    return m_artifacts_count_isSet;
}

bool OAIBuildJob::is_artifacts_count_Valid() const{
    return m_artifacts_count_isValid;
}

qint32 OAIBuildJob::getCompilationErrorsCount() const {
    return m_compilation_errors_count;
}
void OAIBuildJob::setCompilationErrorsCount(const qint32 &compilation_errors_count) {
    m_compilation_errors_count = compilation_errors_count;
    m_compilation_errors_count_isSet = true;
}

bool OAIBuildJob::is_compilation_errors_count_Set() const{
    return m_compilation_errors_count_isSet;
}

bool OAIBuildJob::is_compilation_errors_count_Valid() const{
    return m_compilation_errors_count_isValid;
}

qint32 OAIBuildJob::getCompilationMessagesCount() const {
    return m_compilation_messages_count;
}
void OAIBuildJob::setCompilationMessagesCount(const qint32 &compilation_messages_count) {
    m_compilation_messages_count = compilation_messages_count;
    m_compilation_messages_count_isSet = true;
}

bool OAIBuildJob::is_compilation_messages_count_Set() const{
    return m_compilation_messages_count_isSet;
}

bool OAIBuildJob::is_compilation_messages_count_Valid() const{
    return m_compilation_messages_count_isValid;
}

qint32 OAIBuildJob::getCompilationWarningsCount() const {
    return m_compilation_warnings_count;
}
void OAIBuildJob::setCompilationWarningsCount(const qint32 &compilation_warnings_count) {
    m_compilation_warnings_count = compilation_warnings_count;
    m_compilation_warnings_count_isSet = true;
}

bool OAIBuildJob::is_compilation_warnings_count_Set() const{
    return m_compilation_warnings_count_isSet;
}

bool OAIBuildJob::is_compilation_warnings_count_Valid() const{
    return m_compilation_warnings_count_isValid;
}

qint32 OAIBuildJob::getFailedTestsCount() const {
    return m_failed_tests_count;
}
void OAIBuildJob::setFailedTestsCount(const qint32 &failed_tests_count) {
    m_failed_tests_count = failed_tests_count;
    m_failed_tests_count_isSet = true;
}

bool OAIBuildJob::is_failed_tests_count_Set() const{
    return m_failed_tests_count_isSet;
}

bool OAIBuildJob::is_failed_tests_count_Valid() const{
    return m_failed_tests_count_isValid;
}

qint32 OAIBuildJob::getMessagesCount() const {
    return m_messages_count;
}
void OAIBuildJob::setMessagesCount(const qint32 &messages_count) {
    m_messages_count = messages_count;
    m_messages_count_isSet = true;
}

bool OAIBuildJob::is_messages_count_Set() const{
    return m_messages_count_isSet;
}

bool OAIBuildJob::is_messages_count_Valid() const{
    return m_messages_count_isValid;
}

OAIOSType OAIBuildJob::getOsType() const {
    return m_os_type;
}
void OAIBuildJob::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIBuildJob::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIBuildJob::is_os_type_Valid() const{
    return m_os_type_isValid;
}

qint32 OAIBuildJob::getPassedTestsCount() const {
    return m_passed_tests_count;
}
void OAIBuildJob::setPassedTestsCount(const qint32 &passed_tests_count) {
    m_passed_tests_count = passed_tests_count;
    m_passed_tests_count_isSet = true;
}

bool OAIBuildJob::is_passed_tests_count_Set() const{
    return m_passed_tests_count_isSet;
}

bool OAIBuildJob::is_passed_tests_count_Valid() const{
    return m_passed_tests_count_isValid;
}

qint32 OAIBuildJob::getTestsCount() const {
    return m_tests_count;
}
void OAIBuildJob::setTestsCount(const qint32 &tests_count) {
    m_tests_count = tests_count;
    m_tests_count_isSet = true;
}

bool OAIBuildJob::is_tests_count_Set() const{
    return m_tests_count_isSet;
}

bool OAIBuildJob::is_tests_count_Valid() const{
    return m_tests_count_isValid;
}

bool OAIBuildJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_errors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_messages_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_warnings_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_tests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_tests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
