/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactModel::OAIArtifactModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactModel::OAIArtifactModel() {
    this->initializeModel();
}

OAIArtifactModel::~OAIArtifactModel() {}

void OAIArtifactModel::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIArtifactModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactModel::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIArtifactModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIArtifactModel::getCreated() const {
    return m_created;
}
void OAIArtifactModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIArtifactModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAIArtifactModel::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIArtifactModel::getFileName() const {
    return m_file_name;
}
void OAIArtifactModel::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIArtifactModel::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIArtifactModel::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIArtifactModel::getName() const {
    return m_name;
}
void OAIArtifactModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArtifactModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArtifactModel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIArtifactModel::getSize() const {
    return m_size;
}
void OAIArtifactModel::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIArtifactModel::is_size_Set() const{
    return m_size_isSet;
}

bool OAIArtifactModel::is_size_Valid() const{
    return m_size_isValid;
}

OAIArtifactType OAIArtifactModel::getType() const {
    return m_type;
}
void OAIArtifactModel::setType(const OAIArtifactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIArtifactModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIArtifactModel::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIArtifactModel::getUrl() const {
    return m_url;
}
void OAIArtifactModel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArtifactModel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArtifactModel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIArtifactModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
