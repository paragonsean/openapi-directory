/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_always_build_closed_pull_requests_isSet = false;
    m_always_build_closed_pull_requests_isValid = false;

    m_builds_isSet = false;
    m_builds_isValid = false;

    m_current_build_id_isSet = false;
    m_current_build_id_isValid = false;

    m_disable_pull_request_webhooks_isSet = false;
    m_disable_pull_request_webhooks_isValid = false;

    m_disable_push_webhooks_isSet = false;
    m_disable_push_webhooks_isValid = false;

    m_enable_deployment_in_pull_requests_isSet = false;
    m_enable_deployment_in_pull_requests_isValid = false;

    m_enable_secure_variables_in_pull_requests_isSet = false;
    m_enable_secure_variables_in_pull_requests_isValid = false;

    m_enable_secure_variables_in_pull_requests_from_same_repo_isSet = false;
    m_enable_secure_variables_in_pull_requests_from_same_repo_isValid = false;

    m_is_git_hub_app_isSet = false;
    m_is_git_hub_app_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_nu_get_feed_isSet = false;
    m_nu_get_feed_isValid = false;

    m_repository_branch_isSet = false;
    m_repository_branch_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_repository_scm_isSet = false;
    m_repository_scm_isValid = false;

    m_repository_type_isSet = false;
    m_repository_type_isValid = false;

    m_rolling_builds_isSet = false;
    m_rolling_builds_isValid = false;

    m_rolling_builds_do_not_cancel_running_builds_isSet = false;
    m_rolling_builds_do_not_cancel_running_builds_isValid = false;

    m_rolling_builds_only_for_pull_requests_isSet = false;
    m_rolling_builds_only_for_pull_requests_isValid = false;

    m_save_build_cache_in_pull_requests_isSet = false;
    m_save_build_cache_in_pull_requests_isValid = false;

    m_security_descriptor_isSet = false;
    m_security_descriptor_isValid = false;

    m_skip_branches_without_appveyor_yml_isSet = false;
    m_skip_branches_without_appveyor_yml_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_always_build_closed_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_always_build_closed_pull_requests, json[QString("alwaysBuildClosedPullRequests")]);
    m_always_build_closed_pull_requests_isSet = !json[QString("alwaysBuildClosedPullRequests")].isNull() && m_always_build_closed_pull_requests_isValid;

    m_builds_isValid = ::OpenAPI::fromJsonValue(m_builds, json[QString("builds")]);
    m_builds_isSet = !json[QString("builds")].isNull() && m_builds_isValid;

    m_current_build_id_isValid = ::OpenAPI::fromJsonValue(m_current_build_id, json[QString("currentBuildId")]);
    m_current_build_id_isSet = !json[QString("currentBuildId")].isNull() && m_current_build_id_isValid;

    m_disable_pull_request_webhooks_isValid = ::OpenAPI::fromJsonValue(m_disable_pull_request_webhooks, json[QString("disablePullRequestWebhooks")]);
    m_disable_pull_request_webhooks_isSet = !json[QString("disablePullRequestWebhooks")].isNull() && m_disable_pull_request_webhooks_isValid;

    m_disable_push_webhooks_isValid = ::OpenAPI::fromJsonValue(m_disable_push_webhooks, json[QString("disablePushWebhooks")]);
    m_disable_push_webhooks_isSet = !json[QString("disablePushWebhooks")].isNull() && m_disable_push_webhooks_isValid;

    m_enable_deployment_in_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_enable_deployment_in_pull_requests, json[QString("enableDeploymentInPullRequests")]);
    m_enable_deployment_in_pull_requests_isSet = !json[QString("enableDeploymentInPullRequests")].isNull() && m_enable_deployment_in_pull_requests_isValid;

    m_enable_secure_variables_in_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_enable_secure_variables_in_pull_requests, json[QString("enableSecureVariablesInPullRequests")]);
    m_enable_secure_variables_in_pull_requests_isSet = !json[QString("enableSecureVariablesInPullRequests")].isNull() && m_enable_secure_variables_in_pull_requests_isValid;

    m_enable_secure_variables_in_pull_requests_from_same_repo_isValid = ::OpenAPI::fromJsonValue(m_enable_secure_variables_in_pull_requests_from_same_repo, json[QString("enableSecureVariablesInPullRequestsFromSameRepo")]);
    m_enable_secure_variables_in_pull_requests_from_same_repo_isSet = !json[QString("enableSecureVariablesInPullRequestsFromSameRepo")].isNull() && m_enable_secure_variables_in_pull_requests_from_same_repo_isValid;

    m_is_git_hub_app_isValid = ::OpenAPI::fromJsonValue(m_is_git_hub_app, json[QString("isGitHubApp")]);
    m_is_git_hub_app_isSet = !json[QString("isGitHubApp")].isNull() && m_is_git_hub_app_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("isPrivate")]);
    m_is_private_isSet = !json[QString("isPrivate")].isNull() && m_is_private_isValid;

    m_nu_get_feed_isValid = ::OpenAPI::fromJsonValue(m_nu_get_feed, json[QString("nuGetFeed")]);
    m_nu_get_feed_isSet = !json[QString("nuGetFeed")].isNull() && m_nu_get_feed_isValid;

    m_repository_branch_isValid = ::OpenAPI::fromJsonValue(m_repository_branch, json[QString("repositoryBranch")]);
    m_repository_branch_isSet = !json[QString("repositoryBranch")].isNull() && m_repository_branch_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_repository_scm_isValid = ::OpenAPI::fromJsonValue(m_repository_scm, json[QString("repositoryScm")]);
    m_repository_scm_isSet = !json[QString("repositoryScm")].isNull() && m_repository_scm_isValid;

    m_repository_type_isValid = ::OpenAPI::fromJsonValue(m_repository_type, json[QString("repositoryType")]);
    m_repository_type_isSet = !json[QString("repositoryType")].isNull() && m_repository_type_isValid;

    m_rolling_builds_isValid = ::OpenAPI::fromJsonValue(m_rolling_builds, json[QString("rollingBuilds")]);
    m_rolling_builds_isSet = !json[QString("rollingBuilds")].isNull() && m_rolling_builds_isValid;

    m_rolling_builds_do_not_cancel_running_builds_isValid = ::OpenAPI::fromJsonValue(m_rolling_builds_do_not_cancel_running_builds, json[QString("rollingBuildsDoNotCancelRunningBuilds")]);
    m_rolling_builds_do_not_cancel_running_builds_isSet = !json[QString("rollingBuildsDoNotCancelRunningBuilds")].isNull() && m_rolling_builds_do_not_cancel_running_builds_isValid;

    m_rolling_builds_only_for_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_rolling_builds_only_for_pull_requests, json[QString("rollingBuildsOnlyForPullRequests")]);
    m_rolling_builds_only_for_pull_requests_isSet = !json[QString("rollingBuildsOnlyForPullRequests")].isNull() && m_rolling_builds_only_for_pull_requests_isValid;

    m_save_build_cache_in_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_save_build_cache_in_pull_requests, json[QString("saveBuildCacheInPullRequests")]);
    m_save_build_cache_in_pull_requests_isSet = !json[QString("saveBuildCacheInPullRequests")].isNull() && m_save_build_cache_in_pull_requests_isValid;

    m_security_descriptor_isValid = ::OpenAPI::fromJsonValue(m_security_descriptor, json[QString("securityDescriptor")]);
    m_security_descriptor_isSet = !json[QString("securityDescriptor")].isNull() && m_security_descriptor_isValid;

    m_skip_branches_without_appveyor_yml_isValid = ::OpenAPI::fromJsonValue(m_skip_branches_without_appveyor_yml, json[QString("skipBranchesWithoutAppveyorYml")]);
    m_skip_branches_without_appveyor_yml_isSet = !json[QString("skipBranchesWithoutAppveyorYml")].isNull() && m_skip_branches_without_appveyor_yml_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_always_build_closed_pull_requests_isSet) {
        obj.insert(QString("alwaysBuildClosedPullRequests"), ::OpenAPI::toJsonValue(m_always_build_closed_pull_requests));
    }
    if (m_builds.size() > 0) {
        obj.insert(QString("builds"), ::OpenAPI::toJsonValue(m_builds));
    }
    if (m_current_build_id_isSet) {
        obj.insert(QString("currentBuildId"), ::OpenAPI::toJsonValue(m_current_build_id));
    }
    if (m_disable_pull_request_webhooks_isSet) {
        obj.insert(QString("disablePullRequestWebhooks"), ::OpenAPI::toJsonValue(m_disable_pull_request_webhooks));
    }
    if (m_disable_push_webhooks_isSet) {
        obj.insert(QString("disablePushWebhooks"), ::OpenAPI::toJsonValue(m_disable_push_webhooks));
    }
    if (m_enable_deployment_in_pull_requests_isSet) {
        obj.insert(QString("enableDeploymentInPullRequests"), ::OpenAPI::toJsonValue(m_enable_deployment_in_pull_requests));
    }
    if (m_enable_secure_variables_in_pull_requests_isSet) {
        obj.insert(QString("enableSecureVariablesInPullRequests"), ::OpenAPI::toJsonValue(m_enable_secure_variables_in_pull_requests));
    }
    if (m_enable_secure_variables_in_pull_requests_from_same_repo_isSet) {
        obj.insert(QString("enableSecureVariablesInPullRequestsFromSameRepo"), ::OpenAPI::toJsonValue(m_enable_secure_variables_in_pull_requests_from_same_repo));
    }
    if (m_is_git_hub_app_isSet) {
        obj.insert(QString("isGitHubApp"), ::OpenAPI::toJsonValue(m_is_git_hub_app));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("isPrivate"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_nu_get_feed.isSet()) {
        obj.insert(QString("nuGetFeed"), ::OpenAPI::toJsonValue(m_nu_get_feed));
    }
    if (m_repository_branch_isSet) {
        obj.insert(QString("repositoryBranch"), ::OpenAPI::toJsonValue(m_repository_branch));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_repository_scm.isSet()) {
        obj.insert(QString("repositoryScm"), ::OpenAPI::toJsonValue(m_repository_scm));
    }
    if (m_repository_type.isSet()) {
        obj.insert(QString("repositoryType"), ::OpenAPI::toJsonValue(m_repository_type));
    }
    if (m_rolling_builds_isSet) {
        obj.insert(QString("rollingBuilds"), ::OpenAPI::toJsonValue(m_rolling_builds));
    }
    if (m_rolling_builds_do_not_cancel_running_builds_isSet) {
        obj.insert(QString("rollingBuildsDoNotCancelRunningBuilds"), ::OpenAPI::toJsonValue(m_rolling_builds_do_not_cancel_running_builds));
    }
    if (m_rolling_builds_only_for_pull_requests_isSet) {
        obj.insert(QString("rollingBuildsOnlyForPullRequests"), ::OpenAPI::toJsonValue(m_rolling_builds_only_for_pull_requests));
    }
    if (m_save_build_cache_in_pull_requests_isSet) {
        obj.insert(QString("saveBuildCacheInPullRequests"), ::OpenAPI::toJsonValue(m_save_build_cache_in_pull_requests));
    }
    if (m_security_descriptor.isSet()) {
        obj.insert(QString("securityDescriptor"), ::OpenAPI::toJsonValue(m_security_descriptor));
    }
    if (m_skip_branches_without_appveyor_yml_isSet) {
        obj.insert(QString("skipBranchesWithoutAppveyorYml"), ::OpenAPI::toJsonValue(m_skip_branches_without_appveyor_yml));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIProject::getAccountName() const {
    return m_account_name;
}
void OAIProject::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIProject::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIProject::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIProject::getProjectId() const {
    return m_project_id;
}
void OAIProject::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProject::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProject::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProject::getSlug() const {
    return m_slug;
}
void OAIProject::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIProject::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIProject::is_slug_Valid() const{
    return m_slug_isValid;
}

QDateTime OAIProject::getCreated() const {
    return m_created;
}
void OAIProject::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProject::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProject::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIProject::getUpdated() const {
    return m_updated;
}
void OAIProject::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIProject::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIProject::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIProject::getAccountId() const {
    return m_account_id;
}
void OAIProject::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIProject::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIProject::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIProject::isAlwaysBuildClosedPullRequests() const {
    return m_always_build_closed_pull_requests;
}
void OAIProject::setAlwaysBuildClosedPullRequests(const bool &always_build_closed_pull_requests) {
    m_always_build_closed_pull_requests = always_build_closed_pull_requests;
    m_always_build_closed_pull_requests_isSet = true;
}

bool OAIProject::is_always_build_closed_pull_requests_Set() const{
    return m_always_build_closed_pull_requests_isSet;
}

bool OAIProject::is_always_build_closed_pull_requests_Valid() const{
    return m_always_build_closed_pull_requests_isValid;
}

QList<OAIBuild> OAIProject::getBuilds() const {
    return m_builds;
}
void OAIProject::setBuilds(const QList<OAIBuild> &builds) {
    m_builds = builds;
    m_builds_isSet = true;
}

bool OAIProject::is_builds_Set() const{
    return m_builds_isSet;
}

bool OAIProject::is_builds_Valid() const{
    return m_builds_isValid;
}

qint32 OAIProject::getCurrentBuildId() const {
    return m_current_build_id;
}
void OAIProject::setCurrentBuildId(const qint32 &current_build_id) {
    m_current_build_id = current_build_id;
    m_current_build_id_isSet = true;
}

bool OAIProject::is_current_build_id_Set() const{
    return m_current_build_id_isSet;
}

bool OAIProject::is_current_build_id_Valid() const{
    return m_current_build_id_isValid;
}

bool OAIProject::isDisablePullRequestWebhooks() const {
    return m_disable_pull_request_webhooks;
}
void OAIProject::setDisablePullRequestWebhooks(const bool &disable_pull_request_webhooks) {
    m_disable_pull_request_webhooks = disable_pull_request_webhooks;
    m_disable_pull_request_webhooks_isSet = true;
}

bool OAIProject::is_disable_pull_request_webhooks_Set() const{
    return m_disable_pull_request_webhooks_isSet;
}

bool OAIProject::is_disable_pull_request_webhooks_Valid() const{
    return m_disable_pull_request_webhooks_isValid;
}

bool OAIProject::isDisablePushWebhooks() const {
    return m_disable_push_webhooks;
}
void OAIProject::setDisablePushWebhooks(const bool &disable_push_webhooks) {
    m_disable_push_webhooks = disable_push_webhooks;
    m_disable_push_webhooks_isSet = true;
}

bool OAIProject::is_disable_push_webhooks_Set() const{
    return m_disable_push_webhooks_isSet;
}

bool OAIProject::is_disable_push_webhooks_Valid() const{
    return m_disable_push_webhooks_isValid;
}

bool OAIProject::isEnableDeploymentInPullRequests() const {
    return m_enable_deployment_in_pull_requests;
}
void OAIProject::setEnableDeploymentInPullRequests(const bool &enable_deployment_in_pull_requests) {
    m_enable_deployment_in_pull_requests = enable_deployment_in_pull_requests;
    m_enable_deployment_in_pull_requests_isSet = true;
}

bool OAIProject::is_enable_deployment_in_pull_requests_Set() const{
    return m_enable_deployment_in_pull_requests_isSet;
}

bool OAIProject::is_enable_deployment_in_pull_requests_Valid() const{
    return m_enable_deployment_in_pull_requests_isValid;
}

bool OAIProject::isEnableSecureVariablesInPullRequests() const {
    return m_enable_secure_variables_in_pull_requests;
}
void OAIProject::setEnableSecureVariablesInPullRequests(const bool &enable_secure_variables_in_pull_requests) {
    m_enable_secure_variables_in_pull_requests = enable_secure_variables_in_pull_requests;
    m_enable_secure_variables_in_pull_requests_isSet = true;
}

bool OAIProject::is_enable_secure_variables_in_pull_requests_Set() const{
    return m_enable_secure_variables_in_pull_requests_isSet;
}

bool OAIProject::is_enable_secure_variables_in_pull_requests_Valid() const{
    return m_enable_secure_variables_in_pull_requests_isValid;
}

bool OAIProject::isEnableSecureVariablesInPullRequestsFromSameRepo() const {
    return m_enable_secure_variables_in_pull_requests_from_same_repo;
}
void OAIProject::setEnableSecureVariablesInPullRequestsFromSameRepo(const bool &enable_secure_variables_in_pull_requests_from_same_repo) {
    m_enable_secure_variables_in_pull_requests_from_same_repo = enable_secure_variables_in_pull_requests_from_same_repo;
    m_enable_secure_variables_in_pull_requests_from_same_repo_isSet = true;
}

bool OAIProject::is_enable_secure_variables_in_pull_requests_from_same_repo_Set() const{
    return m_enable_secure_variables_in_pull_requests_from_same_repo_isSet;
}

bool OAIProject::is_enable_secure_variables_in_pull_requests_from_same_repo_Valid() const{
    return m_enable_secure_variables_in_pull_requests_from_same_repo_isValid;
}

bool OAIProject::isIsGitHubApp() const {
    return m_is_git_hub_app;
}
void OAIProject::setIsGitHubApp(const bool &is_git_hub_app) {
    m_is_git_hub_app = is_git_hub_app;
    m_is_git_hub_app_isSet = true;
}

bool OAIProject::is_is_git_hub_app_Set() const{
    return m_is_git_hub_app_isSet;
}

bool OAIProject::is_is_git_hub_app_Valid() const{
    return m_is_git_hub_app_isValid;
}

bool OAIProject::isIsPrivate() const {
    return m_is_private;
}
void OAIProject::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIProject::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIProject::is_is_private_Valid() const{
    return m_is_private_isValid;
}

OAINuGetFeed OAIProject::getNuGetFeed() const {
    return m_nu_get_feed;
}
void OAIProject::setNuGetFeed(const OAINuGetFeed &nu_get_feed) {
    m_nu_get_feed = nu_get_feed;
    m_nu_get_feed_isSet = true;
}

bool OAIProject::is_nu_get_feed_Set() const{
    return m_nu_get_feed_isSet;
}

bool OAIProject::is_nu_get_feed_Valid() const{
    return m_nu_get_feed_isValid;
}

QString OAIProject::getRepositoryBranch() const {
    return m_repository_branch;
}
void OAIProject::setRepositoryBranch(const QString &repository_branch) {
    m_repository_branch = repository_branch;
    m_repository_branch_isSet = true;
}

bool OAIProject::is_repository_branch_Set() const{
    return m_repository_branch_isSet;
}

bool OAIProject::is_repository_branch_Valid() const{
    return m_repository_branch_isValid;
}

QString OAIProject::getRepositoryName() const {
    return m_repository_name;
}
void OAIProject::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIProject::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIProject::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

OAIRepositoryScm OAIProject::getRepositoryScm() const {
    return m_repository_scm;
}
void OAIProject::setRepositoryScm(const OAIRepositoryScm &repository_scm) {
    m_repository_scm = repository_scm;
    m_repository_scm_isSet = true;
}

bool OAIProject::is_repository_scm_Set() const{
    return m_repository_scm_isSet;
}

bool OAIProject::is_repository_scm_Valid() const{
    return m_repository_scm_isValid;
}

OAIRepositoryProvider OAIProject::getRepositoryType() const {
    return m_repository_type;
}
void OAIProject::setRepositoryType(const OAIRepositoryProvider &repository_type) {
    m_repository_type = repository_type;
    m_repository_type_isSet = true;
}

bool OAIProject::is_repository_type_Set() const{
    return m_repository_type_isSet;
}

bool OAIProject::is_repository_type_Valid() const{
    return m_repository_type_isValid;
}

bool OAIProject::isRollingBuilds() const {
    return m_rolling_builds;
}
void OAIProject::setRollingBuilds(const bool &rolling_builds) {
    m_rolling_builds = rolling_builds;
    m_rolling_builds_isSet = true;
}

bool OAIProject::is_rolling_builds_Set() const{
    return m_rolling_builds_isSet;
}

bool OAIProject::is_rolling_builds_Valid() const{
    return m_rolling_builds_isValid;
}

bool OAIProject::isRollingBuildsDoNotCancelRunningBuilds() const {
    return m_rolling_builds_do_not_cancel_running_builds;
}
void OAIProject::setRollingBuildsDoNotCancelRunningBuilds(const bool &rolling_builds_do_not_cancel_running_builds) {
    m_rolling_builds_do_not_cancel_running_builds = rolling_builds_do_not_cancel_running_builds;
    m_rolling_builds_do_not_cancel_running_builds_isSet = true;
}

bool OAIProject::is_rolling_builds_do_not_cancel_running_builds_Set() const{
    return m_rolling_builds_do_not_cancel_running_builds_isSet;
}

bool OAIProject::is_rolling_builds_do_not_cancel_running_builds_Valid() const{
    return m_rolling_builds_do_not_cancel_running_builds_isValid;
}

bool OAIProject::isRollingBuildsOnlyForPullRequests() const {
    return m_rolling_builds_only_for_pull_requests;
}
void OAIProject::setRollingBuildsOnlyForPullRequests(const bool &rolling_builds_only_for_pull_requests) {
    m_rolling_builds_only_for_pull_requests = rolling_builds_only_for_pull_requests;
    m_rolling_builds_only_for_pull_requests_isSet = true;
}

bool OAIProject::is_rolling_builds_only_for_pull_requests_Set() const{
    return m_rolling_builds_only_for_pull_requests_isSet;
}

bool OAIProject::is_rolling_builds_only_for_pull_requests_Valid() const{
    return m_rolling_builds_only_for_pull_requests_isValid;
}

bool OAIProject::isSaveBuildCacheInPullRequests() const {
    return m_save_build_cache_in_pull_requests;
}
void OAIProject::setSaveBuildCacheInPullRequests(const bool &save_build_cache_in_pull_requests) {
    m_save_build_cache_in_pull_requests = save_build_cache_in_pull_requests;
    m_save_build_cache_in_pull_requests_isSet = true;
}

bool OAIProject::is_save_build_cache_in_pull_requests_Set() const{
    return m_save_build_cache_in_pull_requests_isSet;
}

bool OAIProject::is_save_build_cache_in_pull_requests_Valid() const{
    return m_save_build_cache_in_pull_requests_isValid;
}

OAISecurityDescriptor OAIProject::getSecurityDescriptor() const {
    return m_security_descriptor;
}
void OAIProject::setSecurityDescriptor(const OAISecurityDescriptor &security_descriptor) {
    m_security_descriptor = security_descriptor;
    m_security_descriptor_isSet = true;
}

bool OAIProject::is_security_descriptor_Set() const{
    return m_security_descriptor_isSet;
}

bool OAIProject::is_security_descriptor_Valid() const{
    return m_security_descriptor_isValid;
}

bool OAIProject::isSkipBranchesWithoutAppveyorYml() const {
    return m_skip_branches_without_appveyor_yml;
}
void OAIProject::setSkipBranchesWithoutAppveyorYml(const bool &skip_branches_without_appveyor_yml) {
    m_skip_branches_without_appveyor_yml = skip_branches_without_appveyor_yml;
    m_skip_branches_without_appveyor_yml_isSet = true;
}

bool OAIProject::is_skip_branches_without_appveyor_yml_Set() const{
    return m_skip_branches_without_appveyor_yml_isSet;
}

bool OAIProject::is_skip_branches_without_appveyor_yml_Valid() const{
    return m_skip_branches_without_appveyor_yml_isValid;
}

QString OAIProject::getTags() const {
    return m_tags;
}
void OAIProject::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProject::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProject::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_always_build_closed_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_pull_request_webhooks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_push_webhooks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_deployment_in_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_secure_variables_in_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_secure_variables_in_pull_requests_from_same_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_git_hub_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nu_get_feed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_scm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_builds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_builds_do_not_cancel_running_builds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_builds_only_for_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_build_cache_in_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_branches_without_appveyor_yml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_id_isValid && m_repository_name_isValid && true;
}

} // namespace OpenAPI
