/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionUserAccountModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionUserAccountModel::OAISessionUserAccountModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionUserAccountModel::OAISessionUserAccountModel() {
    this->initializeModel();
}

OAISessionUserAccountModel::~OAISessionUserAccountModel() {}

void OAISessionUserAccountModel::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_allow_custom_build_environment_isSet = false;
    m_allow_custom_build_environment_isValid = false;

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_feature_flags_isSet = false;
    m_feature_flags_isValid = false;

    m_git_hub_plan_isSet = false;
    m_git_hub_plan_isValid = false;

    m_git_hub_plan_org_isSet = false;
    m_git_hub_plan_org_isValid = false;

    m_is_collaborator_isSet = false;
    m_is_collaborator_isValid = false;

    m_is_enterprise_plan_isSet = false;
    m_is_enterprise_plan_isValid = false;

    m_is_owner_isSet = false;
    m_is_owner_isValid = false;

    m_manual_payments_isSet = false;
    m_manual_payments_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_plan_end_isSet = false;
    m_plan_end_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_plan_start_isSet = false;
    m_plan_start_isValid = false;

    m_plan_status_isSet = false;
    m_plan_status_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_unpaid_isSet = false;
    m_unpaid_isValid = false;

    m_unverified_isSet = false;
    m_unverified_isValid = false;
}

void OAISessionUserAccountModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionUserAccountModel::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_allow_custom_build_environment_isValid = ::OpenAPI::fromJsonValue(m_allow_custom_build_environment, json[QString("allowCustomBuildEnvironment")]);
    m_allow_custom_build_environment_isSet = !json[QString("allowCustomBuildEnvironment")].isNull() && m_allow_custom_build_environment_isValid;

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_feature_flags_isValid = ::OpenAPI::fromJsonValue(m_feature_flags, json[QString("featureFlags")]);
    m_feature_flags_isSet = !json[QString("featureFlags")].isNull() && m_feature_flags_isValid;

    m_git_hub_plan_isValid = ::OpenAPI::fromJsonValue(m_git_hub_plan, json[QString("gitHubPlan")]);
    m_git_hub_plan_isSet = !json[QString("gitHubPlan")].isNull() && m_git_hub_plan_isValid;

    m_git_hub_plan_org_isValid = ::OpenAPI::fromJsonValue(m_git_hub_plan_org, json[QString("gitHubPlanOrg")]);
    m_git_hub_plan_org_isSet = !json[QString("gitHubPlanOrg")].isNull() && m_git_hub_plan_org_isValid;

    m_is_collaborator_isValid = ::OpenAPI::fromJsonValue(m_is_collaborator, json[QString("isCollaborator")]);
    m_is_collaborator_isSet = !json[QString("isCollaborator")].isNull() && m_is_collaborator_isValid;

    m_is_enterprise_plan_isValid = ::OpenAPI::fromJsonValue(m_is_enterprise_plan, json[QString("isEnterprisePlan")]);
    m_is_enterprise_plan_isSet = !json[QString("isEnterprisePlan")].isNull() && m_is_enterprise_plan_isValid;

    m_is_owner_isValid = ::OpenAPI::fromJsonValue(m_is_owner, json[QString("isOwner")]);
    m_is_owner_isSet = !json[QString("isOwner")].isNull() && m_is_owner_isValid;

    m_manual_payments_isValid = ::OpenAPI::fromJsonValue(m_manual_payments, json[QString("manualPayments")]);
    m_manual_payments_isSet = !json[QString("manualPayments")].isNull() && m_manual_payments_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_plan_end_isValid = ::OpenAPI::fromJsonValue(m_plan_end, json[QString("planEnd")]);
    m_plan_end_isSet = !json[QString("planEnd")].isNull() && m_plan_end_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_plan_start_isValid = ::OpenAPI::fromJsonValue(m_plan_start, json[QString("planStart")]);
    m_plan_start_isSet = !json[QString("planStart")].isNull() && m_plan_start_isValid;

    m_plan_status_isValid = ::OpenAPI::fromJsonValue(m_plan_status, json[QString("planStatus")]);
    m_plan_status_isSet = !json[QString("planStatus")].isNull() && m_plan_status_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("timeZoneId")]);
    m_time_zone_id_isSet = !json[QString("timeZoneId")].isNull() && m_time_zone_id_isValid;

    m_unpaid_isValid = ::OpenAPI::fromJsonValue(m_unpaid, json[QString("unpaid")]);
    m_unpaid_isSet = !json[QString("unpaid")].isNull() && m_unpaid_isValid;

    m_unverified_isValid = ::OpenAPI::fromJsonValue(m_unverified, json[QString("unverified")]);
    m_unverified_isSet = !json[QString("unverified")].isNull() && m_unverified_isValid;
}

QString OAISessionUserAccountModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionUserAccountModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_allow_custom_build_environment_isSet) {
        obj.insert(QString("allowCustomBuildEnvironment"), ::OpenAPI::toJsonValue(m_allow_custom_build_environment));
    }
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_feature_flags.isSet()) {
        obj.insert(QString("featureFlags"), ::OpenAPI::toJsonValue(m_feature_flags));
    }
    if (m_git_hub_plan_isSet) {
        obj.insert(QString("gitHubPlan"), ::OpenAPI::toJsonValue(m_git_hub_plan));
    }
    if (m_git_hub_plan_org_isSet) {
        obj.insert(QString("gitHubPlanOrg"), ::OpenAPI::toJsonValue(m_git_hub_plan_org));
    }
    if (m_is_collaborator_isSet) {
        obj.insert(QString("isCollaborator"), ::OpenAPI::toJsonValue(m_is_collaborator));
    }
    if (m_is_enterprise_plan_isSet) {
        obj.insert(QString("isEnterprisePlan"), ::OpenAPI::toJsonValue(m_is_enterprise_plan));
    }
    if (m_is_owner_isSet) {
        obj.insert(QString("isOwner"), ::OpenAPI::toJsonValue(m_is_owner));
    }
    if (m_manual_payments_isSet) {
        obj.insert(QString("manualPayments"), ::OpenAPI::toJsonValue(m_manual_payments));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_plan_end_isSet) {
        obj.insert(QString("planEnd"), ::OpenAPI::toJsonValue(m_plan_end));
    }
    if (m_plan_id.isSet()) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_plan_start_isSet) {
        obj.insert(QString("planStart"), ::OpenAPI::toJsonValue(m_plan_start));
    }
    if (m_plan_status.isSet()) {
        obj.insert(QString("planStatus"), ::OpenAPI::toJsonValue(m_plan_status));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("timeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_unpaid_isSet) {
        obj.insert(QString("unpaid"), ::OpenAPI::toJsonValue(m_unpaid));
    }
    if (m_unverified_isSet) {
        obj.insert(QString("unverified"), ::OpenAPI::toJsonValue(m_unverified));
    }
    return obj;
}

QDateTime OAISessionUserAccountModel::getCreated() const {
    return m_created;
}
void OAISessionUserAccountModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISessionUserAccountModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAISessionUserAccountModel::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAISessionUserAccountModel::getUpdated() const {
    return m_updated;
}
void OAISessionUserAccountModel::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAISessionUserAccountModel::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAISessionUserAccountModel::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAISessionUserAccountModel::getAccountId() const {
    return m_account_id;
}
void OAISessionUserAccountModel::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISessionUserAccountModel::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISessionUserAccountModel::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAISessionUserAccountModel::isAllowCustomBuildEnvironment() const {
    return m_allow_custom_build_environment;
}
void OAISessionUserAccountModel::setAllowCustomBuildEnvironment(const bool &allow_custom_build_environment) {
    m_allow_custom_build_environment = allow_custom_build_environment;
    m_allow_custom_build_environment_isSet = true;
}

bool OAISessionUserAccountModel::is_allow_custom_build_environment_Set() const{
    return m_allow_custom_build_environment_isSet;
}

bool OAISessionUserAccountModel::is_allow_custom_build_environment_Valid() const{
    return m_allow_custom_build_environment_isValid;
}

bool OAISessionUserAccountModel::isBlocked() const {
    return m_blocked;
}
void OAISessionUserAccountModel::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAISessionUserAccountModel::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAISessionUserAccountModel::is_blocked_Valid() const{
    return m_blocked_isValid;
}

OAIFeatureFlags OAISessionUserAccountModel::getFeatureFlags() const {
    return m_feature_flags;
}
void OAISessionUserAccountModel::setFeatureFlags(const OAIFeatureFlags &feature_flags) {
    m_feature_flags = feature_flags;
    m_feature_flags_isSet = true;
}

bool OAISessionUserAccountModel::is_feature_flags_Set() const{
    return m_feature_flags_isSet;
}

bool OAISessionUserAccountModel::is_feature_flags_Valid() const{
    return m_feature_flags_isValid;
}

bool OAISessionUserAccountModel::isGitHubPlan() const {
    return m_git_hub_plan;
}
void OAISessionUserAccountModel::setGitHubPlan(const bool &git_hub_plan) {
    m_git_hub_plan = git_hub_plan;
    m_git_hub_plan_isSet = true;
}

bool OAISessionUserAccountModel::is_git_hub_plan_Set() const{
    return m_git_hub_plan_isSet;
}

bool OAISessionUserAccountModel::is_git_hub_plan_Valid() const{
    return m_git_hub_plan_isValid;
}

QString OAISessionUserAccountModel::getGitHubPlanOrg() const {
    return m_git_hub_plan_org;
}
void OAISessionUserAccountModel::setGitHubPlanOrg(const QString &git_hub_plan_org) {
    m_git_hub_plan_org = git_hub_plan_org;
    m_git_hub_plan_org_isSet = true;
}

bool OAISessionUserAccountModel::is_git_hub_plan_org_Set() const{
    return m_git_hub_plan_org_isSet;
}

bool OAISessionUserAccountModel::is_git_hub_plan_org_Valid() const{
    return m_git_hub_plan_org_isValid;
}

bool OAISessionUserAccountModel::isIsCollaborator() const {
    return m_is_collaborator;
}
void OAISessionUserAccountModel::setIsCollaborator(const bool &is_collaborator) {
    m_is_collaborator = is_collaborator;
    m_is_collaborator_isSet = true;
}

bool OAISessionUserAccountModel::is_is_collaborator_Set() const{
    return m_is_collaborator_isSet;
}

bool OAISessionUserAccountModel::is_is_collaborator_Valid() const{
    return m_is_collaborator_isValid;
}

bool OAISessionUserAccountModel::isIsEnterprisePlan() const {
    return m_is_enterprise_plan;
}
void OAISessionUserAccountModel::setIsEnterprisePlan(const bool &is_enterprise_plan) {
    m_is_enterprise_plan = is_enterprise_plan;
    m_is_enterprise_plan_isSet = true;
}

bool OAISessionUserAccountModel::is_is_enterprise_plan_Set() const{
    return m_is_enterprise_plan_isSet;
}

bool OAISessionUserAccountModel::is_is_enterprise_plan_Valid() const{
    return m_is_enterprise_plan_isValid;
}

bool OAISessionUserAccountModel::isIsOwner() const {
    return m_is_owner;
}
void OAISessionUserAccountModel::setIsOwner(const bool &is_owner) {
    m_is_owner = is_owner;
    m_is_owner_isSet = true;
}

bool OAISessionUserAccountModel::is_is_owner_Set() const{
    return m_is_owner_isSet;
}

bool OAISessionUserAccountModel::is_is_owner_Valid() const{
    return m_is_owner_isValid;
}

bool OAISessionUserAccountModel::isManualPayments() const {
    return m_manual_payments;
}
void OAISessionUserAccountModel::setManualPayments(const bool &manual_payments) {
    m_manual_payments = manual_payments;
    m_manual_payments_isSet = true;
}

bool OAISessionUserAccountModel::is_manual_payments_Set() const{
    return m_manual_payments_isSet;
}

bool OAISessionUserAccountModel::is_manual_payments_Valid() const{
    return m_manual_payments_isValid;
}

QString OAISessionUserAccountModel::getName() const {
    return m_name;
}
void OAISessionUserAccountModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISessionUserAccountModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAISessionUserAccountModel::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPermissionName> OAISessionUserAccountModel::getPermissions() const {
    return m_permissions;
}
void OAISessionUserAccountModel::setPermissions(const QList<OAIPermissionName> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAISessionUserAccountModel::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAISessionUserAccountModel::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QDateTime OAISessionUserAccountModel::getPlanEnd() const {
    return m_plan_end;
}
void OAISessionUserAccountModel::setPlanEnd(const QDateTime &plan_end) {
    m_plan_end = plan_end;
    m_plan_end_isSet = true;
}

bool OAISessionUserAccountModel::is_plan_end_Set() const{
    return m_plan_end_isSet;
}

bool OAISessionUserAccountModel::is_plan_end_Valid() const{
    return m_plan_end_isValid;
}

OAIPlanName OAISessionUserAccountModel::getPlanId() const {
    return m_plan_id;
}
void OAISessionUserAccountModel::setPlanId(const OAIPlanName &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAISessionUserAccountModel::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAISessionUserAccountModel::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QDateTime OAISessionUserAccountModel::getPlanStart() const {
    return m_plan_start;
}
void OAISessionUserAccountModel::setPlanStart(const QDateTime &plan_start) {
    m_plan_start = plan_start;
    m_plan_start_isSet = true;
}

bool OAISessionUserAccountModel::is_plan_start_Set() const{
    return m_plan_start_isSet;
}

bool OAISessionUserAccountModel::is_plan_start_Valid() const{
    return m_plan_start_isValid;
}

OAIPlanStatus OAISessionUserAccountModel::getPlanStatus() const {
    return m_plan_status;
}
void OAISessionUserAccountModel::setPlanStatus(const OAIPlanStatus &plan_status) {
    m_plan_status = plan_status;
    m_plan_status_isSet = true;
}

bool OAISessionUserAccountModel::is_plan_status_Set() const{
    return m_plan_status_isSet;
}

bool OAISessionUserAccountModel::is_plan_status_Valid() const{
    return m_plan_status_isValid;
}

qint32 OAISessionUserAccountModel::getRoleId() const {
    return m_role_id;
}
void OAISessionUserAccountModel::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAISessionUserAccountModel::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAISessionUserAccountModel::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QString OAISessionUserAccountModel::getRoleName() const {
    return m_role_name;
}
void OAISessionUserAccountModel::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAISessionUserAccountModel::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAISessionUserAccountModel::is_role_name_Valid() const{
    return m_role_name_isValid;
}

QString OAISessionUserAccountModel::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAISessionUserAccountModel::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAISessionUserAccountModel::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAISessionUserAccountModel::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

bool OAISessionUserAccountModel::isUnpaid() const {
    return m_unpaid;
}
void OAISessionUserAccountModel::setUnpaid(const bool &unpaid) {
    m_unpaid = unpaid;
    m_unpaid_isSet = true;
}

bool OAISessionUserAccountModel::is_unpaid_Set() const{
    return m_unpaid_isSet;
}

bool OAISessionUserAccountModel::is_unpaid_Valid() const{
    return m_unpaid_isValid;
}

bool OAISessionUserAccountModel::isUnverified() const {
    return m_unverified;
}
void OAISessionUserAccountModel::setUnverified(const bool &unverified) {
    m_unverified = unverified;
    m_unverified_isSet = true;
}

bool OAISessionUserAccountModel::is_unverified_Set() const{
    return m_unverified_isSet;
}

bool OAISessionUserAccountModel::is_unverified_Valid() const{
    return m_unverified_isValid;
}

bool OAISessionUserAccountModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_custom_build_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_flags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_hub_plan_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_collaborator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enterprise_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unverified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionUserAccountModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
