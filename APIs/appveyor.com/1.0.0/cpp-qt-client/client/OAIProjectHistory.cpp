/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectHistory::OAIProjectHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectHistory::OAIProjectHistory() {
    this->initializeModel();
}

OAIProjectHistory::~OAIProjectHistory() {}

void OAIProjectHistory::initializeModel() {

    m_builds_isSet = false;
    m_builds_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIProjectHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectHistory::fromJsonObject(QJsonObject json) {

    m_builds_isValid = ::OpenAPI::fromJsonValue(m_builds, json[QString("builds")]);
    m_builds_isSet = !json[QString("builds")].isNull() && m_builds_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIProjectHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_builds.size() > 0) {
        obj.insert(QString("builds"), ::OpenAPI::toJsonValue(m_builds));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

QList<OAIBuild> OAIProjectHistory::getBuilds() const {
    return m_builds;
}
void OAIProjectHistory::setBuilds(const QList<OAIBuild> &builds) {
    m_builds = builds;
    m_builds_isSet = true;
}

bool OAIProjectHistory::is_builds_Set() const{
    return m_builds_isSet;
}

bool OAIProjectHistory::is_builds_Valid() const{
    return m_builds_isValid;
}

OAIProject OAIProjectHistory::getProject() const {
    return m_project;
}
void OAIProjectHistory::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectHistory::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectHistory::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIProjectHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
