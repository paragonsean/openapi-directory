/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRole::OAIRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRole::OAIRole() {
    this->initializeModel();
}

OAIRole::~OAIRole() {}

void OAIRole::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_is_system_isSet = false;
    m_is_system_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;
}

void OAIRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRole::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_is_system_isValid = ::OpenAPI::fromJsonValue(m_is_system, json[QString("isSystem")]);
    m_is_system_isSet = !json[QString("isSystem")].isNull() && m_is_system_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;
}

QString OAIRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRole::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_is_system_isSet) {
        obj.insert(QString("isSystem"), ::OpenAPI::toJsonValue(m_is_system));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    return obj;
}

QDateTime OAIRole::getCreated() const {
    return m_created;
}
void OAIRole::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRole::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRole::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIRole::getUpdated() const {
    return m_updated;
}
void OAIRole::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIRole::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIRole::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIRole::isIsSystem() const {
    return m_is_system;
}
void OAIRole::setIsSystem(const bool &is_system) {
    m_is_system = is_system;
    m_is_system_isSet = true;
}

bool OAIRole::is_is_system_Set() const{
    return m_is_system_isSet;
}

bool OAIRole::is_is_system_Valid() const{
    return m_is_system_isValid;
}

QString OAIRole::getName() const {
    return m_name;
}
void OAIRole::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRole::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRole::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRole::getRoleId() const {
    return m_role_id;
}
void OAIRole::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIRole::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIRole::is_role_id_Valid() const{
    return m_role_id_isValid;
}

bool OAIRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_role_id_isValid && true;
}

} // namespace OpenAPI
