/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildWorkerImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildWorkerImage::OAIBuildWorkerImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildWorkerImage::OAIBuildWorkerImage() {
    this->initializeModel();
}

OAIBuildWorkerImage::~OAIBuildWorkerImage() {}

void OAIBuildWorkerImage::initializeModel() {

    m_build_cloud_name_isSet = false;
    m_build_cloud_name_isValid = false;

    m_build_worker_image_id_isSet = false;
    m_build_worker_image_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;
}

void OAIBuildWorkerImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildWorkerImage::fromJsonObject(QJsonObject json) {

    m_build_cloud_name_isValid = ::OpenAPI::fromJsonValue(m_build_cloud_name, json[QString("buildCloudName")]);
    m_build_cloud_name_isSet = !json[QString("buildCloudName")].isNull() && m_build_cloud_name_isValid;

    m_build_worker_image_id_isValid = ::OpenAPI::fromJsonValue(m_build_worker_image_id, json[QString("buildWorkerImageId")]);
    m_build_worker_image_id_isSet = !json[QString("buildWorkerImageId")].isNull() && m_build_worker_image_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;
}

QString OAIBuildWorkerImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildWorkerImage::asJsonObject() const {
    QJsonObject obj;
    if (m_build_cloud_name.isSet()) {
        obj.insert(QString("buildCloudName"), ::OpenAPI::toJsonValue(m_build_cloud_name));
    }
    if (m_build_worker_image_id_isSet) {
        obj.insert(QString("buildWorkerImageId"), ::OpenAPI::toJsonValue(m_build_worker_image_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_type.isSet()) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    return obj;
}

OAIBuildCloudName OAIBuildWorkerImage::getBuildCloudName() const {
    return m_build_cloud_name;
}
void OAIBuildWorkerImage::setBuildCloudName(const OAIBuildCloudName &build_cloud_name) {
    m_build_cloud_name = build_cloud_name;
    m_build_cloud_name_isSet = true;
}

bool OAIBuildWorkerImage::is_build_cloud_name_Set() const{
    return m_build_cloud_name_isSet;
}

bool OAIBuildWorkerImage::is_build_cloud_name_Valid() const{
    return m_build_cloud_name_isValid;
}

qint32 OAIBuildWorkerImage::getBuildWorkerImageId() const {
    return m_build_worker_image_id;
}
void OAIBuildWorkerImage::setBuildWorkerImageId(const qint32 &build_worker_image_id) {
    m_build_worker_image_id = build_worker_image_id;
    m_build_worker_image_id_isSet = true;
}

bool OAIBuildWorkerImage::is_build_worker_image_id_Set() const{
    return m_build_worker_image_id_isSet;
}

bool OAIBuildWorkerImage::is_build_worker_image_id_Valid() const{
    return m_build_worker_image_id_isValid;
}

OAIBuildWorkerImageName OAIBuildWorkerImage::getName() const {
    return m_name;
}
void OAIBuildWorkerImage::setName(const OAIBuildWorkerImageName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuildWorkerImage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuildWorkerImage::is_name_Valid() const{
    return m_name_isValid;
}

OAIOSType OAIBuildWorkerImage::getOsType() const {
    return m_os_type;
}
void OAIBuildWorkerImage::setOsType(const OAIOSType &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIBuildWorkerImage::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIBuildWorkerImage::is_os_type_Valid() const{
    return m_os_type_isValid;
}

bool OAIBuildWorkerImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_cloud_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_worker_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildWorkerImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_build_worker_image_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
