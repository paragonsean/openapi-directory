/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironment::OAIDeploymentEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironment::OAIDeploymentEnvironment() {
    this->initializeModel();
}

OAIDeploymentEnvironment::~OAIDeploymentEnvironment() {}

void OAIDeploymentEnvironment::initializeModel() {

    m_deployment_environment_id_isSet = false;
    m_deployment_environment_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_projects_mode_isSet = false;
    m_projects_mode_isValid = false;

    m_security_descriptor_isSet = false;
    m_security_descriptor_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDeploymentEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironment::fromJsonObject(QJsonObject json) {

    m_deployment_environment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_environment_id, json[QString("deploymentEnvironmentId")]);
    m_deployment_environment_id_isSet = !json[QString("deploymentEnvironmentId")].isNull() && m_deployment_environment_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_projects_mode_isValid = ::OpenAPI::fromJsonValue(m_projects_mode, json[QString("projectsMode")]);
    m_projects_mode_isSet = !json[QString("projectsMode")].isNull() && m_projects_mode_isValid;

    m_security_descriptor_isValid = ::OpenAPI::fromJsonValue(m_security_descriptor, json[QString("securityDescriptor")]);
    m_security_descriptor_isSet = !json[QString("securityDescriptor")].isNull() && m_security_descriptor_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDeploymentEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_environment_id_isSet) {
        obj.insert(QString("deploymentEnvironmentId"), ::OpenAPI::toJsonValue(m_deployment_environment_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_projects_mode.isSet()) {
        obj.insert(QString("projectsMode"), ::OpenAPI::toJsonValue(m_projects_mode));
    }
    if (m_security_descriptor.isSet()) {
        obj.insert(QString("securityDescriptor"), ::OpenAPI::toJsonValue(m_security_descriptor));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAIDeploymentEnvironment::getDeploymentEnvironmentId() const {
    return m_deployment_environment_id;
}
void OAIDeploymentEnvironment::setDeploymentEnvironmentId(const qint32 &deployment_environment_id) {
    m_deployment_environment_id = deployment_environment_id;
    m_deployment_environment_id_isSet = true;
}

bool OAIDeploymentEnvironment::is_deployment_environment_id_Set() const{
    return m_deployment_environment_id_isSet;
}

bool OAIDeploymentEnvironment::is_deployment_environment_id_Valid() const{
    return m_deployment_environment_id_isValid;
}

QString OAIDeploymentEnvironment::getName() const {
    return m_name;
}
void OAIDeploymentEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

OAIDeploymentProviderType OAIDeploymentEnvironment::getProvider() const {
    return m_provider;
}
void OAIDeploymentEnvironment::setProvider(const OAIDeploymentProviderType &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDeploymentEnvironment::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDeploymentEnvironment::is_provider_Valid() const{
    return m_provider_isValid;
}

QDateTime OAIDeploymentEnvironment::getCreated() const {
    return m_created;
}
void OAIDeploymentEnvironment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDeploymentEnvironment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDeploymentEnvironment::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIDeploymentEnvironment::getUpdated() const {
    return m_updated;
}
void OAIDeploymentEnvironment::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDeploymentEnvironment::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDeploymentEnvironment::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIDeploymentEnvironment::getAccountId() const {
    return m_account_id;
}
void OAIDeploymentEnvironment::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDeploymentEnvironment::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDeploymentEnvironment::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIDeploymentProjectSelectionMode OAIDeploymentEnvironment::getProjectsMode() const {
    return m_projects_mode;
}
void OAIDeploymentEnvironment::setProjectsMode(const OAIDeploymentProjectSelectionMode &projects_mode) {
    m_projects_mode = projects_mode;
    m_projects_mode_isSet = true;
}

bool OAIDeploymentEnvironment::is_projects_mode_Set() const{
    return m_projects_mode_isSet;
}

bool OAIDeploymentEnvironment::is_projects_mode_Valid() const{
    return m_projects_mode_isValid;
}

OAISecurityDescriptor OAIDeploymentEnvironment::getSecurityDescriptor() const {
    return m_security_descriptor;
}
void OAIDeploymentEnvironment::setSecurityDescriptor(const OAISecurityDescriptor &security_descriptor) {
    m_security_descriptor = security_descriptor;
    m_security_descriptor_isSet = true;
}

bool OAIDeploymentEnvironment::is_security_descriptor_Set() const{
    return m_security_descriptor_isSet;
}

bool OAIDeploymentEnvironment::is_security_descriptor_Valid() const{
    return m_security_descriptor_isValid;
}

QString OAIDeploymentEnvironment::getTags() const {
    return m_tags;
}
void OAIDeploymentEnvironment::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeploymentEnvironment::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeploymentEnvironment::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDeploymentEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
