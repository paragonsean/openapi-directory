/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentApi_H
#define OAI_OAIEnvironmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeploymentEnvironmentAddition.h"
#include "OAIDeploymentEnvironmentDeploymentsResults.h"
#include "OAIDeploymentEnvironmentLookupModel.h"
#include "OAIDeploymentEnvironmentSettingsResults.h"
#include "OAIDeploymentEnvironmentWithSettings.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentApi(const int timeOut = 0);
    ~OAIEnvironmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIDeploymentEnvironmentAddition [required]
    */
    virtual void addEnvironment(const OAIDeploymentEnvironmentAddition &body);

    /**
    * @param[in]  deployment_environment_id qint32 [required]
    */
    virtual void deleteEnvironment(const qint32 &deployment_environment_id);

    /**
    * @param[in]  deployment_environment_id qint32 [required]
    */
    virtual void getEnvironmentDeployments(const qint32 &deployment_environment_id);

    /**
    * @param[in]  deployment_environment_id qint32 [required]
    */
    virtual void getEnvironmentSettings(const qint32 &deployment_environment_id);


    virtual void getEnvironments();

    /**
    * @param[in]  body OAIDeploymentEnvironmentWithSettings [required]
    */
    virtual void updateEnvironment(const OAIDeploymentEnvironmentWithSettings &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addEnvironmentCallback(OAIHttpRequestWorker *worker);
    void deleteEnvironmentCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentSettingsCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void updateEnvironmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addEnvironmentSignal(OAIDeploymentEnvironmentWithSettings summary);
    void deleteEnvironmentSignal();
    void getEnvironmentDeploymentsSignal(OAIDeploymentEnvironmentDeploymentsResults summary);
    void getEnvironmentSettingsSignal(OAIDeploymentEnvironmentSettingsResults summary);
    void getEnvironmentsSignal(QList<OAIDeploymentEnvironmentLookupModel> summary);
    void updateEnvironmentSignal(OAIDeploymentEnvironmentWithSettings summary);


    void addEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentEnvironmentWithSettings summary);
    void deleteEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void getEnvironmentDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentEnvironmentDeploymentsResults summary);
    void getEnvironmentSettingsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentEnvironmentSettingsResults summary);
    void getEnvironmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeploymentEnvironmentLookupModel> summary);
    void updateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentEnvironmentWithSettings summary);

    Q_DECL_DEPRECATED_X("Use addEnvironmentSignalError() instead")
    void addEnvironmentSignalE(OAIDeploymentEnvironmentWithSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addEnvironmentSignalError(OAIDeploymentEnvironmentWithSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvironmentSignalError() instead")
    void deleteEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentDeploymentsSignalError() instead")
    void getEnvironmentDeploymentsSignalE(OAIDeploymentEnvironmentDeploymentsResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentDeploymentsSignalError(OAIDeploymentEnvironmentDeploymentsResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentSettingsSignalError() instead")
    void getEnvironmentSettingsSignalE(OAIDeploymentEnvironmentSettingsResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentSettingsSignalError(OAIDeploymentEnvironmentSettingsResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentsSignalError() instead")
    void getEnvironmentsSignalE(QList<OAIDeploymentEnvironmentLookupModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentsSignalError(QList<OAIDeploymentEnvironmentLookupModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvironmentSignalError() instead")
    void updateEnvironmentSignalE(OAIDeploymentEnvironmentWithSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentSignalError(OAIDeploymentEnvironmentWithSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addEnvironmentSignalErrorFull() instead")
    void addEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvironmentSignalErrorFull() instead")
    void deleteEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentDeploymentsSignalErrorFull() instead")
    void getEnvironmentDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentSettingsSignalErrorFull() instead")
    void getEnvironmentSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentsSignalErrorFull() instead")
    void getEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvironmentSignalErrorFull() instead")
    void updateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
