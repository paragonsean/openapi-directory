/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironmentDeploymentsResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironmentDeploymentsResults::OAIDeploymentEnvironmentDeploymentsResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironmentDeploymentsResults::OAIDeploymentEnvironmentDeploymentsResults() {
    this->initializeModel();
}

OAIDeploymentEnvironmentDeploymentsResults::~OAIDeploymentEnvironmentDeploymentsResults() {}

void OAIDeploymentEnvironmentDeploymentsResults::initializeModel() {

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;
}

void OAIDeploymentEnvironmentDeploymentsResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironmentDeploymentsResults::fromJsonObject(QJsonObject json) {

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;
}

QString OAIDeploymentEnvironmentDeploymentsResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironmentDeploymentsResults::asJsonObject() const {
    QJsonObject obj;
    if (m_deployments.size() > 0) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    return obj;
}

QList<OAIEnvironmentDeploymentModel> OAIDeploymentEnvironmentDeploymentsResults::getDeployments() const {
    return m_deployments;
}
void OAIDeploymentEnvironmentDeploymentsResults::setDeployments(const QList<OAIEnvironmentDeploymentModel> &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIDeploymentEnvironmentDeploymentsResults::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIDeploymentEnvironmentDeploymentsResults::is_deployments_Valid() const{
    return m_deployments_isValid;
}

OAIDeploymentEnvironment OAIDeploymentEnvironmentDeploymentsResults::getEnvironment() const {
    return m_environment;
}
void OAIDeploymentEnvironmentDeploymentsResults::setEnvironment(const OAIDeploymentEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDeploymentEnvironmentDeploymentsResults::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDeploymentEnvironmentDeploymentsResults::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAIDeploymentEnvironmentDeploymentsResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironmentDeploymentsResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployments_isValid && m_environment_isValid && true;
}

} // namespace OpenAPI
