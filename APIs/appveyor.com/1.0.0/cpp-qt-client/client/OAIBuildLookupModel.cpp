/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildLookupModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildLookupModel::OAIBuildLookupModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildLookupModel::OAIBuildLookupModel() {
    this->initializeModel();
}

OAIBuildLookupModel::~OAIBuildLookupModel() {}

void OAIBuildLookupModel::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBuildLookupModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildLookupModel::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBuildLookupModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildLookupModel::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIBuildLookupModel::getBranch() const {
    return m_branch;
}
void OAIBuildLookupModel::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIBuildLookupModel::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIBuildLookupModel::is_branch_Valid() const{
    return m_branch_isValid;
}

qint32 OAIBuildLookupModel::getBuildId() const {
    return m_build_id;
}
void OAIBuildLookupModel::setBuildId(const qint32 &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIBuildLookupModel::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIBuildLookupModel::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIBuildLookupModel::getMessage() const {
    return m_message;
}
void OAIBuildLookupModel::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBuildLookupModel::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBuildLookupModel::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBuildLookupModel::getVersion() const {
    return m_version;
}
void OAIBuildLookupModel::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBuildLookupModel::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBuildLookupModel::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBuildLookupModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildLookupModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
