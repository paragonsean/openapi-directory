/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInvitationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInvitationModel::OAIUserInvitationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInvitationModel::OAIUserInvitationModel() {
    this->initializeModel();
}

OAIUserInvitationModel::~OAIUserInvitationModel() {}

void OAIUserInvitationModel::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_user_invitation_id_isSet = false;
    m_user_invitation_id_isValid = false;
}

void OAIUserInvitationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInvitationModel::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_user_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_user_invitation_id, json[QString("userInvitationId")]);
    m_user_invitation_id_isSet = !json[QString("userInvitationId")].isNull() && m_user_invitation_id_isValid;
}

QString OAIUserInvitationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInvitationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_user_invitation_id_isSet) {
        obj.insert(QString("userInvitationId"), ::OpenAPI::toJsonValue(m_user_invitation_id));
    }
    return obj;
}

qint32 OAIUserInvitationModel::getAccountId() const {
    return m_account_id;
}
void OAIUserInvitationModel::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUserInvitationModel::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUserInvitationModel::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUserInvitationModel::getAccountName() const {
    return m_account_name;
}
void OAIUserInvitationModel::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUserInvitationModel::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUserInvitationModel::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QDateTime OAIUserInvitationModel::getCreated() const {
    return m_created;
}
void OAIUserInvitationModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUserInvitationModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUserInvitationModel::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIUserInvitationModel::getEmail() const {
    return m_email;
}
void OAIUserInvitationModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserInvitationModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserInvitationModel::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAIUserInvitationModel::getRoleId() const {
    return m_role_id;
}
void OAIUserInvitationModel::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIUserInvitationModel::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIUserInvitationModel::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QString OAIUserInvitationModel::getRoleName() const {
    return m_role_name;
}
void OAIUserInvitationModel::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIUserInvitationModel::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIUserInvitationModel::is_role_name_Valid() const{
    return m_role_name_isValid;
}

QString OAIUserInvitationModel::getUserInvitationId() const {
    return m_user_invitation_id;
}
void OAIUserInvitationModel::setUserInvitationId(const QString &user_invitation_id) {
    m_user_invitation_id = user_invitation_id;
    m_user_invitation_id_isSet = true;
}

bool OAIUserInvitationModel::is_user_invitation_id_Set() const{
    return m_user_invitation_id_isSet;
}

bool OAIUserInvitationModel::is_user_invitation_id_Valid() const{
    return m_user_invitation_id_isValid;
}

bool OAIUserInvitationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInvitationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_created_isValid && m_email_isValid && m_role_id_isValid && m_user_invitation_id_isValid && true;
}

} // namespace OpenAPI
