/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISessionUserModel.h
 *
 * 
 */

#ifndef OAISessionUserModel_H
#define OAISessionUserModel_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISessionUserModel : public OAIObject {
public:
    OAISessionUserModel();
    OAISessionUserModel(QString json);
    ~OAISessionUserModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getBitBucketUsername() const;
    void setBitBucketUsername(const QString &bit_bucket_username);
    bool is_bit_bucket_username_Set() const;
    bool is_bit_bucket_username_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    QString getGitHubUsername() const;
    void setGitHubUsername(const QString &git_hub_username);
    bool is_git_hub_username_Set() const;
    bool is_git_hub_username_Valid() const;

    QString getGitLabUserId() const;
    void setGitLabUserId(const QString &git_lab_user_id);
    bool is_git_lab_user_id_Set() const;
    bool is_git_lab_user_id_Valid() const;

    QString getGravatarHash() const;
    void setGravatarHash(const QString &gravatar_hash);
    bool is_gravatar_hash_Set() const;
    bool is_gravatar_hash_Valid() const;

    qint32 getPageSize() const;
    void setPageSize(const qint32 &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    bool isTwoFactorAuthEnabled() const;
    void setTwoFactorAuthEnabled(const bool &two_factor_auth_enabled);
    bool is_two_factor_auth_enabled_Set() const;
    bool is_two_factor_auth_enabled_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getVsoUsername() const;
    void setVsoUsername(const QString &vso_username);
    bool is_vso_username_Set() const;
    bool is_vso_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_bit_bucket_username;
    bool m_bit_bucket_username_isSet;
    bool m_bit_bucket_username_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    QString m_git_hub_username;
    bool m_git_hub_username_isSet;
    bool m_git_hub_username_isValid;

    QString m_git_lab_user_id;
    bool m_git_lab_user_id_isSet;
    bool m_git_lab_user_id_isValid;

    QString m_gravatar_hash;
    bool m_gravatar_hash_isSet;
    bool m_gravatar_hash_isValid;

    qint32 m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    bool m_two_factor_auth_enabled;
    bool m_two_factor_auth_enabled_isSet;
    bool m_two_factor_auth_enabled_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_vso_username;
    bool m_vso_username_isSet;
    bool m_vso_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISessionUserModel)

#endif // OAISessionUserModel_H
