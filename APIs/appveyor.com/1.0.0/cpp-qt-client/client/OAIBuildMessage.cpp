/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildMessage::OAIBuildMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildMessage::OAIBuildMessage() {
    this->initializeModel();
}

OAIBuildMessage::~OAIBuildMessage() {}

void OAIBuildMessage::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIBuildMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildMessage::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIBuildMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIBuildMessageCategory OAIBuildMessage::getCategory() const {
    return m_category;
}
void OAIBuildMessage::setCategory(const OAIBuildMessageCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBuildMessage::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBuildMessage::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIBuildMessage::getCreated() const {
    return m_created;
}
void OAIBuildMessage::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIBuildMessage::is_created_Set() const{
    return m_created_isSet;
}

bool OAIBuildMessage::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIBuildMessage::getMessage() const {
    return m_message;
}
void OAIBuildMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBuildMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBuildMessage::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIBuildMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
