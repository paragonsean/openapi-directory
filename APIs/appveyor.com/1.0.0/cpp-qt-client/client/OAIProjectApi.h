/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApi_H
#define OAI_OAIProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEncryptRequest.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIProject.h"
#include "OAIProjectAddition.h"
#include "OAIProjectBuildNumberUpdate.h"
#include "OAIProjectBuildResults.h"
#include "OAIProjectDeploymentsResults.h"
#include "OAIProjectHistory.h"
#include "OAIProjectSettingsResults.h"
#include "OAIProjectWithConfiguration.h"
#include "OAIStoredNameValue.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApi(const int timeOut = 0);
    ~OAIProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIProjectAddition [required]
    */
    virtual void addProject(const OAIProjectAddition &body);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void deleteProject(const QString &account_name, const QString &project_slug);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void deleteProjectBuildCache(const QString &account_name, const QString &project_slug);

    /**
    * @param[in]  body OAIEncryptRequest [required]
    */
    virtual void encryptValue(const OAIEncryptRequest &body);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  artifact_file_name QString [required]
    * @param[in]  branch QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  job QString [optional]
    * @param[in]  all bool [optional]
    * @param[in]  pr bool [optional]
    */
    virtual void getProjectArtifact(const QString &account_name, const QString &project_slug, const QString &artifact_file_name, const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pr = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  status_badge_id QString [required]
    * @param[in]  build_branch QString [required]
    * @param[in]  svg bool [optional]
    * @param[in]  retina bool [optional]
    * @param[in]  passing_text QString [optional]
    * @param[in]  failing_text QString [optional]
    * @param[in]  pending_text QString [optional]
    */
    virtual void getProjectBranchStatusBadge(const QString &status_badge_id, const QString &build_branch, const ::OpenAPI::OptionalParam<bool> &svg = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &retina = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passing_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &failing_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pending_text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  build_version QString [required]
    */
    virtual void getProjectBuildByVersion(const QString &account_name, const QString &project_slug, const QString &build_version);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  records_number qint32 [required]
    */
    virtual void getProjectDeployments(const QString &account_name, const QString &project_slug, const qint32 &records_number);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void getProjectEnvironmentVariables(const QString &account_name, const QString &project_slug);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  records_number qint32 [required]
    * @param[in]  start_build_id qint32 [optional]
    * @param[in]  branch QString [optional]
    */
    virtual void getProjectHistory(const QString &account_name, const QString &project_slug, const qint32 &records_number, const ::OpenAPI::OptionalParam<qint32> &start_build_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void getProjectLastBuild(const QString &account_name, const QString &project_slug);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  build_branch QString [required]
    */
    virtual void getProjectLastBuildBranch(const QString &account_name, const QString &project_slug, const QString &build_branch);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void getProjectSettings(const QString &account_name, const QString &project_slug);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void getProjectSettingsYaml(const QString &account_name, const QString &project_slug);

    /**
    * @param[in]  status_badge_id QString [required]
    * @param[in]  svg bool [optional]
    * @param[in]  retina bool [optional]
    * @param[in]  passing_text QString [optional]
    * @param[in]  failing_text QString [optional]
    * @param[in]  pending_text QString [optional]
    */
    virtual void getProjectStatusBadge(const QString &status_badge_id, const ::OpenAPI::OptionalParam<bool> &svg = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &retina = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passing_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &failing_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pending_text = ::OpenAPI::OptionalParam<QString>());


    virtual void getProjects();

    /**
    * @param[in]  badge_repo_provider QString [required]
    * @param[in]  repo_account_name QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  branch QString [optional]
    * @param[in]  svg bool [optional]
    * @param[in]  retina bool [optional]
    * @param[in]  passing_text QString [optional]
    * @param[in]  failing_text QString [optional]
    * @param[in]  pending_text QString [optional]
    */
    virtual void getPublicProjectStatusBadge(const QString &badge_repo_provider, const QString &repo_account_name, const QString &repo_slug, const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &svg = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &retina = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &passing_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &failing_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pending_text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIProjectWithConfiguration [required]
    */
    virtual void updateProject(const OAIProjectWithConfiguration &body);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  body OAIProjectBuildNumberUpdate [required]
    */
    virtual void updateProjectBuildNumber(const QString &account_name, const QString &project_slug, const OAIProjectBuildNumberUpdate &body);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  body QList<OAIStoredNameValue> [required]
    */
    virtual void updateProjectEnvironmentVariables(const QString &account_name, const QString &project_slug, const QList<OAIStoredNameValue> &body);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  body OAIHttpFileElement [required]
    */
    virtual void updateProjectSettingsYaml(const QString &account_name, const QString &project_slug, const OAIHttpFileElement &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectBuildCacheCallback(OAIHttpRequestWorker *worker);
    void encryptValueCallback(OAIHttpRequestWorker *worker);
    void getProjectArtifactCallback(OAIHttpRequestWorker *worker);
    void getProjectBranchStatusBadgeCallback(OAIHttpRequestWorker *worker);
    void getProjectBuildByVersionCallback(OAIHttpRequestWorker *worker);
    void getProjectDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getProjectEnvironmentVariablesCallback(OAIHttpRequestWorker *worker);
    void getProjectHistoryCallback(OAIHttpRequestWorker *worker);
    void getProjectLastBuildCallback(OAIHttpRequestWorker *worker);
    void getProjectLastBuildBranchCallback(OAIHttpRequestWorker *worker);
    void getProjectSettingsCallback(OAIHttpRequestWorker *worker);
    void getProjectSettingsYamlCallback(OAIHttpRequestWorker *worker);
    void getProjectStatusBadgeCallback(OAIHttpRequestWorker *worker);
    void getProjectsCallback(OAIHttpRequestWorker *worker);
    void getPublicProjectStatusBadgeCallback(OAIHttpRequestWorker *worker);
    void updateProjectCallback(OAIHttpRequestWorker *worker);
    void updateProjectBuildNumberCallback(OAIHttpRequestWorker *worker);
    void updateProjectEnvironmentVariablesCallback(OAIHttpRequestWorker *worker);
    void updateProjectSettingsYamlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addProjectSignal(OAIProject summary);
    void deleteProjectSignal();
    void deleteProjectBuildCacheSignal();
    void encryptValueSignal(QString summary);
    void getProjectArtifactSignal(OAIHttpFileElement summary);
    void getProjectBranchStatusBadgeSignal(OAIHttpFileElement summary);
    void getProjectBuildByVersionSignal(OAIProjectBuildResults summary);
    void getProjectDeploymentsSignal(OAIProjectDeploymentsResults summary);
    void getProjectEnvironmentVariablesSignal(QList<OAIStoredNameValue> summary);
    void getProjectHistorySignal(OAIProjectHistory summary);
    void getProjectLastBuildSignal(OAIProjectBuildResults summary);
    void getProjectLastBuildBranchSignal(OAIProjectBuildResults summary);
    void getProjectSettingsSignal(OAIProjectSettingsResults summary);
    void getProjectSettingsYamlSignal(QString summary);
    void getProjectStatusBadgeSignal(OAIHttpFileElement summary);
    void getProjectsSignal(QList<OAIProject> summary);
    void getPublicProjectStatusBadgeSignal(OAIHttpFileElement summary);
    void updateProjectSignal();
    void updateProjectBuildNumberSignal();
    void updateProjectEnvironmentVariablesSignal();
    void updateProjectSettingsYamlSignal();


    void addProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectBuildCacheSignalFull(OAIHttpRequestWorker *worker);
    void encryptValueSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getProjectArtifactSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getProjectBranchStatusBadgeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getProjectBuildByVersionSignalFull(OAIHttpRequestWorker *worker, OAIProjectBuildResults summary);
    void getProjectDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIProjectDeploymentsResults summary);
    void getProjectEnvironmentVariablesSignalFull(OAIHttpRequestWorker *worker, QList<OAIStoredNameValue> summary);
    void getProjectHistorySignalFull(OAIHttpRequestWorker *worker, OAIProjectHistory summary);
    void getProjectLastBuildSignalFull(OAIHttpRequestWorker *worker, OAIProjectBuildResults summary);
    void getProjectLastBuildBranchSignalFull(OAIHttpRequestWorker *worker, OAIProjectBuildResults summary);
    void getProjectSettingsSignalFull(OAIHttpRequestWorker *worker, OAIProjectSettingsResults summary);
    void getProjectSettingsYamlSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getProjectStatusBadgeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void getPublicProjectStatusBadgeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void updateProjectSignalFull(OAIHttpRequestWorker *worker);
    void updateProjectBuildNumberSignalFull(OAIHttpRequestWorker *worker);
    void updateProjectEnvironmentVariablesSignalFull(OAIHttpRequestWorker *worker);
    void updateProjectSettingsYamlSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addProjectSignalError() instead")
    void addProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectBuildCacheSignalError() instead")
    void deleteProjectBuildCacheSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectBuildCacheSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptValueSignalError() instead")
    void encryptValueSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptValueSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectArtifactSignalError() instead")
    void getProjectArtifactSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectArtifactSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectBranchStatusBadgeSignalError() instead")
    void getProjectBranchStatusBadgeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectBranchStatusBadgeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectBuildByVersionSignalError() instead")
    void getProjectBuildByVersionSignalE(OAIProjectBuildResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectBuildByVersionSignalError(OAIProjectBuildResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectDeploymentsSignalError() instead")
    void getProjectDeploymentsSignalE(OAIProjectDeploymentsResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectDeploymentsSignalError(OAIProjectDeploymentsResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectEnvironmentVariablesSignalError() instead")
    void getProjectEnvironmentVariablesSignalE(QList<OAIStoredNameValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectEnvironmentVariablesSignalError(QList<OAIStoredNameValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectHistorySignalError() instead")
    void getProjectHistorySignalE(OAIProjectHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectHistorySignalError(OAIProjectHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectLastBuildSignalError() instead")
    void getProjectLastBuildSignalE(OAIProjectBuildResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectLastBuildSignalError(OAIProjectBuildResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectLastBuildBranchSignalError() instead")
    void getProjectLastBuildBranchSignalE(OAIProjectBuildResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectLastBuildBranchSignalError(OAIProjectBuildResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSettingsSignalError() instead")
    void getProjectSettingsSignalE(OAIProjectSettingsResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSettingsSignalError(OAIProjectSettingsResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSettingsYamlSignalError() instead")
    void getProjectSettingsYamlSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSettingsYamlSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatusBadgeSignalError() instead")
    void getProjectStatusBadgeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatusBadgeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalError() instead")
    void getProjectsSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicProjectStatusBadgeSignalError() instead")
    void getPublicProjectStatusBadgeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicProjectStatusBadgeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalError() instead")
    void updateProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectBuildNumberSignalError() instead")
    void updateProjectBuildNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectBuildNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectEnvironmentVariablesSignalError() instead")
    void updateProjectEnvironmentVariablesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectEnvironmentVariablesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSettingsYamlSignalError() instead")
    void updateProjectSettingsYamlSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSettingsYamlSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addProjectSignalErrorFull() instead")
    void addProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectBuildCacheSignalErrorFull() instead")
    void deleteProjectBuildCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectBuildCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptValueSignalErrorFull() instead")
    void encryptValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectArtifactSignalErrorFull() instead")
    void getProjectArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectBranchStatusBadgeSignalErrorFull() instead")
    void getProjectBranchStatusBadgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectBranchStatusBadgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectBuildByVersionSignalErrorFull() instead")
    void getProjectBuildByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectBuildByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectDeploymentsSignalErrorFull() instead")
    void getProjectDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectEnvironmentVariablesSignalErrorFull() instead")
    void getProjectEnvironmentVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectEnvironmentVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectHistorySignalErrorFull() instead")
    void getProjectHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectLastBuildSignalErrorFull() instead")
    void getProjectLastBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectLastBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectLastBuildBranchSignalErrorFull() instead")
    void getProjectLastBuildBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectLastBuildBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSettingsSignalErrorFull() instead")
    void getProjectSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSettingsYamlSignalErrorFull() instead")
    void getProjectSettingsYamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSettingsYamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatusBadgeSignalErrorFull() instead")
    void getProjectStatusBadgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatusBadgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalErrorFull() instead")
    void getProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicProjectStatusBadgeSignalErrorFull() instead")
    void getPublicProjectStatusBadgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicProjectStatusBadgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalErrorFull() instead")
    void updateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectBuildNumberSignalErrorFull() instead")
    void updateProjectBuildNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectBuildNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectEnvironmentVariablesSignalErrorFull() instead")
    void updateProjectEnvironmentVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectEnvironmentVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSettingsYamlSignalErrorFull() instead")
    void updateProjectSettingsYamlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSettingsYamlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
