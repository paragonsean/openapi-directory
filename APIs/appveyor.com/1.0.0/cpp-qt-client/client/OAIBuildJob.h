/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildJob.h
 *
 * 
 */

#ifndef OAIBuildJob_H
#define OAIBuildJob_H

#include <QJsonObject>

#include "OAIOSType.h"
#include "OAIStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBuildJob : public OAIObject {
public:
    OAIBuildJob();
    OAIBuildJob(QString json);
    ~OAIBuildJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QDateTime getFinished() const;
    void setFinished(const QDateTime &finished);
    bool is_finished_Set() const;
    bool is_finished_Valid() const;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getStarted() const;
    void setStarted(const QDateTime &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool isAllowFailure() const;
    void setAllowFailure(const bool &allow_failure);
    bool is_allow_failure_Set() const;
    bool is_allow_failure_Valid() const;

    qint32 getArtifactsCount() const;
    void setArtifactsCount(const qint32 &artifacts_count);
    bool is_artifacts_count_Set() const;
    bool is_artifacts_count_Valid() const;

    qint32 getCompilationErrorsCount() const;
    void setCompilationErrorsCount(const qint32 &compilation_errors_count);
    bool is_compilation_errors_count_Set() const;
    bool is_compilation_errors_count_Valid() const;

    qint32 getCompilationMessagesCount() const;
    void setCompilationMessagesCount(const qint32 &compilation_messages_count);
    bool is_compilation_messages_count_Set() const;
    bool is_compilation_messages_count_Valid() const;

    qint32 getCompilationWarningsCount() const;
    void setCompilationWarningsCount(const qint32 &compilation_warnings_count);
    bool is_compilation_warnings_count_Set() const;
    bool is_compilation_warnings_count_Valid() const;

    qint32 getFailedTestsCount() const;
    void setFailedTestsCount(const qint32 &failed_tests_count);
    bool is_failed_tests_count_Set() const;
    bool is_failed_tests_count_Valid() const;

    qint32 getMessagesCount() const;
    void setMessagesCount(const qint32 &messages_count);
    bool is_messages_count_Set() const;
    bool is_messages_count_Valid() const;

    OAIOSType getOsType() const;
    void setOsType(const OAIOSType &os_type);
    bool is_os_type_Set() const;
    bool is_os_type_Valid() const;

    qint32 getPassedTestsCount() const;
    void setPassedTestsCount(const qint32 &passed_tests_count);
    bool is_passed_tests_count_Set() const;
    bool is_passed_tests_count_Valid() const;

    qint32 getTestsCount() const;
    void setTestsCount(const qint32 &tests_count);
    bool is_tests_count_Set() const;
    bool is_tests_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QDateTime m_finished;
    bool m_finished_isSet;
    bool m_finished_isValid;

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_allow_failure;
    bool m_allow_failure_isSet;
    bool m_allow_failure_isValid;

    qint32 m_artifacts_count;
    bool m_artifacts_count_isSet;
    bool m_artifacts_count_isValid;

    qint32 m_compilation_errors_count;
    bool m_compilation_errors_count_isSet;
    bool m_compilation_errors_count_isValid;

    qint32 m_compilation_messages_count;
    bool m_compilation_messages_count_isSet;
    bool m_compilation_messages_count_isValid;

    qint32 m_compilation_warnings_count;
    bool m_compilation_warnings_count_isSet;
    bool m_compilation_warnings_count_isValid;

    qint32 m_failed_tests_count;
    bool m_failed_tests_count_isSet;
    bool m_failed_tests_count_isValid;

    qint32 m_messages_count;
    bool m_messages_count_isSet;
    bool m_messages_count_isValid;

    OAIOSType m_os_type;
    bool m_os_type_isSet;
    bool m_os_type_isValid;

    qint32 m_passed_tests_count;
    bool m_passed_tests_count_isSet;
    bool m_passed_tests_count_isValid;

    qint32 m_tests_count;
    bool m_tests_count_isSet;
    bool m_tests_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildJob)

#endif // OAIBuildJob_H
