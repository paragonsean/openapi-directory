/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoleApi_H
#define OAI_OAIRoleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIRole.h"
#include "OAIRoleAddition.h"
#include "OAIRoleWithGroups.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoleApi : public QObject {
    Q_OBJECT

public:
    OAIRoleApi(const int timeOut = 0);
    ~OAIRoleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIRoleAddition [required]
    */
    virtual void addRole(const OAIRoleAddition &body);

    /**
    * @param[in]  role_id qint32 [required]
    */
    virtual void deleteRole(const qint32 &role_id);

    /**
    * @param[in]  role_id qint32 [required]
    */
    virtual void getRole(const qint32 &role_id);


    virtual void getRoles();

    /**
    * @param[in]  body OAIRoleWithGroups [required]
    */
    virtual void updateRole(const OAIRoleWithGroups &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addRoleCallback(OAIHttpRequestWorker *worker);
    void deleteRoleCallback(OAIHttpRequestWorker *worker);
    void getRoleCallback(OAIHttpRequestWorker *worker);
    void getRolesCallback(OAIHttpRequestWorker *worker);
    void updateRoleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addRoleSignal(OAIRoleWithGroups summary);
    void deleteRoleSignal();
    void getRoleSignal(OAIRoleWithGroups summary);
    void getRolesSignal(QList<OAIRole> summary);
    void updateRoleSignal(OAIRoleWithGroups summary);


    void addRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleWithGroups summary);
    void deleteRoleSignalFull(OAIHttpRequestWorker *worker);
    void getRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleWithGroups summary);
    void getRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRole> summary);
    void updateRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleWithGroups summary);

    Q_DECL_DEPRECATED_X("Use addRoleSignalError() instead")
    void addRoleSignalE(OAIRoleWithGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addRoleSignalError(OAIRoleWithGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleSignalError() instead")
    void deleteRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoleSignalError() instead")
    void getRoleSignalE(OAIRoleWithGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoleSignalError(OAIRoleWithGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRolesSignalError() instead")
    void getRolesSignalE(QList<OAIRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRolesSignalError(QList<OAIRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoleSignalError() instead")
    void updateRoleSignalE(OAIRoleWithGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleSignalError(OAIRoleWithGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addRoleSignalErrorFull() instead")
    void addRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleSignalErrorFull() instead")
    void deleteRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoleSignalErrorFull() instead")
    void getRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRolesSignalErrorFull() instead")
    void getRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoleSignalErrorFull() instead")
    void updateRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
