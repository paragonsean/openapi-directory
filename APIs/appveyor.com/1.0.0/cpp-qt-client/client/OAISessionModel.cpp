/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionModel::OAISessionModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionModel::OAISessionModel() {
    this->initializeModel();
}

OAISessionModel::~OAISessionModel() {}

void OAISessionModel::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_setup_required_isSet = false;
    m_setup_required_isValid = false;

    m_two_factor_auth_required_isSet = false;
    m_two_factor_auth_required_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAISessionModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionModel::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_setup_required_isValid = ::OpenAPI::fromJsonValue(m_setup_required, json[QString("setupRequired")]);
    m_setup_required_isSet = !json[QString("setupRequired")].isNull() && m_setup_required_isValid;

    m_two_factor_auth_required_isValid = ::OpenAPI::fromJsonValue(m_two_factor_auth_required, json[QString("twoFactorAuthRequired")]);
    m_two_factor_auth_required_isSet = !json[QString("twoFactorAuthRequired")].isNull() && m_two_factor_auth_required_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAISessionModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionModel::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_setup_required_isSet) {
        obj.insert(QString("setupRequired"), ::OpenAPI::toJsonValue(m_setup_required));
    }
    if (m_two_factor_auth_required_isSet) {
        obj.insert(QString("twoFactorAuthRequired"), ::OpenAPI::toJsonValue(m_two_factor_auth_required));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAISessionUserAccountModel> OAISessionModel::getAccounts() const {
    return m_accounts;
}
void OAISessionModel::setAccounts(const QList<OAISessionUserAccountModel> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAISessionModel::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAISessionModel::is_accounts_Valid() const{
    return m_accounts_isValid;
}

bool OAISessionModel::isSetupRequired() const {
    return m_setup_required;
}
void OAISessionModel::setSetupRequired(const bool &setup_required) {
    m_setup_required = setup_required;
    m_setup_required_isSet = true;
}

bool OAISessionModel::is_setup_required_Set() const{
    return m_setup_required_isSet;
}

bool OAISessionModel::is_setup_required_Valid() const{
    return m_setup_required_isValid;
}

bool OAISessionModel::isTwoFactorAuthRequired() const {
    return m_two_factor_auth_required;
}
void OAISessionModel::setTwoFactorAuthRequired(const bool &two_factor_auth_required) {
    m_two_factor_auth_required = two_factor_auth_required;
    m_two_factor_auth_required_isSet = true;
}

bool OAISessionModel::is_two_factor_auth_required_Set() const{
    return m_two_factor_auth_required_isSet;
}

bool OAISessionModel::is_two_factor_auth_required_Valid() const{
    return m_two_factor_auth_required_isValid;
}

OAISessionUserModel OAISessionModel::getUser() const {
    return m_user;
}
void OAISessionModel::setUser(const OAISessionUserModel &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISessionModel::is_user_Set() const{
    return m_user_isSet;
}

bool OAISessionModel::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISessionModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_auth_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
