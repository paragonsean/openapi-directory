/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleWithGroups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleWithGroups::OAIRoleWithGroups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleWithGroups::OAIRoleWithGroups() {
    this->initializeModel();
}

OAIRoleWithGroups::~OAIRoleWithGroups() {}

void OAIRoleWithGroups::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_is_system_isSet = false;
    m_is_system_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;
}

void OAIRoleWithGroups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleWithGroups::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_is_system_isValid = ::OpenAPI::fromJsonValue(m_is_system, json[QString("isSystem")]);
    m_is_system_isSet = !json[QString("isSystem")].isNull() && m_is_system_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;
}

QString OAIRoleWithGroups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleWithGroups::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_is_system_isSet) {
        obj.insert(QString("isSystem"), ::OpenAPI::toJsonValue(m_is_system));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    return obj;
}

QDateTime OAIRoleWithGroups::getCreated() const {
    return m_created;
}
void OAIRoleWithGroups::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRoleWithGroups::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRoleWithGroups::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIRoleWithGroups::getUpdated() const {
    return m_updated;
}
void OAIRoleWithGroups::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIRoleWithGroups::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIRoleWithGroups::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIRoleWithGroups::isIsSystem() const {
    return m_is_system;
}
void OAIRoleWithGroups::setIsSystem(const bool &is_system) {
    m_is_system = is_system;
    m_is_system_isSet = true;
}

bool OAIRoleWithGroups::is_is_system_Set() const{
    return m_is_system_isSet;
}

bool OAIRoleWithGroups::is_is_system_Valid() const{
    return m_is_system_isValid;
}

QString OAIRoleWithGroups::getName() const {
    return m_name;
}
void OAIRoleWithGroups::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleWithGroups::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleWithGroups::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRoleWithGroups::getRoleId() const {
    return m_role_id;
}
void OAIRoleWithGroups::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIRoleWithGroups::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIRoleWithGroups::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QList<OAIGroupPermissions> OAIRoleWithGroups::getGroups() const {
    return m_groups;
}
void OAIRoleWithGroups::setGroups(const QList<OAIGroupPermissions> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIRoleWithGroups::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIRoleWithGroups::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIRoleWithGroups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleWithGroups::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_role_id_isValid && true;
}

} // namespace OpenAPI
