/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectBuildResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectBuildResults::OAIProjectBuildResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectBuildResults::OAIProjectBuildResults() {
    this->initializeModel();
}

OAIProjectBuildResults::~OAIProjectBuildResults() {}

void OAIProjectBuildResults::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIProjectBuildResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectBuildResults::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIProjectBuildResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectBuildResults::asJsonObject() const {
    QJsonObject obj;
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

OAIBuild OAIProjectBuildResults::getBuild() const {
    return m_build;
}
void OAIProjectBuildResults::setBuild(const OAIBuild &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIProjectBuildResults::is_build_Set() const{
    return m_build_isSet;
}

bool OAIProjectBuildResults::is_build_Valid() const{
    return m_build_isValid;
}

OAIProject OAIProjectBuildResults::getProject() const {
    return m_project;
}
void OAIProjectBuildResults::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectBuildResults::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectBuildResults::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIProjectBuildResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectBuildResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
