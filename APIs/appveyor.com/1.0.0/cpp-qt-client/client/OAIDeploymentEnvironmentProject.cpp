/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironmentProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironmentProject::OAIDeploymentEnvironmentProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironmentProject::OAIDeploymentEnvironmentProject() {
    this->initializeModel();
}

OAIDeploymentEnvironmentProject::~OAIDeploymentEnvironmentProject() {}

void OAIDeploymentEnvironmentProject::initializeModel() {

    m_is_selected_isSet = false;
    m_is_selected_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAIDeploymentEnvironmentProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironmentProject::fromJsonObject(QJsonObject json) {

    m_is_selected_isValid = ::OpenAPI::fromJsonValue(m_is_selected, json[QString("isSelected")]);
    m_is_selected_isSet = !json[QString("isSelected")].isNull() && m_is_selected_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;
}

QString OAIDeploymentEnvironmentProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironmentProject::asJsonObject() const {
    QJsonObject obj;
    if (m_is_selected_isSet) {
        obj.insert(QString("isSelected"), ::OpenAPI::toJsonValue(m_is_selected));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

bool OAIDeploymentEnvironmentProject::isIsSelected() const {
    return m_is_selected;
}
void OAIDeploymentEnvironmentProject::setIsSelected(const bool &is_selected) {
    m_is_selected = is_selected;
    m_is_selected_isSet = true;
}

bool OAIDeploymentEnvironmentProject::is_is_selected_Set() const{
    return m_is_selected_isSet;
}

bool OAIDeploymentEnvironmentProject::is_is_selected_Valid() const{
    return m_is_selected_isValid;
}

QString OAIDeploymentEnvironmentProject::getName() const {
    return m_name;
}
void OAIDeploymentEnvironmentProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentEnvironmentProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentEnvironmentProject::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDeploymentEnvironmentProject::getProjectId() const {
    return m_project_id;
}
void OAIDeploymentEnvironmentProject::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIDeploymentEnvironmentProject::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIDeploymentEnvironmentProject::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIDeploymentEnvironmentProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironmentProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_selected_isValid && m_name_isValid && m_project_id_isValid && true;
}

} // namespace OpenAPI
