/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINuGetFeed.h
 *
 * 
 */

#ifndef OAINuGetFeed_H
#define OAINuGetFeed_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINuGetFeed : public OAIObject {
public:
    OAINuGetFeed();
    OAINuGetFeed(QString json);
    ~OAINuGetFeed() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    qint32 getAccountId() const;
    void setAccountId(const qint32 &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsPrivateProject() const;
    void setIsPrivateProject(const bool &is_private_project);
    bool is_is_private_project_Set() const;
    bool is_is_private_project_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNuGetFeedId() const;
    void setNuGetFeedId(const qint32 &nu_get_feed_id);
    bool is_nu_get_feed_id_Set() const;
    bool is_nu_get_feed_id_Valid() const;

    qint32 getProjectId() const;
    void setProjectId(const qint32 &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    bool isPublishingEnabled() const;
    void setPublishingEnabled(const bool &publishing_enabled);
    bool is_publishing_enabled_Set() const;
    bool is_publishing_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    qint32 m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_private_project;
    bool m_is_private_project_isSet;
    bool m_is_private_project_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_nu_get_feed_id;
    bool m_nu_get_feed_id_isSet;
    bool m_nu_get_feed_id_isValid;

    qint32 m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    bool m_publishing_enabled;
    bool m_publishing_enabled_isSet;
    bool m_publishing_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINuGetFeed)

#endif // OAINuGetFeed_H
