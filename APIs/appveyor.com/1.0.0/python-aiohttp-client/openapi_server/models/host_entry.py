# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HostEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, ip: str=None):
        """HostEntry - a model defined in OpenAPI

        :param host: The host of this HostEntry.
        :param ip: The ip of this HostEntry.
        """
        self.openapi_types = {
            'host': str,
            'ip': str
        }

        self.attribute_map = {
            'host': 'host',
            'ip': 'ip'
        }

        self._host = host
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostEntry of this HostEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this HostEntry.


        :return: The host of this HostEntry.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this HostEntry.


        :param host: The host of this HostEntry.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")
        if host is not None and len(host) < 1:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")

        self._host = host

    @property
    def ip(self):
        """Gets the ip of this HostEntry.


        :return: The ip of this HostEntry.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this HostEntry.


        :param ip: The ip of this HostEntry.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")
        if ip is not None and len(ip) < 1:
            raise ValueError("Invalid value for `ip`, length must be greater than or equal to `1`")

        self._ip = ip
