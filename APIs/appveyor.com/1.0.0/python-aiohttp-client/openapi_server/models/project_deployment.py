# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment import Deployment
from openapi_server.models.project import Project
from openapi_server import util


class ProjectDeployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment: Deployment=None, project: Project=None):
        """ProjectDeployment - a model defined in OpenAPI

        :param deployment: The deployment of this ProjectDeployment.
        :param project: The project of this ProjectDeployment.
        """
        self.openapi_types = {
            'deployment': Deployment,
            'project': Project
        }

        self.attribute_map = {
            'deployment': 'deployment',
            'project': 'project'
        }

        self._deployment = deployment
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectDeployment of this ProjectDeployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment(self):
        """Gets the deployment of this ProjectDeployment.


        :return: The deployment of this ProjectDeployment.
        :rtype: Deployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this ProjectDeployment.


        :param deployment: The deployment of this ProjectDeployment.
        :type deployment: Deployment
        """
        if deployment is None:
            raise ValueError("Invalid value for `deployment`, must not be `None`")

        self._deployment = deployment

    @property
    def project(self):
        """Gets the project of this ProjectDeployment.


        :return: The project of this ProjectDeployment.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectDeployment.


        :param project: The project of this ProjectDeployment.
        :type project: Project
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project
