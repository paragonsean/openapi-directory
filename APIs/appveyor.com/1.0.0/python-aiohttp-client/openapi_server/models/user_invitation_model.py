# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserInvitationModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, account_name: str=None, created: datetime=None, email: str=None, role_id: int=None, role_name: str=None, user_invitation_id: str=None):
        """UserInvitationModel - a model defined in OpenAPI

        :param account_id: The account_id of this UserInvitationModel.
        :param account_name: The account_name of this UserInvitationModel.
        :param created: The created of this UserInvitationModel.
        :param email: The email of this UserInvitationModel.
        :param role_id: The role_id of this UserInvitationModel.
        :param role_name: The role_name of this UserInvitationModel.
        :param user_invitation_id: The user_invitation_id of this UserInvitationModel.
        """
        self.openapi_types = {
            'account_id': int,
            'account_name': str,
            'created': datetime,
            'email': str,
            'role_id': int,
            'role_name': str,
            'user_invitation_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'created': 'created',
            'email': 'email',
            'role_id': 'roleId',
            'role_name': 'roleName',
            'user_invitation_id': 'userInvitationId'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._created = created
        self._email = email
        self._role_id = role_id
        self._role_name = role_name
        self._user_invitation_id = user_invitation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInvitationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInvitationModel of this UserInvitationModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UserInvitationModel.


        :return: The account_id of this UserInvitationModel.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserInvitationModel.


        :param account_id: The account_id of this UserInvitationModel.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this UserInvitationModel.


        :return: The account_name of this UserInvitationModel.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UserInvitationModel.


        :param account_name: The account_name of this UserInvitationModel.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def created(self):
        """Gets the created of this UserInvitationModel.


        :return: The created of this UserInvitationModel.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserInvitationModel.


        :param created: The created of this UserInvitationModel.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def email(self):
        """Gets the email of this UserInvitationModel.


        :return: The email of this UserInvitationModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInvitationModel.


        :param email: The email of this UserInvitationModel.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def role_id(self):
        """Gets the role_id of this UserInvitationModel.


        :return: The role_id of this UserInvitationModel.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserInvitationModel.


        :param role_id: The role_id of this UserInvitationModel.
        :type role_id: int
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")
        if role_id is not None and role_id < 0:
            raise ValueError("Invalid value for `role_id`, must be a value greater than or equal to `0`")

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this UserInvitationModel.


        :return: The role_name of this UserInvitationModel.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this UserInvitationModel.


        :param role_name: The role_name of this UserInvitationModel.
        :type role_name: str
        """

        self._role_name = role_name

    @property
    def user_invitation_id(self):
        """Gets the user_invitation_id of this UserInvitationModel.


        :return: The user_invitation_id of this UserInvitationModel.
        :rtype: str
        """
        return self._user_invitation_id

    @user_invitation_id.setter
    def user_invitation_id(self, user_invitation_id):
        """Sets the user_invitation_id of this UserInvitationModel.


        :param user_invitation_id: The user_invitation_id of this UserInvitationModel.
        :type user_invitation_id: str
        """
        if user_invitation_id is None:
            raise ValueError("Invalid value for `user_invitation_id`, must not be `None`")
        if user_invitation_id is not None and len(user_invitation_id) < 1:
            raise ValueError("Invalid value for `user_invitation_id`, length must be greater than or equal to `1`")

        self._user_invitation_id = user_invitation_id
