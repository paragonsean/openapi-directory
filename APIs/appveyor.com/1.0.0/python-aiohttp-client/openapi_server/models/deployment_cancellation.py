# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentCancellation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_id: int=None):
        """DeploymentCancellation - a model defined in OpenAPI

        :param deployment_id: The deployment_id of this DeploymentCancellation.
        """
        self.openapi_types = {
            'deployment_id': int
        }

        self.attribute_map = {
            'deployment_id': 'deploymentId'
        }

        self._deployment_id = deployment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentCancellation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentCancellation of this DeploymentCancellation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_id(self):
        """Gets the deployment_id of this DeploymentCancellation.


        :return: The deployment_id of this DeploymentCancellation.
        :rtype: int
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this DeploymentCancellation.


        :param deployment_id: The deployment_id of this DeploymentCancellation.
        :type deployment_id: int
        """
        if deployment_id is None:
            raise ValueError("Invalid value for `deployment_id`, must not be `None`")
        if deployment_id is not None and deployment_id < 0:
            raise ValueError("Invalid value for `deployment_id`, must be a value greater than or equal to `0`")

        self._deployment_id = deployment_id
