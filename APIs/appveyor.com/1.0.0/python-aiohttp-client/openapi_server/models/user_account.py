# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, updated: datetime=None, account_id: int=None, account_name: str=None, email: str=None, full_name: str=None, is_collaborator: bool=None, is_owner: bool=None, page_size: int=None, password: str=None, role_id: int=None, role_name: str=None, two_factor_auth_enabled: bool=None, user_id: int=None):
        """UserAccount - a model defined in OpenAPI

        :param created: The created of this UserAccount.
        :param updated: The updated of this UserAccount.
        :param account_id: The account_id of this UserAccount.
        :param account_name: The account_name of this UserAccount.
        :param email: The email of this UserAccount.
        :param full_name: The full_name of this UserAccount.
        :param is_collaborator: The is_collaborator of this UserAccount.
        :param is_owner: The is_owner of this UserAccount.
        :param page_size: The page_size of this UserAccount.
        :param password: The password of this UserAccount.
        :param role_id: The role_id of this UserAccount.
        :param role_name: The role_name of this UserAccount.
        :param two_factor_auth_enabled: The two_factor_auth_enabled of this UserAccount.
        :param user_id: The user_id of this UserAccount.
        """
        self.openapi_types = {
            'created': datetime,
            'updated': datetime,
            'account_id': int,
            'account_name': str,
            'email': str,
            'full_name': str,
            'is_collaborator': bool,
            'is_owner': bool,
            'page_size': int,
            'password': str,
            'role_id': int,
            'role_name': str,
            'two_factor_auth_enabled': bool,
            'user_id': int
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'account_id': 'accountId',
            'account_name': 'accountName',
            'email': 'email',
            'full_name': 'fullName',
            'is_collaborator': 'isCollaborator',
            'is_owner': 'isOwner',
            'page_size': 'pageSize',
            'password': 'password',
            'role_id': 'roleId',
            'role_name': 'roleName',
            'two_factor_auth_enabled': 'twoFactorAuthEnabled',
            'user_id': 'userId'
        }

        self._created = created
        self._updated = updated
        self._account_id = account_id
        self._account_name = account_name
        self._email = email
        self._full_name = full_name
        self._is_collaborator = is_collaborator
        self._is_owner = is_owner
        self._page_size = page_size
        self._password = password
        self._role_id = role_id
        self._role_name = role_name
        self._two_factor_auth_enabled = two_factor_auth_enabled
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccount of this UserAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this UserAccount.


        :return: The created of this UserAccount.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserAccount.


        :param created: The created of this UserAccount.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this UserAccount.


        :return: The updated of this UserAccount.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this UserAccount.


        :param updated: The updated of this UserAccount.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def account_id(self):
        """Gets the account_id of this UserAccount.


        :return: The account_id of this UserAccount.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserAccount.


        :param account_id: The account_id of this UserAccount.
        :type account_id: int
        """
        if account_id is not None and account_id < 0:
            raise ValueError("Invalid value for `account_id`, must be a value greater than or equal to `0`")

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this UserAccount.


        :return: The account_name of this UserAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UserAccount.


        :param account_name: The account_name of this UserAccount.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def email(self):
        """Gets the email of this UserAccount.


        :return: The email of this UserAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserAccount.


        :param email: The email of this UserAccount.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this UserAccount.


        :return: The full_name of this UserAccount.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserAccount.


        :param full_name: The full_name of this UserAccount.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def is_collaborator(self):
        """Gets the is_collaborator of this UserAccount.


        :return: The is_collaborator of this UserAccount.
        :rtype: bool
        """
        return self._is_collaborator

    @is_collaborator.setter
    def is_collaborator(self, is_collaborator):
        """Sets the is_collaborator of this UserAccount.


        :param is_collaborator: The is_collaborator of this UserAccount.
        :type is_collaborator: bool
        """

        self._is_collaborator = is_collaborator

    @property
    def is_owner(self):
        """Gets the is_owner of this UserAccount.


        :return: The is_owner of this UserAccount.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this UserAccount.


        :param is_owner: The is_owner of this UserAccount.
        :type is_owner: bool
        """

        self._is_owner = is_owner

    @property
    def page_size(self):
        """Gets the page_size of this UserAccount.


        :return: The page_size of this UserAccount.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this UserAccount.


        :param page_size: The page_size of this UserAccount.
        :type page_size: int
        """
        if page_size is not None and page_size < 0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `0`")

        self._page_size = page_size

    @property
    def password(self):
        """Gets the password of this UserAccount.


        :return: The password of this UserAccount.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserAccount.


        :param password: The password of this UserAccount.
        :type password: str
        """
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def role_id(self):
        """Gets the role_id of this UserAccount.


        :return: The role_id of this UserAccount.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserAccount.


        :param role_id: The role_id of this UserAccount.
        :type role_id: int
        """
        if role_id is not None and role_id < 0:
            raise ValueError("Invalid value for `role_id`, must be a value greater than or equal to `0`")

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this UserAccount.


        :return: The role_name of this UserAccount.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this UserAccount.


        :param role_name: The role_name of this UserAccount.
        :type role_name: str
        """

        self._role_name = role_name

    @property
    def two_factor_auth_enabled(self):
        """Gets the two_factor_auth_enabled of this UserAccount.


        :return: The two_factor_auth_enabled of this UserAccount.
        :rtype: bool
        """
        return self._two_factor_auth_enabled

    @two_factor_auth_enabled.setter
    def two_factor_auth_enabled(self, two_factor_auth_enabled):
        """Sets the two_factor_auth_enabled of this UserAccount.


        :param two_factor_auth_enabled: The two_factor_auth_enabled of this UserAccount.
        :type two_factor_auth_enabled: bool
        """

        self._two_factor_auth_enabled = two_factor_auth_enabled

    @property
    def user_id(self):
        """Gets the user_id of this UserAccount.


        :return: The user_id of this UserAccount.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserAccount.


        :param user_id: The user_id of this UserAccount.
        :type user_id: int
        """
        if user_id is not None and user_id < 0:
            raise ValueError("Invalid value for `user_id`, must be a value greater than or equal to `0`")

        self._user_id = user_id
