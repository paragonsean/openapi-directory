# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_notification_frequency import BuildNotificationFrequency
from openapi_server.models.deployment_notification_frequency import DeploymentNotificationFrequency
from openapi_server import util


class UserAccountSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_build_notification: BuildNotificationFrequency=None, failed_deployment_notification: DeploymentNotificationFrequency=None, notify_when_build_status_changed_only: bool=False, notify_when_deployment_status_changed_only: bool=False, successful_build_notification: BuildNotificationFrequency=None, successful_deployment_notification: DeploymentNotificationFrequency=None):
        """UserAccountSettings - a model defined in OpenAPI

        :param failed_build_notification: The failed_build_notification of this UserAccountSettings.
        :param failed_deployment_notification: The failed_deployment_notification of this UserAccountSettings.
        :param notify_when_build_status_changed_only: The notify_when_build_status_changed_only of this UserAccountSettings.
        :param notify_when_deployment_status_changed_only: The notify_when_deployment_status_changed_only of this UserAccountSettings.
        :param successful_build_notification: The successful_build_notification of this UserAccountSettings.
        :param successful_deployment_notification: The successful_deployment_notification of this UserAccountSettings.
        """
        self.openapi_types = {
            'failed_build_notification': BuildNotificationFrequency,
            'failed_deployment_notification': DeploymentNotificationFrequency,
            'notify_when_build_status_changed_only': bool,
            'notify_when_deployment_status_changed_only': bool,
            'successful_build_notification': BuildNotificationFrequency,
            'successful_deployment_notification': DeploymentNotificationFrequency
        }

        self.attribute_map = {
            'failed_build_notification': 'failedBuildNotification',
            'failed_deployment_notification': 'failedDeploymentNotification',
            'notify_when_build_status_changed_only': 'notifyWhenBuildStatusChangedOnly',
            'notify_when_deployment_status_changed_only': 'notifyWhenDeploymentStatusChangedOnly',
            'successful_build_notification': 'successfulBuildNotification',
            'successful_deployment_notification': 'successfulDeploymentNotification'
        }

        self._failed_build_notification = failed_build_notification
        self._failed_deployment_notification = failed_deployment_notification
        self._notify_when_build_status_changed_only = notify_when_build_status_changed_only
        self._notify_when_deployment_status_changed_only = notify_when_deployment_status_changed_only
        self._successful_build_notification = successful_build_notification
        self._successful_deployment_notification = successful_deployment_notification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccountSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccountSettings of this UserAccountSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_build_notification(self):
        """Gets the failed_build_notification of this UserAccountSettings.


        :return: The failed_build_notification of this UserAccountSettings.
        :rtype: BuildNotificationFrequency
        """
        return self._failed_build_notification

    @failed_build_notification.setter
    def failed_build_notification(self, failed_build_notification):
        """Sets the failed_build_notification of this UserAccountSettings.


        :param failed_build_notification: The failed_build_notification of this UserAccountSettings.
        :type failed_build_notification: BuildNotificationFrequency
        """
        if failed_build_notification is None:
            raise ValueError("Invalid value for `failed_build_notification`, must not be `None`")

        self._failed_build_notification = failed_build_notification

    @property
    def failed_deployment_notification(self):
        """Gets the failed_deployment_notification of this UserAccountSettings.


        :return: The failed_deployment_notification of this UserAccountSettings.
        :rtype: DeploymentNotificationFrequency
        """
        return self._failed_deployment_notification

    @failed_deployment_notification.setter
    def failed_deployment_notification(self, failed_deployment_notification):
        """Sets the failed_deployment_notification of this UserAccountSettings.


        :param failed_deployment_notification: The failed_deployment_notification of this UserAccountSettings.
        :type failed_deployment_notification: DeploymentNotificationFrequency
        """
        if failed_deployment_notification is None:
            raise ValueError("Invalid value for `failed_deployment_notification`, must not be `None`")

        self._failed_deployment_notification = failed_deployment_notification

    @property
    def notify_when_build_status_changed_only(self):
        """Gets the notify_when_build_status_changed_only of this UserAccountSettings.

        Note that this value is `true` on user creation, but behaves as `false` when not specified on update. 

        :return: The notify_when_build_status_changed_only of this UserAccountSettings.
        :rtype: bool
        """
        return self._notify_when_build_status_changed_only

    @notify_when_build_status_changed_only.setter
    def notify_when_build_status_changed_only(self, notify_when_build_status_changed_only):
        """Sets the notify_when_build_status_changed_only of this UserAccountSettings.

        Note that this value is `true` on user creation, but behaves as `false` when not specified on update. 

        :param notify_when_build_status_changed_only: The notify_when_build_status_changed_only of this UserAccountSettings.
        :type notify_when_build_status_changed_only: bool
        """

        self._notify_when_build_status_changed_only = notify_when_build_status_changed_only

    @property
    def notify_when_deployment_status_changed_only(self):
        """Gets the notify_when_deployment_status_changed_only of this UserAccountSettings.

        Note that this value is `true` on user creation, but behaves as `false` when not specified on update. 

        :return: The notify_when_deployment_status_changed_only of this UserAccountSettings.
        :rtype: bool
        """
        return self._notify_when_deployment_status_changed_only

    @notify_when_deployment_status_changed_only.setter
    def notify_when_deployment_status_changed_only(self, notify_when_deployment_status_changed_only):
        """Sets the notify_when_deployment_status_changed_only of this UserAccountSettings.

        Note that this value is `true` on user creation, but behaves as `false` when not specified on update. 

        :param notify_when_deployment_status_changed_only: The notify_when_deployment_status_changed_only of this UserAccountSettings.
        :type notify_when_deployment_status_changed_only: bool
        """

        self._notify_when_deployment_status_changed_only = notify_when_deployment_status_changed_only

    @property
    def successful_build_notification(self):
        """Gets the successful_build_notification of this UserAccountSettings.


        :return: The successful_build_notification of this UserAccountSettings.
        :rtype: BuildNotificationFrequency
        """
        return self._successful_build_notification

    @successful_build_notification.setter
    def successful_build_notification(self, successful_build_notification):
        """Sets the successful_build_notification of this UserAccountSettings.


        :param successful_build_notification: The successful_build_notification of this UserAccountSettings.
        :type successful_build_notification: BuildNotificationFrequency
        """
        if successful_build_notification is None:
            raise ValueError("Invalid value for `successful_build_notification`, must not be `None`")

        self._successful_build_notification = successful_build_notification

    @property
    def successful_deployment_notification(self):
        """Gets the successful_deployment_notification of this UserAccountSettings.


        :return: The successful_deployment_notification of this UserAccountSettings.
        :rtype: DeploymentNotificationFrequency
        """
        return self._successful_deployment_notification

    @successful_deployment_notification.setter
    def successful_deployment_notification(self, successful_deployment_notification):
        """Sets the successful_deployment_notification of this UserAccountSettings.


        :param successful_deployment_notification: The successful_deployment_notification of this UserAccountSettings.
        :type successful_deployment_notification: DeploymentNotificationFrequency
        """
        if successful_deployment_notification is None:
            raise ValueError("Invalid value for `successful_deployment_notification`, must not be `None`")

        self._successful_deployment_notification = successful_deployment_notification
