# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_environment_settings import DeploymentEnvironmentSettings
from openapi_server.models.deployment_provider_type import DeploymentProviderType
from openapi_server import util


class DeploymentEnvironmentAddition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, provider: DeploymentProviderType=None, settings: DeploymentEnvironmentSettings=None):
        """DeploymentEnvironmentAddition - a model defined in OpenAPI

        :param name: The name of this DeploymentEnvironmentAddition.
        :param provider: The provider of this DeploymentEnvironmentAddition.
        :param settings: The settings of this DeploymentEnvironmentAddition.
        """
        self.openapi_types = {
            'name': str,
            'provider': DeploymentProviderType,
            'settings': DeploymentEnvironmentSettings
        }

        self.attribute_map = {
            'name': 'name',
            'provider': 'provider',
            'settings': 'settings'
        }

        self._name = name
        self._provider = provider
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentEnvironmentAddition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentEnvironmentAddition of this DeploymentEnvironmentAddition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DeploymentEnvironmentAddition.


        :return: The name of this DeploymentEnvironmentAddition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentEnvironmentAddition.


        :param name: The name of this DeploymentEnvironmentAddition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this DeploymentEnvironmentAddition.


        :return: The provider of this DeploymentEnvironmentAddition.
        :rtype: DeploymentProviderType
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DeploymentEnvironmentAddition.


        :param provider: The provider of this DeploymentEnvironmentAddition.
        :type provider: DeploymentProviderType
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def settings(self):
        """Gets the settings of this DeploymentEnvironmentAddition.


        :return: The settings of this DeploymentEnvironmentAddition.
        :rtype: DeploymentEnvironmentSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DeploymentEnvironmentAddition.


        :param settings: The settings of this DeploymentEnvironmentAddition.
        :type settings: DeploymentEnvironmentSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings
