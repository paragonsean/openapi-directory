# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentStartRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, build_job_id: str=None, build_version: str=None, environment_name: str=None, environment_variables: Dict[str, str]=None, project_slug: str=None):
        """DeploymentStartRequest - a model defined in OpenAPI

        :param account_name: The account_name of this DeploymentStartRequest.
        :param build_job_id: The build_job_id of this DeploymentStartRequest.
        :param build_version: The build_version of this DeploymentStartRequest.
        :param environment_name: The environment_name of this DeploymentStartRequest.
        :param environment_variables: The environment_variables of this DeploymentStartRequest.
        :param project_slug: The project_slug of this DeploymentStartRequest.
        """
        self.openapi_types = {
            'account_name': str,
            'build_job_id': str,
            'build_version': str,
            'environment_name': str,
            'environment_variables': Dict[str, str],
            'project_slug': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'build_job_id': 'buildJobId',
            'build_version': 'buildVersion',
            'environment_name': 'environmentName',
            'environment_variables': 'environmentVariables',
            'project_slug': 'projectSlug'
        }

        self._account_name = account_name
        self._build_job_id = build_job_id
        self._build_version = build_version
        self._environment_name = environment_name
        self._environment_variables = environment_variables
        self._project_slug = project_slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentStartRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentStartRequest of this DeploymentStartRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this DeploymentStartRequest.


        :return: The account_name of this DeploymentStartRequest.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DeploymentStartRequest.


        :param account_name: The account_name of this DeploymentStartRequest.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")
        if account_name is not None and len(account_name) < 1:
            raise ValueError("Invalid value for `account_name`, length must be greater than or equal to `1`")

        self._account_name = account_name

    @property
    def build_job_id(self):
        """Gets the build_job_id of this DeploymentStartRequest.

        Optional job id with artifacts if build contains multiple jobs.

        :return: The build_job_id of this DeploymentStartRequest.
        :rtype: str
        """
        return self._build_job_id

    @build_job_id.setter
    def build_job_id(self, build_job_id):
        """Sets the build_job_id of this DeploymentStartRequest.

        Optional job id with artifacts if build contains multiple jobs.

        :param build_job_id: The build_job_id of this DeploymentStartRequest.
        :type build_job_id: str
        """

        self._build_job_id = build_job_id

    @property
    def build_version(self):
        """Gets the build_version of this DeploymentStartRequest.

        Build to deploy

        :return: The build_version of this DeploymentStartRequest.
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this DeploymentStartRequest.

        Build to deploy

        :param build_version: The build_version of this DeploymentStartRequest.
        :type build_version: str
        """
        if build_version is None:
            raise ValueError("Invalid value for `build_version`, must not be `None`")
        if build_version is not None and len(build_version) < 1:
            raise ValueError("Invalid value for `build_version`, length must be greater than or equal to `1`")

        self._build_version = build_version

    @property
    def environment_name(self):
        """Gets the environment_name of this DeploymentStartRequest.


        :return: The environment_name of this DeploymentStartRequest.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this DeploymentStartRequest.


        :param environment_name: The environment_name of this DeploymentStartRequest.
        :type environment_name: str
        """
        if environment_name is None:
            raise ValueError("Invalid value for `environment_name`, must not be `None`")
        if environment_name is not None and len(environment_name) < 1:
            raise ValueError("Invalid value for `environment_name`, length must be greater than or equal to `1`")

        self._environment_name = environment_name

    @property
    def environment_variables(self):
        """Gets the environment_variables of this DeploymentStartRequest.


        :return: The environment_variables of this DeploymentStartRequest.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this DeploymentStartRequest.


        :param environment_variables: The environment_variables of this DeploymentStartRequest.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def project_slug(self):
        """Gets the project_slug of this DeploymentStartRequest.


        :return: The project_slug of this DeploymentStartRequest.
        :rtype: str
        """
        return self._project_slug

    @project_slug.setter
    def project_slug(self, project_slug):
        """Sets the project_slug of this DeploymentStartRequest.


        :param project_slug: The project_slug of this DeploymentStartRequest.
        :type project_slug: str
        """
        if project_slug is None:
            raise ValueError("Invalid value for `project_slug`, must not be `None`")
        if project_slug is not None and len(project_slug) < 1:
            raise ValueError("Invalid value for `project_slug`, length must be greater than or equal to `1`")

        self._project_slug = project_slug
