# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollaboratorUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_id: int=None, user_id: int=None):
        """CollaboratorUpdate - a model defined in OpenAPI

        :param role_id: The role_id of this CollaboratorUpdate.
        :param user_id: The user_id of this CollaboratorUpdate.
        """
        self.openapi_types = {
            'role_id': int,
            'user_id': int
        }

        self.attribute_map = {
            'role_id': 'roleId',
            'user_id': 'userId'
        }

        self._role_id = role_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaboratorUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaboratorUpdate of this CollaboratorUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_id(self):
        """Gets the role_id of this CollaboratorUpdate.


        :return: The role_id of this CollaboratorUpdate.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this CollaboratorUpdate.


        :param role_id: The role_id of this CollaboratorUpdate.
        :type role_id: int
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")
        if role_id is not None and role_id < 0:
            raise ValueError("Invalid value for `role_id`, must be a value greater than or equal to `0`")

        self._role_id = role_id

    @property
    def user_id(self):
        """Gets the user_id of this CollaboratorUpdate.


        :return: The user_id of this CollaboratorUpdate.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CollaboratorUpdate.


        :param user_id: The user_id of this CollaboratorUpdate.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and user_id < 0:
            raise ValueError("Invalid value for `user_id`, must be a value greater than or equal to `0`")

        self._user_id = user_id
