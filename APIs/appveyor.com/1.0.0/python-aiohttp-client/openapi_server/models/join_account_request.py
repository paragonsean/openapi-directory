# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JoinAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invitation_id: str=None):
        """JoinAccountRequest - a model defined in OpenAPI

        :param invitation_id: The invitation_id of this JoinAccountRequest.
        """
        self.openapi_types = {
            'invitation_id': str
        }

        self.attribute_map = {
            'invitation_id': 'invitationId'
        }

        self._invitation_id = invitation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JoinAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JoinAccountRequest of this JoinAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invitation_id(self):
        """Gets the invitation_id of this JoinAccountRequest.


        :return: The invitation_id of this JoinAccountRequest.
        :rtype: str
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this JoinAccountRequest.


        :param invitation_id: The invitation_id of this JoinAccountRequest.
        :type invitation_id: str
        """
        if invitation_id is None:
            raise ValueError("Invalid value for `invitation_id`, must not be `None`")
        if invitation_id is not None and len(invitation_id) < 1:
            raise ValueError("Invalid value for `invitation_id`, length must be greater than or equal to `1`")

        self._invitation_id = invitation_id
