# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_right_name import AccessRightName
from openapi_server import util


class AceAccessRight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, name: AccessRightName=None):
        """AceAccessRight - a model defined in OpenAPI

        :param allowed: The allowed of this AceAccessRight.
        :param name: The name of this AceAccessRight.
        """
        self.openapi_types = {
            'allowed': bool,
            'name': AccessRightName
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'name': 'name'
        }

        self._allowed = allowed
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AceAccessRight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AceAccessRight of this AceAccessRight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this AceAccessRight.

        true to allow, false to deny, undefined to inherit

        :return: The allowed of this AceAccessRight.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this AceAccessRight.

        true to allow, false to deny, undefined to inherit

        :param allowed: The allowed of this AceAccessRight.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def name(self):
        """Gets the name of this AceAccessRight.


        :return: The name of this AceAccessRight.
        :rtype: AccessRightName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AceAccessRight.


        :param name: The name of this AceAccessRight.
        :type name: AccessRightName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
