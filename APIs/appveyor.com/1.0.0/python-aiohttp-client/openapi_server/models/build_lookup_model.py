# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildLookupModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, build_id: int=None, message: str=None, version: str=None):
        """BuildLookupModel - a model defined in OpenAPI

        :param branch: The branch of this BuildLookupModel.
        :param build_id: The build_id of this BuildLookupModel.
        :param message: The message of this BuildLookupModel.
        :param version: The version of this BuildLookupModel.
        """
        self.openapi_types = {
            'branch': str,
            'build_id': int,
            'message': str,
            'version': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'build_id': 'buildId',
            'message': 'message',
            'version': 'version'
        }

        self._branch = branch
        self._build_id = build_id
        self._message = message
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildLookupModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildLookupModel of this BuildLookupModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this BuildLookupModel.


        :return: The branch of this BuildLookupModel.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this BuildLookupModel.


        :param branch: The branch of this BuildLookupModel.
        :type branch: str
        """

        self._branch = branch

    @property
    def build_id(self):
        """Gets the build_id of this BuildLookupModel.


        :return: The build_id of this BuildLookupModel.
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this BuildLookupModel.


        :param build_id: The build_id of this BuildLookupModel.
        :type build_id: int
        """
        if build_id is not None and build_id < 0:
            raise ValueError("Invalid value for `build_id`, must be a value greater than or equal to `0`")

        self._build_id = build_id

    @property
    def message(self):
        """Gets the message of this BuildLookupModel.


        :return: The message of this BuildLookupModel.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BuildLookupModel.


        :param message: The message of this BuildLookupModel.
        :type message: str
        """

        self._message = message

    @property
    def version(self):
        """Gets the version of this BuildLookupModel.


        :return: The version of this BuildLookupModel.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BuildLookupModel.


        :param version: The version of this BuildLookupModel.
        :type version: str
        """

        self._version = version
