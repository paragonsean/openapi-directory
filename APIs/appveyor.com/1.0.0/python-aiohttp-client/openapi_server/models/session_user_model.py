# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionUserModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, updated: datetime=None, bit_bucket_username: str=None, email: str=None, full_name: str=None, git_hub_username: str=None, git_lab_user_id: str=None, gravatar_hash: str=None, page_size: int=None, two_factor_auth_enabled: bool=None, user_id: int=None, vso_username: str=None):
        """SessionUserModel - a model defined in OpenAPI

        :param created: The created of this SessionUserModel.
        :param updated: The updated of this SessionUserModel.
        :param bit_bucket_username: The bit_bucket_username of this SessionUserModel.
        :param email: The email of this SessionUserModel.
        :param full_name: The full_name of this SessionUserModel.
        :param git_hub_username: The git_hub_username of this SessionUserModel.
        :param git_lab_user_id: The git_lab_user_id of this SessionUserModel.
        :param gravatar_hash: The gravatar_hash of this SessionUserModel.
        :param page_size: The page_size of this SessionUserModel.
        :param two_factor_auth_enabled: The two_factor_auth_enabled of this SessionUserModel.
        :param user_id: The user_id of this SessionUserModel.
        :param vso_username: The vso_username of this SessionUserModel.
        """
        self.openapi_types = {
            'created': datetime,
            'updated': datetime,
            'bit_bucket_username': str,
            'email': str,
            'full_name': str,
            'git_hub_username': str,
            'git_lab_user_id': str,
            'gravatar_hash': str,
            'page_size': int,
            'two_factor_auth_enabled': bool,
            'user_id': int,
            'vso_username': str
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'bit_bucket_username': 'bitBucketUsername',
            'email': 'email',
            'full_name': 'fullName',
            'git_hub_username': 'gitHubUsername',
            'git_lab_user_id': 'gitLabUserId',
            'gravatar_hash': 'gravatarHash',
            'page_size': 'pageSize',
            'two_factor_auth_enabled': 'twoFactorAuthEnabled',
            'user_id': 'userId',
            'vso_username': 'vsoUsername'
        }

        self._created = created
        self._updated = updated
        self._bit_bucket_username = bit_bucket_username
        self._email = email
        self._full_name = full_name
        self._git_hub_username = git_hub_username
        self._git_lab_user_id = git_lab_user_id
        self._gravatar_hash = gravatar_hash
        self._page_size = page_size
        self._two_factor_auth_enabled = two_factor_auth_enabled
        self._user_id = user_id
        self._vso_username = vso_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionUserModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionUserModel of this SessionUserModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this SessionUserModel.


        :return: The created of this SessionUserModel.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SessionUserModel.


        :param created: The created of this SessionUserModel.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this SessionUserModel.


        :return: The updated of this SessionUserModel.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SessionUserModel.


        :param updated: The updated of this SessionUserModel.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def bit_bucket_username(self):
        """Gets the bit_bucket_username of this SessionUserModel.


        :return: The bit_bucket_username of this SessionUserModel.
        :rtype: str
        """
        return self._bit_bucket_username

    @bit_bucket_username.setter
    def bit_bucket_username(self, bit_bucket_username):
        """Sets the bit_bucket_username of this SessionUserModel.


        :param bit_bucket_username: The bit_bucket_username of this SessionUserModel.
        :type bit_bucket_username: str
        """

        self._bit_bucket_username = bit_bucket_username

    @property
    def email(self):
        """Gets the email of this SessionUserModel.


        :return: The email of this SessionUserModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SessionUserModel.


        :param email: The email of this SessionUserModel.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this SessionUserModel.


        :return: The full_name of this SessionUserModel.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SessionUserModel.


        :param full_name: The full_name of this SessionUserModel.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def git_hub_username(self):
        """Gets the git_hub_username of this SessionUserModel.


        :return: The git_hub_username of this SessionUserModel.
        :rtype: str
        """
        return self._git_hub_username

    @git_hub_username.setter
    def git_hub_username(self, git_hub_username):
        """Sets the git_hub_username of this SessionUserModel.


        :param git_hub_username: The git_hub_username of this SessionUserModel.
        :type git_hub_username: str
        """

        self._git_hub_username = git_hub_username

    @property
    def git_lab_user_id(self):
        """Gets the git_lab_user_id of this SessionUserModel.


        :return: The git_lab_user_id of this SessionUserModel.
        :rtype: str
        """
        return self._git_lab_user_id

    @git_lab_user_id.setter
    def git_lab_user_id(self, git_lab_user_id):
        """Sets the git_lab_user_id of this SessionUserModel.


        :param git_lab_user_id: The git_lab_user_id of this SessionUserModel.
        :type git_lab_user_id: str
        """

        self._git_lab_user_id = git_lab_user_id

    @property
    def gravatar_hash(self):
        """Gets the gravatar_hash of this SessionUserModel.


        :return: The gravatar_hash of this SessionUserModel.
        :rtype: str
        """
        return self._gravatar_hash

    @gravatar_hash.setter
    def gravatar_hash(self, gravatar_hash):
        """Sets the gravatar_hash of this SessionUserModel.


        :param gravatar_hash: The gravatar_hash of this SessionUserModel.
        :type gravatar_hash: str
        """

        self._gravatar_hash = gravatar_hash

    @property
    def page_size(self):
        """Gets the page_size of this SessionUserModel.


        :return: The page_size of this SessionUserModel.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SessionUserModel.


        :param page_size: The page_size of this SessionUserModel.
        :type page_size: int
        """
        if page_size is not None and page_size < 0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `0`")

        self._page_size = page_size

    @property
    def two_factor_auth_enabled(self):
        """Gets the two_factor_auth_enabled of this SessionUserModel.


        :return: The two_factor_auth_enabled of this SessionUserModel.
        :rtype: bool
        """
        return self._two_factor_auth_enabled

    @two_factor_auth_enabled.setter
    def two_factor_auth_enabled(self, two_factor_auth_enabled):
        """Sets the two_factor_auth_enabled of this SessionUserModel.


        :param two_factor_auth_enabled: The two_factor_auth_enabled of this SessionUserModel.
        :type two_factor_auth_enabled: bool
        """

        self._two_factor_auth_enabled = two_factor_auth_enabled

    @property
    def user_id(self):
        """Gets the user_id of this SessionUserModel.


        :return: The user_id of this SessionUserModel.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SessionUserModel.


        :param user_id: The user_id of this SessionUserModel.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and user_id < 0:
            raise ValueError("Invalid value for `user_id`, must be a value greater than or equal to `0`")

        self._user_id = user_id

    @property
    def vso_username(self):
        """Gets the vso_username of this SessionUserModel.


        :return: The vso_username of this SessionUserModel.
        :rtype: str
        """
        return self._vso_username

    @vso_username.setter
    def vso_username(self, vso_username):
        """Sets the vso_username of this SessionUserModel.


        :param vso_username: The vso_username of this SessionUserModel.
        :type vso_username: str
        """

        self._vso_username = vso_username
