# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build import Build
from openapi_server.models.nu_get_feed import NuGetFeed
from openapi_server.models.repository_provider import RepositoryProvider
from openapi_server.models.repository_scm import RepositoryScm
from openapi_server.models.security_descriptor import SecurityDescriptor
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, name: str=None, project_id: int=None, slug: str=None, created: datetime=None, updated: datetime=None, account_id: int=None, always_build_closed_pull_requests: bool=None, builds: List[Build]=None, current_build_id: int=None, disable_pull_request_webhooks: bool=None, disable_push_webhooks: bool=None, enable_deployment_in_pull_requests: bool=None, enable_secure_variables_in_pull_requests: bool=None, enable_secure_variables_in_pull_requests_from_same_repo: bool=None, is_git_hub_app: bool=None, is_private: bool=None, nu_get_feed: NuGetFeed=None, repository_branch: str=None, repository_name: str=None, repository_scm: RepositoryScm=None, repository_type: RepositoryProvider=None, rolling_builds: bool=None, rolling_builds_do_not_cancel_running_builds: bool=None, rolling_builds_only_for_pull_requests: bool=None, save_build_cache_in_pull_requests: bool=None, security_descriptor: SecurityDescriptor=None, skip_branches_without_appveyor_yml: bool=None, tags: str=None):
        """Project - a model defined in OpenAPI

        :param account_name: The account_name of this Project.
        :param name: The name of this Project.
        :param project_id: The project_id of this Project.
        :param slug: The slug of this Project.
        :param created: The created of this Project.
        :param updated: The updated of this Project.
        :param account_id: The account_id of this Project.
        :param always_build_closed_pull_requests: The always_build_closed_pull_requests of this Project.
        :param builds: The builds of this Project.
        :param current_build_id: The current_build_id of this Project.
        :param disable_pull_request_webhooks: The disable_pull_request_webhooks of this Project.
        :param disable_push_webhooks: The disable_push_webhooks of this Project.
        :param enable_deployment_in_pull_requests: The enable_deployment_in_pull_requests of this Project.
        :param enable_secure_variables_in_pull_requests: The enable_secure_variables_in_pull_requests of this Project.
        :param enable_secure_variables_in_pull_requests_from_same_repo: The enable_secure_variables_in_pull_requests_from_same_repo of this Project.
        :param is_git_hub_app: The is_git_hub_app of this Project.
        :param is_private: The is_private of this Project.
        :param nu_get_feed: The nu_get_feed of this Project.
        :param repository_branch: The repository_branch of this Project.
        :param repository_name: The repository_name of this Project.
        :param repository_scm: The repository_scm of this Project.
        :param repository_type: The repository_type of this Project.
        :param rolling_builds: The rolling_builds of this Project.
        :param rolling_builds_do_not_cancel_running_builds: The rolling_builds_do_not_cancel_running_builds of this Project.
        :param rolling_builds_only_for_pull_requests: The rolling_builds_only_for_pull_requests of this Project.
        :param save_build_cache_in_pull_requests: The save_build_cache_in_pull_requests of this Project.
        :param security_descriptor: The security_descriptor of this Project.
        :param skip_branches_without_appveyor_yml: The skip_branches_without_appveyor_yml of this Project.
        :param tags: The tags of this Project.
        """
        self.openapi_types = {
            'account_name': str,
            'name': str,
            'project_id': int,
            'slug': str,
            'created': datetime,
            'updated': datetime,
            'account_id': int,
            'always_build_closed_pull_requests': bool,
            'builds': List[Build],
            'current_build_id': int,
            'disable_pull_request_webhooks': bool,
            'disable_push_webhooks': bool,
            'enable_deployment_in_pull_requests': bool,
            'enable_secure_variables_in_pull_requests': bool,
            'enable_secure_variables_in_pull_requests_from_same_repo': bool,
            'is_git_hub_app': bool,
            'is_private': bool,
            'nu_get_feed': NuGetFeed,
            'repository_branch': str,
            'repository_name': str,
            'repository_scm': RepositoryScm,
            'repository_type': RepositoryProvider,
            'rolling_builds': bool,
            'rolling_builds_do_not_cancel_running_builds': bool,
            'rolling_builds_only_for_pull_requests': bool,
            'save_build_cache_in_pull_requests': bool,
            'security_descriptor': SecurityDescriptor,
            'skip_branches_without_appveyor_yml': bool,
            'tags': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'name': 'name',
            'project_id': 'projectId',
            'slug': 'slug',
            'created': 'created',
            'updated': 'updated',
            'account_id': 'accountId',
            'always_build_closed_pull_requests': 'alwaysBuildClosedPullRequests',
            'builds': 'builds',
            'current_build_id': 'currentBuildId',
            'disable_pull_request_webhooks': 'disablePullRequestWebhooks',
            'disable_push_webhooks': 'disablePushWebhooks',
            'enable_deployment_in_pull_requests': 'enableDeploymentInPullRequests',
            'enable_secure_variables_in_pull_requests': 'enableSecureVariablesInPullRequests',
            'enable_secure_variables_in_pull_requests_from_same_repo': 'enableSecureVariablesInPullRequestsFromSameRepo',
            'is_git_hub_app': 'isGitHubApp',
            'is_private': 'isPrivate',
            'nu_get_feed': 'nuGetFeed',
            'repository_branch': 'repositoryBranch',
            'repository_name': 'repositoryName',
            'repository_scm': 'repositoryScm',
            'repository_type': 'repositoryType',
            'rolling_builds': 'rollingBuilds',
            'rolling_builds_do_not_cancel_running_builds': 'rollingBuildsDoNotCancelRunningBuilds',
            'rolling_builds_only_for_pull_requests': 'rollingBuildsOnlyForPullRequests',
            'save_build_cache_in_pull_requests': 'saveBuildCacheInPullRequests',
            'security_descriptor': 'securityDescriptor',
            'skip_branches_without_appveyor_yml': 'skipBranchesWithoutAppveyorYml',
            'tags': 'tags'
        }

        self._account_name = account_name
        self._name = name
        self._project_id = project_id
        self._slug = slug
        self._created = created
        self._updated = updated
        self._account_id = account_id
        self._always_build_closed_pull_requests = always_build_closed_pull_requests
        self._builds = builds
        self._current_build_id = current_build_id
        self._disable_pull_request_webhooks = disable_pull_request_webhooks
        self._disable_push_webhooks = disable_push_webhooks
        self._enable_deployment_in_pull_requests = enable_deployment_in_pull_requests
        self._enable_secure_variables_in_pull_requests = enable_secure_variables_in_pull_requests
        self._enable_secure_variables_in_pull_requests_from_same_repo = enable_secure_variables_in_pull_requests_from_same_repo
        self._is_git_hub_app = is_git_hub_app
        self._is_private = is_private
        self._nu_get_feed = nu_get_feed
        self._repository_branch = repository_branch
        self._repository_name = repository_name
        self._repository_scm = repository_scm
        self._repository_type = repository_type
        self._rolling_builds = rolling_builds
        self._rolling_builds_do_not_cancel_running_builds = rolling_builds_do_not_cancel_running_builds
        self._rolling_builds_only_for_pull_requests = rolling_builds_only_for_pull_requests
        self._save_build_cache_in_pull_requests = save_build_cache_in_pull_requests
        self._security_descriptor = security_descriptor
        self._skip_branches_without_appveyor_yml = skip_branches_without_appveyor_yml
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this Project.


        :return: The account_name of this Project.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Project.


        :param account_name: The account_name of this Project.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Project.


        :return: The project_id of this Project.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Project.


        :param project_id: The project_id of this Project.
        :type project_id: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")
        if project_id is not None and project_id < 0:
            raise ValueError("Invalid value for `project_id`, must be a value greater than or equal to `0`")

        self._project_id = project_id

    @property
    def slug(self):
        """Gets the slug of this Project.


        :return: The slug of this Project.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Project.


        :param slug: The slug of this Project.
        :type slug: str
        """

        self._slug = slug

    @property
    def created(self):
        """Gets the created of this Project.


        :return: The created of this Project.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.


        :param created: The created of this Project.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Project.


        :return: The updated of this Project.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Project.


        :param updated: The updated of this Project.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def account_id(self):
        """Gets the account_id of this Project.


        :return: The account_id of this Project.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Project.


        :param account_id: The account_id of this Project.
        :type account_id: int
        """
        if account_id is not None and account_id < 0:
            raise ValueError("Invalid value for `account_id`, must be a value greater than or equal to `0`")

        self._account_id = account_id

    @property
    def always_build_closed_pull_requests(self):
        """Gets the always_build_closed_pull_requests of this Project.


        :return: The always_build_closed_pull_requests of this Project.
        :rtype: bool
        """
        return self._always_build_closed_pull_requests

    @always_build_closed_pull_requests.setter
    def always_build_closed_pull_requests(self, always_build_closed_pull_requests):
        """Sets the always_build_closed_pull_requests of this Project.


        :param always_build_closed_pull_requests: The always_build_closed_pull_requests of this Project.
        :type always_build_closed_pull_requests: bool
        """

        self._always_build_closed_pull_requests = always_build_closed_pull_requests

    @property
    def builds(self):
        """Gets the builds of this Project.

        Only non-empty for response from getProjects.

        :return: The builds of this Project.
        :rtype: List[Build]
        """
        return self._builds

    @builds.setter
    def builds(self, builds):
        """Sets the builds of this Project.

        Only non-empty for response from getProjects.

        :param builds: The builds of this Project.
        :type builds: List[Build]
        """

        self._builds = builds

    @property
    def current_build_id(self):
        """Gets the current_build_id of this Project.


        :return: The current_build_id of this Project.
        :rtype: int
        """
        return self._current_build_id

    @current_build_id.setter
    def current_build_id(self, current_build_id):
        """Sets the current_build_id of this Project.


        :param current_build_id: The current_build_id of this Project.
        :type current_build_id: int
        """
        if current_build_id is not None and current_build_id < 0:
            raise ValueError("Invalid value for `current_build_id`, must be a value greater than or equal to `0`")

        self._current_build_id = current_build_id

    @property
    def disable_pull_request_webhooks(self):
        """Gets the disable_pull_request_webhooks of this Project.


        :return: The disable_pull_request_webhooks of this Project.
        :rtype: bool
        """
        return self._disable_pull_request_webhooks

    @disable_pull_request_webhooks.setter
    def disable_pull_request_webhooks(self, disable_pull_request_webhooks):
        """Sets the disable_pull_request_webhooks of this Project.


        :param disable_pull_request_webhooks: The disable_pull_request_webhooks of this Project.
        :type disable_pull_request_webhooks: bool
        """

        self._disable_pull_request_webhooks = disable_pull_request_webhooks

    @property
    def disable_push_webhooks(self):
        """Gets the disable_push_webhooks of this Project.


        :return: The disable_push_webhooks of this Project.
        :rtype: bool
        """
        return self._disable_push_webhooks

    @disable_push_webhooks.setter
    def disable_push_webhooks(self, disable_push_webhooks):
        """Sets the disable_push_webhooks of this Project.


        :param disable_push_webhooks: The disable_push_webhooks of this Project.
        :type disable_push_webhooks: bool
        """

        self._disable_push_webhooks = disable_push_webhooks

    @property
    def enable_deployment_in_pull_requests(self):
        """Gets the enable_deployment_in_pull_requests of this Project.


        :return: The enable_deployment_in_pull_requests of this Project.
        :rtype: bool
        """
        return self._enable_deployment_in_pull_requests

    @enable_deployment_in_pull_requests.setter
    def enable_deployment_in_pull_requests(self, enable_deployment_in_pull_requests):
        """Sets the enable_deployment_in_pull_requests of this Project.


        :param enable_deployment_in_pull_requests: The enable_deployment_in_pull_requests of this Project.
        :type enable_deployment_in_pull_requests: bool
        """

        self._enable_deployment_in_pull_requests = enable_deployment_in_pull_requests

    @property
    def enable_secure_variables_in_pull_requests(self):
        """Gets the enable_secure_variables_in_pull_requests of this Project.


        :return: The enable_secure_variables_in_pull_requests of this Project.
        :rtype: bool
        """
        return self._enable_secure_variables_in_pull_requests

    @enable_secure_variables_in_pull_requests.setter
    def enable_secure_variables_in_pull_requests(self, enable_secure_variables_in_pull_requests):
        """Sets the enable_secure_variables_in_pull_requests of this Project.


        :param enable_secure_variables_in_pull_requests: The enable_secure_variables_in_pull_requests of this Project.
        :type enable_secure_variables_in_pull_requests: bool
        """

        self._enable_secure_variables_in_pull_requests = enable_secure_variables_in_pull_requests

    @property
    def enable_secure_variables_in_pull_requests_from_same_repo(self):
        """Gets the enable_secure_variables_in_pull_requests_from_same_repo of this Project.


        :return: The enable_secure_variables_in_pull_requests_from_same_repo of this Project.
        :rtype: bool
        """
        return self._enable_secure_variables_in_pull_requests_from_same_repo

    @enable_secure_variables_in_pull_requests_from_same_repo.setter
    def enable_secure_variables_in_pull_requests_from_same_repo(self, enable_secure_variables_in_pull_requests_from_same_repo):
        """Sets the enable_secure_variables_in_pull_requests_from_same_repo of this Project.


        :param enable_secure_variables_in_pull_requests_from_same_repo: The enable_secure_variables_in_pull_requests_from_same_repo of this Project.
        :type enable_secure_variables_in_pull_requests_from_same_repo: bool
        """

        self._enable_secure_variables_in_pull_requests_from_same_repo = enable_secure_variables_in_pull_requests_from_same_repo

    @property
    def is_git_hub_app(self):
        """Gets the is_git_hub_app of this Project.


        :return: The is_git_hub_app of this Project.
        :rtype: bool
        """
        return self._is_git_hub_app

    @is_git_hub_app.setter
    def is_git_hub_app(self, is_git_hub_app):
        """Sets the is_git_hub_app of this Project.


        :param is_git_hub_app: The is_git_hub_app of this Project.
        :type is_git_hub_app: bool
        """

        self._is_git_hub_app = is_git_hub_app

    @property
    def is_private(self):
        """Gets the is_private of this Project.


        :return: The is_private of this Project.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Project.


        :param is_private: The is_private of this Project.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def nu_get_feed(self):
        """Gets the nu_get_feed of this Project.


        :return: The nu_get_feed of this Project.
        :rtype: NuGetFeed
        """
        return self._nu_get_feed

    @nu_get_feed.setter
    def nu_get_feed(self, nu_get_feed):
        """Sets the nu_get_feed of this Project.


        :param nu_get_feed: The nu_get_feed of this Project.
        :type nu_get_feed: NuGetFeed
        """

        self._nu_get_feed = nu_get_feed

    @property
    def repository_branch(self):
        """Gets the repository_branch of this Project.

        Not present in response from addProject.

        :return: The repository_branch of this Project.
        :rtype: str
        """
        return self._repository_branch

    @repository_branch.setter
    def repository_branch(self, repository_branch):
        """Sets the repository_branch of this Project.

        Not present in response from addProject.

        :param repository_branch: The repository_branch of this Project.
        :type repository_branch: str
        """

        self._repository_branch = repository_branch

    @property
    def repository_name(self):
        """Gets the repository_name of this Project.


        :return: The repository_name of this Project.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this Project.


        :param repository_name: The repository_name of this Project.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def repository_scm(self):
        """Gets the repository_scm of this Project.


        :return: The repository_scm of this Project.
        :rtype: RepositoryScm
        """
        return self._repository_scm

    @repository_scm.setter
    def repository_scm(self, repository_scm):
        """Sets the repository_scm of this Project.


        :param repository_scm: The repository_scm of this Project.
        :type repository_scm: RepositoryScm
        """

        self._repository_scm = repository_scm

    @property
    def repository_type(self):
        """Gets the repository_type of this Project.


        :return: The repository_type of this Project.
        :rtype: RepositoryProvider
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this Project.


        :param repository_type: The repository_type of this Project.
        :type repository_type: RepositoryProvider
        """

        self._repository_type = repository_type

    @property
    def rolling_builds(self):
        """Gets the rolling_builds of this Project.


        :return: The rolling_builds of this Project.
        :rtype: bool
        """
        return self._rolling_builds

    @rolling_builds.setter
    def rolling_builds(self, rolling_builds):
        """Sets the rolling_builds of this Project.


        :param rolling_builds: The rolling_builds of this Project.
        :type rolling_builds: bool
        """

        self._rolling_builds = rolling_builds

    @property
    def rolling_builds_do_not_cancel_running_builds(self):
        """Gets the rolling_builds_do_not_cancel_running_builds of this Project.


        :return: The rolling_builds_do_not_cancel_running_builds of this Project.
        :rtype: bool
        """
        return self._rolling_builds_do_not_cancel_running_builds

    @rolling_builds_do_not_cancel_running_builds.setter
    def rolling_builds_do_not_cancel_running_builds(self, rolling_builds_do_not_cancel_running_builds):
        """Sets the rolling_builds_do_not_cancel_running_builds of this Project.


        :param rolling_builds_do_not_cancel_running_builds: The rolling_builds_do_not_cancel_running_builds of this Project.
        :type rolling_builds_do_not_cancel_running_builds: bool
        """

        self._rolling_builds_do_not_cancel_running_builds = rolling_builds_do_not_cancel_running_builds

    @property
    def rolling_builds_only_for_pull_requests(self):
        """Gets the rolling_builds_only_for_pull_requests of this Project.


        :return: The rolling_builds_only_for_pull_requests of this Project.
        :rtype: bool
        """
        return self._rolling_builds_only_for_pull_requests

    @rolling_builds_only_for_pull_requests.setter
    def rolling_builds_only_for_pull_requests(self, rolling_builds_only_for_pull_requests):
        """Sets the rolling_builds_only_for_pull_requests of this Project.


        :param rolling_builds_only_for_pull_requests: The rolling_builds_only_for_pull_requests of this Project.
        :type rolling_builds_only_for_pull_requests: bool
        """

        self._rolling_builds_only_for_pull_requests = rolling_builds_only_for_pull_requests

    @property
    def save_build_cache_in_pull_requests(self):
        """Gets the save_build_cache_in_pull_requests of this Project.


        :return: The save_build_cache_in_pull_requests of this Project.
        :rtype: bool
        """
        return self._save_build_cache_in_pull_requests

    @save_build_cache_in_pull_requests.setter
    def save_build_cache_in_pull_requests(self, save_build_cache_in_pull_requests):
        """Sets the save_build_cache_in_pull_requests of this Project.


        :param save_build_cache_in_pull_requests: The save_build_cache_in_pull_requests of this Project.
        :type save_build_cache_in_pull_requests: bool
        """

        self._save_build_cache_in_pull_requests = save_build_cache_in_pull_requests

    @property
    def security_descriptor(self):
        """Gets the security_descriptor of this Project.


        :return: The security_descriptor of this Project.
        :rtype: SecurityDescriptor
        """
        return self._security_descriptor

    @security_descriptor.setter
    def security_descriptor(self, security_descriptor):
        """Sets the security_descriptor of this Project.


        :param security_descriptor: The security_descriptor of this Project.
        :type security_descriptor: SecurityDescriptor
        """

        self._security_descriptor = security_descriptor

    @property
    def skip_branches_without_appveyor_yml(self):
        """Gets the skip_branches_without_appveyor_yml of this Project.


        :return: The skip_branches_without_appveyor_yml of this Project.
        :rtype: bool
        """
        return self._skip_branches_without_appveyor_yml

    @skip_branches_without_appveyor_yml.setter
    def skip_branches_without_appveyor_yml(self, skip_branches_without_appveyor_yml):
        """Sets the skip_branches_without_appveyor_yml of this Project.


        :param skip_branches_without_appveyor_yml: The skip_branches_without_appveyor_yml of this Project.
        :type skip_branches_without_appveyor_yml: bool
        """

        self._skip_branches_without_appveyor_yml = skip_branches_without_appveyor_yml

    @property
    def tags(self):
        """Gets the tags of this Project.

        Comma-separated list of project tags for dynamic grouping. Appears that any input is accepted.  The returned value only contains case-preserving but insensitive unique values where spaces around \",\" are removed but otherwise preserved.  Empty values and items are allowed.

        :return: The tags of this Project.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Project.

        Comma-separated list of project tags for dynamic grouping. Appears that any input is accepted.  The returned value only contains case-preserving but insensitive unique values where spaces around \",\" are removed but otherwise preserved.  Empty values and items are allowed.

        :param tags: The tags of this Project.
        :type tags: str
        """

        self._tags = tags
