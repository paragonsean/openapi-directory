# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_type import ArtifactType
from openapi_server import util


class Artifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, path: str=None, type: ArtifactType=None):
        """Artifact - a model defined in OpenAPI

        :param name: The name of this Artifact.
        :param path: The path of this Artifact.
        :param type: The type of this Artifact.
        """
        self.openapi_types = {
            'name': str,
            'path': str,
            'type': ArtifactType
        }

        self.attribute_map = {
            'name': 'name',
            'path': 'path',
            'type': 'type'
        }

        self._name = name
        self._path = path
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Artifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Artifact of this Artifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Artifact.


        :return: The name of this Artifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.


        :param name: The name of this Artifact.
        :type name: str
        """
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this Artifact.

        Path glob of artifact files. Note that updateProject does not require path, but omitting path results in post-build error \"Collecting artifacts... Value cannot be null.  Parameter name: input\" 

        :return: The path of this Artifact.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Artifact.

        Path glob of artifact files. Note that updateProject does not require path, but omitting path results in post-build error \"Collecting artifacts... Value cannot be null.  Parameter name: input\" 

        :param path: The path of this Artifact.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def type(self):
        """Gets the type of this Artifact.


        :return: The type of this Artifact.
        :rtype: ArtifactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Artifact.


        :param type: The type of this Artifact.
        :type type: ArtifactType
        """

        self._type = type
