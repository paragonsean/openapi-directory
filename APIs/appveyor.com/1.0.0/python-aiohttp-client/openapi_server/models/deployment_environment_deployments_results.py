# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_environment import DeploymentEnvironment
from openapi_server.models.environment_deployment_model import EnvironmentDeploymentModel
from openapi_server import util


class DeploymentEnvironmentDeploymentsResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployments: List[EnvironmentDeploymentModel]=None, environment: DeploymentEnvironment=None):
        """DeploymentEnvironmentDeploymentsResults - a model defined in OpenAPI

        :param deployments: The deployments of this DeploymentEnvironmentDeploymentsResults.
        :param environment: The environment of this DeploymentEnvironmentDeploymentsResults.
        """
        self.openapi_types = {
            'deployments': List[EnvironmentDeploymentModel],
            'environment': DeploymentEnvironment
        }

        self.attribute_map = {
            'deployments': 'deployments',
            'environment': 'environment'
        }

        self._deployments = deployments
        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentEnvironmentDeploymentsResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentEnvironmentDeploymentsResults of this DeploymentEnvironmentDeploymentsResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployments(self):
        """Gets the deployments of this DeploymentEnvironmentDeploymentsResults.


        :return: The deployments of this DeploymentEnvironmentDeploymentsResults.
        :rtype: List[EnvironmentDeploymentModel]
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """Sets the deployments of this DeploymentEnvironmentDeploymentsResults.


        :param deployments: The deployments of this DeploymentEnvironmentDeploymentsResults.
        :type deployments: List[EnvironmentDeploymentModel]
        """
        if deployments is None:
            raise ValueError("Invalid value for `deployments`, must not be `None`")

        self._deployments = deployments

    @property
    def environment(self):
        """Gets the environment of this DeploymentEnvironmentDeploymentsResults.


        :return: The environment of this DeploymentEnvironmentDeploymentsResults.
        :rtype: DeploymentEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this DeploymentEnvironmentDeploymentsResults.


        :param environment: The environment of this DeploymentEnvironmentDeploymentsResults.
        :type environment: DeploymentEnvironment
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment
