# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_job import BuildJob
from openapi_server.models.build_message import BuildMessage
from openapi_server.models.status import Status
from openapi_server import util


class Build(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, build_id: int=None, message: str=None, version: str=None, created: datetime=None, updated: datetime=None, author_name: str=None, author_username: str=None, build_number: int=None, commit_id: str=None, committed: datetime=None, committer_name: str=None, committer_username: str=None, finished: datetime=None, is_tag: bool=None, jobs: List[BuildJob]=None, message_extended: str=None, messages: List[BuildMessage]=None, project_id: int=None, pull_request_id: int=None, pull_request_name: str=None, started: datetime=None, status: Status=None):
        """Build - a model defined in OpenAPI

        :param branch: The branch of this Build.
        :param build_id: The build_id of this Build.
        :param message: The message of this Build.
        :param version: The version of this Build.
        :param created: The created of this Build.
        :param updated: The updated of this Build.
        :param author_name: The author_name of this Build.
        :param author_username: The author_username of this Build.
        :param build_number: The build_number of this Build.
        :param commit_id: The commit_id of this Build.
        :param committed: The committed of this Build.
        :param committer_name: The committer_name of this Build.
        :param committer_username: The committer_username of this Build.
        :param finished: The finished of this Build.
        :param is_tag: The is_tag of this Build.
        :param jobs: The jobs of this Build.
        :param message_extended: The message_extended of this Build.
        :param messages: The messages of this Build.
        :param project_id: The project_id of this Build.
        :param pull_request_id: The pull_request_id of this Build.
        :param pull_request_name: The pull_request_name of this Build.
        :param started: The started of this Build.
        :param status: The status of this Build.
        """
        self.openapi_types = {
            'branch': str,
            'build_id': int,
            'message': str,
            'version': str,
            'created': datetime,
            'updated': datetime,
            'author_name': str,
            'author_username': str,
            'build_number': int,
            'commit_id': str,
            'committed': datetime,
            'committer_name': str,
            'committer_username': str,
            'finished': datetime,
            'is_tag': bool,
            'jobs': List[BuildJob],
            'message_extended': str,
            'messages': List[BuildMessage],
            'project_id': int,
            'pull_request_id': int,
            'pull_request_name': str,
            'started': datetime,
            'status': Status
        }

        self.attribute_map = {
            'branch': 'branch',
            'build_id': 'buildId',
            'message': 'message',
            'version': 'version',
            'created': 'created',
            'updated': 'updated',
            'author_name': 'authorName',
            'author_username': 'authorUsername',
            'build_number': 'buildNumber',
            'commit_id': 'commitId',
            'committed': 'committed',
            'committer_name': 'committerName',
            'committer_username': 'committerUsername',
            'finished': 'finished',
            'is_tag': 'isTag',
            'jobs': 'jobs',
            'message_extended': 'messageExtended',
            'messages': 'messages',
            'project_id': 'projectId',
            'pull_request_id': 'pullRequestId',
            'pull_request_name': 'pullRequestName',
            'started': 'started',
            'status': 'status'
        }

        self._branch = branch
        self._build_id = build_id
        self._message = message
        self._version = version
        self._created = created
        self._updated = updated
        self._author_name = author_name
        self._author_username = author_username
        self._build_number = build_number
        self._commit_id = commit_id
        self._committed = committed
        self._committer_name = committer_name
        self._committer_username = committer_username
        self._finished = finished
        self._is_tag = is_tag
        self._jobs = jobs
        self._message_extended = message_extended
        self._messages = messages
        self._project_id = project_id
        self._pull_request_id = pull_request_id
        self._pull_request_name = pull_request_name
        self._started = started
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build of this Build.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this Build.


        :return: The branch of this Build.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Build.


        :param branch: The branch of this Build.
        :type branch: str
        """

        self._branch = branch

    @property
    def build_id(self):
        """Gets the build_id of this Build.


        :return: The build_id of this Build.
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this Build.


        :param build_id: The build_id of this Build.
        :type build_id: int
        """
        if build_id is not None and build_id < 0:
            raise ValueError("Invalid value for `build_id`, must be a value greater than or equal to `0`")

        self._build_id = build_id

    @property
    def message(self):
        """Gets the message of this Build.


        :return: The message of this Build.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Build.


        :param message: The message of this Build.
        :type message: str
        """

        self._message = message

    @property
    def version(self):
        """Gets the version of this Build.


        :return: The version of this Build.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Build.


        :param version: The version of this Build.
        :type version: str
        """

        self._version = version

    @property
    def created(self):
        """Gets the created of this Build.


        :return: The created of this Build.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Build.


        :param created: The created of this Build.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Build.


        :return: The updated of this Build.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Build.


        :param updated: The updated of this Build.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def author_name(self):
        """Gets the author_name of this Build.


        :return: The author_name of this Build.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this Build.


        :param author_name: The author_name of this Build.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def author_username(self):
        """Gets the author_username of this Build.


        :return: The author_username of this Build.
        :rtype: str
        """
        return self._author_username

    @author_username.setter
    def author_username(self, author_username):
        """Sets the author_username of this Build.


        :param author_username: The author_username of this Build.
        :type author_username: str
        """

        self._author_username = author_username

    @property
    def build_number(self):
        """Gets the build_number of this Build.


        :return: The build_number of this Build.
        :rtype: int
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this Build.


        :param build_number: The build_number of this Build.
        :type build_number: int
        """
        if build_number is not None and build_number < 0:
            raise ValueError("Invalid value for `build_number`, must be a value greater than or equal to `0`")

        self._build_number = build_number

    @property
    def commit_id(self):
        """Gets the commit_id of this Build.


        :return: The commit_id of this Build.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this Build.


        :param commit_id: The commit_id of this Build.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def committed(self):
        """Gets the committed of this Build.


        :return: The committed of this Build.
        :rtype: datetime
        """
        return self._committed

    @committed.setter
    def committed(self, committed):
        """Sets the committed of this Build.


        :param committed: The committed of this Build.
        :type committed: datetime
        """

        self._committed = committed

    @property
    def committer_name(self):
        """Gets the committer_name of this Build.


        :return: The committer_name of this Build.
        :rtype: str
        """
        return self._committer_name

    @committer_name.setter
    def committer_name(self, committer_name):
        """Sets the committer_name of this Build.


        :param committer_name: The committer_name of this Build.
        :type committer_name: str
        """

        self._committer_name = committer_name

    @property
    def committer_username(self):
        """Gets the committer_username of this Build.


        :return: The committer_username of this Build.
        :rtype: str
        """
        return self._committer_username

    @committer_username.setter
    def committer_username(self, committer_username):
        """Sets the committer_username of this Build.


        :param committer_username: The committer_username of this Build.
        :type committer_username: str
        """

        self._committer_username = committer_username

    @property
    def finished(self):
        """Gets the finished of this Build.


        :return: The finished of this Build.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Build.


        :param finished: The finished of this Build.
        :type finished: datetime
        """

        self._finished = finished

    @property
    def is_tag(self):
        """Gets the is_tag of this Build.


        :return: The is_tag of this Build.
        :rtype: bool
        """
        return self._is_tag

    @is_tag.setter
    def is_tag(self, is_tag):
        """Sets the is_tag of this Build.


        :param is_tag: The is_tag of this Build.
        :type is_tag: bool
        """

        self._is_tag = is_tag

    @property
    def jobs(self):
        """Gets the jobs of this Build.

        Always empty in getProjectHistory and startDeployment responses.

        :return: The jobs of this Build.
        :rtype: List[BuildJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this Build.

        Always empty in getProjectHistory and startDeployment responses.

        :param jobs: The jobs of this Build.
        :type jobs: List[BuildJob]
        """

        self._jobs = jobs

    @property
    def message_extended(self):
        """Gets the message_extended of this Build.


        :return: The message_extended of this Build.
        :rtype: str
        """
        return self._message_extended

    @message_extended.setter
    def message_extended(self, message_extended):
        """Sets the message_extended of this Build.


        :param message_extended: The message_extended of this Build.
        :type message_extended: str
        """

        self._message_extended = message_extended

    @property
    def messages(self):
        """Gets the messages of this Build.


        :return: The messages of this Build.
        :rtype: List[BuildMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Build.


        :param messages: The messages of this Build.
        :type messages: List[BuildMessage]
        """

        self._messages = messages

    @property
    def project_id(self):
        """Gets the project_id of this Build.


        :return: The project_id of this Build.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Build.


        :param project_id: The project_id of this Build.
        :type project_id: int
        """
        if project_id is not None and project_id < 0:
            raise ValueError("Invalid value for `project_id`, must be a value greater than or equal to `0`")

        self._project_id = project_id

    @property
    def pull_request_id(self):
        """Gets the pull_request_id of this Build.


        :return: The pull_request_id of this Build.
        :rtype: int
        """
        return self._pull_request_id

    @pull_request_id.setter
    def pull_request_id(self, pull_request_id):
        """Sets the pull_request_id of this Build.


        :param pull_request_id: The pull_request_id of this Build.
        :type pull_request_id: int
        """
        if pull_request_id is not None and pull_request_id < 1:
            raise ValueError("Invalid value for `pull_request_id`, must be a value greater than or equal to `1`")

        self._pull_request_id = pull_request_id

    @property
    def pull_request_name(self):
        """Gets the pull_request_name of this Build.


        :return: The pull_request_name of this Build.
        :rtype: str
        """
        return self._pull_request_name

    @pull_request_name.setter
    def pull_request_name(self, pull_request_name):
        """Sets the pull_request_name of this Build.


        :param pull_request_name: The pull_request_name of this Build.
        :type pull_request_name: str
        """

        self._pull_request_name = pull_request_name

    @property
    def started(self):
        """Gets the started of this Build.


        :return: The started of this Build.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Build.


        :param started: The started of this Build.
        :type started: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this Build.


        :return: The status of this Build.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Build.


        :param status: The status of this Build.
        :type status: Status
        """

        self._status = status
