# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_worker_image import BuildWorkerImage
from openapi_server.models.project import Project
from openapi_server.models.project_with_configuration import ProjectWithConfiguration
from openapi_server.models.string_value_object import StringValueObject
from openapi_server import util


class ProjectSettingsResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_clouds: List[StringValueObject]=None, default_image_name: str=None, images: List[BuildWorkerImage]=None, project: Project=None, settings: ProjectWithConfiguration=None):
        """ProjectSettingsResults - a model defined in OpenAPI

        :param build_clouds: The build_clouds of this ProjectSettingsResults.
        :param default_image_name: The default_image_name of this ProjectSettingsResults.
        :param images: The images of this ProjectSettingsResults.
        :param project: The project of this ProjectSettingsResults.
        :param settings: The settings of this ProjectSettingsResults.
        """
        self.openapi_types = {
            'build_clouds': List[StringValueObject],
            'default_image_name': str,
            'images': List[BuildWorkerImage],
            'project': Project,
            'settings': ProjectWithConfiguration
        }

        self.attribute_map = {
            'build_clouds': 'buildClouds',
            'default_image_name': 'defaultImageName',
            'images': 'images',
            'project': 'project',
            'settings': 'settings'
        }

        self._build_clouds = build_clouds
        self._default_image_name = default_image_name
        self._images = images
        self._project = project
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSettingsResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSettingsResults of this ProjectSettingsResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_clouds(self):
        """Gets the build_clouds of this ProjectSettingsResults.


        :return: The build_clouds of this ProjectSettingsResults.
        :rtype: List[StringValueObject]
        """
        return self._build_clouds

    @build_clouds.setter
    def build_clouds(self, build_clouds):
        """Sets the build_clouds of this ProjectSettingsResults.


        :param build_clouds: The build_clouds of this ProjectSettingsResults.
        :type build_clouds: List[StringValueObject]
        """

        self._build_clouds = build_clouds

    @property
    def default_image_name(self):
        """Gets the default_image_name of this ProjectSettingsResults.


        :return: The default_image_name of this ProjectSettingsResults.
        :rtype: str
        """
        return self._default_image_name

    @default_image_name.setter
    def default_image_name(self, default_image_name):
        """Sets the default_image_name of this ProjectSettingsResults.


        :param default_image_name: The default_image_name of this ProjectSettingsResults.
        :type default_image_name: str
        """

        self._default_image_name = default_image_name

    @property
    def images(self):
        """Gets the images of this ProjectSettingsResults.


        :return: The images of this ProjectSettingsResults.
        :rtype: List[BuildWorkerImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ProjectSettingsResults.


        :param images: The images of this ProjectSettingsResults.
        :type images: List[BuildWorkerImage]
        """

        self._images = images

    @property
    def project(self):
        """Gets the project of this ProjectSettingsResults.


        :return: The project of this ProjectSettingsResults.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectSettingsResults.


        :param project: The project of this ProjectSettingsResults.
        :type project: Project
        """

        self._project = project

    @property
    def settings(self):
        """Gets the settings of this ProjectSettingsResults.


        :return: The settings of this ProjectSettingsResults.
        :rtype: ProjectWithConfiguration
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ProjectSettingsResults.


        :param settings: The settings of this ProjectSettingsResults.
        :type settings: ProjectWithConfiguration
        """

        self._settings = settings
