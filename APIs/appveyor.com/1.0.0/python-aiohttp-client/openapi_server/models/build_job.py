# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_type import OSType
from openapi_server.models.status import Status
from openapi_server import util


class BuildJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, updated: datetime=None, finished: datetime=None, job_id: str=None, name: str=None, started: datetime=None, status: Status=None, allow_failure: bool=None, artifacts_count: int=None, compilation_errors_count: int=None, compilation_messages_count: int=None, compilation_warnings_count: int=None, failed_tests_count: int=None, messages_count: int=None, os_type: OSType=None, passed_tests_count: int=None, tests_count: int=None):
        """BuildJob - a model defined in OpenAPI

        :param created: The created of this BuildJob.
        :param updated: The updated of this BuildJob.
        :param finished: The finished of this BuildJob.
        :param job_id: The job_id of this BuildJob.
        :param name: The name of this BuildJob.
        :param started: The started of this BuildJob.
        :param status: The status of this BuildJob.
        :param allow_failure: The allow_failure of this BuildJob.
        :param artifacts_count: The artifacts_count of this BuildJob.
        :param compilation_errors_count: The compilation_errors_count of this BuildJob.
        :param compilation_messages_count: The compilation_messages_count of this BuildJob.
        :param compilation_warnings_count: The compilation_warnings_count of this BuildJob.
        :param failed_tests_count: The failed_tests_count of this BuildJob.
        :param messages_count: The messages_count of this BuildJob.
        :param os_type: The os_type of this BuildJob.
        :param passed_tests_count: The passed_tests_count of this BuildJob.
        :param tests_count: The tests_count of this BuildJob.
        """
        self.openapi_types = {
            'created': datetime,
            'updated': datetime,
            'finished': datetime,
            'job_id': str,
            'name': str,
            'started': datetime,
            'status': Status,
            'allow_failure': bool,
            'artifacts_count': int,
            'compilation_errors_count': int,
            'compilation_messages_count': int,
            'compilation_warnings_count': int,
            'failed_tests_count': int,
            'messages_count': int,
            'os_type': OSType,
            'passed_tests_count': int,
            'tests_count': int
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'finished': 'finished',
            'job_id': 'jobId',
            'name': 'name',
            'started': 'started',
            'status': 'status',
            'allow_failure': 'allowFailure',
            'artifacts_count': 'artifactsCount',
            'compilation_errors_count': 'compilationErrorsCount',
            'compilation_messages_count': 'compilationMessagesCount',
            'compilation_warnings_count': 'compilationWarningsCount',
            'failed_tests_count': 'failedTestsCount',
            'messages_count': 'messagesCount',
            'os_type': 'osType',
            'passed_tests_count': 'passedTestsCount',
            'tests_count': 'testsCount'
        }

        self._created = created
        self._updated = updated
        self._finished = finished
        self._job_id = job_id
        self._name = name
        self._started = started
        self._status = status
        self._allow_failure = allow_failure
        self._artifacts_count = artifacts_count
        self._compilation_errors_count = compilation_errors_count
        self._compilation_messages_count = compilation_messages_count
        self._compilation_warnings_count = compilation_warnings_count
        self._failed_tests_count = failed_tests_count
        self._messages_count = messages_count
        self._os_type = os_type
        self._passed_tests_count = passed_tests_count
        self._tests_count = tests_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildJob of this BuildJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this BuildJob.


        :return: The created of this BuildJob.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BuildJob.


        :param created: The created of this BuildJob.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this BuildJob.


        :return: The updated of this BuildJob.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this BuildJob.


        :param updated: The updated of this BuildJob.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def finished(self):
        """Gets the finished of this BuildJob.


        :return: The finished of this BuildJob.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this BuildJob.


        :param finished: The finished of this BuildJob.
        :type finished: datetime
        """

        self._finished = finished

    @property
    def job_id(self):
        """Gets the job_id of this BuildJob.


        :return: The job_id of this BuildJob.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BuildJob.


        :param job_id: The job_id of this BuildJob.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def name(self):
        """Gets the name of this BuildJob.


        :return: The name of this BuildJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildJob.


        :param name: The name of this BuildJob.
        :type name: str
        """

        self._name = name

    @property
    def started(self):
        """Gets the started of this BuildJob.


        :return: The started of this BuildJob.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this BuildJob.


        :param started: The started of this BuildJob.
        :type started: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this BuildJob.


        :return: The status of this BuildJob.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildJob.


        :param status: The status of this BuildJob.
        :type status: Status
        """

        self._status = status

    @property
    def allow_failure(self):
        """Gets the allow_failure of this BuildJob.


        :return: The allow_failure of this BuildJob.
        :rtype: bool
        """
        return self._allow_failure

    @allow_failure.setter
    def allow_failure(self, allow_failure):
        """Sets the allow_failure of this BuildJob.


        :param allow_failure: The allow_failure of this BuildJob.
        :type allow_failure: bool
        """

        self._allow_failure = allow_failure

    @property
    def artifacts_count(self):
        """Gets the artifacts_count of this BuildJob.


        :return: The artifacts_count of this BuildJob.
        :rtype: int
        """
        return self._artifacts_count

    @artifacts_count.setter
    def artifacts_count(self, artifacts_count):
        """Sets the artifacts_count of this BuildJob.


        :param artifacts_count: The artifacts_count of this BuildJob.
        :type artifacts_count: int
        """
        if artifacts_count is not None and artifacts_count < 0:
            raise ValueError("Invalid value for `artifacts_count`, must be a value greater than or equal to `0`")

        self._artifacts_count = artifacts_count

    @property
    def compilation_errors_count(self):
        """Gets the compilation_errors_count of this BuildJob.


        :return: The compilation_errors_count of this BuildJob.
        :rtype: int
        """
        return self._compilation_errors_count

    @compilation_errors_count.setter
    def compilation_errors_count(self, compilation_errors_count):
        """Sets the compilation_errors_count of this BuildJob.


        :param compilation_errors_count: The compilation_errors_count of this BuildJob.
        :type compilation_errors_count: int
        """
        if compilation_errors_count is not None and compilation_errors_count < 0:
            raise ValueError("Invalid value for `compilation_errors_count`, must be a value greater than or equal to `0`")

        self._compilation_errors_count = compilation_errors_count

    @property
    def compilation_messages_count(self):
        """Gets the compilation_messages_count of this BuildJob.


        :return: The compilation_messages_count of this BuildJob.
        :rtype: int
        """
        return self._compilation_messages_count

    @compilation_messages_count.setter
    def compilation_messages_count(self, compilation_messages_count):
        """Sets the compilation_messages_count of this BuildJob.


        :param compilation_messages_count: The compilation_messages_count of this BuildJob.
        :type compilation_messages_count: int
        """
        if compilation_messages_count is not None and compilation_messages_count < 0:
            raise ValueError("Invalid value for `compilation_messages_count`, must be a value greater than or equal to `0`")

        self._compilation_messages_count = compilation_messages_count

    @property
    def compilation_warnings_count(self):
        """Gets the compilation_warnings_count of this BuildJob.


        :return: The compilation_warnings_count of this BuildJob.
        :rtype: int
        """
        return self._compilation_warnings_count

    @compilation_warnings_count.setter
    def compilation_warnings_count(self, compilation_warnings_count):
        """Sets the compilation_warnings_count of this BuildJob.


        :param compilation_warnings_count: The compilation_warnings_count of this BuildJob.
        :type compilation_warnings_count: int
        """
        if compilation_warnings_count is not None and compilation_warnings_count < 0:
            raise ValueError("Invalid value for `compilation_warnings_count`, must be a value greater than or equal to `0`")

        self._compilation_warnings_count = compilation_warnings_count

    @property
    def failed_tests_count(self):
        """Gets the failed_tests_count of this BuildJob.


        :return: The failed_tests_count of this BuildJob.
        :rtype: int
        """
        return self._failed_tests_count

    @failed_tests_count.setter
    def failed_tests_count(self, failed_tests_count):
        """Sets the failed_tests_count of this BuildJob.


        :param failed_tests_count: The failed_tests_count of this BuildJob.
        :type failed_tests_count: int
        """
        if failed_tests_count is not None and failed_tests_count < 0:
            raise ValueError("Invalid value for `failed_tests_count`, must be a value greater than or equal to `0`")

        self._failed_tests_count = failed_tests_count

    @property
    def messages_count(self):
        """Gets the messages_count of this BuildJob.


        :return: The messages_count of this BuildJob.
        :rtype: int
        """
        return self._messages_count

    @messages_count.setter
    def messages_count(self, messages_count):
        """Sets the messages_count of this BuildJob.


        :param messages_count: The messages_count of this BuildJob.
        :type messages_count: int
        """
        if messages_count is not None and messages_count < 0:
            raise ValueError("Invalid value for `messages_count`, must be a value greater than or equal to `0`")

        self._messages_count = messages_count

    @property
    def os_type(self):
        """Gets the os_type of this BuildJob.


        :return: The os_type of this BuildJob.
        :rtype: OSType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this BuildJob.


        :param os_type: The os_type of this BuildJob.
        :type os_type: OSType
        """

        self._os_type = os_type

    @property
    def passed_tests_count(self):
        """Gets the passed_tests_count of this BuildJob.


        :return: The passed_tests_count of this BuildJob.
        :rtype: int
        """
        return self._passed_tests_count

    @passed_tests_count.setter
    def passed_tests_count(self, passed_tests_count):
        """Sets the passed_tests_count of this BuildJob.


        :param passed_tests_count: The passed_tests_count of this BuildJob.
        :type passed_tests_count: int
        """
        if passed_tests_count is not None and passed_tests_count < 0:
            raise ValueError("Invalid value for `passed_tests_count`, must be a value greater than or equal to `0`")

        self._passed_tests_count = passed_tests_count

    @property
    def tests_count(self):
        """Gets the tests_count of this BuildJob.


        :return: The tests_count of this BuildJob.
        :rtype: int
        """
        return self._tests_count

    @tests_count.setter
    def tests_count(self, tests_count):
        """Sets the tests_count of this BuildJob.


        :param tests_count: The tests_count of this BuildJob.
        :type tests_count: int
        """
        if tests_count is not None and tests_count < 0:
            raise ValueError("Invalid value for `tests_count`, must be a value greater than or equal to `0`")

        self._tests_count = tests_count
