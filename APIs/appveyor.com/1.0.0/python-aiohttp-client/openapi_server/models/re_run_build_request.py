# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReRunBuildRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_id: int=None, re_run_incomplete: bool=None):
        """ReRunBuildRequest - a model defined in OpenAPI

        :param build_id: The build_id of this ReRunBuildRequest.
        :param re_run_incomplete: The re_run_incomplete of this ReRunBuildRequest.
        """
        self.openapi_types = {
            'build_id': int,
            're_run_incomplete': bool
        }

        self.attribute_map = {
            'build_id': 'buildId',
            're_run_incomplete': 'reRunIncomplete'
        }

        self._build_id = build_id
        self._re_run_incomplete = re_run_incomplete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReRunBuildRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReRunBuildRequest of this ReRunBuildRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_id(self):
        """Gets the build_id of this ReRunBuildRequest.


        :return: The build_id of this ReRunBuildRequest.
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this ReRunBuildRequest.


        :param build_id: The build_id of this ReRunBuildRequest.
        :type build_id: int
        """
        if build_id is None:
            raise ValueError("Invalid value for `build_id`, must not be `None`")
        if build_id is not None and build_id < 0:
            raise ValueError("Invalid value for `build_id`, must be a value greater than or equal to `0`")

        self._build_id = build_id

    @property
    def re_run_incomplete(self):
        """Gets the re_run_incomplete of this ReRunBuildRequest.

        Set `reRunIncomplete` set to `false` (default value) for full build re-run. Set it set to `true` to rerun only failed or cancelled jobs in multijob build.

        :return: The re_run_incomplete of this ReRunBuildRequest.
        :rtype: bool
        """
        return self._re_run_incomplete

    @re_run_incomplete.setter
    def re_run_incomplete(self, re_run_incomplete):
        """Sets the re_run_incomplete of this ReRunBuildRequest.

        Set `reRunIncomplete` set to `false` (default value) for full build re-run. Set it set to `true` to rerun only failed or cancelled jobs in multijob build.

        :param re_run_incomplete: The re_run_incomplete of this ReRunBuildRequest.
        :type re_run_incomplete: bool
        """

        self._re_run_incomplete = re_run_incomplete
