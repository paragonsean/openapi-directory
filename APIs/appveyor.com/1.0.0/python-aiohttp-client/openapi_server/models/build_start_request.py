# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildStartRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, branch: str=None, commit_id: str=None, environment_variables: Dict[str, str]=None, project_slug: str=None, pull_request_id: int=None):
        """BuildStartRequest - a model defined in OpenAPI

        :param account_name: The account_name of this BuildStartRequest.
        :param branch: The branch of this BuildStartRequest.
        :param commit_id: The commit_id of this BuildStartRequest.
        :param environment_variables: The environment_variables of this BuildStartRequest.
        :param project_slug: The project_slug of this BuildStartRequest.
        :param pull_request_id: The pull_request_id of this BuildStartRequest.
        """
        self.openapi_types = {
            'account_name': str,
            'branch': str,
            'commit_id': str,
            'environment_variables': Dict[str, str],
            'project_slug': str,
            'pull_request_id': int
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'branch': 'branch',
            'commit_id': 'commitId',
            'environment_variables': 'environmentVariables',
            'project_slug': 'projectSlug',
            'pull_request_id': 'pullRequestId'
        }

        self._account_name = account_name
        self._branch = branch
        self._commit_id = commit_id
        self._environment_variables = environment_variables
        self._project_slug = project_slug
        self._pull_request_id = pull_request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildStartRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildStartRequest of this BuildStartRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this BuildStartRequest.


        :return: The account_name of this BuildStartRequest.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this BuildStartRequest.


        :param account_name: The account_name of this BuildStartRequest.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")
        if account_name is not None and len(account_name) < 1:
            raise ValueError("Invalid value for `account_name`, length must be greater than or equal to `1`")

        self._account_name = account_name

    @property
    def branch(self):
        """Gets the branch of this BuildStartRequest.


        :return: The branch of this BuildStartRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this BuildStartRequest.


        :param branch: The branch of this BuildStartRequest.
        :type branch: str
        """

        self._branch = branch

    @property
    def commit_id(self):
        """Gets the commit_id of this BuildStartRequest.


        :return: The commit_id of this BuildStartRequest.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this BuildStartRequest.


        :param commit_id: The commit_id of this BuildStartRequest.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def environment_variables(self):
        """Gets the environment_variables of this BuildStartRequest.


        :return: The environment_variables of this BuildStartRequest.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this BuildStartRequest.


        :param environment_variables: The environment_variables of this BuildStartRequest.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def project_slug(self):
        """Gets the project_slug of this BuildStartRequest.


        :return: The project_slug of this BuildStartRequest.
        :rtype: str
        """
        return self._project_slug

    @project_slug.setter
    def project_slug(self, project_slug):
        """Sets the project_slug of this BuildStartRequest.


        :param project_slug: The project_slug of this BuildStartRequest.
        :type project_slug: str
        """
        if project_slug is None:
            raise ValueError("Invalid value for `project_slug`, must not be `None`")
        if project_slug is not None and len(project_slug) < 1:
            raise ValueError("Invalid value for `project_slug`, length must be greater than or equal to `1`")

        self._project_slug = project_slug

    @property
    def pull_request_id(self):
        """Gets the pull_request_id of this BuildStartRequest.

        Can not be used with `branch` or `commitId`

        :return: The pull_request_id of this BuildStartRequest.
        :rtype: int
        """
        return self._pull_request_id

    @pull_request_id.setter
    def pull_request_id(self, pull_request_id):
        """Sets the pull_request_id of this BuildStartRequest.

        Can not be used with `branch` or `commitId`

        :param pull_request_id: The pull_request_id of this BuildStartRequest.
        :type pull_request_id: int
        """
        if pull_request_id is not None and pull_request_id < 1:
            raise ValueError("Invalid value for `pull_request_id`, must be a value greater than or equal to `1`")

        self._pull_request_id = pull_request_id
