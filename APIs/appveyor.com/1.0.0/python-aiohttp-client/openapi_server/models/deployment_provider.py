# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_provider_type import DeploymentProviderType
from openapi_server.models.stored_name_value import StoredNameValue
from openapi_server.models.string_value_object import StringValueObject
from openapi_server import util


class DeploymentProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, on_branch: List[StringValueObject]=None, on_environment_variables: List[StoredNameValue]=None, provider: DeploymentProviderType=None, provider_settings: List[StoredNameValue]=None):
        """DeploymentProvider - a model defined in OpenAPI

        :param on_branch: The on_branch of this DeploymentProvider.
        :param on_environment_variables: The on_environment_variables of this DeploymentProvider.
        :param provider: The provider of this DeploymentProvider.
        :param provider_settings: The provider_settings of this DeploymentProvider.
        """
        self.openapi_types = {
            'on_branch': List[StringValueObject],
            'on_environment_variables': List[StoredNameValue],
            'provider': DeploymentProviderType,
            'provider_settings': List[StoredNameValue]
        }

        self.attribute_map = {
            'on_branch': 'onBranch',
            'on_environment_variables': 'onEnvironmentVariables',
            'provider': 'provider',
            'provider_settings': 'providerSettings'
        }

        self._on_branch = on_branch
        self._on_environment_variables = on_environment_variables
        self._provider = provider
        self._provider_settings = provider_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentProvider of this DeploymentProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def on_branch(self):
        """Gets the on_branch of this DeploymentProvider.


        :return: The on_branch of this DeploymentProvider.
        :rtype: List[StringValueObject]
        """
        return self._on_branch

    @on_branch.setter
    def on_branch(self, on_branch):
        """Sets the on_branch of this DeploymentProvider.


        :param on_branch: The on_branch of this DeploymentProvider.
        :type on_branch: List[StringValueObject]
        """

        self._on_branch = on_branch

    @property
    def on_environment_variables(self):
        """Gets the on_environment_variables of this DeploymentProvider.


        :return: The on_environment_variables of this DeploymentProvider.
        :rtype: List[StoredNameValue]
        """
        return self._on_environment_variables

    @on_environment_variables.setter
    def on_environment_variables(self, on_environment_variables):
        """Sets the on_environment_variables of this DeploymentProvider.


        :param on_environment_variables: The on_environment_variables of this DeploymentProvider.
        :type on_environment_variables: List[StoredNameValue]
        """

        self._on_environment_variables = on_environment_variables

    @property
    def provider(self):
        """Gets the provider of this DeploymentProvider.


        :return: The provider of this DeploymentProvider.
        :rtype: DeploymentProviderType
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DeploymentProvider.


        :param provider: The provider of this DeploymentProvider.
        :type provider: DeploymentProviderType
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def provider_settings(self):
        """Gets the provider_settings of this DeploymentProvider.


        :return: The provider_settings of this DeploymentProvider.
        :rtype: List[StoredNameValue]
        """
        return self._provider_settings

    @provider_settings.setter
    def provider_settings(self, provider_settings):
        """Sets the provider_settings of this DeploymentProvider.


        :param provider_settings: The provider_settings of this DeploymentProvider.
        :type provider_settings: List[StoredNameValue]
        """

        self._provider_settings = provider_settings
