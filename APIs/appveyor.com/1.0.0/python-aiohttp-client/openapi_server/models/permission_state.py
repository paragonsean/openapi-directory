# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_name import PermissionName
from openapi_server import util


class PermissionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, description: str=None, name: PermissionName=None):
        """PermissionState - a model defined in OpenAPI

        :param allowed: The allowed of this PermissionState.
        :param description: The description of this PermissionState.
        :param name: The name of this PermissionState.
        """
        self.openapi_types = {
            'allowed': bool,
            'description': str,
            'name': PermissionName
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'description': 'description',
            'name': 'name'
        }

        self._allowed = allowed
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermissionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PermissionState of this PermissionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this PermissionState.

        State of the named permission.  `true` to allow, `false` to deny, missing to inherit. 

        :return: The allowed of this PermissionState.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this PermissionState.

        State of the named permission.  `true` to allow, `false` to deny, missing to inherit. 

        :param allowed: The allowed of this PermissionState.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def description(self):
        """Gets the description of this PermissionState.


        :return: The description of this PermissionState.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PermissionState.


        :param description: The description of this PermissionState.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this PermissionState.


        :return: The name of this PermissionState.
        :rtype: PermissionName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PermissionState.


        :param name: The name of this PermissionState.
        :type name: PermissionName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
