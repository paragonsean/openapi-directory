# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, model_state: Dict[str, List[str]]=None):
        """Error - a model defined in OpenAPI

        :param message: The message of this Error.
        :param model_state: The model_state of this Error.
        """
        self.openapi_types = {
            'message': str,
            'model_state': Dict[str, List[str]]
        }

        self.attribute_map = {
            'message': 'message',
            'model_state': 'modelState'
        }

        self._message = message
        self._model_state = model_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Error.


        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.


        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def model_state(self):
        """Gets the model_state of this Error.

        When present, this property is a map of property names in the format `request.<capitalized name>` to an `Array` of validation error message strings for the property. 

        :return: The model_state of this Error.
        :rtype: Dict[str, List[str]]
        """
        return self._model_state

    @model_state.setter
    def model_state(self, model_state):
        """Sets the model_state of this Error.

        When present, this property is a map of property names in the format `request.<capitalized name>` to an `Array` of validation error message strings for the property. 

        :param model_state: The model_state of this Error.
        :type model_state: Dict[str, List[str]]
        """

        self._model_state = model_state
