# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_cloud_name import BuildCloudName
from openapi_server.models.build_worker_image_name import BuildWorkerImageName
from openapi_server.models.os_type import OSType
from openapi_server import util


class BuildWorkerImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_cloud_name: BuildCloudName=None, build_worker_image_id: int=None, name: BuildWorkerImageName=None, os_type: OSType=None):
        """BuildWorkerImage - a model defined in OpenAPI

        :param build_cloud_name: The build_cloud_name of this BuildWorkerImage.
        :param build_worker_image_id: The build_worker_image_id of this BuildWorkerImage.
        :param name: The name of this BuildWorkerImage.
        :param os_type: The os_type of this BuildWorkerImage.
        """
        self.openapi_types = {
            'build_cloud_name': BuildCloudName,
            'build_worker_image_id': int,
            'name': BuildWorkerImageName,
            'os_type': OSType
        }

        self.attribute_map = {
            'build_cloud_name': 'buildCloudName',
            'build_worker_image_id': 'buildWorkerImageId',
            'name': 'name',
            'os_type': 'osType'
        }

        self._build_cloud_name = build_cloud_name
        self._build_worker_image_id = build_worker_image_id
        self._name = name
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildWorkerImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildWorkerImage of this BuildWorkerImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_cloud_name(self):
        """Gets the build_cloud_name of this BuildWorkerImage.


        :return: The build_cloud_name of this BuildWorkerImage.
        :rtype: BuildCloudName
        """
        return self._build_cloud_name

    @build_cloud_name.setter
    def build_cloud_name(self, build_cloud_name):
        """Sets the build_cloud_name of this BuildWorkerImage.


        :param build_cloud_name: The build_cloud_name of this BuildWorkerImage.
        :type build_cloud_name: BuildCloudName
        """

        self._build_cloud_name = build_cloud_name

    @property
    def build_worker_image_id(self):
        """Gets the build_worker_image_id of this BuildWorkerImage.


        :return: The build_worker_image_id of this BuildWorkerImage.
        :rtype: int
        """
        return self._build_worker_image_id

    @build_worker_image_id.setter
    def build_worker_image_id(self, build_worker_image_id):
        """Sets the build_worker_image_id of this BuildWorkerImage.


        :param build_worker_image_id: The build_worker_image_id of this BuildWorkerImage.
        :type build_worker_image_id: int
        """
        if build_worker_image_id is None:
            raise ValueError("Invalid value for `build_worker_image_id`, must not be `None`")
        if build_worker_image_id is not None and build_worker_image_id < 0:
            raise ValueError("Invalid value for `build_worker_image_id`, must be a value greater than or equal to `0`")

        self._build_worker_image_id = build_worker_image_id

    @property
    def name(self):
        """Gets the name of this BuildWorkerImage.


        :return: The name of this BuildWorkerImage.
        :rtype: BuildWorkerImageName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildWorkerImage.


        :param name: The name of this BuildWorkerImage.
        :type name: BuildWorkerImageName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os_type(self):
        """Gets the os_type of this BuildWorkerImage.


        :return: The os_type of this BuildWorkerImage.
        :rtype: OSType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this BuildWorkerImage.


        :param os_type: The os_type of this BuildWorkerImage.
        :type os_type: OSType
        """

        self._os_type = os_type
