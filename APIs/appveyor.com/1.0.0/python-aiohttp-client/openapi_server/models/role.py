# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Role(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, updated: datetime=None, is_system: bool=None, name: str=None, role_id: int=None):
        """Role - a model defined in OpenAPI

        :param created: The created of this Role.
        :param updated: The updated of this Role.
        :param is_system: The is_system of this Role.
        :param name: The name of this Role.
        :param role_id: The role_id of this Role.
        """
        self.openapi_types = {
            'created': datetime,
            'updated': datetime,
            'is_system': bool,
            'name': str,
            'role_id': int
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'is_system': 'isSystem',
            'name': 'name',
            'role_id': 'roleId'
        }

        self._created = created
        self._updated = updated
        self._is_system = is_system
        self._name = name
        self._role_id = role_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Role of this Role.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Role.


        :return: The created of this Role.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Role.


        :param created: The created of this Role.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Role.


        :return: The updated of this Role.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Role.


        :param updated: The updated of this Role.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def is_system(self):
        """Gets the is_system of this Role.


        :return: The is_system of this Role.
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this Role.


        :param is_system: The is_system of this Role.
        :type is_system: bool
        """

        self._is_system = is_system

    @property
    def name(self):
        """Gets the name of this Role.


        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def role_id(self):
        """Gets the role_id of this Role.


        :return: The role_id of this Role.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this Role.


        :param role_id: The role_id of this Role.
        :type role_id: int
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")
        if role_id is not None and role_id < 0:
            raise ValueError("Invalid value for `role_id`, must be a value greater than or equal to `0`")

        self._role_id = role_id
