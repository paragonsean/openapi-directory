# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_lookup_model import BuildLookupModel
from openapi_server.models.project_lookup_model import ProjectLookupModel
from openapi_server.models.status import Status
from openapi_server import util


class EnvironmentDeploymentModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: BuildLookupModel=None, deployment_id: int=None, finished: datetime=None, started: datetime=None, status: Status=None, project: ProjectLookupModel=None):
        """EnvironmentDeploymentModel - a model defined in OpenAPI

        :param build: The build of this EnvironmentDeploymentModel.
        :param deployment_id: The deployment_id of this EnvironmentDeploymentModel.
        :param finished: The finished of this EnvironmentDeploymentModel.
        :param started: The started of this EnvironmentDeploymentModel.
        :param status: The status of this EnvironmentDeploymentModel.
        :param project: The project of this EnvironmentDeploymentModel.
        """
        self.openapi_types = {
            'build': BuildLookupModel,
            'deployment_id': int,
            'finished': datetime,
            'started': datetime,
            'status': Status,
            'project': ProjectLookupModel
        }

        self.attribute_map = {
            'build': 'build',
            'deployment_id': 'deploymentId',
            'finished': 'finished',
            'started': 'started',
            'status': 'status',
            'project': 'project'
        }

        self._build = build
        self._deployment_id = deployment_id
        self._finished = finished
        self._started = started
        self._status = status
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentDeploymentModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentDeploymentModel of this EnvironmentDeploymentModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this EnvironmentDeploymentModel.


        :return: The build of this EnvironmentDeploymentModel.
        :rtype: BuildLookupModel
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this EnvironmentDeploymentModel.


        :param build: The build of this EnvironmentDeploymentModel.
        :type build: BuildLookupModel
        """

        self._build = build

    @property
    def deployment_id(self):
        """Gets the deployment_id of this EnvironmentDeploymentModel.


        :return: The deployment_id of this EnvironmentDeploymentModel.
        :rtype: int
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this EnvironmentDeploymentModel.


        :param deployment_id: The deployment_id of this EnvironmentDeploymentModel.
        :type deployment_id: int
        """
        if deployment_id is not None and deployment_id < 0:
            raise ValueError("Invalid value for `deployment_id`, must be a value greater than or equal to `0`")

        self._deployment_id = deployment_id

    @property
    def finished(self):
        """Gets the finished of this EnvironmentDeploymentModel.


        :return: The finished of this EnvironmentDeploymentModel.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this EnvironmentDeploymentModel.


        :param finished: The finished of this EnvironmentDeploymentModel.
        :type finished: datetime
        """

        self._finished = finished

    @property
    def started(self):
        """Gets the started of this EnvironmentDeploymentModel.


        :return: The started of this EnvironmentDeploymentModel.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this EnvironmentDeploymentModel.


        :param started: The started of this EnvironmentDeploymentModel.
        :type started: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this EnvironmentDeploymentModel.


        :return: The status of this EnvironmentDeploymentModel.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvironmentDeploymentModel.


        :param status: The status of this EnvironmentDeploymentModel.
        :type status: Status
        """

        self._status = status

    @property
    def project(self):
        """Gets the project of this EnvironmentDeploymentModel.


        :return: The project of this EnvironmentDeploymentModel.
        :rtype: ProjectLookupModel
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this EnvironmentDeploymentModel.


        :param project: The project of this EnvironmentDeploymentModel.
        :type project: ProjectLookupModel
        """

        self._project = project
