# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.session_user_account_model import SessionUserAccountModel
from openapi_server.models.session_user_model import SessionUserModel
from openapi_server import util


class SessionModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[SessionUserAccountModel]=None, setup_required: bool=None, two_factor_auth_required: bool=None, user: SessionUserModel=None):
        """SessionModel - a model defined in OpenAPI

        :param accounts: The accounts of this SessionModel.
        :param setup_required: The setup_required of this SessionModel.
        :param two_factor_auth_required: The two_factor_auth_required of this SessionModel.
        :param user: The user of this SessionModel.
        """
        self.openapi_types = {
            'accounts': List[SessionUserAccountModel],
            'setup_required': bool,
            'two_factor_auth_required': bool,
            'user': SessionUserModel
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'setup_required': 'setupRequired',
            'two_factor_auth_required': 'twoFactorAuthRequired',
            'user': 'user'
        }

        self._accounts = accounts
        self._setup_required = setup_required
        self._two_factor_auth_required = two_factor_auth_required
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionModel of this SessionModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this SessionModel.


        :return: The accounts of this SessionModel.
        :rtype: List[SessionUserAccountModel]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SessionModel.


        :param accounts: The accounts of this SessionModel.
        :type accounts: List[SessionUserAccountModel]
        """

        self._accounts = accounts

    @property
    def setup_required(self):
        """Gets the setup_required of this SessionModel.


        :return: The setup_required of this SessionModel.
        :rtype: bool
        """
        return self._setup_required

    @setup_required.setter
    def setup_required(self, setup_required):
        """Sets the setup_required of this SessionModel.


        :param setup_required: The setup_required of this SessionModel.
        :type setup_required: bool
        """

        self._setup_required = setup_required

    @property
    def two_factor_auth_required(self):
        """Gets the two_factor_auth_required of this SessionModel.


        :return: The two_factor_auth_required of this SessionModel.
        :rtype: bool
        """
        return self._two_factor_auth_required

    @two_factor_auth_required.setter
    def two_factor_auth_required(self, two_factor_auth_required):
        """Sets the two_factor_auth_required of this SessionModel.


        :param two_factor_auth_required: The two_factor_auth_required of this SessionModel.
        :type two_factor_auth_required: bool
        """

        self._two_factor_auth_required = two_factor_auth_required

    @property
    def user(self):
        """Gets the user of this SessionModel.


        :return: The user of this SessionModel.
        :rtype: SessionUserModel
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SessionModel.


        :param user: The user of this SessionModel.
        :type user: SessionUserModel
        """

        self._user = user
