# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_environment_project import DeploymentEnvironmentProject
from openapi_server.models.deployment_environment_settings import DeploymentEnvironmentSettings
from openapi_server.models.deployment_project_selection_mode import DeploymentProjectSelectionMode
from openapi_server.models.deployment_provider_type import DeploymentProviderType
from openapi_server.models.security_descriptor import SecurityDescriptor
from openapi_server import util


class DeploymentEnvironmentWithSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_environment_id: int=None, name: str=None, provider: DeploymentProviderType=None, created: datetime=None, updated: datetime=None, account_id: int=None, projects_mode: DeploymentProjectSelectionMode=None, security_descriptor: SecurityDescriptor=None, tags: str=None, environment_access_key: str=None, projects: List[DeploymentEnvironmentProject]=None, selected_projects: List[int]=None, settings: DeploymentEnvironmentSettings=None):
        """DeploymentEnvironmentWithSettings - a model defined in OpenAPI

        :param deployment_environment_id: The deployment_environment_id of this DeploymentEnvironmentWithSettings.
        :param name: The name of this DeploymentEnvironmentWithSettings.
        :param provider: The provider of this DeploymentEnvironmentWithSettings.
        :param created: The created of this DeploymentEnvironmentWithSettings.
        :param updated: The updated of this DeploymentEnvironmentWithSettings.
        :param account_id: The account_id of this DeploymentEnvironmentWithSettings.
        :param projects_mode: The projects_mode of this DeploymentEnvironmentWithSettings.
        :param security_descriptor: The security_descriptor of this DeploymentEnvironmentWithSettings.
        :param tags: The tags of this DeploymentEnvironmentWithSettings.
        :param environment_access_key: The environment_access_key of this DeploymentEnvironmentWithSettings.
        :param projects: The projects of this DeploymentEnvironmentWithSettings.
        :param selected_projects: The selected_projects of this DeploymentEnvironmentWithSettings.
        :param settings: The settings of this DeploymentEnvironmentWithSettings.
        """
        self.openapi_types = {
            'deployment_environment_id': int,
            'name': str,
            'provider': DeploymentProviderType,
            'created': datetime,
            'updated': datetime,
            'account_id': int,
            'projects_mode': DeploymentProjectSelectionMode,
            'security_descriptor': SecurityDescriptor,
            'tags': str,
            'environment_access_key': str,
            'projects': List[DeploymentEnvironmentProject],
            'selected_projects': List[int],
            'settings': DeploymentEnvironmentSettings
        }

        self.attribute_map = {
            'deployment_environment_id': 'deploymentEnvironmentId',
            'name': 'name',
            'provider': 'provider',
            'created': 'created',
            'updated': 'updated',
            'account_id': 'accountId',
            'projects_mode': 'projectsMode',
            'security_descriptor': 'securityDescriptor',
            'tags': 'tags',
            'environment_access_key': 'environmentAccessKey',
            'projects': 'projects',
            'selected_projects': 'selectedProjects',
            'settings': 'settings'
        }

        self._deployment_environment_id = deployment_environment_id
        self._name = name
        self._provider = provider
        self._created = created
        self._updated = updated
        self._account_id = account_id
        self._projects_mode = projects_mode
        self._security_descriptor = security_descriptor
        self._tags = tags
        self._environment_access_key = environment_access_key
        self._projects = projects
        self._selected_projects = selected_projects
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentEnvironmentWithSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentEnvironmentWithSettings of this DeploymentEnvironmentWithSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_environment_id(self):
        """Gets the deployment_environment_id of this DeploymentEnvironmentWithSettings.


        :return: The deployment_environment_id of this DeploymentEnvironmentWithSettings.
        :rtype: int
        """
        return self._deployment_environment_id

    @deployment_environment_id.setter
    def deployment_environment_id(self, deployment_environment_id):
        """Sets the deployment_environment_id of this DeploymentEnvironmentWithSettings.


        :param deployment_environment_id: The deployment_environment_id of this DeploymentEnvironmentWithSettings.
        :type deployment_environment_id: int
        """
        if deployment_environment_id is not None and deployment_environment_id < 0:
            raise ValueError("Invalid value for `deployment_environment_id`, must be a value greater than or equal to `0`")

        self._deployment_environment_id = deployment_environment_id

    @property
    def name(self):
        """Gets the name of this DeploymentEnvironmentWithSettings.


        :return: The name of this DeploymentEnvironmentWithSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentEnvironmentWithSettings.


        :param name: The name of this DeploymentEnvironmentWithSettings.
        :type name: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this DeploymentEnvironmentWithSettings.


        :return: The provider of this DeploymentEnvironmentWithSettings.
        :rtype: DeploymentProviderType
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DeploymentEnvironmentWithSettings.


        :param provider: The provider of this DeploymentEnvironmentWithSettings.
        :type provider: DeploymentProviderType
        """

        self._provider = provider

    @property
    def created(self):
        """Gets the created of this DeploymentEnvironmentWithSettings.


        :return: The created of this DeploymentEnvironmentWithSettings.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DeploymentEnvironmentWithSettings.


        :param created: The created of this DeploymentEnvironmentWithSettings.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this DeploymentEnvironmentWithSettings.


        :return: The updated of this DeploymentEnvironmentWithSettings.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DeploymentEnvironmentWithSettings.


        :param updated: The updated of this DeploymentEnvironmentWithSettings.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def account_id(self):
        """Gets the account_id of this DeploymentEnvironmentWithSettings.


        :return: The account_id of this DeploymentEnvironmentWithSettings.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DeploymentEnvironmentWithSettings.


        :param account_id: The account_id of this DeploymentEnvironmentWithSettings.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def projects_mode(self):
        """Gets the projects_mode of this DeploymentEnvironmentWithSettings.


        :return: The projects_mode of this DeploymentEnvironmentWithSettings.
        :rtype: DeploymentProjectSelectionMode
        """
        return self._projects_mode

    @projects_mode.setter
    def projects_mode(self, projects_mode):
        """Sets the projects_mode of this DeploymentEnvironmentWithSettings.


        :param projects_mode: The projects_mode of this DeploymentEnvironmentWithSettings.
        :type projects_mode: DeploymentProjectSelectionMode
        """

        self._projects_mode = projects_mode

    @property
    def security_descriptor(self):
        """Gets the security_descriptor of this DeploymentEnvironmentWithSettings.


        :return: The security_descriptor of this DeploymentEnvironmentWithSettings.
        :rtype: SecurityDescriptor
        """
        return self._security_descriptor

    @security_descriptor.setter
    def security_descriptor(self, security_descriptor):
        """Sets the security_descriptor of this DeploymentEnvironmentWithSettings.


        :param security_descriptor: The security_descriptor of this DeploymentEnvironmentWithSettings.
        :type security_descriptor: SecurityDescriptor
        """

        self._security_descriptor = security_descriptor

    @property
    def tags(self):
        """Gets the tags of this DeploymentEnvironmentWithSettings.

        Comma-separated list of environment tags for dynamic grouping. Appears that any input is accepted.  The returned value only contains case-preserving but insensitive unique values where spaces around \",\" are removed but otherwise preserved.  Empty values and items are allowed.

        :return: The tags of this DeploymentEnvironmentWithSettings.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeploymentEnvironmentWithSettings.

        Comma-separated list of environment tags for dynamic grouping. Appears that any input is accepted.  The returned value only contains case-preserving but insensitive unique values where spaces around \",\" are removed but otherwise preserved.  Empty values and items are allowed.

        :param tags: The tags of this DeploymentEnvironmentWithSettings.
        :type tags: str
        """

        self._tags = tags

    @property
    def environment_access_key(self):
        """Gets the environment_access_key of this DeploymentEnvironmentWithSettings.


        :return: The environment_access_key of this DeploymentEnvironmentWithSettings.
        :rtype: str
        """
        return self._environment_access_key

    @environment_access_key.setter
    def environment_access_key(self, environment_access_key):
        """Sets the environment_access_key of this DeploymentEnvironmentWithSettings.


        :param environment_access_key: The environment_access_key of this DeploymentEnvironmentWithSettings.
        :type environment_access_key: str
        """

        self._environment_access_key = environment_access_key

    @property
    def projects(self):
        """Gets the projects of this DeploymentEnvironmentWithSettings.

        Projects available for selection in UI. Only present in response from getEnvironmentSettings. 

        :return: The projects of this DeploymentEnvironmentWithSettings.
        :rtype: List[DeploymentEnvironmentProject]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this DeploymentEnvironmentWithSettings.

        Projects available for selection in UI. Only present in response from getEnvironmentSettings. 

        :param projects: The projects of this DeploymentEnvironmentWithSettings.
        :type projects: List[DeploymentEnvironmentProject]
        """

        self._projects = projects

    @property
    def selected_projects(self):
        """Gets the selected_projects of this DeploymentEnvironmentWithSettings.

        Project IDs of selected projects

        :return: The selected_projects of this DeploymentEnvironmentWithSettings.
        :rtype: List[int]
        """
        return self._selected_projects

    @selected_projects.setter
    def selected_projects(self, selected_projects):
        """Sets the selected_projects of this DeploymentEnvironmentWithSettings.

        Project IDs of selected projects

        :param selected_projects: The selected_projects of this DeploymentEnvironmentWithSettings.
        :type selected_projects: List[int]
        """

        self._selected_projects = selected_projects

    @property
    def settings(self):
        """Gets the settings of this DeploymentEnvironmentWithSettings.


        :return: The settings of this DeploymentEnvironmentWithSettings.
        :rtype: DeploymentEnvironmentSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DeploymentEnvironmentWithSettings.


        :param settings: The settings of this DeploymentEnvironmentWithSettings.
        :type settings: DeploymentEnvironmentSettings
        """

        self._settings = settings
