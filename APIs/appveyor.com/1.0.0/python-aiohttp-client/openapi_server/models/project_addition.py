# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_authentication_type import RepositoryAuthenticationType
from openapi_server.models.repository_provider import RepositoryProvider
from openapi_server import util


class ProjectAddition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_authentication: RepositoryAuthenticationType=None, repository_name: str=None, repository_password: str=None, repository_provider: RepositoryProvider=None, repository_username: str=None):
        """ProjectAddition - a model defined in OpenAPI

        :param repository_authentication: The repository_authentication of this ProjectAddition.
        :param repository_name: The repository_name of this ProjectAddition.
        :param repository_password: The repository_password of this ProjectAddition.
        :param repository_provider: The repository_provider of this ProjectAddition.
        :param repository_username: The repository_username of this ProjectAddition.
        """
        self.openapi_types = {
            'repository_authentication': RepositoryAuthenticationType,
            'repository_name': str,
            'repository_password': str,
            'repository_provider': RepositoryProvider,
            'repository_username': str
        }

        self.attribute_map = {
            'repository_authentication': 'repositoryAuthentication',
            'repository_name': 'repositoryName',
            'repository_password': 'repositoryPassword',
            'repository_provider': 'repositoryProvider',
            'repository_username': 'repositoryUsername'
        }

        self._repository_authentication = repository_authentication
        self._repository_name = repository_name
        self._repository_password = repository_password
        self._repository_provider = repository_provider
        self._repository_username = repository_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectAddition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectAddition of this ProjectAddition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_authentication(self):
        """Gets the repository_authentication of this ProjectAddition.


        :return: The repository_authentication of this ProjectAddition.
        :rtype: RepositoryAuthenticationType
        """
        return self._repository_authentication

    @repository_authentication.setter
    def repository_authentication(self, repository_authentication):
        """Sets the repository_authentication of this ProjectAddition.


        :param repository_authentication: The repository_authentication of this ProjectAddition.
        :type repository_authentication: RepositoryAuthenticationType
        """

        self._repository_authentication = repository_authentication

    @property
    def repository_name(self):
        """Gets the repository_name of this ProjectAddition.

        URL when repositoryProvider is git, mercurial, subversion username/project when repositoryProvider is gitHub

        :return: The repository_name of this ProjectAddition.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this ProjectAddition.

        URL when repositoryProvider is git, mercurial, subversion username/project when repositoryProvider is gitHub

        :param repository_name: The repository_name of this ProjectAddition.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")
        if repository_name is not None and len(repository_name) < 1:
            raise ValueError("Invalid value for `repository_name`, length must be greater than or equal to `1`")

        self._repository_name = repository_name

    @property
    def repository_password(self):
        """Gets the repository_password of this ProjectAddition.

        Required if repositoryAuthentication is credentials

        :return: The repository_password of this ProjectAddition.
        :rtype: str
        """
        return self._repository_password

    @repository_password.setter
    def repository_password(self, repository_password):
        """Sets the repository_password of this ProjectAddition.

        Required if repositoryAuthentication is credentials

        :param repository_password: The repository_password of this ProjectAddition.
        :type repository_password: str
        """

        self._repository_password = repository_password

    @property
    def repository_provider(self):
        """Gets the repository_provider of this ProjectAddition.


        :return: The repository_provider of this ProjectAddition.
        :rtype: RepositoryProvider
        """
        return self._repository_provider

    @repository_provider.setter
    def repository_provider(self, repository_provider):
        """Sets the repository_provider of this ProjectAddition.


        :param repository_provider: The repository_provider of this ProjectAddition.
        :type repository_provider: RepositoryProvider
        """
        if repository_provider is None:
            raise ValueError("Invalid value for `repository_provider`, must not be `None`")

        self._repository_provider = repository_provider

    @property
    def repository_username(self):
        """Gets the repository_username of this ProjectAddition.

        Required if repositoryAuthentication is credentials

        :return: The repository_username of this ProjectAddition.
        :rtype: str
        """
        return self._repository_username

    @repository_username.setter
    def repository_username(self, repository_username):
        """Sets the repository_username of this ProjectAddition.

        Required if repositoryAuthentication is credentials

        :param repository_username: The repository_username of this ProjectAddition.
        :type repository_username: str
        """

        self._repository_username = repository_username
