# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_name import GroupName
from openapi_server.models.permission_state import PermissionState
from openapi_server import util


class GroupPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: GroupName=None, permissions: List[PermissionState]=None):
        """GroupPermissions - a model defined in OpenAPI

        :param name: The name of this GroupPermissions.
        :param permissions: The permissions of this GroupPermissions.
        """
        self.openapi_types = {
            'name': GroupName,
            'permissions': List[PermissionState]
        }

        self.attribute_map = {
            'name': 'name',
            'permissions': 'permissions'
        }

        self._name = name
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupPermissions of this GroupPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GroupPermissions.


        :return: The name of this GroupPermissions.
        :rtype: GroupName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupPermissions.


        :param name: The name of this GroupPermissions.
        :type name: GroupName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this GroupPermissions.


        :return: The permissions of this GroupPermissions.
        :rtype: List[PermissionState]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GroupPermissions.


        :param permissions: The permissions of this GroupPermissions.
        :type permissions: List[PermissionState]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions
