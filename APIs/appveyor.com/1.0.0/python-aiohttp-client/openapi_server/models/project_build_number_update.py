# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectBuildNumberUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_build_number: int=None):
        """ProjectBuildNumberUpdate - a model defined in OpenAPI

        :param next_build_number: The next_build_number of this ProjectBuildNumberUpdate.
        """
        self.openapi_types = {
            'next_build_number': int
        }

        self.attribute_map = {
            'next_build_number': 'nextBuildNumber'
        }

        self._next_build_number = next_build_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectBuildNumberUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectBuildNumberUpdate of this ProjectBuildNumberUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_build_number(self):
        """Gets the next_build_number of this ProjectBuildNumberUpdate.


        :return: The next_build_number of this ProjectBuildNumberUpdate.
        :rtype: int
        """
        return self._next_build_number

    @next_build_number.setter
    def next_build_number(self, next_build_number):
        """Sets the next_build_number of this ProjectBuildNumberUpdate.


        :param next_build_number: The next_build_number of this ProjectBuildNumberUpdate.
        :type next_build_number: int
        """
        if next_build_number is None:
            raise ValueError("Invalid value for `next_build_number`, must not be `None`")
        if next_build_number is not None and next_build_number < 0:
            raise ValueError("Invalid value for `next_build_number`, must be a value greater than or equal to `0`")

        self._next_build_number = next_build_number
