# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_type import ArtifactType
from openapi_server import util


class ArtifactModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, file_name: str=None, name: str=None, size: int=None, type: ArtifactType=None, url: str=None):
        """ArtifactModel - a model defined in OpenAPI

        :param created: The created of this ArtifactModel.
        :param file_name: The file_name of this ArtifactModel.
        :param name: The name of this ArtifactModel.
        :param size: The size of this ArtifactModel.
        :param type: The type of this ArtifactModel.
        :param url: The url of this ArtifactModel.
        """
        self.openapi_types = {
            'created': datetime,
            'file_name': str,
            'name': str,
            'size': int,
            'type': ArtifactType,
            'url': str
        }

        self.attribute_map = {
            'created': 'created',
            'file_name': 'fileName',
            'name': 'name',
            'size': 'size',
            'type': 'type',
            'url': 'url'
        }

        self._created = created
        self._file_name = file_name
        self._name = name
        self._size = size
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactModel of this ArtifactModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ArtifactModel.


        :return: The created of this ArtifactModel.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ArtifactModel.


        :param created: The created of this ArtifactModel.
        :type created: datetime
        """

        self._created = created

    @property
    def file_name(self):
        """Gets the file_name of this ArtifactModel.


        :return: The file_name of this ArtifactModel.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ArtifactModel.


        :param file_name: The file_name of this ArtifactModel.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def name(self):
        """Gets the name of this ArtifactModel.


        :return: The name of this ArtifactModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtifactModel.


        :param name: The name of this ArtifactModel.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ArtifactModel.


        :return: The size of this ArtifactModel.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ArtifactModel.


        :param size: The size of this ArtifactModel.
        :type size: int
        """
        if size is not None and size < 0:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this ArtifactModel.


        :return: The type of this ArtifactModel.
        :rtype: ArtifactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArtifactModel.


        :param type: The type of this ArtifactModel.
        :type type: ArtifactType
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this ArtifactModel.

        This property has not been observed in JSON responses, but is present and nil in XML responses. 

        :return: The url of this ArtifactModel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArtifactModel.

        This property has not been observed in JSON responses, but is present and nil in XML responses. 

        :param url: The url of this ArtifactModel.
        :type url: str
        """

        self._url = url
