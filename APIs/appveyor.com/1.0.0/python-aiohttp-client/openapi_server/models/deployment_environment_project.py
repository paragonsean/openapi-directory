# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentEnvironmentProject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_selected: bool=None, name: str=None, project_id: int=None):
        """DeploymentEnvironmentProject - a model defined in OpenAPI

        :param is_selected: The is_selected of this DeploymentEnvironmentProject.
        :param name: The name of this DeploymentEnvironmentProject.
        :param project_id: The project_id of this DeploymentEnvironmentProject.
        """
        self.openapi_types = {
            'is_selected': bool,
            'name': str,
            'project_id': int
        }

        self.attribute_map = {
            'is_selected': 'isSelected',
            'name': 'name',
            'project_id': 'projectId'
        }

        self._is_selected = is_selected
        self._name = name
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentEnvironmentProject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentEnvironmentProject of this DeploymentEnvironmentProject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_selected(self):
        """Gets the is_selected of this DeploymentEnvironmentProject.


        :return: The is_selected of this DeploymentEnvironmentProject.
        :rtype: bool
        """
        return self._is_selected

    @is_selected.setter
    def is_selected(self, is_selected):
        """Sets the is_selected of this DeploymentEnvironmentProject.


        :param is_selected: The is_selected of this DeploymentEnvironmentProject.
        :type is_selected: bool
        """
        if is_selected is None:
            raise ValueError("Invalid value for `is_selected`, must not be `None`")

        self._is_selected = is_selected

    @property
    def name(self):
        """Gets the name of this DeploymentEnvironmentProject.


        :return: The name of this DeploymentEnvironmentProject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentEnvironmentProject.


        :param name: The name of this DeploymentEnvironmentProject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this DeploymentEnvironmentProject.


        :return: The project_id of this DeploymentEnvironmentProject.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DeploymentEnvironmentProject.


        :param project_id: The project_id of this DeploymentEnvironmentProject.
        :type project_id: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")
        if project_id is not None and project_id < 0:
            raise ValueError("Invalid value for `project_id`, must be a value greater than or equal to `0`")

        self._project_id = project_id
