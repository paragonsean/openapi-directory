# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ace_access_right import AceAccessRight
from openapi_server import util


class RoleAce(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_rights: List[AceAccessRight]=None, is_admin: bool=None, name: str=None, role_id: int=None):
        """RoleAce - a model defined in OpenAPI

        :param access_rights: The access_rights of this RoleAce.
        :param is_admin: The is_admin of this RoleAce.
        :param name: The name of this RoleAce.
        :param role_id: The role_id of this RoleAce.
        """
        self.openapi_types = {
            'access_rights': List[AceAccessRight],
            'is_admin': bool,
            'name': str,
            'role_id': int
        }

        self.attribute_map = {
            'access_rights': 'accessRights',
            'is_admin': 'isAdmin',
            'name': 'name',
            'role_id': 'roleId'
        }

        self._access_rights = access_rights
        self._is_admin = is_admin
        self._name = name
        self._role_id = role_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleAce':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleAce of this RoleAce.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_rights(self):
        """Gets the access_rights of this RoleAce.


        :return: The access_rights of this RoleAce.
        :rtype: List[AceAccessRight]
        """
        return self._access_rights

    @access_rights.setter
    def access_rights(self, access_rights):
        """Sets the access_rights of this RoleAce.


        :param access_rights: The access_rights of this RoleAce.
        :type access_rights: List[AceAccessRight]
        """

        self._access_rights = access_rights

    @property
    def is_admin(self):
        """Gets the is_admin of this RoleAce.


        :return: The is_admin of this RoleAce.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this RoleAce.


        :param is_admin: The is_admin of this RoleAce.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def name(self):
        """Gets the name of this RoleAce.


        :return: The name of this RoleAce.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleAce.


        :param name: The name of this RoleAce.
        :type name: str
        """

        self._name = name

    @property
    def role_id(self):
        """Gets the role_id of this RoleAce.


        :return: The role_id of this RoleAce.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RoleAce.


        :param role_id: The role_id of this RoleAce.
        :type role_id: int
        """
        if role_id is not None and role_id < 0:
            raise ValueError("Invalid value for `role_id`, must be a value greater than or equal to `0`")

        self._role_id = role_id
