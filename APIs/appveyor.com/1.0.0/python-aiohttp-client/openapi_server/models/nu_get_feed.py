# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NuGetFeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, updated: datetime=None, account_id: int=None, id: str=None, is_private_project: bool=None, name: str=None, nu_get_feed_id: int=None, project_id: int=None, publishing_enabled: bool=None):
        """NuGetFeed - a model defined in OpenAPI

        :param created: The created of this NuGetFeed.
        :param updated: The updated of this NuGetFeed.
        :param account_id: The account_id of this NuGetFeed.
        :param id: The id of this NuGetFeed.
        :param is_private_project: The is_private_project of this NuGetFeed.
        :param name: The name of this NuGetFeed.
        :param nu_get_feed_id: The nu_get_feed_id of this NuGetFeed.
        :param project_id: The project_id of this NuGetFeed.
        :param publishing_enabled: The publishing_enabled of this NuGetFeed.
        """
        self.openapi_types = {
            'created': datetime,
            'updated': datetime,
            'account_id': int,
            'id': str,
            'is_private_project': bool,
            'name': str,
            'nu_get_feed_id': int,
            'project_id': int,
            'publishing_enabled': bool
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'account_id': 'accountId',
            'id': 'id',
            'is_private_project': 'isPrivateProject',
            'name': 'name',
            'nu_get_feed_id': 'nuGetFeedId',
            'project_id': 'projectId',
            'publishing_enabled': 'publishingEnabled'
        }

        self._created = created
        self._updated = updated
        self._account_id = account_id
        self._id = id
        self._is_private_project = is_private_project
        self._name = name
        self._nu_get_feed_id = nu_get_feed_id
        self._project_id = project_id
        self._publishing_enabled = publishing_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NuGetFeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NuGetFeed of this NuGetFeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this NuGetFeed.


        :return: The created of this NuGetFeed.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NuGetFeed.


        :param created: The created of this NuGetFeed.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this NuGetFeed.


        :return: The updated of this NuGetFeed.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this NuGetFeed.


        :param updated: The updated of this NuGetFeed.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def account_id(self):
        """Gets the account_id of this NuGetFeed.


        :return: The account_id of this NuGetFeed.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this NuGetFeed.


        :param account_id: The account_id of this NuGetFeed.
        :type account_id: int
        """
        if account_id is not None and account_id < 0:
            raise ValueError("Invalid value for `account_id`, must be a value greater than or equal to `0`")

        self._account_id = account_id

    @property
    def id(self):
        """Gets the id of this NuGetFeed.


        :return: The id of this NuGetFeed.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NuGetFeed.


        :param id: The id of this NuGetFeed.
        :type id: str
        """

        self._id = id

    @property
    def is_private_project(self):
        """Gets the is_private_project of this NuGetFeed.


        :return: The is_private_project of this NuGetFeed.
        :rtype: bool
        """
        return self._is_private_project

    @is_private_project.setter
    def is_private_project(self, is_private_project):
        """Sets the is_private_project of this NuGetFeed.


        :param is_private_project: The is_private_project of this NuGetFeed.
        :type is_private_project: bool
        """

        self._is_private_project = is_private_project

    @property
    def name(self):
        """Gets the name of this NuGetFeed.


        :return: The name of this NuGetFeed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NuGetFeed.


        :param name: The name of this NuGetFeed.
        :type name: str
        """

        self._name = name

    @property
    def nu_get_feed_id(self):
        """Gets the nu_get_feed_id of this NuGetFeed.


        :return: The nu_get_feed_id of this NuGetFeed.
        :rtype: int
        """
        return self._nu_get_feed_id

    @nu_get_feed_id.setter
    def nu_get_feed_id(self, nu_get_feed_id):
        """Sets the nu_get_feed_id of this NuGetFeed.


        :param nu_get_feed_id: The nu_get_feed_id of this NuGetFeed.
        :type nu_get_feed_id: int
        """

        self._nu_get_feed_id = nu_get_feed_id

    @property
    def project_id(self):
        """Gets the project_id of this NuGetFeed.


        :return: The project_id of this NuGetFeed.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this NuGetFeed.


        :param project_id: The project_id of this NuGetFeed.
        :type project_id: int
        """
        if project_id is not None and project_id < 0:
            raise ValueError("Invalid value for `project_id`, must be a value greater than or equal to `0`")

        self._project_id = project_id

    @property
    def publishing_enabled(self):
        """Gets the publishing_enabled of this NuGetFeed.


        :return: The publishing_enabled of this NuGetFeed.
        :rtype: bool
        """
        return self._publishing_enabled

    @publishing_enabled.setter
    def publishing_enabled(self, publishing_enabled):
        """Sets the publishing_enabled of this NuGetFeed.


        :param publishing_enabled: The publishing_enabled of this NuGetFeed.
        :type publishing_enabled: bool
        """

        self._publishing_enabled = publishing_enabled
