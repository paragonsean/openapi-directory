# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_flags import FeatureFlags
from openapi_server.models.permission_name import PermissionName
from openapi_server.models.plan_name import PlanName
from openapi_server.models.plan_status import PlanStatus
from openapi_server import util


class SessionUserAccountModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, updated: datetime=None, account_id: int=None, allow_custom_build_environment: bool=None, blocked: bool=None, feature_flags: FeatureFlags=None, git_hub_plan: bool=None, git_hub_plan_org: str=None, is_collaborator: bool=None, is_enterprise_plan: bool=None, is_owner: bool=None, manual_payments: bool=None, name: str=None, permissions: List[PermissionName]=None, plan_end: datetime=None, plan_id: PlanName=None, plan_start: datetime=None, plan_status: PlanStatus=None, role_id: int=None, role_name: str=None, time_zone_id: str=None, unpaid: bool=None, unverified: bool=None):
        """SessionUserAccountModel - a model defined in OpenAPI

        :param created: The created of this SessionUserAccountModel.
        :param updated: The updated of this SessionUserAccountModel.
        :param account_id: The account_id of this SessionUserAccountModel.
        :param allow_custom_build_environment: The allow_custom_build_environment of this SessionUserAccountModel.
        :param blocked: The blocked of this SessionUserAccountModel.
        :param feature_flags: The feature_flags of this SessionUserAccountModel.
        :param git_hub_plan: The git_hub_plan of this SessionUserAccountModel.
        :param git_hub_plan_org: The git_hub_plan_org of this SessionUserAccountModel.
        :param is_collaborator: The is_collaborator of this SessionUserAccountModel.
        :param is_enterprise_plan: The is_enterprise_plan of this SessionUserAccountModel.
        :param is_owner: The is_owner of this SessionUserAccountModel.
        :param manual_payments: The manual_payments of this SessionUserAccountModel.
        :param name: The name of this SessionUserAccountModel.
        :param permissions: The permissions of this SessionUserAccountModel.
        :param plan_end: The plan_end of this SessionUserAccountModel.
        :param plan_id: The plan_id of this SessionUserAccountModel.
        :param plan_start: The plan_start of this SessionUserAccountModel.
        :param plan_status: The plan_status of this SessionUserAccountModel.
        :param role_id: The role_id of this SessionUserAccountModel.
        :param role_name: The role_name of this SessionUserAccountModel.
        :param time_zone_id: The time_zone_id of this SessionUserAccountModel.
        :param unpaid: The unpaid of this SessionUserAccountModel.
        :param unverified: The unverified of this SessionUserAccountModel.
        """
        self.openapi_types = {
            'created': datetime,
            'updated': datetime,
            'account_id': int,
            'allow_custom_build_environment': bool,
            'blocked': bool,
            'feature_flags': FeatureFlags,
            'git_hub_plan': bool,
            'git_hub_plan_org': str,
            'is_collaborator': bool,
            'is_enterprise_plan': bool,
            'is_owner': bool,
            'manual_payments': bool,
            'name': str,
            'permissions': List[PermissionName],
            'plan_end': datetime,
            'plan_id': PlanName,
            'plan_start': datetime,
            'plan_status': PlanStatus,
            'role_id': int,
            'role_name': str,
            'time_zone_id': str,
            'unpaid': bool,
            'unverified': bool
        }

        self.attribute_map = {
            'created': 'created',
            'updated': 'updated',
            'account_id': 'accountId',
            'allow_custom_build_environment': 'allowCustomBuildEnvironment',
            'blocked': 'blocked',
            'feature_flags': 'featureFlags',
            'git_hub_plan': 'gitHubPlan',
            'git_hub_plan_org': 'gitHubPlanOrg',
            'is_collaborator': 'isCollaborator',
            'is_enterprise_plan': 'isEnterprisePlan',
            'is_owner': 'isOwner',
            'manual_payments': 'manualPayments',
            'name': 'name',
            'permissions': 'permissions',
            'plan_end': 'planEnd',
            'plan_id': 'planId',
            'plan_start': 'planStart',
            'plan_status': 'planStatus',
            'role_id': 'roleId',
            'role_name': 'roleName',
            'time_zone_id': 'timeZoneId',
            'unpaid': 'unpaid',
            'unverified': 'unverified'
        }

        self._created = created
        self._updated = updated
        self._account_id = account_id
        self._allow_custom_build_environment = allow_custom_build_environment
        self._blocked = blocked
        self._feature_flags = feature_flags
        self._git_hub_plan = git_hub_plan
        self._git_hub_plan_org = git_hub_plan_org
        self._is_collaborator = is_collaborator
        self._is_enterprise_plan = is_enterprise_plan
        self._is_owner = is_owner
        self._manual_payments = manual_payments
        self._name = name
        self._permissions = permissions
        self._plan_end = plan_end
        self._plan_id = plan_id
        self._plan_start = plan_start
        self._plan_status = plan_status
        self._role_id = role_id
        self._role_name = role_name
        self._time_zone_id = time_zone_id
        self._unpaid = unpaid
        self._unverified = unverified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionUserAccountModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionUserAccountModel of this SessionUserAccountModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this SessionUserAccountModel.


        :return: The created of this SessionUserAccountModel.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SessionUserAccountModel.


        :param created: The created of this SessionUserAccountModel.
        :type created: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this SessionUserAccountModel.


        :return: The updated of this SessionUserAccountModel.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SessionUserAccountModel.


        :param updated: The updated of this SessionUserAccountModel.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def account_id(self):
        """Gets the account_id of this SessionUserAccountModel.


        :return: The account_id of this SessionUserAccountModel.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SessionUserAccountModel.


        :param account_id: The account_id of this SessionUserAccountModel.
        :type account_id: int
        """
        if account_id is not None and account_id < 0:
            raise ValueError("Invalid value for `account_id`, must be a value greater than or equal to `0`")

        self._account_id = account_id

    @property
    def allow_custom_build_environment(self):
        """Gets the allow_custom_build_environment of this SessionUserAccountModel.


        :return: The allow_custom_build_environment of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._allow_custom_build_environment

    @allow_custom_build_environment.setter
    def allow_custom_build_environment(self, allow_custom_build_environment):
        """Sets the allow_custom_build_environment of this SessionUserAccountModel.


        :param allow_custom_build_environment: The allow_custom_build_environment of this SessionUserAccountModel.
        :type allow_custom_build_environment: bool
        """

        self._allow_custom_build_environment = allow_custom_build_environment

    @property
    def blocked(self):
        """Gets the blocked of this SessionUserAccountModel.


        :return: The blocked of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this SessionUserAccountModel.


        :param blocked: The blocked of this SessionUserAccountModel.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def feature_flags(self):
        """Gets the feature_flags of this SessionUserAccountModel.


        :return: The feature_flags of this SessionUserAccountModel.
        :rtype: FeatureFlags
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this SessionUserAccountModel.


        :param feature_flags: The feature_flags of this SessionUserAccountModel.
        :type feature_flags: FeatureFlags
        """

        self._feature_flags = feature_flags

    @property
    def git_hub_plan(self):
        """Gets the git_hub_plan of this SessionUserAccountModel.


        :return: The git_hub_plan of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._git_hub_plan

    @git_hub_plan.setter
    def git_hub_plan(self, git_hub_plan):
        """Sets the git_hub_plan of this SessionUserAccountModel.


        :param git_hub_plan: The git_hub_plan of this SessionUserAccountModel.
        :type git_hub_plan: bool
        """

        self._git_hub_plan = git_hub_plan

    @property
    def git_hub_plan_org(self):
        """Gets the git_hub_plan_org of this SessionUserAccountModel.


        :return: The git_hub_plan_org of this SessionUserAccountModel.
        :rtype: str
        """
        return self._git_hub_plan_org

    @git_hub_plan_org.setter
    def git_hub_plan_org(self, git_hub_plan_org):
        """Sets the git_hub_plan_org of this SessionUserAccountModel.


        :param git_hub_plan_org: The git_hub_plan_org of this SessionUserAccountModel.
        :type git_hub_plan_org: str
        """

        self._git_hub_plan_org = git_hub_plan_org

    @property
    def is_collaborator(self):
        """Gets the is_collaborator of this SessionUserAccountModel.


        :return: The is_collaborator of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._is_collaborator

    @is_collaborator.setter
    def is_collaborator(self, is_collaborator):
        """Sets the is_collaborator of this SessionUserAccountModel.


        :param is_collaborator: The is_collaborator of this SessionUserAccountModel.
        :type is_collaborator: bool
        """

        self._is_collaborator = is_collaborator

    @property
    def is_enterprise_plan(self):
        """Gets the is_enterprise_plan of this SessionUserAccountModel.


        :return: The is_enterprise_plan of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._is_enterprise_plan

    @is_enterprise_plan.setter
    def is_enterprise_plan(self, is_enterprise_plan):
        """Sets the is_enterprise_plan of this SessionUserAccountModel.


        :param is_enterprise_plan: The is_enterprise_plan of this SessionUserAccountModel.
        :type is_enterprise_plan: bool
        """

        self._is_enterprise_plan = is_enterprise_plan

    @property
    def is_owner(self):
        """Gets the is_owner of this SessionUserAccountModel.


        :return: The is_owner of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this SessionUserAccountModel.


        :param is_owner: The is_owner of this SessionUserAccountModel.
        :type is_owner: bool
        """

        self._is_owner = is_owner

    @property
    def manual_payments(self):
        """Gets the manual_payments of this SessionUserAccountModel.


        :return: The manual_payments of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._manual_payments

    @manual_payments.setter
    def manual_payments(self, manual_payments):
        """Sets the manual_payments of this SessionUserAccountModel.


        :param manual_payments: The manual_payments of this SessionUserAccountModel.
        :type manual_payments: bool
        """

        self._manual_payments = manual_payments

    @property
    def name(self):
        """Gets the name of this SessionUserAccountModel.


        :return: The name of this SessionUserAccountModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SessionUserAccountModel.


        :param name: The name of this SessionUserAccountModel.
        :type name: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this SessionUserAccountModel.


        :return: The permissions of this SessionUserAccountModel.
        :rtype: List[PermissionName]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this SessionUserAccountModel.


        :param permissions: The permissions of this SessionUserAccountModel.
        :type permissions: List[PermissionName]
        """

        self._permissions = permissions

    @property
    def plan_end(self):
        """Gets the plan_end of this SessionUserAccountModel.


        :return: The plan_end of this SessionUserAccountModel.
        :rtype: datetime
        """
        return self._plan_end

    @plan_end.setter
    def plan_end(self, plan_end):
        """Sets the plan_end of this SessionUserAccountModel.


        :param plan_end: The plan_end of this SessionUserAccountModel.
        :type plan_end: datetime
        """

        self._plan_end = plan_end

    @property
    def plan_id(self):
        """Gets the plan_id of this SessionUserAccountModel.


        :return: The plan_id of this SessionUserAccountModel.
        :rtype: PlanName
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this SessionUserAccountModel.


        :param plan_id: The plan_id of this SessionUserAccountModel.
        :type plan_id: PlanName
        """

        self._plan_id = plan_id

    @property
    def plan_start(self):
        """Gets the plan_start of this SessionUserAccountModel.


        :return: The plan_start of this SessionUserAccountModel.
        :rtype: datetime
        """
        return self._plan_start

    @plan_start.setter
    def plan_start(self, plan_start):
        """Sets the plan_start of this SessionUserAccountModel.


        :param plan_start: The plan_start of this SessionUserAccountModel.
        :type plan_start: datetime
        """

        self._plan_start = plan_start

    @property
    def plan_status(self):
        """Gets the plan_status of this SessionUserAccountModel.


        :return: The plan_status of this SessionUserAccountModel.
        :rtype: PlanStatus
        """
        return self._plan_status

    @plan_status.setter
    def plan_status(self, plan_status):
        """Sets the plan_status of this SessionUserAccountModel.


        :param plan_status: The plan_status of this SessionUserAccountModel.
        :type plan_status: PlanStatus
        """

        self._plan_status = plan_status

    @property
    def role_id(self):
        """Gets the role_id of this SessionUserAccountModel.


        :return: The role_id of this SessionUserAccountModel.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this SessionUserAccountModel.


        :param role_id: The role_id of this SessionUserAccountModel.
        :type role_id: int
        """
        if role_id is not None and role_id < 0:
            raise ValueError("Invalid value for `role_id`, must be a value greater than or equal to `0`")

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this SessionUserAccountModel.


        :return: The role_name of this SessionUserAccountModel.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this SessionUserAccountModel.


        :param role_name: The role_name of this SessionUserAccountModel.
        :type role_name: str
        """

        self._role_name = role_name

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this SessionUserAccountModel.


        :return: The time_zone_id of this SessionUserAccountModel.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this SessionUserAccountModel.


        :param time_zone_id: The time_zone_id of this SessionUserAccountModel.
        :type time_zone_id: str
        """

        self._time_zone_id = time_zone_id

    @property
    def unpaid(self):
        """Gets the unpaid of this SessionUserAccountModel.


        :return: The unpaid of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._unpaid

    @unpaid.setter
    def unpaid(self, unpaid):
        """Sets the unpaid of this SessionUserAccountModel.


        :param unpaid: The unpaid of this SessionUserAccountModel.
        :type unpaid: bool
        """

        self._unpaid = unpaid

    @property
    def unverified(self):
        """Gets the unverified of this SessionUserAccountModel.


        :return: The unverified of this SessionUserAccountModel.
        :rtype: bool
        """
        return self._unverified

    @unverified.setter
    def unverified(self, unverified):
        """Sets the unverified of this SessionUserAccountModel.


        :param unverified: The unverified of this SessionUserAccountModel.
        :type unverified: bool
        """

        self._unverified = unverified
