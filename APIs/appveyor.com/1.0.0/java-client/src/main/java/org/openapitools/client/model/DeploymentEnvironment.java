/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DeploymentProjectSelectionMode;
import org.openapitools.client.model.DeploymentProviderType;
import org.openapitools.client.model.SecurityDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeploymentEnvironment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentEnvironment {
  public static final String SERIALIZED_NAME_DEPLOYMENT_ENVIRONMENT_ID = "deploymentEnvironmentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ENVIRONMENT_ID)
  private Integer deploymentEnvironmentId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private DeploymentProviderType provider;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_PROJECTS_MODE = "projectsMode";
  @SerializedName(SERIALIZED_NAME_PROJECTS_MODE)
  private DeploymentProjectSelectionMode projectsMode;

  public static final String SERIALIZED_NAME_SECURITY_DESCRIPTOR = "securityDescriptor";
  @SerializedName(SERIALIZED_NAME_SECURITY_DESCRIPTOR)
  private SecurityDescriptor securityDescriptor;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public DeploymentEnvironment() {
  }

  public DeploymentEnvironment(
     OffsetDateTime created, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.updated = updated;
  }

  public DeploymentEnvironment deploymentEnvironmentId(Integer deploymentEnvironmentId) {
    this.deploymentEnvironmentId = deploymentEnvironmentId;
    return this;
  }

  /**
   * Get deploymentEnvironmentId
   * minimum: 0
   * @return deploymentEnvironmentId
   */
  @javax.annotation.Nullable
  public Integer getDeploymentEnvironmentId() {
    return deploymentEnvironmentId;
  }

  public void setDeploymentEnvironmentId(Integer deploymentEnvironmentId) {
    this.deploymentEnvironmentId = deploymentEnvironmentId;
  }


  public DeploymentEnvironment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeploymentEnvironment provider(DeploymentProviderType provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public DeploymentProviderType getProvider() {
    return provider;
  }

  public void setProvider(DeploymentProviderType provider) {
    this.provider = provider;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public DeploymentEnvironment accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public DeploymentEnvironment projectsMode(DeploymentProjectSelectionMode projectsMode) {
    this.projectsMode = projectsMode;
    return this;
  }

  /**
   * Get projectsMode
   * @return projectsMode
   */
  @javax.annotation.Nullable
  public DeploymentProjectSelectionMode getProjectsMode() {
    return projectsMode;
  }

  public void setProjectsMode(DeploymentProjectSelectionMode projectsMode) {
    this.projectsMode = projectsMode;
  }


  public DeploymentEnvironment securityDescriptor(SecurityDescriptor securityDescriptor) {
    this.securityDescriptor = securityDescriptor;
    return this;
  }

  /**
   * Get securityDescriptor
   * @return securityDescriptor
   */
  @javax.annotation.Nullable
  public SecurityDescriptor getSecurityDescriptor() {
    return securityDescriptor;
  }

  public void setSecurityDescriptor(SecurityDescriptor securityDescriptor) {
    this.securityDescriptor = securityDescriptor;
  }


  public DeploymentEnvironment tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Comma-separated list of environment tags for dynamic grouping. Appears that any input is accepted.  The returned value only contains case-preserving but insensitive unique values where spaces around \&quot;,\&quot; are removed but otherwise preserved.  Empty values and items are allowed.
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentEnvironment deploymentEnvironment = (DeploymentEnvironment) o;
    return Objects.equals(this.deploymentEnvironmentId, deploymentEnvironment.deploymentEnvironmentId) &&
        Objects.equals(this.name, deploymentEnvironment.name) &&
        Objects.equals(this.provider, deploymentEnvironment.provider) &&
        Objects.equals(this.created, deploymentEnvironment.created) &&
        Objects.equals(this.updated, deploymentEnvironment.updated) &&
        Objects.equals(this.accountId, deploymentEnvironment.accountId) &&
        Objects.equals(this.projectsMode, deploymentEnvironment.projectsMode) &&
        Objects.equals(this.securityDescriptor, deploymentEnvironment.securityDescriptor) &&
        Objects.equals(this.tags, deploymentEnvironment.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentEnvironmentId, name, provider, created, updated, accountId, projectsMode, securityDescriptor, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentEnvironment {\n");
    sb.append("    deploymentEnvironmentId: ").append(toIndentedString(deploymentEnvironmentId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    projectsMode: ").append(toIndentedString(projectsMode)).append("\n");
    sb.append("    securityDescriptor: ").append(toIndentedString(securityDescriptor)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentEnvironmentId");
    openapiFields.add("name");
    openapiFields.add("provider");
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("accountId");
    openapiFields.add("projectsMode");
    openapiFields.add("securityDescriptor");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentEnvironment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentEnvironment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentEnvironment is not found in the empty JSON string", DeploymentEnvironment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentEnvironment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentEnvironment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        DeploymentProviderType.validateJsonElement(jsonObj.get("provider"));
      }
      // validate the optional field `projectsMode`
      if (jsonObj.get("projectsMode") != null && !jsonObj.get("projectsMode").isJsonNull()) {
        DeploymentProjectSelectionMode.validateJsonElement(jsonObj.get("projectsMode"));
      }
      // validate the optional field `securityDescriptor`
      if (jsonObj.get("securityDescriptor") != null && !jsonObj.get("securityDescriptor").isJsonNull()) {
        SecurityDescriptor.validateJsonElement(jsonObj.get("securityDescriptor"));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentEnvironment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentEnvironment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentEnvironment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentEnvironment.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentEnvironment>() {
           @Override
           public void write(JsonWriter out, DeploymentEnvironment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentEnvironment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentEnvironment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentEnvironment
   * @throws IOException if the JSON string is invalid with respect to DeploymentEnvironment
   */
  public static DeploymentEnvironment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentEnvironment.class);
  }

  /**
   * Convert an instance of DeploymentEnvironment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

