/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AceAccessRight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoleAce
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoleAce {
  public static final String SERIALIZED_NAME_ACCESS_RIGHTS = "accessRights";
  @SerializedName(SERIALIZED_NAME_ACCESS_RIGHTS)
  private List<AceAccessRight> accessRights = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ADMIN = "isAdmin";
  @SerializedName(SERIALIZED_NAME_IS_ADMIN)
  private Boolean isAdmin;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ID = "roleId";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  public RoleAce() {
  }

  public RoleAce accessRights(List<AceAccessRight> accessRights) {
    this.accessRights = accessRights;
    return this;
  }

  public RoleAce addAccessRightsItem(AceAccessRight accessRightsItem) {
    if (this.accessRights == null) {
      this.accessRights = new ArrayList<>();
    }
    this.accessRights.add(accessRightsItem);
    return this;
  }

  /**
   * Get accessRights
   * @return accessRights
   */
  @javax.annotation.Nullable
  public List<AceAccessRight> getAccessRights() {
    return accessRights;
  }

  public void setAccessRights(List<AceAccessRight> accessRights) {
    this.accessRights = accessRights;
  }


  public RoleAce isAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
    return this;
  }

  /**
   * Get isAdmin
   * @return isAdmin
   */
  @javax.annotation.Nullable
  public Boolean getIsAdmin() {
    return isAdmin;
  }

  public void setIsAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
  }


  public RoleAce name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RoleAce roleId(Integer roleId) {
    this.roleId = roleId;
    return this;
  }

  /**
   * Get roleId
   * minimum: 0
   * @return roleId
   */
  @javax.annotation.Nullable
  public Integer getRoleId() {
    return roleId;
  }

  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleAce roleAce = (RoleAce) o;
    return Objects.equals(this.accessRights, roleAce.accessRights) &&
        Objects.equals(this.isAdmin, roleAce.isAdmin) &&
        Objects.equals(this.name, roleAce.name) &&
        Objects.equals(this.roleId, roleAce.roleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessRights, isAdmin, name, roleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleAce {\n");
    sb.append("    accessRights: ").append(toIndentedString(accessRights)).append("\n");
    sb.append("    isAdmin: ").append(toIndentedString(isAdmin)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessRights");
    openapiFields.add("isAdmin");
    openapiFields.add("name");
    openapiFields.add("roleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleAce
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleAce.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleAce is not found in the empty JSON string", RoleAce.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleAce.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleAce` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessRights") != null && !jsonObj.get("accessRights").isJsonNull()) {
        JsonArray jsonArrayaccessRights = jsonObj.getAsJsonArray("accessRights");
        if (jsonArrayaccessRights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessRights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessRights` to be an array in the JSON string but got `%s`", jsonObj.get("accessRights").toString()));
          }

          // validate the optional field `accessRights` (array)
          for (int i = 0; i < jsonArrayaccessRights.size(); i++) {
            AceAccessRight.validateJsonElement(jsonArrayaccessRights.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleAce.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleAce' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleAce> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleAce.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleAce>() {
           @Override
           public void write(JsonWriter out, RoleAce value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleAce read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleAce given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleAce
   * @throws IOException if the JSON string is invalid with respect to RoleAce
   */
  public static RoleAce fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleAce.class);
  }

  /**
   * Convert an instance of RoleAce to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

