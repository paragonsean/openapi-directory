/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildJob;
import org.openapitools.client.model.BuildMessage;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Build
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Build {
  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_BUILD_ID = "buildId";
  @SerializedName(SERIALIZED_NAME_BUILD_ID)
  private Integer buildId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "authorName";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_AUTHOR_USERNAME = "authorUsername";
  @SerializedName(SERIALIZED_NAME_AUTHOR_USERNAME)
  private String authorUsername;

  public static final String SERIALIZED_NAME_BUILD_NUMBER = "buildNumber";
  @SerializedName(SERIALIZED_NAME_BUILD_NUMBER)
  private Integer buildNumber;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_COMMITTED = "committed";
  @SerializedName(SERIALIZED_NAME_COMMITTED)
  private OffsetDateTime committed;

  public static final String SERIALIZED_NAME_COMMITTER_NAME = "committerName";
  @SerializedName(SERIALIZED_NAME_COMMITTER_NAME)
  private String committerName;

  public static final String SERIALIZED_NAME_COMMITTER_USERNAME = "committerUsername";
  @SerializedName(SERIALIZED_NAME_COMMITTER_USERNAME)
  private String committerUsername;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private OffsetDateTime finished;

  public static final String SERIALIZED_NAME_IS_TAG = "isTag";
  @SerializedName(SERIALIZED_NAME_IS_TAG)
  private Boolean isTag;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<BuildJob> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_EXTENDED = "messageExtended";
  @SerializedName(SERIALIZED_NAME_MESSAGE_EXTENDED)
  private String messageExtended;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<BuildMessage> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_PULL_REQUEST_ID = "pullRequestId";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_ID)
  private Integer pullRequestId;

  public static final String SERIALIZED_NAME_PULL_REQUEST_NAME = "pullRequestName";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_NAME)
  private String pullRequestName;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public Build() {
  }

  public Build(
     OffsetDateTime created, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.updated = updated;
  }

  public Build branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public Build buildId(Integer buildId) {
    this.buildId = buildId;
    return this;
  }

  /**
   * Get buildId
   * minimum: 0
   * @return buildId
   */
  @javax.annotation.Nullable
  public Integer getBuildId() {
    return buildId;
  }

  public void setBuildId(Integer buildId) {
    this.buildId = buildId;
  }


  public Build message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Build version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public Build authorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * Get authorName
   * @return authorName
   */
  @javax.annotation.Nullable
  public String getAuthorName() {
    return authorName;
  }

  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }


  public Build authorUsername(String authorUsername) {
    this.authorUsername = authorUsername;
    return this;
  }

  /**
   * Get authorUsername
   * @return authorUsername
   */
  @javax.annotation.Nullable
  public String getAuthorUsername() {
    return authorUsername;
  }

  public void setAuthorUsername(String authorUsername) {
    this.authorUsername = authorUsername;
  }


  public Build buildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

  /**
   * Get buildNumber
   * minimum: 0
   * @return buildNumber
   */
  @javax.annotation.Nullable
  public Integer getBuildNumber() {
    return buildNumber;
  }

  public void setBuildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
  }


  public Build commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public Build committed(OffsetDateTime committed) {
    this.committed = committed;
    return this;
  }

  /**
   * Get committed
   * @return committed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCommitted() {
    return committed;
  }

  public void setCommitted(OffsetDateTime committed) {
    this.committed = committed;
  }


  public Build committerName(String committerName) {
    this.committerName = committerName;
    return this;
  }

  /**
   * Get committerName
   * @return committerName
   */
  @javax.annotation.Nullable
  public String getCommitterName() {
    return committerName;
  }

  public void setCommitterName(String committerName) {
    this.committerName = committerName;
  }


  public Build committerUsername(String committerUsername) {
    this.committerUsername = committerUsername;
    return this;
  }

  /**
   * Get committerUsername
   * @return committerUsername
   */
  @javax.annotation.Nullable
  public String getCommitterUsername() {
    return committerUsername;
  }

  public void setCommitterUsername(String committerUsername) {
    this.committerUsername = committerUsername;
  }


  public Build finished(OffsetDateTime finished) {
    this.finished = finished;
    return this;
  }

  /**
   * Get finished
   * @return finished
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinished() {
    return finished;
  }

  public void setFinished(OffsetDateTime finished) {
    this.finished = finished;
  }


  public Build isTag(Boolean isTag) {
    this.isTag = isTag;
    return this;
  }

  /**
   * Get isTag
   * @return isTag
   */
  @javax.annotation.Nullable
  public Boolean getIsTag() {
    return isTag;
  }

  public void setIsTag(Boolean isTag) {
    this.isTag = isTag;
  }


  public Build jobs(List<BuildJob> jobs) {
    this.jobs = jobs;
    return this;
  }

  public Build addJobsItem(BuildJob jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * Always empty in getProjectHistory and startDeployment responses.
   * @return jobs
   */
  @javax.annotation.Nullable
  public List<BuildJob> getJobs() {
    return jobs;
  }

  public void setJobs(List<BuildJob> jobs) {
    this.jobs = jobs;
  }


  public Build messageExtended(String messageExtended) {
    this.messageExtended = messageExtended;
    return this;
  }

  /**
   * Get messageExtended
   * @return messageExtended
   */
  @javax.annotation.Nullable
  public String getMessageExtended() {
    return messageExtended;
  }

  public void setMessageExtended(String messageExtended) {
    this.messageExtended = messageExtended;
  }


  public Build messages(List<BuildMessage> messages) {
    this.messages = messages;
    return this;
  }

  public Build addMessagesItem(BuildMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public List<BuildMessage> getMessages() {
    return messages;
  }

  public void setMessages(List<BuildMessage> messages) {
    this.messages = messages;
  }


  public Build projectId(Integer projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * minimum: 0
   * @return projectId
   */
  @javax.annotation.Nullable
  public Integer getProjectId() {
    return projectId;
  }

  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public Build pullRequestId(Integer pullRequestId) {
    this.pullRequestId = pullRequestId;
    return this;
  }

  /**
   * Get pullRequestId
   * minimum: 1
   * @return pullRequestId
   */
  @javax.annotation.Nullable
  public Integer getPullRequestId() {
    return pullRequestId;
  }

  public void setPullRequestId(Integer pullRequestId) {
    this.pullRequestId = pullRequestId;
  }


  public Build pullRequestName(String pullRequestName) {
    this.pullRequestName = pullRequestName;
    return this;
  }

  /**
   * Get pullRequestName
   * @return pullRequestName
   */
  @javax.annotation.Nullable
  public String getPullRequestName() {
    return pullRequestName;
  }

  public void setPullRequestName(String pullRequestName) {
    this.pullRequestName = pullRequestName;
  }


  public Build started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public Build status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Build build = (Build) o;
    return Objects.equals(this.branch, build.branch) &&
        Objects.equals(this.buildId, build.buildId) &&
        Objects.equals(this.message, build.message) &&
        Objects.equals(this.version, build.version) &&
        Objects.equals(this.created, build.created) &&
        Objects.equals(this.updated, build.updated) &&
        Objects.equals(this.authorName, build.authorName) &&
        Objects.equals(this.authorUsername, build.authorUsername) &&
        Objects.equals(this.buildNumber, build.buildNumber) &&
        Objects.equals(this.commitId, build.commitId) &&
        Objects.equals(this.committed, build.committed) &&
        Objects.equals(this.committerName, build.committerName) &&
        Objects.equals(this.committerUsername, build.committerUsername) &&
        Objects.equals(this.finished, build.finished) &&
        Objects.equals(this.isTag, build.isTag) &&
        Objects.equals(this.jobs, build.jobs) &&
        Objects.equals(this.messageExtended, build.messageExtended) &&
        Objects.equals(this.messages, build.messages) &&
        Objects.equals(this.projectId, build.projectId) &&
        Objects.equals(this.pullRequestId, build.pullRequestId) &&
        Objects.equals(this.pullRequestName, build.pullRequestName) &&
        Objects.equals(this.started, build.started) &&
        Objects.equals(this.status, build.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, buildId, message, version, created, updated, authorName, authorUsername, buildNumber, commitId, committed, committerName, committerUsername, finished, isTag, jobs, messageExtended, messages, projectId, pullRequestId, pullRequestName, started, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Build {\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    buildId: ").append(toIndentedString(buildId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    authorUsername: ").append(toIndentedString(authorUsername)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    committed: ").append(toIndentedString(committed)).append("\n");
    sb.append("    committerName: ").append(toIndentedString(committerName)).append("\n");
    sb.append("    committerUsername: ").append(toIndentedString(committerUsername)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    isTag: ").append(toIndentedString(isTag)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    messageExtended: ").append(toIndentedString(messageExtended)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    pullRequestId: ").append(toIndentedString(pullRequestId)).append("\n");
    sb.append("    pullRequestName: ").append(toIndentedString(pullRequestName)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branch");
    openapiFields.add("buildId");
    openapiFields.add("message");
    openapiFields.add("version");
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("authorName");
    openapiFields.add("authorUsername");
    openapiFields.add("buildNumber");
    openapiFields.add("commitId");
    openapiFields.add("committed");
    openapiFields.add("committerName");
    openapiFields.add("committerUsername");
    openapiFields.add("finished");
    openapiFields.add("isTag");
    openapiFields.add("jobs");
    openapiFields.add("messageExtended");
    openapiFields.add("messages");
    openapiFields.add("projectId");
    openapiFields.add("pullRequestId");
    openapiFields.add("pullRequestName");
    openapiFields.add("started");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Build
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Build.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Build is not found in the empty JSON string", Build.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Build.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Build` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("authorName") != null && !jsonObj.get("authorName").isJsonNull()) && !jsonObj.get("authorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorName").toString()));
      }
      if ((jsonObj.get("authorUsername") != null && !jsonObj.get("authorUsername").isJsonNull()) && !jsonObj.get("authorUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorUsername").toString()));
      }
      if ((jsonObj.get("commitId") != null && !jsonObj.get("commitId").isJsonNull()) && !jsonObj.get("commitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitId").toString()));
      }
      if ((jsonObj.get("committerName") != null && !jsonObj.get("committerName").isJsonNull()) && !jsonObj.get("committerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committerName").toString()));
      }
      if ((jsonObj.get("committerUsername") != null && !jsonObj.get("committerUsername").isJsonNull()) && !jsonObj.get("committerUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committerUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committerUsername").toString()));
      }
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
          }

          // validate the optional field `jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            BuildJob.validateJsonElement(jsonArrayjobs.get(i));
          };
        }
      }
      if ((jsonObj.get("messageExtended") != null && !jsonObj.get("messageExtended").isJsonNull()) && !jsonObj.get("messageExtended").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageExtended` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageExtended").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            BuildMessage.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("pullRequestName") != null && !jsonObj.get("pullRequestName").isJsonNull()) && !jsonObj.get("pullRequestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pullRequestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pullRequestName").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Build.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Build' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Build> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Build.class));

       return (TypeAdapter<T>) new TypeAdapter<Build>() {
           @Override
           public void write(JsonWriter out, Build value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Build read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Build given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Build
   * @throws IOException if the JSON string is invalid with respect to Build
   */
  public static Build fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Build.class);
  }

  /**
   * Convert an instance of Build to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

