/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NuGetFeed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NuGetFeed {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PRIVATE_PROJECT = "isPrivateProject";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_PROJECT)
  private Boolean isPrivateProject;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NU_GET_FEED_ID = "nuGetFeedId";
  @SerializedName(SERIALIZED_NAME_NU_GET_FEED_ID)
  private Integer nuGetFeedId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_PUBLISHING_ENABLED = "publishingEnabled";
  @SerializedName(SERIALIZED_NAME_PUBLISHING_ENABLED)
  private Boolean publishingEnabled;

  public NuGetFeed() {
  }

  public NuGetFeed(
     OffsetDateTime created, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.updated = updated;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public NuGetFeed accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * minimum: 0
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public NuGetFeed id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NuGetFeed isPrivateProject(Boolean isPrivateProject) {
    this.isPrivateProject = isPrivateProject;
    return this;
  }

  /**
   * Get isPrivateProject
   * @return isPrivateProject
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivateProject() {
    return isPrivateProject;
  }

  public void setIsPrivateProject(Boolean isPrivateProject) {
    this.isPrivateProject = isPrivateProject;
  }


  public NuGetFeed name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NuGetFeed nuGetFeedId(Integer nuGetFeedId) {
    this.nuGetFeedId = nuGetFeedId;
    return this;
  }

  /**
   * Get nuGetFeedId
   * @return nuGetFeedId
   */
  @javax.annotation.Nullable
  public Integer getNuGetFeedId() {
    return nuGetFeedId;
  }

  public void setNuGetFeedId(Integer nuGetFeedId) {
    this.nuGetFeedId = nuGetFeedId;
  }


  public NuGetFeed projectId(Integer projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * minimum: 0
   * @return projectId
   */
  @javax.annotation.Nullable
  public Integer getProjectId() {
    return projectId;
  }

  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public NuGetFeed publishingEnabled(Boolean publishingEnabled) {
    this.publishingEnabled = publishingEnabled;
    return this;
  }

  /**
   * Get publishingEnabled
   * @return publishingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPublishingEnabled() {
    return publishingEnabled;
  }

  public void setPublishingEnabled(Boolean publishingEnabled) {
    this.publishingEnabled = publishingEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NuGetFeed nuGetFeed = (NuGetFeed) o;
    return Objects.equals(this.created, nuGetFeed.created) &&
        Objects.equals(this.updated, nuGetFeed.updated) &&
        Objects.equals(this.accountId, nuGetFeed.accountId) &&
        Objects.equals(this.id, nuGetFeed.id) &&
        Objects.equals(this.isPrivateProject, nuGetFeed.isPrivateProject) &&
        Objects.equals(this.name, nuGetFeed.name) &&
        Objects.equals(this.nuGetFeedId, nuGetFeed.nuGetFeedId) &&
        Objects.equals(this.projectId, nuGetFeed.projectId) &&
        Objects.equals(this.publishingEnabled, nuGetFeed.publishingEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, accountId, id, isPrivateProject, name, nuGetFeedId, projectId, publishingEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NuGetFeed {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPrivateProject: ").append(toIndentedString(isPrivateProject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nuGetFeedId: ").append(toIndentedString(nuGetFeedId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    publishingEnabled: ").append(toIndentedString(publishingEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("accountId");
    openapiFields.add("id");
    openapiFields.add("isPrivateProject");
    openapiFields.add("name");
    openapiFields.add("nuGetFeedId");
    openapiFields.add("projectId");
    openapiFields.add("publishingEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NuGetFeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NuGetFeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NuGetFeed is not found in the empty JSON string", NuGetFeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NuGetFeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NuGetFeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NuGetFeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NuGetFeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NuGetFeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NuGetFeed.class));

       return (TypeAdapter<T>) new TypeAdapter<NuGetFeed>() {
           @Override
           public void write(JsonWriter out, NuGetFeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NuGetFeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NuGetFeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NuGetFeed
   * @throws IOException if the JSON string is invalid with respect to NuGetFeed
   */
  public static NuGetFeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NuGetFeed.class);
  }

  /**
   * Convert an instance of NuGetFeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

