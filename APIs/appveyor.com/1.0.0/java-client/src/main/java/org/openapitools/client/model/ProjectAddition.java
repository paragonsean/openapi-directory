/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepositoryAuthenticationType;
import org.openapitools.client.model.RepositoryProvider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;repositoryAuthentication&#x60; is only used for git, mercurial, subversion &#x60;repositoryProvider&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectAddition {
  public static final String SERIALIZED_NAME_REPOSITORY_AUTHENTICATION = "repositoryAuthentication";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_AUTHENTICATION)
  private RepositoryAuthenticationType repositoryAuthentication;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_REPOSITORY_PASSWORD = "repositoryPassword";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_PASSWORD)
  private String repositoryPassword;

  public static final String SERIALIZED_NAME_REPOSITORY_PROVIDER = "repositoryProvider";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_PROVIDER)
  private RepositoryProvider repositoryProvider;

  public static final String SERIALIZED_NAME_REPOSITORY_USERNAME = "repositoryUsername";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_USERNAME)
  private String repositoryUsername;

  public ProjectAddition() {
  }

  public ProjectAddition repositoryAuthentication(RepositoryAuthenticationType repositoryAuthentication) {
    this.repositoryAuthentication = repositoryAuthentication;
    return this;
  }

  /**
   * Get repositoryAuthentication
   * @return repositoryAuthentication
   */
  @javax.annotation.Nullable
  public RepositoryAuthenticationType getRepositoryAuthentication() {
    return repositoryAuthentication;
  }

  public void setRepositoryAuthentication(RepositoryAuthenticationType repositoryAuthentication) {
    this.repositoryAuthentication = repositoryAuthentication;
  }


  public ProjectAddition repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * URL when repositoryProvider is git, mercurial, subversion username/project when repositoryProvider is gitHub
   * @return repositoryName
   */
  @javax.annotation.Nonnull
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public ProjectAddition repositoryPassword(String repositoryPassword) {
    this.repositoryPassword = repositoryPassword;
    return this;
  }

  /**
   * Required if repositoryAuthentication is credentials
   * @return repositoryPassword
   */
  @javax.annotation.Nullable
  public String getRepositoryPassword() {
    return repositoryPassword;
  }

  public void setRepositoryPassword(String repositoryPassword) {
    this.repositoryPassword = repositoryPassword;
  }


  public ProjectAddition repositoryProvider(RepositoryProvider repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    return this;
  }

  /**
   * Get repositoryProvider
   * @return repositoryProvider
   */
  @javax.annotation.Nonnull
  public RepositoryProvider getRepositoryProvider() {
    return repositoryProvider;
  }

  public void setRepositoryProvider(RepositoryProvider repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }


  public ProjectAddition repositoryUsername(String repositoryUsername) {
    this.repositoryUsername = repositoryUsername;
    return this;
  }

  /**
   * Required if repositoryAuthentication is credentials
   * @return repositoryUsername
   */
  @javax.annotation.Nullable
  public String getRepositoryUsername() {
    return repositoryUsername;
  }

  public void setRepositoryUsername(String repositoryUsername) {
    this.repositoryUsername = repositoryUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectAddition projectAddition = (ProjectAddition) o;
    return Objects.equals(this.repositoryAuthentication, projectAddition.repositoryAuthentication) &&
        Objects.equals(this.repositoryName, projectAddition.repositoryName) &&
        Objects.equals(this.repositoryPassword, projectAddition.repositoryPassword) &&
        Objects.equals(this.repositoryProvider, projectAddition.repositoryProvider) &&
        Objects.equals(this.repositoryUsername, projectAddition.repositoryUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositoryAuthentication, repositoryName, repositoryPassword, repositoryProvider, repositoryUsername);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectAddition {\n");
    sb.append("    repositoryAuthentication: ").append(toIndentedString(repositoryAuthentication)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    repositoryPassword: ").append("*").append("\n");
    sb.append("    repositoryProvider: ").append(toIndentedString(repositoryProvider)).append("\n");
    sb.append("    repositoryUsername: ").append(toIndentedString(repositoryUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("repositoryAuthentication");
    openapiFields.add("repositoryName");
    openapiFields.add("repositoryPassword");
    openapiFields.add("repositoryProvider");
    openapiFields.add("repositoryUsername");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("repositoryName");
    openapiRequiredFields.add("repositoryProvider");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectAddition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectAddition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectAddition is not found in the empty JSON string", ProjectAddition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectAddition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectAddition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectAddition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `repositoryAuthentication`
      if (jsonObj.get("repositoryAuthentication") != null && !jsonObj.get("repositoryAuthentication").isJsonNull()) {
        RepositoryAuthenticationType.validateJsonElement(jsonObj.get("repositoryAuthentication"));
      }
      if (!jsonObj.get("repositoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryName").toString()));
      }
      if ((jsonObj.get("repositoryPassword") != null && !jsonObj.get("repositoryPassword").isJsonNull()) && !jsonObj.get("repositoryPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryPassword").toString()));
      }
      // validate the required field `repositoryProvider`
      RepositoryProvider.validateJsonElement(jsonObj.get("repositoryProvider"));
      if ((jsonObj.get("repositoryUsername") != null && !jsonObj.get("repositoryUsername").isJsonNull()) && !jsonObj.get("repositoryUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryUsername").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectAddition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectAddition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectAddition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectAddition.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectAddition>() {
           @Override
           public void write(JsonWriter out, ProjectAddition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectAddition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectAddition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectAddition
   * @throws IOException if the JSON string is invalid with respect to ProjectAddition
   */
  public static ProjectAddition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectAddition.class);
  }

  /**
   * Convert an instance of ProjectAddition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

