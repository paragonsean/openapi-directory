/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArtifactModel;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.BuildStartRequest;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.ReRunBuildRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuildApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelBuild
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#cancel-build">Cancel build Documentation</a>
     */
    public okhttp3.Call cancelBuildCall(String accountName, String projectSlug, String buildVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/builds/{accountName}/{projectSlug}/{buildVersion}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "buildVersion" + "}", localVarApiClient.escapeString(buildVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelBuildValidateBeforeCall(String accountName, String projectSlug, String buildVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling cancelBuild(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling cancelBuild(Async)");
        }

        // verify the required parameter 'buildVersion' is set
        if (buildVersion == null) {
            throw new ApiException("Missing the required parameter 'buildVersion' when calling cancelBuild(Async)");
        }

        return cancelBuildCall(accountName, projectSlug, buildVersion, _callback);

    }

    /**
     * Cancel build
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#cancel-build">Cancel build Documentation</a>
     */
    public void cancelBuild(String accountName, String projectSlug, String buildVersion) throws ApiException {
        cancelBuildWithHttpInfo(accountName, projectSlug, buildVersion);
    }

    /**
     * Cancel build
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#cancel-build">Cancel build Documentation</a>
     */
    public ApiResponse<Void> cancelBuildWithHttpInfo(String accountName, String projectSlug, String buildVersion) throws ApiException {
        okhttp3.Call localVarCall = cancelBuildValidateBeforeCall(accountName, projectSlug, buildVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel build (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#cancel-build">Cancel build Documentation</a>
     */
    public okhttp3.Call cancelBuildAsync(String accountName, String projectSlug, String buildVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelBuildValidateBeforeCall(accountName, projectSlug, buildVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBuildArtifact
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Download build artifact Documentation</a>
     */
    public okhttp3.Call getBuildArtifactCall(String jobId, String artifactFileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buildjobs/{jobId}/artifacts/{artifactFileName}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "artifactFileName" + "}", localVarApiClient.escapeString(artifactFileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuildArtifactValidateBeforeCall(String jobId, String artifactFileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getBuildArtifact(Async)");
        }

        // verify the required parameter 'artifactFileName' is set
        if (artifactFileName == null) {
            throw new ApiException("Missing the required parameter 'artifactFileName' when calling getBuildArtifact(Async)");
        }

        return getBuildArtifactCall(jobId, artifactFileName, _callback);

    }

    /**
     * Download build artifact
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Download build artifact Documentation</a>
     */
    public File getBuildArtifact(String jobId, String artifactFileName) throws ApiException {
        ApiResponse<File> localVarResp = getBuildArtifactWithHttpInfo(jobId, artifactFileName);
        return localVarResp.getData();
    }

    /**
     * Download build artifact
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Download build artifact Documentation</a>
     */
    public ApiResponse<File> getBuildArtifactWithHttpInfo(String jobId, String artifactFileName) throws ApiException {
        okhttp3.Call localVarCall = getBuildArtifactValidateBeforeCall(jobId, artifactFileName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download build artifact (asynchronously)
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Download build artifact Documentation</a>
     */
    public okhttp3.Call getBuildArtifactAsync(String jobId, String artifactFileName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuildArtifactValidateBeforeCall(jobId, artifactFileName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBuildArtifacts
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Get build artifacts Documentation</a>
     */
    public okhttp3.Call getBuildArtifactsCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buildjobs/{jobId}/artifacts"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuildArtifactsValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getBuildArtifacts(Async)");
        }

        return getBuildArtifactsCall(jobId, _callback);

    }

    /**
     * Get build artifacts
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @return List&lt;ArtifactModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Get build artifacts Documentation</a>
     */
    public List<ArtifactModel> getBuildArtifacts(String jobId) throws ApiException {
        ApiResponse<List<ArtifactModel>> localVarResp = getBuildArtifactsWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get build artifacts
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @return ApiResponse&lt;List&lt;ArtifactModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Get build artifacts Documentation</a>
     */
    public ApiResponse<List<ArtifactModel>> getBuildArtifactsWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = getBuildArtifactsValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<List<ArtifactModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get build artifacts (asynchronously)
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/">Get build artifacts Documentation</a>
     */
    public okhttp3.Call getBuildArtifactsAsync(String jobId, final ApiCallback<List<ArtifactModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuildArtifactsValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<List<ArtifactModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBuildLog
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Note:  Response content is plain text sent with Content-Type application/octet-stream. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#download-build-log">Download build log Documentation</a>
     */
    public okhttp3.Call getBuildLogCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buildjobs/{jobId}/log"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuildLogValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getBuildLog(Async)");
        }

        return getBuildLogCall(jobId, _callback);

    }

    /**
     * Download build log
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Note:  Response content is plain text sent with Content-Type application/octet-stream. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#download-build-log">Download build log Documentation</a>
     */
    public File getBuildLog(String jobId) throws ApiException {
        ApiResponse<File> localVarResp = getBuildLogWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Download build log
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Note:  Response content is plain text sent with Content-Type application/octet-stream. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#download-build-log">Download build log Documentation</a>
     */
    public ApiResponse<File> getBuildLogWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = getBuildLogValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download build log (asynchronously)
     * 
     * @param jobId Build ID (&#x60;jobId&#x60; property of &#x60;BuildJob&#x60;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Note:  Response content is plain text sent with Content-Type application/octet-stream. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#download-build-log">Download build log Documentation</a>
     */
    public okhttp3.Call getBuildLogAsync(String jobId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuildLogValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reRunBuild
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#re-run-build">Re-run build Documentation</a>
     */
    public okhttp3.Call reRunBuildCall(ReRunBuildRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/builds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reRunBuildValidateBeforeCall(ReRunBuildRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reRunBuild(Async)");
        }

        return reRunBuildCall(body, _callback);

    }

    /**
     * Re-run build
     * If &#x60;reRunIncomplete&#x60; is &#x60;true&#x60; and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message \&quot;No failed or cancelled jobs in build with ID {buildId}\&quot;.
     * @param body  (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#re-run-build">Re-run build Documentation</a>
     */
    public Build reRunBuild(ReRunBuildRequest body) throws ApiException {
        ApiResponse<Build> localVarResp = reRunBuildWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Re-run build
     * If &#x60;reRunIncomplete&#x60; is &#x60;true&#x60; and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message \&quot;No failed or cancelled jobs in build with ID {buildId}\&quot;.
     * @param body  (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#re-run-build">Re-run build Documentation</a>
     */
    public ApiResponse<Build> reRunBuildWithHttpInfo(ReRunBuildRequest body) throws ApiException {
        okhttp3.Call localVarCall = reRunBuildValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-run build (asynchronously)
     * If &#x60;reRunIncomplete&#x60; is &#x60;true&#x60; and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message \&quot;No failed or cancelled jobs in build with ID {buildId}\&quot;.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#re-run-build">Re-run build Documentation</a>
     */
    public okhttp3.Call reRunBuildAsync(ReRunBuildRequest body, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = reRunBuildValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startBuild
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#start-build-of-branch-most-recent-commit">Start build of branch most recent commit Documentation</a>
     */
    public okhttp3.Call startBuildCall(BuildStartRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/builds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startBuildValidateBeforeCall(BuildStartRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling startBuild(Async)");
        }

        return startBuildCall(body, _callback);

    }

    /**
     * Start build of branch most recent commit
     * 
     * @param body  (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#start-build-of-branch-most-recent-commit">Start build of branch most recent commit Documentation</a>
     */
    public Build startBuild(BuildStartRequest body) throws ApiException {
        ApiResponse<Build> localVarResp = startBuildWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Start build of branch most recent commit
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#start-build-of-branch-most-recent-commit">Start build of branch most recent commit Documentation</a>
     */
    public ApiResponse<Build> startBuildWithHttpInfo(BuildStartRequest body) throws ApiException {
        okhttp3.Call localVarCall = startBuildValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start build of branch most recent commit (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#start-build-of-branch-most-recent-commit">Start build of branch most recent commit Documentation</a>
     */
    public okhttp3.Call startBuildAsync(BuildStartRequest body, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = startBuildValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
