/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploymentProviderType;
import org.openapitools.client.model.StoredNameValue;
import org.openapitools.client.model.StringValueObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeploymentProvider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentProvider {
  public static final String SERIALIZED_NAME_ON_BRANCH = "onBranch";
  @SerializedName(SERIALIZED_NAME_ON_BRANCH)
  private List<StringValueObject> onBranch = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_ENVIRONMENT_VARIABLES = "onEnvironmentVariables";
  @SerializedName(SERIALIZED_NAME_ON_ENVIRONMENT_VARIABLES)
  private List<StoredNameValue> onEnvironmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private DeploymentProviderType provider;

  public static final String SERIALIZED_NAME_PROVIDER_SETTINGS = "providerSettings";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SETTINGS)
  private List<StoredNameValue> providerSettings = new ArrayList<>();

  public DeploymentProvider() {
  }

  public DeploymentProvider onBranch(List<StringValueObject> onBranch) {
    this.onBranch = onBranch;
    return this;
  }

  public DeploymentProvider addOnBranchItem(StringValueObject onBranchItem) {
    if (this.onBranch == null) {
      this.onBranch = new ArrayList<>();
    }
    this.onBranch.add(onBranchItem);
    return this;
  }

  /**
   * Get onBranch
   * @return onBranch
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getOnBranch() {
    return onBranch;
  }

  public void setOnBranch(List<StringValueObject> onBranch) {
    this.onBranch = onBranch;
  }


  public DeploymentProvider onEnvironmentVariables(List<StoredNameValue> onEnvironmentVariables) {
    this.onEnvironmentVariables = onEnvironmentVariables;
    return this;
  }

  public DeploymentProvider addOnEnvironmentVariablesItem(StoredNameValue onEnvironmentVariablesItem) {
    if (this.onEnvironmentVariables == null) {
      this.onEnvironmentVariables = new ArrayList<>();
    }
    this.onEnvironmentVariables.add(onEnvironmentVariablesItem);
    return this;
  }

  /**
   * Get onEnvironmentVariables
   * @return onEnvironmentVariables
   */
  @javax.annotation.Nullable
  public List<StoredNameValue> getOnEnvironmentVariables() {
    return onEnvironmentVariables;
  }

  public void setOnEnvironmentVariables(List<StoredNameValue> onEnvironmentVariables) {
    this.onEnvironmentVariables = onEnvironmentVariables;
  }


  public DeploymentProvider provider(DeploymentProviderType provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  public DeploymentProviderType getProvider() {
    return provider;
  }

  public void setProvider(DeploymentProviderType provider) {
    this.provider = provider;
  }


  public DeploymentProvider providerSettings(List<StoredNameValue> providerSettings) {
    this.providerSettings = providerSettings;
    return this;
  }

  public DeploymentProvider addProviderSettingsItem(StoredNameValue providerSettingsItem) {
    if (this.providerSettings == null) {
      this.providerSettings = new ArrayList<>();
    }
    this.providerSettings.add(providerSettingsItem);
    return this;
  }

  /**
   * Get providerSettings
   * @return providerSettings
   */
  @javax.annotation.Nullable
  public List<StoredNameValue> getProviderSettings() {
    return providerSettings;
  }

  public void setProviderSettings(List<StoredNameValue> providerSettings) {
    this.providerSettings = providerSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentProvider deploymentProvider = (DeploymentProvider) o;
    return Objects.equals(this.onBranch, deploymentProvider.onBranch) &&
        Objects.equals(this.onEnvironmentVariables, deploymentProvider.onEnvironmentVariables) &&
        Objects.equals(this.provider, deploymentProvider.provider) &&
        Objects.equals(this.providerSettings, deploymentProvider.providerSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onBranch, onEnvironmentVariables, provider, providerSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentProvider {\n");
    sb.append("    onBranch: ").append(toIndentedString(onBranch)).append("\n");
    sb.append("    onEnvironmentVariables: ").append(toIndentedString(onEnvironmentVariables)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerSettings: ").append(toIndentedString(providerSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onBranch");
    openapiFields.add("onEnvironmentVariables");
    openapiFields.add("provider");
    openapiFields.add("providerSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provider");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentProvider is not found in the empty JSON string", DeploymentProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentProvider.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("onBranch") != null && !jsonObj.get("onBranch").isJsonNull()) {
        JsonArray jsonArrayonBranch = jsonObj.getAsJsonArray("onBranch");
        if (jsonArrayonBranch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onBranch").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onBranch` to be an array in the JSON string but got `%s`", jsonObj.get("onBranch").toString()));
          }

          // validate the optional field `onBranch` (array)
          for (int i = 0; i < jsonArrayonBranch.size(); i++) {
            StringValueObject.validateJsonElement(jsonArrayonBranch.get(i));
          };
        }
      }
      if (jsonObj.get("onEnvironmentVariables") != null && !jsonObj.get("onEnvironmentVariables").isJsonNull()) {
        JsonArray jsonArrayonEnvironmentVariables = jsonObj.getAsJsonArray("onEnvironmentVariables");
        if (jsonArrayonEnvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onEnvironmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onEnvironmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("onEnvironmentVariables").toString()));
          }

          // validate the optional field `onEnvironmentVariables` (array)
          for (int i = 0; i < jsonArrayonEnvironmentVariables.size(); i++) {
            StoredNameValue.validateJsonElement(jsonArrayonEnvironmentVariables.get(i));
          };
        }
      }
      // validate the required field `provider`
      DeploymentProviderType.validateJsonElement(jsonObj.get("provider"));
      if (jsonObj.get("providerSettings") != null && !jsonObj.get("providerSettings").isJsonNull()) {
        JsonArray jsonArrayproviderSettings = jsonObj.getAsJsonArray("providerSettings");
        if (jsonArrayproviderSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providerSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providerSettings` to be an array in the JSON string but got `%s`", jsonObj.get("providerSettings").toString()));
          }

          // validate the optional field `providerSettings` (array)
          for (int i = 0; i < jsonArrayproviderSettings.size(); i++) {
            StoredNameValue.validateJsonElement(jsonArrayproviderSettings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentProvider>() {
           @Override
           public void write(JsonWriter out, DeploymentProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentProvider
   * @throws IOException if the JSON string is invalid with respect to DeploymentProvider
   */
  public static DeploymentProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentProvider.class);
  }

  /**
   * Convert an instance of DeploymentProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

