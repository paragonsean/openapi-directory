/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Defines the available build worker image templates used to provision a virtual machine for a build.  Images are updated regularly.  \&quot;Previous\&quot; selects the previous version of an image, for use as a temporary workaround for regressions. &#x60;Ubuntu&#x60; is the same as &#x60;Ubuntu1604&#x60;. &#x60;Previous Ubuntu&#x60; is the same as &#x60;Previous Ubuntu1604&#x60;. See https://www.appveyor.com/docs/build-environment/#build-worker-images for details.
 */
@JsonAdapter(BuildWorkerImageName.Adapter.class)
public enum BuildWorkerImageName {
  
  PREVIOUS_UBUNTU("Previous Ubuntu"),
  
  PREVIOUS_UBUNTU1604("Previous Ubuntu1604"),
  
  PREVIOUS_UBUNTU1804("Previous Ubuntu1804"),
  
  PREVIOUS_VISUAL_STUDIO_2013("Previous Visual Studio 2013"),
  
  PREVIOUS_VISUAL_STUDIO_2015("Previous Visual Studio 2015"),
  
  PREVIOUS_VISUAL_STUDIO_2017("Previous Visual Studio 2017"),
  
  UBUNTU("Ubuntu"),
  
  UBUNTU1604("Ubuntu1604"),
  
  UBUNTU1804("Ubuntu1804"),
  
  VISUAL_STUDIO_2013("Visual Studio 2013"),
  
  VISUAL_STUDIO_2015("Visual Studio 2015"),
  
  VISUAL_STUDIO_2015_2("Visual Studio 2015 2"),
  
  VISUAL_STUDIO_2017("Visual Studio 2017"),
  
  VISUAL_STUDIO_2017_PREVIEW("Visual Studio 2017 Preview"),
  
  VISUAL_STUDIO_2019_PREVIEW("Visual Studio 2019 Preview"),
  
  WMF_5("WMF 5"),
  
  WINDOWS_SERVER_2019("Windows Server 2019");

  private String value;

  BuildWorkerImageName(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static BuildWorkerImageName fromValue(String value) {
    for (BuildWorkerImageName b : BuildWorkerImageName.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<BuildWorkerImageName> {
    @Override
    public void write(final JsonWriter jsonWriter, final BuildWorkerImageName enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public BuildWorkerImageName read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return BuildWorkerImageName.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    BuildWorkerImageName.fromValue(value);
  }
}

