/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.BuildMode;
import org.openapitools.client.model.BuildWorkerImageInner;
import org.openapitools.client.model.DeployMode;
import org.openapitools.client.model.DeploymentProvider;
import org.openapitools.client.model.HostEntry;
import org.openapitools.client.model.MSBuildVerbosity;
import org.openapitools.client.model.NotificationProviderSettings;
import org.openapitools.client.model.OSServicesToStartDuringTheBuildProcessInner;
import org.openapitools.client.model.ProjectBranchesMode;
import org.openapitools.client.model.ProjectConfigurationPlatformInner;
import org.openapitools.client.model.ProjectConfigurationTestCategoriesMatrixInner;
import org.openapitools.client.model.Script;
import org.openapitools.client.model.StoredNameValue;
import org.openapitools.client.model.StoredNameValueMatrix;
import org.openapitools.client.model.StringValueObject;
import org.openapitools.client.model.TestMode;
import org.openapitools.client.model.UnknownType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectConfiguration {
  public static final String SERIALIZED_NAME_AFTER_BUILD_SCRIPTS = "afterBuildScripts";
  @SerializedName(SERIALIZED_NAME_AFTER_BUILD_SCRIPTS)
  private List<Script> afterBuildScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFTER_DEPLOY_SCRIPTS = "afterDeployScripts";
  @SerializedName(SERIALIZED_NAME_AFTER_DEPLOY_SCRIPTS)
  private List<Script> afterDeployScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFTER_TEST_SCRIPTS = "afterTestScripts";
  @SerializedName(SERIALIZED_NAME_AFTER_TEST_SCRIPTS)
  private List<Script> afterTestScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List<Artifact> artifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSEMBLY_FILE_VERSION_FORMAT = "assemblyFileVersionFormat";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_FILE_VERSION_FORMAT)
  private String assemblyFileVersionFormat;

  public static final String SERIALIZED_NAME_ASSEMBLY_INFO_FILE = "assemblyInfoFile";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_INFO_FILE)
  private String assemblyInfoFile;

  public static final String SERIALIZED_NAME_ASSEMBLY_INFORMATIONAL_VERSION_FORMAT = "assemblyInformationalVersionFormat";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_INFORMATIONAL_VERSION_FORMAT)
  private String assemblyInformationalVersionFormat;

  public static final String SERIALIZED_NAME_ASSEMBLY_VERSION_FORMAT = "assemblyVersionFormat";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_VERSION_FORMAT)
  private String assemblyVersionFormat;

  public static final String SERIALIZED_NAME_BEFORE_BUILD_SCRIPTS = "beforeBuildScripts";
  @SerializedName(SERIALIZED_NAME_BEFORE_BUILD_SCRIPTS)
  private List<Script> beforeBuildScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEFORE_DEPLOY_SCRIPTS = "beforeDeployScripts";
  @SerializedName(SERIALIZED_NAME_BEFORE_DEPLOY_SCRIPTS)
  private List<Script> beforeDeployScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEFORE_PACKAGE_SCRIPTS = "beforePackageScripts";
  @SerializedName(SERIALIZED_NAME_BEFORE_PACKAGE_SCRIPTS)
  private List<Script> beforePackageScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEFORE_TEST_SCRIPTS = "beforeTestScripts";
  @SerializedName(SERIALIZED_NAME_BEFORE_TEST_SCRIPTS)
  private List<Script> beforeTestScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANCHES_MODE = "branchesMode";
  @SerializedName(SERIALIZED_NAME_BRANCHES_MODE)
  private ProjectBranchesMode branchesMode;

  public static final String SERIALIZED_NAME_BUILD_CLOUD = "buildCloud";
  @SerializedName(SERIALIZED_NAME_BUILD_CLOUD)
  private List<StringValueObject> buildCloud = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUILD_MODE = "buildMode";
  @SerializedName(SERIALIZED_NAME_BUILD_MODE)
  private BuildMode buildMode;

  public static final String SERIALIZED_NAME_BUILD_SCRIPTS = "buildScripts";
  @SerializedName(SERIALIZED_NAME_BUILD_SCRIPTS)
  private List<Script> buildScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHE_ENTRIES = "cacheEntries";
  @SerializedName(SERIALIZED_NAME_CACHE_ENTRIES)
  private List<StringValueObject> cacheEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLONE_DEPTH = "cloneDepth";
  @SerializedName(SERIALIZED_NAME_CLONE_DEPTH)
  private Integer cloneDepth;

  public static final String SERIALIZED_NAME_CLONE_FOLDER = "cloneFolder";
  @SerializedName(SERIALIZED_NAME_CLONE_FOLDER)
  private String cloneFolder;

  public static final String SERIALIZED_NAME_CLONE_SCRIPTS = "cloneScripts";
  @SerializedName(SERIALIZED_NAME_CLONE_SCRIPTS)
  private List<Script> cloneScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private List<StringValueObject> _configuration = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURE_NU_GET_ACCOUNT_SOURCE = "configureNuGetAccountSource";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_NU_GET_ACCOUNT_SOURCE)
  private Boolean configureNuGetAccountSource;

  public static final String SERIALIZED_NAME_CONFIGURE_NU_GET_PROJECT_SOURCE = "configureNuGetProjectSource";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_NU_GET_PROJECT_SOURCE)
  private Boolean configureNuGetProjectSource;

  public static final String SERIALIZED_NAME_DEPLOY_MODE = "deployMode";
  @SerializedName(SERIALIZED_NAME_DEPLOY_MODE)
  private DeployMode deployMode;

  public static final String SERIALIZED_NAME_DEPLOY_SCRIPTS = "deployScripts";
  @SerializedName(SERIALIZED_NAME_DEPLOY_SCRIPTS)
  private List<Script> deployScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPLOYMENTS = "deployments";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS)
  private List<DeploymentProvider> deployments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLE_NU_GET_PUBLISH_FOR_OCTOPUS_PACKAGES = "disableNuGetPublishForOctopusPackages";
  @SerializedName(SERIALIZED_NAME_DISABLE_NU_GET_PUBLISH_FOR_OCTOPUS_PACKAGES)
  private Boolean disableNuGetPublishForOctopusPackages;

  public static final String SERIALIZED_NAME_DISABLE_NU_GET_PUBLISH_ON_PULL_REQUESTS = "disableNuGetPublishOnPullRequests";
  @SerializedName(SERIALIZED_NAME_DISABLE_NU_GET_PUBLISH_ON_PULL_REQUESTS)
  private Boolean disableNuGetPublishOnPullRequests;

  public static final String SERIALIZED_NAME_DO_NOT_INCREMENT_BUILD_NUMBER_ON_PULL_REQUESTS = "doNotIncrementBuildNumberOnPullRequests";
  @SerializedName(SERIALIZED_NAME_DO_NOT_INCREMENT_BUILD_NUMBER_ON_PULL_REQUESTS)
  private Boolean doNotIncrementBuildNumberOnPullRequests;

  public static final String SERIALIZED_NAME_DOTNET_CSPROJ_ASSEMBLY_VERSION_FORMAT = "dotnetCsprojAssemblyVersionFormat";
  @SerializedName(SERIALIZED_NAME_DOTNET_CSPROJ_ASSEMBLY_VERSION_FORMAT)
  private String dotnetCsprojAssemblyVersionFormat;

  public static final String SERIALIZED_NAME_DOTNET_CSPROJ_FILE = "dotnetCsprojFile";
  @SerializedName(SERIALIZED_NAME_DOTNET_CSPROJ_FILE)
  private String dotnetCsprojFile;

  public static final String SERIALIZED_NAME_DOTNET_CSPROJ_FILE_VERSION_FORMAT = "dotnetCsprojFileVersionFormat";
  @SerializedName(SERIALIZED_NAME_DOTNET_CSPROJ_FILE_VERSION_FORMAT)
  private String dotnetCsprojFileVersionFormat;

  public static final String SERIALIZED_NAME_DOTNET_CSPROJ_INFORMATIONAL_VERSION_FORMAT = "dotnetCsprojInformationalVersionFormat";
  @SerializedName(SERIALIZED_NAME_DOTNET_CSPROJ_INFORMATIONAL_VERSION_FORMAT)
  private String dotnetCsprojInformationalVersionFormat;

  public static final String SERIALIZED_NAME_DOTNET_CSPROJ_PACKAGE_VERSION_FORMAT = "dotnetCsprojPackageVersionFormat";
  @SerializedName(SERIALIZED_NAME_DOTNET_CSPROJ_PACKAGE_VERSION_FORMAT)
  private String dotnetCsprojPackageVersionFormat;

  public static final String SERIALIZED_NAME_DOTNET_CSPROJ_VERSION_FORMAT = "dotnetCsprojVersionFormat";
  @SerializedName(SERIALIZED_NAME_DOTNET_CSPROJ_VERSION_FORMAT)
  private String dotnetCsprojVersionFormat;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<StoredNameValue> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES_MATRIX = "environmentVariablesMatrix";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES_MATRIX)
  private List<StoredNameValueMatrix> environmentVariablesMatrix = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDE_BRANCHES = "excludeBranches";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_BRANCHES)
  private List<StringValueObject> excludeBranches = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_HTTPS_CLONE = "forceHttpsClone";
  @SerializedName(SERIALIZED_NAME_FORCE_HTTPS_CLONE)
  private Boolean forceHttpsClone;

  public static final String SERIALIZED_NAME_HOSTS_ENTRIES = "hostsEntries";
  @SerializedName(SERIALIZED_NAME_HOSTS_ENTRIES)
  private List<HostEntry> hostsEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOT_FIX_SCRIPTS = "hotFixScripts";
  @SerializedName(SERIALIZED_NAME_HOT_FIX_SCRIPTS)
  private List<Script> hotFixScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_BRANCHES = "includeBranches";
  @SerializedName(SERIALIZED_NAME_INCLUDE_BRANCHES)
  private List<StringValueObject> includeBranches = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_NU_GET_REFERENCES = "includeNuGetReferences";
  @SerializedName(SERIALIZED_NAME_INCLUDE_NU_GET_REFERENCES)
  private Boolean includeNuGetReferences;

  public static final String SERIALIZED_NAME_INIT_SCRIPTS = "initScripts";
  @SerializedName(SERIALIZED_NAME_INIT_SCRIPTS)
  private List<Script> initScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTALL_SCRIPTS = "installScripts";
  @SerializedName(SERIALIZED_NAME_INSTALL_SCRIPTS)
  private List<Script> installScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATRIX_ALLOW_FAILURES = "matrixAllowFailures";
  @SerializedName(SERIALIZED_NAME_MATRIX_ALLOW_FAILURES)
  private List<StoredNameValueMatrix> matrixAllowFailures = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATRIX_EXCEPT = "matrixExcept";
  @SerializedName(SERIALIZED_NAME_MATRIX_EXCEPT)
  private List<StoredNameValueMatrix> matrixExcept = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATRIX_EXCLUDE = "matrixExclude";
  @SerializedName(SERIALIZED_NAME_MATRIX_EXCLUDE)
  private List<StoredNameValueMatrix> matrixExclude = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATRIX_FAST_FINISH = "matrixFastFinish";
  @SerializedName(SERIALIZED_NAME_MATRIX_FAST_FINISH)
  private Boolean matrixFastFinish;

  public static final String SERIALIZED_NAME_MATRIX_ONLY = "matrixOnly";
  @SerializedName(SERIALIZED_NAME_MATRIX_ONLY)
  private List<StoredNameValueMatrix> matrixOnly = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_JOBS = "maxJobs";
  @SerializedName(SERIALIZED_NAME_MAX_JOBS)
  private Integer maxJobs;

  public static final String SERIALIZED_NAME_MS_BUILD_IN_PARALLEL = "msBuildInParallel";
  @SerializedName(SERIALIZED_NAME_MS_BUILD_IN_PARALLEL)
  private Boolean msBuildInParallel;

  public static final String SERIALIZED_NAME_MS_BUILD_PROJECT_FILE_NAME = "msBuildProjectFileName";
  @SerializedName(SERIALIZED_NAME_MS_BUILD_PROJECT_FILE_NAME)
  private String msBuildProjectFileName;

  public static final String SERIALIZED_NAME_MS_BUILD_VERBOSITY = "msBuildVerbosity";
  @SerializedName(SERIALIZED_NAME_MS_BUILD_VERBOSITY)
  private MSBuildVerbosity msBuildVerbosity;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<NotificationProviderSettings> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_BUILD_ERROR_SCRIPTS = "onBuildErrorScripts";
  @SerializedName(SERIALIZED_NAME_ON_BUILD_ERROR_SCRIPTS)
  private List<Script> onBuildErrorScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_BUILD_FINISH_SCRIPTS = "onBuildFinishScripts";
  @SerializedName(SERIALIZED_NAME_ON_BUILD_FINISH_SCRIPTS)
  private List<Script> onBuildFinishScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_BUILD_SUCCESS_SCRIPTS = "onBuildSuccessScripts";
  @SerializedName(SERIALIZED_NAME_ON_BUILD_SUCCESS_SCRIPTS)
  private List<Script> onBuildSuccessScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ONLY_COMMITS_FILES = "onlyCommitsFiles";
  @SerializedName(SERIALIZED_NAME_ONLY_COMMITS_FILES)
  private List<StringValueObject> onlyCommitsFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private List<BuildWorkerImageInner> operatingSystem = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE_ASP_NET_CORE_PROJECTS = "packageAspNetCoreProjects";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ASP_NET_CORE_PROJECTS)
  private Boolean packageAspNetCoreProjects;

  public static final String SERIALIZED_NAME_PACKAGE_AZURE_CLOUD_SERVICE_PROJECTS = "packageAzureCloudServiceProjects";
  @SerializedName(SERIALIZED_NAME_PACKAGE_AZURE_CLOUD_SERVICE_PROJECTS)
  private Boolean packageAzureCloudServiceProjects;

  public static final String SERIALIZED_NAME_PACKAGE_DOTNET_CONSOLE_PROJECTS = "packageDotnetConsoleProjects";
  @SerializedName(SERIALIZED_NAME_PACKAGE_DOTNET_CONSOLE_PROJECTS)
  private Boolean packageDotnetConsoleProjects;

  public static final String SERIALIZED_NAME_PACKAGE_NU_GET_PROJECTS = "packageNuGetProjects";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NU_GET_PROJECTS)
  private Boolean packageNuGetProjects;

  public static final String SERIALIZED_NAME_PACKAGE_NU_GET_SYMBOLS = "packageNuGetSymbols";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NU_GET_SYMBOLS)
  private Boolean packageNuGetSymbols;

  public static final String SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS = "packageWebApplicationProjects";
  @SerializedName(SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS)
  private Boolean packageWebApplicationProjects;

  public static final String SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS_BEANSTALK = "packageWebApplicationProjectsBeanstalk";
  @SerializedName(SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS_BEANSTALK)
  private Boolean packageWebApplicationProjectsBeanstalk;

  public static final String SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS_OCTOPUS = "packageWebApplicationProjectsOctopus";
  @SerializedName(SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS_OCTOPUS)
  private Boolean packageWebApplicationProjectsOctopus;

  public static final String SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS_X_COPY = "packageWebApplicationProjectsXCopy";
  @SerializedName(SERIALIZED_NAME_PACKAGE_WEB_APPLICATION_PROJECTS_X_COPY)
  private Boolean packageWebApplicationProjectsXCopy;

  public static final String SERIALIZED_NAME_PATCH_ASSEMBLY_INFO = "patchAssemblyInfo";
  @SerializedName(SERIALIZED_NAME_PATCH_ASSEMBLY_INFO)
  private Boolean patchAssemblyInfo;

  public static final String SERIALIZED_NAME_PATCH_DOTNET_CSPROJ = "patchDotnetCsproj";
  @SerializedName(SERIALIZED_NAME_PATCH_DOTNET_CSPROJ)
  private Boolean patchDotnetCsproj;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private List<ProjectConfigurationPlatformInner> platform = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<OSServicesToStartDuringTheBuildProcessInner> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHALLOW_CLONE = "shallowClone";
  @SerializedName(SERIALIZED_NAME_SHALLOW_CLONE)
  private Boolean shallowClone;

  public static final String SERIALIZED_NAME_SKIP_BRANCH_WITH_PULL_REQUESTS = "skipBranchWithPullRequests";
  @SerializedName(SERIALIZED_NAME_SKIP_BRANCH_WITH_PULL_REQUESTS)
  private Boolean skipBranchWithPullRequests;

  public static final String SERIALIZED_NAME_SKIP_COMMITS_FILES = "skipCommitsFiles";
  @SerializedName(SERIALIZED_NAME_SKIP_COMMITS_FILES)
  private List<StringValueObject> skipCommitsFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_NON_TAGS = "skipNonTags";
  @SerializedName(SERIALIZED_NAME_SKIP_NON_TAGS)
  private Boolean skipNonTags;

  public static final String SERIALIZED_NAME_SKIP_TAGS = "skipTags";
  @SerializedName(SERIALIZED_NAME_SKIP_TAGS)
  private Boolean skipTags;

  public static final String SERIALIZED_NAME_STACKS = "stacks";
  @SerializedName(SERIALIZED_NAME_STACKS)
  private List<UnknownType> stacks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_ASSEMBLIES = "testAssemblies";
  @SerializedName(SERIALIZED_NAME_TEST_ASSEMBLIES)
  private List<StringValueObject> testAssemblies = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_CATEGORIES = "testCategories";
  @SerializedName(SERIALIZED_NAME_TEST_CATEGORIES)
  private List<StringValueObject> testCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_CATEGORIES_MATRIX = "testCategoriesMatrix";
  @SerializedName(SERIALIZED_NAME_TEST_CATEGORIES_MATRIX)
  private List<ProjectConfigurationTestCategoriesMatrixInner> testCategoriesMatrix = new ArrayList<>();

  /**
   * Gets or Sets testCategoriesMode
   */
  @JsonAdapter(TestCategoriesModeEnum.Adapter.class)
  public enum TestCategoriesModeEnum {
    EXCLUDE("exclude"),
    
    INCLUDE("include");

    private String value;

    TestCategoriesModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TestCategoriesModeEnum fromValue(String value) {
      for (TestCategoriesModeEnum b : TestCategoriesModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TestCategoriesModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestCategoriesModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestCategoriesModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TestCategoriesModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TestCategoriesModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEST_CATEGORIES_MODE = "testCategoriesMode";
  @SerializedName(SERIALIZED_NAME_TEST_CATEGORIES_MODE)
  private TestCategoriesModeEnum testCategoriesMode;

  public static final String SERIALIZED_NAME_TEST_MODE = "testMode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  private TestMode testMode;

  public static final String SERIALIZED_NAME_TEST_SCRIPTS = "testScripts";
  @SerializedName(SERIALIZED_NAME_TEST_SCRIPTS)
  private List<Script> testScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_XAMARIN_REGISTER_ANDROID_PRODUCT = "xamarinRegisterAndroidProduct";
  @SerializedName(SERIALIZED_NAME_XAMARIN_REGISTER_ANDROID_PRODUCT)
  private Boolean xamarinRegisterAndroidProduct;

  public static final String SERIALIZED_NAME_XAMARIN_REGISTER_IOS_PRODUCT = "xamarinRegisterIosProduct";
  @SerializedName(SERIALIZED_NAME_XAMARIN_REGISTER_IOS_PRODUCT)
  private Boolean xamarinRegisterIosProduct;

  public ProjectConfiguration() {
  }

  public ProjectConfiguration afterBuildScripts(List<Script> afterBuildScripts) {
    this.afterBuildScripts = afterBuildScripts;
    return this;
  }

  public ProjectConfiguration addAfterBuildScriptsItem(Script afterBuildScriptsItem) {
    if (this.afterBuildScripts == null) {
      this.afterBuildScripts = new ArrayList<>();
    }
    this.afterBuildScripts.add(afterBuildScriptsItem);
    return this;
  }

  /**
   * Get afterBuildScripts
   * @return afterBuildScripts
   */
  @javax.annotation.Nullable
  public List<Script> getAfterBuildScripts() {
    return afterBuildScripts;
  }

  public void setAfterBuildScripts(List<Script> afterBuildScripts) {
    this.afterBuildScripts = afterBuildScripts;
  }


  public ProjectConfiguration afterDeployScripts(List<Script> afterDeployScripts) {
    this.afterDeployScripts = afterDeployScripts;
    return this;
  }

  public ProjectConfiguration addAfterDeployScriptsItem(Script afterDeployScriptsItem) {
    if (this.afterDeployScripts == null) {
      this.afterDeployScripts = new ArrayList<>();
    }
    this.afterDeployScripts.add(afterDeployScriptsItem);
    return this;
  }

  /**
   * Get afterDeployScripts
   * @return afterDeployScripts
   */
  @javax.annotation.Nullable
  public List<Script> getAfterDeployScripts() {
    return afterDeployScripts;
  }

  public void setAfterDeployScripts(List<Script> afterDeployScripts) {
    this.afterDeployScripts = afterDeployScripts;
  }


  public ProjectConfiguration afterTestScripts(List<Script> afterTestScripts) {
    this.afterTestScripts = afterTestScripts;
    return this;
  }

  public ProjectConfiguration addAfterTestScriptsItem(Script afterTestScriptsItem) {
    if (this.afterTestScripts == null) {
      this.afterTestScripts = new ArrayList<>();
    }
    this.afterTestScripts.add(afterTestScriptsItem);
    return this;
  }

  /**
   * Get afterTestScripts
   * @return afterTestScripts
   */
  @javax.annotation.Nullable
  public List<Script> getAfterTestScripts() {
    return afterTestScripts;
  }

  public void setAfterTestScripts(List<Script> afterTestScripts) {
    this.afterTestScripts = afterTestScripts;
  }


  public ProjectConfiguration artifacts(List<Artifact> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public ProjectConfiguration addArtifactsItem(Artifact artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new ArrayList<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

  /**
   * Get artifacts
   * @return artifacts
   */
  @javax.annotation.Nullable
  public List<Artifact> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(List<Artifact> artifacts) {
    this.artifacts = artifacts;
  }


  public ProjectConfiguration assemblyFileVersionFormat(String assemblyFileVersionFormat) {
    this.assemblyFileVersionFormat = assemblyFileVersionFormat;
    return this;
  }

  /**
   * Get assemblyFileVersionFormat
   * @return assemblyFileVersionFormat
   */
  @javax.annotation.Nullable
  public String getAssemblyFileVersionFormat() {
    return assemblyFileVersionFormat;
  }

  public void setAssemblyFileVersionFormat(String assemblyFileVersionFormat) {
    this.assemblyFileVersionFormat = assemblyFileVersionFormat;
  }


  public ProjectConfiguration assemblyInfoFile(String assemblyInfoFile) {
    this.assemblyInfoFile = assemblyInfoFile;
    return this;
  }

  /**
   * Get assemblyInfoFile
   * @return assemblyInfoFile
   */
  @javax.annotation.Nullable
  public String getAssemblyInfoFile() {
    return assemblyInfoFile;
  }

  public void setAssemblyInfoFile(String assemblyInfoFile) {
    this.assemblyInfoFile = assemblyInfoFile;
  }


  public ProjectConfiguration assemblyInformationalVersionFormat(String assemblyInformationalVersionFormat) {
    this.assemblyInformationalVersionFormat = assemblyInformationalVersionFormat;
    return this;
  }

  /**
   * Get assemblyInformationalVersionFormat
   * @return assemblyInformationalVersionFormat
   */
  @javax.annotation.Nullable
  public String getAssemblyInformationalVersionFormat() {
    return assemblyInformationalVersionFormat;
  }

  public void setAssemblyInformationalVersionFormat(String assemblyInformationalVersionFormat) {
    this.assemblyInformationalVersionFormat = assemblyInformationalVersionFormat;
  }


  public ProjectConfiguration assemblyVersionFormat(String assemblyVersionFormat) {
    this.assemblyVersionFormat = assemblyVersionFormat;
    return this;
  }

  /**
   * Get assemblyVersionFormat
   * @return assemblyVersionFormat
   */
  @javax.annotation.Nullable
  public String getAssemblyVersionFormat() {
    return assemblyVersionFormat;
  }

  public void setAssemblyVersionFormat(String assemblyVersionFormat) {
    this.assemblyVersionFormat = assemblyVersionFormat;
  }


  public ProjectConfiguration beforeBuildScripts(List<Script> beforeBuildScripts) {
    this.beforeBuildScripts = beforeBuildScripts;
    return this;
  }

  public ProjectConfiguration addBeforeBuildScriptsItem(Script beforeBuildScriptsItem) {
    if (this.beforeBuildScripts == null) {
      this.beforeBuildScripts = new ArrayList<>();
    }
    this.beforeBuildScripts.add(beforeBuildScriptsItem);
    return this;
  }

  /**
   * Get beforeBuildScripts
   * @return beforeBuildScripts
   */
  @javax.annotation.Nullable
  public List<Script> getBeforeBuildScripts() {
    return beforeBuildScripts;
  }

  public void setBeforeBuildScripts(List<Script> beforeBuildScripts) {
    this.beforeBuildScripts = beforeBuildScripts;
  }


  public ProjectConfiguration beforeDeployScripts(List<Script> beforeDeployScripts) {
    this.beforeDeployScripts = beforeDeployScripts;
    return this;
  }

  public ProjectConfiguration addBeforeDeployScriptsItem(Script beforeDeployScriptsItem) {
    if (this.beforeDeployScripts == null) {
      this.beforeDeployScripts = new ArrayList<>();
    }
    this.beforeDeployScripts.add(beforeDeployScriptsItem);
    return this;
  }

  /**
   * Get beforeDeployScripts
   * @return beforeDeployScripts
   */
  @javax.annotation.Nullable
  public List<Script> getBeforeDeployScripts() {
    return beforeDeployScripts;
  }

  public void setBeforeDeployScripts(List<Script> beforeDeployScripts) {
    this.beforeDeployScripts = beforeDeployScripts;
  }


  public ProjectConfiguration beforePackageScripts(List<Script> beforePackageScripts) {
    this.beforePackageScripts = beforePackageScripts;
    return this;
  }

  public ProjectConfiguration addBeforePackageScriptsItem(Script beforePackageScriptsItem) {
    if (this.beforePackageScripts == null) {
      this.beforePackageScripts = new ArrayList<>();
    }
    this.beforePackageScripts.add(beforePackageScriptsItem);
    return this;
  }

  /**
   * Get beforePackageScripts
   * @return beforePackageScripts
   */
  @javax.annotation.Nullable
  public List<Script> getBeforePackageScripts() {
    return beforePackageScripts;
  }

  public void setBeforePackageScripts(List<Script> beforePackageScripts) {
    this.beforePackageScripts = beforePackageScripts;
  }


  public ProjectConfiguration beforeTestScripts(List<Script> beforeTestScripts) {
    this.beforeTestScripts = beforeTestScripts;
    return this;
  }

  public ProjectConfiguration addBeforeTestScriptsItem(Script beforeTestScriptsItem) {
    if (this.beforeTestScripts == null) {
      this.beforeTestScripts = new ArrayList<>();
    }
    this.beforeTestScripts.add(beforeTestScriptsItem);
    return this;
  }

  /**
   * Get beforeTestScripts
   * @return beforeTestScripts
   */
  @javax.annotation.Nullable
  public List<Script> getBeforeTestScripts() {
    return beforeTestScripts;
  }

  public void setBeforeTestScripts(List<Script> beforeTestScripts) {
    this.beforeTestScripts = beforeTestScripts;
  }


  public ProjectConfiguration branchesMode(ProjectBranchesMode branchesMode) {
    this.branchesMode = branchesMode;
    return this;
  }

  /**
   * Get branchesMode
   * @return branchesMode
   */
  @javax.annotation.Nullable
  public ProjectBranchesMode getBranchesMode() {
    return branchesMode;
  }

  public void setBranchesMode(ProjectBranchesMode branchesMode) {
    this.branchesMode = branchesMode;
  }


  public ProjectConfiguration buildCloud(List<StringValueObject> buildCloud) {
    this.buildCloud = buildCloud;
    return this;
  }

  public ProjectConfiguration addBuildCloudItem(StringValueObject buildCloudItem) {
    if (this.buildCloud == null) {
      this.buildCloud = new ArrayList<>();
    }
    this.buildCloud.add(buildCloudItem);
    return this;
  }

  /**
   * Get buildCloud
   * @return buildCloud
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getBuildCloud() {
    return buildCloud;
  }

  public void setBuildCloud(List<StringValueObject> buildCloud) {
    this.buildCloud = buildCloud;
  }


  public ProjectConfiguration buildMode(BuildMode buildMode) {
    this.buildMode = buildMode;
    return this;
  }

  /**
   * Get buildMode
   * @return buildMode
   */
  @javax.annotation.Nullable
  public BuildMode getBuildMode() {
    return buildMode;
  }

  public void setBuildMode(BuildMode buildMode) {
    this.buildMode = buildMode;
  }


  public ProjectConfiguration buildScripts(List<Script> buildScripts) {
    this.buildScripts = buildScripts;
    return this;
  }

  public ProjectConfiguration addBuildScriptsItem(Script buildScriptsItem) {
    if (this.buildScripts == null) {
      this.buildScripts = new ArrayList<>();
    }
    this.buildScripts.add(buildScriptsItem);
    return this;
  }

  /**
   * Only set/used when &#x60;buildMode&#x60; is &#x60;script&#x60;.
   * @return buildScripts
   */
  @javax.annotation.Nullable
  public List<Script> getBuildScripts() {
    return buildScripts;
  }

  public void setBuildScripts(List<Script> buildScripts) {
    this.buildScripts = buildScripts;
  }


  public ProjectConfiguration cacheEntries(List<StringValueObject> cacheEntries) {
    this.cacheEntries = cacheEntries;
    return this;
  }

  public ProjectConfiguration addCacheEntriesItem(StringValueObject cacheEntriesItem) {
    if (this.cacheEntries == null) {
      this.cacheEntries = new ArrayList<>();
    }
    this.cacheEntries.add(cacheEntriesItem);
    return this;
  }

  /**
   * Get cacheEntries
   * @return cacheEntries
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getCacheEntries() {
    return cacheEntries;
  }

  public void setCacheEntries(List<StringValueObject> cacheEntries) {
    this.cacheEntries = cacheEntries;
  }


  public ProjectConfiguration cloneDepth(Integer cloneDepth) {
    this.cloneDepth = cloneDepth;
    return this;
  }

  /**
   * Get cloneDepth
   * minimum: 1
   * @return cloneDepth
   */
  @javax.annotation.Nullable
  public Integer getCloneDepth() {
    return cloneDepth;
  }

  public void setCloneDepth(Integer cloneDepth) {
    this.cloneDepth = cloneDepth;
  }


  public ProjectConfiguration cloneFolder(String cloneFolder) {
    this.cloneFolder = cloneFolder;
    return this;
  }

  /**
   * Get cloneFolder
   * @return cloneFolder
   */
  @javax.annotation.Nullable
  public String getCloneFolder() {
    return cloneFolder;
  }

  public void setCloneFolder(String cloneFolder) {
    this.cloneFolder = cloneFolder;
  }


  public ProjectConfiguration cloneScripts(List<Script> cloneScripts) {
    this.cloneScripts = cloneScripts;
    return this;
  }

  public ProjectConfiguration addCloneScriptsItem(Script cloneScriptsItem) {
    if (this.cloneScripts == null) {
      this.cloneScripts = new ArrayList<>();
    }
    this.cloneScripts.add(cloneScriptsItem);
    return this;
  }

  /**
   * Get cloneScripts
   * @return cloneScripts
   */
  @javax.annotation.Nullable
  public List<Script> getCloneScripts() {
    return cloneScripts;
  }

  public void setCloneScripts(List<Script> cloneScripts) {
    this.cloneScripts = cloneScripts;
  }


  public ProjectConfiguration _configuration(List<StringValueObject> _configuration) {
    this._configuration = _configuration;
    return this;
  }

  public ProjectConfiguration addConfigurationItem(StringValueObject _configurationItem) {
    if (this._configuration == null) {
      this._configuration = new ArrayList<>();
    }
    this._configuration.add(_configurationItem);
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(List<StringValueObject> _configuration) {
    this._configuration = _configuration;
  }


  public ProjectConfiguration configureNuGetAccountSource(Boolean configureNuGetAccountSource) {
    this.configureNuGetAccountSource = configureNuGetAccountSource;
    return this;
  }

  /**
   * Get configureNuGetAccountSource
   * @return configureNuGetAccountSource
   */
  @javax.annotation.Nullable
  public Boolean getConfigureNuGetAccountSource() {
    return configureNuGetAccountSource;
  }

  public void setConfigureNuGetAccountSource(Boolean configureNuGetAccountSource) {
    this.configureNuGetAccountSource = configureNuGetAccountSource;
  }


  public ProjectConfiguration configureNuGetProjectSource(Boolean configureNuGetProjectSource) {
    this.configureNuGetProjectSource = configureNuGetProjectSource;
    return this;
  }

  /**
   * Get configureNuGetProjectSource
   * @return configureNuGetProjectSource
   */
  @javax.annotation.Nullable
  public Boolean getConfigureNuGetProjectSource() {
    return configureNuGetProjectSource;
  }

  public void setConfigureNuGetProjectSource(Boolean configureNuGetProjectSource) {
    this.configureNuGetProjectSource = configureNuGetProjectSource;
  }


  public ProjectConfiguration deployMode(DeployMode deployMode) {
    this.deployMode = deployMode;
    return this;
  }

  /**
   * Get deployMode
   * @return deployMode
   */
  @javax.annotation.Nullable
  public DeployMode getDeployMode() {
    return deployMode;
  }

  public void setDeployMode(DeployMode deployMode) {
    this.deployMode = deployMode;
  }


  public ProjectConfiguration deployScripts(List<Script> deployScripts) {
    this.deployScripts = deployScripts;
    return this;
  }

  public ProjectConfiguration addDeployScriptsItem(Script deployScriptsItem) {
    if (this.deployScripts == null) {
      this.deployScripts = new ArrayList<>();
    }
    this.deployScripts.add(deployScriptsItem);
    return this;
  }

  /**
   * Get deployScripts
   * @return deployScripts
   */
  @javax.annotation.Nullable
  public List<Script> getDeployScripts() {
    return deployScripts;
  }

  public void setDeployScripts(List<Script> deployScripts) {
    this.deployScripts = deployScripts;
  }


  public ProjectConfiguration deployments(List<DeploymentProvider> deployments) {
    this.deployments = deployments;
    return this;
  }

  public ProjectConfiguration addDeploymentsItem(DeploymentProvider deploymentsItem) {
    if (this.deployments == null) {
      this.deployments = new ArrayList<>();
    }
    this.deployments.add(deploymentsItem);
    return this;
  }

  /**
   * Get deployments
   * @return deployments
   */
  @javax.annotation.Nullable
  public List<DeploymentProvider> getDeployments() {
    return deployments;
  }

  public void setDeployments(List<DeploymentProvider> deployments) {
    this.deployments = deployments;
  }


  public ProjectConfiguration disableNuGetPublishForOctopusPackages(Boolean disableNuGetPublishForOctopusPackages) {
    this.disableNuGetPublishForOctopusPackages = disableNuGetPublishForOctopusPackages;
    return this;
  }

  /**
   * Get disableNuGetPublishForOctopusPackages
   * @return disableNuGetPublishForOctopusPackages
   */
  @javax.annotation.Nullable
  public Boolean getDisableNuGetPublishForOctopusPackages() {
    return disableNuGetPublishForOctopusPackages;
  }

  public void setDisableNuGetPublishForOctopusPackages(Boolean disableNuGetPublishForOctopusPackages) {
    this.disableNuGetPublishForOctopusPackages = disableNuGetPublishForOctopusPackages;
  }


  public ProjectConfiguration disableNuGetPublishOnPullRequests(Boolean disableNuGetPublishOnPullRequests) {
    this.disableNuGetPublishOnPullRequests = disableNuGetPublishOnPullRequests;
    return this;
  }

  /**
   * Get disableNuGetPublishOnPullRequests
   * @return disableNuGetPublishOnPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getDisableNuGetPublishOnPullRequests() {
    return disableNuGetPublishOnPullRequests;
  }

  public void setDisableNuGetPublishOnPullRequests(Boolean disableNuGetPublishOnPullRequests) {
    this.disableNuGetPublishOnPullRequests = disableNuGetPublishOnPullRequests;
  }


  public ProjectConfiguration doNotIncrementBuildNumberOnPullRequests(Boolean doNotIncrementBuildNumberOnPullRequests) {
    this.doNotIncrementBuildNumberOnPullRequests = doNotIncrementBuildNumberOnPullRequests;
    return this;
  }

  /**
   * Get doNotIncrementBuildNumberOnPullRequests
   * @return doNotIncrementBuildNumberOnPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getDoNotIncrementBuildNumberOnPullRequests() {
    return doNotIncrementBuildNumberOnPullRequests;
  }

  public void setDoNotIncrementBuildNumberOnPullRequests(Boolean doNotIncrementBuildNumberOnPullRequests) {
    this.doNotIncrementBuildNumberOnPullRequests = doNotIncrementBuildNumberOnPullRequests;
  }


  public ProjectConfiguration dotnetCsprojAssemblyVersionFormat(String dotnetCsprojAssemblyVersionFormat) {
    this.dotnetCsprojAssemblyVersionFormat = dotnetCsprojAssemblyVersionFormat;
    return this;
  }

  /**
   * Get dotnetCsprojAssemblyVersionFormat
   * @return dotnetCsprojAssemblyVersionFormat
   */
  @javax.annotation.Nullable
  public String getDotnetCsprojAssemblyVersionFormat() {
    return dotnetCsprojAssemblyVersionFormat;
  }

  public void setDotnetCsprojAssemblyVersionFormat(String dotnetCsprojAssemblyVersionFormat) {
    this.dotnetCsprojAssemblyVersionFormat = dotnetCsprojAssemblyVersionFormat;
  }


  public ProjectConfiguration dotnetCsprojFile(String dotnetCsprojFile) {
    this.dotnetCsprojFile = dotnetCsprojFile;
    return this;
  }

  /**
   * Get dotnetCsprojFile
   * @return dotnetCsprojFile
   */
  @javax.annotation.Nullable
  public String getDotnetCsprojFile() {
    return dotnetCsprojFile;
  }

  public void setDotnetCsprojFile(String dotnetCsprojFile) {
    this.dotnetCsprojFile = dotnetCsprojFile;
  }


  public ProjectConfiguration dotnetCsprojFileVersionFormat(String dotnetCsprojFileVersionFormat) {
    this.dotnetCsprojFileVersionFormat = dotnetCsprojFileVersionFormat;
    return this;
  }

  /**
   * Get dotnetCsprojFileVersionFormat
   * @return dotnetCsprojFileVersionFormat
   */
  @javax.annotation.Nullable
  public String getDotnetCsprojFileVersionFormat() {
    return dotnetCsprojFileVersionFormat;
  }

  public void setDotnetCsprojFileVersionFormat(String dotnetCsprojFileVersionFormat) {
    this.dotnetCsprojFileVersionFormat = dotnetCsprojFileVersionFormat;
  }


  public ProjectConfiguration dotnetCsprojInformationalVersionFormat(String dotnetCsprojInformationalVersionFormat) {
    this.dotnetCsprojInformationalVersionFormat = dotnetCsprojInformationalVersionFormat;
    return this;
  }

  /**
   * Get dotnetCsprojInformationalVersionFormat
   * @return dotnetCsprojInformationalVersionFormat
   */
  @javax.annotation.Nullable
  public String getDotnetCsprojInformationalVersionFormat() {
    return dotnetCsprojInformationalVersionFormat;
  }

  public void setDotnetCsprojInformationalVersionFormat(String dotnetCsprojInformationalVersionFormat) {
    this.dotnetCsprojInformationalVersionFormat = dotnetCsprojInformationalVersionFormat;
  }


  public ProjectConfiguration dotnetCsprojPackageVersionFormat(String dotnetCsprojPackageVersionFormat) {
    this.dotnetCsprojPackageVersionFormat = dotnetCsprojPackageVersionFormat;
    return this;
  }

  /**
   * Get dotnetCsprojPackageVersionFormat
   * @return dotnetCsprojPackageVersionFormat
   */
  @javax.annotation.Nullable
  public String getDotnetCsprojPackageVersionFormat() {
    return dotnetCsprojPackageVersionFormat;
  }

  public void setDotnetCsprojPackageVersionFormat(String dotnetCsprojPackageVersionFormat) {
    this.dotnetCsprojPackageVersionFormat = dotnetCsprojPackageVersionFormat;
  }


  public ProjectConfiguration dotnetCsprojVersionFormat(String dotnetCsprojVersionFormat) {
    this.dotnetCsprojVersionFormat = dotnetCsprojVersionFormat;
    return this;
  }

  /**
   * Get dotnetCsprojVersionFormat
   * @return dotnetCsprojVersionFormat
   */
  @javax.annotation.Nullable
  public String getDotnetCsprojVersionFormat() {
    return dotnetCsprojVersionFormat;
  }

  public void setDotnetCsprojVersionFormat(String dotnetCsprojVersionFormat) {
    this.dotnetCsprojVersionFormat = dotnetCsprojVersionFormat;
  }


  public ProjectConfiguration environmentVariables(List<StoredNameValue> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public ProjectConfiguration addEnvironmentVariablesItem(StoredNameValue environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * Get environmentVariables
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<StoredNameValue> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<StoredNameValue> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public ProjectConfiguration environmentVariablesMatrix(List<StoredNameValueMatrix> environmentVariablesMatrix) {
    this.environmentVariablesMatrix = environmentVariablesMatrix;
    return this;
  }

  public ProjectConfiguration addEnvironmentVariablesMatrixItem(StoredNameValueMatrix environmentVariablesMatrixItem) {
    if (this.environmentVariablesMatrix == null) {
      this.environmentVariablesMatrix = new ArrayList<>();
    }
    this.environmentVariablesMatrix.add(environmentVariablesMatrixItem);
    return this;
  }

  /**
   * Get environmentVariablesMatrix
   * @return environmentVariablesMatrix
   */
  @javax.annotation.Nullable
  public List<StoredNameValueMatrix> getEnvironmentVariablesMatrix() {
    return environmentVariablesMatrix;
  }

  public void setEnvironmentVariablesMatrix(List<StoredNameValueMatrix> environmentVariablesMatrix) {
    this.environmentVariablesMatrix = environmentVariablesMatrix;
  }


  public ProjectConfiguration excludeBranches(List<StringValueObject> excludeBranches) {
    this.excludeBranches = excludeBranches;
    return this;
  }

  public ProjectConfiguration addExcludeBranchesItem(StringValueObject excludeBranchesItem) {
    if (this.excludeBranches == null) {
      this.excludeBranches = new ArrayList<>();
    }
    this.excludeBranches.add(excludeBranchesItem);
    return this;
  }

  /**
   * Get excludeBranches
   * @return excludeBranches
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getExcludeBranches() {
    return excludeBranches;
  }

  public void setExcludeBranches(List<StringValueObject> excludeBranches) {
    this.excludeBranches = excludeBranches;
  }


  public ProjectConfiguration forceHttpsClone(Boolean forceHttpsClone) {
    this.forceHttpsClone = forceHttpsClone;
    return this;
  }

  /**
   * Get forceHttpsClone
   * @return forceHttpsClone
   */
  @javax.annotation.Nullable
  public Boolean getForceHttpsClone() {
    return forceHttpsClone;
  }

  public void setForceHttpsClone(Boolean forceHttpsClone) {
    this.forceHttpsClone = forceHttpsClone;
  }


  public ProjectConfiguration hostsEntries(List<HostEntry> hostsEntries) {
    this.hostsEntries = hostsEntries;
    return this;
  }

  public ProjectConfiguration addHostsEntriesItem(HostEntry hostsEntriesItem) {
    if (this.hostsEntries == null) {
      this.hostsEntries = new ArrayList<>();
    }
    this.hostsEntries.add(hostsEntriesItem);
    return this;
  }

  /**
   * Get hostsEntries
   * @return hostsEntries
   */
  @javax.annotation.Nullable
  public List<HostEntry> getHostsEntries() {
    return hostsEntries;
  }

  public void setHostsEntries(List<HostEntry> hostsEntries) {
    this.hostsEntries = hostsEntries;
  }


  public ProjectConfiguration hotFixScripts(List<Script> hotFixScripts) {
    this.hotFixScripts = hotFixScripts;
    return this;
  }

  public ProjectConfiguration addHotFixScriptsItem(Script hotFixScriptsItem) {
    if (this.hotFixScripts == null) {
      this.hotFixScripts = new ArrayList<>();
    }
    this.hotFixScripts.add(hotFixScriptsItem);
    return this;
  }

  /**
   * Get hotFixScripts
   * @return hotFixScripts
   */
  @javax.annotation.Nullable
  public List<Script> getHotFixScripts() {
    return hotFixScripts;
  }

  public void setHotFixScripts(List<Script> hotFixScripts) {
    this.hotFixScripts = hotFixScripts;
  }


  public ProjectConfiguration includeBranches(List<StringValueObject> includeBranches) {
    this.includeBranches = includeBranches;
    return this;
  }

  public ProjectConfiguration addIncludeBranchesItem(StringValueObject includeBranchesItem) {
    if (this.includeBranches == null) {
      this.includeBranches = new ArrayList<>();
    }
    this.includeBranches.add(includeBranchesItem);
    return this;
  }

  /**
   * Get includeBranches
   * @return includeBranches
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getIncludeBranches() {
    return includeBranches;
  }

  public void setIncludeBranches(List<StringValueObject> includeBranches) {
    this.includeBranches = includeBranches;
  }


  public ProjectConfiguration includeNuGetReferences(Boolean includeNuGetReferences) {
    this.includeNuGetReferences = includeNuGetReferences;
    return this;
  }

  /**
   * Get includeNuGetReferences
   * @return includeNuGetReferences
   */
  @javax.annotation.Nullable
  public Boolean getIncludeNuGetReferences() {
    return includeNuGetReferences;
  }

  public void setIncludeNuGetReferences(Boolean includeNuGetReferences) {
    this.includeNuGetReferences = includeNuGetReferences;
  }


  public ProjectConfiguration initScripts(List<Script> initScripts) {
    this.initScripts = initScripts;
    return this;
  }

  public ProjectConfiguration addInitScriptsItem(Script initScriptsItem) {
    if (this.initScripts == null) {
      this.initScripts = new ArrayList<>();
    }
    this.initScripts.add(initScriptsItem);
    return this;
  }

  /**
   * Get initScripts
   * @return initScripts
   */
  @javax.annotation.Nullable
  public List<Script> getInitScripts() {
    return initScripts;
  }

  public void setInitScripts(List<Script> initScripts) {
    this.initScripts = initScripts;
  }


  public ProjectConfiguration installScripts(List<Script> installScripts) {
    this.installScripts = installScripts;
    return this;
  }

  public ProjectConfiguration addInstallScriptsItem(Script installScriptsItem) {
    if (this.installScripts == null) {
      this.installScripts = new ArrayList<>();
    }
    this.installScripts.add(installScriptsItem);
    return this;
  }

  /**
   * Get installScripts
   * @return installScripts
   */
  @javax.annotation.Nullable
  public List<Script> getInstallScripts() {
    return installScripts;
  }

  public void setInstallScripts(List<Script> installScripts) {
    this.installScripts = installScripts;
  }


  public ProjectConfiguration matrixAllowFailures(List<StoredNameValueMatrix> matrixAllowFailures) {
    this.matrixAllowFailures = matrixAllowFailures;
    return this;
  }

  public ProjectConfiguration addMatrixAllowFailuresItem(StoredNameValueMatrix matrixAllowFailuresItem) {
    if (this.matrixAllowFailures == null) {
      this.matrixAllowFailures = new ArrayList<>();
    }
    this.matrixAllowFailures.add(matrixAllowFailuresItem);
    return this;
  }

  /**
   * Although the names and values are not enforced, the combinations which are meaningful are documented at https://www.appveyor.com/docs/build-configuration/#allow-failing-jobs
   * @return matrixAllowFailures
   */
  @javax.annotation.Nullable
  public List<StoredNameValueMatrix> getMatrixAllowFailures() {
    return matrixAllowFailures;
  }

  public void setMatrixAllowFailures(List<StoredNameValueMatrix> matrixAllowFailures) {
    this.matrixAllowFailures = matrixAllowFailures;
  }


  public ProjectConfiguration matrixExcept(List<StoredNameValueMatrix> matrixExcept) {
    this.matrixExcept = matrixExcept;
    return this;
  }

  public ProjectConfiguration addMatrixExceptItem(StoredNameValueMatrix matrixExceptItem) {
    if (this.matrixExcept == null) {
      this.matrixExcept = new ArrayList<>();
    }
    this.matrixExcept.add(matrixExceptItem);
    return this;
  }

  /**
   * Get matrixExcept
   * @return matrixExcept
   */
  @javax.annotation.Nullable
  public List<StoredNameValueMatrix> getMatrixExcept() {
    return matrixExcept;
  }

  public void setMatrixExcept(List<StoredNameValueMatrix> matrixExcept) {
    this.matrixExcept = matrixExcept;
  }


  public ProjectConfiguration matrixExclude(List<StoredNameValueMatrix> matrixExclude) {
    this.matrixExclude = matrixExclude;
    return this;
  }

  public ProjectConfiguration addMatrixExcludeItem(StoredNameValueMatrix matrixExcludeItem) {
    if (this.matrixExclude == null) {
      this.matrixExclude = new ArrayList<>();
    }
    this.matrixExclude.add(matrixExcludeItem);
    return this;
  }

  /**
   * Get matrixExclude
   * @return matrixExclude
   */
  @javax.annotation.Nullable
  public List<StoredNameValueMatrix> getMatrixExclude() {
    return matrixExclude;
  }

  public void setMatrixExclude(List<StoredNameValueMatrix> matrixExclude) {
    this.matrixExclude = matrixExclude;
  }


  public ProjectConfiguration matrixFastFinish(Boolean matrixFastFinish) {
    this.matrixFastFinish = matrixFastFinish;
    return this;
  }

  /**
   * Get matrixFastFinish
   * @return matrixFastFinish
   */
  @javax.annotation.Nullable
  public Boolean getMatrixFastFinish() {
    return matrixFastFinish;
  }

  public void setMatrixFastFinish(Boolean matrixFastFinish) {
    this.matrixFastFinish = matrixFastFinish;
  }


  public ProjectConfiguration matrixOnly(List<StoredNameValueMatrix> matrixOnly) {
    this.matrixOnly = matrixOnly;
    return this;
  }

  public ProjectConfiguration addMatrixOnlyItem(StoredNameValueMatrix matrixOnlyItem) {
    if (this.matrixOnly == null) {
      this.matrixOnly = new ArrayList<>();
    }
    this.matrixOnly.add(matrixOnlyItem);
    return this;
  }

  /**
   * Get matrixOnly
   * @return matrixOnly
   */
  @javax.annotation.Nullable
  public List<StoredNameValueMatrix> getMatrixOnly() {
    return matrixOnly;
  }

  public void setMatrixOnly(List<StoredNameValueMatrix> matrixOnly) {
    this.matrixOnly = matrixOnly;
  }


  public ProjectConfiguration maxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
    return this;
  }

  /**
   * Get maxJobs
   * minimum: 1
   * @return maxJobs
   */
  @javax.annotation.Nullable
  public Integer getMaxJobs() {
    return maxJobs;
  }

  public void setMaxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
  }


  public ProjectConfiguration msBuildInParallel(Boolean msBuildInParallel) {
    this.msBuildInParallel = msBuildInParallel;
    return this;
  }

  /**
   * Get msBuildInParallel
   * @return msBuildInParallel
   */
  @javax.annotation.Nullable
  public Boolean getMsBuildInParallel() {
    return msBuildInParallel;
  }

  public void setMsBuildInParallel(Boolean msBuildInParallel) {
    this.msBuildInParallel = msBuildInParallel;
  }


  public ProjectConfiguration msBuildProjectFileName(String msBuildProjectFileName) {
    this.msBuildProjectFileName = msBuildProjectFileName;
    return this;
  }

  /**
   * Get msBuildProjectFileName
   * @return msBuildProjectFileName
   */
  @javax.annotation.Nullable
  public String getMsBuildProjectFileName() {
    return msBuildProjectFileName;
  }

  public void setMsBuildProjectFileName(String msBuildProjectFileName) {
    this.msBuildProjectFileName = msBuildProjectFileName;
  }


  public ProjectConfiguration msBuildVerbosity(MSBuildVerbosity msBuildVerbosity) {
    this.msBuildVerbosity = msBuildVerbosity;
    return this;
  }

  /**
   * Get msBuildVerbosity
   * @return msBuildVerbosity
   */
  @javax.annotation.Nullable
  public MSBuildVerbosity getMsBuildVerbosity() {
    return msBuildVerbosity;
  }

  public void setMsBuildVerbosity(MSBuildVerbosity msBuildVerbosity) {
    this.msBuildVerbosity = msBuildVerbosity;
  }


  public ProjectConfiguration notifications(List<NotificationProviderSettings> notifications) {
    this.notifications = notifications;
    return this;
  }

  public ProjectConfiguration addNotificationsItem(NotificationProviderSettings notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<NotificationProviderSettings> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<NotificationProviderSettings> notifications) {
    this.notifications = notifications;
  }


  public ProjectConfiguration onBuildErrorScripts(List<Script> onBuildErrorScripts) {
    this.onBuildErrorScripts = onBuildErrorScripts;
    return this;
  }

  public ProjectConfiguration addOnBuildErrorScriptsItem(Script onBuildErrorScriptsItem) {
    if (this.onBuildErrorScripts == null) {
      this.onBuildErrorScripts = new ArrayList<>();
    }
    this.onBuildErrorScripts.add(onBuildErrorScriptsItem);
    return this;
  }

  /**
   * Get onBuildErrorScripts
   * @return onBuildErrorScripts
   */
  @javax.annotation.Nullable
  public List<Script> getOnBuildErrorScripts() {
    return onBuildErrorScripts;
  }

  public void setOnBuildErrorScripts(List<Script> onBuildErrorScripts) {
    this.onBuildErrorScripts = onBuildErrorScripts;
  }


  public ProjectConfiguration onBuildFinishScripts(List<Script> onBuildFinishScripts) {
    this.onBuildFinishScripts = onBuildFinishScripts;
    return this;
  }

  public ProjectConfiguration addOnBuildFinishScriptsItem(Script onBuildFinishScriptsItem) {
    if (this.onBuildFinishScripts == null) {
      this.onBuildFinishScripts = new ArrayList<>();
    }
    this.onBuildFinishScripts.add(onBuildFinishScriptsItem);
    return this;
  }

  /**
   * Get onBuildFinishScripts
   * @return onBuildFinishScripts
   */
  @javax.annotation.Nullable
  public List<Script> getOnBuildFinishScripts() {
    return onBuildFinishScripts;
  }

  public void setOnBuildFinishScripts(List<Script> onBuildFinishScripts) {
    this.onBuildFinishScripts = onBuildFinishScripts;
  }


  public ProjectConfiguration onBuildSuccessScripts(List<Script> onBuildSuccessScripts) {
    this.onBuildSuccessScripts = onBuildSuccessScripts;
    return this;
  }

  public ProjectConfiguration addOnBuildSuccessScriptsItem(Script onBuildSuccessScriptsItem) {
    if (this.onBuildSuccessScripts == null) {
      this.onBuildSuccessScripts = new ArrayList<>();
    }
    this.onBuildSuccessScripts.add(onBuildSuccessScriptsItem);
    return this;
  }

  /**
   * Get onBuildSuccessScripts
   * @return onBuildSuccessScripts
   */
  @javax.annotation.Nullable
  public List<Script> getOnBuildSuccessScripts() {
    return onBuildSuccessScripts;
  }

  public void setOnBuildSuccessScripts(List<Script> onBuildSuccessScripts) {
    this.onBuildSuccessScripts = onBuildSuccessScripts;
  }


  public ProjectConfiguration onlyCommitsFiles(List<StringValueObject> onlyCommitsFiles) {
    this.onlyCommitsFiles = onlyCommitsFiles;
    return this;
  }

  public ProjectConfiguration addOnlyCommitsFilesItem(StringValueObject onlyCommitsFilesItem) {
    if (this.onlyCommitsFiles == null) {
      this.onlyCommitsFiles = new ArrayList<>();
    }
    this.onlyCommitsFiles.add(onlyCommitsFilesItem);
    return this;
  }

  /**
   * Get onlyCommitsFiles
   * @return onlyCommitsFiles
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getOnlyCommitsFiles() {
    return onlyCommitsFiles;
  }

  public void setOnlyCommitsFiles(List<StringValueObject> onlyCommitsFiles) {
    this.onlyCommitsFiles = onlyCommitsFiles;
  }


  public ProjectConfiguration operatingSystem(List<BuildWorkerImageInner> operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  public ProjectConfiguration addOperatingSystemItem(BuildWorkerImageInner operatingSystemItem) {
    if (this.operatingSystem == null) {
      this.operatingSystem = new ArrayList<>();
    }
    this.operatingSystem.add(operatingSystemItem);
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public List<BuildWorkerImageInner> getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(List<BuildWorkerImageInner> operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public ProjectConfiguration packageAspNetCoreProjects(Boolean packageAspNetCoreProjects) {
    this.packageAspNetCoreProjects = packageAspNetCoreProjects;
    return this;
  }

  /**
   * Get packageAspNetCoreProjects
   * @return packageAspNetCoreProjects
   */
  @javax.annotation.Nullable
  public Boolean getPackageAspNetCoreProjects() {
    return packageAspNetCoreProjects;
  }

  public void setPackageAspNetCoreProjects(Boolean packageAspNetCoreProjects) {
    this.packageAspNetCoreProjects = packageAspNetCoreProjects;
  }


  public ProjectConfiguration packageAzureCloudServiceProjects(Boolean packageAzureCloudServiceProjects) {
    this.packageAzureCloudServiceProjects = packageAzureCloudServiceProjects;
    return this;
  }

  /**
   * Get packageAzureCloudServiceProjects
   * @return packageAzureCloudServiceProjects
   */
  @javax.annotation.Nullable
  public Boolean getPackageAzureCloudServiceProjects() {
    return packageAzureCloudServiceProjects;
  }

  public void setPackageAzureCloudServiceProjects(Boolean packageAzureCloudServiceProjects) {
    this.packageAzureCloudServiceProjects = packageAzureCloudServiceProjects;
  }


  public ProjectConfiguration packageDotnetConsoleProjects(Boolean packageDotnetConsoleProjects) {
    this.packageDotnetConsoleProjects = packageDotnetConsoleProjects;
    return this;
  }

  /**
   * Get packageDotnetConsoleProjects
   * @return packageDotnetConsoleProjects
   */
  @javax.annotation.Nullable
  public Boolean getPackageDotnetConsoleProjects() {
    return packageDotnetConsoleProjects;
  }

  public void setPackageDotnetConsoleProjects(Boolean packageDotnetConsoleProjects) {
    this.packageDotnetConsoleProjects = packageDotnetConsoleProjects;
  }


  public ProjectConfiguration packageNuGetProjects(Boolean packageNuGetProjects) {
    this.packageNuGetProjects = packageNuGetProjects;
    return this;
  }

  /**
   * Get packageNuGetProjects
   * @return packageNuGetProjects
   */
  @javax.annotation.Nullable
  public Boolean getPackageNuGetProjects() {
    return packageNuGetProjects;
  }

  public void setPackageNuGetProjects(Boolean packageNuGetProjects) {
    this.packageNuGetProjects = packageNuGetProjects;
  }


  public ProjectConfiguration packageNuGetSymbols(Boolean packageNuGetSymbols) {
    this.packageNuGetSymbols = packageNuGetSymbols;
    return this;
  }

  /**
   * Get packageNuGetSymbols
   * @return packageNuGetSymbols
   */
  @javax.annotation.Nullable
  public Boolean getPackageNuGetSymbols() {
    return packageNuGetSymbols;
  }

  public void setPackageNuGetSymbols(Boolean packageNuGetSymbols) {
    this.packageNuGetSymbols = packageNuGetSymbols;
  }


  public ProjectConfiguration packageWebApplicationProjects(Boolean packageWebApplicationProjects) {
    this.packageWebApplicationProjects = packageWebApplicationProjects;
    return this;
  }

  /**
   * Get packageWebApplicationProjects
   * @return packageWebApplicationProjects
   */
  @javax.annotation.Nullable
  public Boolean getPackageWebApplicationProjects() {
    return packageWebApplicationProjects;
  }

  public void setPackageWebApplicationProjects(Boolean packageWebApplicationProjects) {
    this.packageWebApplicationProjects = packageWebApplicationProjects;
  }


  public ProjectConfiguration packageWebApplicationProjectsBeanstalk(Boolean packageWebApplicationProjectsBeanstalk) {
    this.packageWebApplicationProjectsBeanstalk = packageWebApplicationProjectsBeanstalk;
    return this;
  }

  /**
   * Get packageWebApplicationProjectsBeanstalk
   * @return packageWebApplicationProjectsBeanstalk
   */
  @javax.annotation.Nullable
  public Boolean getPackageWebApplicationProjectsBeanstalk() {
    return packageWebApplicationProjectsBeanstalk;
  }

  public void setPackageWebApplicationProjectsBeanstalk(Boolean packageWebApplicationProjectsBeanstalk) {
    this.packageWebApplicationProjectsBeanstalk = packageWebApplicationProjectsBeanstalk;
  }


  public ProjectConfiguration packageWebApplicationProjectsOctopus(Boolean packageWebApplicationProjectsOctopus) {
    this.packageWebApplicationProjectsOctopus = packageWebApplicationProjectsOctopus;
    return this;
  }

  /**
   * Get packageWebApplicationProjectsOctopus
   * @return packageWebApplicationProjectsOctopus
   */
  @javax.annotation.Nullable
  public Boolean getPackageWebApplicationProjectsOctopus() {
    return packageWebApplicationProjectsOctopus;
  }

  public void setPackageWebApplicationProjectsOctopus(Boolean packageWebApplicationProjectsOctopus) {
    this.packageWebApplicationProjectsOctopus = packageWebApplicationProjectsOctopus;
  }


  public ProjectConfiguration packageWebApplicationProjectsXCopy(Boolean packageWebApplicationProjectsXCopy) {
    this.packageWebApplicationProjectsXCopy = packageWebApplicationProjectsXCopy;
    return this;
  }

  /**
   * Get packageWebApplicationProjectsXCopy
   * @return packageWebApplicationProjectsXCopy
   */
  @javax.annotation.Nullable
  public Boolean getPackageWebApplicationProjectsXCopy() {
    return packageWebApplicationProjectsXCopy;
  }

  public void setPackageWebApplicationProjectsXCopy(Boolean packageWebApplicationProjectsXCopy) {
    this.packageWebApplicationProjectsXCopy = packageWebApplicationProjectsXCopy;
  }


  public ProjectConfiguration patchAssemblyInfo(Boolean patchAssemblyInfo) {
    this.patchAssemblyInfo = patchAssemblyInfo;
    return this;
  }

  /**
   * Get patchAssemblyInfo
   * @return patchAssemblyInfo
   */
  @javax.annotation.Nullable
  public Boolean getPatchAssemblyInfo() {
    return patchAssemblyInfo;
  }

  public void setPatchAssemblyInfo(Boolean patchAssemblyInfo) {
    this.patchAssemblyInfo = patchAssemblyInfo;
  }


  public ProjectConfiguration patchDotnetCsproj(Boolean patchDotnetCsproj) {
    this.patchDotnetCsproj = patchDotnetCsproj;
    return this;
  }

  /**
   * Get patchDotnetCsproj
   * @return patchDotnetCsproj
   */
  @javax.annotation.Nullable
  public Boolean getPatchDotnetCsproj() {
    return patchDotnetCsproj;
  }

  public void setPatchDotnetCsproj(Boolean patchDotnetCsproj) {
    this.patchDotnetCsproj = patchDotnetCsproj;
  }


  public ProjectConfiguration platform(List<ProjectConfigurationPlatformInner> platform) {
    this.platform = platform;
    return this;
  }

  public ProjectConfiguration addPlatformItem(ProjectConfigurationPlatformInner platformItem) {
    if (this.platform == null) {
      this.platform = new ArrayList<>();
    }
    this.platform.add(platformItem);
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public List<ProjectConfigurationPlatformInner> getPlatform() {
    return platform;
  }

  public void setPlatform(List<ProjectConfigurationPlatformInner> platform) {
    this.platform = platform;
  }


  public ProjectConfiguration services(List<OSServicesToStartDuringTheBuildProcessInner> services) {
    this.services = services;
    return this;
  }

  public ProjectConfiguration addServicesItem(OSServicesToStartDuringTheBuildProcessInner servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  public List<OSServicesToStartDuringTheBuildProcessInner> getServices() {
    return services;
  }

  public void setServices(List<OSServicesToStartDuringTheBuildProcessInner> services) {
    this.services = services;
  }


  public ProjectConfiguration shallowClone(Boolean shallowClone) {
    this.shallowClone = shallowClone;
    return this;
  }

  /**
   * Get shallowClone
   * @return shallowClone
   */
  @javax.annotation.Nullable
  public Boolean getShallowClone() {
    return shallowClone;
  }

  public void setShallowClone(Boolean shallowClone) {
    this.shallowClone = shallowClone;
  }


  public ProjectConfiguration skipBranchWithPullRequests(Boolean skipBranchWithPullRequests) {
    this.skipBranchWithPullRequests = skipBranchWithPullRequests;
    return this;
  }

  /**
   * Get skipBranchWithPullRequests
   * @return skipBranchWithPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getSkipBranchWithPullRequests() {
    return skipBranchWithPullRequests;
  }

  public void setSkipBranchWithPullRequests(Boolean skipBranchWithPullRequests) {
    this.skipBranchWithPullRequests = skipBranchWithPullRequests;
  }


  public ProjectConfiguration skipCommitsFiles(List<StringValueObject> skipCommitsFiles) {
    this.skipCommitsFiles = skipCommitsFiles;
    return this;
  }

  public ProjectConfiguration addSkipCommitsFilesItem(StringValueObject skipCommitsFilesItem) {
    if (this.skipCommitsFiles == null) {
      this.skipCommitsFiles = new ArrayList<>();
    }
    this.skipCommitsFiles.add(skipCommitsFilesItem);
    return this;
  }

  /**
   * Get skipCommitsFiles
   * @return skipCommitsFiles
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getSkipCommitsFiles() {
    return skipCommitsFiles;
  }

  public void setSkipCommitsFiles(List<StringValueObject> skipCommitsFiles) {
    this.skipCommitsFiles = skipCommitsFiles;
  }


  public ProjectConfiguration skipNonTags(Boolean skipNonTags) {
    this.skipNonTags = skipNonTags;
    return this;
  }

  /**
   * Get skipNonTags
   * @return skipNonTags
   */
  @javax.annotation.Nullable
  public Boolean getSkipNonTags() {
    return skipNonTags;
  }

  public void setSkipNonTags(Boolean skipNonTags) {
    this.skipNonTags = skipNonTags;
  }


  public ProjectConfiguration skipTags(Boolean skipTags) {
    this.skipTags = skipTags;
    return this;
  }

  /**
   * Get skipTags
   * @return skipTags
   */
  @javax.annotation.Nullable
  public Boolean getSkipTags() {
    return skipTags;
  }

  public void setSkipTags(Boolean skipTags) {
    this.skipTags = skipTags;
  }


  public ProjectConfiguration stacks(List<UnknownType> stacks) {
    this.stacks = stacks;
    return this;
  }

  public ProjectConfiguration addStacksItem(UnknownType stacksItem) {
    if (this.stacks == null) {
      this.stacks = new ArrayList<>();
    }
    this.stacks.add(stacksItem);
    return this;
  }

  /**
   * Get stacks
   * @return stacks
   */
  @javax.annotation.Nullable
  public List<UnknownType> getStacks() {
    return stacks;
  }

  public void setStacks(List<UnknownType> stacks) {
    this.stacks = stacks;
  }


  public ProjectConfiguration testAssemblies(List<StringValueObject> testAssemblies) {
    this.testAssemblies = testAssemblies;
    return this;
  }

  public ProjectConfiguration addTestAssembliesItem(StringValueObject testAssembliesItem) {
    if (this.testAssemblies == null) {
      this.testAssemblies = new ArrayList<>();
    }
    this.testAssemblies.add(testAssembliesItem);
    return this;
  }

  /**
   * Get testAssemblies
   * @return testAssemblies
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getTestAssemblies() {
    return testAssemblies;
  }

  public void setTestAssemblies(List<StringValueObject> testAssemblies) {
    this.testAssemblies = testAssemblies;
  }


  public ProjectConfiguration testCategories(List<StringValueObject> testCategories) {
    this.testCategories = testCategories;
    return this;
  }

  public ProjectConfiguration addTestCategoriesItem(StringValueObject testCategoriesItem) {
    if (this.testCategories == null) {
      this.testCategories = new ArrayList<>();
    }
    this.testCategories.add(testCategoriesItem);
    return this;
  }

  /**
   * Get testCategories
   * @return testCategories
   */
  @javax.annotation.Nullable
  public List<StringValueObject> getTestCategories() {
    return testCategories;
  }

  public void setTestCategories(List<StringValueObject> testCategories) {
    this.testCategories = testCategories;
  }


  public ProjectConfiguration testCategoriesMatrix(List<ProjectConfigurationTestCategoriesMatrixInner> testCategoriesMatrix) {
    this.testCategoriesMatrix = testCategoriesMatrix;
    return this;
  }

  public ProjectConfiguration addTestCategoriesMatrixItem(ProjectConfigurationTestCategoriesMatrixInner testCategoriesMatrixItem) {
    if (this.testCategoriesMatrix == null) {
      this.testCategoriesMatrix = new ArrayList<>();
    }
    this.testCategoriesMatrix.add(testCategoriesMatrixItem);
    return this;
  }

  /**
   * Get testCategoriesMatrix
   * @return testCategoriesMatrix
   */
  @javax.annotation.Nullable
  public List<ProjectConfigurationTestCategoriesMatrixInner> getTestCategoriesMatrix() {
    return testCategoriesMatrix;
  }

  public void setTestCategoriesMatrix(List<ProjectConfigurationTestCategoriesMatrixInner> testCategoriesMatrix) {
    this.testCategoriesMatrix = testCategoriesMatrix;
  }


  public ProjectConfiguration testCategoriesMode(TestCategoriesModeEnum testCategoriesMode) {
    this.testCategoriesMode = testCategoriesMode;
    return this;
  }

  /**
   * Get testCategoriesMode
   * @return testCategoriesMode
   */
  @javax.annotation.Nullable
  public TestCategoriesModeEnum getTestCategoriesMode() {
    return testCategoriesMode;
  }

  public void setTestCategoriesMode(TestCategoriesModeEnum testCategoriesMode) {
    this.testCategoriesMode = testCategoriesMode;
  }


  public ProjectConfiguration testMode(TestMode testMode) {
    this.testMode = testMode;
    return this;
  }

  /**
   * Get testMode
   * @return testMode
   */
  @javax.annotation.Nullable
  public TestMode getTestMode() {
    return testMode;
  }

  public void setTestMode(TestMode testMode) {
    this.testMode = testMode;
  }


  public ProjectConfiguration testScripts(List<Script> testScripts) {
    this.testScripts = testScripts;
    return this;
  }

  public ProjectConfiguration addTestScriptsItem(Script testScriptsItem) {
    if (this.testScripts == null) {
      this.testScripts = new ArrayList<>();
    }
    this.testScripts.add(testScriptsItem);
    return this;
  }

  /**
   * Only set/used when &#x60;testMode&#x60; is &#x60;script&#x60;.
   * @return testScripts
   */
  @javax.annotation.Nullable
  public List<Script> getTestScripts() {
    return testScripts;
  }

  public void setTestScripts(List<Script> testScripts) {
    this.testScripts = testScripts;
  }


  public ProjectConfiguration xamarinRegisterAndroidProduct(Boolean xamarinRegisterAndroidProduct) {
    this.xamarinRegisterAndroidProduct = xamarinRegisterAndroidProduct;
    return this;
  }

  /**
   * Get xamarinRegisterAndroidProduct
   * @return xamarinRegisterAndroidProduct
   */
  @javax.annotation.Nullable
  public Boolean getXamarinRegisterAndroidProduct() {
    return xamarinRegisterAndroidProduct;
  }

  public void setXamarinRegisterAndroidProduct(Boolean xamarinRegisterAndroidProduct) {
    this.xamarinRegisterAndroidProduct = xamarinRegisterAndroidProduct;
  }


  public ProjectConfiguration xamarinRegisterIosProduct(Boolean xamarinRegisterIosProduct) {
    this.xamarinRegisterIosProduct = xamarinRegisterIosProduct;
    return this;
  }

  /**
   * Get xamarinRegisterIosProduct
   * @return xamarinRegisterIosProduct
   */
  @javax.annotation.Nullable
  public Boolean getXamarinRegisterIosProduct() {
    return xamarinRegisterIosProduct;
  }

  public void setXamarinRegisterIosProduct(Boolean xamarinRegisterIosProduct) {
    this.xamarinRegisterIosProduct = xamarinRegisterIosProduct;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectConfiguration projectConfiguration = (ProjectConfiguration) o;
    return Objects.equals(this.afterBuildScripts, projectConfiguration.afterBuildScripts) &&
        Objects.equals(this.afterDeployScripts, projectConfiguration.afterDeployScripts) &&
        Objects.equals(this.afterTestScripts, projectConfiguration.afterTestScripts) &&
        Objects.equals(this.artifacts, projectConfiguration.artifacts) &&
        Objects.equals(this.assemblyFileVersionFormat, projectConfiguration.assemblyFileVersionFormat) &&
        Objects.equals(this.assemblyInfoFile, projectConfiguration.assemblyInfoFile) &&
        Objects.equals(this.assemblyInformationalVersionFormat, projectConfiguration.assemblyInformationalVersionFormat) &&
        Objects.equals(this.assemblyVersionFormat, projectConfiguration.assemblyVersionFormat) &&
        Objects.equals(this.beforeBuildScripts, projectConfiguration.beforeBuildScripts) &&
        Objects.equals(this.beforeDeployScripts, projectConfiguration.beforeDeployScripts) &&
        Objects.equals(this.beforePackageScripts, projectConfiguration.beforePackageScripts) &&
        Objects.equals(this.beforeTestScripts, projectConfiguration.beforeTestScripts) &&
        Objects.equals(this.branchesMode, projectConfiguration.branchesMode) &&
        Objects.equals(this.buildCloud, projectConfiguration.buildCloud) &&
        Objects.equals(this.buildMode, projectConfiguration.buildMode) &&
        Objects.equals(this.buildScripts, projectConfiguration.buildScripts) &&
        Objects.equals(this.cacheEntries, projectConfiguration.cacheEntries) &&
        Objects.equals(this.cloneDepth, projectConfiguration.cloneDepth) &&
        Objects.equals(this.cloneFolder, projectConfiguration.cloneFolder) &&
        Objects.equals(this.cloneScripts, projectConfiguration.cloneScripts) &&
        Objects.equals(this._configuration, projectConfiguration._configuration) &&
        Objects.equals(this.configureNuGetAccountSource, projectConfiguration.configureNuGetAccountSource) &&
        Objects.equals(this.configureNuGetProjectSource, projectConfiguration.configureNuGetProjectSource) &&
        Objects.equals(this.deployMode, projectConfiguration.deployMode) &&
        Objects.equals(this.deployScripts, projectConfiguration.deployScripts) &&
        Objects.equals(this.deployments, projectConfiguration.deployments) &&
        Objects.equals(this.disableNuGetPublishForOctopusPackages, projectConfiguration.disableNuGetPublishForOctopusPackages) &&
        Objects.equals(this.disableNuGetPublishOnPullRequests, projectConfiguration.disableNuGetPublishOnPullRequests) &&
        Objects.equals(this.doNotIncrementBuildNumberOnPullRequests, projectConfiguration.doNotIncrementBuildNumberOnPullRequests) &&
        Objects.equals(this.dotnetCsprojAssemblyVersionFormat, projectConfiguration.dotnetCsprojAssemblyVersionFormat) &&
        Objects.equals(this.dotnetCsprojFile, projectConfiguration.dotnetCsprojFile) &&
        Objects.equals(this.dotnetCsprojFileVersionFormat, projectConfiguration.dotnetCsprojFileVersionFormat) &&
        Objects.equals(this.dotnetCsprojInformationalVersionFormat, projectConfiguration.dotnetCsprojInformationalVersionFormat) &&
        Objects.equals(this.dotnetCsprojPackageVersionFormat, projectConfiguration.dotnetCsprojPackageVersionFormat) &&
        Objects.equals(this.dotnetCsprojVersionFormat, projectConfiguration.dotnetCsprojVersionFormat) &&
        Objects.equals(this.environmentVariables, projectConfiguration.environmentVariables) &&
        Objects.equals(this.environmentVariablesMatrix, projectConfiguration.environmentVariablesMatrix) &&
        Objects.equals(this.excludeBranches, projectConfiguration.excludeBranches) &&
        Objects.equals(this.forceHttpsClone, projectConfiguration.forceHttpsClone) &&
        Objects.equals(this.hostsEntries, projectConfiguration.hostsEntries) &&
        Objects.equals(this.hotFixScripts, projectConfiguration.hotFixScripts) &&
        Objects.equals(this.includeBranches, projectConfiguration.includeBranches) &&
        Objects.equals(this.includeNuGetReferences, projectConfiguration.includeNuGetReferences) &&
        Objects.equals(this.initScripts, projectConfiguration.initScripts) &&
        Objects.equals(this.installScripts, projectConfiguration.installScripts) &&
        Objects.equals(this.matrixAllowFailures, projectConfiguration.matrixAllowFailures) &&
        Objects.equals(this.matrixExcept, projectConfiguration.matrixExcept) &&
        Objects.equals(this.matrixExclude, projectConfiguration.matrixExclude) &&
        Objects.equals(this.matrixFastFinish, projectConfiguration.matrixFastFinish) &&
        Objects.equals(this.matrixOnly, projectConfiguration.matrixOnly) &&
        Objects.equals(this.maxJobs, projectConfiguration.maxJobs) &&
        Objects.equals(this.msBuildInParallel, projectConfiguration.msBuildInParallel) &&
        Objects.equals(this.msBuildProjectFileName, projectConfiguration.msBuildProjectFileName) &&
        Objects.equals(this.msBuildVerbosity, projectConfiguration.msBuildVerbosity) &&
        Objects.equals(this.notifications, projectConfiguration.notifications) &&
        Objects.equals(this.onBuildErrorScripts, projectConfiguration.onBuildErrorScripts) &&
        Objects.equals(this.onBuildFinishScripts, projectConfiguration.onBuildFinishScripts) &&
        Objects.equals(this.onBuildSuccessScripts, projectConfiguration.onBuildSuccessScripts) &&
        Objects.equals(this.onlyCommitsFiles, projectConfiguration.onlyCommitsFiles) &&
        Objects.equals(this.operatingSystem, projectConfiguration.operatingSystem) &&
        Objects.equals(this.packageAspNetCoreProjects, projectConfiguration.packageAspNetCoreProjects) &&
        Objects.equals(this.packageAzureCloudServiceProjects, projectConfiguration.packageAzureCloudServiceProjects) &&
        Objects.equals(this.packageDotnetConsoleProjects, projectConfiguration.packageDotnetConsoleProjects) &&
        Objects.equals(this.packageNuGetProjects, projectConfiguration.packageNuGetProjects) &&
        Objects.equals(this.packageNuGetSymbols, projectConfiguration.packageNuGetSymbols) &&
        Objects.equals(this.packageWebApplicationProjects, projectConfiguration.packageWebApplicationProjects) &&
        Objects.equals(this.packageWebApplicationProjectsBeanstalk, projectConfiguration.packageWebApplicationProjectsBeanstalk) &&
        Objects.equals(this.packageWebApplicationProjectsOctopus, projectConfiguration.packageWebApplicationProjectsOctopus) &&
        Objects.equals(this.packageWebApplicationProjectsXCopy, projectConfiguration.packageWebApplicationProjectsXCopy) &&
        Objects.equals(this.patchAssemblyInfo, projectConfiguration.patchAssemblyInfo) &&
        Objects.equals(this.patchDotnetCsproj, projectConfiguration.patchDotnetCsproj) &&
        Objects.equals(this.platform, projectConfiguration.platform) &&
        Objects.equals(this.services, projectConfiguration.services) &&
        Objects.equals(this.shallowClone, projectConfiguration.shallowClone) &&
        Objects.equals(this.skipBranchWithPullRequests, projectConfiguration.skipBranchWithPullRequests) &&
        Objects.equals(this.skipCommitsFiles, projectConfiguration.skipCommitsFiles) &&
        Objects.equals(this.skipNonTags, projectConfiguration.skipNonTags) &&
        Objects.equals(this.skipTags, projectConfiguration.skipTags) &&
        Objects.equals(this.stacks, projectConfiguration.stacks) &&
        Objects.equals(this.testAssemblies, projectConfiguration.testAssemblies) &&
        Objects.equals(this.testCategories, projectConfiguration.testCategories) &&
        Objects.equals(this.testCategoriesMatrix, projectConfiguration.testCategoriesMatrix) &&
        Objects.equals(this.testCategoriesMode, projectConfiguration.testCategoriesMode) &&
        Objects.equals(this.testMode, projectConfiguration.testMode) &&
        Objects.equals(this.testScripts, projectConfiguration.testScripts) &&
        Objects.equals(this.xamarinRegisterAndroidProduct, projectConfiguration.xamarinRegisterAndroidProduct) &&
        Objects.equals(this.xamarinRegisterIosProduct, projectConfiguration.xamarinRegisterIosProduct);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterBuildScripts, afterDeployScripts, afterTestScripts, artifacts, assemblyFileVersionFormat, assemblyInfoFile, assemblyInformationalVersionFormat, assemblyVersionFormat, beforeBuildScripts, beforeDeployScripts, beforePackageScripts, beforeTestScripts, branchesMode, buildCloud, buildMode, buildScripts, cacheEntries, cloneDepth, cloneFolder, cloneScripts, _configuration, configureNuGetAccountSource, configureNuGetProjectSource, deployMode, deployScripts, deployments, disableNuGetPublishForOctopusPackages, disableNuGetPublishOnPullRequests, doNotIncrementBuildNumberOnPullRequests, dotnetCsprojAssemblyVersionFormat, dotnetCsprojFile, dotnetCsprojFileVersionFormat, dotnetCsprojInformationalVersionFormat, dotnetCsprojPackageVersionFormat, dotnetCsprojVersionFormat, environmentVariables, environmentVariablesMatrix, excludeBranches, forceHttpsClone, hostsEntries, hotFixScripts, includeBranches, includeNuGetReferences, initScripts, installScripts, matrixAllowFailures, matrixExcept, matrixExclude, matrixFastFinish, matrixOnly, maxJobs, msBuildInParallel, msBuildProjectFileName, msBuildVerbosity, notifications, onBuildErrorScripts, onBuildFinishScripts, onBuildSuccessScripts, onlyCommitsFiles, operatingSystem, packageAspNetCoreProjects, packageAzureCloudServiceProjects, packageDotnetConsoleProjects, packageNuGetProjects, packageNuGetSymbols, packageWebApplicationProjects, packageWebApplicationProjectsBeanstalk, packageWebApplicationProjectsOctopus, packageWebApplicationProjectsXCopy, patchAssemblyInfo, patchDotnetCsproj, platform, services, shallowClone, skipBranchWithPullRequests, skipCommitsFiles, skipNonTags, skipTags, stacks, testAssemblies, testCategories, testCategoriesMatrix, testCategoriesMode, testMode, testScripts, xamarinRegisterAndroidProduct, xamarinRegisterIosProduct);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectConfiguration {\n");
    sb.append("    afterBuildScripts: ").append(toIndentedString(afterBuildScripts)).append("\n");
    sb.append("    afterDeployScripts: ").append(toIndentedString(afterDeployScripts)).append("\n");
    sb.append("    afterTestScripts: ").append(toIndentedString(afterTestScripts)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    assemblyFileVersionFormat: ").append(toIndentedString(assemblyFileVersionFormat)).append("\n");
    sb.append("    assemblyInfoFile: ").append(toIndentedString(assemblyInfoFile)).append("\n");
    sb.append("    assemblyInformationalVersionFormat: ").append(toIndentedString(assemblyInformationalVersionFormat)).append("\n");
    sb.append("    assemblyVersionFormat: ").append(toIndentedString(assemblyVersionFormat)).append("\n");
    sb.append("    beforeBuildScripts: ").append(toIndentedString(beforeBuildScripts)).append("\n");
    sb.append("    beforeDeployScripts: ").append(toIndentedString(beforeDeployScripts)).append("\n");
    sb.append("    beforePackageScripts: ").append(toIndentedString(beforePackageScripts)).append("\n");
    sb.append("    beforeTestScripts: ").append(toIndentedString(beforeTestScripts)).append("\n");
    sb.append("    branchesMode: ").append(toIndentedString(branchesMode)).append("\n");
    sb.append("    buildCloud: ").append(toIndentedString(buildCloud)).append("\n");
    sb.append("    buildMode: ").append(toIndentedString(buildMode)).append("\n");
    sb.append("    buildScripts: ").append(toIndentedString(buildScripts)).append("\n");
    sb.append("    cacheEntries: ").append(toIndentedString(cacheEntries)).append("\n");
    sb.append("    cloneDepth: ").append(toIndentedString(cloneDepth)).append("\n");
    sb.append("    cloneFolder: ").append(toIndentedString(cloneFolder)).append("\n");
    sb.append("    cloneScripts: ").append(toIndentedString(cloneScripts)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    configureNuGetAccountSource: ").append(toIndentedString(configureNuGetAccountSource)).append("\n");
    sb.append("    configureNuGetProjectSource: ").append(toIndentedString(configureNuGetProjectSource)).append("\n");
    sb.append("    deployMode: ").append(toIndentedString(deployMode)).append("\n");
    sb.append("    deployScripts: ").append(toIndentedString(deployScripts)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("    disableNuGetPublishForOctopusPackages: ").append(toIndentedString(disableNuGetPublishForOctopusPackages)).append("\n");
    sb.append("    disableNuGetPublishOnPullRequests: ").append(toIndentedString(disableNuGetPublishOnPullRequests)).append("\n");
    sb.append("    doNotIncrementBuildNumberOnPullRequests: ").append(toIndentedString(doNotIncrementBuildNumberOnPullRequests)).append("\n");
    sb.append("    dotnetCsprojAssemblyVersionFormat: ").append(toIndentedString(dotnetCsprojAssemblyVersionFormat)).append("\n");
    sb.append("    dotnetCsprojFile: ").append(toIndentedString(dotnetCsprojFile)).append("\n");
    sb.append("    dotnetCsprojFileVersionFormat: ").append(toIndentedString(dotnetCsprojFileVersionFormat)).append("\n");
    sb.append("    dotnetCsprojInformationalVersionFormat: ").append(toIndentedString(dotnetCsprojInformationalVersionFormat)).append("\n");
    sb.append("    dotnetCsprojPackageVersionFormat: ").append(toIndentedString(dotnetCsprojPackageVersionFormat)).append("\n");
    sb.append("    dotnetCsprojVersionFormat: ").append(toIndentedString(dotnetCsprojVersionFormat)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    environmentVariablesMatrix: ").append(toIndentedString(environmentVariablesMatrix)).append("\n");
    sb.append("    excludeBranches: ").append(toIndentedString(excludeBranches)).append("\n");
    sb.append("    forceHttpsClone: ").append(toIndentedString(forceHttpsClone)).append("\n");
    sb.append("    hostsEntries: ").append(toIndentedString(hostsEntries)).append("\n");
    sb.append("    hotFixScripts: ").append(toIndentedString(hotFixScripts)).append("\n");
    sb.append("    includeBranches: ").append(toIndentedString(includeBranches)).append("\n");
    sb.append("    includeNuGetReferences: ").append(toIndentedString(includeNuGetReferences)).append("\n");
    sb.append("    initScripts: ").append(toIndentedString(initScripts)).append("\n");
    sb.append("    installScripts: ").append(toIndentedString(installScripts)).append("\n");
    sb.append("    matrixAllowFailures: ").append(toIndentedString(matrixAllowFailures)).append("\n");
    sb.append("    matrixExcept: ").append(toIndentedString(matrixExcept)).append("\n");
    sb.append("    matrixExclude: ").append(toIndentedString(matrixExclude)).append("\n");
    sb.append("    matrixFastFinish: ").append(toIndentedString(matrixFastFinish)).append("\n");
    sb.append("    matrixOnly: ").append(toIndentedString(matrixOnly)).append("\n");
    sb.append("    maxJobs: ").append(toIndentedString(maxJobs)).append("\n");
    sb.append("    msBuildInParallel: ").append(toIndentedString(msBuildInParallel)).append("\n");
    sb.append("    msBuildProjectFileName: ").append(toIndentedString(msBuildProjectFileName)).append("\n");
    sb.append("    msBuildVerbosity: ").append(toIndentedString(msBuildVerbosity)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    onBuildErrorScripts: ").append(toIndentedString(onBuildErrorScripts)).append("\n");
    sb.append("    onBuildFinishScripts: ").append(toIndentedString(onBuildFinishScripts)).append("\n");
    sb.append("    onBuildSuccessScripts: ").append(toIndentedString(onBuildSuccessScripts)).append("\n");
    sb.append("    onlyCommitsFiles: ").append(toIndentedString(onlyCommitsFiles)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    packageAspNetCoreProjects: ").append(toIndentedString(packageAspNetCoreProjects)).append("\n");
    sb.append("    packageAzureCloudServiceProjects: ").append(toIndentedString(packageAzureCloudServiceProjects)).append("\n");
    sb.append("    packageDotnetConsoleProjects: ").append(toIndentedString(packageDotnetConsoleProjects)).append("\n");
    sb.append("    packageNuGetProjects: ").append(toIndentedString(packageNuGetProjects)).append("\n");
    sb.append("    packageNuGetSymbols: ").append(toIndentedString(packageNuGetSymbols)).append("\n");
    sb.append("    packageWebApplicationProjects: ").append(toIndentedString(packageWebApplicationProjects)).append("\n");
    sb.append("    packageWebApplicationProjectsBeanstalk: ").append(toIndentedString(packageWebApplicationProjectsBeanstalk)).append("\n");
    sb.append("    packageWebApplicationProjectsOctopus: ").append(toIndentedString(packageWebApplicationProjectsOctopus)).append("\n");
    sb.append("    packageWebApplicationProjectsXCopy: ").append(toIndentedString(packageWebApplicationProjectsXCopy)).append("\n");
    sb.append("    patchAssemblyInfo: ").append(toIndentedString(patchAssemblyInfo)).append("\n");
    sb.append("    patchDotnetCsproj: ").append(toIndentedString(patchDotnetCsproj)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    shallowClone: ").append(toIndentedString(shallowClone)).append("\n");
    sb.append("    skipBranchWithPullRequests: ").append(toIndentedString(skipBranchWithPullRequests)).append("\n");
    sb.append("    skipCommitsFiles: ").append(toIndentedString(skipCommitsFiles)).append("\n");
    sb.append("    skipNonTags: ").append(toIndentedString(skipNonTags)).append("\n");
    sb.append("    skipTags: ").append(toIndentedString(skipTags)).append("\n");
    sb.append("    stacks: ").append(toIndentedString(stacks)).append("\n");
    sb.append("    testAssemblies: ").append(toIndentedString(testAssemblies)).append("\n");
    sb.append("    testCategories: ").append(toIndentedString(testCategories)).append("\n");
    sb.append("    testCategoriesMatrix: ").append(toIndentedString(testCategoriesMatrix)).append("\n");
    sb.append("    testCategoriesMode: ").append(toIndentedString(testCategoriesMode)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    testScripts: ").append(toIndentedString(testScripts)).append("\n");
    sb.append("    xamarinRegisterAndroidProduct: ").append(toIndentedString(xamarinRegisterAndroidProduct)).append("\n");
    sb.append("    xamarinRegisterIosProduct: ").append(toIndentedString(xamarinRegisterIosProduct)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afterBuildScripts");
    openapiFields.add("afterDeployScripts");
    openapiFields.add("afterTestScripts");
    openapiFields.add("artifacts");
    openapiFields.add("assemblyFileVersionFormat");
    openapiFields.add("assemblyInfoFile");
    openapiFields.add("assemblyInformationalVersionFormat");
    openapiFields.add("assemblyVersionFormat");
    openapiFields.add("beforeBuildScripts");
    openapiFields.add("beforeDeployScripts");
    openapiFields.add("beforePackageScripts");
    openapiFields.add("beforeTestScripts");
    openapiFields.add("branchesMode");
    openapiFields.add("buildCloud");
    openapiFields.add("buildMode");
    openapiFields.add("buildScripts");
    openapiFields.add("cacheEntries");
    openapiFields.add("cloneDepth");
    openapiFields.add("cloneFolder");
    openapiFields.add("cloneScripts");
    openapiFields.add("configuration");
    openapiFields.add("configureNuGetAccountSource");
    openapiFields.add("configureNuGetProjectSource");
    openapiFields.add("deployMode");
    openapiFields.add("deployScripts");
    openapiFields.add("deployments");
    openapiFields.add("disableNuGetPublishForOctopusPackages");
    openapiFields.add("disableNuGetPublishOnPullRequests");
    openapiFields.add("doNotIncrementBuildNumberOnPullRequests");
    openapiFields.add("dotnetCsprojAssemblyVersionFormat");
    openapiFields.add("dotnetCsprojFile");
    openapiFields.add("dotnetCsprojFileVersionFormat");
    openapiFields.add("dotnetCsprojInformationalVersionFormat");
    openapiFields.add("dotnetCsprojPackageVersionFormat");
    openapiFields.add("dotnetCsprojVersionFormat");
    openapiFields.add("environmentVariables");
    openapiFields.add("environmentVariablesMatrix");
    openapiFields.add("excludeBranches");
    openapiFields.add("forceHttpsClone");
    openapiFields.add("hostsEntries");
    openapiFields.add("hotFixScripts");
    openapiFields.add("includeBranches");
    openapiFields.add("includeNuGetReferences");
    openapiFields.add("initScripts");
    openapiFields.add("installScripts");
    openapiFields.add("matrixAllowFailures");
    openapiFields.add("matrixExcept");
    openapiFields.add("matrixExclude");
    openapiFields.add("matrixFastFinish");
    openapiFields.add("matrixOnly");
    openapiFields.add("maxJobs");
    openapiFields.add("msBuildInParallel");
    openapiFields.add("msBuildProjectFileName");
    openapiFields.add("msBuildVerbosity");
    openapiFields.add("notifications");
    openapiFields.add("onBuildErrorScripts");
    openapiFields.add("onBuildFinishScripts");
    openapiFields.add("onBuildSuccessScripts");
    openapiFields.add("onlyCommitsFiles");
    openapiFields.add("operatingSystem");
    openapiFields.add("packageAspNetCoreProjects");
    openapiFields.add("packageAzureCloudServiceProjects");
    openapiFields.add("packageDotnetConsoleProjects");
    openapiFields.add("packageNuGetProjects");
    openapiFields.add("packageNuGetSymbols");
    openapiFields.add("packageWebApplicationProjects");
    openapiFields.add("packageWebApplicationProjectsBeanstalk");
    openapiFields.add("packageWebApplicationProjectsOctopus");
    openapiFields.add("packageWebApplicationProjectsXCopy");
    openapiFields.add("patchAssemblyInfo");
    openapiFields.add("patchDotnetCsproj");
    openapiFields.add("platform");
    openapiFields.add("services");
    openapiFields.add("shallowClone");
    openapiFields.add("skipBranchWithPullRequests");
    openapiFields.add("skipCommitsFiles");
    openapiFields.add("skipNonTags");
    openapiFields.add("skipTags");
    openapiFields.add("stacks");
    openapiFields.add("testAssemblies");
    openapiFields.add("testCategories");
    openapiFields.add("testCategoriesMatrix");
    openapiFields.add("testCategoriesMode");
    openapiFields.add("testMode");
    openapiFields.add("testScripts");
    openapiFields.add("xamarinRegisterAndroidProduct");
    openapiFields.add("xamarinRegisterIosProduct");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectConfiguration is not found in the empty JSON string", ProjectConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("afterBuildScripts") != null && !jsonObj.get("afterBuildScripts").isJsonNull()) {
        JsonArray jsonArrayafterBuildScripts = jsonObj.getAsJsonArray("afterBuildScripts");
        if (jsonArrayafterBuildScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("afterBuildScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `afterBuildScripts` to be an array in the JSON string but got `%s`", jsonObj.get("afterBuildScripts").toString()));
          }

          // validate the optional field `afterBuildScripts` (array)
          for (int i = 0; i < jsonArrayafterBuildScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayafterBuildScripts.get(i));
          };
        }
      }
      if (jsonObj.get("afterDeployScripts") != null && !jsonObj.get("afterDeployScripts").isJsonNull()) {
        JsonArray jsonArrayafterDeployScripts = jsonObj.getAsJsonArray("afterDeployScripts");
        if (jsonArrayafterDeployScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("afterDeployScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `afterDeployScripts` to be an array in the JSON string but got `%s`", jsonObj.get("afterDeployScripts").toString()));
          }

          // validate the optional field `afterDeployScripts` (array)
          for (int i = 0; i < jsonArrayafterDeployScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayafterDeployScripts.get(i));
          };
        }
      }
      if (jsonObj.get("afterTestScripts") != null && !jsonObj.get("afterTestScripts").isJsonNull()) {
        JsonArray jsonArrayafterTestScripts = jsonObj.getAsJsonArray("afterTestScripts");
        if (jsonArrayafterTestScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("afterTestScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `afterTestScripts` to be an array in the JSON string but got `%s`", jsonObj.get("afterTestScripts").toString()));
          }

          // validate the optional field `afterTestScripts` (array)
          for (int i = 0; i < jsonArrayafterTestScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayafterTestScripts.get(i));
          };
        }
      }
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        JsonArray jsonArrayartifacts = jsonObj.getAsJsonArray("artifacts");
        if (jsonArrayartifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifacts` to be an array in the JSON string but got `%s`", jsonObj.get("artifacts").toString()));
          }

          // validate the optional field `artifacts` (array)
          for (int i = 0; i < jsonArrayartifacts.size(); i++) {
            Artifact.validateJsonElement(jsonArrayartifacts.get(i));
          };
        }
      }
      if ((jsonObj.get("assemblyFileVersionFormat") != null && !jsonObj.get("assemblyFileVersionFormat").isJsonNull()) && !jsonObj.get("assemblyFileVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyFileVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assemblyFileVersionFormat").toString()));
      }
      if ((jsonObj.get("assemblyInfoFile") != null && !jsonObj.get("assemblyInfoFile").isJsonNull()) && !jsonObj.get("assemblyInfoFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyInfoFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assemblyInfoFile").toString()));
      }
      if ((jsonObj.get("assemblyInformationalVersionFormat") != null && !jsonObj.get("assemblyInformationalVersionFormat").isJsonNull()) && !jsonObj.get("assemblyInformationalVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyInformationalVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assemblyInformationalVersionFormat").toString()));
      }
      if ((jsonObj.get("assemblyVersionFormat") != null && !jsonObj.get("assemblyVersionFormat").isJsonNull()) && !jsonObj.get("assemblyVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assemblyVersionFormat").toString()));
      }
      if (jsonObj.get("beforeBuildScripts") != null && !jsonObj.get("beforeBuildScripts").isJsonNull()) {
        JsonArray jsonArraybeforeBuildScripts = jsonObj.getAsJsonArray("beforeBuildScripts");
        if (jsonArraybeforeBuildScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beforeBuildScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beforeBuildScripts` to be an array in the JSON string but got `%s`", jsonObj.get("beforeBuildScripts").toString()));
          }

          // validate the optional field `beforeBuildScripts` (array)
          for (int i = 0; i < jsonArraybeforeBuildScripts.size(); i++) {
            Script.validateJsonElement(jsonArraybeforeBuildScripts.get(i));
          };
        }
      }
      if (jsonObj.get("beforeDeployScripts") != null && !jsonObj.get("beforeDeployScripts").isJsonNull()) {
        JsonArray jsonArraybeforeDeployScripts = jsonObj.getAsJsonArray("beforeDeployScripts");
        if (jsonArraybeforeDeployScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beforeDeployScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beforeDeployScripts` to be an array in the JSON string but got `%s`", jsonObj.get("beforeDeployScripts").toString()));
          }

          // validate the optional field `beforeDeployScripts` (array)
          for (int i = 0; i < jsonArraybeforeDeployScripts.size(); i++) {
            Script.validateJsonElement(jsonArraybeforeDeployScripts.get(i));
          };
        }
      }
      if (jsonObj.get("beforePackageScripts") != null && !jsonObj.get("beforePackageScripts").isJsonNull()) {
        JsonArray jsonArraybeforePackageScripts = jsonObj.getAsJsonArray("beforePackageScripts");
        if (jsonArraybeforePackageScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beforePackageScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beforePackageScripts` to be an array in the JSON string but got `%s`", jsonObj.get("beforePackageScripts").toString()));
          }

          // validate the optional field `beforePackageScripts` (array)
          for (int i = 0; i < jsonArraybeforePackageScripts.size(); i++) {
            Script.validateJsonElement(jsonArraybeforePackageScripts.get(i));
          };
        }
      }
      if (jsonObj.get("beforeTestScripts") != null && !jsonObj.get("beforeTestScripts").isJsonNull()) {
        JsonArray jsonArraybeforeTestScripts = jsonObj.getAsJsonArray("beforeTestScripts");
        if (jsonArraybeforeTestScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beforeTestScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beforeTestScripts` to be an array in the JSON string but got `%s`", jsonObj.get("beforeTestScripts").toString()));
          }

          // validate the optional field `beforeTestScripts` (array)
          for (int i = 0; i < jsonArraybeforeTestScripts.size(); i++) {
            Script.validateJsonElement(jsonArraybeforeTestScripts.get(i));
          };
        }
      }
      // validate the optional field `branchesMode`
      if (jsonObj.get("branchesMode") != null && !jsonObj.get("branchesMode").isJsonNull()) {
        ProjectBranchesMode.validateJsonElement(jsonObj.get("branchesMode"));
      }
      if (jsonObj.get("buildCloud") != null && !jsonObj.get("buildCloud").isJsonNull()) {
        JsonArray jsonArraybuildCloud = jsonObj.getAsJsonArray("buildCloud");
        if (jsonArraybuildCloud != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buildCloud").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buildCloud` to be an array in the JSON string but got `%s`", jsonObj.get("buildCloud").toString()));
          }

          // validate the optional field `buildCloud` (array)
          for (int i = 0; i < jsonArraybuildCloud.size(); i++) {
            StringValueObject.validateJsonElement(jsonArraybuildCloud.get(i));
          };
        }
      }
      // validate the optional field `buildMode`
      if (jsonObj.get("buildMode") != null && !jsonObj.get("buildMode").isJsonNull()) {
        BuildMode.validateJsonElement(jsonObj.get("buildMode"));
      }
      if (jsonObj.get("buildScripts") != null && !jsonObj.get("buildScripts").isJsonNull()) {
        JsonArray jsonArraybuildScripts = jsonObj.getAsJsonArray("buildScripts");
        if (jsonArraybuildScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buildScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buildScripts` to be an array in the JSON string but got `%s`", jsonObj.get("buildScripts").toString()));
          }

          // validate the optional field `buildScripts` (array)
          for (int i = 0; i < jsonArraybuildScripts.size(); i++) {
            Script.validateJsonElement(jsonArraybuildScripts.get(i));
          };
        }
      }
      if (jsonObj.get("cacheEntries") != null && !jsonObj.get("cacheEntries").isJsonNull()) {
        JsonArray jsonArraycacheEntries = jsonObj.getAsJsonArray("cacheEntries");
        if (jsonArraycacheEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cacheEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cacheEntries` to be an array in the JSON string but got `%s`", jsonObj.get("cacheEntries").toString()));
          }

          // validate the optional field `cacheEntries` (array)
          for (int i = 0; i < jsonArraycacheEntries.size(); i++) {
            StringValueObject.validateJsonElement(jsonArraycacheEntries.get(i));
          };
        }
      }
      if ((jsonObj.get("cloneFolder") != null && !jsonObj.get("cloneFolder").isJsonNull()) && !jsonObj.get("cloneFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloneFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloneFolder").toString()));
      }
      if (jsonObj.get("cloneScripts") != null && !jsonObj.get("cloneScripts").isJsonNull()) {
        JsonArray jsonArraycloneScripts = jsonObj.getAsJsonArray("cloneScripts");
        if (jsonArraycloneScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cloneScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cloneScripts` to be an array in the JSON string but got `%s`", jsonObj.get("cloneScripts").toString()));
          }

          // validate the optional field `cloneScripts` (array)
          for (int i = 0; i < jsonArraycloneScripts.size(); i++) {
            Script.validateJsonElement(jsonArraycloneScripts.get(i));
          };
        }
      }
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        JsonArray jsonArray_configuration = jsonObj.getAsJsonArray("configuration");
        if (jsonArray_configuration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configuration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configuration` to be an array in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
          }

          // validate the optional field `configuration` (array)
          for (int i = 0; i < jsonArray_configuration.size(); i++) {
            StringValueObject.validateJsonElement(jsonArray_configuration.get(i));
          };
        }
      }
      // validate the optional field `deployMode`
      if (jsonObj.get("deployMode") != null && !jsonObj.get("deployMode").isJsonNull()) {
        DeployMode.validateJsonElement(jsonObj.get("deployMode"));
      }
      if (jsonObj.get("deployScripts") != null && !jsonObj.get("deployScripts").isJsonNull()) {
        JsonArray jsonArraydeployScripts = jsonObj.getAsJsonArray("deployScripts");
        if (jsonArraydeployScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deployScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deployScripts` to be an array in the JSON string but got `%s`", jsonObj.get("deployScripts").toString()));
          }

          // validate the optional field `deployScripts` (array)
          for (int i = 0; i < jsonArraydeployScripts.size(); i++) {
            Script.validateJsonElement(jsonArraydeployScripts.get(i));
          };
        }
      }
      if (jsonObj.get("deployments") != null && !jsonObj.get("deployments").isJsonNull()) {
        JsonArray jsonArraydeployments = jsonObj.getAsJsonArray("deployments");
        if (jsonArraydeployments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deployments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deployments` to be an array in the JSON string but got `%s`", jsonObj.get("deployments").toString()));
          }

          // validate the optional field `deployments` (array)
          for (int i = 0; i < jsonArraydeployments.size(); i++) {
            DeploymentProvider.validateJsonElement(jsonArraydeployments.get(i));
          };
        }
      }
      if ((jsonObj.get("dotnetCsprojAssemblyVersionFormat") != null && !jsonObj.get("dotnetCsprojAssemblyVersionFormat").isJsonNull()) && !jsonObj.get("dotnetCsprojAssemblyVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotnetCsprojAssemblyVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotnetCsprojAssemblyVersionFormat").toString()));
      }
      if ((jsonObj.get("dotnetCsprojFile") != null && !jsonObj.get("dotnetCsprojFile").isJsonNull()) && !jsonObj.get("dotnetCsprojFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotnetCsprojFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotnetCsprojFile").toString()));
      }
      if ((jsonObj.get("dotnetCsprojFileVersionFormat") != null && !jsonObj.get("dotnetCsprojFileVersionFormat").isJsonNull()) && !jsonObj.get("dotnetCsprojFileVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotnetCsprojFileVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotnetCsprojFileVersionFormat").toString()));
      }
      if ((jsonObj.get("dotnetCsprojInformationalVersionFormat") != null && !jsonObj.get("dotnetCsprojInformationalVersionFormat").isJsonNull()) && !jsonObj.get("dotnetCsprojInformationalVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotnetCsprojInformationalVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotnetCsprojInformationalVersionFormat").toString()));
      }
      if ((jsonObj.get("dotnetCsprojPackageVersionFormat") != null && !jsonObj.get("dotnetCsprojPackageVersionFormat").isJsonNull()) && !jsonObj.get("dotnetCsprojPackageVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotnetCsprojPackageVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotnetCsprojPackageVersionFormat").toString()));
      }
      if ((jsonObj.get("dotnetCsprojVersionFormat") != null && !jsonObj.get("dotnetCsprojVersionFormat").isJsonNull()) && !jsonObj.get("dotnetCsprojVersionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotnetCsprojVersionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotnetCsprojVersionFormat").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            StoredNameValue.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if (jsonObj.get("environmentVariablesMatrix") != null && !jsonObj.get("environmentVariablesMatrix").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariablesMatrix = jsonObj.getAsJsonArray("environmentVariablesMatrix");
        if (jsonArrayenvironmentVariablesMatrix != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariablesMatrix").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariablesMatrix` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariablesMatrix").toString()));
          }

          // validate the optional field `environmentVariablesMatrix` (array)
          for (int i = 0; i < jsonArrayenvironmentVariablesMatrix.size(); i++) {
            StoredNameValueMatrix.validateJsonElement(jsonArrayenvironmentVariablesMatrix.get(i));
          };
        }
      }
      if (jsonObj.get("excludeBranches") != null && !jsonObj.get("excludeBranches").isJsonNull()) {
        JsonArray jsonArrayexcludeBranches = jsonObj.getAsJsonArray("excludeBranches");
        if (jsonArrayexcludeBranches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludeBranches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludeBranches` to be an array in the JSON string but got `%s`", jsonObj.get("excludeBranches").toString()));
          }

          // validate the optional field `excludeBranches` (array)
          for (int i = 0; i < jsonArrayexcludeBranches.size(); i++) {
            StringValueObject.validateJsonElement(jsonArrayexcludeBranches.get(i));
          };
        }
      }
      if (jsonObj.get("hostsEntries") != null && !jsonObj.get("hostsEntries").isJsonNull()) {
        JsonArray jsonArrayhostsEntries = jsonObj.getAsJsonArray("hostsEntries");
        if (jsonArrayhostsEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostsEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostsEntries` to be an array in the JSON string but got `%s`", jsonObj.get("hostsEntries").toString()));
          }

          // validate the optional field `hostsEntries` (array)
          for (int i = 0; i < jsonArrayhostsEntries.size(); i++) {
            HostEntry.validateJsonElement(jsonArrayhostsEntries.get(i));
          };
        }
      }
      if (jsonObj.get("hotFixScripts") != null && !jsonObj.get("hotFixScripts").isJsonNull()) {
        JsonArray jsonArrayhotFixScripts = jsonObj.getAsJsonArray("hotFixScripts");
        if (jsonArrayhotFixScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hotFixScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hotFixScripts` to be an array in the JSON string but got `%s`", jsonObj.get("hotFixScripts").toString()));
          }

          // validate the optional field `hotFixScripts` (array)
          for (int i = 0; i < jsonArrayhotFixScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayhotFixScripts.get(i));
          };
        }
      }
      if (jsonObj.get("includeBranches") != null && !jsonObj.get("includeBranches").isJsonNull()) {
        JsonArray jsonArrayincludeBranches = jsonObj.getAsJsonArray("includeBranches");
        if (jsonArrayincludeBranches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includeBranches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includeBranches` to be an array in the JSON string but got `%s`", jsonObj.get("includeBranches").toString()));
          }

          // validate the optional field `includeBranches` (array)
          for (int i = 0; i < jsonArrayincludeBranches.size(); i++) {
            StringValueObject.validateJsonElement(jsonArrayincludeBranches.get(i));
          };
        }
      }
      if (jsonObj.get("initScripts") != null && !jsonObj.get("initScripts").isJsonNull()) {
        JsonArray jsonArrayinitScripts = jsonObj.getAsJsonArray("initScripts");
        if (jsonArrayinitScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initScripts` to be an array in the JSON string but got `%s`", jsonObj.get("initScripts").toString()));
          }

          // validate the optional field `initScripts` (array)
          for (int i = 0; i < jsonArrayinitScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayinitScripts.get(i));
          };
        }
      }
      if (jsonObj.get("installScripts") != null && !jsonObj.get("installScripts").isJsonNull()) {
        JsonArray jsonArrayinstallScripts = jsonObj.getAsJsonArray("installScripts");
        if (jsonArrayinstallScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("installScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `installScripts` to be an array in the JSON string but got `%s`", jsonObj.get("installScripts").toString()));
          }

          // validate the optional field `installScripts` (array)
          for (int i = 0; i < jsonArrayinstallScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayinstallScripts.get(i));
          };
        }
      }
      if (jsonObj.get("matrixAllowFailures") != null && !jsonObj.get("matrixAllowFailures").isJsonNull()) {
        JsonArray jsonArraymatrixAllowFailures = jsonObj.getAsJsonArray("matrixAllowFailures");
        if (jsonArraymatrixAllowFailures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matrixAllowFailures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matrixAllowFailures` to be an array in the JSON string but got `%s`", jsonObj.get("matrixAllowFailures").toString()));
          }

          // validate the optional field `matrixAllowFailures` (array)
          for (int i = 0; i < jsonArraymatrixAllowFailures.size(); i++) {
            StoredNameValueMatrix.validateJsonElement(jsonArraymatrixAllowFailures.get(i));
          };
        }
      }
      if (jsonObj.get("matrixExcept") != null && !jsonObj.get("matrixExcept").isJsonNull()) {
        JsonArray jsonArraymatrixExcept = jsonObj.getAsJsonArray("matrixExcept");
        if (jsonArraymatrixExcept != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matrixExcept").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matrixExcept` to be an array in the JSON string but got `%s`", jsonObj.get("matrixExcept").toString()));
          }

          // validate the optional field `matrixExcept` (array)
          for (int i = 0; i < jsonArraymatrixExcept.size(); i++) {
            StoredNameValueMatrix.validateJsonElement(jsonArraymatrixExcept.get(i));
          };
        }
      }
      if (jsonObj.get("matrixExclude") != null && !jsonObj.get("matrixExclude").isJsonNull()) {
        JsonArray jsonArraymatrixExclude = jsonObj.getAsJsonArray("matrixExclude");
        if (jsonArraymatrixExclude != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matrixExclude").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matrixExclude` to be an array in the JSON string but got `%s`", jsonObj.get("matrixExclude").toString()));
          }

          // validate the optional field `matrixExclude` (array)
          for (int i = 0; i < jsonArraymatrixExclude.size(); i++) {
            StoredNameValueMatrix.validateJsonElement(jsonArraymatrixExclude.get(i));
          };
        }
      }
      if (jsonObj.get("matrixOnly") != null && !jsonObj.get("matrixOnly").isJsonNull()) {
        JsonArray jsonArraymatrixOnly = jsonObj.getAsJsonArray("matrixOnly");
        if (jsonArraymatrixOnly != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matrixOnly").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matrixOnly` to be an array in the JSON string but got `%s`", jsonObj.get("matrixOnly").toString()));
          }

          // validate the optional field `matrixOnly` (array)
          for (int i = 0; i < jsonArraymatrixOnly.size(); i++) {
            StoredNameValueMatrix.validateJsonElement(jsonArraymatrixOnly.get(i));
          };
        }
      }
      if ((jsonObj.get("msBuildProjectFileName") != null && !jsonObj.get("msBuildProjectFileName").isJsonNull()) && !jsonObj.get("msBuildProjectFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msBuildProjectFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msBuildProjectFileName").toString()));
      }
      // validate the optional field `msBuildVerbosity`
      if (jsonObj.get("msBuildVerbosity") != null && !jsonObj.get("msBuildVerbosity").isJsonNull()) {
        MSBuildVerbosity.validateJsonElement(jsonObj.get("msBuildVerbosity"));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            NotificationProviderSettings.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if (jsonObj.get("onBuildErrorScripts") != null && !jsonObj.get("onBuildErrorScripts").isJsonNull()) {
        JsonArray jsonArrayonBuildErrorScripts = jsonObj.getAsJsonArray("onBuildErrorScripts");
        if (jsonArrayonBuildErrorScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onBuildErrorScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onBuildErrorScripts` to be an array in the JSON string but got `%s`", jsonObj.get("onBuildErrorScripts").toString()));
          }

          // validate the optional field `onBuildErrorScripts` (array)
          for (int i = 0; i < jsonArrayonBuildErrorScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayonBuildErrorScripts.get(i));
          };
        }
      }
      if (jsonObj.get("onBuildFinishScripts") != null && !jsonObj.get("onBuildFinishScripts").isJsonNull()) {
        JsonArray jsonArrayonBuildFinishScripts = jsonObj.getAsJsonArray("onBuildFinishScripts");
        if (jsonArrayonBuildFinishScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onBuildFinishScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onBuildFinishScripts` to be an array in the JSON string but got `%s`", jsonObj.get("onBuildFinishScripts").toString()));
          }

          // validate the optional field `onBuildFinishScripts` (array)
          for (int i = 0; i < jsonArrayonBuildFinishScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayonBuildFinishScripts.get(i));
          };
        }
      }
      if (jsonObj.get("onBuildSuccessScripts") != null && !jsonObj.get("onBuildSuccessScripts").isJsonNull()) {
        JsonArray jsonArrayonBuildSuccessScripts = jsonObj.getAsJsonArray("onBuildSuccessScripts");
        if (jsonArrayonBuildSuccessScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onBuildSuccessScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onBuildSuccessScripts` to be an array in the JSON string but got `%s`", jsonObj.get("onBuildSuccessScripts").toString()));
          }

          // validate the optional field `onBuildSuccessScripts` (array)
          for (int i = 0; i < jsonArrayonBuildSuccessScripts.size(); i++) {
            Script.validateJsonElement(jsonArrayonBuildSuccessScripts.get(i));
          };
        }
      }
      if (jsonObj.get("onlyCommitsFiles") != null && !jsonObj.get("onlyCommitsFiles").isJsonNull()) {
        JsonArray jsonArrayonlyCommitsFiles = jsonObj.getAsJsonArray("onlyCommitsFiles");
        if (jsonArrayonlyCommitsFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onlyCommitsFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onlyCommitsFiles` to be an array in the JSON string but got `%s`", jsonObj.get("onlyCommitsFiles").toString()));
          }

          // validate the optional field `onlyCommitsFiles` (array)
          for (int i = 0; i < jsonArrayonlyCommitsFiles.size(); i++) {
            StringValueObject.validateJsonElement(jsonArrayonlyCommitsFiles.get(i));
          };
        }
      }
      if (jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) {
        JsonArray jsonArrayoperatingSystem = jsonObj.getAsJsonArray("operatingSystem");
        if (jsonArrayoperatingSystem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operatingSystem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operatingSystem` to be an array in the JSON string but got `%s`", jsonObj.get("operatingSystem").toString()));
          }

          // validate the optional field `operatingSystem` (array)
          for (int i = 0; i < jsonArrayoperatingSystem.size(); i++) {
            BuildWorkerImageInner.validateJsonElement(jsonArrayoperatingSystem.get(i));
          };
        }
      }
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        JsonArray jsonArrayplatform = jsonObj.getAsJsonArray("platform");
        if (jsonArrayplatform != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platform").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platform` to be an array in the JSON string but got `%s`", jsonObj.get("platform").toString()));
          }

          // validate the optional field `platform` (array)
          for (int i = 0; i < jsonArrayplatform.size(); i++) {
            ProjectConfigurationPlatformInner.validateJsonElement(jsonArrayplatform.get(i));
          };
        }
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            OSServicesToStartDuringTheBuildProcessInner.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      if (jsonObj.get("skipCommitsFiles") != null && !jsonObj.get("skipCommitsFiles").isJsonNull()) {
        JsonArray jsonArrayskipCommitsFiles = jsonObj.getAsJsonArray("skipCommitsFiles");
        if (jsonArrayskipCommitsFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skipCommitsFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skipCommitsFiles` to be an array in the JSON string but got `%s`", jsonObj.get("skipCommitsFiles").toString()));
          }

          // validate the optional field `skipCommitsFiles` (array)
          for (int i = 0; i < jsonArrayskipCommitsFiles.size(); i++) {
            StringValueObject.validateJsonElement(jsonArrayskipCommitsFiles.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stacks") != null && !jsonObj.get("stacks").isJsonNull() && !jsonObj.get("stacks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stacks` to be an array in the JSON string but got `%s`", jsonObj.get("stacks").toString()));
      }
      if (jsonObj.get("testAssemblies") != null && !jsonObj.get("testAssemblies").isJsonNull()) {
        JsonArray jsonArraytestAssemblies = jsonObj.getAsJsonArray("testAssemblies");
        if (jsonArraytestAssemblies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testAssemblies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testAssemblies` to be an array in the JSON string but got `%s`", jsonObj.get("testAssemblies").toString()));
          }

          // validate the optional field `testAssemblies` (array)
          for (int i = 0; i < jsonArraytestAssemblies.size(); i++) {
            StringValueObject.validateJsonElement(jsonArraytestAssemblies.get(i));
          };
        }
      }
      if (jsonObj.get("testCategories") != null && !jsonObj.get("testCategories").isJsonNull()) {
        JsonArray jsonArraytestCategories = jsonObj.getAsJsonArray("testCategories");
        if (jsonArraytestCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testCategories` to be an array in the JSON string but got `%s`", jsonObj.get("testCategories").toString()));
          }

          // validate the optional field `testCategories` (array)
          for (int i = 0; i < jsonArraytestCategories.size(); i++) {
            StringValueObject.validateJsonElement(jsonArraytestCategories.get(i));
          };
        }
      }
      if (jsonObj.get("testCategoriesMatrix") != null && !jsonObj.get("testCategoriesMatrix").isJsonNull()) {
        JsonArray jsonArraytestCategoriesMatrix = jsonObj.getAsJsonArray("testCategoriesMatrix");
        if (jsonArraytestCategoriesMatrix != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testCategoriesMatrix").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testCategoriesMatrix` to be an array in the JSON string but got `%s`", jsonObj.get("testCategoriesMatrix").toString()));
          }

          // validate the optional field `testCategoriesMatrix` (array)
          for (int i = 0; i < jsonArraytestCategoriesMatrix.size(); i++) {
            ProjectConfigurationTestCategoriesMatrixInner.validateJsonElement(jsonArraytestCategoriesMatrix.get(i));
          };
        }
      }
      if ((jsonObj.get("testCategoriesMode") != null && !jsonObj.get("testCategoriesMode").isJsonNull()) && !jsonObj.get("testCategoriesMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testCategoriesMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testCategoriesMode").toString()));
      }
      // validate the optional field `testCategoriesMode`
      if (jsonObj.get("testCategoriesMode") != null && !jsonObj.get("testCategoriesMode").isJsonNull()) {
        TestCategoriesModeEnum.validateJsonElement(jsonObj.get("testCategoriesMode"));
      }
      // validate the optional field `testMode`
      if (jsonObj.get("testMode") != null && !jsonObj.get("testMode").isJsonNull()) {
        TestMode.validateJsonElement(jsonObj.get("testMode"));
      }
      if (jsonObj.get("testScripts") != null && !jsonObj.get("testScripts").isJsonNull()) {
        JsonArray jsonArraytestScripts = jsonObj.getAsJsonArray("testScripts");
        if (jsonArraytestScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testScripts` to be an array in the JSON string but got `%s`", jsonObj.get("testScripts").toString()));
          }

          // validate the optional field `testScripts` (array)
          for (int i = 0; i < jsonArraytestScripts.size(); i++) {
            Script.validateJsonElement(jsonArraytestScripts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectConfiguration>() {
           @Override
           public void write(JsonWriter out, ProjectConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectConfiguration
   * @throws IOException if the JSON string is invalid with respect to ProjectConfiguration
   */
  public static ProjectConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectConfiguration.class);
  }

  /**
   * Convert an instance of ProjectConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

