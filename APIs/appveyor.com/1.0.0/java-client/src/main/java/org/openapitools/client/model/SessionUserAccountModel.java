/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeatureFlags;
import org.openapitools.client.model.PermissionName;
import org.openapitools.client.model.PlanName;
import org.openapitools.client.model.PlanStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SessionUserAccountModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionUserAccountModel {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ALLOW_CUSTOM_BUILD_ENVIRONMENT = "allowCustomBuildEnvironment";
  @SerializedName(SERIALIZED_NAME_ALLOW_CUSTOM_BUILD_ENVIRONMENT)
  private Boolean allowCustomBuildEnvironment;

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Boolean blocked;

  public static final String SERIALIZED_NAME_FEATURE_FLAGS = "featureFlags";
  @SerializedName(SERIALIZED_NAME_FEATURE_FLAGS)
  private FeatureFlags featureFlags;

  public static final String SERIALIZED_NAME_GIT_HUB_PLAN = "gitHubPlan";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_PLAN)
  private Boolean gitHubPlan;

  public static final String SERIALIZED_NAME_GIT_HUB_PLAN_ORG = "gitHubPlanOrg";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_PLAN_ORG)
  private String gitHubPlanOrg;

  public static final String SERIALIZED_NAME_IS_COLLABORATOR = "isCollaborator";
  @SerializedName(SERIALIZED_NAME_IS_COLLABORATOR)
  private Boolean isCollaborator;

  public static final String SERIALIZED_NAME_IS_ENTERPRISE_PLAN = "isEnterprisePlan";
  @SerializedName(SERIALIZED_NAME_IS_ENTERPRISE_PLAN)
  private Boolean isEnterprisePlan;

  public static final String SERIALIZED_NAME_IS_OWNER = "isOwner";
  @SerializedName(SERIALIZED_NAME_IS_OWNER)
  private Boolean isOwner;

  public static final String SERIALIZED_NAME_MANUAL_PAYMENTS = "manualPayments";
  @SerializedName(SERIALIZED_NAME_MANUAL_PAYMENTS)
  private Boolean manualPayments;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<PermissionName> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAN_END = "planEnd";
  @SerializedName(SERIALIZED_NAME_PLAN_END)
  private OffsetDateTime planEnd;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private PlanName planId;

  public static final String SERIALIZED_NAME_PLAN_START = "planStart";
  @SerializedName(SERIALIZED_NAME_PLAN_START)
  private OffsetDateTime planStart;

  public static final String SERIALIZED_NAME_PLAN_STATUS = "planStatus";
  @SerializedName(SERIALIZED_NAME_PLAN_STATUS)
  private PlanStatus planStatus;

  public static final String SERIALIZED_NAME_ROLE_ID = "roleId";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  public static final String SERIALIZED_NAME_ROLE_NAME = "roleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "timeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private String timeZoneId;

  public static final String SERIALIZED_NAME_UNPAID = "unpaid";
  @SerializedName(SERIALIZED_NAME_UNPAID)
  private Boolean unpaid;

  public static final String SERIALIZED_NAME_UNVERIFIED = "unverified";
  @SerializedName(SERIALIZED_NAME_UNVERIFIED)
  private Boolean unverified;

  public SessionUserAccountModel() {
  }

  public SessionUserAccountModel(
     OffsetDateTime created, 
     OffsetDateTime updated, 
     Integer accountId, 
     Boolean isCollaborator, 
     Boolean isOwner, 
     String name, 
     OffsetDateTime planEnd, 
     OffsetDateTime planStart, 
     String roleName
  ) {
    this();
    this.created = created;
    this.updated = updated;
    this.accountId = accountId;
    this.isCollaborator = isCollaborator;
    this.isOwner = isOwner;
    this.name = name;
    this.planEnd = planEnd;
    this.planStart = planStart;
    this.roleName = roleName;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  /**
   * Get accountId
   * minimum: 0
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }



  public SessionUserAccountModel allowCustomBuildEnvironment(Boolean allowCustomBuildEnvironment) {
    this.allowCustomBuildEnvironment = allowCustomBuildEnvironment;
    return this;
  }

  /**
   * Get allowCustomBuildEnvironment
   * @return allowCustomBuildEnvironment
   */
  @javax.annotation.Nullable
  public Boolean getAllowCustomBuildEnvironment() {
    return allowCustomBuildEnvironment;
  }

  public void setAllowCustomBuildEnvironment(Boolean allowCustomBuildEnvironment) {
    this.allowCustomBuildEnvironment = allowCustomBuildEnvironment;
  }


  public SessionUserAccountModel blocked(Boolean blocked) {
    this.blocked = blocked;
    return this;
  }

  /**
   * Get blocked
   * @return blocked
   */
  @javax.annotation.Nullable
  public Boolean getBlocked() {
    return blocked;
  }

  public void setBlocked(Boolean blocked) {
    this.blocked = blocked;
  }


  public SessionUserAccountModel featureFlags(FeatureFlags featureFlags) {
    this.featureFlags = featureFlags;
    return this;
  }

  /**
   * Get featureFlags
   * @return featureFlags
   */
  @javax.annotation.Nullable
  public FeatureFlags getFeatureFlags() {
    return featureFlags;
  }

  public void setFeatureFlags(FeatureFlags featureFlags) {
    this.featureFlags = featureFlags;
  }


  public SessionUserAccountModel gitHubPlan(Boolean gitHubPlan) {
    this.gitHubPlan = gitHubPlan;
    return this;
  }

  /**
   * Get gitHubPlan
   * @return gitHubPlan
   */
  @javax.annotation.Nullable
  public Boolean getGitHubPlan() {
    return gitHubPlan;
  }

  public void setGitHubPlan(Boolean gitHubPlan) {
    this.gitHubPlan = gitHubPlan;
  }


  public SessionUserAccountModel gitHubPlanOrg(String gitHubPlanOrg) {
    this.gitHubPlanOrg = gitHubPlanOrg;
    return this;
  }

  /**
   * Get gitHubPlanOrg
   * @return gitHubPlanOrg
   */
  @javax.annotation.Nullable
  public String getGitHubPlanOrg() {
    return gitHubPlanOrg;
  }

  public void setGitHubPlanOrg(String gitHubPlanOrg) {
    this.gitHubPlanOrg = gitHubPlanOrg;
  }


  /**
   * Get isCollaborator
   * @return isCollaborator
   */
  @javax.annotation.Nullable
  public Boolean getIsCollaborator() {
    return isCollaborator;
  }



  public SessionUserAccountModel isEnterprisePlan(Boolean isEnterprisePlan) {
    this.isEnterprisePlan = isEnterprisePlan;
    return this;
  }

  /**
   * Get isEnterprisePlan
   * @return isEnterprisePlan
   */
  @javax.annotation.Nullable
  public Boolean getIsEnterprisePlan() {
    return isEnterprisePlan;
  }

  public void setIsEnterprisePlan(Boolean isEnterprisePlan) {
    this.isEnterprisePlan = isEnterprisePlan;
  }


  /**
   * Get isOwner
   * @return isOwner
   */
  @javax.annotation.Nullable
  public Boolean getIsOwner() {
    return isOwner;
  }



  public SessionUserAccountModel manualPayments(Boolean manualPayments) {
    this.manualPayments = manualPayments;
    return this;
  }

  /**
   * Get manualPayments
   * @return manualPayments
   */
  @javax.annotation.Nullable
  public Boolean getManualPayments() {
    return manualPayments;
  }

  public void setManualPayments(Boolean manualPayments) {
    this.manualPayments = manualPayments;
  }


  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public SessionUserAccountModel permissions(List<PermissionName> permissions) {
    this.permissions = permissions;
    return this;
  }

  public SessionUserAccountModel addPermissionsItem(PermissionName permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<PermissionName> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PermissionName> permissions) {
    this.permissions = permissions;
  }


  /**
   * Get planEnd
   * @return planEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPlanEnd() {
    return planEnd;
  }



  public SessionUserAccountModel planId(PlanName planId) {
    this.planId = planId;
    return this;
  }

  /**
   * Get planId
   * @return planId
   */
  @javax.annotation.Nullable
  public PlanName getPlanId() {
    return planId;
  }

  public void setPlanId(PlanName planId) {
    this.planId = planId;
  }


  /**
   * Get planStart
   * @return planStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPlanStart() {
    return planStart;
  }



  public SessionUserAccountModel planStatus(PlanStatus planStatus) {
    this.planStatus = planStatus;
    return this;
  }

  /**
   * Get planStatus
   * @return planStatus
   */
  @javax.annotation.Nullable
  public PlanStatus getPlanStatus() {
    return planStatus;
  }

  public void setPlanStatus(PlanStatus planStatus) {
    this.planStatus = planStatus;
  }


  public SessionUserAccountModel roleId(Integer roleId) {
    this.roleId = roleId;
    return this;
  }

  /**
   * Get roleId
   * minimum: 0
   * @return roleId
   */
  @javax.annotation.Nullable
  public Integer getRoleId() {
    return roleId;
  }

  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }


  /**
   * Get roleName
   * @return roleName
   */
  @javax.annotation.Nullable
  public String getRoleName() {
    return roleName;
  }



  public SessionUserAccountModel timeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
    return this;
  }

  /**
   * Get timeZoneId
   * @return timeZoneId
   */
  @javax.annotation.Nullable
  public String getTimeZoneId() {
    return timeZoneId;
  }

  public void setTimeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
  }


  public SessionUserAccountModel unpaid(Boolean unpaid) {
    this.unpaid = unpaid;
    return this;
  }

  /**
   * Get unpaid
   * @return unpaid
   */
  @javax.annotation.Nullable
  public Boolean getUnpaid() {
    return unpaid;
  }

  public void setUnpaid(Boolean unpaid) {
    this.unpaid = unpaid;
  }


  public SessionUserAccountModel unverified(Boolean unverified) {
    this.unverified = unverified;
    return this;
  }

  /**
   * Get unverified
   * @return unverified
   */
  @javax.annotation.Nullable
  public Boolean getUnverified() {
    return unverified;
  }

  public void setUnverified(Boolean unverified) {
    this.unverified = unverified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionUserAccountModel sessionUserAccountModel = (SessionUserAccountModel) o;
    return Objects.equals(this.created, sessionUserAccountModel.created) &&
        Objects.equals(this.updated, sessionUserAccountModel.updated) &&
        Objects.equals(this.accountId, sessionUserAccountModel.accountId) &&
        Objects.equals(this.allowCustomBuildEnvironment, sessionUserAccountModel.allowCustomBuildEnvironment) &&
        Objects.equals(this.blocked, sessionUserAccountModel.blocked) &&
        Objects.equals(this.featureFlags, sessionUserAccountModel.featureFlags) &&
        Objects.equals(this.gitHubPlan, sessionUserAccountModel.gitHubPlan) &&
        Objects.equals(this.gitHubPlanOrg, sessionUserAccountModel.gitHubPlanOrg) &&
        Objects.equals(this.isCollaborator, sessionUserAccountModel.isCollaborator) &&
        Objects.equals(this.isEnterprisePlan, sessionUserAccountModel.isEnterprisePlan) &&
        Objects.equals(this.isOwner, sessionUserAccountModel.isOwner) &&
        Objects.equals(this.manualPayments, sessionUserAccountModel.manualPayments) &&
        Objects.equals(this.name, sessionUserAccountModel.name) &&
        Objects.equals(this.permissions, sessionUserAccountModel.permissions) &&
        Objects.equals(this.planEnd, sessionUserAccountModel.planEnd) &&
        Objects.equals(this.planId, sessionUserAccountModel.planId) &&
        Objects.equals(this.planStart, sessionUserAccountModel.planStart) &&
        Objects.equals(this.planStatus, sessionUserAccountModel.planStatus) &&
        Objects.equals(this.roleId, sessionUserAccountModel.roleId) &&
        Objects.equals(this.roleName, sessionUserAccountModel.roleName) &&
        Objects.equals(this.timeZoneId, sessionUserAccountModel.timeZoneId) &&
        Objects.equals(this.unpaid, sessionUserAccountModel.unpaid) &&
        Objects.equals(this.unverified, sessionUserAccountModel.unverified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, accountId, allowCustomBuildEnvironment, blocked, featureFlags, gitHubPlan, gitHubPlanOrg, isCollaborator, isEnterprisePlan, isOwner, manualPayments, name, permissions, planEnd, planId, planStart, planStatus, roleId, roleName, timeZoneId, unpaid, unverified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionUserAccountModel {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    allowCustomBuildEnvironment: ").append(toIndentedString(allowCustomBuildEnvironment)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    featureFlags: ").append(toIndentedString(featureFlags)).append("\n");
    sb.append("    gitHubPlan: ").append(toIndentedString(gitHubPlan)).append("\n");
    sb.append("    gitHubPlanOrg: ").append(toIndentedString(gitHubPlanOrg)).append("\n");
    sb.append("    isCollaborator: ").append(toIndentedString(isCollaborator)).append("\n");
    sb.append("    isEnterprisePlan: ").append(toIndentedString(isEnterprisePlan)).append("\n");
    sb.append("    isOwner: ").append(toIndentedString(isOwner)).append("\n");
    sb.append("    manualPayments: ").append(toIndentedString(manualPayments)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    planEnd: ").append(toIndentedString(planEnd)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    planStart: ").append(toIndentedString(planStart)).append("\n");
    sb.append("    planStatus: ").append(toIndentedString(planStatus)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    unpaid: ").append(toIndentedString(unpaid)).append("\n");
    sb.append("    unverified: ").append(toIndentedString(unverified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("accountId");
    openapiFields.add("allowCustomBuildEnvironment");
    openapiFields.add("blocked");
    openapiFields.add("featureFlags");
    openapiFields.add("gitHubPlan");
    openapiFields.add("gitHubPlanOrg");
    openapiFields.add("isCollaborator");
    openapiFields.add("isEnterprisePlan");
    openapiFields.add("isOwner");
    openapiFields.add("manualPayments");
    openapiFields.add("name");
    openapiFields.add("permissions");
    openapiFields.add("planEnd");
    openapiFields.add("planId");
    openapiFields.add("planStart");
    openapiFields.add("planStatus");
    openapiFields.add("roleId");
    openapiFields.add("roleName");
    openapiFields.add("timeZoneId");
    openapiFields.add("unpaid");
    openapiFields.add("unverified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionUserAccountModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionUserAccountModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionUserAccountModel is not found in the empty JSON string", SessionUserAccountModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionUserAccountModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionUserAccountModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `featureFlags`
      if (jsonObj.get("featureFlags") != null && !jsonObj.get("featureFlags").isJsonNull()) {
        FeatureFlags.validateJsonElement(jsonObj.get("featureFlags"));
      }
      if ((jsonObj.get("gitHubPlanOrg") != null && !jsonObj.get("gitHubPlanOrg").isJsonNull()) && !jsonObj.get("gitHubPlanOrg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitHubPlanOrg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitHubPlanOrg").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      // validate the optional field `planId`
      if (jsonObj.get("planId") != null && !jsonObj.get("planId").isJsonNull()) {
        PlanName.validateJsonElement(jsonObj.get("planId"));
      }
      // validate the optional field `planStatus`
      if (jsonObj.get("planStatus") != null && !jsonObj.get("planStatus").isJsonNull()) {
        PlanStatus.validateJsonElement(jsonObj.get("planStatus"));
      }
      if ((jsonObj.get("roleName") != null && !jsonObj.get("roleName").isJsonNull()) && !jsonObj.get("roleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleName").toString()));
      }
      if ((jsonObj.get("timeZoneId") != null && !jsonObj.get("timeZoneId").isJsonNull()) && !jsonObj.get("timeZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionUserAccountModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionUserAccountModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionUserAccountModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionUserAccountModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionUserAccountModel>() {
           @Override
           public void write(JsonWriter out, SessionUserAccountModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionUserAccountModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionUserAccountModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionUserAccountModel
   * @throws IOException if the JSON string is invalid with respect to SessionUserAccountModel
   */
  public static SessionUserAccountModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionUserAccountModel.class);
  }

  /**
   * Convert an instance of SessionUserAccountModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

