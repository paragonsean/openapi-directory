/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeploymentEnvironmentAddition;
import org.openapitools.client.model.DeploymentEnvironmentDeploymentsResults;
import org.openapitools.client.model.DeploymentEnvironmentLookupModel;
import org.openapitools.client.model.DeploymentEnvironmentSettingsResults;
import org.openapitools.client.model.DeploymentEnvironmentWithSettings;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvironmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addEnvironment
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#add-environment">Add environment Documentation</a>
     */
    public okhttp3.Call addEnvironmentCall(DeploymentEnvironmentAddition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEnvironmentValidateBeforeCall(DeploymentEnvironmentAddition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addEnvironment(Async)");
        }

        return addEnvironmentCall(body, _callback);

    }

    /**
     * Add environment
     * 
     * @param body  (required)
     * @return DeploymentEnvironmentWithSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#add-environment">Add environment Documentation</a>
     */
    public DeploymentEnvironmentWithSettings addEnvironment(DeploymentEnvironmentAddition body) throws ApiException {
        ApiResponse<DeploymentEnvironmentWithSettings> localVarResp = addEnvironmentWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Add environment
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeploymentEnvironmentWithSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#add-environment">Add environment Documentation</a>
     */
    public ApiResponse<DeploymentEnvironmentWithSettings> addEnvironmentWithHttpInfo(DeploymentEnvironmentAddition body) throws ApiException {
        okhttp3.Call localVarCall = addEnvironmentValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentWithSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add environment (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#add-environment">Add environment Documentation</a>
     */
    public okhttp3.Call addEnvironmentAsync(DeploymentEnvironmentAddition body, final ApiCallback<DeploymentEnvironmentWithSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEnvironmentValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentWithSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnvironment
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#delete-environment">Delete environment Documentation</a>
     */
    public okhttp3.Call deleteEnvironmentCall(Integer deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{deploymentEnvironmentId}"
            .replace("{" + "deploymentEnvironmentId" + "}", localVarApiClient.escapeString(deploymentEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentValidateBeforeCall(Integer deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentEnvironmentId' is set
        if (deploymentEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentEnvironmentId' when calling deleteEnvironment(Async)");
        }

        return deleteEnvironmentCall(deploymentEnvironmentId, _callback);

    }

    /**
     * Delete environment
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#delete-environment">Delete environment Documentation</a>
     */
    public void deleteEnvironment(Integer deploymentEnvironmentId) throws ApiException {
        deleteEnvironmentWithHttpInfo(deploymentEnvironmentId);
    }

    /**
     * Delete environment
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#delete-environment">Delete environment Documentation</a>
     */
    public ApiResponse<Void> deleteEnvironmentWithHttpInfo(Integer deploymentEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvironmentValidateBeforeCall(deploymentEnvironmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete environment (asynchronously)
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#delete-environment">Delete environment Documentation</a>
     */
    public okhttp3.Call deleteEnvironmentAsync(Integer deploymentEnvironmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvironmentValidateBeforeCall(deploymentEnvironmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironmentDeployments
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-deployments">Get environment deployments Documentation</a>
     */
    public okhttp3.Call getEnvironmentDeploymentsCall(Integer deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{deploymentEnvironmentId}/deployments"
            .replace("{" + "deploymentEnvironmentId" + "}", localVarApiClient.escapeString(deploymentEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentDeploymentsValidateBeforeCall(Integer deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentEnvironmentId' is set
        if (deploymentEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentEnvironmentId' when calling getEnvironmentDeployments(Async)");
        }

        return getEnvironmentDeploymentsCall(deploymentEnvironmentId, _callback);

    }

    /**
     * Get environment deployments
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @return DeploymentEnvironmentDeploymentsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-deployments">Get environment deployments Documentation</a>
     */
    public DeploymentEnvironmentDeploymentsResults getEnvironmentDeployments(Integer deploymentEnvironmentId) throws ApiException {
        ApiResponse<DeploymentEnvironmentDeploymentsResults> localVarResp = getEnvironmentDeploymentsWithHttpInfo(deploymentEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Get environment deployments
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @return ApiResponse&lt;DeploymentEnvironmentDeploymentsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-deployments">Get environment deployments Documentation</a>
     */
    public ApiResponse<DeploymentEnvironmentDeploymentsResults> getEnvironmentDeploymentsWithHttpInfo(Integer deploymentEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentDeploymentsValidateBeforeCall(deploymentEnvironmentId, null);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentDeploymentsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get environment deployments (asynchronously)
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-deployments">Get environment deployments Documentation</a>
     */
    public okhttp3.Call getEnvironmentDeploymentsAsync(Integer deploymentEnvironmentId, final ApiCallback<DeploymentEnvironmentDeploymentsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentDeploymentsValidateBeforeCall(deploymentEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentDeploymentsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironmentSettings
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-settings">Get environment settings Documentation</a>
     */
    public okhttp3.Call getEnvironmentSettingsCall(Integer deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{deploymentEnvironmentId}/settings"
            .replace("{" + "deploymentEnvironmentId" + "}", localVarApiClient.escapeString(deploymentEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentSettingsValidateBeforeCall(Integer deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentEnvironmentId' is set
        if (deploymentEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentEnvironmentId' when calling getEnvironmentSettings(Async)");
        }

        return getEnvironmentSettingsCall(deploymentEnvironmentId, _callback);

    }

    /**
     * Get environment settings
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @return DeploymentEnvironmentSettingsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-settings">Get environment settings Documentation</a>
     */
    public DeploymentEnvironmentSettingsResults getEnvironmentSettings(Integer deploymentEnvironmentId) throws ApiException {
        ApiResponse<DeploymentEnvironmentSettingsResults> localVarResp = getEnvironmentSettingsWithHttpInfo(deploymentEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Get environment settings
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @return ApiResponse&lt;DeploymentEnvironmentSettingsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-settings">Get environment settings Documentation</a>
     */
    public ApiResponse<DeploymentEnvironmentSettingsResults> getEnvironmentSettingsWithHttpInfo(Integer deploymentEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentSettingsValidateBeforeCall(deploymentEnvironmentId, null);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentSettingsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get environment settings (asynchronously)
     * 
     * @param deploymentEnvironmentId Deployment Environment ID (&#x60;deploymentEnvironmentId&#x60; property of &#x60;DeploymentEnvironment&#x60;)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environment-settings">Get environment settings Documentation</a>
     */
    public okhttp3.Call getEnvironmentSettingsAsync(Integer deploymentEnvironmentId, final ApiCallback<DeploymentEnvironmentSettingsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentSettingsValidateBeforeCall(deploymentEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentSettingsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironments
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environments">Get environments Documentation</a>
     */
    public okhttp3.Call getEnvironmentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEnvironmentsCall(_callback);

    }

    /**
     * Get environments
     * 
     * @return List&lt;DeploymentEnvironmentLookupModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environments">Get environments Documentation</a>
     */
    public List<DeploymentEnvironmentLookupModel> getEnvironments() throws ApiException {
        ApiResponse<List<DeploymentEnvironmentLookupModel>> localVarResp = getEnvironmentsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get environments
     * 
     * @return ApiResponse&lt;List&lt;DeploymentEnvironmentLookupModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environments">Get environments Documentation</a>
     */
    public ApiResponse<List<DeploymentEnvironmentLookupModel>> getEnvironmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DeploymentEnvironmentLookupModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get environments (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#get-environments">Get environments Documentation</a>
     */
    public okhttp3.Call getEnvironmentsAsync(final ApiCallback<List<DeploymentEnvironmentLookupModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DeploymentEnvironmentLookupModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnvironment
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#update-environment">Update environment Documentation</a>
     */
    public okhttp3.Call updateEnvironmentCall(DeploymentEnvironmentWithSettings body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvironmentValidateBeforeCall(DeploymentEnvironmentWithSettings body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEnvironment(Async)");
        }

        return updateEnvironmentCall(body, _callback);

    }

    /**
     * Update environment
     * 
     * @param body  (required)
     * @return DeploymentEnvironmentWithSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#update-environment">Update environment Documentation</a>
     */
    public DeploymentEnvironmentWithSettings updateEnvironment(DeploymentEnvironmentWithSettings body) throws ApiException {
        ApiResponse<DeploymentEnvironmentWithSettings> localVarResp = updateEnvironmentWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Update environment
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeploymentEnvironmentWithSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#update-environment">Update environment Documentation</a>
     */
    public ApiResponse<DeploymentEnvironmentWithSettings> updateEnvironmentWithHttpInfo(DeploymentEnvironmentWithSettings body) throws ApiException {
        okhttp3.Call localVarCall = updateEnvironmentValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentWithSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update environment (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/environments-deployments/#update-environment">Update environment Documentation</a>
     */
    public okhttp3.Call updateEnvironmentAsync(DeploymentEnvironmentWithSettings body, final ApiCallback<DeploymentEnvironmentWithSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvironmentValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeploymentEnvironmentWithSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
