/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.NuGetFeed;
import org.openapitools.client.model.RepositoryProvider;
import org.openapitools.client.model.RepositoryScm;
import org.openapitools.client.model.SecurityDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Project {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ALWAYS_BUILD_CLOSED_PULL_REQUESTS = "alwaysBuildClosedPullRequests";
  @SerializedName(SERIALIZED_NAME_ALWAYS_BUILD_CLOSED_PULL_REQUESTS)
  private Boolean alwaysBuildClosedPullRequests;

  public static final String SERIALIZED_NAME_BUILDS = "builds";
  @SerializedName(SERIALIZED_NAME_BUILDS)
  private List<Build> builds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_BUILD_ID = "currentBuildId";
  @SerializedName(SERIALIZED_NAME_CURRENT_BUILD_ID)
  private Integer currentBuildId;

  public static final String SERIALIZED_NAME_DISABLE_PULL_REQUEST_WEBHOOKS = "disablePullRequestWebhooks";
  @SerializedName(SERIALIZED_NAME_DISABLE_PULL_REQUEST_WEBHOOKS)
  private Boolean disablePullRequestWebhooks;

  public static final String SERIALIZED_NAME_DISABLE_PUSH_WEBHOOKS = "disablePushWebhooks";
  @SerializedName(SERIALIZED_NAME_DISABLE_PUSH_WEBHOOKS)
  private Boolean disablePushWebhooks;

  public static final String SERIALIZED_NAME_ENABLE_DEPLOYMENT_IN_PULL_REQUESTS = "enableDeploymentInPullRequests";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEPLOYMENT_IN_PULL_REQUESTS)
  private Boolean enableDeploymentInPullRequests;

  public static final String SERIALIZED_NAME_ENABLE_SECURE_VARIABLES_IN_PULL_REQUESTS = "enableSecureVariablesInPullRequests";
  @SerializedName(SERIALIZED_NAME_ENABLE_SECURE_VARIABLES_IN_PULL_REQUESTS)
  private Boolean enableSecureVariablesInPullRequests;

  public static final String SERIALIZED_NAME_ENABLE_SECURE_VARIABLES_IN_PULL_REQUESTS_FROM_SAME_REPO = "enableSecureVariablesInPullRequestsFromSameRepo";
  @SerializedName(SERIALIZED_NAME_ENABLE_SECURE_VARIABLES_IN_PULL_REQUESTS_FROM_SAME_REPO)
  private Boolean enableSecureVariablesInPullRequestsFromSameRepo;

  public static final String SERIALIZED_NAME_IS_GIT_HUB_APP = "isGitHubApp";
  @SerializedName(SERIALIZED_NAME_IS_GIT_HUB_APP)
  private Boolean isGitHubApp;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_NU_GET_FEED = "nuGetFeed";
  @SerializedName(SERIALIZED_NAME_NU_GET_FEED)
  private NuGetFeed nuGetFeed;

  public static final String SERIALIZED_NAME_REPOSITORY_BRANCH = "repositoryBranch";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_BRANCH)
  private String repositoryBranch;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_REPOSITORY_SCM = "repositoryScm";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SCM)
  private RepositoryScm repositoryScm;

  public static final String SERIALIZED_NAME_REPOSITORY_TYPE = "repositoryType";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_TYPE)
  private RepositoryProvider repositoryType;

  public static final String SERIALIZED_NAME_ROLLING_BUILDS = "rollingBuilds";
  @SerializedName(SERIALIZED_NAME_ROLLING_BUILDS)
  private Boolean rollingBuilds;

  public static final String SERIALIZED_NAME_ROLLING_BUILDS_DO_NOT_CANCEL_RUNNING_BUILDS = "rollingBuildsDoNotCancelRunningBuilds";
  @SerializedName(SERIALIZED_NAME_ROLLING_BUILDS_DO_NOT_CANCEL_RUNNING_BUILDS)
  private Boolean rollingBuildsDoNotCancelRunningBuilds;

  public static final String SERIALIZED_NAME_ROLLING_BUILDS_ONLY_FOR_PULL_REQUESTS = "rollingBuildsOnlyForPullRequests";
  @SerializedName(SERIALIZED_NAME_ROLLING_BUILDS_ONLY_FOR_PULL_REQUESTS)
  private Boolean rollingBuildsOnlyForPullRequests;

  public static final String SERIALIZED_NAME_SAVE_BUILD_CACHE_IN_PULL_REQUESTS = "saveBuildCacheInPullRequests";
  @SerializedName(SERIALIZED_NAME_SAVE_BUILD_CACHE_IN_PULL_REQUESTS)
  private Boolean saveBuildCacheInPullRequests;

  public static final String SERIALIZED_NAME_SECURITY_DESCRIPTOR = "securityDescriptor";
  @SerializedName(SERIALIZED_NAME_SECURITY_DESCRIPTOR)
  private SecurityDescriptor securityDescriptor;

  public static final String SERIALIZED_NAME_SKIP_BRANCHES_WITHOUT_APPVEYOR_YML = "skipBranchesWithoutAppveyorYml";
  @SerializedName(SERIALIZED_NAME_SKIP_BRANCHES_WITHOUT_APPVEYOR_YML)
  private Boolean skipBranchesWithoutAppveyorYml;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public Project() {
  }

  public Project(
     String accountName, 
     String slug, 
     OffsetDateTime created, 
     OffsetDateTime updated, 
     Integer accountId, 
     List<Build> builds
  ) {
    this();
    this.accountName = accountName;
    this.slug = slug;
    this.created = created;
    this.updated = updated;
    this.accountId = accountId;
    this.builds = builds;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }



  public Project name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Project projectId(Integer projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * minimum: 0
   * @return projectId
   */
  @javax.annotation.Nonnull
  public Integer getProjectId() {
    return projectId;
  }

  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  /**
   * Get accountId
   * minimum: 0
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }



  public Project alwaysBuildClosedPullRequests(Boolean alwaysBuildClosedPullRequests) {
    this.alwaysBuildClosedPullRequests = alwaysBuildClosedPullRequests;
    return this;
  }

  /**
   * Get alwaysBuildClosedPullRequests
   * @return alwaysBuildClosedPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysBuildClosedPullRequests() {
    return alwaysBuildClosedPullRequests;
  }

  public void setAlwaysBuildClosedPullRequests(Boolean alwaysBuildClosedPullRequests) {
    this.alwaysBuildClosedPullRequests = alwaysBuildClosedPullRequests;
  }


  /**
   * Only non-empty for response from getProjects.
   * @return builds
   */
  @javax.annotation.Nullable
  public List<Build> getBuilds() {
    return builds;
  }



  public Project currentBuildId(Integer currentBuildId) {
    this.currentBuildId = currentBuildId;
    return this;
  }

  /**
   * Get currentBuildId
   * minimum: 0
   * @return currentBuildId
   */
  @javax.annotation.Nullable
  public Integer getCurrentBuildId() {
    return currentBuildId;
  }

  public void setCurrentBuildId(Integer currentBuildId) {
    this.currentBuildId = currentBuildId;
  }


  public Project disablePullRequestWebhooks(Boolean disablePullRequestWebhooks) {
    this.disablePullRequestWebhooks = disablePullRequestWebhooks;
    return this;
  }

  /**
   * Get disablePullRequestWebhooks
   * @return disablePullRequestWebhooks
   */
  @javax.annotation.Nullable
  public Boolean getDisablePullRequestWebhooks() {
    return disablePullRequestWebhooks;
  }

  public void setDisablePullRequestWebhooks(Boolean disablePullRequestWebhooks) {
    this.disablePullRequestWebhooks = disablePullRequestWebhooks;
  }


  public Project disablePushWebhooks(Boolean disablePushWebhooks) {
    this.disablePushWebhooks = disablePushWebhooks;
    return this;
  }

  /**
   * Get disablePushWebhooks
   * @return disablePushWebhooks
   */
  @javax.annotation.Nullable
  public Boolean getDisablePushWebhooks() {
    return disablePushWebhooks;
  }

  public void setDisablePushWebhooks(Boolean disablePushWebhooks) {
    this.disablePushWebhooks = disablePushWebhooks;
  }


  public Project enableDeploymentInPullRequests(Boolean enableDeploymentInPullRequests) {
    this.enableDeploymentInPullRequests = enableDeploymentInPullRequests;
    return this;
  }

  /**
   * Get enableDeploymentInPullRequests
   * @return enableDeploymentInPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getEnableDeploymentInPullRequests() {
    return enableDeploymentInPullRequests;
  }

  public void setEnableDeploymentInPullRequests(Boolean enableDeploymentInPullRequests) {
    this.enableDeploymentInPullRequests = enableDeploymentInPullRequests;
  }


  public Project enableSecureVariablesInPullRequests(Boolean enableSecureVariablesInPullRequests) {
    this.enableSecureVariablesInPullRequests = enableSecureVariablesInPullRequests;
    return this;
  }

  /**
   * Get enableSecureVariablesInPullRequests
   * @return enableSecureVariablesInPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getEnableSecureVariablesInPullRequests() {
    return enableSecureVariablesInPullRequests;
  }

  public void setEnableSecureVariablesInPullRequests(Boolean enableSecureVariablesInPullRequests) {
    this.enableSecureVariablesInPullRequests = enableSecureVariablesInPullRequests;
  }


  public Project enableSecureVariablesInPullRequestsFromSameRepo(Boolean enableSecureVariablesInPullRequestsFromSameRepo) {
    this.enableSecureVariablesInPullRequestsFromSameRepo = enableSecureVariablesInPullRequestsFromSameRepo;
    return this;
  }

  /**
   * Get enableSecureVariablesInPullRequestsFromSameRepo
   * @return enableSecureVariablesInPullRequestsFromSameRepo
   */
  @javax.annotation.Nullable
  public Boolean getEnableSecureVariablesInPullRequestsFromSameRepo() {
    return enableSecureVariablesInPullRequestsFromSameRepo;
  }

  public void setEnableSecureVariablesInPullRequestsFromSameRepo(Boolean enableSecureVariablesInPullRequestsFromSameRepo) {
    this.enableSecureVariablesInPullRequestsFromSameRepo = enableSecureVariablesInPullRequestsFromSameRepo;
  }


  public Project isGitHubApp(Boolean isGitHubApp) {
    this.isGitHubApp = isGitHubApp;
    return this;
  }

  /**
   * Get isGitHubApp
   * @return isGitHubApp
   */
  @javax.annotation.Nullable
  public Boolean getIsGitHubApp() {
    return isGitHubApp;
  }

  public void setIsGitHubApp(Boolean isGitHubApp) {
    this.isGitHubApp = isGitHubApp;
  }


  public Project isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Get isPrivate
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public Project nuGetFeed(NuGetFeed nuGetFeed) {
    this.nuGetFeed = nuGetFeed;
    return this;
  }

  /**
   * Get nuGetFeed
   * @return nuGetFeed
   */
  @javax.annotation.Nullable
  public NuGetFeed getNuGetFeed() {
    return nuGetFeed;
  }

  public void setNuGetFeed(NuGetFeed nuGetFeed) {
    this.nuGetFeed = nuGetFeed;
  }


  public Project repositoryBranch(String repositoryBranch) {
    this.repositoryBranch = repositoryBranch;
    return this;
  }

  /**
   * Not present in response from addProject.
   * @return repositoryBranch
   */
  @javax.annotation.Nullable
  public String getRepositoryBranch() {
    return repositoryBranch;
  }

  public void setRepositoryBranch(String repositoryBranch) {
    this.repositoryBranch = repositoryBranch;
  }


  public Project repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nonnull
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public Project repositoryScm(RepositoryScm repositoryScm) {
    this.repositoryScm = repositoryScm;
    return this;
  }

  /**
   * Get repositoryScm
   * @return repositoryScm
   */
  @javax.annotation.Nullable
  public RepositoryScm getRepositoryScm() {
    return repositoryScm;
  }

  public void setRepositoryScm(RepositoryScm repositoryScm) {
    this.repositoryScm = repositoryScm;
  }


  public Project repositoryType(RepositoryProvider repositoryType) {
    this.repositoryType = repositoryType;
    return this;
  }

  /**
   * Get repositoryType
   * @return repositoryType
   */
  @javax.annotation.Nullable
  public RepositoryProvider getRepositoryType() {
    return repositoryType;
  }

  public void setRepositoryType(RepositoryProvider repositoryType) {
    this.repositoryType = repositoryType;
  }


  public Project rollingBuilds(Boolean rollingBuilds) {
    this.rollingBuilds = rollingBuilds;
    return this;
  }

  /**
   * Get rollingBuilds
   * @return rollingBuilds
   */
  @javax.annotation.Nullable
  public Boolean getRollingBuilds() {
    return rollingBuilds;
  }

  public void setRollingBuilds(Boolean rollingBuilds) {
    this.rollingBuilds = rollingBuilds;
  }


  public Project rollingBuildsDoNotCancelRunningBuilds(Boolean rollingBuildsDoNotCancelRunningBuilds) {
    this.rollingBuildsDoNotCancelRunningBuilds = rollingBuildsDoNotCancelRunningBuilds;
    return this;
  }

  /**
   * Get rollingBuildsDoNotCancelRunningBuilds
   * @return rollingBuildsDoNotCancelRunningBuilds
   */
  @javax.annotation.Nullable
  public Boolean getRollingBuildsDoNotCancelRunningBuilds() {
    return rollingBuildsDoNotCancelRunningBuilds;
  }

  public void setRollingBuildsDoNotCancelRunningBuilds(Boolean rollingBuildsDoNotCancelRunningBuilds) {
    this.rollingBuildsDoNotCancelRunningBuilds = rollingBuildsDoNotCancelRunningBuilds;
  }


  public Project rollingBuildsOnlyForPullRequests(Boolean rollingBuildsOnlyForPullRequests) {
    this.rollingBuildsOnlyForPullRequests = rollingBuildsOnlyForPullRequests;
    return this;
  }

  /**
   * Get rollingBuildsOnlyForPullRequests
   * @return rollingBuildsOnlyForPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getRollingBuildsOnlyForPullRequests() {
    return rollingBuildsOnlyForPullRequests;
  }

  public void setRollingBuildsOnlyForPullRequests(Boolean rollingBuildsOnlyForPullRequests) {
    this.rollingBuildsOnlyForPullRequests = rollingBuildsOnlyForPullRequests;
  }


  public Project saveBuildCacheInPullRequests(Boolean saveBuildCacheInPullRequests) {
    this.saveBuildCacheInPullRequests = saveBuildCacheInPullRequests;
    return this;
  }

  /**
   * Get saveBuildCacheInPullRequests
   * @return saveBuildCacheInPullRequests
   */
  @javax.annotation.Nullable
  public Boolean getSaveBuildCacheInPullRequests() {
    return saveBuildCacheInPullRequests;
  }

  public void setSaveBuildCacheInPullRequests(Boolean saveBuildCacheInPullRequests) {
    this.saveBuildCacheInPullRequests = saveBuildCacheInPullRequests;
  }


  public Project securityDescriptor(SecurityDescriptor securityDescriptor) {
    this.securityDescriptor = securityDescriptor;
    return this;
  }

  /**
   * Get securityDescriptor
   * @return securityDescriptor
   */
  @javax.annotation.Nullable
  public SecurityDescriptor getSecurityDescriptor() {
    return securityDescriptor;
  }

  public void setSecurityDescriptor(SecurityDescriptor securityDescriptor) {
    this.securityDescriptor = securityDescriptor;
  }


  public Project skipBranchesWithoutAppveyorYml(Boolean skipBranchesWithoutAppveyorYml) {
    this.skipBranchesWithoutAppveyorYml = skipBranchesWithoutAppveyorYml;
    return this;
  }

  /**
   * Get skipBranchesWithoutAppveyorYml
   * @return skipBranchesWithoutAppveyorYml
   */
  @javax.annotation.Nullable
  public Boolean getSkipBranchesWithoutAppveyorYml() {
    return skipBranchesWithoutAppveyorYml;
  }

  public void setSkipBranchesWithoutAppveyorYml(Boolean skipBranchesWithoutAppveyorYml) {
    this.skipBranchesWithoutAppveyorYml = skipBranchesWithoutAppveyorYml;
  }


  public Project tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Comma-separated list of project tags for dynamic grouping. Appears that any input is accepted.  The returned value only contains case-preserving but insensitive unique values where spaces around \&quot;,\&quot; are removed but otherwise preserved.  Empty values and items are allowed.
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.accountName, project.accountName) &&
        Objects.equals(this.name, project.name) &&
        Objects.equals(this.projectId, project.projectId) &&
        Objects.equals(this.slug, project.slug) &&
        Objects.equals(this.created, project.created) &&
        Objects.equals(this.updated, project.updated) &&
        Objects.equals(this.accountId, project.accountId) &&
        Objects.equals(this.alwaysBuildClosedPullRequests, project.alwaysBuildClosedPullRequests) &&
        Objects.equals(this.builds, project.builds) &&
        Objects.equals(this.currentBuildId, project.currentBuildId) &&
        Objects.equals(this.disablePullRequestWebhooks, project.disablePullRequestWebhooks) &&
        Objects.equals(this.disablePushWebhooks, project.disablePushWebhooks) &&
        Objects.equals(this.enableDeploymentInPullRequests, project.enableDeploymentInPullRequests) &&
        Objects.equals(this.enableSecureVariablesInPullRequests, project.enableSecureVariablesInPullRequests) &&
        Objects.equals(this.enableSecureVariablesInPullRequestsFromSameRepo, project.enableSecureVariablesInPullRequestsFromSameRepo) &&
        Objects.equals(this.isGitHubApp, project.isGitHubApp) &&
        Objects.equals(this.isPrivate, project.isPrivate) &&
        Objects.equals(this.nuGetFeed, project.nuGetFeed) &&
        Objects.equals(this.repositoryBranch, project.repositoryBranch) &&
        Objects.equals(this.repositoryName, project.repositoryName) &&
        Objects.equals(this.repositoryScm, project.repositoryScm) &&
        Objects.equals(this.repositoryType, project.repositoryType) &&
        Objects.equals(this.rollingBuilds, project.rollingBuilds) &&
        Objects.equals(this.rollingBuildsDoNotCancelRunningBuilds, project.rollingBuildsDoNotCancelRunningBuilds) &&
        Objects.equals(this.rollingBuildsOnlyForPullRequests, project.rollingBuildsOnlyForPullRequests) &&
        Objects.equals(this.saveBuildCacheInPullRequests, project.saveBuildCacheInPullRequests) &&
        Objects.equals(this.securityDescriptor, project.securityDescriptor) &&
        Objects.equals(this.skipBranchesWithoutAppveyorYml, project.skipBranchesWithoutAppveyorYml) &&
        Objects.equals(this.tags, project.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, name, projectId, slug, created, updated, accountId, alwaysBuildClosedPullRequests, builds, currentBuildId, disablePullRequestWebhooks, disablePushWebhooks, enableDeploymentInPullRequests, enableSecureVariablesInPullRequests, enableSecureVariablesInPullRequestsFromSameRepo, isGitHubApp, isPrivate, nuGetFeed, repositoryBranch, repositoryName, repositoryScm, repositoryType, rollingBuilds, rollingBuildsDoNotCancelRunningBuilds, rollingBuildsOnlyForPullRequests, saveBuildCacheInPullRequests, securityDescriptor, skipBranchesWithoutAppveyorYml, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    alwaysBuildClosedPullRequests: ").append(toIndentedString(alwaysBuildClosedPullRequests)).append("\n");
    sb.append("    builds: ").append(toIndentedString(builds)).append("\n");
    sb.append("    currentBuildId: ").append(toIndentedString(currentBuildId)).append("\n");
    sb.append("    disablePullRequestWebhooks: ").append(toIndentedString(disablePullRequestWebhooks)).append("\n");
    sb.append("    disablePushWebhooks: ").append(toIndentedString(disablePushWebhooks)).append("\n");
    sb.append("    enableDeploymentInPullRequests: ").append(toIndentedString(enableDeploymentInPullRequests)).append("\n");
    sb.append("    enableSecureVariablesInPullRequests: ").append(toIndentedString(enableSecureVariablesInPullRequests)).append("\n");
    sb.append("    enableSecureVariablesInPullRequestsFromSameRepo: ").append(toIndentedString(enableSecureVariablesInPullRequestsFromSameRepo)).append("\n");
    sb.append("    isGitHubApp: ").append(toIndentedString(isGitHubApp)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    nuGetFeed: ").append(toIndentedString(nuGetFeed)).append("\n");
    sb.append("    repositoryBranch: ").append(toIndentedString(repositoryBranch)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    repositoryScm: ").append(toIndentedString(repositoryScm)).append("\n");
    sb.append("    repositoryType: ").append(toIndentedString(repositoryType)).append("\n");
    sb.append("    rollingBuilds: ").append(toIndentedString(rollingBuilds)).append("\n");
    sb.append("    rollingBuildsDoNotCancelRunningBuilds: ").append(toIndentedString(rollingBuildsDoNotCancelRunningBuilds)).append("\n");
    sb.append("    rollingBuildsOnlyForPullRequests: ").append(toIndentedString(rollingBuildsOnlyForPullRequests)).append("\n");
    sb.append("    saveBuildCacheInPullRequests: ").append(toIndentedString(saveBuildCacheInPullRequests)).append("\n");
    sb.append("    securityDescriptor: ").append(toIndentedString(securityDescriptor)).append("\n");
    sb.append("    skipBranchesWithoutAppveyorYml: ").append(toIndentedString(skipBranchesWithoutAppveyorYml)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("name");
    openapiFields.add("projectId");
    openapiFields.add("slug");
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("accountId");
    openapiFields.add("alwaysBuildClosedPullRequests");
    openapiFields.add("builds");
    openapiFields.add("currentBuildId");
    openapiFields.add("disablePullRequestWebhooks");
    openapiFields.add("disablePushWebhooks");
    openapiFields.add("enableDeploymentInPullRequests");
    openapiFields.add("enableSecureVariablesInPullRequests");
    openapiFields.add("enableSecureVariablesInPullRequestsFromSameRepo");
    openapiFields.add("isGitHubApp");
    openapiFields.add("isPrivate");
    openapiFields.add("nuGetFeed");
    openapiFields.add("repositoryBranch");
    openapiFields.add("repositoryName");
    openapiFields.add("repositoryScm");
    openapiFields.add("repositoryType");
    openapiFields.add("rollingBuilds");
    openapiFields.add("rollingBuildsDoNotCancelRunningBuilds");
    openapiFields.add("rollingBuildsOnlyForPullRequests");
    openapiFields.add("saveBuildCacheInPullRequests");
    openapiFields.add("securityDescriptor");
    openapiFields.add("skipBranchesWithoutAppveyorYml");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectId");
    openapiRequiredFields.add("repositoryName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Project
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Project.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Project.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("builds") != null && !jsonObj.get("builds").isJsonNull()) {
        JsonArray jsonArraybuilds = jsonObj.getAsJsonArray("builds");
        if (jsonArraybuilds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("builds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `builds` to be an array in the JSON string but got `%s`", jsonObj.get("builds").toString()));
          }

          // validate the optional field `builds` (array)
          for (int i = 0; i < jsonArraybuilds.size(); i++) {
            Build.validateJsonElement(jsonArraybuilds.get(i));
          };
        }
      }
      // validate the optional field `nuGetFeed`
      if (jsonObj.get("nuGetFeed") != null && !jsonObj.get("nuGetFeed").isJsonNull()) {
        NuGetFeed.validateJsonElement(jsonObj.get("nuGetFeed"));
      }
      if ((jsonObj.get("repositoryBranch") != null && !jsonObj.get("repositoryBranch").isJsonNull()) && !jsonObj.get("repositoryBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryBranch").toString()));
      }
      if (!jsonObj.get("repositoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryName").toString()));
      }
      // validate the optional field `repositoryScm`
      if (jsonObj.get("repositoryScm") != null && !jsonObj.get("repositoryScm").isJsonNull()) {
        RepositoryScm.validateJsonElement(jsonObj.get("repositoryScm"));
      }
      // validate the optional field `repositoryType`
      if (jsonObj.get("repositoryType") != null && !jsonObj.get("repositoryType").isJsonNull()) {
        RepositoryProvider.validateJsonElement(jsonObj.get("repositoryType"));
      }
      // validate the optional field `securityDescriptor`
      if (jsonObj.get("securityDescriptor") != null && !jsonObj.get("securityDescriptor").isJsonNull()) {
        SecurityDescriptor.validateJsonElement(jsonObj.get("securityDescriptor"));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Project given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Project
   * @throws IOException if the JSON string is invalid with respect to Project
   */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

  /**
   * Convert an instance of Project to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

