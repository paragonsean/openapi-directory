/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SessionUserModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:34.647088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionUserModel {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_BIT_BUCKET_USERNAME = "bitBucketUsername";
  @SerializedName(SERIALIZED_NAME_BIT_BUCKET_USERNAME)
  private String bitBucketUsername;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_HUB_USERNAME = "gitHubUsername";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_USERNAME)
  private String gitHubUsername;

  public static final String SERIALIZED_NAME_GIT_LAB_USER_ID = "gitLabUserId";
  @SerializedName(SERIALIZED_NAME_GIT_LAB_USER_ID)
  private String gitLabUserId;

  public static final String SERIALIZED_NAME_GRAVATAR_HASH = "gravatarHash";
  @SerializedName(SERIALIZED_NAME_GRAVATAR_HASH)
  private String gravatarHash;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_TWO_FACTOR_AUTH_ENABLED = "twoFactorAuthEnabled";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_AUTH_ENABLED)
  private Boolean twoFactorAuthEnabled;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_VSO_USERNAME = "vsoUsername";
  @SerializedName(SERIALIZED_NAME_VSO_USERNAME)
  private String vsoUsername;

  public SessionUserModel() {
  }

  public SessionUserModel(
     OffsetDateTime created, 
     OffsetDateTime updated, 
     Integer pageSize, 
     Integer userId
  ) {
    this();
    this.created = created;
    this.updated = updated;
    this.pageSize = pageSize;
    this.userId = userId;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public SessionUserModel bitBucketUsername(String bitBucketUsername) {
    this.bitBucketUsername = bitBucketUsername;
    return this;
  }

  /**
   * Get bitBucketUsername
   * @return bitBucketUsername
   */
  @javax.annotation.Nullable
  public String getBitBucketUsername() {
    return bitBucketUsername;
  }

  public void setBitBucketUsername(String bitBucketUsername) {
    this.bitBucketUsername = bitBucketUsername;
  }


  public SessionUserModel email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SessionUserModel fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public SessionUserModel gitHubUsername(String gitHubUsername) {
    this.gitHubUsername = gitHubUsername;
    return this;
  }

  /**
   * Get gitHubUsername
   * @return gitHubUsername
   */
  @javax.annotation.Nullable
  public String getGitHubUsername() {
    return gitHubUsername;
  }

  public void setGitHubUsername(String gitHubUsername) {
    this.gitHubUsername = gitHubUsername;
  }


  public SessionUserModel gitLabUserId(String gitLabUserId) {
    this.gitLabUserId = gitLabUserId;
    return this;
  }

  /**
   * Get gitLabUserId
   * @return gitLabUserId
   */
  @javax.annotation.Nullable
  public String getGitLabUserId() {
    return gitLabUserId;
  }

  public void setGitLabUserId(String gitLabUserId) {
    this.gitLabUserId = gitLabUserId;
  }


  public SessionUserModel gravatarHash(String gravatarHash) {
    this.gravatarHash = gravatarHash;
    return this;
  }

  /**
   * Get gravatarHash
   * @return gravatarHash
   */
  @javax.annotation.Nullable
  public String getGravatarHash() {
    return gravatarHash;
  }

  public void setGravatarHash(String gravatarHash) {
    this.gravatarHash = gravatarHash;
  }


  /**
   * Get pageSize
   * minimum: 0
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }



  public SessionUserModel twoFactorAuthEnabled(Boolean twoFactorAuthEnabled) {
    this.twoFactorAuthEnabled = twoFactorAuthEnabled;
    return this;
  }

  /**
   * Get twoFactorAuthEnabled
   * @return twoFactorAuthEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTwoFactorAuthEnabled() {
    return twoFactorAuthEnabled;
  }

  public void setTwoFactorAuthEnabled(Boolean twoFactorAuthEnabled) {
    this.twoFactorAuthEnabled = twoFactorAuthEnabled;
  }


  /**
   * Get userId
   * minimum: 0
   * @return userId
   */
  @javax.annotation.Nonnull
  public Integer getUserId() {
    return userId;
  }



  public SessionUserModel vsoUsername(String vsoUsername) {
    this.vsoUsername = vsoUsername;
    return this;
  }

  /**
   * Get vsoUsername
   * @return vsoUsername
   */
  @javax.annotation.Nullable
  public String getVsoUsername() {
    return vsoUsername;
  }

  public void setVsoUsername(String vsoUsername) {
    this.vsoUsername = vsoUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionUserModel sessionUserModel = (SessionUserModel) o;
    return Objects.equals(this.created, sessionUserModel.created) &&
        Objects.equals(this.updated, sessionUserModel.updated) &&
        Objects.equals(this.bitBucketUsername, sessionUserModel.bitBucketUsername) &&
        Objects.equals(this.email, sessionUserModel.email) &&
        Objects.equals(this.fullName, sessionUserModel.fullName) &&
        Objects.equals(this.gitHubUsername, sessionUserModel.gitHubUsername) &&
        Objects.equals(this.gitLabUserId, sessionUserModel.gitLabUserId) &&
        Objects.equals(this.gravatarHash, sessionUserModel.gravatarHash) &&
        Objects.equals(this.pageSize, sessionUserModel.pageSize) &&
        Objects.equals(this.twoFactorAuthEnabled, sessionUserModel.twoFactorAuthEnabled) &&
        Objects.equals(this.userId, sessionUserModel.userId) &&
        Objects.equals(this.vsoUsername, sessionUserModel.vsoUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, updated, bitBucketUsername, email, fullName, gitHubUsername, gitLabUserId, gravatarHash, pageSize, twoFactorAuthEnabled, userId, vsoUsername);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionUserModel {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    bitBucketUsername: ").append(toIndentedString(bitBucketUsername)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitHubUsername: ").append(toIndentedString(gitHubUsername)).append("\n");
    sb.append("    gitLabUserId: ").append(toIndentedString(gitLabUserId)).append("\n");
    sb.append("    gravatarHash: ").append(toIndentedString(gravatarHash)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    twoFactorAuthEnabled: ").append(toIndentedString(twoFactorAuthEnabled)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    vsoUsername: ").append(toIndentedString(vsoUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("bitBucketUsername");
    openapiFields.add("email");
    openapiFields.add("fullName");
    openapiFields.add("gitHubUsername");
    openapiFields.add("gitLabUserId");
    openapiFields.add("gravatarHash");
    openapiFields.add("pageSize");
    openapiFields.add("twoFactorAuthEnabled");
    openapiFields.add("userId");
    openapiFields.add("vsoUsername");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionUserModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionUserModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionUserModel is not found in the empty JSON string", SessionUserModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionUserModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionUserModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SessionUserModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bitBucketUsername") != null && !jsonObj.get("bitBucketUsername").isJsonNull()) && !jsonObj.get("bitBucketUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitBucketUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitBucketUsername").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("gitHubUsername") != null && !jsonObj.get("gitHubUsername").isJsonNull()) && !jsonObj.get("gitHubUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitHubUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitHubUsername").toString()));
      }
      if ((jsonObj.get("gitLabUserId") != null && !jsonObj.get("gitLabUserId").isJsonNull()) && !jsonObj.get("gitLabUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitLabUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitLabUserId").toString()));
      }
      if ((jsonObj.get("gravatarHash") != null && !jsonObj.get("gravatarHash").isJsonNull()) && !jsonObj.get("gravatarHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gravatarHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gravatarHash").toString()));
      }
      if ((jsonObj.get("vsoUsername") != null && !jsonObj.get("vsoUsername").isJsonNull()) && !jsonObj.get("vsoUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vsoUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vsoUsername").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionUserModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionUserModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionUserModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionUserModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionUserModel>() {
           @Override
           public void write(JsonWriter out, SessionUserModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionUserModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionUserModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionUserModel
   * @throws IOException if the JSON string is invalid with respect to SessionUserModel
   */
  public static SessionUserModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionUserModel.class);
  }

  /**
   * Convert an instance of SessionUserModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

