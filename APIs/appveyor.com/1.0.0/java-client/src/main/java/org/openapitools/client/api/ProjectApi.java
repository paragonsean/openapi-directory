/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EncryptRequest;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectAddition;
import org.openapitools.client.model.ProjectBuildNumberUpdate;
import org.openapitools.client.model.ProjectBuildResults;
import org.openapitools.client.model.ProjectDeploymentsResults;
import org.openapitools.client.model.ProjectHistory;
import org.openapitools.client.model.ProjectSettingsResults;
import org.openapitools.client.model.ProjectWithConfiguration;
import org.openapitools.client.model.StoredNameValue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addProject
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#add-project">Add project Documentation</a>
     */
    public okhttp3.Call addProjectCall(ProjectAddition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectValidateBeforeCall(ProjectAddition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addProject(Async)");
        }

        return addProjectCall(body, _callback);

    }

    /**
     * Add project
     * 
     * @param body  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#add-project">Add project Documentation</a>
     */
    public Project addProject(ProjectAddition body) throws ApiException {
        ApiResponse<Project> localVarResp = addProjectWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Add project
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#add-project">Add project Documentation</a>
     */
    public ApiResponse<Project> addProjectWithHttpInfo(ProjectAddition body) throws ApiException {
        okhttp3.Call localVarCall = addProjectValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add project (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#add-project">Add project Documentation</a>
     */
    public okhttp3.Call addProjectAsync(ProjectAddition body, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project">Delete project Documentation</a>
     */
    public okhttp3.Call deleteProjectCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling deleteProject(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteProject(Async)");
        }

        return deleteProjectCall(accountName, projectSlug, _callback);

    }

    /**
     * Delete project
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project">Delete project Documentation</a>
     */
    public void deleteProject(String accountName, String projectSlug) throws ApiException {
        deleteProjectWithHttpInfo(accountName, projectSlug);
    }

    /**
     * Delete project
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project">Delete project Documentation</a>
     */
    public ApiResponse<Void> deleteProjectWithHttpInfo(String accountName, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(accountName, projectSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete project (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project">Delete project Documentation</a>
     */
    public okhttp3.Call deleteProjectAsync(String accountName, String projectSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(accountName, projectSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectBuildCache
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project-build-cache">Delete project build cache Documentation</a>
     */
    public okhttp3.Call deleteProjectBuildCacheCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/buildcache"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectBuildCacheValidateBeforeCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling deleteProjectBuildCache(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling deleteProjectBuildCache(Async)");
        }

        return deleteProjectBuildCacheCall(accountName, projectSlug, _callback);

    }

    /**
     * Delete project build cache
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project-build-cache">Delete project build cache Documentation</a>
     */
    public void deleteProjectBuildCache(String accountName, String projectSlug) throws ApiException {
        deleteProjectBuildCacheWithHttpInfo(accountName, projectSlug);
    }

    /**
     * Delete project build cache
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project-build-cache">Delete project build cache Documentation</a>
     */
    public ApiResponse<Void> deleteProjectBuildCacheWithHttpInfo(String accountName, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectBuildCacheValidateBeforeCall(accountName, projectSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete project build cache (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#delete-project-build-cache">Delete project build cache Documentation</a>
     */
    public okhttp3.Call deleteProjectBuildCacheAsync(String accountName, String projectSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectBuildCacheValidateBeforeCall(accountName, projectSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptValue
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptValueCall(EncryptRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/account/encrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptValueValidateBeforeCall(EncryptRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling encryptValue(Async)");
        }

        return encryptValueCall(body, _callback);

    }

    /**
     * Encrypt a value for use in StoredValue.
     * 
     * @param body  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String encryptValue(EncryptRequest body) throws ApiException {
        ApiResponse<String> localVarResp = encryptValueWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Encrypt a value for use in StoredValue.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> encryptValueWithHttpInfo(EncryptRequest body) throws ApiException {
        okhttp3.Call localVarCall = encryptValueValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Encrypt a value for use in StoredValue. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptValueAsync(EncryptRequest body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptValueValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectArtifact
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @param branch Repository Branch (optional)
     * @param tag A git (or other VCS) tag (optional)
     * @param job Name of the build job. (optional)
     * @param all Include not only &#x60;successful&#x60;, but also jobs with &#x60;failed&#x60;, and &#x60;cancelled&#x60; status. (optional, default to false)
     * @param pr Include PR builds in the search results? &#x60;true&#x60; - take artifact from PR builds only; &#x60;false&#x60; - do not look for artifact in PR builds; default/unspecified - look for artifact in both PR an non-PR builds.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/packaging-artifacts/#permalink-to-the-last-successful-build-artifact">Get last successful build artifact Documentation</a>
     */
    public okhttp3.Call getProjectArtifactCall(String accountName, String projectSlug, String artifactFileName, String branch, String tag, String job, Boolean all, Boolean pr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/artifacts/{artifactFileName}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "artifactFileName" + "}", localVarApiClient.escapeString(artifactFileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (pr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pr", pr));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectArtifactValidateBeforeCall(String accountName, String projectSlug, String artifactFileName, String branch, String tag, String job, Boolean all, Boolean pr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectArtifact(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectArtifact(Async)");
        }

        // verify the required parameter 'artifactFileName' is set
        if (artifactFileName == null) {
            throw new ApiException("Missing the required parameter 'artifactFileName' when calling getProjectArtifact(Async)");
        }

        return getProjectArtifactCall(accountName, projectSlug, artifactFileName, branch, tag, job, all, pr, _callback);

    }

    /**
     * Get last successful build artifact
     * The &#x60;job&#x60; parameter is mandatory if the build contains multiple jobs.
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @param branch Repository Branch (optional)
     * @param tag A git (or other VCS) tag (optional)
     * @param job Name of the build job. (optional)
     * @param all Include not only &#x60;successful&#x60;, but also jobs with &#x60;failed&#x60;, and &#x60;cancelled&#x60; status. (optional, default to false)
     * @param pr Include PR builds in the search results? &#x60;true&#x60; - take artifact from PR builds only; &#x60;false&#x60; - do not look for artifact in PR builds; default/unspecified - look for artifact in both PR an non-PR builds.  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/packaging-artifacts/#permalink-to-the-last-successful-build-artifact">Get last successful build artifact Documentation</a>
     */
    public File getProjectArtifact(String accountName, String projectSlug, String artifactFileName, String branch, String tag, String job, Boolean all, Boolean pr) throws ApiException {
        ApiResponse<File> localVarResp = getProjectArtifactWithHttpInfo(accountName, projectSlug, artifactFileName, branch, tag, job, all, pr);
        return localVarResp.getData();
    }

    /**
     * Get last successful build artifact
     * The &#x60;job&#x60; parameter is mandatory if the build contains multiple jobs.
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @param branch Repository Branch (optional)
     * @param tag A git (or other VCS) tag (optional)
     * @param job Name of the build job. (optional)
     * @param all Include not only &#x60;successful&#x60;, but also jobs with &#x60;failed&#x60;, and &#x60;cancelled&#x60; status. (optional, default to false)
     * @param pr Include PR builds in the search results? &#x60;true&#x60; - take artifact from PR builds only; &#x60;false&#x60; - do not look for artifact in PR builds; default/unspecified - look for artifact in both PR an non-PR builds.  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/packaging-artifacts/#permalink-to-the-last-successful-build-artifact">Get last successful build artifact Documentation</a>
     */
    public ApiResponse<File> getProjectArtifactWithHttpInfo(String accountName, String projectSlug, String artifactFileName, String branch, String tag, String job, Boolean all, Boolean pr) throws ApiException {
        okhttp3.Call localVarCall = getProjectArtifactValidateBeforeCall(accountName, projectSlug, artifactFileName, branch, tag, job, all, pr, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get last successful build artifact (asynchronously)
     * The &#x60;job&#x60; parameter is mandatory if the build contains multiple jobs.
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param artifactFileName File name (or path) of a build artifact file. Corresponds to the &#x60;fileName&#x60; property of &#x60;ArtifactModel&#x60;. URL-encoding of slashes in parameter values is optional. (required)
     * @param branch Repository Branch (optional)
     * @param tag A git (or other VCS) tag (optional)
     * @param job Name of the build job. (optional)
     * @param all Include not only &#x60;successful&#x60;, but also jobs with &#x60;failed&#x60;, and &#x60;cancelled&#x60; status. (optional, default to false)
     * @param pr Include PR builds in the search results? &#x60;true&#x60; - take artifact from PR builds only; &#x60;false&#x60; - do not look for artifact in PR builds; default/unspecified - look for artifact in both PR an non-PR builds.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/packaging-artifacts/#permalink-to-the-last-successful-build-artifact">Get last successful build artifact Documentation</a>
     */
    public okhttp3.Call getProjectArtifactAsync(String accountName, String projectSlug, String artifactFileName, String branch, String tag, String job, Boolean all, Boolean pr, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectArtifactValidateBeforeCall(accountName, projectSlug, artifactFileName, branch, tag, job, all, pr, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectBranchStatusBadge
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param buildBranch Build Branch (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project branch status badge image Documentation</a>
     */
    public okhttp3.Call getProjectBranchStatusBadgeCall(String statusBadgeId, String buildBranch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/status/{statusBadgeId}/branch/{buildBranch}"
            .replace("{" + "statusBadgeId" + "}", localVarApiClient.escapeString(statusBadgeId.toString()))
            .replace("{" + "buildBranch" + "}", localVarApiClient.escapeString(buildBranch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (svg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("svg", svg));
        }

        if (retina != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retina", retina));
        }

        if (passingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passingText", passingText));
        }

        if (failingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failingText", failingText));
        }

        if (pendingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pendingText", pendingText));
        }

        final String[] localVarAccepts = {
            "image/svg+xml",
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectBranchStatusBadgeValidateBeforeCall(String statusBadgeId, String buildBranch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusBadgeId' is set
        if (statusBadgeId == null) {
            throw new ApiException("Missing the required parameter 'statusBadgeId' when calling getProjectBranchStatusBadge(Async)");
        }

        // verify the required parameter 'buildBranch' is set
        if (buildBranch == null) {
            throw new ApiException("Missing the required parameter 'buildBranch' when calling getProjectBranchStatusBadge(Async)");
        }

        return getProjectBranchStatusBadgeCall(statusBadgeId, buildBranch, svg, retina, passingText, failingText, pendingText, _callback);

    }

    /**
     * Get project branch status badge image
     * 
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param buildBranch Build Branch (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project branch status badge image Documentation</a>
     */
    public File getProjectBranchStatusBadge(String statusBadgeId, String buildBranch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText) throws ApiException {
        ApiResponse<File> localVarResp = getProjectBranchStatusBadgeWithHttpInfo(statusBadgeId, buildBranch, svg, retina, passingText, failingText, pendingText);
        return localVarResp.getData();
    }

    /**
     * Get project branch status badge image
     * 
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param buildBranch Build Branch (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project branch status badge image Documentation</a>
     */
    public ApiResponse<File> getProjectBranchStatusBadgeWithHttpInfo(String statusBadgeId, String buildBranch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText) throws ApiException {
        okhttp3.Call localVarCall = getProjectBranchStatusBadgeValidateBeforeCall(statusBadgeId, buildBranch, svg, retina, passingText, failingText, pendingText, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project branch status badge image (asynchronously)
     * 
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param buildBranch Build Branch (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project branch status badge image Documentation</a>
     */
    public okhttp3.Call getProjectBranchStatusBadgeAsync(String statusBadgeId, String buildBranch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectBranchStatusBadgeValidateBeforeCall(statusBadgeId, buildBranch, svg, retina, passingText, failingText, pendingText, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectBuildByVersion
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-build-by-version">Get project build by version Documentation</a>
     */
    public okhttp3.Call getProjectBuildByVersionCall(String accountName, String projectSlug, String buildVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/build/{buildVersion}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "buildVersion" + "}", localVarApiClient.escapeString(buildVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectBuildByVersionValidateBeforeCall(String accountName, String projectSlug, String buildVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectBuildByVersion(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectBuildByVersion(Async)");
        }

        // verify the required parameter 'buildVersion' is set
        if (buildVersion == null) {
            throw new ApiException("Missing the required parameter 'buildVersion' when calling getProjectBuildByVersion(Async)");
        }

        return getProjectBuildByVersionCall(accountName, projectSlug, buildVersion, _callback);

    }

    /**
     * Get project build by version
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @return ProjectBuildResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-build-by-version">Get project build by version Documentation</a>
     */
    public ProjectBuildResults getProjectBuildByVersion(String accountName, String projectSlug, String buildVersion) throws ApiException {
        ApiResponse<ProjectBuildResults> localVarResp = getProjectBuildByVersionWithHttpInfo(accountName, projectSlug, buildVersion);
        return localVarResp.getData();
    }

    /**
     * Get project build by version
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @return ApiResponse&lt;ProjectBuildResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-build-by-version">Get project build by version Documentation</a>
     */
    public ApiResponse<ProjectBuildResults> getProjectBuildByVersionWithHttpInfo(String accountName, String projectSlug, String buildVersion) throws ApiException {
        okhttp3.Call localVarCall = getProjectBuildByVersionValidateBeforeCall(accountName, projectSlug, buildVersion, null);
        Type localVarReturnType = new TypeToken<ProjectBuildResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project build by version (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildVersion Build Version (&#x60;version&#x60; property of &#x60;Build&#x60;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-build-by-version">Get project build by version Documentation</a>
     */
    public okhttp3.Call getProjectBuildByVersionAsync(String accountName, String projectSlug, String buildVersion, final ApiCallback<ProjectBuildResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectBuildByVersionValidateBeforeCall(accountName, projectSlug, buildVersion, _callback);
        Type localVarReturnType = new TypeToken<ProjectBuildResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectDeployments
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-deployments">Get project deployments Documentation</a>
     */
    public okhttp3.Call getProjectDeploymentsCall(String accountName, String projectSlug, Integer recordsNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/deployments"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordsNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recordsNumber", recordsNumber));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectDeploymentsValidateBeforeCall(String accountName, String projectSlug, Integer recordsNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectDeployments(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectDeployments(Async)");
        }

        // verify the required parameter 'recordsNumber' is set
        if (recordsNumber == null) {
            throw new ApiException("Missing the required parameter 'recordsNumber' when calling getProjectDeployments(Async)");
        }

        return getProjectDeploymentsCall(accountName, projectSlug, recordsNumber, _callback);

    }

    /**
     * Get project deployments
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @return ProjectDeploymentsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-deployments">Get project deployments Documentation</a>
     */
    public ProjectDeploymentsResults getProjectDeployments(String accountName, String projectSlug, Integer recordsNumber) throws ApiException {
        ApiResponse<ProjectDeploymentsResults> localVarResp = getProjectDeploymentsWithHttpInfo(accountName, projectSlug, recordsNumber);
        return localVarResp.getData();
    }

    /**
     * Get project deployments
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @return ApiResponse&lt;ProjectDeploymentsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-deployments">Get project deployments Documentation</a>
     */
    public ApiResponse<ProjectDeploymentsResults> getProjectDeploymentsWithHttpInfo(String accountName, String projectSlug, Integer recordsNumber) throws ApiException {
        okhttp3.Call localVarCall = getProjectDeploymentsValidateBeforeCall(accountName, projectSlug, recordsNumber, null);
        Type localVarReturnType = new TypeToken<ProjectDeploymentsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project deployments (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-deployments">Get project deployments Documentation</a>
     */
    public okhttp3.Call getProjectDeploymentsAsync(String accountName, String projectSlug, Integer recordsNumber, final ApiCallback<ProjectDeploymentsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectDeploymentsValidateBeforeCall(accountName, projectSlug, recordsNumber, _callback);
        Type localVarReturnType = new TypeToken<ProjectDeploymentsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectEnvironmentVariables
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-environment-variables">Get project environment variables Documentation</a>
     */
    public okhttp3.Call getProjectEnvironmentVariablesCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/settings/environment-variables"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectEnvironmentVariablesValidateBeforeCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectEnvironmentVariables(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectEnvironmentVariables(Async)");
        }

        return getProjectEnvironmentVariablesCall(accountName, projectSlug, _callback);

    }

    /**
     * Get project environment variables
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return List&lt;StoredNameValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-environment-variables">Get project environment variables Documentation</a>
     */
    public List<StoredNameValue> getProjectEnvironmentVariables(String accountName, String projectSlug) throws ApiException {
        ApiResponse<List<StoredNameValue>> localVarResp = getProjectEnvironmentVariablesWithHttpInfo(accountName, projectSlug);
        return localVarResp.getData();
    }

    /**
     * Get project environment variables
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ApiResponse&lt;List&lt;StoredNameValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-environment-variables">Get project environment variables Documentation</a>
     */
    public ApiResponse<List<StoredNameValue>> getProjectEnvironmentVariablesWithHttpInfo(String accountName, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = getProjectEnvironmentVariablesValidateBeforeCall(accountName, projectSlug, null);
        Type localVarReturnType = new TypeToken<List<StoredNameValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project environment variables (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-environment-variables">Get project environment variables Documentation</a>
     */
    public okhttp3.Call getProjectEnvironmentVariablesAsync(String accountName, String projectSlug, final ApiCallback<List<StoredNameValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectEnvironmentVariablesValidateBeforeCall(accountName, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<List<StoredNameValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectHistory
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @param startBuildId Maximum &#x60;buildId&#x60; to include in the results (exclusive). (optional)
     * @param branch Repository Branch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-history">Get project history Documentation</a>
     */
    public okhttp3.Call getProjectHistoryCall(String accountName, String projectSlug, Integer recordsNumber, Integer startBuildId, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/history"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordsNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recordsNumber", recordsNumber));
        }

        if (startBuildId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startBuildId", startBuildId));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectHistoryValidateBeforeCall(String accountName, String projectSlug, Integer recordsNumber, Integer startBuildId, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectHistory(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectHistory(Async)");
        }

        // verify the required parameter 'recordsNumber' is set
        if (recordsNumber == null) {
            throw new ApiException("Missing the required parameter 'recordsNumber' when calling getProjectHistory(Async)");
        }

        return getProjectHistoryCall(accountName, projectSlug, recordsNumber, startBuildId, branch, _callback);

    }

    /**
     * Get project history
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @param startBuildId Maximum &#x60;buildId&#x60; to include in the results (exclusive). (optional)
     * @param branch Repository Branch (optional)
     * @return ProjectHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-history">Get project history Documentation</a>
     */
    public ProjectHistory getProjectHistory(String accountName, String projectSlug, Integer recordsNumber, Integer startBuildId, String branch) throws ApiException {
        ApiResponse<ProjectHistory> localVarResp = getProjectHistoryWithHttpInfo(accountName, projectSlug, recordsNumber, startBuildId, branch);
        return localVarResp.getData();
    }

    /**
     * Get project history
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @param startBuildId Maximum &#x60;buildId&#x60; to include in the results (exclusive). (optional)
     * @param branch Repository Branch (optional)
     * @return ApiResponse&lt;ProjectHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-history">Get project history Documentation</a>
     */
    public ApiResponse<ProjectHistory> getProjectHistoryWithHttpInfo(String accountName, String projectSlug, Integer recordsNumber, Integer startBuildId, String branch) throws ApiException {
        okhttp3.Call localVarCall = getProjectHistoryValidateBeforeCall(accountName, projectSlug, recordsNumber, startBuildId, branch, null);
        Type localVarReturnType = new TypeToken<ProjectHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project history (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber &lt;&#x3D; 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10. (required)
     * @param startBuildId Maximum &#x60;buildId&#x60; to include in the results (exclusive). (optional)
     * @param branch Repository Branch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-history">Get project history Documentation</a>
     */
    public okhttp3.Call getProjectHistoryAsync(String accountName, String projectSlug, Integer recordsNumber, Integer startBuildId, String branch, final ApiCallback<ProjectHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectHistoryValidateBeforeCall(accountName, projectSlug, recordsNumber, startBuildId, branch, _callback);
        Type localVarReturnType = new TypeToken<ProjectHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectLastBuild
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-build">Get project last build Documentation</a>
     */
    public okhttp3.Call getProjectLastBuildCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectLastBuildValidateBeforeCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectLastBuild(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectLastBuild(Async)");
        }

        return getProjectLastBuildCall(accountName, projectSlug, _callback);

    }

    /**
     * Get project last build
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ProjectBuildResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-build">Get project last build Documentation</a>
     */
    public ProjectBuildResults getProjectLastBuild(String accountName, String projectSlug) throws ApiException {
        ApiResponse<ProjectBuildResults> localVarResp = getProjectLastBuildWithHttpInfo(accountName, projectSlug);
        return localVarResp.getData();
    }

    /**
     * Get project last build
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ApiResponse&lt;ProjectBuildResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-build">Get project last build Documentation</a>
     */
    public ApiResponse<ProjectBuildResults> getProjectLastBuildWithHttpInfo(String accountName, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = getProjectLastBuildValidateBeforeCall(accountName, projectSlug, null);
        Type localVarReturnType = new TypeToken<ProjectBuildResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project last build (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-build">Get project last build Documentation</a>
     */
    public okhttp3.Call getProjectLastBuildAsync(String accountName, String projectSlug, final ApiCallback<ProjectBuildResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectLastBuildValidateBeforeCall(accountName, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<ProjectBuildResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectLastBuildBranch
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildBranch Build Branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-branch-build">Get project last branch build Documentation</a>
     */
    public okhttp3.Call getProjectLastBuildBranchCall(String accountName, String projectSlug, String buildBranch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/branch/{buildBranch}"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "buildBranch" + "}", localVarApiClient.escapeString(buildBranch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectLastBuildBranchValidateBeforeCall(String accountName, String projectSlug, String buildBranch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectLastBuildBranch(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectLastBuildBranch(Async)");
        }

        // verify the required parameter 'buildBranch' is set
        if (buildBranch == null) {
            throw new ApiException("Missing the required parameter 'buildBranch' when calling getProjectLastBuildBranch(Async)");
        }

        return getProjectLastBuildBranchCall(accountName, projectSlug, buildBranch, _callback);

    }

    /**
     * Get project last branch build
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildBranch Build Branch (required)
     * @return ProjectBuildResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-branch-build">Get project last branch build Documentation</a>
     */
    public ProjectBuildResults getProjectLastBuildBranch(String accountName, String projectSlug, String buildBranch) throws ApiException {
        ApiResponse<ProjectBuildResults> localVarResp = getProjectLastBuildBranchWithHttpInfo(accountName, projectSlug, buildBranch);
        return localVarResp.getData();
    }

    /**
     * Get project last branch build
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildBranch Build Branch (required)
     * @return ApiResponse&lt;ProjectBuildResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-branch-build">Get project last branch build Documentation</a>
     */
    public ApiResponse<ProjectBuildResults> getProjectLastBuildBranchWithHttpInfo(String accountName, String projectSlug, String buildBranch) throws ApiException {
        okhttp3.Call localVarCall = getProjectLastBuildBranchValidateBeforeCall(accountName, projectSlug, buildBranch, null);
        Type localVarReturnType = new TypeToken<ProjectBuildResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project last branch build (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param buildBranch Build Branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-branch-build">Get project last branch build Documentation</a>
     */
    public okhttp3.Call getProjectLastBuildBranchAsync(String accountName, String projectSlug, String buildBranch, final ApiCallback<ProjectBuildResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectLastBuildBranchValidateBeforeCall(accountName, projectSlug, buildBranch, _callback);
        Type localVarReturnType = new TypeToken<ProjectBuildResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectSettings
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings">Get project settings Documentation</a>
     */
    public okhttp3.Call getProjectSettingsCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/settings"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSettingsValidateBeforeCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectSettings(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectSettings(Async)");
        }

        return getProjectSettingsCall(accountName, projectSlug, _callback);

    }

    /**
     * Get project settings
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ProjectSettingsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings">Get project settings Documentation</a>
     */
    public ProjectSettingsResults getProjectSettings(String accountName, String projectSlug) throws ApiException {
        ApiResponse<ProjectSettingsResults> localVarResp = getProjectSettingsWithHttpInfo(accountName, projectSlug);
        return localVarResp.getData();
    }

    /**
     * Get project settings
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ApiResponse&lt;ProjectSettingsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings">Get project settings Documentation</a>
     */
    public ApiResponse<ProjectSettingsResults> getProjectSettingsWithHttpInfo(String accountName, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = getProjectSettingsValidateBeforeCall(accountName, projectSlug, null);
        Type localVarReturnType = new TypeToken<ProjectSettingsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project settings (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings">Get project settings Documentation</a>
     */
    public okhttp3.Call getProjectSettingsAsync(String accountName, String projectSlug, final ApiCallback<ProjectSettingsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSettingsValidateBeforeCall(accountName, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<ProjectSettingsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectSettingsYaml
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success  The schema type of this response could be specified as &#x60;file&#x60; to denote opaque binary data.  The generated Java code for &#x60;file&#x60; saves the response as a temporary file, making it a little more difficult to use and less efficient for common cases.  If &#x60;string&#x60; causes problems for other generators, can switch to &#x60;file&#x60; type.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings-in-yaml">Get project settings in YAML Documentation</a>
     */
    public okhttp3.Call getProjectSettingsYamlCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/settings/yaml"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSettingsYamlValidateBeforeCall(String accountName, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProjectSettingsYaml(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectSettingsYaml(Async)");
        }

        return getProjectSettingsYamlCall(accountName, projectSlug, _callback);

    }

    /**
     * Get project settings in YAML
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success  The schema type of this response could be specified as &#x60;file&#x60; to denote opaque binary data.  The generated Java code for &#x60;file&#x60; saves the response as a temporary file, making it a little more difficult to use and less efficient for common cases.  If &#x60;string&#x60; causes problems for other generators, can switch to &#x60;file&#x60; type.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings-in-yaml">Get project settings in YAML Documentation</a>
     */
    public String getProjectSettingsYaml(String accountName, String projectSlug) throws ApiException {
        ApiResponse<String> localVarResp = getProjectSettingsYamlWithHttpInfo(accountName, projectSlug);
        return localVarResp.getData();
    }

    /**
     * Get project settings in YAML
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success  The schema type of this response could be specified as &#x60;file&#x60; to denote opaque binary data.  The generated Java code for &#x60;file&#x60; saves the response as a temporary file, making it a little more difficult to use and less efficient for common cases.  If &#x60;string&#x60; causes problems for other generators, can switch to &#x60;file&#x60; type.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings-in-yaml">Get project settings in YAML Documentation</a>
     */
    public ApiResponse<String> getProjectSettingsYamlWithHttpInfo(String accountName, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = getProjectSettingsYamlValidateBeforeCall(accountName, projectSlug, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project settings in YAML (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success  The schema type of this response could be specified as &#x60;file&#x60; to denote opaque binary data.  The generated Java code for &#x60;file&#x60; saves the response as a temporary file, making it a little more difficult to use and less efficient for common cases.  If &#x60;string&#x60; causes problems for other generators, can switch to &#x60;file&#x60; type.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-settings-in-yaml">Get project settings in YAML Documentation</a>
     */
    public okhttp3.Call getProjectSettingsYamlAsync(String accountName, String projectSlug, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSettingsYamlValidateBeforeCall(accountName, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectStatusBadge
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project status badge image Documentation</a>
     */
    public okhttp3.Call getProjectStatusBadgeCall(String statusBadgeId, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/status/{statusBadgeId}"
            .replace("{" + "statusBadgeId" + "}", localVarApiClient.escapeString(statusBadgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (svg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("svg", svg));
        }

        if (retina != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retina", retina));
        }

        if (passingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passingText", passingText));
        }

        if (failingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failingText", failingText));
        }

        if (pendingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pendingText", pendingText));
        }

        final String[] localVarAccepts = {
            "image/svg+xml",
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectStatusBadgeValidateBeforeCall(String statusBadgeId, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusBadgeId' is set
        if (statusBadgeId == null) {
            throw new ApiException("Missing the required parameter 'statusBadgeId' when calling getProjectStatusBadge(Async)");
        }

        return getProjectStatusBadgeCall(statusBadgeId, svg, retina, passingText, failingText, pendingText, _callback);

    }

    /**
     * Get project status badge image
     * 
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project status badge image Documentation</a>
     */
    public File getProjectStatusBadge(String statusBadgeId, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText) throws ApiException {
        ApiResponse<File> localVarResp = getProjectStatusBadgeWithHttpInfo(statusBadgeId, svg, retina, passingText, failingText, pendingText);
        return localVarResp.getData();
    }

    /**
     * Get project status badge image
     * 
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project status badge image Documentation</a>
     */
    public ApiResponse<File> getProjectStatusBadgeWithHttpInfo(String statusBadgeId, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText) throws ApiException {
        okhttp3.Call localVarCall = getProjectStatusBadgeValidateBeforeCall(statusBadgeId, svg, retina, passingText, failingText, pendingText, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project status badge image (asynchronously)
     * 
     * @param statusBadgeId ID of the status badge (&#x60;statusBadgeId&#x60; from &#x60;ProjectWithConfiguration&#x60;). (required)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get project status badge image Documentation</a>
     */
    public okhttp3.Call getProjectStatusBadgeAsync(String statusBadgeId, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectStatusBadgeValidateBeforeCall(statusBadgeId, svg, retina, passingText, failingText, pendingText, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-projects">Get projects Documentation</a>
     */
    public okhttp3.Call getProjectsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProjectsCall(_callback);

    }

    /**
     * Get projects
     * 
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-projects">Get projects Documentation</a>
     */
    public List<Project> getProjects() throws ApiException {
        ApiResponse<List<Project>> localVarResp = getProjectsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get projects
     * 
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-projects">Get projects Documentation</a>
     */
    public ApiResponse<List<Project>> getProjectsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projects (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#get-projects">Get projects Documentation</a>
     */
    public okhttp3.Call getProjectsAsync(final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicProjectStatusBadge
     * @param badgeRepoProvider Repository provider supported for badges (required)
     * @param repoAccountName Account name with repository provider (required)
     * @param repoSlug Slug (URL component) of repository. (required)
     * @param branch Repository Branch (optional)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get status badge image for a project with a public repository Documentation</a>
     */
    public okhttp3.Call getPublicProjectStatusBadgeCall(String badgeRepoProvider, String repoAccountName, String repoSlug, String branch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/status/{badgeRepoProvider}/{repoAccountName}/{repoSlug}"
            .replace("{" + "badgeRepoProvider" + "}", localVarApiClient.escapeString(badgeRepoProvider.toString()))
            .replace("{" + "repoAccountName" + "}", localVarApiClient.escapeString(repoAccountName.toString()))
            .replace("{" + "repoSlug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (svg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("svg", svg));
        }

        if (retina != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retina", retina));
        }

        if (passingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passingText", passingText));
        }

        if (failingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failingText", failingText));
        }

        if (pendingText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pendingText", pendingText));
        }

        final String[] localVarAccepts = {
            "image/svg+xml",
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicProjectStatusBadgeValidateBeforeCall(String badgeRepoProvider, String repoAccountName, String repoSlug, String branch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'badgeRepoProvider' is set
        if (badgeRepoProvider == null) {
            throw new ApiException("Missing the required parameter 'badgeRepoProvider' when calling getPublicProjectStatusBadge(Async)");
        }

        // verify the required parameter 'repoAccountName' is set
        if (repoAccountName == null) {
            throw new ApiException("Missing the required parameter 'repoAccountName' when calling getPublicProjectStatusBadge(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPublicProjectStatusBadge(Async)");
        }

        return getPublicProjectStatusBadgeCall(badgeRepoProvider, repoAccountName, repoSlug, branch, svg, retina, passingText, failingText, pendingText, _callback);

    }

    /**
     * Get status badge image for a project with a public repository
     * 
     * @param badgeRepoProvider Repository provider supported for badges (required)
     * @param repoAccountName Account name with repository provider (required)
     * @param repoSlug Slug (URL component) of repository. (required)
     * @param branch Repository Branch (optional)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get status badge image for a project with a public repository Documentation</a>
     */
    public File getPublicProjectStatusBadge(String badgeRepoProvider, String repoAccountName, String repoSlug, String branch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText) throws ApiException {
        ApiResponse<File> localVarResp = getPublicProjectStatusBadgeWithHttpInfo(badgeRepoProvider, repoAccountName, repoSlug, branch, svg, retina, passingText, failingText, pendingText);
        return localVarResp.getData();
    }

    /**
     * Get status badge image for a project with a public repository
     * 
     * @param badgeRepoProvider Repository provider supported for badges (required)
     * @param repoAccountName Account name with repository provider (required)
     * @param repoSlug Slug (URL component) of repository. (required)
     * @param branch Repository Branch (optional)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get status badge image for a project with a public repository Documentation</a>
     */
    public ApiResponse<File> getPublicProjectStatusBadgeWithHttpInfo(String badgeRepoProvider, String repoAccountName, String repoSlug, String branch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText) throws ApiException {
        okhttp3.Call localVarCall = getPublicProjectStatusBadgeValidateBeforeCall(badgeRepoProvider, repoAccountName, repoSlug, branch, svg, retina, passingText, failingText, pendingText, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status badge image for a project with a public repository (asynchronously)
     * 
     * @param badgeRepoProvider Repository provider supported for badges (required)
     * @param repoAccountName Account name with repository provider (required)
     * @param repoSlug Slug (URL component) of repository. (required)
     * @param branch Repository Branch (optional)
     * @param svg Return an SVG image instead of PNG?  Exclusive with &#x60;retina&#x60;. (optional, default to false)
     * @param retina Return a larger image suitable for retina displays?  Exclusive with &#x60;svg&#x60;. (optional, default to false)
     * @param passingText Text to show in badge when build is passing. (optional)
     * @param failingText Text to show in badge when build is failing. (optional)
     * @param pendingText Text to show in badge when build is pending. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/status-badges/">Get status badge image for a project with a public repository Documentation</a>
     */
    public okhttp3.Call getPublicProjectStatusBadgeAsync(String badgeRepoProvider, String repoAccountName, String repoSlug, String branch, Boolean svg, Boolean retina, String passingText, String failingText, String pendingText, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicProjectStatusBadgeValidateBeforeCall(badgeRepoProvider, repoAccountName, repoSlug, branch, svg, retina, passingText, failingText, pendingText, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProject
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project">Update project Documentation</a>
     */
    public okhttp3.Call updateProjectCall(ProjectWithConfiguration body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectValidateBeforeCall(ProjectWithConfiguration body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProject(Async)");
        }

        return updateProjectCall(body, _callback);

    }

    /**
     * Update project
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project">Update project Documentation</a>
     */
    public void updateProject(ProjectWithConfiguration body) throws ApiException {
        updateProjectWithHttpInfo(body);
    }

    /**
     * Update project
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project">Update project Documentation</a>
     */
    public ApiResponse<Void> updateProjectWithHttpInfo(ProjectWithConfiguration body) throws ApiException {
        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update project (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project">Update project Documentation</a>
     */
    public okhttp3.Call updateProjectAsync(ProjectWithConfiguration body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectBuildNumber
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-build-number">Update project build number Documentation</a>
     */
    public okhttp3.Call updateProjectBuildNumberCall(String accountName, String projectSlug, ProjectBuildNumberUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/settings/build-number"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectBuildNumberValidateBeforeCall(String accountName, String projectSlug, ProjectBuildNumberUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling updateProjectBuildNumber(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateProjectBuildNumber(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProjectBuildNumber(Async)");
        }

        return updateProjectBuildNumberCall(accountName, projectSlug, body, _callback);

    }

    /**
     * Update project build number
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-build-number">Update project build number Documentation</a>
     */
    public void updateProjectBuildNumber(String accountName, String projectSlug, ProjectBuildNumberUpdate body) throws ApiException {
        updateProjectBuildNumberWithHttpInfo(accountName, projectSlug, body);
    }

    /**
     * Update project build number
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-build-number">Update project build number Documentation</a>
     */
    public ApiResponse<Void> updateProjectBuildNumberWithHttpInfo(String accountName, String projectSlug, ProjectBuildNumberUpdate body) throws ApiException {
        okhttp3.Call localVarCall = updateProjectBuildNumberValidateBeforeCall(accountName, projectSlug, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update project build number (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-build-number">Update project build number Documentation</a>
     */
    public okhttp3.Call updateProjectBuildNumberAsync(String accountName, String projectSlug, ProjectBuildNumberUpdate body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectBuildNumberValidateBeforeCall(accountName, projectSlug, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectEnvironmentVariables
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-environment-variables">Update project environment variables Documentation</a>
     */
    public okhttp3.Call updateProjectEnvironmentVariablesCall(String accountName, String projectSlug, List<StoredNameValue> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/settings/environment-variables"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectEnvironmentVariablesValidateBeforeCall(String accountName, String projectSlug, List<StoredNameValue> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling updateProjectEnvironmentVariables(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateProjectEnvironmentVariables(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProjectEnvironmentVariables(Async)");
        }

        return updateProjectEnvironmentVariablesCall(accountName, projectSlug, body, _callback);

    }

    /**
     * Update project environment variables
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-environment-variables">Update project environment variables Documentation</a>
     */
    public void updateProjectEnvironmentVariables(String accountName, String projectSlug, List<StoredNameValue> body) throws ApiException {
        updateProjectEnvironmentVariablesWithHttpInfo(accountName, projectSlug, body);
    }

    /**
     * Update project environment variables
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-environment-variables">Update project environment variables Documentation</a>
     */
    public ApiResponse<Void> updateProjectEnvironmentVariablesWithHttpInfo(String accountName, String projectSlug, List<StoredNameValue> body) throws ApiException {
        okhttp3.Call localVarCall = updateProjectEnvironmentVariablesValidateBeforeCall(accountName, projectSlug, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update project environment variables (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-environment-variables">Update project environment variables Documentation</a>
     */
    public okhttp3.Call updateProjectEnvironmentVariablesAsync(String accountName, String projectSlug, List<StoredNameValue> body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectEnvironmentVariablesValidateBeforeCall(accountName, projectSlug, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectSettingsYaml
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body The body of requests should contain YAML data.  It is unclear how to specify this since the OpenAPI spec requires &#x60;schema&#x60; without &#x60;type&#x60; for &#x60;in: body&#x60; parameters and does not allow &#x60;type: file&#x60; in &#x60;schema&#x60;.  See https://github.com/OAI/OpenAPI-Specification/issues/326 swagger-codegen (for Java, probably others) allows a binary string body parameter with non-application/json &#x60;consumes&#x60; to be passed through in the request body without conversion to JSON.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-settings-in-yaml">Update project settings in YAML Documentation</a>
     */
    public okhttp3.Call updateProjectSettingsYamlCall(String accountName, String projectSlug, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{accountName}/{projectSlug}/settings/yaml"
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "projectSlug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectSettingsYamlValidateBeforeCall(String accountName, String projectSlug, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling updateProjectSettingsYaml(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling updateProjectSettingsYaml(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateProjectSettingsYaml(Async)");
        }

        return updateProjectSettingsYamlCall(accountName, projectSlug, body, _callback);

    }

    /**
     * Update project settings in YAML
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body The body of requests should contain YAML data.  It is unclear how to specify this since the OpenAPI spec requires &#x60;schema&#x60; without &#x60;type&#x60; for &#x60;in: body&#x60; parameters and does not allow &#x60;type: file&#x60; in &#x60;schema&#x60;.  See https://github.com/OAI/OpenAPI-Specification/issues/326 swagger-codegen (for Java, probably others) allows a binary string body parameter with non-application/json &#x60;consumes&#x60; to be passed through in the request body without conversion to JSON.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-settings-in-yaml">Update project settings in YAML Documentation</a>
     */
    public void updateProjectSettingsYaml(String accountName, String projectSlug, File body) throws ApiException {
        updateProjectSettingsYamlWithHttpInfo(accountName, projectSlug, body);
    }

    /**
     * Update project settings in YAML
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body The body of requests should contain YAML data.  It is unclear how to specify this since the OpenAPI spec requires &#x60;schema&#x60; without &#x60;type&#x60; for &#x60;in: body&#x60; parameters and does not allow &#x60;type: file&#x60; in &#x60;schema&#x60;.  See https://github.com/OAI/OpenAPI-Specification/issues/326 swagger-codegen (for Java, probably others) allows a binary string body parameter with non-application/json &#x60;consumes&#x60; to be passed through in the request body without conversion to JSON.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-settings-in-yaml">Update project settings in YAML Documentation</a>
     */
    public ApiResponse<Void> updateProjectSettingsYamlWithHttpInfo(String accountName, String projectSlug, File body) throws ApiException {
        okhttp3.Call localVarCall = updateProjectSettingsYamlValidateBeforeCall(accountName, projectSlug, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update project settings in YAML (asynchronously)
     * 
     * @param accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the &#x60;accountName&#x60; property of &#x60;UserAccount&#x60;. (required)
     * @param projectSlug Project Slug (required)
     * @param body The body of requests should contain YAML data.  It is unclear how to specify this since the OpenAPI spec requires &#x60;schema&#x60; without &#x60;type&#x60; for &#x60;in: body&#x60; parameters and does not allow &#x60;type: file&#x60; in &#x60;schema&#x60;.  See https://github.com/OAI/OpenAPI-Specification/issues/326 swagger-codegen (for Java, probably others) allows a binary string body parameter with non-application/json &#x60;consumes&#x60; to be passed through in the request body without conversion to JSON.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://www.appveyor.com/docs/api/projects-builds/#update-project-settings-in-yaml">Update project settings in YAML Documentation</a>
     */
    public okhttp3.Call updateProjectSettingsYamlAsync(String accountName, String projectSlug, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectSettingsYamlValidateBeforeCall(accountName, projectSlug, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
