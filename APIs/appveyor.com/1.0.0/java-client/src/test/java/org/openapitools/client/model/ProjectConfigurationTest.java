/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.BuildMode;
import org.openapitools.client.model.BuildWorkerImageInner;
import org.openapitools.client.model.DeployMode;
import org.openapitools.client.model.DeploymentProvider;
import org.openapitools.client.model.HostEntry;
import org.openapitools.client.model.MSBuildVerbosity;
import org.openapitools.client.model.NotificationProviderSettings;
import org.openapitools.client.model.OSServicesToStartDuringTheBuildProcessInner;
import org.openapitools.client.model.ProjectBranchesMode;
import org.openapitools.client.model.ProjectConfigurationPlatformInner;
import org.openapitools.client.model.ProjectConfigurationTestCategoriesMatrixInner;
import org.openapitools.client.model.Script;
import org.openapitools.client.model.StoredNameValue;
import org.openapitools.client.model.StoredNameValueMatrix;
import org.openapitools.client.model.StringValueObject;
import org.openapitools.client.model.TestMode;
import org.openapitools.client.model.UnknownType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ProjectConfiguration
 */
public class ProjectConfigurationTest {
    private final ProjectConfiguration model = new ProjectConfiguration();

    /**
     * Model tests for ProjectConfiguration
     */
    @Test
    public void testProjectConfiguration() {
        // TODO: test ProjectConfiguration
    }

    /**
     * Test the property 'afterBuildScripts'
     */
    @Test
    public void afterBuildScriptsTest() {
        // TODO: test afterBuildScripts
    }

    /**
     * Test the property 'afterDeployScripts'
     */
    @Test
    public void afterDeployScriptsTest() {
        // TODO: test afterDeployScripts
    }

    /**
     * Test the property 'afterTestScripts'
     */
    @Test
    public void afterTestScriptsTest() {
        // TODO: test afterTestScripts
    }

    /**
     * Test the property 'artifacts'
     */
    @Test
    public void artifactsTest() {
        // TODO: test artifacts
    }

    /**
     * Test the property 'assemblyFileVersionFormat'
     */
    @Test
    public void assemblyFileVersionFormatTest() {
        // TODO: test assemblyFileVersionFormat
    }

    /**
     * Test the property 'assemblyInfoFile'
     */
    @Test
    public void assemblyInfoFileTest() {
        // TODO: test assemblyInfoFile
    }

    /**
     * Test the property 'assemblyInformationalVersionFormat'
     */
    @Test
    public void assemblyInformationalVersionFormatTest() {
        // TODO: test assemblyInformationalVersionFormat
    }

    /**
     * Test the property 'assemblyVersionFormat'
     */
    @Test
    public void assemblyVersionFormatTest() {
        // TODO: test assemblyVersionFormat
    }

    /**
     * Test the property 'beforeBuildScripts'
     */
    @Test
    public void beforeBuildScriptsTest() {
        // TODO: test beforeBuildScripts
    }

    /**
     * Test the property 'beforeDeployScripts'
     */
    @Test
    public void beforeDeployScriptsTest() {
        // TODO: test beforeDeployScripts
    }

    /**
     * Test the property 'beforePackageScripts'
     */
    @Test
    public void beforePackageScriptsTest() {
        // TODO: test beforePackageScripts
    }

    /**
     * Test the property 'beforeTestScripts'
     */
    @Test
    public void beforeTestScriptsTest() {
        // TODO: test beforeTestScripts
    }

    /**
     * Test the property 'branchesMode'
     */
    @Test
    public void branchesModeTest() {
        // TODO: test branchesMode
    }

    /**
     * Test the property 'buildCloud'
     */
    @Test
    public void buildCloudTest() {
        // TODO: test buildCloud
    }

    /**
     * Test the property 'buildMode'
     */
    @Test
    public void buildModeTest() {
        // TODO: test buildMode
    }

    /**
     * Test the property 'buildScripts'
     */
    @Test
    public void buildScriptsTest() {
        // TODO: test buildScripts
    }

    /**
     * Test the property 'cacheEntries'
     */
    @Test
    public void cacheEntriesTest() {
        // TODO: test cacheEntries
    }

    /**
     * Test the property 'cloneDepth'
     */
    @Test
    public void cloneDepthTest() {
        // TODO: test cloneDepth
    }

    /**
     * Test the property 'cloneFolder'
     */
    @Test
    public void cloneFolderTest() {
        // TODO: test cloneFolder
    }

    /**
     * Test the property 'cloneScripts'
     */
    @Test
    public void cloneScriptsTest() {
        // TODO: test cloneScripts
    }

    /**
     * Test the property '_configuration'
     */
    @Test
    public void _configurationTest() {
        // TODO: test _configuration
    }

    /**
     * Test the property 'configureNuGetAccountSource'
     */
    @Test
    public void configureNuGetAccountSourceTest() {
        // TODO: test configureNuGetAccountSource
    }

    /**
     * Test the property 'configureNuGetProjectSource'
     */
    @Test
    public void configureNuGetProjectSourceTest() {
        // TODO: test configureNuGetProjectSource
    }

    /**
     * Test the property 'deployMode'
     */
    @Test
    public void deployModeTest() {
        // TODO: test deployMode
    }

    /**
     * Test the property 'deployScripts'
     */
    @Test
    public void deployScriptsTest() {
        // TODO: test deployScripts
    }

    /**
     * Test the property 'deployments'
     */
    @Test
    public void deploymentsTest() {
        // TODO: test deployments
    }

    /**
     * Test the property 'disableNuGetPublishForOctopusPackages'
     */
    @Test
    public void disableNuGetPublishForOctopusPackagesTest() {
        // TODO: test disableNuGetPublishForOctopusPackages
    }

    /**
     * Test the property 'disableNuGetPublishOnPullRequests'
     */
    @Test
    public void disableNuGetPublishOnPullRequestsTest() {
        // TODO: test disableNuGetPublishOnPullRequests
    }

    /**
     * Test the property 'doNotIncrementBuildNumberOnPullRequests'
     */
    @Test
    public void doNotIncrementBuildNumberOnPullRequestsTest() {
        // TODO: test doNotIncrementBuildNumberOnPullRequests
    }

    /**
     * Test the property 'dotnetCsprojAssemblyVersionFormat'
     */
    @Test
    public void dotnetCsprojAssemblyVersionFormatTest() {
        // TODO: test dotnetCsprojAssemblyVersionFormat
    }

    /**
     * Test the property 'dotnetCsprojFile'
     */
    @Test
    public void dotnetCsprojFileTest() {
        // TODO: test dotnetCsprojFile
    }

    /**
     * Test the property 'dotnetCsprojFileVersionFormat'
     */
    @Test
    public void dotnetCsprojFileVersionFormatTest() {
        // TODO: test dotnetCsprojFileVersionFormat
    }

    /**
     * Test the property 'dotnetCsprojInformationalVersionFormat'
     */
    @Test
    public void dotnetCsprojInformationalVersionFormatTest() {
        // TODO: test dotnetCsprojInformationalVersionFormat
    }

    /**
     * Test the property 'dotnetCsprojPackageVersionFormat'
     */
    @Test
    public void dotnetCsprojPackageVersionFormatTest() {
        // TODO: test dotnetCsprojPackageVersionFormat
    }

    /**
     * Test the property 'dotnetCsprojVersionFormat'
     */
    @Test
    public void dotnetCsprojVersionFormatTest() {
        // TODO: test dotnetCsprojVersionFormat
    }

    /**
     * Test the property 'environmentVariables'
     */
    @Test
    public void environmentVariablesTest() {
        // TODO: test environmentVariables
    }

    /**
     * Test the property 'environmentVariablesMatrix'
     */
    @Test
    public void environmentVariablesMatrixTest() {
        // TODO: test environmentVariablesMatrix
    }

    /**
     * Test the property 'excludeBranches'
     */
    @Test
    public void excludeBranchesTest() {
        // TODO: test excludeBranches
    }

    /**
     * Test the property 'forceHttpsClone'
     */
    @Test
    public void forceHttpsCloneTest() {
        // TODO: test forceHttpsClone
    }

    /**
     * Test the property 'hostsEntries'
     */
    @Test
    public void hostsEntriesTest() {
        // TODO: test hostsEntries
    }

    /**
     * Test the property 'hotFixScripts'
     */
    @Test
    public void hotFixScriptsTest() {
        // TODO: test hotFixScripts
    }

    /**
     * Test the property 'includeBranches'
     */
    @Test
    public void includeBranchesTest() {
        // TODO: test includeBranches
    }

    /**
     * Test the property 'includeNuGetReferences'
     */
    @Test
    public void includeNuGetReferencesTest() {
        // TODO: test includeNuGetReferences
    }

    /**
     * Test the property 'initScripts'
     */
    @Test
    public void initScriptsTest() {
        // TODO: test initScripts
    }

    /**
     * Test the property 'installScripts'
     */
    @Test
    public void installScriptsTest() {
        // TODO: test installScripts
    }

    /**
     * Test the property 'matrixAllowFailures'
     */
    @Test
    public void matrixAllowFailuresTest() {
        // TODO: test matrixAllowFailures
    }

    /**
     * Test the property 'matrixExcept'
     */
    @Test
    public void matrixExceptTest() {
        // TODO: test matrixExcept
    }

    /**
     * Test the property 'matrixExclude'
     */
    @Test
    public void matrixExcludeTest() {
        // TODO: test matrixExclude
    }

    /**
     * Test the property 'matrixFastFinish'
     */
    @Test
    public void matrixFastFinishTest() {
        // TODO: test matrixFastFinish
    }

    /**
     * Test the property 'matrixOnly'
     */
    @Test
    public void matrixOnlyTest() {
        // TODO: test matrixOnly
    }

    /**
     * Test the property 'maxJobs'
     */
    @Test
    public void maxJobsTest() {
        // TODO: test maxJobs
    }

    /**
     * Test the property 'msBuildInParallel'
     */
    @Test
    public void msBuildInParallelTest() {
        // TODO: test msBuildInParallel
    }

    /**
     * Test the property 'msBuildProjectFileName'
     */
    @Test
    public void msBuildProjectFileNameTest() {
        // TODO: test msBuildProjectFileName
    }

    /**
     * Test the property 'msBuildVerbosity'
     */
    @Test
    public void msBuildVerbosityTest() {
        // TODO: test msBuildVerbosity
    }

    /**
     * Test the property 'notifications'
     */
    @Test
    public void notificationsTest() {
        // TODO: test notifications
    }

    /**
     * Test the property 'onBuildErrorScripts'
     */
    @Test
    public void onBuildErrorScriptsTest() {
        // TODO: test onBuildErrorScripts
    }

    /**
     * Test the property 'onBuildFinishScripts'
     */
    @Test
    public void onBuildFinishScriptsTest() {
        // TODO: test onBuildFinishScripts
    }

    /**
     * Test the property 'onBuildSuccessScripts'
     */
    @Test
    public void onBuildSuccessScriptsTest() {
        // TODO: test onBuildSuccessScripts
    }

    /**
     * Test the property 'onlyCommitsFiles'
     */
    @Test
    public void onlyCommitsFilesTest() {
        // TODO: test onlyCommitsFiles
    }

    /**
     * Test the property 'operatingSystem'
     */
    @Test
    public void operatingSystemTest() {
        // TODO: test operatingSystem
    }

    /**
     * Test the property 'packageAspNetCoreProjects'
     */
    @Test
    public void packageAspNetCoreProjectsTest() {
        // TODO: test packageAspNetCoreProjects
    }

    /**
     * Test the property 'packageAzureCloudServiceProjects'
     */
    @Test
    public void packageAzureCloudServiceProjectsTest() {
        // TODO: test packageAzureCloudServiceProjects
    }

    /**
     * Test the property 'packageDotnetConsoleProjects'
     */
    @Test
    public void packageDotnetConsoleProjectsTest() {
        // TODO: test packageDotnetConsoleProjects
    }

    /**
     * Test the property 'packageNuGetProjects'
     */
    @Test
    public void packageNuGetProjectsTest() {
        // TODO: test packageNuGetProjects
    }

    /**
     * Test the property 'packageNuGetSymbols'
     */
    @Test
    public void packageNuGetSymbolsTest() {
        // TODO: test packageNuGetSymbols
    }

    /**
     * Test the property 'packageWebApplicationProjects'
     */
    @Test
    public void packageWebApplicationProjectsTest() {
        // TODO: test packageWebApplicationProjects
    }

    /**
     * Test the property 'packageWebApplicationProjectsBeanstalk'
     */
    @Test
    public void packageWebApplicationProjectsBeanstalkTest() {
        // TODO: test packageWebApplicationProjectsBeanstalk
    }

    /**
     * Test the property 'packageWebApplicationProjectsOctopus'
     */
    @Test
    public void packageWebApplicationProjectsOctopusTest() {
        // TODO: test packageWebApplicationProjectsOctopus
    }

    /**
     * Test the property 'packageWebApplicationProjectsXCopy'
     */
    @Test
    public void packageWebApplicationProjectsXCopyTest() {
        // TODO: test packageWebApplicationProjectsXCopy
    }

    /**
     * Test the property 'patchAssemblyInfo'
     */
    @Test
    public void patchAssemblyInfoTest() {
        // TODO: test patchAssemblyInfo
    }

    /**
     * Test the property 'patchDotnetCsproj'
     */
    @Test
    public void patchDotnetCsprojTest() {
        // TODO: test patchDotnetCsproj
    }

    /**
     * Test the property 'platform'
     */
    @Test
    public void platformTest() {
        // TODO: test platform
    }

    /**
     * Test the property 'services'
     */
    @Test
    public void servicesTest() {
        // TODO: test services
    }

    /**
     * Test the property 'shallowClone'
     */
    @Test
    public void shallowCloneTest() {
        // TODO: test shallowClone
    }

    /**
     * Test the property 'skipBranchWithPullRequests'
     */
    @Test
    public void skipBranchWithPullRequestsTest() {
        // TODO: test skipBranchWithPullRequests
    }

    /**
     * Test the property 'skipCommitsFiles'
     */
    @Test
    public void skipCommitsFilesTest() {
        // TODO: test skipCommitsFiles
    }

    /**
     * Test the property 'skipNonTags'
     */
    @Test
    public void skipNonTagsTest() {
        // TODO: test skipNonTags
    }

    /**
     * Test the property 'skipTags'
     */
    @Test
    public void skipTagsTest() {
        // TODO: test skipTags
    }

    /**
     * Test the property 'stacks'
     */
    @Test
    public void stacksTest() {
        // TODO: test stacks
    }

    /**
     * Test the property 'testAssemblies'
     */
    @Test
    public void testAssembliesTest() {
        // TODO: test testAssemblies
    }

    /**
     * Test the property 'testCategories'
     */
    @Test
    public void testCategoriesTest() {
        // TODO: test testCategories
    }

    /**
     * Test the property 'testCategoriesMatrix'
     */
    @Test
    public void testCategoriesMatrixTest() {
        // TODO: test testCategoriesMatrix
    }

    /**
     * Test the property 'testCategoriesMode'
     */
    @Test
    public void testCategoriesModeTest() {
        // TODO: test testCategoriesMode
    }

    /**
     * Test the property 'testMode'
     */
    @Test
    public void testModeTest() {
        // TODO: test testMode
    }

    /**
     * Test the property 'testScripts'
     */
    @Test
    public void testScriptsTest() {
        // TODO: test testScripts
    }

    /**
     * Test the property 'xamarinRegisterAndroidProduct'
     */
    @Test
    public void xamarinRegisterAndroidProductTest() {
        // TODO: test xamarinRegisterAndroidProduct
    }

    /**
     * Test the property 'xamarinRegisterIosProduct'
     */
    @Test
    public void xamarinRegisterIosProductTest() {
        // TODO: test xamarinRegisterIosProduct
    }

}
