/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EncryptRequest;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectAddition;
import org.openapitools.client.model.ProjectBuildNumberUpdate;
import org.openapitools.client.model.ProjectBuildResults;
import org.openapitools.client.model.ProjectDeploymentsResults;
import org.openapitools.client.model.ProjectHistory;
import org.openapitools.client.model.ProjectSettingsResults;
import org.openapitools.client.model.ProjectWithConfiguration;
import org.openapitools.client.model.StoredNameValue;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Disabled
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    /**
     * Add project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProjectTest() throws ApiException {
        ProjectAddition body = null;
        Project response = api.addProject(body);
        // TODO: test validations
    }

    /**
     * Delete project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        api.deleteProject(accountName, projectSlug);
        // TODO: test validations
    }

    /**
     * Delete project build cache
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectBuildCacheTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        api.deleteProjectBuildCache(accountName, projectSlug);
        // TODO: test validations
    }

    /**
     * Encrypt a value for use in StoredValue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void encryptValueTest() throws ApiException {
        EncryptRequest body = null;
        String response = api.encryptValue(body);
        // TODO: test validations
    }

    /**
     * Get last successful build artifact
     *
     * The &#x60;job&#x60; parameter is mandatory if the build contains multiple jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectArtifactTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        String artifactFileName = null;
        String branch = null;
        String tag = null;
        String job = null;
        Boolean all = null;
        Boolean pr = null;
        File response = api.getProjectArtifact(accountName, projectSlug, artifactFileName, branch, tag, job, all, pr);
        // TODO: test validations
    }

    /**
     * Get project branch status badge image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectBranchStatusBadgeTest() throws ApiException {
        String statusBadgeId = null;
        String buildBranch = null;
        Boolean svg = null;
        Boolean retina = null;
        String passingText = null;
        String failingText = null;
        String pendingText = null;
        File response = api.getProjectBranchStatusBadge(statusBadgeId, buildBranch, svg, retina, passingText, failingText, pendingText);
        // TODO: test validations
    }

    /**
     * Get project build by version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectBuildByVersionTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        String buildVersion = null;
        ProjectBuildResults response = api.getProjectBuildByVersion(accountName, projectSlug, buildVersion);
        // TODO: test validations
    }

    /**
     * Get project deployments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectDeploymentsTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        Integer recordsNumber = null;
        ProjectDeploymentsResults response = api.getProjectDeployments(accountName, projectSlug, recordsNumber);
        // TODO: test validations
    }

    /**
     * Get project environment variables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectEnvironmentVariablesTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        List<StoredNameValue> response = api.getProjectEnvironmentVariables(accountName, projectSlug);
        // TODO: test validations
    }

    /**
     * Get project history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectHistoryTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        Integer recordsNumber = null;
        Integer startBuildId = null;
        String branch = null;
        ProjectHistory response = api.getProjectHistory(accountName, projectSlug, recordsNumber, startBuildId, branch);
        // TODO: test validations
    }

    /**
     * Get project last build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectLastBuildTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        ProjectBuildResults response = api.getProjectLastBuild(accountName, projectSlug);
        // TODO: test validations
    }

    /**
     * Get project last branch build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectLastBuildBranchTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        String buildBranch = null;
        ProjectBuildResults response = api.getProjectLastBuildBranch(accountName, projectSlug, buildBranch);
        // TODO: test validations
    }

    /**
     * Get project settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectSettingsTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        ProjectSettingsResults response = api.getProjectSettings(accountName, projectSlug);
        // TODO: test validations
    }

    /**
     * Get project settings in YAML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectSettingsYamlTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        String response = api.getProjectSettingsYaml(accountName, projectSlug);
        // TODO: test validations
    }

    /**
     * Get project status badge image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectStatusBadgeTest() throws ApiException {
        String statusBadgeId = null;
        Boolean svg = null;
        Boolean retina = null;
        String passingText = null;
        String failingText = null;
        String pendingText = null;
        File response = api.getProjectStatusBadge(statusBadgeId, svg, retina, passingText, failingText, pendingText);
        // TODO: test validations
    }

    /**
     * Get projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        List<Project> response = api.getProjects();
        // TODO: test validations
    }

    /**
     * Get status badge image for a project with a public repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicProjectStatusBadgeTest() throws ApiException {
        String badgeRepoProvider = null;
        String repoAccountName = null;
        String repoSlug = null;
        String branch = null;
        Boolean svg = null;
        Boolean retina = null;
        String passingText = null;
        String failingText = null;
        String pendingText = null;
        File response = api.getPublicProjectStatusBadge(badgeRepoProvider, repoAccountName, repoSlug, branch, svg, retina, passingText, failingText, pendingText);
        // TODO: test validations
    }

    /**
     * Update project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        ProjectWithConfiguration body = null;
        api.updateProject(body);
        // TODO: test validations
    }

    /**
     * Update project build number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectBuildNumberTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        ProjectBuildNumberUpdate body = null;
        api.updateProjectBuildNumber(accountName, projectSlug, body);
        // TODO: test validations
    }

    /**
     * Update project environment variables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectEnvironmentVariablesTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        List<StoredNameValue> body = null;
        api.updateProjectEnvironmentVariables(accountName, projectSlug, body);
        // TODO: test validations
    }

    /**
     * Update project settings in YAML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectSettingsYamlTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        File body = null;
        api.updateProjectSettingsYaml(accountName, projectSlug, body);
        // TODO: test validations
    }

}
