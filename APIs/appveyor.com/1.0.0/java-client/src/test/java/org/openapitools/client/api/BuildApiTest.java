/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArtifactModel;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.BuildStartRequest;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.ReRunBuildRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuildApi
 */
@Disabled
public class BuildApiTest {

    private final BuildApi api = new BuildApi();

    /**
     * Cancel build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelBuildTest() throws ApiException {
        String accountName = null;
        String projectSlug = null;
        String buildVersion = null;
        api.cancelBuild(accountName, projectSlug, buildVersion);
        // TODO: test validations
    }

    /**
     * Download build artifact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuildArtifactTest() throws ApiException {
        String jobId = null;
        String artifactFileName = null;
        File response = api.getBuildArtifact(jobId, artifactFileName);
        // TODO: test validations
    }

    /**
     * Get build artifacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuildArtifactsTest() throws ApiException {
        String jobId = null;
        List<ArtifactModel> response = api.getBuildArtifacts(jobId);
        // TODO: test validations
    }

    /**
     * Download build log
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuildLogTest() throws ApiException {
        String jobId = null;
        File response = api.getBuildLog(jobId);
        // TODO: test validations
    }

    /**
     * Re-run build
     *
     * If &#x60;reRunIncomplete&#x60; is &#x60;true&#x60; and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message \&quot;No failed or cancelled jobs in build with ID {buildId}\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reRunBuildTest() throws ApiException {
        ReRunBuildRequest body = null;
        Build response = api.reRunBuild(body);
        // TODO: test validations
    }

    /**
     * Start build of branch most recent commit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBuildTest() throws ApiException {
        BuildStartRequest body = null;
        Build response = api.startBuild(body);
        // TODO: test validations
    }

}
