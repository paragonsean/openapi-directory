/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpMethodRestricted;
import org.openapitools.client.model.NotificationSettingsType;
import org.openapitools.client.model.StoredNameValue;
import org.openapitools.client.model.StoredValue;
import org.openapitools.client.model.StringValueObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for NotificationSettings
 */
public class NotificationSettingsTest {
    private final NotificationSettings model = new NotificationSettings();

    /**
     * Model tests for NotificationSettings
     */
    @Test
    public void testNotificationSettings() {
        // TODO: test NotificationSettings
    }

    /**
     * Test the property '$type'
     */
    @Test
    public void $typeTest() {
        // TODO: test $type
    }

    /**
     * Test the property 'account'
     */
    @Test
    public void accountTest() {
        // TODO: test account
    }

    /**
     * Test the property 'addCustomRequestBody'
     */
    @Test
    public void addCustomRequestBodyTest() {
        // TODO: test addCustomRequestBody
    }

    /**
     * Test the property 'authToken'
     */
    @Test
    public void authTokenTest() {
        // TODO: test authToken
    }

    /**
     * Test the property 'bodyTemplate'
     */
    @Test
    public void bodyTemplateTest() {
        // TODO: test bodyTemplate
    }

    /**
     * Test the property 'channel'
     */
    @Test
    public void channelTest() {
        // TODO: test channel
    }

    /**
     * Test the property 'customRequestBody'
     */
    @Test
    public void customRequestBodyTest() {
        // TODO: test customRequestBody
    }

    /**
     * Test the property 'customRequestBodyContentType'
     */
    @Test
    public void customRequestBodyContentTypeTest() {
        // TODO: test customRequestBodyContentType
    }

    /**
     * Test the property 'from'
     */
    @Test
    public void fromTest() {
        // TODO: test from
    }

    /**
     * Test the property 'headers'
     */
    @Test
    public void headersTest() {
        // TODO: test headers
    }

    /**
     * Test the property 'headersValue'
     */
    @Test
    public void headersValueTest() {
        // TODO: test headersValue
    }

    /**
     * Test the property 'incomingWebhookUrl'
     */
    @Test
    public void incomingWebhookUrlTest() {
        // TODO: test incomingWebhookUrl
    }

    /**
     * Test the property 'method'
     */
    @Test
    public void methodTest() {
        // TODO: test method
    }

    /**
     * Test the property 'onBuildFailure'
     */
    @Test
    public void onBuildFailureTest() {
        // TODO: test onBuildFailure
    }

    /**
     * Test the property 'onBuildStatusChanged'
     */
    @Test
    public void onBuildStatusChangedTest() {
        // TODO: test onBuildStatusChanged
    }

    /**
     * Test the property 'onBuildSuccess'
     */
    @Test
    public void onBuildSuccessTest() {
        // TODO: test onBuildSuccess
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        // TODO: test password
    }

    /**
     * Test the property 'recipients'
     */
    @Test
    public void recipientsTest() {
        // TODO: test recipients
    }

    /**
     * Test the property 'recipientsValue'
     */
    @Test
    public void recipientsValueTest() {
        // TODO: test recipientsValue
    }

    /**
     * Test the property 'room'
     */
    @Test
    public void roomTest() {
        // TODO: test room
    }

    /**
     * Test the property 'serverUrl'
     */
    @Test
    public void serverUrlTest() {
        // TODO: test serverUrl
    }

    /**
     * Test the property 'subjectTemplate'
     */
    @Test
    public void subjectTemplateTest() {
        // TODO: test subjectTemplate
    }

    /**
     * Test the property 'template'
     */
    @Test
    public void templateTest() {
        // TODO: test template
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        // TODO: test username
    }

    /**
     * Test the property 'vsoAccount'
     */
    @Test
    public void vsoAccountTest() {
        // TODO: test vsoAccount
    }

}
