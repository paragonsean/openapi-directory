/*
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.NuGetFeed;
import org.openapitools.client.model.RepositoryProvider;
import org.openapitools.client.model.RepositoryScm;
import org.openapitools.client.model.SecurityDescriptor;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Project
 */
public class ProjectTest {
    private final Project model = new Project();

    /**
     * Model tests for Project
     */
    @Test
    public void testProject() {
        // TODO: test Project
    }

    /**
     * Test the property 'accountName'
     */
    @Test
    public void accountNameTest() {
        // TODO: test accountName
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'projectId'
     */
    @Test
    public void projectIdTest() {
        // TODO: test projectId
    }

    /**
     * Test the property 'slug'
     */
    @Test
    public void slugTest() {
        // TODO: test slug
    }

    /**
     * Test the property 'created'
     */
    @Test
    public void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'updated'
     */
    @Test
    public void updatedTest() {
        // TODO: test updated
    }

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
        // TODO: test accountId
    }

    /**
     * Test the property 'alwaysBuildClosedPullRequests'
     */
    @Test
    public void alwaysBuildClosedPullRequestsTest() {
        // TODO: test alwaysBuildClosedPullRequests
    }

    /**
     * Test the property 'builds'
     */
    @Test
    public void buildsTest() {
        // TODO: test builds
    }

    /**
     * Test the property 'currentBuildId'
     */
    @Test
    public void currentBuildIdTest() {
        // TODO: test currentBuildId
    }

    /**
     * Test the property 'disablePullRequestWebhooks'
     */
    @Test
    public void disablePullRequestWebhooksTest() {
        // TODO: test disablePullRequestWebhooks
    }

    /**
     * Test the property 'disablePushWebhooks'
     */
    @Test
    public void disablePushWebhooksTest() {
        // TODO: test disablePushWebhooks
    }

    /**
     * Test the property 'enableDeploymentInPullRequests'
     */
    @Test
    public void enableDeploymentInPullRequestsTest() {
        // TODO: test enableDeploymentInPullRequests
    }

    /**
     * Test the property 'enableSecureVariablesInPullRequests'
     */
    @Test
    public void enableSecureVariablesInPullRequestsTest() {
        // TODO: test enableSecureVariablesInPullRequests
    }

    /**
     * Test the property 'enableSecureVariablesInPullRequestsFromSameRepo'
     */
    @Test
    public void enableSecureVariablesInPullRequestsFromSameRepoTest() {
        // TODO: test enableSecureVariablesInPullRequestsFromSameRepo
    }

    /**
     * Test the property 'isGitHubApp'
     */
    @Test
    public void isGitHubAppTest() {
        // TODO: test isGitHubApp
    }

    /**
     * Test the property 'isPrivate'
     */
    @Test
    public void isPrivateTest() {
        // TODO: test isPrivate
    }

    /**
     * Test the property 'nuGetFeed'
     */
    @Test
    public void nuGetFeedTest() {
        // TODO: test nuGetFeed
    }

    /**
     * Test the property 'repositoryBranch'
     */
    @Test
    public void repositoryBranchTest() {
        // TODO: test repositoryBranch
    }

    /**
     * Test the property 'repositoryName'
     */
    @Test
    public void repositoryNameTest() {
        // TODO: test repositoryName
    }

    /**
     * Test the property 'repositoryScm'
     */
    @Test
    public void repositoryScmTest() {
        // TODO: test repositoryScm
    }

    /**
     * Test the property 'repositoryType'
     */
    @Test
    public void repositoryTypeTest() {
        // TODO: test repositoryType
    }

    /**
     * Test the property 'rollingBuilds'
     */
    @Test
    public void rollingBuildsTest() {
        // TODO: test rollingBuilds
    }

    /**
     * Test the property 'rollingBuildsDoNotCancelRunningBuilds'
     */
    @Test
    public void rollingBuildsDoNotCancelRunningBuildsTest() {
        // TODO: test rollingBuildsDoNotCancelRunningBuilds
    }

    /**
     * Test the property 'rollingBuildsOnlyForPullRequests'
     */
    @Test
    public void rollingBuildsOnlyForPullRequestsTest() {
        // TODO: test rollingBuildsOnlyForPullRequests
    }

    /**
     * Test the property 'saveBuildCacheInPullRequests'
     */
    @Test
    public void saveBuildCacheInPullRequestsTest() {
        // TODO: test saveBuildCacheInPullRequests
    }

    /**
     * Test the property 'securityDescriptor'
     */
    @Test
    public void securityDescriptorTest() {
        // TODO: test securityDescriptor
    }

    /**
     * Test the property 'skipBranchesWithoutAppveyorYml'
     */
    @Test
    public void skipBranchesWithoutAppveyorYmlTest() {
        // TODO: test skipBranchesWithoutAppveyorYml
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

}
