/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppVeyorRestApi);
  }
}(this, function(expect, AppVeyorRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppVeyorRestApi.ProjectWithConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectWithConfiguration', function() {
    it('should create an instance of ProjectWithConfiguration', function() {
      // uncomment below and update the code to test ProjectWithConfiguration
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be.a(AppVeyorRestApi.ProjectWithConfiguration);
    });

    it('should have the property accountName (base name: "accountName")', function() {
      // uncomment below and update the code to test the property accountName
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property alwaysBuildClosedPullRequests (base name: "alwaysBuildClosedPullRequests")', function() {
      // uncomment below and update the code to test the property alwaysBuildClosedPullRequests
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property builds (base name: "builds")', function() {
      // uncomment below and update the code to test the property builds
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property currentBuildId (base name: "currentBuildId")', function() {
      // uncomment below and update the code to test the property currentBuildId
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property disablePullRequestWebhooks (base name: "disablePullRequestWebhooks")', function() {
      // uncomment below and update the code to test the property disablePullRequestWebhooks
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property disablePushWebhooks (base name: "disablePushWebhooks")', function() {
      // uncomment below and update the code to test the property disablePushWebhooks
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableDeploymentInPullRequests (base name: "enableDeploymentInPullRequests")', function() {
      // uncomment below and update the code to test the property enableDeploymentInPullRequests
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableSecureVariablesInPullRequests (base name: "enableSecureVariablesInPullRequests")', function() {
      // uncomment below and update the code to test the property enableSecureVariablesInPullRequests
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property enableSecureVariablesInPullRequestsFromSameRepo (base name: "enableSecureVariablesInPullRequestsFromSameRepo")', function() {
      // uncomment below and update the code to test the property enableSecureVariablesInPullRequestsFromSameRepo
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property isGitHubApp (base name: "isGitHubApp")', function() {
      // uncomment below and update the code to test the property isGitHubApp
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property isPrivate (base name: "isPrivate")', function() {
      // uncomment below and update the code to test the property isPrivate
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property nuGetFeed (base name: "nuGetFeed")', function() {
      // uncomment below and update the code to test the property nuGetFeed
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property repositoryBranch (base name: "repositoryBranch")', function() {
      // uncomment below and update the code to test the property repositoryBranch
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property repositoryName (base name: "repositoryName")', function() {
      // uncomment below and update the code to test the property repositoryName
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property repositoryScm (base name: "repositoryScm")', function() {
      // uncomment below and update the code to test the property repositoryScm
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property repositoryType (base name: "repositoryType")', function() {
      // uncomment below and update the code to test the property repositoryType
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property rollingBuilds (base name: "rollingBuilds")', function() {
      // uncomment below and update the code to test the property rollingBuilds
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property rollingBuildsDoNotCancelRunningBuilds (base name: "rollingBuildsDoNotCancelRunningBuilds")', function() {
      // uncomment below and update the code to test the property rollingBuildsDoNotCancelRunningBuilds
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property rollingBuildsOnlyForPullRequests (base name: "rollingBuildsOnlyForPullRequests")', function() {
      // uncomment below and update the code to test the property rollingBuildsOnlyForPullRequests
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property saveBuildCacheInPullRequests (base name: "saveBuildCacheInPullRequests")', function() {
      // uncomment below and update the code to test the property saveBuildCacheInPullRequests
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property securityDescriptor (base name: "securityDescriptor")', function() {
      // uncomment below and update the code to test the property securityDescriptor
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property skipBranchesWithoutAppveyorYml (base name: "skipBranchesWithoutAppveyorYml")', function() {
      // uncomment below and update the code to test the property skipBranchesWithoutAppveyorYml
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property buildPriority (base name: "buildPriority")', function() {
      // uncomment below and update the code to test the property buildPriority
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property configuration (base name: "configuration")', function() {
      // uncomment below and update the code to test the property configuration
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property customYmlName (base name: "customYmlName")', function() {
      // uncomment below and update the code to test the property customYmlName
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property ignoreAppveyorYml (base name: "ignoreAppveyorYml")', function() {
      // uncomment below and update the code to test the property ignoreAppveyorYml
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property nextBuildNumber (base name: "nextBuildNumber")', function() {
      // uncomment below and update the code to test the property nextBuildNumber
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property repositoryAuthentication (base name: "repositoryAuthentication")', function() {
      // uncomment below and update the code to test the property repositoryAuthentication
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property repositoryUsername (base name: "repositoryUsername")', function() {
      // uncomment below and update the code to test the property repositoryUsername
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property scheduleCrontabExpression (base name: "scheduleCrontabExpression")', function() {
      // uncomment below and update the code to test the property scheduleCrontabExpression
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property sshPublicKey (base name: "sshPublicKey")', function() {
      // uncomment below and update the code to test the property sshPublicKey
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property statusBadgeId (base name: "statusBadgeId")', function() {
      // uncomment below and update the code to test the property statusBadgeId
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property versionFormat (base name: "versionFormat")', function() {
      // uncomment below and update the code to test the property versionFormat
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property webhookId (base name: "webhookId")', function() {
      // uncomment below and update the code to test the property webhookId
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property webhookUrl (base name: "webhookUrl")', function() {
      // uncomment below and update the code to test the property webhookUrl
      //var instance = new AppVeyorRestApi.ProjectWithConfiguration();
      //expect(instance).to.be();
    });

  });

}));
