/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppVeyorRestApi);
  }
}(this, function(expect, AppVeyorRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppVeyorRestApi.ProjectAddition();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectAddition', function() {
    it('should create an instance of ProjectAddition', function() {
      // uncomment below and update the code to test ProjectAddition
      //var instance = new AppVeyorRestApi.ProjectAddition();
      //expect(instance).to.be.a(AppVeyorRestApi.ProjectAddition);
    });

    it('should have the property repositoryAuthentication (base name: "repositoryAuthentication")', function() {
      // uncomment below and update the code to test the property repositoryAuthentication
      //var instance = new AppVeyorRestApi.ProjectAddition();
      //expect(instance).to.be();
    });

    it('should have the property repositoryName (base name: "repositoryName")', function() {
      // uncomment below and update the code to test the property repositoryName
      //var instance = new AppVeyorRestApi.ProjectAddition();
      //expect(instance).to.be();
    });

    it('should have the property repositoryPassword (base name: "repositoryPassword")', function() {
      // uncomment below and update the code to test the property repositoryPassword
      //var instance = new AppVeyorRestApi.ProjectAddition();
      //expect(instance).to.be();
    });

    it('should have the property repositoryProvider (base name: "repositoryProvider")', function() {
      // uncomment below and update the code to test the property repositoryProvider
      //var instance = new AppVeyorRestApi.ProjectAddition();
      //expect(instance).to.be();
    });

    it('should have the property repositoryUsername (base name: "repositoryUsername")', function() {
      // uncomment below and update the code to test the property repositoryUsername
      //var instance = new AppVeyorRestApi.ProjectAddition();
      //expect(instance).to.be();
    });

  });

}));
