/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppVeyorRestApi);
  }
}(this, function(expect, AppVeyorRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppVeyorRestApi.ProjectConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectConfiguration', function() {
    it('should create an instance of ProjectConfiguration', function() {
      // uncomment below and update the code to test ProjectConfiguration
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be.a(AppVeyorRestApi.ProjectConfiguration);
    });

    it('should have the property afterBuildScripts (base name: "afterBuildScripts")', function() {
      // uncomment below and update the code to test the property afterBuildScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property afterDeployScripts (base name: "afterDeployScripts")', function() {
      // uncomment below and update the code to test the property afterDeployScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property afterTestScripts (base name: "afterTestScripts")', function() {
      // uncomment below and update the code to test the property afterTestScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property artifacts (base name: "artifacts")', function() {
      // uncomment below and update the code to test the property artifacts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property assemblyFileVersionFormat (base name: "assemblyFileVersionFormat")', function() {
      // uncomment below and update the code to test the property assemblyFileVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property assemblyInfoFile (base name: "assemblyInfoFile")', function() {
      // uncomment below and update the code to test the property assemblyInfoFile
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property assemblyInformationalVersionFormat (base name: "assemblyInformationalVersionFormat")', function() {
      // uncomment below and update the code to test the property assemblyInformationalVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property assemblyVersionFormat (base name: "assemblyVersionFormat")', function() {
      // uncomment below and update the code to test the property assemblyVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property beforeBuildScripts (base name: "beforeBuildScripts")', function() {
      // uncomment below and update the code to test the property beforeBuildScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property beforeDeployScripts (base name: "beforeDeployScripts")', function() {
      // uncomment below and update the code to test the property beforeDeployScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property beforePackageScripts (base name: "beforePackageScripts")', function() {
      // uncomment below and update the code to test the property beforePackageScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property beforeTestScripts (base name: "beforeTestScripts")', function() {
      // uncomment below and update the code to test the property beforeTestScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property branchesMode (base name: "branchesMode")', function() {
      // uncomment below and update the code to test the property branchesMode
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property buildCloud (base name: "buildCloud")', function() {
      // uncomment below and update the code to test the property buildCloud
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property buildMode (base name: "buildMode")', function() {
      // uncomment below and update the code to test the property buildMode
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property buildScripts (base name: "buildScripts")', function() {
      // uncomment below and update the code to test the property buildScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property cacheEntries (base name: "cacheEntries")', function() {
      // uncomment below and update the code to test the property cacheEntries
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property cloneDepth (base name: "cloneDepth")', function() {
      // uncomment below and update the code to test the property cloneDepth
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property cloneFolder (base name: "cloneFolder")', function() {
      // uncomment below and update the code to test the property cloneFolder
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property cloneScripts (base name: "cloneScripts")', function() {
      // uncomment below and update the code to test the property cloneScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property configuration (base name: "configuration")', function() {
      // uncomment below and update the code to test the property configuration
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property configureNuGetAccountSource (base name: "configureNuGetAccountSource")', function() {
      // uncomment below and update the code to test the property configureNuGetAccountSource
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property configureNuGetProjectSource (base name: "configureNuGetProjectSource")', function() {
      // uncomment below and update the code to test the property configureNuGetProjectSource
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property deployMode (base name: "deployMode")', function() {
      // uncomment below and update the code to test the property deployMode
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property deployScripts (base name: "deployScripts")', function() {
      // uncomment below and update the code to test the property deployScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property deployments (base name: "deployments")', function() {
      // uncomment below and update the code to test the property deployments
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property disableNuGetPublishForOctopusPackages (base name: "disableNuGetPublishForOctopusPackages")', function() {
      // uncomment below and update the code to test the property disableNuGetPublishForOctopusPackages
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property disableNuGetPublishOnPullRequests (base name: "disableNuGetPublishOnPullRequests")', function() {
      // uncomment below and update the code to test the property disableNuGetPublishOnPullRequests
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property doNotIncrementBuildNumberOnPullRequests (base name: "doNotIncrementBuildNumberOnPullRequests")', function() {
      // uncomment below and update the code to test the property doNotIncrementBuildNumberOnPullRequests
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dotnetCsprojAssemblyVersionFormat (base name: "dotnetCsprojAssemblyVersionFormat")', function() {
      // uncomment below and update the code to test the property dotnetCsprojAssemblyVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dotnetCsprojFile (base name: "dotnetCsprojFile")', function() {
      // uncomment below and update the code to test the property dotnetCsprojFile
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dotnetCsprojFileVersionFormat (base name: "dotnetCsprojFileVersionFormat")', function() {
      // uncomment below and update the code to test the property dotnetCsprojFileVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dotnetCsprojInformationalVersionFormat (base name: "dotnetCsprojInformationalVersionFormat")', function() {
      // uncomment below and update the code to test the property dotnetCsprojInformationalVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dotnetCsprojPackageVersionFormat (base name: "dotnetCsprojPackageVersionFormat")', function() {
      // uncomment below and update the code to test the property dotnetCsprojPackageVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dotnetCsprojVersionFormat (base name: "dotnetCsprojVersionFormat")', function() {
      // uncomment below and update the code to test the property dotnetCsprojVersionFormat
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property environmentVariables (base name: "environmentVariables")', function() {
      // uncomment below and update the code to test the property environmentVariables
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property environmentVariablesMatrix (base name: "environmentVariablesMatrix")', function() {
      // uncomment below and update the code to test the property environmentVariablesMatrix
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property excludeBranches (base name: "excludeBranches")', function() {
      // uncomment below and update the code to test the property excludeBranches
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property forceHttpsClone (base name: "forceHttpsClone")', function() {
      // uncomment below and update the code to test the property forceHttpsClone
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property hostsEntries (base name: "hostsEntries")', function() {
      // uncomment below and update the code to test the property hostsEntries
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property hotFixScripts (base name: "hotFixScripts")', function() {
      // uncomment below and update the code to test the property hotFixScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property includeBranches (base name: "includeBranches")', function() {
      // uncomment below and update the code to test the property includeBranches
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property includeNuGetReferences (base name: "includeNuGetReferences")', function() {
      // uncomment below and update the code to test the property includeNuGetReferences
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property initScripts (base name: "initScripts")', function() {
      // uncomment below and update the code to test the property initScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property installScripts (base name: "installScripts")', function() {
      // uncomment below and update the code to test the property installScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property matrixAllowFailures (base name: "matrixAllowFailures")', function() {
      // uncomment below and update the code to test the property matrixAllowFailures
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property matrixExcept (base name: "matrixExcept")', function() {
      // uncomment below and update the code to test the property matrixExcept
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property matrixExclude (base name: "matrixExclude")', function() {
      // uncomment below and update the code to test the property matrixExclude
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property matrixFastFinish (base name: "matrixFastFinish")', function() {
      // uncomment below and update the code to test the property matrixFastFinish
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property matrixOnly (base name: "matrixOnly")', function() {
      // uncomment below and update the code to test the property matrixOnly
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property maxJobs (base name: "maxJobs")', function() {
      // uncomment below and update the code to test the property maxJobs
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property msBuildInParallel (base name: "msBuildInParallel")', function() {
      // uncomment below and update the code to test the property msBuildInParallel
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property msBuildProjectFileName (base name: "msBuildProjectFileName")', function() {
      // uncomment below and update the code to test the property msBuildProjectFileName
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property msBuildVerbosity (base name: "msBuildVerbosity")', function() {
      // uncomment below and update the code to test the property msBuildVerbosity
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property notifications (base name: "notifications")', function() {
      // uncomment below and update the code to test the property notifications
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property onBuildErrorScripts (base name: "onBuildErrorScripts")', function() {
      // uncomment below and update the code to test the property onBuildErrorScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property onBuildFinishScripts (base name: "onBuildFinishScripts")', function() {
      // uncomment below and update the code to test the property onBuildFinishScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property onBuildSuccessScripts (base name: "onBuildSuccessScripts")', function() {
      // uncomment below and update the code to test the property onBuildSuccessScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property onlyCommitsFiles (base name: "onlyCommitsFiles")', function() {
      // uncomment below and update the code to test the property onlyCommitsFiles
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystem (base name: "operatingSystem")', function() {
      // uncomment below and update the code to test the property operatingSystem
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageAspNetCoreProjects (base name: "packageAspNetCoreProjects")', function() {
      // uncomment below and update the code to test the property packageAspNetCoreProjects
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageAzureCloudServiceProjects (base name: "packageAzureCloudServiceProjects")', function() {
      // uncomment below and update the code to test the property packageAzureCloudServiceProjects
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageDotnetConsoleProjects (base name: "packageDotnetConsoleProjects")', function() {
      // uncomment below and update the code to test the property packageDotnetConsoleProjects
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageNuGetProjects (base name: "packageNuGetProjects")', function() {
      // uncomment below and update the code to test the property packageNuGetProjects
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageNuGetSymbols (base name: "packageNuGetSymbols")', function() {
      // uncomment below and update the code to test the property packageNuGetSymbols
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageWebApplicationProjects (base name: "packageWebApplicationProjects")', function() {
      // uncomment below and update the code to test the property packageWebApplicationProjects
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageWebApplicationProjectsBeanstalk (base name: "packageWebApplicationProjectsBeanstalk")', function() {
      // uncomment below and update the code to test the property packageWebApplicationProjectsBeanstalk
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageWebApplicationProjectsOctopus (base name: "packageWebApplicationProjectsOctopus")', function() {
      // uncomment below and update the code to test the property packageWebApplicationProjectsOctopus
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property packageWebApplicationProjectsXCopy (base name: "packageWebApplicationProjectsXCopy")', function() {
      // uncomment below and update the code to test the property packageWebApplicationProjectsXCopy
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property patchAssemblyInfo (base name: "patchAssemblyInfo")', function() {
      // uncomment below and update the code to test the property patchAssemblyInfo
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property patchDotnetCsproj (base name: "patchDotnetCsproj")', function() {
      // uncomment below and update the code to test the property patchDotnetCsproj
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property platform (base name: "platform")', function() {
      // uncomment below and update the code to test the property platform
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property services (base name: "services")', function() {
      // uncomment below and update the code to test the property services
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property shallowClone (base name: "shallowClone")', function() {
      // uncomment below and update the code to test the property shallowClone
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property skipBranchWithPullRequests (base name: "skipBranchWithPullRequests")', function() {
      // uncomment below and update the code to test the property skipBranchWithPullRequests
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property skipCommitsFiles (base name: "skipCommitsFiles")', function() {
      // uncomment below and update the code to test the property skipCommitsFiles
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property skipNonTags (base name: "skipNonTags")', function() {
      // uncomment below and update the code to test the property skipNonTags
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property skipTags (base name: "skipTags")', function() {
      // uncomment below and update the code to test the property skipTags
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property stacks (base name: "stacks")', function() {
      // uncomment below and update the code to test the property stacks
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property testAssemblies (base name: "testAssemblies")', function() {
      // uncomment below and update the code to test the property testAssemblies
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property testCategories (base name: "testCategories")', function() {
      // uncomment below and update the code to test the property testCategories
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property testCategoriesMatrix (base name: "testCategoriesMatrix")', function() {
      // uncomment below and update the code to test the property testCategoriesMatrix
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property testCategoriesMode (base name: "testCategoriesMode")', function() {
      // uncomment below and update the code to test the property testCategoriesMode
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property testMode (base name: "testMode")', function() {
      // uncomment below and update the code to test the property testMode
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property testScripts (base name: "testScripts")', function() {
      // uncomment below and update the code to test the property testScripts
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property xamarinRegisterAndroidProduct (base name: "xamarinRegisterAndroidProduct")', function() {
      // uncomment below and update the code to test the property xamarinRegisterAndroidProduct
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property xamarinRegisterIosProduct (base name: "xamarinRegisterIosProduct")', function() {
      // uncomment below and update the code to test the property xamarinRegisterIosProduct
      //var instance = new AppVeyorRestApi.ProjectConfiguration();
      //expect(instance).to.be();
    });

  });

}));
