/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppVeyorRestApi);
  }
}(this, function(expect, AppVeyorRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppVeyorRestApi.SessionUserAccountModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SessionUserAccountModel', function() {
    it('should create an instance of SessionUserAccountModel', function() {
      // uncomment below and update the code to test SessionUserAccountModel
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be.a(AppVeyorRestApi.SessionUserAccountModel);
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property allowCustomBuildEnvironment (base name: "allowCustomBuildEnvironment")', function() {
      // uncomment below and update the code to test the property allowCustomBuildEnvironment
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property blocked (base name: "blocked")', function() {
      // uncomment below and update the code to test the property blocked
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property featureFlags (base name: "featureFlags")', function() {
      // uncomment below and update the code to test the property featureFlags
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property gitHubPlan (base name: "gitHubPlan")', function() {
      // uncomment below and update the code to test the property gitHubPlan
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property gitHubPlanOrg (base name: "gitHubPlanOrg")', function() {
      // uncomment below and update the code to test the property gitHubPlanOrg
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property isCollaborator (base name: "isCollaborator")', function() {
      // uncomment below and update the code to test the property isCollaborator
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property isEnterprisePlan (base name: "isEnterprisePlan")', function() {
      // uncomment below and update the code to test the property isEnterprisePlan
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property isOwner (base name: "isOwner")', function() {
      // uncomment below and update the code to test the property isOwner
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property manualPayments (base name: "manualPayments")', function() {
      // uncomment below and update the code to test the property manualPayments
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property planEnd (base name: "planEnd")', function() {
      // uncomment below and update the code to test the property planEnd
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property planId (base name: "planId")', function() {
      // uncomment below and update the code to test the property planId
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property planStart (base name: "planStart")', function() {
      // uncomment below and update the code to test the property planStart
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property planStatus (base name: "planStatus")', function() {
      // uncomment below and update the code to test the property planStatus
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property roleId (base name: "roleId")', function() {
      // uncomment below and update the code to test the property roleId
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property roleName (base name: "roleName")', function() {
      // uncomment below and update the code to test the property roleName
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property timeZoneId (base name: "timeZoneId")', function() {
      // uncomment below and update the code to test the property timeZoneId
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property unpaid (base name: "unpaid")', function() {
      // uncomment below and update the code to test the property unpaid
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

    it('should have the property unverified (base name: "unverified")', function() {
      // uncomment below and update the code to test the property unverified
      //var instance = new AppVeyorRestApi.SessionUserAccountModel();
      //expect(instance).to.be();
    });

  });

}));
