/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppVeyorRestApi);
  }
}(this, function(expect, AppVeyorRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppVeyorRestApi.NotificationSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NotificationSettings', function() {
    it('should create an instance of NotificationSettings', function() {
      // uncomment below and update the code to test NotificationSettings
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be.a(AppVeyorRestApi.NotificationSettings);
    });

    it('should have the property type (base name: "$type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property addCustomRequestBody (base name: "addCustomRequestBody")', function() {
      // uncomment below and update the code to test the property addCustomRequestBody
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property authToken (base name: "authToken")', function() {
      // uncomment below and update the code to test the property authToken
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property bodyTemplate (base name: "bodyTemplate")', function() {
      // uncomment below and update the code to test the property bodyTemplate
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property customRequestBody (base name: "customRequestBody")', function() {
      // uncomment below and update the code to test the property customRequestBody
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property customRequestBodyContentType (base name: "customRequestBodyContentType")', function() {
      // uncomment below and update the code to test the property customRequestBodyContentType
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property headers (base name: "headers")', function() {
      // uncomment below and update the code to test the property headers
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property headersValue (base name: "headersValue")', function() {
      // uncomment below and update the code to test the property headersValue
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property incomingWebhookUrl (base name: "incomingWebhookUrl")', function() {
      // uncomment below and update the code to test the property incomingWebhookUrl
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property onBuildFailure (base name: "onBuildFailure")', function() {
      // uncomment below and update the code to test the property onBuildFailure
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property onBuildStatusChanged (base name: "onBuildStatusChanged")', function() {
      // uncomment below and update the code to test the property onBuildStatusChanged
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property onBuildSuccess (base name: "onBuildSuccess")', function() {
      // uncomment below and update the code to test the property onBuildSuccess
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property recipients (base name: "recipients")', function() {
      // uncomment below and update the code to test the property recipients
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property recipientsValue (base name: "recipientsValue")', function() {
      // uncomment below and update the code to test the property recipientsValue
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property room (base name: "room")', function() {
      // uncomment below and update the code to test the property room
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property serverUrl (base name: "serverUrl")', function() {
      // uncomment below and update the code to test the property serverUrl
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property subjectTemplate (base name: "subjectTemplate")', function() {
      // uncomment below and update the code to test the property subjectTemplate
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property template (base name: "template")', function() {
      // uncomment below and update the code to test the property template
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

    it('should have the property vsoAccount (base name: "vsoAccount")', function() {
      // uncomment below and update the code to test the property vsoAccount
      //var instance = new AppVeyorRestApi.NotificationSettings();
      //expect(instance).to.be();
    });

  });

}));
