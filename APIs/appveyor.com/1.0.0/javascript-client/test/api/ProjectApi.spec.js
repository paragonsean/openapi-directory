/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppVeyorRestApi);
  }
}(this, function(expect, AppVeyorRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppVeyorRestApi.ProjectApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectApi', function() {
    describe('addProject', function() {
      it('should call addProject successfully', function(done) {
        //uncomment below and update the code to test addProject
        //instance.addProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProjectBuildCache', function() {
      it('should call deleteProjectBuildCache successfully', function(done) {
        //uncomment below and update the code to test deleteProjectBuildCache
        //instance.deleteProjectBuildCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptValue', function() {
      it('should call encryptValue successfully', function(done) {
        //uncomment below and update the code to test encryptValue
        //instance.encryptValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectArtifact', function() {
      it('should call getProjectArtifact successfully', function(done) {
        //uncomment below and update the code to test getProjectArtifact
        //instance.getProjectArtifact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectBranchStatusBadge', function() {
      it('should call getProjectBranchStatusBadge successfully', function(done) {
        //uncomment below and update the code to test getProjectBranchStatusBadge
        //instance.getProjectBranchStatusBadge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectBuildByVersion', function() {
      it('should call getProjectBuildByVersion successfully', function(done) {
        //uncomment below and update the code to test getProjectBuildByVersion
        //instance.getProjectBuildByVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectDeployments', function() {
      it('should call getProjectDeployments successfully', function(done) {
        //uncomment below and update the code to test getProjectDeployments
        //instance.getProjectDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectEnvironmentVariables', function() {
      it('should call getProjectEnvironmentVariables successfully', function(done) {
        //uncomment below and update the code to test getProjectEnvironmentVariables
        //instance.getProjectEnvironmentVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectHistory', function() {
      it('should call getProjectHistory successfully', function(done) {
        //uncomment below and update the code to test getProjectHistory
        //instance.getProjectHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectLastBuild', function() {
      it('should call getProjectLastBuild successfully', function(done) {
        //uncomment below and update the code to test getProjectLastBuild
        //instance.getProjectLastBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectLastBuildBranch', function() {
      it('should call getProjectLastBuildBranch successfully', function(done) {
        //uncomment below and update the code to test getProjectLastBuildBranch
        //instance.getProjectLastBuildBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectSettings', function() {
      it('should call getProjectSettings successfully', function(done) {
        //uncomment below and update the code to test getProjectSettings
        //instance.getProjectSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectSettingsYaml', function() {
      it('should call getProjectSettingsYaml successfully', function(done) {
        //uncomment below and update the code to test getProjectSettingsYaml
        //instance.getProjectSettingsYaml(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectStatusBadge', function() {
      it('should call getProjectStatusBadge successfully', function(done) {
        //uncomment below and update the code to test getProjectStatusBadge
        //instance.getProjectStatusBadge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjects', function() {
      it('should call getProjects successfully', function(done) {
        //uncomment below and update the code to test getProjects
        //instance.getProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicProjectStatusBadge', function() {
      it('should call getPublicProjectStatusBadge successfully', function(done) {
        //uncomment below and update the code to test getPublicProjectStatusBadge
        //instance.getPublicProjectStatusBadge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectBuildNumber', function() {
      it('should call updateProjectBuildNumber successfully', function(done) {
        //uncomment below and update the code to test updateProjectBuildNumber
        //instance.updateProjectBuildNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectEnvironmentVariables', function() {
      it('should call updateProjectEnvironmentVariables successfully', function(done) {
        //uncomment below and update the code to test updateProjectEnvironmentVariables
        //instance.updateProjectEnvironmentVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectSettingsYaml', function() {
      it('should call updateProjectSettingsYaml successfully', function(done) {
        //uncomment below and update the code to test updateProjectSettingsYaml
        //instance.updateProjectSettingsYaml(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
