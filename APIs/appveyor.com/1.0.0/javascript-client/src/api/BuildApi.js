/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArtifactModel from '../model/ArtifactModel';
import Build from '../model/Build';
import BuildStartRequest from '../model/BuildStartRequest';
import Error from '../model/Error';
import ReRunBuildRequest from '../model/ReRunBuildRequest';

/**
* Build service.
* @module api/BuildApi
* @version 1.0.0
*/
export default class BuildApi {

    /**
    * Constructs a new BuildApi. 
    * @alias module:api/BuildApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelBuild operation.
     * @callback module:api/BuildApi~cancelBuildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel build
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {String} buildVersion Build Version (`version` property of `Build`)
     * @param {module:api/BuildApi~cancelBuildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelBuild(accountName, projectSlug, buildVersion, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling cancelBuild");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling cancelBuild");
      }
      // verify the required parameter 'buildVersion' is set
      if (buildVersion === undefined || buildVersion === null) {
        throw new Error("Missing the required parameter 'buildVersion' when calling cancelBuild");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug,
        'buildVersion': buildVersion
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/builds/{accountName}/{projectSlug}/{buildVersion}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildArtifact operation.
     * @callback module:api/BuildApi~getBuildArtifactCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download build artifact
     * @param {String} jobId Build ID (`jobId` property of `BuildJob`)
     * @param {String} artifactFileName File name (or path) of a build artifact file. Corresponds to the `fileName` property of `ArtifactModel`. URL-encoding of slashes in parameter values is optional.
     * @param {module:api/BuildApi~getBuildArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBuildArtifact(jobId, artifactFileName, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getBuildArtifact");
      }
      // verify the required parameter 'artifactFileName' is set
      if (artifactFileName === undefined || artifactFileName === null) {
        throw new Error("Missing the required parameter 'artifactFileName' when calling getBuildArtifact");
      }

      let pathParams = {
        'jobId': jobId,
        'artifactFileName': artifactFileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/buildjobs/{jobId}/artifacts/{artifactFileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildArtifacts operation.
     * @callback module:api/BuildApi~getBuildArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArtifactModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get build artifacts
     * @param {String} jobId Build ID (`jobId` property of `BuildJob`)
     * @param {module:api/BuildApi~getBuildArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArtifactModel>}
     */
    getBuildArtifacts(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getBuildArtifacts");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ArtifactModel];
      return this.apiClient.callApi(
        '/buildjobs/{jobId}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildLog operation.
     * @callback module:api/BuildApi~getBuildLogCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download build log
     * @param {String} jobId Build ID (`jobId` property of `BuildJob`)
     * @param {module:api/BuildApi~getBuildLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getBuildLog(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getBuildLog");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/buildjobs/{jobId}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reRunBuild operation.
     * @callback module:api/BuildApi~reRunBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-run build
     * If `reRunIncomplete` is `true` and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message \"No failed or cancelled jobs in build with ID {buildId}\".
     * @param {module:model/ReRunBuildRequest} body 
     * @param {module:api/BuildApi~reRunBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    reRunBuild(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reRunBuild");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/builds', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBuild operation.
     * @callback module:api/BuildApi~startBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start build of branch most recent commit
     * @param {module:model/BuildStartRequest} body 
     * @param {module:api/BuildApi~startBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    startBuild(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling startBuild");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
