/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deployment from '../model/Deployment';
import DeploymentCancellation from '../model/DeploymentCancellation';
import DeploymentStartRequest from '../model/DeploymentStartRequest';
import Error from '../model/Error';
import ProjectDeployment from '../model/ProjectDeployment';

/**
* Deployment service.
* @module api/DeploymentApi
* @version 1.0.0
*/
export default class DeploymentApi {

    /**
    * Constructs a new DeploymentApi. 
    * @alias module:api/DeploymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelDeployment operation.
     * @callback module:api/DeploymentApi~cancelDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel deployment
     * @param {module:model/DeploymentCancellation} body 
     * @param {module:api/DeploymentApi~cancelDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelDeployment(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cancelDeployment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/deployments/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployment operation.
     * @callback module:api/DeploymentApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployment
     * @param {Number} deploymentId Deployment ID (`deploymentId` property of `Deployment`)
     * @param {module:api/DeploymentApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDeployment}
     */
    getDeployment(deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getDeployment");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectDeployment;
      return this.apiClient.callApi(
        '/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDeployment operation.
     * @callback module:api/DeploymentApi~startDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start deployment
     * @param {module:model/DeploymentStartRequest} body 
     * @param {module:api/DeploymentApi~startDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    startDeployment(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling startDeployment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
