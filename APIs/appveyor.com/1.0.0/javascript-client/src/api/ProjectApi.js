/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EncryptRequest from '../model/EncryptRequest';
import Error from '../model/Error';
import Project from '../model/Project';
import ProjectAddition from '../model/ProjectAddition';
import ProjectBuildNumberUpdate from '../model/ProjectBuildNumberUpdate';
import ProjectBuildResults from '../model/ProjectBuildResults';
import ProjectDeploymentsResults from '../model/ProjectDeploymentsResults';
import ProjectHistory from '../model/ProjectHistory';
import ProjectSettingsResults from '../model/ProjectSettingsResults';
import ProjectWithConfiguration from '../model/ProjectWithConfiguration';
import StoredNameValue from '../model/StoredNameValue';

/**
* Project service.
* @module api/ProjectApi
* @version 1.0.0
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProject operation.
     * @callback module:api/ProjectApi~addProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add project
     * @param {module:model/ProjectAddition} body 
     * @param {module:api/ProjectApi~addProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    addProject(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:api/ProjectApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(accountName, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling deleteProject");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling deleteProject");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectBuildCache operation.
     * @callback module:api/ProjectApi~deleteProjectBuildCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project build cache
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:api/ProjectApi~deleteProjectBuildCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectBuildCache(accountName, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling deleteProjectBuildCache");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling deleteProjectBuildCache");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/buildcache', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptValue operation.
     * @callback module:api/ProjectApi~encryptValueCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt a value for use in StoredValue.
     * @param {module:model/EncryptRequest} body 
     * @param {module:api/ProjectApi~encryptValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    encryptValue(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/account/encrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectArtifact operation.
     * @callback module:api/ProjectApi~getProjectArtifactCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get last successful build artifact
     * The `job` parameter is mandatory if the build contains multiple jobs.
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {String} artifactFileName File name (or path) of a build artifact file. Corresponds to the `fileName` property of `ArtifactModel`. URL-encoding of slashes in parameter values is optional.
     * @param {Object} opts Optional parameters
     * @param {String} [branch] Repository Branch
     * @param {String} [tag] A git (or other VCS) tag
     * @param {String} [job] Name of the build job.
     * @param {Boolean} [all = false)] Include not only `successful`, but also jobs with `failed`, and `cancelled` status.
     * @param {Boolean} [pr] Include PR builds in the search results? `true` - take artifact from PR builds only; `false` - do not look for artifact in PR builds; default/unspecified - look for artifact in both PR an non-PR builds. 
     * @param {module:api/ProjectApi~getProjectArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getProjectArtifact(accountName, projectSlug, artifactFileName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectArtifact");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectArtifact");
      }
      // verify the required parameter 'artifactFileName' is set
      if (artifactFileName === undefined || artifactFileName === null) {
        throw new Error("Missing the required parameter 'artifactFileName' when calling getProjectArtifact");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug,
        'artifactFileName': artifactFileName
      };
      let queryParams = {
        'branch': opts['branch'],
        'tag': opts['tag'],
        'job': opts['job'],
        'all': opts['all'],
        'pr': opts['pr']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/artifacts/{artifactFileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectBranchStatusBadge operation.
     * @callback module:api/ProjectApi~getProjectBranchStatusBadgeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project branch status badge image
     * @param {String} statusBadgeId ID of the status badge (`statusBadgeId` from `ProjectWithConfiguration`).
     * @param {String} buildBranch Build Branch
     * @param {Object} opts Optional parameters
     * @param {Boolean} [svg = false)] Return an SVG image instead of PNG?  Exclusive with `retina`.
     * @param {Boolean} [retina = false)] Return a larger image suitable for retina displays?  Exclusive with `svg`.
     * @param {String} [passingText] Text to show in badge when build is passing.
     * @param {String} [failingText] Text to show in badge when build is failing.
     * @param {String} [pendingText] Text to show in badge when build is pending.
     * @param {module:api/ProjectApi~getProjectBranchStatusBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getProjectBranchStatusBadge(statusBadgeId, buildBranch, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statusBadgeId' is set
      if (statusBadgeId === undefined || statusBadgeId === null) {
        throw new Error("Missing the required parameter 'statusBadgeId' when calling getProjectBranchStatusBadge");
      }
      // verify the required parameter 'buildBranch' is set
      if (buildBranch === undefined || buildBranch === null) {
        throw new Error("Missing the required parameter 'buildBranch' when calling getProjectBranchStatusBadge");
      }

      let pathParams = {
        'statusBadgeId': statusBadgeId,
        'buildBranch': buildBranch
      };
      let queryParams = {
        'svg': opts['svg'],
        'retina': opts['retina'],
        'passingText': opts['passingText'],
        'failingText': opts['failingText'],
        'pendingText': opts['pendingText']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'image/png'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/status/{statusBadgeId}/branch/{buildBranch}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectBuildByVersion operation.
     * @callback module:api/ProjectApi~getProjectBuildByVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectBuildResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project build by version
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {String} buildVersion Build Version (`version` property of `Build`)
     * @param {module:api/ProjectApi~getProjectBuildByVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectBuildResults}
     */
    getProjectBuildByVersion(accountName, projectSlug, buildVersion, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectBuildByVersion");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectBuildByVersion");
      }
      // verify the required parameter 'buildVersion' is set
      if (buildVersion === undefined || buildVersion === null) {
        throw new Error("Missing the required parameter 'buildVersion' when calling getProjectBuildByVersion");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug,
        'buildVersion': buildVersion
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectBuildResults;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/build/{buildVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectDeployments operation.
     * @callback module:api/ProjectApi~getProjectDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDeploymentsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project deployments
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {Number} recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber <= 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10.
     * @param {module:api/ProjectApi~getProjectDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDeploymentsResults}
     */
    getProjectDeployments(accountName, projectSlug, recordsNumber, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectDeployments");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectDeployments");
      }
      // verify the required parameter 'recordsNumber' is set
      if (recordsNumber === undefined || recordsNumber === null) {
        throw new Error("Missing the required parameter 'recordsNumber' when calling getProjectDeployments");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
        'recordsNumber': recordsNumber
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectDeploymentsResults;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectEnvironmentVariables operation.
     * @callback module:api/ProjectApi~getProjectEnvironmentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoredNameValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project environment variables
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:api/ProjectApi~getProjectEnvironmentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoredNameValue>}
     */
    getProjectEnvironmentVariables(accountName, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectEnvironmentVariables");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectEnvironmentVariables");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [StoredNameValue];
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/settings/environment-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectHistory operation.
     * @callback module:api/ProjectApi~getProjectHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project history
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {Number} recordsNumber Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber <= 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBuildId] Maximum `buildId` to include in the results (exclusive).
     * @param {String} [branch] Repository Branch
     * @param {module:api/ProjectApi~getProjectHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectHistory}
     */
    getProjectHistory(accountName, projectSlug, recordsNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectHistory");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectHistory");
      }
      // verify the required parameter 'recordsNumber' is set
      if (recordsNumber === undefined || recordsNumber === null) {
        throw new Error("Missing the required parameter 'recordsNumber' when calling getProjectHistory");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
        'recordsNumber': recordsNumber,
        'startBuildId': opts['startBuildId'],
        'branch': opts['branch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectHistory;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectLastBuild operation.
     * @callback module:api/ProjectApi~getProjectLastBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectBuildResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project last build
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:api/ProjectApi~getProjectLastBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectBuildResults}
     */
    getProjectLastBuild(accountName, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectLastBuild");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectLastBuild");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectBuildResults;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectLastBuildBranch operation.
     * @callback module:api/ProjectApi~getProjectLastBuildBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectBuildResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project last branch build
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {String} buildBranch Build Branch
     * @param {module:api/ProjectApi~getProjectLastBuildBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectBuildResults}
     */
    getProjectLastBuildBranch(accountName, projectSlug, buildBranch, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectLastBuildBranch");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectLastBuildBranch");
      }
      // verify the required parameter 'buildBranch' is set
      if (buildBranch === undefined || buildBranch === null) {
        throw new Error("Missing the required parameter 'buildBranch' when calling getProjectLastBuildBranch");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug,
        'buildBranch': buildBranch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectBuildResults;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/branch/{buildBranch}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectSettings operation.
     * @callback module:api/ProjectApi~getProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSettingsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project settings
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:api/ProjectApi~getProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSettingsResults}
     */
    getProjectSettings(accountName, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectSettings");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectSettings");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ProjectSettingsResults;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectSettingsYaml operation.
     * @callback module:api/ProjectApi~getProjectSettingsYamlCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project settings in YAML
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:api/ProjectApi~getProjectSettingsYamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getProjectSettingsYaml(accountName, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling getProjectSettingsYaml");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectSettingsYaml");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/settings/yaml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectStatusBadge operation.
     * @callback module:api/ProjectApi~getProjectStatusBadgeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project status badge image
     * @param {String} statusBadgeId ID of the status badge (`statusBadgeId` from `ProjectWithConfiguration`).
     * @param {Object} opts Optional parameters
     * @param {Boolean} [svg = false)] Return an SVG image instead of PNG?  Exclusive with `retina`.
     * @param {Boolean} [retina = false)] Return a larger image suitable for retina displays?  Exclusive with `svg`.
     * @param {String} [passingText] Text to show in badge when build is passing.
     * @param {String} [failingText] Text to show in badge when build is failing.
     * @param {String} [pendingText] Text to show in badge when build is pending.
     * @param {module:api/ProjectApi~getProjectStatusBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getProjectStatusBadge(statusBadgeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statusBadgeId' is set
      if (statusBadgeId === undefined || statusBadgeId === null) {
        throw new Error("Missing the required parameter 'statusBadgeId' when calling getProjectStatusBadge");
      }

      let pathParams = {
        'statusBadgeId': statusBadgeId
      };
      let queryParams = {
        'svg': opts['svg'],
        'retina': opts['retina'],
        'passingText': opts['passingText'],
        'failingText': opts['failingText'],
        'pendingText': opts['pendingText']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'image/png'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/status/{statusBadgeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects
     * @param {module:api/ProjectApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    getProjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicProjectStatusBadge operation.
     * @callback module:api/ProjectApi~getPublicProjectStatusBadgeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status badge image for a project with a public repository
     * @param {module:model/String} badgeRepoProvider Repository provider supported for badges
     * @param {String} repoAccountName Account name with repository provider
     * @param {String} repoSlug Slug (URL component) of repository.
     * @param {Object} opts Optional parameters
     * @param {String} [branch] Repository Branch
     * @param {Boolean} [svg = false)] Return an SVG image instead of PNG?  Exclusive with `retina`.
     * @param {Boolean} [retina = false)] Return a larger image suitable for retina displays?  Exclusive with `svg`.
     * @param {String} [passingText] Text to show in badge when build is passing.
     * @param {String} [failingText] Text to show in badge when build is failing.
     * @param {String} [pendingText] Text to show in badge when build is pending.
     * @param {module:api/ProjectApi~getPublicProjectStatusBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPublicProjectStatusBadge(badgeRepoProvider, repoAccountName, repoSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'badgeRepoProvider' is set
      if (badgeRepoProvider === undefined || badgeRepoProvider === null) {
        throw new Error("Missing the required parameter 'badgeRepoProvider' when calling getPublicProjectStatusBadge");
      }
      // verify the required parameter 'repoAccountName' is set
      if (repoAccountName === undefined || repoAccountName === null) {
        throw new Error("Missing the required parameter 'repoAccountName' when calling getPublicProjectStatusBadge");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPublicProjectStatusBadge");
      }

      let pathParams = {
        'badgeRepoProvider': badgeRepoProvider,
        'repoAccountName': repoAccountName,
        'repoSlug': repoSlug
      };
      let queryParams = {
        'branch': opts['branch'],
        'svg': opts['svg'],
        'retina': opts['retina'],
        'passingText': opts['passingText'],
        'failingText': opts['failingText'],
        'pendingText': opts['pendingText']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'image/png'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/status/{badgeRepoProvider}/{repoAccountName}/{repoSlug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project
     * @param {module:model/ProjectWithConfiguration} body 
     * @param {module:api/ProjectApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProject(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectBuildNumber operation.
     * @callback module:api/ProjectApi~updateProjectBuildNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project build number
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {module:model/ProjectBuildNumberUpdate} body 
     * @param {module:api/ProjectApi~updateProjectBuildNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectBuildNumber(accountName, projectSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling updateProjectBuildNumber");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling updateProjectBuildNumber");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProjectBuildNumber");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/settings/build-number', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectEnvironmentVariables operation.
     * @callback module:api/ProjectApi~updateProjectEnvironmentVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project environment variables
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {Array.<module:model/StoredNameValue>} body 
     * @param {module:api/ProjectApi~updateProjectEnvironmentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectEnvironmentVariables(accountName, projectSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling updateProjectEnvironmentVariables");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling updateProjectEnvironmentVariables");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProjectEnvironmentVariables");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/settings/environment-variables', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectSettingsYaml operation.
     * @callback module:api/ProjectApi~updateProjectSettingsYamlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project settings in YAML
     * @param {String} accountName AppVeyor account name on which to operate. Accounts for which a user has access are listed on the [Security page of the user profile](https://ci.appveyor.com/security) (when logged in). The user account is also the `accountName` property of `UserAccount`.
     * @param {String} projectSlug Project Slug
     * @param {File} body The body of requests should contain YAML data.  It is unclear how to specify this since the OpenAPI spec requires `schema` without `type` for `in: body` parameters and does not allow `type: file` in `schema`.  See https://github.com/OAI/OpenAPI-Specification/issues/326 swagger-codegen (for Java, probably others) allows a binary string body parameter with non-application/json `consumes` to be passed through in the request body without conversion to JSON. 
     * @param {module:api/ProjectApi~updateProjectSettingsYamlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectSettingsYaml(accountName, projectSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling updateProjectSettingsYaml");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling updateProjectSettingsYaml");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProjectSettingsYaml");
      }

      let pathParams = {
        'accountName': accountName,
        'projectSlug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{accountName}/{projectSlug}/settings/yaml', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
