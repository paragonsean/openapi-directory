/**
 * AppVeyor REST API
 * AppVeyor is a hosted continuous integration service which runs on Microsoft Windows.  The AppVeyor REST API provides a RESTful way to interact with the AppVeyor service.  This includes managing projects, builds, deployments, and the teams that build them.  Additional help and discussion of the AppVeyor REST API is available at http://help.appveyor.com/discussions  This Swagger definition is an **unofficial** description of the AppVeyor REST API maintained at https://github.com/kevinoid/appveyor-swagger Please report any issues or suggestions for this Swagger definition at https://github.com/kevinoid/appveyor-swagger/issues/new  #### API Conventions  Fields which are missing from update operations (`PUT` requests) are typically reset to their default values.  So although most fields are not technically required, they should usually be specified in practice. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@appveyor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeploymentEnvironmentAddition from '../model/DeploymentEnvironmentAddition';
import DeploymentEnvironmentDeploymentsResults from '../model/DeploymentEnvironmentDeploymentsResults';
import DeploymentEnvironmentLookupModel from '../model/DeploymentEnvironmentLookupModel';
import DeploymentEnvironmentSettingsResults from '../model/DeploymentEnvironmentSettingsResults';
import DeploymentEnvironmentWithSettings from '../model/DeploymentEnvironmentWithSettings';
import Error from '../model/Error';

/**
* Environment service.
* @module api/EnvironmentApi
* @version 1.0.0
*/
export default class EnvironmentApi {

    /**
    * Constructs a new EnvironmentApi. 
    * @alias module:api/EnvironmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addEnvironment operation.
     * @callback module:api/EnvironmentApi~addEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironmentWithSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add environment
     * @param {module:model/DeploymentEnvironmentAddition} body 
     * @param {module:api/EnvironmentApi~addEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironmentWithSettings}
     */
    addEnvironment(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addEnvironment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DeploymentEnvironmentWithSettings;
      return this.apiClient.callApi(
        '/environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironment operation.
     * @callback module:api/EnvironmentApi~deleteEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete environment
     * @param {Number} deploymentEnvironmentId Deployment Environment ID (`deploymentEnvironmentId` property of `DeploymentEnvironment`) 
     * @param {module:api/EnvironmentApi~deleteEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEnvironment(deploymentEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentEnvironmentId' is set
      if (deploymentEnvironmentId === undefined || deploymentEnvironmentId === null) {
        throw new Error("Missing the required parameter 'deploymentEnvironmentId' when calling deleteEnvironment");
      }

      let pathParams = {
        'deploymentEnvironmentId': deploymentEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{deploymentEnvironmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentDeployments operation.
     * @callback module:api/EnvironmentApi~getEnvironmentDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironmentDeploymentsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get environment deployments
     * @param {Number} deploymentEnvironmentId Deployment Environment ID (`deploymentEnvironmentId` property of `DeploymentEnvironment`) 
     * @param {module:api/EnvironmentApi~getEnvironmentDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironmentDeploymentsResults}
     */
    getEnvironmentDeployments(deploymentEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentEnvironmentId' is set
      if (deploymentEnvironmentId === undefined || deploymentEnvironmentId === null) {
        throw new Error("Missing the required parameter 'deploymentEnvironmentId' when calling getEnvironmentDeployments");
      }

      let pathParams = {
        'deploymentEnvironmentId': deploymentEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DeploymentEnvironmentDeploymentsResults;
      return this.apiClient.callApi(
        '/environments/{deploymentEnvironmentId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentSettings operation.
     * @callback module:api/EnvironmentApi~getEnvironmentSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironmentSettingsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get environment settings
     * @param {Number} deploymentEnvironmentId Deployment Environment ID (`deploymentEnvironmentId` property of `DeploymentEnvironment`) 
     * @param {module:api/EnvironmentApi~getEnvironmentSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironmentSettingsResults}
     */
    getEnvironmentSettings(deploymentEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentEnvironmentId' is set
      if (deploymentEnvironmentId === undefined || deploymentEnvironmentId === null) {
        throw new Error("Missing the required parameter 'deploymentEnvironmentId' when calling getEnvironmentSettings");
      }

      let pathParams = {
        'deploymentEnvironmentId': deploymentEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DeploymentEnvironmentSettingsResults;
      return this.apiClient.callApi(
        '/environments/{deploymentEnvironmentId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironments operation.
     * @callback module:api/EnvironmentApi~getEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeploymentEnvironmentLookupModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get environments
     * @param {module:api/EnvironmentApi~getEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeploymentEnvironmentLookupModel>}
     */
    getEnvironments(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [DeploymentEnvironmentLookupModel];
      return this.apiClient.callApi(
        '/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEnvironment operation.
     * @callback module:api/EnvironmentApi~updateEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironmentWithSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update environment
     * @param {module:model/DeploymentEnvironmentWithSettings} body 
     * @param {module:api/EnvironmentApi~updateEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironmentWithSettings}
     */
    updateEnvironment(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateEnvironment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DeploymentEnvironmentWithSettings;
      return this.apiClient.callApi(
        '/environments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
