/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreCommentCreation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreCommentCreation::OAIScoreCommentCreation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreCommentCreation::OAIScoreCommentCreation() {
    this->initializeModel();
}

OAIScoreCommentCreation::~OAIScoreCommentCreation() {}

void OAIScoreCommentCreation::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_raw_comment_isSet = false;
    m_raw_comment_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIScoreCommentCreation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreCommentCreation::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_raw_comment_isValid = ::OpenAPI::fromJsonValue(m_raw_comment, json[QString("rawComment")]);
    m_raw_comment_isSet = !json[QString("rawComment")].isNull() && m_raw_comment_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("replyTo")]);
    m_reply_to_isSet = !json[QString("replyTo")].isNull() && m_reply_to_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIScoreCommentCreation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreCommentCreation::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_raw_comment_isSet) {
        obj.insert(QString("rawComment"), ::OpenAPI::toJsonValue(m_raw_comment));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("replyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

QString OAIScoreCommentCreation::getComment() const {
    return m_comment;
}
void OAIScoreCommentCreation::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIScoreCommentCreation::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIScoreCommentCreation::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIScoreCommentContext OAIScoreCommentCreation::getContext() const {
    return m_context;
}
void OAIScoreCommentCreation::setContext(const OAIScoreCommentContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIScoreCommentCreation::is_context_Set() const{
    return m_context_isSet;
}

bool OAIScoreCommentCreation::is_context_Valid() const{
    return m_context_isValid;
}

QList<QString> OAIScoreCommentCreation::getMentions() const {
    return m_mentions;
}
void OAIScoreCommentCreation::setMentions(const QList<QString> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIScoreCommentCreation::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIScoreCommentCreation::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QString OAIScoreCommentCreation::getRawComment() const {
    return m_raw_comment;
}
void OAIScoreCommentCreation::setRawComment(const QString &raw_comment) {
    m_raw_comment = raw_comment;
    m_raw_comment_isSet = true;
}

bool OAIScoreCommentCreation::is_raw_comment_Set() const{
    return m_raw_comment_isSet;
}

bool OAIScoreCommentCreation::is_raw_comment_Valid() const{
    return m_raw_comment_isValid;
}

QString OAIScoreCommentCreation::getReplyTo() const {
    return m_reply_to;
}
void OAIScoreCommentCreation::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAIScoreCommentCreation::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAIScoreCommentCreation::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAIScoreCommentCreation::getRevision() const {
    return m_revision;
}
void OAIScoreCommentCreation::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIScoreCommentCreation::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIScoreCommentCreation::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIScoreCommentCreation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreCommentCreation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && true;
}

} // namespace OpenAPI
