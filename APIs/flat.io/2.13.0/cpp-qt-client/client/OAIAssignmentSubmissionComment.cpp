/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentSubmissionComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentSubmissionComment::OAIAssignmentSubmissionComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentSubmissionComment::OAIAssignmentSubmissionComment() {
    this->initializeModel();
}

OAIAssignmentSubmissionComment::~OAIAssignmentSubmissionComment() {}

void OAIAssignmentSubmissionComment::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_submission_isSet = false;
    m_submission_isValid = false;

    m_unread_isSet = false;
    m_unread_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAssignmentSubmissionComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentSubmissionComment::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_submission_isValid = ::OpenAPI::fromJsonValue(m_submission, json[QString("submission")]);
    m_submission_isSet = !json[QString("submission")].isNull() && m_submission_isValid;

    m_unread_isValid = ::OpenAPI::fromJsonValue(m_unread, json[QString("unread")]);
    m_unread_isSet = !json[QString("unread")].isNull() && m_unread_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAssignmentSubmissionComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentSubmissionComment::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_submission_isSet) {
        obj.insert(QString("submission"), ::OpenAPI::toJsonValue(m_submission));
    }
    if (m_unread_isSet) {
        obj.insert(QString("unread"), ::OpenAPI::toJsonValue(m_unread));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAssignmentSubmissionComment::getComment() const {
    return m_comment;
}
void OAIAssignmentSubmissionComment::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIAssignmentSubmissionComment::is_comment_Valid() const{
    return m_comment_isValid;
}

QDateTime OAIAssignmentSubmissionComment::getDate() const {
    return m_date;
}
void OAIAssignmentSubmissionComment::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAssignmentSubmissionComment::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAssignmentSubmissionComment::getId() const {
    return m_id;
}
void OAIAssignmentSubmissionComment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssignmentSubmissionComment::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAssignmentSubmissionComment::getModificationDate() const {
    return m_modification_date;
}
void OAIAssignmentSubmissionComment::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIAssignmentSubmissionComment::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QString OAIAssignmentSubmissionComment::getSubmission() const {
    return m_submission;
}
void OAIAssignmentSubmissionComment::setSubmission(const QString &submission) {
    m_submission = submission;
    m_submission_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_submission_Set() const{
    return m_submission_isSet;
}

bool OAIAssignmentSubmissionComment::is_submission_Valid() const{
    return m_submission_isValid;
}

bool OAIAssignmentSubmissionComment::isUnread() const {
    return m_unread;
}
void OAIAssignmentSubmissionComment::setUnread(const bool &unread) {
    m_unread = unread;
    m_unread_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_unread_Set() const{
    return m_unread_isSet;
}

bool OAIAssignmentSubmissionComment::is_unread_Valid() const{
    return m_unread_isValid;
}

QString OAIAssignmentSubmissionComment::getUser() const {
    return m_user;
}
void OAIAssignmentSubmissionComment::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAssignmentSubmissionComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAssignmentSubmissionComment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAssignmentSubmissionComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentSubmissionComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
