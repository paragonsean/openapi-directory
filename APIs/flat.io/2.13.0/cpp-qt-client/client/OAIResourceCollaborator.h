/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceCollaborator.h
 *
 * A collaborator of a score. The &#x60;userEmail&#x60; and &#x60;group&#x60; are only available if the requesting user is a collaborator of the related score (in this case these permissions will eventualy not be listed and exposed publicly). 
 */

#ifndef OAIResourceCollaborator_H
#define OAIResourceCollaborator_H

#include <QJsonObject>

#include "OAIGroup.h"
#include "OAIUserPublic.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGroup;
class OAIUserPublic;

class OAIResourceCollaborator : public OAIObject {
public:
    OAIResourceCollaborator();
    OAIResourceCollaborator(QString json);
    ~OAIResourceCollaborator() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAclAdmin() const;
    void setAclAdmin(const bool &acl_admin);
    bool is_acl_admin_Set() const;
    bool is_acl_admin_Valid() const;

    bool isAclRead() const;
    void setAclRead(const bool &acl_read);
    bool is_acl_read_Set() const;
    bool is_acl_read_Valid() const;

    bool isAclWrite() const;
    void setAclWrite(const bool &acl_write);
    bool is_acl_write_Set() const;
    bool is_acl_write_Valid() const;

    bool isIsCollaborator() const;
    void setIsCollaborator(const bool &is_collaborator);
    bool is_is_collaborator_Set() const;
    bool is_is_collaborator_Valid() const;

    QString getCollection() const;
    void setCollection(const QString &collection);
    bool is_collection_Set() const;
    bool is_collection_Valid() const;

    OAIGroup getGroup() const;
    void setGroup(const OAIGroup &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInvited() const;
    void setInvited(const bool &invited);
    bool is_invited_Set() const;
    bool is_invited_Valid() const;

    QString getScore() const;
    void setScore(const QString &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    OAIUserPublic getUser() const;
    void setUser(const OAIUserPublic &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUserEmail() const;
    void setUserEmail(const QString &user_email);
    bool is_user_email_Set() const;
    bool is_user_email_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_acl_admin;
    bool m_acl_admin_isSet;
    bool m_acl_admin_isValid;

    bool m_acl_read;
    bool m_acl_read_isSet;
    bool m_acl_read_isValid;

    bool m_acl_write;
    bool m_acl_write_isSet;
    bool m_acl_write_isValid;

    bool m_is_collaborator;
    bool m_is_collaborator_isSet;
    bool m_is_collaborator_isValid;

    QString m_collection;
    bool m_collection_isSet;
    bool m_collection_isValid;

    OAIGroup m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_invited;
    bool m_invited_isSet;
    bool m_invited_isValid;

    QString m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    OAIUserPublic m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_user_email;
    bool m_user_email_isSet;
    bool m_user_email_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceCollaborator)

#endif // OAIResourceCollaborator_H
