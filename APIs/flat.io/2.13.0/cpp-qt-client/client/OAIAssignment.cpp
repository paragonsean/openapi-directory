/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignment::OAIAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignment::OAIAssignment() {
    this->initializeModel();
}

OAIAssignment::~OAIAssignment() {}

void OAIAssignment::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_canvas_isSet = false;
    m_canvas_isValid = false;

    m_classroom_isSet = false;
    m_classroom_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_cover_file_isSet = false;
    m_cover_file_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_google_classroom_isSet = false;
    m_google_classroom_isValid = false;

    m_lti_isSet = false;
    m_lti_isValid = false;

    m_max_points_isSet = false;
    m_max_points_isValid = false;

    m_mfc_isSet = false;
    m_mfc_isValid = false;

    m_microsoft_graph_isSet = false;
    m_microsoft_graph_isValid = false;

    m_scheduled_date_isSet = false;
    m_scheduled_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submissions_isSet = false;
    m_submissions_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignment::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_canvas_isValid = ::OpenAPI::fromJsonValue(m_canvas, json[QString("canvas")]);
    m_canvas_isSet = !json[QString("canvas")].isNull() && m_canvas_isValid;

    m_classroom_isValid = ::OpenAPI::fromJsonValue(m_classroom, json[QString("classroom")]);
    m_classroom_isSet = !json[QString("classroom")].isNull() && m_classroom_isValid;

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_cover_file_isValid = ::OpenAPI::fromJsonValue(m_cover_file, json[QString("coverFile")]);
    m_cover_file_isSet = !json[QString("coverFile")].isNull() && m_cover_file_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_google_classroom_isValid = ::OpenAPI::fromJsonValue(m_google_classroom, json[QString("googleClassroom")]);
    m_google_classroom_isSet = !json[QString("googleClassroom")].isNull() && m_google_classroom_isValid;

    m_lti_isValid = ::OpenAPI::fromJsonValue(m_lti, json[QString("lti")]);
    m_lti_isSet = !json[QString("lti")].isNull() && m_lti_isValid;

    m_max_points_isValid = ::OpenAPI::fromJsonValue(m_max_points, json[QString("maxPoints")]);
    m_max_points_isSet = !json[QString("maxPoints")].isNull() && m_max_points_isValid;

    m_mfc_isValid = ::OpenAPI::fromJsonValue(m_mfc, json[QString("mfc")]);
    m_mfc_isSet = !json[QString("mfc")].isNull() && m_mfc_isValid;

    m_microsoft_graph_isValid = ::OpenAPI::fromJsonValue(m_microsoft_graph, json[QString("microsoftGraph")]);
    m_microsoft_graph_isSet = !json[QString("microsoftGraph")].isNull() && m_microsoft_graph_isValid;

    m_scheduled_date_isValid = ::OpenAPI::fromJsonValue(m_scheduled_date, json[QString("scheduledDate")]);
    m_scheduled_date_isSet = !json[QString("scheduledDate")].isNull() && m_scheduled_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submissions_isValid = ::OpenAPI::fromJsonValue(m_submissions, json[QString("submissions")]);
    m_submissions_isSet = !json[QString("submissions")].isNull() && m_submissions_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_canvas.isSet()) {
        obj.insert(QString("canvas"), ::OpenAPI::toJsonValue(m_canvas));
    }
    if (m_classroom_isSet) {
        obj.insert(QString("classroom"), ::OpenAPI::toJsonValue(m_classroom));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_cover_file_isSet) {
        obj.insert(QString("coverFile"), ::OpenAPI::toJsonValue(m_cover_file));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_google_classroom.isSet()) {
        obj.insert(QString("googleClassroom"), ::OpenAPI::toJsonValue(m_google_classroom));
    }
    if (m_lti.isSet()) {
        obj.insert(QString("lti"), ::OpenAPI::toJsonValue(m_lti));
    }
    if (m_max_points_isSet) {
        obj.insert(QString("maxPoints"), ::OpenAPI::toJsonValue(m_max_points));
    }
    if (m_mfc.isSet()) {
        obj.insert(QString("mfc"), ::OpenAPI::toJsonValue(m_mfc));
    }
    if (m_microsoft_graph.isSet()) {
        obj.insert(QString("microsoftGraph"), ::OpenAPI::toJsonValue(m_microsoft_graph));
    }
    if (m_scheduled_date_isSet) {
        obj.insert(QString("scheduledDate"), ::OpenAPI::toJsonValue(m_scheduled_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submissions.size() > 0) {
        obj.insert(QString("submissions"), ::OpenAPI::toJsonValue(m_submissions));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIMediaAttachment> OAIAssignment::getAttachments() const {
    return m_attachments;
}
void OAIAssignment::setAttachments(const QList<OAIMediaAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIAssignment::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIAssignment::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIAssignment_canvas OAIAssignment::getCanvas() const {
    return m_canvas;
}
void OAIAssignment::setCanvas(const OAIAssignment_canvas &canvas) {
    m_canvas = canvas;
    m_canvas_isSet = true;
}

bool OAIAssignment::is_canvas_Set() const{
    return m_canvas_isSet;
}

bool OAIAssignment::is_canvas_Valid() const{
    return m_canvas_isValid;
}

QString OAIAssignment::getClassroom() const {
    return m_classroom;
}
void OAIAssignment::setClassroom(const QString &classroom) {
    m_classroom = classroom;
    m_classroom_isSet = true;
}

bool OAIAssignment::is_classroom_Set() const{
    return m_classroom_isSet;
}

bool OAIAssignment::is_classroom_Valid() const{
    return m_classroom_isValid;
}

QString OAIAssignment::getCover() const {
    return m_cover;
}
void OAIAssignment::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAIAssignment::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAIAssignment::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAIAssignment::getCoverFile() const {
    return m_cover_file;
}
void OAIAssignment::setCoverFile(const QString &cover_file) {
    m_cover_file = cover_file;
    m_cover_file_isSet = true;
}

bool OAIAssignment::is_cover_file_Set() const{
    return m_cover_file_isSet;
}

bool OAIAssignment::is_cover_file_Valid() const{
    return m_cover_file_isValid;
}

QDateTime OAIAssignment::getCreationDate() const {
    return m_creation_date;
}
void OAIAssignment::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAssignment::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAssignment::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIAssignment::getCreator() const {
    return m_creator;
}
void OAIAssignment::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIAssignment::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIAssignment::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIAssignment::getDescription() const {
    return m_description;
}
void OAIAssignment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssignment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssignment::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAssignment::getDueDate() const {
    return m_due_date;
}
void OAIAssignment::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIAssignment::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIAssignment::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIGoogleClassroomCoursework OAIAssignment::getGoogleClassroom() const {
    return m_google_classroom;
}
void OAIAssignment::setGoogleClassroom(const OAIGoogleClassroomCoursework &google_classroom) {
    m_google_classroom = google_classroom;
    m_google_classroom_isSet = true;
}

bool OAIAssignment::is_google_classroom_Set() const{
    return m_google_classroom_isSet;
}

bool OAIAssignment::is_google_classroom_Valid() const{
    return m_google_classroom_isValid;
}

OAIAssignment_lti OAIAssignment::getLti() const {
    return m_lti;
}
void OAIAssignment::setLti(const OAIAssignment_lti &lti) {
    m_lti = lti;
    m_lti_isSet = true;
}

bool OAIAssignment::is_lti_Set() const{
    return m_lti_isSet;
}

bool OAIAssignment::is_lti_Valid() const{
    return m_lti_isValid;
}

double OAIAssignment::getMaxPoints() const {
    return m_max_points;
}
void OAIAssignment::setMaxPoints(const double &max_points) {
    m_max_points = max_points;
    m_max_points_isSet = true;
}

bool OAIAssignment::is_max_points_Set() const{
    return m_max_points_isSet;
}

bool OAIAssignment::is_max_points_Valid() const{
    return m_max_points_isValid;
}

OAIAssignment_mfc OAIAssignment::getMfc() const {
    return m_mfc;
}
void OAIAssignment::setMfc(const OAIAssignment_mfc &mfc) {
    m_mfc = mfc;
    m_mfc_isSet = true;
}

bool OAIAssignment::is_mfc_Set() const{
    return m_mfc_isSet;
}

bool OAIAssignment::is_mfc_Valid() const{
    return m_mfc_isValid;
}

OAIMicrosoftGraphAssignment OAIAssignment::getMicrosoftGraph() const {
    return m_microsoft_graph;
}
void OAIAssignment::setMicrosoftGraph(const OAIMicrosoftGraphAssignment &microsoft_graph) {
    m_microsoft_graph = microsoft_graph;
    m_microsoft_graph_isSet = true;
}

bool OAIAssignment::is_microsoft_graph_Set() const{
    return m_microsoft_graph_isSet;
}

bool OAIAssignment::is_microsoft_graph_Valid() const{
    return m_microsoft_graph_isValid;
}

QDateTime OAIAssignment::getScheduledDate() const {
    return m_scheduled_date;
}
void OAIAssignment::setScheduledDate(const QDateTime &scheduled_date) {
    m_scheduled_date = scheduled_date;
    m_scheduled_date_isSet = true;
}

bool OAIAssignment::is_scheduled_date_Set() const{
    return m_scheduled_date_isSet;
}

bool OAIAssignment::is_scheduled_date_Valid() const{
    return m_scheduled_date_isValid;
}

QString OAIAssignment::getState() const {
    return m_state;
}
void OAIAssignment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAssignment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAssignment::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIAssignmentSubmission> OAIAssignment::getSubmissions() const {
    return m_submissions;
}
void OAIAssignment::setSubmissions(const QList<OAIAssignmentSubmission> &submissions) {
    m_submissions = submissions;
    m_submissions_isSet = true;
}

bool OAIAssignment::is_submissions_Set() const{
    return m_submissions_isSet;
}

bool OAIAssignment::is_submissions_Valid() const{
    return m_submissions_isValid;
}

QString OAIAssignment::getTitle() const {
    return m_title;
}
void OAIAssignment::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAssignment::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAssignment::is_title_Valid() const{
    return m_title_isValid;
}

OAIAssignmentType OAIAssignment::getType() const {
    return m_type;
}
void OAIAssignment::setType(const OAIAssignmentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssignment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssignment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_canvas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classroom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_classroom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lti.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
