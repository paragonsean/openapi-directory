/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection_capabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection_capabilities::OAICollection_capabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection_capabilities::OAICollection_capabilities() {
    this->initializeModel();
}

OAICollection_capabilities::~OAICollection_capabilities() {}

void OAICollection_capabilities::initializeModel() {

    m_can_add_scores_isSet = false;
    m_can_add_scores_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_delete_scores_isSet = false;
    m_can_delete_scores_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_share_isSet = false;
    m_can_share_isValid = false;
}

void OAICollection_capabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection_capabilities::fromJsonObject(QJsonObject json) {

    m_can_add_scores_isValid = ::OpenAPI::fromJsonValue(m_can_add_scores, json[QString("canAddScores")]);
    m_can_add_scores_isSet = !json[QString("canAddScores")].isNull() && m_can_add_scores_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("canDelete")]);
    m_can_delete_isSet = !json[QString("canDelete")].isNull() && m_can_delete_isValid;

    m_can_delete_scores_isValid = ::OpenAPI::fromJsonValue(m_can_delete_scores, json[QString("canDeleteScores")]);
    m_can_delete_scores_isSet = !json[QString("canDeleteScores")].isNull() && m_can_delete_scores_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("canEdit")]);
    m_can_edit_isSet = !json[QString("canEdit")].isNull() && m_can_edit_isValid;

    m_can_share_isValid = ::OpenAPI::fromJsonValue(m_can_share, json[QString("canShare")]);
    m_can_share_isSet = !json[QString("canShare")].isNull() && m_can_share_isValid;
}

QString OAICollection_capabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection_capabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_can_add_scores_isSet) {
        obj.insert(QString("canAddScores"), ::OpenAPI::toJsonValue(m_can_add_scores));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("canDelete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_delete_scores_isSet) {
        obj.insert(QString("canDeleteScores"), ::OpenAPI::toJsonValue(m_can_delete_scores));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("canEdit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_share_isSet) {
        obj.insert(QString("canShare"), ::OpenAPI::toJsonValue(m_can_share));
    }
    return obj;
}

bool OAICollection_capabilities::isCanAddScores() const {
    return m_can_add_scores;
}
void OAICollection_capabilities::setCanAddScores(const bool &can_add_scores) {
    m_can_add_scores = can_add_scores;
    m_can_add_scores_isSet = true;
}

bool OAICollection_capabilities::is_can_add_scores_Set() const{
    return m_can_add_scores_isSet;
}

bool OAICollection_capabilities::is_can_add_scores_Valid() const{
    return m_can_add_scores_isValid;
}

bool OAICollection_capabilities::isCanDelete() const {
    return m_can_delete;
}
void OAICollection_capabilities::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAICollection_capabilities::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAICollection_capabilities::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAICollection_capabilities::isCanDeleteScores() const {
    return m_can_delete_scores;
}
void OAICollection_capabilities::setCanDeleteScores(const bool &can_delete_scores) {
    m_can_delete_scores = can_delete_scores;
    m_can_delete_scores_isSet = true;
}

bool OAICollection_capabilities::is_can_delete_scores_Set() const{
    return m_can_delete_scores_isSet;
}

bool OAICollection_capabilities::is_can_delete_scores_Valid() const{
    return m_can_delete_scores_isValid;
}

bool OAICollection_capabilities::isCanEdit() const {
    return m_can_edit;
}
void OAICollection_capabilities::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAICollection_capabilities::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAICollection_capabilities::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAICollection_capabilities::isCanShare() const {
    return m_can_share;
}
void OAICollection_capabilities::setCanShare(const bool &can_share) {
    m_can_share = can_share;
    m_can_share_isSet = true;
}

bool OAICollection_capabilities::is_can_share_Set() const{
    return m_can_share_isSet;
}

bool OAICollection_capabilities::is_can_share_Valid() const{
    return m_can_share_isValid;
}

bool OAICollection_capabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_add_scores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_scores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_share_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection_capabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
