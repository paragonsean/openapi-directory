/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentSubmissionHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentSubmissionHistory::OAIAssignmentSubmissionHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentSubmissionHistory::OAIAssignmentSubmissionHistory() {
    this->initializeModel();
}

OAIAssignmentSubmissionHistory::~OAIAssignmentSubmissionHistory() {}

void OAIAssignmentSubmissionHistory::initializeModel() {

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_draft_grade_isSet = false;
    m_draft_grade_isValid = false;

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_max_points_isSet = false;
    m_max_points_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIAssignmentSubmissionHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentSubmissionHistory::fromJsonObject(QJsonObject json) {

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_draft_grade_isValid = ::OpenAPI::fromJsonValue(m_draft_grade, json[QString("draftGrade")]);
    m_draft_grade_isSet = !json[QString("draftGrade")].isNull() && m_draft_grade_isValid;

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_max_points_isValid = ::OpenAPI::fromJsonValue(m_max_points, json[QString("maxPoints")]);
    m_max_points_isSet = !json[QString("maxPoints")].isNull() && m_max_points_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIAssignmentSubmissionHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentSubmissionHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment.isSet()) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_draft_grade_isSet) {
        obj.insert(QString("draftGrade"), ::OpenAPI::toJsonValue(m_draft_grade));
    }
    if (m_grade_isSet) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_max_points_isSet) {
        obj.insert(QString("maxPoints"), ::OpenAPI::toJsonValue(m_max_points));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

OAIAssignmentSubmissionHistory_attachment OAIAssignmentSubmissionHistory::getAttachment() const {
    return m_attachment;
}
void OAIAssignmentSubmissionHistory::setAttachment(const OAIAssignmentSubmissionHistory_attachment &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAIAssignmentSubmissionHistory::is_attachment_Valid() const{
    return m_attachment_isValid;
}

QDateTime OAIAssignmentSubmissionHistory::getDate() const {
    return m_date;
}
void OAIAssignmentSubmissionHistory::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAssignmentSubmissionHistory::is_date_Valid() const{
    return m_date_isValid;
}

double OAIAssignmentSubmissionHistory::getDraftGrade() const {
    return m_draft_grade;
}
void OAIAssignmentSubmissionHistory::setDraftGrade(const double &draft_grade) {
    m_draft_grade = draft_grade;
    m_draft_grade_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_draft_grade_Set() const{
    return m_draft_grade_isSet;
}

bool OAIAssignmentSubmissionHistory::is_draft_grade_Valid() const{
    return m_draft_grade_isValid;
}

double OAIAssignmentSubmissionHistory::getGrade() const {
    return m_grade;
}
void OAIAssignmentSubmissionHistory::setGrade(const double &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIAssignmentSubmissionHistory::is_grade_Valid() const{
    return m_grade_isValid;
}

double OAIAssignmentSubmissionHistory::getMaxPoints() const {
    return m_max_points;
}
void OAIAssignmentSubmissionHistory::setMaxPoints(const double &max_points) {
    m_max_points = max_points;
    m_max_points_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_max_points_Set() const{
    return m_max_points_isSet;
}

bool OAIAssignmentSubmissionHistory::is_max_points_Valid() const{
    return m_max_points_isValid;
}

OAIAssignmentSubmissionState OAIAssignmentSubmissionHistory::getState() const {
    return m_state;
}
void OAIAssignmentSubmissionHistory::setState(const OAIAssignmentSubmissionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAssignmentSubmissionHistory::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIAssignmentSubmissionHistory::getUsers() const {
    return m_users;
}
void OAIAssignmentSubmissionHistory::setUsers(const QList<QString> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIAssignmentSubmissionHistory::is_users_Set() const{
    return m_users_isSet;
}

bool OAIAssignmentSubmissionHistory::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIAssignmentSubmissionHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentSubmissionHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
