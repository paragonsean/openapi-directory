/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassDetails::OAIClassDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassDetails::OAIClassDetails() {
    this->initializeModel();
}

OAIClassDetails::~OAIClassDetails() {}

void OAIClassDetails::initializeModel() {

    m_assignments_count_isSet = false;
    m_assignments_count_isValid = false;

    m_canvas_isSet = false;
    m_canvas_isValid = false;

    m_clever_isSet = false;
    m_clever_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enrollment_code_isSet = false;
    m_enrollment_code_isValid = false;

    m_google_classroom_isSet = false;
    m_google_classroom_isValid = false;

    m_google_drive_isSet = false;
    m_google_drive_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_lti_isSet = false;
    m_lti_isValid = false;

    m_mfc_isSet = false;
    m_mfc_isValid = false;

    m_microsoft_graph_isSet = false;
    m_microsoft_graph_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_students_group_isSet = false;
    m_students_group_isValid = false;

    m_teachers_group_isSet = false;
    m_teachers_group_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;
}

void OAIClassDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassDetails::fromJsonObject(QJsonObject json) {

    m_assignments_count_isValid = ::OpenAPI::fromJsonValue(m_assignments_count, json[QString("assignmentsCount")]);
    m_assignments_count_isSet = !json[QString("assignmentsCount")].isNull() && m_assignments_count_isValid;

    m_canvas_isValid = ::OpenAPI::fromJsonValue(m_canvas, json[QString("canvas")]);
    m_canvas_isSet = !json[QString("canvas")].isNull() && m_canvas_isValid;

    m_clever_isValid = ::OpenAPI::fromJsonValue(m_clever, json[QString("clever")]);
    m_clever_isSet = !json[QString("clever")].isNull() && m_clever_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enrollment_code_isValid = ::OpenAPI::fromJsonValue(m_enrollment_code, json[QString("enrollmentCode")]);
    m_enrollment_code_isSet = !json[QString("enrollmentCode")].isNull() && m_enrollment_code_isValid;

    m_google_classroom_isValid = ::OpenAPI::fromJsonValue(m_google_classroom, json[QString("googleClassroom")]);
    m_google_classroom_isSet = !json[QString("googleClassroom")].isNull() && m_google_classroom_isValid;

    m_google_drive_isValid = ::OpenAPI::fromJsonValue(m_google_drive, json[QString("googleDrive")]);
    m_google_drive_isSet = !json[QString("googleDrive")].isNull() && m_google_drive_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_lti_isValid = ::OpenAPI::fromJsonValue(m_lti, json[QString("lti")]);
    m_lti_isSet = !json[QString("lti")].isNull() && m_lti_isValid;

    m_mfc_isValid = ::OpenAPI::fromJsonValue(m_mfc, json[QString("mfc")]);
    m_mfc_isSet = !json[QString("mfc")].isNull() && m_mfc_isValid;

    m_microsoft_graph_isValid = ::OpenAPI::fromJsonValue(m_microsoft_graph, json[QString("microsoftGraph")]);
    m_microsoft_graph_isSet = !json[QString("microsoftGraph")].isNull() && m_microsoft_graph_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_students_group_isValid = ::OpenAPI::fromJsonValue(m_students_group, json[QString("studentsGroup")]);
    m_students_group_isSet = !json[QString("studentsGroup")].isNull() && m_students_group_isValid;

    m_teachers_group_isValid = ::OpenAPI::fromJsonValue(m_teachers_group, json[QString("teachersGroup")]);
    m_teachers_group_isSet = !json[QString("teachersGroup")].isNull() && m_teachers_group_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;
}

QString OAIClassDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_assignments_count_isSet) {
        obj.insert(QString("assignmentsCount"), ::OpenAPI::toJsonValue(m_assignments_count));
    }
    if (m_canvas.isSet()) {
        obj.insert(QString("canvas"), ::OpenAPI::toJsonValue(m_canvas));
    }
    if (m_clever.isSet()) {
        obj.insert(QString("clever"), ::OpenAPI::toJsonValue(m_clever));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enrollment_code_isSet) {
        obj.insert(QString("enrollmentCode"), ::OpenAPI::toJsonValue(m_enrollment_code));
    }
    if (m_google_classroom.isSet()) {
        obj.insert(QString("googleClassroom"), ::OpenAPI::toJsonValue(m_google_classroom));
    }
    if (m_google_drive.isSet()) {
        obj.insert(QString("googleDrive"), ::OpenAPI::toJsonValue(m_google_drive));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues.isSet()) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_lti.isSet()) {
        obj.insert(QString("lti"), ::OpenAPI::toJsonValue(m_lti));
    }
    if (m_mfc.isSet()) {
        obj.insert(QString("mfc"), ::OpenAPI::toJsonValue(m_mfc));
    }
    if (m_microsoft_graph.isSet()) {
        obj.insert(QString("microsoftGraph"), ::OpenAPI::toJsonValue(m_microsoft_graph));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_students_group.isSet()) {
        obj.insert(QString("studentsGroup"), ::OpenAPI::toJsonValue(m_students_group));
    }
    if (m_teachers_group.isSet()) {
        obj.insert(QString("teachersGroup"), ::OpenAPI::toJsonValue(m_teachers_group));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    return obj;
}

double OAIClassDetails::getAssignmentsCount() const {
    return m_assignments_count;
}
void OAIClassDetails::setAssignmentsCount(const double &assignments_count) {
    m_assignments_count = assignments_count;
    m_assignments_count_isSet = true;
}

bool OAIClassDetails::is_assignments_count_Set() const{
    return m_assignments_count_isSet;
}

bool OAIClassDetails::is_assignments_count_Valid() const{
    return m_assignments_count_isValid;
}

OAIClassDetails_canvas OAIClassDetails::getCanvas() const {
    return m_canvas;
}
void OAIClassDetails::setCanvas(const OAIClassDetails_canvas &canvas) {
    m_canvas = canvas;
    m_canvas_isSet = true;
}

bool OAIClassDetails::is_canvas_Set() const{
    return m_canvas_isSet;
}

bool OAIClassDetails::is_canvas_Valid() const{
    return m_canvas_isValid;
}

OAIClassDetails_clever OAIClassDetails::getClever() const {
    return m_clever;
}
void OAIClassDetails::setClever(const OAIClassDetails_clever &clever) {
    m_clever = clever;
    m_clever_isSet = true;
}

bool OAIClassDetails::is_clever_Set() const{
    return m_clever_isSet;
}

bool OAIClassDetails::is_clever_Valid() const{
    return m_clever_isValid;
}

QDateTime OAIClassDetails::getCreationDate() const {
    return m_creation_date;
}
void OAIClassDetails::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIClassDetails::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIClassDetails::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIClassDetails::getDescription() const {
    return m_description;
}
void OAIClassDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClassDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClassDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIClassDetails::getEnrollmentCode() const {
    return m_enrollment_code;
}
void OAIClassDetails::setEnrollmentCode(const QString &enrollment_code) {
    m_enrollment_code = enrollment_code;
    m_enrollment_code_isSet = true;
}

bool OAIClassDetails::is_enrollment_code_Set() const{
    return m_enrollment_code_isSet;
}

bool OAIClassDetails::is_enrollment_code_Valid() const{
    return m_enrollment_code_isValid;
}

OAIClassDetails_googleClassroom OAIClassDetails::getGoogleClassroom() const {
    return m_google_classroom;
}
void OAIClassDetails::setGoogleClassroom(const OAIClassDetails_googleClassroom &google_classroom) {
    m_google_classroom = google_classroom;
    m_google_classroom_isSet = true;
}

bool OAIClassDetails::is_google_classroom_Set() const{
    return m_google_classroom_isSet;
}

bool OAIClassDetails::is_google_classroom_Valid() const{
    return m_google_classroom_isValid;
}

OAIClassDetails_googleDrive OAIClassDetails::getGoogleDrive() const {
    return m_google_drive;
}
void OAIClassDetails::setGoogleDrive(const OAIClassDetails_googleDrive &google_drive) {
    m_google_drive = google_drive;
    m_google_drive_isSet = true;
}

bool OAIClassDetails::is_google_drive_Set() const{
    return m_google_drive_isSet;
}

bool OAIClassDetails::is_google_drive_Valid() const{
    return m_google_drive_isValid;
}

QString OAIClassDetails::getId() const {
    return m_id;
}
void OAIClassDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClassDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClassDetails::is_id_Valid() const{
    return m_id_isValid;
}

OAIClassDetails_issues OAIClassDetails::getIssues() const {
    return m_issues;
}
void OAIClassDetails::setIssues(const OAIClassDetails_issues &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIClassDetails::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIClassDetails::is_issues_Valid() const{
    return m_issues_isValid;
}

OAIClassDetails_lti OAIClassDetails::getLti() const {
    return m_lti;
}
void OAIClassDetails::setLti(const OAIClassDetails_lti &lti) {
    m_lti = lti;
    m_lti_isSet = true;
}

bool OAIClassDetails::is_lti_Set() const{
    return m_lti_isSet;
}

bool OAIClassDetails::is_lti_Valid() const{
    return m_lti_isValid;
}

OAIClassDetails_mfc OAIClassDetails::getMfc() const {
    return m_mfc;
}
void OAIClassDetails::setMfc(const OAIClassDetails_mfc &mfc) {
    m_mfc = mfc;
    m_mfc_isSet = true;
}

bool OAIClassDetails::is_mfc_Set() const{
    return m_mfc_isSet;
}

bool OAIClassDetails::is_mfc_Valid() const{
    return m_mfc_isValid;
}

OAIClassDetails_microsoftGraph OAIClassDetails::getMicrosoftGraph() const {
    return m_microsoft_graph;
}
void OAIClassDetails::setMicrosoftGraph(const OAIClassDetails_microsoftGraph &microsoft_graph) {
    m_microsoft_graph = microsoft_graph;
    m_microsoft_graph_isSet = true;
}

bool OAIClassDetails::is_microsoft_graph_Set() const{
    return m_microsoft_graph_isSet;
}

bool OAIClassDetails::is_microsoft_graph_Valid() const{
    return m_microsoft_graph_isValid;
}

QString OAIClassDetails::getName() const {
    return m_name;
}
void OAIClassDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClassDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClassDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIClassDetails::getOrganization() const {
    return m_organization;
}
void OAIClassDetails::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIClassDetails::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIClassDetails::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIClassDetails::getOwner() const {
    return m_owner;
}
void OAIClassDetails::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIClassDetails::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIClassDetails::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIClassDetails::getSection() const {
    return m_section;
}
void OAIClassDetails::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIClassDetails::is_section_Set() const{
    return m_section_isSet;
}

bool OAIClassDetails::is_section_Valid() const{
    return m_section_isValid;
}

OAIClassState OAIClassDetails::getState() const {
    return m_state;
}
void OAIClassDetails::setState(const OAIClassState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIClassDetails::is_state_Set() const{
    return m_state_isSet;
}

bool OAIClassDetails::is_state_Valid() const{
    return m_state_isValid;
}

OAIGroupDetails OAIClassDetails::getStudentsGroup() const {
    return m_students_group;
}
void OAIClassDetails::setStudentsGroup(const OAIGroupDetails &students_group) {
    m_students_group = students_group;
    m_students_group_isSet = true;
}

bool OAIClassDetails::is_students_group_Set() const{
    return m_students_group_isSet;
}

bool OAIClassDetails::is_students_group_Valid() const{
    return m_students_group_isValid;
}

OAIGroupDetails OAIClassDetails::getTeachersGroup() const {
    return m_teachers_group;
}
void OAIClassDetails::setTeachersGroup(const OAIGroupDetails &teachers_group) {
    m_teachers_group = teachers_group;
    m_teachers_group_isSet = true;
}

bool OAIClassDetails::is_teachers_group_Set() const{
    return m_teachers_group_isSet;
}

bool OAIClassDetails::is_teachers_group_Valid() const{
    return m_teachers_group_isValid;
}

QString OAIClassDetails::getTheme() const {
    return m_theme;
}
void OAIClassDetails::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIClassDetails::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIClassDetails::is_theme_Valid() const{
    return m_theme_isValid;
}

bool OAIClassDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canvas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clever.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_classroom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lti.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_students_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teachers_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
