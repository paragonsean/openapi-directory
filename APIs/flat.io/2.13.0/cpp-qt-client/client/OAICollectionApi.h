/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionApi_H
#define OAI_OAICollectionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollection.h"
#include "OAICollectionCreation.h"
#include "OAICollectionModification.h"
#include "OAIFlatErrorResponse.h"
#include "OAIScoreDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionApi : public QObject {
    Q_OBJECT

public:
    OAICollectionApi(const int timeOut = 0);
    ~OAICollectionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection QString [required]
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void addScoreToCollection(const QString &collection, const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAICollectionCreation [required]
    */
    virtual void createCollection(const OAICollectionCreation &body);

    /**
    * @param[in]  collection QString [required]
    */
    virtual void deleteCollection(const QString &collection);

    /**
    * @param[in]  collection QString [required]
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void deleteScoreFromCollection(const QString &collection, const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection QString [required]
    * @param[in]  body OAICollectionModification [optional]
    */
    virtual void editCollection(const QString &collection, const ::OpenAPI::OptionalParam<OAICollectionModification> &body = ::OpenAPI::OptionalParam<OAICollectionModification>());

    /**
    * @param[in]  collection QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getCollection(const QString &collection, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection QString [required]
    * @param[in]  sharing_key QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  next QString [optional]
    * @param[in]  previous QString [optional]
    */
    virtual void listCollectionScores(const QString &collection, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  next QString [optional]
    * @param[in]  previous QString [optional]
    */
    virtual void listCollections(const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection QString [required]
    */
    virtual void untrashCollection(const QString &collection);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addScoreToCollectionCallback(OAIHttpRequestWorker *worker);
    void createCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteScoreFromCollectionCallback(OAIHttpRequestWorker *worker);
    void editCollectionCallback(OAIHttpRequestWorker *worker);
    void getCollectionCallback(OAIHttpRequestWorker *worker);
    void listCollectionScoresCallback(OAIHttpRequestWorker *worker);
    void listCollectionsCallback(OAIHttpRequestWorker *worker);
    void untrashCollectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addScoreToCollectionSignal(OAIScoreDetails summary);
    void createCollectionSignal(OAICollection summary);
    void deleteCollectionSignal();
    void deleteScoreFromCollectionSignal();
    void editCollectionSignal(OAICollection summary);
    void getCollectionSignal(OAICollection summary);
    void listCollectionScoresSignal(QList<OAIScoreDetails> summary);
    void listCollectionsSignal(QList<OAICollection> summary);
    void untrashCollectionSignal();


    void addScoreToCollectionSignalFull(OAIHttpRequestWorker *worker, OAIScoreDetails summary);
    void createCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void deleteCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deleteScoreFromCollectionSignalFull(OAIHttpRequestWorker *worker);
    void editCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void getCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void listCollectionScoresSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreDetails> summary);
    void listCollectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);
    void untrashCollectionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addScoreToCollectionSignalError() instead")
    void addScoreToCollectionSignalE(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addScoreToCollectionSignalError(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalError() instead")
    void createCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalError() instead")
    void deleteCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreFromCollectionSignalError() instead")
    void deleteScoreFromCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreFromCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editCollectionSignalError() instead")
    void editCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionSignalError() instead")
    void getCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCollectionScoresSignalError() instead")
    void listCollectionScoresSignalE(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCollectionScoresSignalError(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCollectionsSignalError() instead")
    void listCollectionsSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCollectionsSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untrashCollectionSignalError() instead")
    void untrashCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untrashCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addScoreToCollectionSignalErrorFull() instead")
    void addScoreToCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addScoreToCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalErrorFull() instead")
    void createCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalErrorFull() instead")
    void deleteCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreFromCollectionSignalErrorFull() instead")
    void deleteScoreFromCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreFromCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editCollectionSignalErrorFull() instead")
    void editCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionSignalErrorFull() instead")
    void getCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCollectionScoresSignalErrorFull() instead")
    void listCollectionScoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCollectionScoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCollectionsSignalErrorFull() instead")
    void listCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untrashCollectionSignalErrorFull() instead")
    void untrashCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untrashCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
