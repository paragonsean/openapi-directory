/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentSubmissionUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentSubmissionUpdate::OAIAssignmentSubmissionUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentSubmissionUpdate::OAIAssignmentSubmissionUpdate() {
    this->initializeModel();
}

OAIAssignmentSubmissionUpdate::~OAIAssignmentSubmissionUpdate() {}

void OAIAssignmentSubmissionUpdate::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_draft_grade_isSet = false;
    m_draft_grade_isValid = false;

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_r_return_isSet = false;
    m_r_return_isValid = false;

    m_submit_isSet = false;
    m_submit_isValid = false;
}

void OAIAssignmentSubmissionUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentSubmissionUpdate::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_draft_grade_isValid = ::OpenAPI::fromJsonValue(m_draft_grade, json[QString("draftGrade")]);
    m_draft_grade_isSet = !json[QString("draftGrade")].isNull() && m_draft_grade_isValid;

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_r_return_isValid = ::OpenAPI::fromJsonValue(m_r_return, json[QString("return")]);
    m_r_return_isSet = !json[QString("return")].isNull() && m_r_return_isValid;

    m_submit_isValid = ::OpenAPI::fromJsonValue(m_submit, json[QString("submit")]);
    m_submit_isSet = !json[QString("submit")].isNull() && m_submit_isValid;
}

QString OAIAssignmentSubmissionUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentSubmissionUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_draft_grade_isSet) {
        obj.insert(QString("draftGrade"), ::OpenAPI::toJsonValue(m_draft_grade));
    }
    if (m_grade_isSet) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_r_return_isSet) {
        obj.insert(QString("return"), ::OpenAPI::toJsonValue(m_r_return));
    }
    if (m_submit_isSet) {
        obj.insert(QString("submit"), ::OpenAPI::toJsonValue(m_submit));
    }
    return obj;
}

QList<OAIClassAttachmentCreation> OAIAssignmentSubmissionUpdate::getAttachments() const {
    return m_attachments;
}
void OAIAssignmentSubmissionUpdate::setAttachments(const QList<OAIClassAttachmentCreation> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIAssignmentSubmissionUpdate::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIAssignmentSubmissionUpdate::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIAssignmentSubmissionUpdate_comments OAIAssignmentSubmissionUpdate::getComments() const {
    return m_comments;
}
void OAIAssignmentSubmissionUpdate::setComments(const OAIAssignmentSubmissionUpdate_comments &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIAssignmentSubmissionUpdate::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIAssignmentSubmissionUpdate::is_comments_Valid() const{
    return m_comments_isValid;
}

double OAIAssignmentSubmissionUpdate::getDraftGrade() const {
    return m_draft_grade;
}
void OAIAssignmentSubmissionUpdate::setDraftGrade(const double &draft_grade) {
    m_draft_grade = draft_grade;
    m_draft_grade_isSet = true;
}

bool OAIAssignmentSubmissionUpdate::is_draft_grade_Set() const{
    return m_draft_grade_isSet;
}

bool OAIAssignmentSubmissionUpdate::is_draft_grade_Valid() const{
    return m_draft_grade_isValid;
}

double OAIAssignmentSubmissionUpdate::getGrade() const {
    return m_grade;
}
void OAIAssignmentSubmissionUpdate::setGrade(const double &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIAssignmentSubmissionUpdate::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIAssignmentSubmissionUpdate::is_grade_Valid() const{
    return m_grade_isValid;
}

bool OAIAssignmentSubmissionUpdate::isRReturn() const {
    return m_r_return;
}
void OAIAssignmentSubmissionUpdate::setRReturn(const bool &r_return) {
    m_r_return = r_return;
    m_r_return_isSet = true;
}

bool OAIAssignmentSubmissionUpdate::is_r_return_Set() const{
    return m_r_return_isSet;
}

bool OAIAssignmentSubmissionUpdate::is_r_return_Valid() const{
    return m_r_return_isValid;
}

bool OAIAssignmentSubmissionUpdate::isSubmit() const {
    return m_submit;
}
void OAIAssignmentSubmissionUpdate::setSubmit(const bool &submit) {
    m_submit = submit;
    m_submit_isSet = true;
}

bool OAIAssignmentSubmissionUpdate::is_submit_Set() const{
    return m_submit_isSet;
}

bool OAIAssignmentSubmissionUpdate::is_submit_Valid() const{
    return m_submit_isValid;
}

bool OAIAssignmentSubmissionUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_return_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentSubmissionUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
