/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection::OAICollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection::OAICollection() {
    this->initializeModel();
}

OAICollection::~OAICollection() {}

void OAICollection::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_collections_isSet = false;
    m_collections_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_sharing_key_isSet = false;
    m_sharing_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_collections_isValid = ::OpenAPI::fromJsonValue(m_collections, json[QString("collections")]);
    m_collections_isSet = !json[QString("collections")].isNull() && m_collections_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("htmlUrl")]);
    m_html_url_isSet = !json[QString("htmlUrl")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_sharing_key_isValid = ::OpenAPI::fromJsonValue(m_sharing_key, json[QString("sharingKey")]);
    m_sharing_key_isSet = !json[QString("sharingKey")].isNull() && m_sharing_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection::asJsonObject() const {
    QJsonObject obj;
    if (m_app_isSet) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_collections.size() > 0) {
        obj.insert(QString("collections"), ::OpenAPI::toJsonValue(m_collections));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("htmlUrl"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_rights.isSet()) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_sharing_key_isSet) {
        obj.insert(QString("sharingKey"), ::OpenAPI::toJsonValue(m_sharing_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAICollection::getApp() const {
    return m_app;
}
void OAICollection::setApp(const QString &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAICollection::is_app_Set() const{
    return m_app_isSet;
}

bool OAICollection::is_app_Valid() const{
    return m_app_isValid;
}

OAICollection_capabilities OAICollection::getCapabilities() const {
    return m_capabilities;
}
void OAICollection::setCapabilities(const OAICollection_capabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAICollection::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAICollection::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList<OAIResourceCollaborator> OAICollection::getCollaborators() const {
    return m_collaborators;
}
void OAICollection::setCollaborators(const QList<OAIResourceCollaborator> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAICollection::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAICollection::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QList<QString> OAICollection::getCollections() const {
    return m_collections;
}
void OAICollection::setCollections(const QList<QString> &collections) {
    m_collections = collections;
    m_collections_isSet = true;
}

bool OAICollection::is_collections_Set() const{
    return m_collections_isSet;
}

bool OAICollection::is_collections_Valid() const{
    return m_collections_isValid;
}

QDateTime OAICollection::getCreationDate() const {
    return m_creation_date;
}
void OAICollection::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICollection::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICollection::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAICollection::getHtmlUrl() const {
    return m_html_url;
}
void OAICollection::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICollection::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICollection::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAICollection::getId() const {
    return m_id;
}
void OAICollection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollection::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollection::is_id_Valid() const{
    return m_id_isValid;
}

OAICollectionPrivacy OAICollection::getPrivacy() const {
    return m_privacy;
}
void OAICollection::setPrivacy(const OAICollectionPrivacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAICollection::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAICollection::is_privacy_Valid() const{
    return m_privacy_isValid;
}

OAIResourceRights OAICollection::getRights() const {
    return m_rights;
}
void OAICollection::setRights(const OAIResourceRights &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAICollection::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAICollection::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAICollection::getSharingKey() const {
    return m_sharing_key;
}
void OAICollection::setSharingKey(const QString &sharing_key) {
    m_sharing_key = sharing_key;
    m_sharing_key_isSet = true;
}

bool OAICollection::is_sharing_key_Set() const{
    return m_sharing_key_isSet;
}

bool OAICollection::is_sharing_key_Valid() const{
    return m_sharing_key_isValid;
}

QString OAICollection::getTitle() const {
    return m_title;
}
void OAICollection::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICollection::is_title_Set() const{
    return m_title_isSet;
}

bool OAICollection::is_title_Valid() const{
    return m_title_isValid;
}

OAICollectionType OAICollection::getType() const {
    return m_type;
}
void OAICollection::setType(const OAICollectionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICollection::is_type_Set() const{
    return m_type_isSet;
}

bool OAICollection::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserPublicSummary OAICollection::getUser() const {
    return m_user;
}
void OAICollection::setUser(const OAIUserPublicSummary &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICollection::is_user_Set() const{
    return m_user_isSet;
}

bool OAICollection::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
