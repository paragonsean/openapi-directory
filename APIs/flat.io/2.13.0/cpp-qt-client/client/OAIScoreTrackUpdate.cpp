/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreTrackUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreTrackUpdate::OAIScoreTrackUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreTrackUpdate::OAIScoreTrackUpdate() {
    this->initializeModel();
}

OAIScoreTrackUpdate::~OAIScoreTrackUpdate() {}

void OAIScoreTrackUpdate::initializeModel() {

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_synchronization_points_isSet = false;
    m_synchronization_points_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIScoreTrackUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreTrackUpdate::fromJsonObject(QJsonObject json) {

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_synchronization_points_isValid = ::OpenAPI::fromJsonValue(m_synchronization_points, json[QString("synchronizationPoints")]);
    m_synchronization_points_isSet = !json[QString("synchronizationPoints")].isNull() && m_synchronization_points_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIScoreTrackUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreTrackUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_synchronization_points.size() > 0) {
        obj.insert(QString("synchronizationPoints"), ::OpenAPI::toJsonValue(m_synchronization_points));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAIScoreTrackUpdate::isRDefault() const {
    return m_r_default;
}
void OAIScoreTrackUpdate::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIScoreTrackUpdate::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIScoreTrackUpdate::is_r_default_Valid() const{
    return m_r_default_isValid;
}

OAIScoreTrackState OAIScoreTrackUpdate::getState() const {
    return m_state;
}
void OAIScoreTrackUpdate::setState(const OAIScoreTrackState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIScoreTrackUpdate::is_state_Set() const{
    return m_state_isSet;
}

bool OAIScoreTrackUpdate::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIScoreTrackPoint> OAIScoreTrackUpdate::getSynchronizationPoints() const {
    return m_synchronization_points;
}
void OAIScoreTrackUpdate::setSynchronizationPoints(const QList<OAIScoreTrackPoint> &synchronization_points) {
    m_synchronization_points = synchronization_points;
    m_synchronization_points_isSet = true;
}

bool OAIScoreTrackUpdate::is_synchronization_points_Set() const{
    return m_synchronization_points_isSet;
}

bool OAIScoreTrackUpdate::is_synchronization_points_Valid() const{
    return m_synchronization_points_isValid;
}

QString OAIScoreTrackUpdate::getTitle() const {
    return m_title;
}
void OAIScoreTrackUpdate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIScoreTrackUpdate::is_title_Set() const{
    return m_title_isSet;
}

bool OAIScoreTrackUpdate::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIScoreTrackUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronization_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreTrackUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
