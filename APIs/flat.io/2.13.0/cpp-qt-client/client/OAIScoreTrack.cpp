/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreTrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreTrack::OAIScoreTrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreTrack::OAIScoreTrack() {
    this->initializeModel();
}

OAIScoreTrack::~OAIScoreTrack() {}

void OAIScoreTrack::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_id_isSet = false;
    m_media_id_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_synchronization_points_isSet = false;
    m_synchronization_points_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIScoreTrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreTrack::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_id_isValid = ::OpenAPI::fromJsonValue(m_media_id, json[QString("mediaId")]);
    m_media_id_isSet = !json[QString("mediaId")].isNull() && m_media_id_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_synchronization_points_isValid = ::OpenAPI::fromJsonValue(m_synchronization_points, json[QString("synchronizationPoints")]);
    m_synchronization_points_isSet = !json[QString("synchronizationPoints")].isNull() && m_synchronization_points_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIScoreTrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreTrack::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_id_isSet) {
        obj.insert(QString("mediaId"), ::OpenAPI::toJsonValue(m_media_id));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_synchronization_points.size() > 0) {
        obj.insert(QString("synchronizationPoints"), ::OpenAPI::toJsonValue(m_synchronization_points));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIScoreTrack::getCreationDate() const {
    return m_creation_date;
}
void OAIScoreTrack::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIScoreTrack::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIScoreTrack::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIScoreTrack::getCreator() const {
    return m_creator;
}
void OAIScoreTrack::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIScoreTrack::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIScoreTrack::is_creator_Valid() const{
    return m_creator_isValid;
}

bool OAIScoreTrack::isRDefault() const {
    return m_r_default;
}
void OAIScoreTrack::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIScoreTrack::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIScoreTrack::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIScoreTrack::getId() const {
    return m_id;
}
void OAIScoreTrack::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScoreTrack::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScoreTrack::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScoreTrack::getMediaId() const {
    return m_media_id;
}
void OAIScoreTrack::setMediaId(const QString &media_id) {
    m_media_id = media_id;
    m_media_id_isSet = true;
}

bool OAIScoreTrack::is_media_id_Set() const{
    return m_media_id_isSet;
}

bool OAIScoreTrack::is_media_id_Valid() const{
    return m_media_id_isValid;
}

QDateTime OAIScoreTrack::getModificationDate() const {
    return m_modification_date;
}
void OAIScoreTrack::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIScoreTrack::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIScoreTrack::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QString OAIScoreTrack::getScore() const {
    return m_score;
}
void OAIScoreTrack::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIScoreTrack::is_score_Set() const{
    return m_score_isSet;
}

bool OAIScoreTrack::is_score_Valid() const{
    return m_score_isValid;
}

OAIScoreTrackState OAIScoreTrack::getState() const {
    return m_state;
}
void OAIScoreTrack::setState(const OAIScoreTrackState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIScoreTrack::is_state_Set() const{
    return m_state_isSet;
}

bool OAIScoreTrack::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIScoreTrackPoint> OAIScoreTrack::getSynchronizationPoints() const {
    return m_synchronization_points;
}
void OAIScoreTrack::setSynchronizationPoints(const QList<OAIScoreTrackPoint> &synchronization_points) {
    m_synchronization_points = synchronization_points;
    m_synchronization_points_isSet = true;
}

bool OAIScoreTrack::is_synchronization_points_Set() const{
    return m_synchronization_points_isSet;
}

bool OAIScoreTrack::is_synchronization_points_Valid() const{
    return m_synchronization_points_isValid;
}

QString OAIScoreTrack::getTitle() const {
    return m_title;
}
void OAIScoreTrack::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIScoreTrack::is_title_Set() const{
    return m_title_isSet;
}

bool OAIScoreTrack::is_title_Valid() const{
    return m_title_isValid;
}

OAIScoreTrackType OAIScoreTrack::getType() const {
    return m_type;
}
void OAIScoreTrack::setType(const OAIScoreTrackType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScoreTrack::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScoreTrack::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIScoreTrack::getUrl() const {
    return m_url;
}
void OAIScoreTrack::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIScoreTrack::is_url_Set() const{
    return m_url_isSet;
}

bool OAIScoreTrack::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIScoreTrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronization_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreTrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
