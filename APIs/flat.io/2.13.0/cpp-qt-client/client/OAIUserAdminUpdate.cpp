/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAdminUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAdminUpdate::OAIUserAdminUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAdminUpdate::OAIUserAdminUpdate() {
    this->initializeModel();
}

OAIUserAdminUpdate::~OAIUserAdminUpdate() {}

void OAIUserAdminUpdate::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_organization_role_isSet = false;
    m_organization_role_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserAdminUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAdminUpdate::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_organization_role_isValid = ::OpenAPI::fromJsonValue(m_organization_role, json[QString("organizationRole")]);
    m_organization_role_isSet = !json[QString("organizationRole")].isNull() && m_organization_role_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserAdminUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAdminUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_organization_role.isSet()) {
        obj.insert(QString("organizationRole"), ::OpenAPI::toJsonValue(m_organization_role));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUserAdminUpdate::getEmail() const {
    return m_email;
}
void OAIUserAdminUpdate::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserAdminUpdate::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserAdminUpdate::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserAdminUpdate::getFirstname() const {
    return m_firstname;
}
void OAIUserAdminUpdate::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIUserAdminUpdate::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIUserAdminUpdate::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAIUserAdminUpdate::getLastname() const {
    return m_lastname;
}
void OAIUserAdminUpdate::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIUserAdminUpdate::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIUserAdminUpdate::is_lastname_Valid() const{
    return m_lastname_isValid;
}

OAIOrganizationRoles OAIUserAdminUpdate::getOrganizationRole() const {
    return m_organization_role;
}
void OAIUserAdminUpdate::setOrganizationRole(const OAIOrganizationRoles &organization_role) {
    m_organization_role = organization_role;
    m_organization_role_isSet = true;
}

bool OAIUserAdminUpdate::is_organization_role_Set() const{
    return m_organization_role_isSet;
}

bool OAIUserAdminUpdate::is_organization_role_Valid() const{
    return m_organization_role_isValid;
}

QString OAIUserAdminUpdate::getPassword() const {
    return m_password;
}
void OAIUserAdminUpdate::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUserAdminUpdate::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUserAdminUpdate::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUserAdminUpdate::getUsername() const {
    return m_username;
}
void OAIUserAdminUpdate::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserAdminUpdate::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserAdminUpdate::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserAdminUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAdminUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
