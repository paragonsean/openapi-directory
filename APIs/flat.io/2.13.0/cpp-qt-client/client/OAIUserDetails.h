/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserDetails.h
 *
 * User details
 */

#ifndef OAIUserDetails_H
#define OAIUserDetails_H

#include <QJsonObject>

#include "OAIClassRoles.h"
#include "OAIFlatLocales.h"
#include "OAIOrganizationRoles.h"
#include "OAIUserPublic.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserDetails : public OAIObject {
public:
    OAIUserDetails();
    OAIUserDetails(QString json);
    ~OAIUserDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFirstname() const;
    void setFirstname(const QString &firstname);
    bool is_firstname_Set() const;
    bool is_firstname_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsFlatTeam() const;
    void setIsFlatTeam(const bool &is_flat_team);
    bool is_is_flat_team_Set() const;
    bool is_is_flat_team_Valid() const;

    bool isIsPowerUser() const;
    void setIsPowerUser(const bool &is_power_user);
    bool is_is_power_user_Set() const;
    bool is_is_power_user_Valid() const;

    QString getLastname() const;
    void setLastname(const QString &lastname);
    bool is_lastname_Set() const;
    bool is_lastname_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPicture() const;
    void setPicture(const QString &picture);
    bool is_picture_Set() const;
    bool is_picture_Valid() const;

    QString getPrintableName() const;
    void setPrintableName(const QString &printable_name);
    bool is_printable_name_Set() const;
    bool is_printable_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    OAIClassRoles getClassRole() const;
    void setClassRole(const OAIClassRoles &class_role);
    bool is_class_role_Set() const;
    bool is_class_role_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    OAIOrganizationRoles getOrganizationRole() const;
    void setOrganizationRole(const OAIOrganizationRoles &organization_role);
    bool is_organization_role_Set() const;
    bool is_organization_role_Valid() const;

    QString getBio() const;
    void setBio(const QString &bio);
    bool is_bio_Set() const;
    bool is_bio_Valid() const;

    QString getCoverPicture() const;
    void setCoverPicture(const QString &cover_picture);
    bool is_cover_picture_Set() const;
    bool is_cover_picture_Valid() const;

    qint32 getFollowersCount() const;
    void setFollowersCount(const qint32 &followers_count);
    bool is_followers_count_Set() const;
    bool is_followers_count_Valid() const;

    qint32 getFollowingCount() const;
    void setFollowingCount(const qint32 &following_count);
    bool is_following_count_Set() const;
    bool is_following_count_Valid() const;

    QList<QString> getInstruments() const;
    void setInstruments(const QList<QString> &instruments);
    bool is_instruments_Set() const;
    bool is_instruments_Valid() const;

    qint32 getLikedScoresCount() const;
    void setLikedScoresCount(const qint32 &liked_scores_count);
    bool is_liked_scores_count_Set() const;
    bool is_liked_scores_count_Valid() const;

    qint32 getOwnedPublicScoresCount() const;
    void setOwnedPublicScoresCount(const qint32 &owned_public_scores_count);
    bool is_owned_public_scores_count_Set() const;
    bool is_owned_public_scores_count_Valid() const;

    QString getProfileTheme() const;
    void setProfileTheme(const QString &profile_theme);
    bool is_profile_theme_Set() const;
    bool is_profile_theme_Valid() const;

    QDateTime getRegistrationDate() const;
    void setRegistrationDate(const QDateTime &registration_date);
    bool is_registration_date_Set() const;
    bool is_registration_date_Valid() const;

    QString getCoverPictureFile() const;
    void setCoverPictureFile(const QString &cover_picture_file);
    bool is_cover_picture_file_Set() const;
    bool is_cover_picture_file_Valid() const;

    OAIFlatLocales getLocale() const;
    void setLocale(const OAIFlatLocales &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    QString getPictureFile() const;
    void setPictureFile(const QString &picture_file);
    bool is_picture_file_Set() const;
    bool is_picture_file_Valid() const;

    bool isPrivateProfile() const;
    void setPrivateProfile(const bool &private_profile);
    bool is_private_profile_Set() const;
    bool is_private_profile_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_firstname;
    bool m_firstname_isSet;
    bool m_firstname_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_flat_team;
    bool m_is_flat_team_isSet;
    bool m_is_flat_team_isValid;

    bool m_is_power_user;
    bool m_is_power_user_isSet;
    bool m_is_power_user_isValid;

    QString m_lastname;
    bool m_lastname_isSet;
    bool m_lastname_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_picture;
    bool m_picture_isSet;
    bool m_picture_isValid;

    QString m_printable_name;
    bool m_printable_name_isSet;
    bool m_printable_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    OAIClassRoles m_class_role;
    bool m_class_role_isSet;
    bool m_class_role_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    OAIOrganizationRoles m_organization_role;
    bool m_organization_role_isSet;
    bool m_organization_role_isValid;

    QString m_bio;
    bool m_bio_isSet;
    bool m_bio_isValid;

    QString m_cover_picture;
    bool m_cover_picture_isSet;
    bool m_cover_picture_isValid;

    qint32 m_followers_count;
    bool m_followers_count_isSet;
    bool m_followers_count_isValid;

    qint32 m_following_count;
    bool m_following_count_isSet;
    bool m_following_count_isValid;

    QList<QString> m_instruments;
    bool m_instruments_isSet;
    bool m_instruments_isValid;

    qint32 m_liked_scores_count;
    bool m_liked_scores_count_isSet;
    bool m_liked_scores_count_isValid;

    qint32 m_owned_public_scores_count;
    bool m_owned_public_scores_count_isSet;
    bool m_owned_public_scores_count_isValid;

    QString m_profile_theme;
    bool m_profile_theme_isSet;
    bool m_profile_theme_isValid;

    QDateTime m_registration_date;
    bool m_registration_date_isSet;
    bool m_registration_date_isValid;

    QString m_cover_picture_file;
    bool m_cover_picture_file_isSet;
    bool m_cover_picture_file_isValid;

    OAIFlatLocales m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    QString m_picture_file;
    bool m_picture_file_isSet;
    bool m_picture_file_isValid;

    bool m_private_profile;
    bool m_private_profile_isSet;
    bool m_private_profile_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserDetails)

#endif // OAIUserDetails_H
