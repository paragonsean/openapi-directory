/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreCommentContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreCommentContext::OAIScoreCommentContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreCommentContext::OAIScoreCommentContext() {
    this->initializeModel();
}

OAIScoreCommentContext::~OAIScoreCommentContext() {}

void OAIScoreCommentContext::initializeModel() {

    m_measure_uuids_isSet = false;
    m_measure_uuids_isValid = false;

    m_part_uuid_isSet = false;
    m_part_uuid_isValid = false;

    m_staff_idx_isSet = false;
    m_staff_idx_isValid = false;

    m_staff_uuid_isSet = false;
    m_staff_uuid_isValid = false;

    m_start_dpq_isSet = false;
    m_start_dpq_isValid = false;

    m_start_time_pos_isSet = false;
    m_start_time_pos_isValid = false;

    m_stop_dpq_isSet = false;
    m_stop_dpq_isValid = false;

    m_stop_time_pos_isSet = false;
    m_stop_time_pos_isValid = false;
}

void OAIScoreCommentContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreCommentContext::fromJsonObject(QJsonObject json) {

    m_measure_uuids_isValid = ::OpenAPI::fromJsonValue(m_measure_uuids, json[QString("measureUuids")]);
    m_measure_uuids_isSet = !json[QString("measureUuids")].isNull() && m_measure_uuids_isValid;

    m_part_uuid_isValid = ::OpenAPI::fromJsonValue(m_part_uuid, json[QString("partUuid")]);
    m_part_uuid_isSet = !json[QString("partUuid")].isNull() && m_part_uuid_isValid;

    m_staff_idx_isValid = ::OpenAPI::fromJsonValue(m_staff_idx, json[QString("staffIdx")]);
    m_staff_idx_isSet = !json[QString("staffIdx")].isNull() && m_staff_idx_isValid;

    m_staff_uuid_isValid = ::OpenAPI::fromJsonValue(m_staff_uuid, json[QString("staffUuid")]);
    m_staff_uuid_isSet = !json[QString("staffUuid")].isNull() && m_staff_uuid_isValid;

    m_start_dpq_isValid = ::OpenAPI::fromJsonValue(m_start_dpq, json[QString("startDpq")]);
    m_start_dpq_isSet = !json[QString("startDpq")].isNull() && m_start_dpq_isValid;

    m_start_time_pos_isValid = ::OpenAPI::fromJsonValue(m_start_time_pos, json[QString("startTimePos")]);
    m_start_time_pos_isSet = !json[QString("startTimePos")].isNull() && m_start_time_pos_isValid;

    m_stop_dpq_isValid = ::OpenAPI::fromJsonValue(m_stop_dpq, json[QString("stopDpq")]);
    m_stop_dpq_isSet = !json[QString("stopDpq")].isNull() && m_stop_dpq_isValid;

    m_stop_time_pos_isValid = ::OpenAPI::fromJsonValue(m_stop_time_pos, json[QString("stopTimePos")]);
    m_stop_time_pos_isSet = !json[QString("stopTimePos")].isNull() && m_stop_time_pos_isValid;
}

QString OAIScoreCommentContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreCommentContext::asJsonObject() const {
    QJsonObject obj;
    if (m_measure_uuids.size() > 0) {
        obj.insert(QString("measureUuids"), ::OpenAPI::toJsonValue(m_measure_uuids));
    }
    if (m_part_uuid_isSet) {
        obj.insert(QString("partUuid"), ::OpenAPI::toJsonValue(m_part_uuid));
    }
    if (m_staff_idx_isSet) {
        obj.insert(QString("staffIdx"), ::OpenAPI::toJsonValue(m_staff_idx));
    }
    if (m_staff_uuid_isSet) {
        obj.insert(QString("staffUuid"), ::OpenAPI::toJsonValue(m_staff_uuid));
    }
    if (m_start_dpq_isSet) {
        obj.insert(QString("startDpq"), ::OpenAPI::toJsonValue(m_start_dpq));
    }
    if (m_start_time_pos_isSet) {
        obj.insert(QString("startTimePos"), ::OpenAPI::toJsonValue(m_start_time_pos));
    }
    if (m_stop_dpq_isSet) {
        obj.insert(QString("stopDpq"), ::OpenAPI::toJsonValue(m_stop_dpq));
    }
    if (m_stop_time_pos_isSet) {
        obj.insert(QString("stopTimePos"), ::OpenAPI::toJsonValue(m_stop_time_pos));
    }
    return obj;
}

QList<QString> OAIScoreCommentContext::getMeasureUuids() const {
    return m_measure_uuids;
}
void OAIScoreCommentContext::setMeasureUuids(const QList<QString> &measure_uuids) {
    m_measure_uuids = measure_uuids;
    m_measure_uuids_isSet = true;
}

bool OAIScoreCommentContext::is_measure_uuids_Set() const{
    return m_measure_uuids_isSet;
}

bool OAIScoreCommentContext::is_measure_uuids_Valid() const{
    return m_measure_uuids_isValid;
}

QString OAIScoreCommentContext::getPartUuid() const {
    return m_part_uuid;
}
void OAIScoreCommentContext::setPartUuid(const QString &part_uuid) {
    m_part_uuid = part_uuid;
    m_part_uuid_isSet = true;
}

bool OAIScoreCommentContext::is_part_uuid_Set() const{
    return m_part_uuid_isSet;
}

bool OAIScoreCommentContext::is_part_uuid_Valid() const{
    return m_part_uuid_isValid;
}

double OAIScoreCommentContext::getStaffIdx() const {
    return m_staff_idx;
}
void OAIScoreCommentContext::setStaffIdx(const double &staff_idx) {
    m_staff_idx = staff_idx;
    m_staff_idx_isSet = true;
}

bool OAIScoreCommentContext::is_staff_idx_Set() const{
    return m_staff_idx_isSet;
}

bool OAIScoreCommentContext::is_staff_idx_Valid() const{
    return m_staff_idx_isValid;
}

QString OAIScoreCommentContext::getStaffUuid() const {
    return m_staff_uuid;
}
void OAIScoreCommentContext::setStaffUuid(const QString &staff_uuid) {
    m_staff_uuid = staff_uuid;
    m_staff_uuid_isSet = true;
}

bool OAIScoreCommentContext::is_staff_uuid_Set() const{
    return m_staff_uuid_isSet;
}

bool OAIScoreCommentContext::is_staff_uuid_Valid() const{
    return m_staff_uuid_isValid;
}

double OAIScoreCommentContext::getStartDpq() const {
    return m_start_dpq;
}
void OAIScoreCommentContext::setStartDpq(const double &start_dpq) {
    m_start_dpq = start_dpq;
    m_start_dpq_isSet = true;
}

bool OAIScoreCommentContext::is_start_dpq_Set() const{
    return m_start_dpq_isSet;
}

bool OAIScoreCommentContext::is_start_dpq_Valid() const{
    return m_start_dpq_isValid;
}

double OAIScoreCommentContext::getStartTimePos() const {
    return m_start_time_pos;
}
void OAIScoreCommentContext::setStartTimePos(const double &start_time_pos) {
    m_start_time_pos = start_time_pos;
    m_start_time_pos_isSet = true;
}

bool OAIScoreCommentContext::is_start_time_pos_Set() const{
    return m_start_time_pos_isSet;
}

bool OAIScoreCommentContext::is_start_time_pos_Valid() const{
    return m_start_time_pos_isValid;
}

double OAIScoreCommentContext::getStopDpq() const {
    return m_stop_dpq;
}
void OAIScoreCommentContext::setStopDpq(const double &stop_dpq) {
    m_stop_dpq = stop_dpq;
    m_stop_dpq_isSet = true;
}

bool OAIScoreCommentContext::is_stop_dpq_Set() const{
    return m_stop_dpq_isSet;
}

bool OAIScoreCommentContext::is_stop_dpq_Valid() const{
    return m_stop_dpq_isValid;
}

double OAIScoreCommentContext::getStopTimePos() const {
    return m_stop_time_pos;
}
void OAIScoreCommentContext::setStopTimePos(const double &stop_time_pos) {
    m_stop_time_pos = stop_time_pos;
    m_stop_time_pos_isSet = true;
}

bool OAIScoreCommentContext::is_stop_time_pos_Set() const{
    return m_stop_time_pos_isSet;
}

bool OAIScoreCommentContext::is_stop_time_pos_Valid() const{
    return m_stop_time_pos_isValid;
}

bool OAIScoreCommentContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_measure_uuids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staff_idx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staff_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_dpq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_dpq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_pos_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreCommentContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_measure_uuids_isValid && m_part_uuid_isValid && m_start_dpq_isValid && m_start_time_pos_isValid && m_stop_dpq_isValid && m_stop_time_pos_isValid && true;
}

} // namespace OpenAPI
