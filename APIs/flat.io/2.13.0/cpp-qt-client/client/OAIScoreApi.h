/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScoreApi_H
#define OAI_OAIScoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignmentSubmission.h"
#include "OAIFlatErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIResourceCollaborator.h"
#include "OAIResourceCollaboratorCreation.h"
#include "OAIScoreComment.h"
#include "OAIScoreCommentCreation.h"
#include "OAIScoreCommentUpdate.h"
#include "OAIScoreCreation.h"
#include "OAIScoreDetails.h"
#include "OAIScoreFork.h"
#include "OAIScoreModification.h"
#include "OAIScoreRevision.h"
#include "OAIScoreRevisionCreation.h"
#include "OAIScoreTrack.h"
#include "OAIScoreTrackCreation.h"
#include "OAIScoreTrackUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScoreApi : public QObject {
    Q_OBJECT

public:
    OAIScoreApi(const int timeOut = 0);
    ~OAIScoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIResourceCollaboratorCreation [required]
    */
    virtual void addScoreCollaborator(const QString &score, const OAIResourceCollaboratorCreation &body);

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIScoreTrackCreation [required]
    */
    virtual void addScoreTrack(const QString &score, const OAIScoreTrackCreation &body);

    /**
    * @param[in]  body OAIScoreCreation [required]
    */
    virtual void createScore(const OAIScoreCreation &body);

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIScoreRevisionCreation [required]
    */
    virtual void createScoreRevision(const QString &score, const OAIScoreRevisionCreation &body);

    /**
    * @param[in]  score QString [required]
    * @param[in]  now bool [optional]
    */
    virtual void deleteScore(const QString &score, const ::OpenAPI::OptionalParam<bool> &now = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void deleteScoreComment(const QString &score, const QString &comment, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  track QString [required]
    */
    virtual void deleteScoreTrack(const QString &score, const QString &track);

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIScoreModification [optional]
    */
    virtual void editScore(const QString &score, const ::OpenAPI::OptionalParam<OAIScoreModification> &body = ::OpenAPI::OptionalParam<OAIScoreModification>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIScoreFork [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void forkScore(const QString &score, const OAIScoreFork &body, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user QString [required]
    * @param[in]  ids bool [optional]
    */
    virtual void gerUserLikes(const QString &user, const ::OpenAPI::OptionalParam<bool> &ids = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  group QString [required]
    * @param[in]  parent QString [optional]
    */
    virtual void getGroupScores(const QString &group, const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getScore(const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  collaborator QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getScoreCollaborator(const QString &score, const QString &collaborator, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getScoreCollaborators(const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    */
    virtual void getScoreComments(const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getScoreRevision(const QString &score, const QString &revision, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  format QString [required]
    * @param[in]  sharing_key QString [optional]
    * @param[in]  parts QString [optional]
    * @param[in]  only_cached bool [optional]
    * @param[in]  url bool [optional]
    */
    virtual void getScoreRevisionData(const QString &score, const QString &revision, const QString &format, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_cached = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &url = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getScoreRevisions(const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    */
    virtual void getScoreSubmissions(const QString &score);

    /**
    * @param[in]  score QString [required]
    * @param[in]  track QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void getScoreTrack(const QString &score, const QString &track, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user QString [required]
    * @param[in]  parent QString [optional]
    */
    virtual void getUserScores(const QString &user, const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  sharing_key QString [optional]
    * @param[in]  assignment QString [optional]
    * @param[in]  list_auto_track bool [optional]
    */
    virtual void listScoreTracks(const QString &score, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &list_auto_track = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void markScoreCommentResolved(const QString &score, const QString &comment, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void markScoreCommentUnresolved(const QString &score, const QString &comment, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIScoreCommentCreation [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void postScoreComment(const QString &score, const OAIScoreCommentCreation &body, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  collaborator QString [required]
    */
    virtual void removeScoreCollaborator(const QString &score, const QString &collaborator);

    /**
    * @param[in]  score QString [required]
    */
    virtual void untrashScore(const QString &score);

    /**
    * @param[in]  score QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  body OAIScoreCommentUpdate [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void updateScoreComment(const QString &score, const QString &comment, const OAIScoreCommentUpdate &body, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  score QString [required]
    * @param[in]  track QString [required]
    * @param[in]  body OAIScoreTrackUpdate [required]
    */
    virtual void updateScoreTrack(const QString &score, const QString &track, const OAIScoreTrackUpdate &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addScoreCollaboratorCallback(OAIHttpRequestWorker *worker);
    void addScoreTrackCallback(OAIHttpRequestWorker *worker);
    void createScoreCallback(OAIHttpRequestWorker *worker);
    void createScoreRevisionCallback(OAIHttpRequestWorker *worker);
    void deleteScoreCallback(OAIHttpRequestWorker *worker);
    void deleteScoreCommentCallback(OAIHttpRequestWorker *worker);
    void deleteScoreTrackCallback(OAIHttpRequestWorker *worker);
    void editScoreCallback(OAIHttpRequestWorker *worker);
    void forkScoreCallback(OAIHttpRequestWorker *worker);
    void gerUserLikesCallback(OAIHttpRequestWorker *worker);
    void getGroupScoresCallback(OAIHttpRequestWorker *worker);
    void getScoreCallback(OAIHttpRequestWorker *worker);
    void getScoreCollaboratorCallback(OAIHttpRequestWorker *worker);
    void getScoreCollaboratorsCallback(OAIHttpRequestWorker *worker);
    void getScoreCommentsCallback(OAIHttpRequestWorker *worker);
    void getScoreRevisionCallback(OAIHttpRequestWorker *worker);
    void getScoreRevisionDataCallback(OAIHttpRequestWorker *worker);
    void getScoreRevisionsCallback(OAIHttpRequestWorker *worker);
    void getScoreSubmissionsCallback(OAIHttpRequestWorker *worker);
    void getScoreTrackCallback(OAIHttpRequestWorker *worker);
    void getUserScoresCallback(OAIHttpRequestWorker *worker);
    void listScoreTracksCallback(OAIHttpRequestWorker *worker);
    void markScoreCommentResolvedCallback(OAIHttpRequestWorker *worker);
    void markScoreCommentUnresolvedCallback(OAIHttpRequestWorker *worker);
    void postScoreCommentCallback(OAIHttpRequestWorker *worker);
    void removeScoreCollaboratorCallback(OAIHttpRequestWorker *worker);
    void untrashScoreCallback(OAIHttpRequestWorker *worker);
    void updateScoreCommentCallback(OAIHttpRequestWorker *worker);
    void updateScoreTrackCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addScoreCollaboratorSignal(OAIResourceCollaborator summary);
    void addScoreTrackSignal(OAIScoreTrack summary);
    void createScoreSignal(OAIScoreDetails summary);
    void createScoreRevisionSignal(OAIScoreRevision summary);
    void deleteScoreSignal();
    void deleteScoreCommentSignal();
    void deleteScoreTrackSignal();
    void editScoreSignal(OAIScoreDetails summary);
    void forkScoreSignal(OAIScoreDetails summary);
    void gerUserLikesSignal(QList<OAIScoreDetails> summary);
    void getGroupScoresSignal(QList<OAIScoreDetails> summary);
    void getScoreSignal(OAIScoreDetails summary);
    void getScoreCollaboratorSignal(OAIResourceCollaborator summary);
    void getScoreCollaboratorsSignal(QList<OAIResourceCollaborator> summary);
    void getScoreCommentsSignal(QList<OAIScoreComment> summary);
    void getScoreRevisionSignal(OAIScoreRevision summary);
    void getScoreRevisionDataSignal(OAIHttpFileElement summary);
    void getScoreRevisionsSignal(QList<OAIScoreRevision> summary);
    void getScoreSubmissionsSignal(QList<OAIAssignmentSubmission> summary);
    void getScoreTrackSignal(OAIScoreTrack summary);
    void getUserScoresSignal(QList<OAIScoreDetails> summary);
    void listScoreTracksSignal(QList<OAIScoreTrack> summary);
    void markScoreCommentResolvedSignal();
    void markScoreCommentUnresolvedSignal();
    void postScoreCommentSignal(OAIScoreComment summary);
    void removeScoreCollaboratorSignal();
    void untrashScoreSignal();
    void updateScoreCommentSignal(OAIScoreComment summary);
    void updateScoreTrackSignal(OAIScoreTrack summary);


    void addScoreCollaboratorSignalFull(OAIHttpRequestWorker *worker, OAIResourceCollaborator summary);
    void addScoreTrackSignalFull(OAIHttpRequestWorker *worker, OAIScoreTrack summary);
    void createScoreSignalFull(OAIHttpRequestWorker *worker, OAIScoreDetails summary);
    void createScoreRevisionSignalFull(OAIHttpRequestWorker *worker, OAIScoreRevision summary);
    void deleteScoreSignalFull(OAIHttpRequestWorker *worker);
    void deleteScoreCommentSignalFull(OAIHttpRequestWorker *worker);
    void deleteScoreTrackSignalFull(OAIHttpRequestWorker *worker);
    void editScoreSignalFull(OAIHttpRequestWorker *worker, OAIScoreDetails summary);
    void forkScoreSignalFull(OAIHttpRequestWorker *worker, OAIScoreDetails summary);
    void gerUserLikesSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreDetails> summary);
    void getGroupScoresSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreDetails> summary);
    void getScoreSignalFull(OAIHttpRequestWorker *worker, OAIScoreDetails summary);
    void getScoreCollaboratorSignalFull(OAIHttpRequestWorker *worker, OAIResourceCollaborator summary);
    void getScoreCollaboratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResourceCollaborator> summary);
    void getScoreCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreComment> summary);
    void getScoreRevisionSignalFull(OAIHttpRequestWorker *worker, OAIScoreRevision summary);
    void getScoreRevisionDataSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getScoreRevisionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreRevision> summary);
    void getScoreSubmissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentSubmission> summary);
    void getScoreTrackSignalFull(OAIHttpRequestWorker *worker, OAIScoreTrack summary);
    void getUserScoresSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreDetails> summary);
    void listScoreTracksSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreTrack> summary);
    void markScoreCommentResolvedSignalFull(OAIHttpRequestWorker *worker);
    void markScoreCommentUnresolvedSignalFull(OAIHttpRequestWorker *worker);
    void postScoreCommentSignalFull(OAIHttpRequestWorker *worker, OAIScoreComment summary);
    void removeScoreCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void untrashScoreSignalFull(OAIHttpRequestWorker *worker);
    void updateScoreCommentSignalFull(OAIHttpRequestWorker *worker, OAIScoreComment summary);
    void updateScoreTrackSignalFull(OAIHttpRequestWorker *worker, OAIScoreTrack summary);

    Q_DECL_DEPRECATED_X("Use addScoreCollaboratorSignalError() instead")
    void addScoreCollaboratorSignalE(OAIResourceCollaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addScoreCollaboratorSignalError(OAIResourceCollaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addScoreTrackSignalError() instead")
    void addScoreTrackSignalE(OAIScoreTrack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addScoreTrackSignalError(OAIScoreTrack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScoreSignalError() instead")
    void createScoreSignalE(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScoreSignalError(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScoreRevisionSignalError() instead")
    void createScoreRevisionSignalE(OAIScoreRevision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScoreRevisionSignalError(OAIScoreRevision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreSignalError() instead")
    void deleteScoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreCommentSignalError() instead")
    void deleteScoreCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreTrackSignalError() instead")
    void deleteScoreTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editScoreSignalError() instead")
    void editScoreSignalE(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editScoreSignalError(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkScoreSignalError() instead")
    void forkScoreSignalE(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forkScoreSignalError(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gerUserLikesSignalError() instead")
    void gerUserLikesSignalE(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gerUserLikesSignalError(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupScoresSignalError() instead")
    void getGroupScoresSignalE(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupScoresSignalError(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreSignalError() instead")
    void getScoreSignalE(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreSignalError(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreCollaboratorSignalError() instead")
    void getScoreCollaboratorSignalE(OAIResourceCollaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreCollaboratorSignalError(OAIResourceCollaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreCollaboratorsSignalError() instead")
    void getScoreCollaboratorsSignalE(QList<OAIResourceCollaborator> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreCollaboratorsSignalError(QList<OAIResourceCollaborator> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreCommentsSignalError() instead")
    void getScoreCommentsSignalE(QList<OAIScoreComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreCommentsSignalError(QList<OAIScoreComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreRevisionSignalError() instead")
    void getScoreRevisionSignalE(OAIScoreRevision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreRevisionSignalError(OAIScoreRevision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreRevisionDataSignalError() instead")
    void getScoreRevisionDataSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreRevisionDataSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreRevisionsSignalError() instead")
    void getScoreRevisionsSignalE(QList<OAIScoreRevision> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreRevisionsSignalError(QList<OAIScoreRevision> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreSubmissionsSignalError() instead")
    void getScoreSubmissionsSignalE(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreSubmissionsSignalError(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreTrackSignalError() instead")
    void getScoreTrackSignalE(OAIScoreTrack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreTrackSignalError(OAIScoreTrack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserScoresSignalError() instead")
    void getUserScoresSignalE(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserScoresSignalError(QList<OAIScoreDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listScoreTracksSignalError() instead")
    void listScoreTracksSignalE(QList<OAIScoreTrack> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listScoreTracksSignalError(QList<OAIScoreTrack> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markScoreCommentResolvedSignalError() instead")
    void markScoreCommentResolvedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void markScoreCommentResolvedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markScoreCommentUnresolvedSignalError() instead")
    void markScoreCommentUnresolvedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void markScoreCommentUnresolvedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScoreCommentSignalError() instead")
    void postScoreCommentSignalE(OAIScoreComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postScoreCommentSignalError(OAIScoreComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeScoreCollaboratorSignalError() instead")
    void removeScoreCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeScoreCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untrashScoreSignalError() instead")
    void untrashScoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untrashScoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScoreCommentSignalError() instead")
    void updateScoreCommentSignalE(OAIScoreComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScoreCommentSignalError(OAIScoreComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScoreTrackSignalError() instead")
    void updateScoreTrackSignalE(OAIScoreTrack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScoreTrackSignalError(OAIScoreTrack summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addScoreCollaboratorSignalErrorFull() instead")
    void addScoreCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addScoreCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addScoreTrackSignalErrorFull() instead")
    void addScoreTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addScoreTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScoreSignalErrorFull() instead")
    void createScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScoreRevisionSignalErrorFull() instead")
    void createScoreRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScoreRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreSignalErrorFull() instead")
    void deleteScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreCommentSignalErrorFull() instead")
    void deleteScoreCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScoreTrackSignalErrorFull() instead")
    void deleteScoreTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScoreTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editScoreSignalErrorFull() instead")
    void editScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkScoreSignalErrorFull() instead")
    void forkScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forkScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gerUserLikesSignalErrorFull() instead")
    void gerUserLikesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gerUserLikesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupScoresSignalErrorFull() instead")
    void getGroupScoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupScoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreSignalErrorFull() instead")
    void getScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreCollaboratorSignalErrorFull() instead")
    void getScoreCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreCollaboratorsSignalErrorFull() instead")
    void getScoreCollaboratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreCollaboratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreCommentsSignalErrorFull() instead")
    void getScoreCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreRevisionSignalErrorFull() instead")
    void getScoreRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreRevisionDataSignalErrorFull() instead")
    void getScoreRevisionDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreRevisionDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreRevisionsSignalErrorFull() instead")
    void getScoreRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreSubmissionsSignalErrorFull() instead")
    void getScoreSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreTrackSignalErrorFull() instead")
    void getScoreTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserScoresSignalErrorFull() instead")
    void getUserScoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserScoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listScoreTracksSignalErrorFull() instead")
    void listScoreTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listScoreTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markScoreCommentResolvedSignalErrorFull() instead")
    void markScoreCommentResolvedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markScoreCommentResolvedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markScoreCommentUnresolvedSignalErrorFull() instead")
    void markScoreCommentUnresolvedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markScoreCommentUnresolvedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScoreCommentSignalErrorFull() instead")
    void postScoreCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postScoreCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeScoreCollaboratorSignalErrorFull() instead")
    void removeScoreCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeScoreCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untrashScoreSignalErrorFull() instead")
    void untrashScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untrashScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScoreCommentSignalErrorFull() instead")
    void updateScoreCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScoreCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScoreTrackSignalErrorFull() instead")
    void updateScoreTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScoreTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
