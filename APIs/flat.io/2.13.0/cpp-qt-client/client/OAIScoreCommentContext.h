/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScoreCommentContext.h
 *
 * The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position). 
 */

#ifndef OAIScoreCommentContext_H
#define OAIScoreCommentContext_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScoreCommentContext : public OAIObject {
public:
    OAIScoreCommentContext();
    OAIScoreCommentContext(QString json);
    ~OAIScoreCommentContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getMeasureUuids() const;
    void setMeasureUuids(const QList<QString> &measure_uuids);
    bool is_measure_uuids_Set() const;
    bool is_measure_uuids_Valid() const;

    QString getPartUuid() const;
    void setPartUuid(const QString &part_uuid);
    bool is_part_uuid_Set() const;
    bool is_part_uuid_Valid() const;

    double getStaffIdx() const;
    void setStaffIdx(const double &staff_idx);
    bool is_staff_idx_Set() const;
    bool is_staff_idx_Valid() const;

    QString getStaffUuid() const;
    void setStaffUuid(const QString &staff_uuid);
    bool is_staff_uuid_Set() const;
    bool is_staff_uuid_Valid() const;

    double getStartDpq() const;
    void setStartDpq(const double &start_dpq);
    bool is_start_dpq_Set() const;
    bool is_start_dpq_Valid() const;

    double getStartTimePos() const;
    void setStartTimePos(const double &start_time_pos);
    bool is_start_time_pos_Set() const;
    bool is_start_time_pos_Valid() const;

    double getStopDpq() const;
    void setStopDpq(const double &stop_dpq);
    bool is_stop_dpq_Set() const;
    bool is_stop_dpq_Valid() const;

    double getStopTimePos() const;
    void setStopTimePos(const double &stop_time_pos);
    bool is_stop_time_pos_Set() const;
    bool is_stop_time_pos_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_measure_uuids;
    bool m_measure_uuids_isSet;
    bool m_measure_uuids_isValid;

    QString m_part_uuid;
    bool m_part_uuid_isSet;
    bool m_part_uuid_isValid;

    double m_staff_idx;
    bool m_staff_idx_isSet;
    bool m_staff_idx_isValid;

    QString m_staff_uuid;
    bool m_staff_uuid_isSet;
    bool m_staff_uuid_isValid;

    double m_start_dpq;
    bool m_start_dpq_isSet;
    bool m_start_dpq_isValid;

    double m_start_time_pos;
    bool m_start_time_pos_isSet;
    bool m_start_time_pos_isValid;

    double m_stop_dpq;
    bool m_stop_dpq_isSet;
    bool m_stop_dpq_isValid;

    double m_stop_time_pos;
    bool m_stop_time_pos_isSet;
    bool m_stop_time_pos_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScoreCommentContext)

#endif // OAIScoreCommentContext_H
