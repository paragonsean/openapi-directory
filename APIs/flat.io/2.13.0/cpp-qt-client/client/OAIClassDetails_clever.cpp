/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassDetails_clever.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassDetails_clever::OAIClassDetails_clever(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassDetails_clever::OAIClassDetails_clever() {
    this->initializeModel();
}

OAIClassDetails_clever::~OAIClassDetails_clever() {}

void OAIClassDetails_clever::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_term_end_date_isSet = false;
    m_term_end_date_isValid = false;

    m_term_name_isSet = false;
    m_term_name_isValid = false;

    m_term_start_date_isSet = false;
    m_term_start_date_isValid = false;
}

void OAIClassDetails_clever::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassDetails_clever::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_term_end_date_isValid = ::OpenAPI::fromJsonValue(m_term_end_date, json[QString("termEndDate")]);
    m_term_end_date_isSet = !json[QString("termEndDate")].isNull() && m_term_end_date_isValid;

    m_term_name_isValid = ::OpenAPI::fromJsonValue(m_term_name, json[QString("termName")]);
    m_term_name_isSet = !json[QString("termName")].isNull() && m_term_name_isValid;

    m_term_start_date_isValid = ::OpenAPI::fromJsonValue(m_term_start_date, json[QString("termStartDate")]);
    m_term_start_date_isSet = !json[QString("termStartDate")].isNull() && m_term_start_date_isValid;
}

QString OAIClassDetails_clever::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassDetails_clever::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_term_end_date_isSet) {
        obj.insert(QString("termEndDate"), ::OpenAPI::toJsonValue(m_term_end_date));
    }
    if (m_term_name_isSet) {
        obj.insert(QString("termName"), ::OpenAPI::toJsonValue(m_term_name));
    }
    if (m_term_start_date_isSet) {
        obj.insert(QString("termStartDate"), ::OpenAPI::toJsonValue(m_term_start_date));
    }
    return obj;
}

QDateTime OAIClassDetails_clever::getCreationDate() const {
    return m_creation_date;
}
void OAIClassDetails_clever::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIClassDetails_clever::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIClassDetails_clever::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIClassDetails_clever::getId() const {
    return m_id;
}
void OAIClassDetails_clever::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClassDetails_clever::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClassDetails_clever::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIClassDetails_clever::getModificationDate() const {
    return m_modification_date;
}
void OAIClassDetails_clever::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIClassDetails_clever::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIClassDetails_clever::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QString OAIClassDetails_clever::getSubject() const {
    return m_subject;
}
void OAIClassDetails_clever::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIClassDetails_clever::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIClassDetails_clever::is_subject_Valid() const{
    return m_subject_isValid;
}

QDateTime OAIClassDetails_clever::getTermEndDate() const {
    return m_term_end_date;
}
void OAIClassDetails_clever::setTermEndDate(const QDateTime &term_end_date) {
    m_term_end_date = term_end_date;
    m_term_end_date_isSet = true;
}

bool OAIClassDetails_clever::is_term_end_date_Set() const{
    return m_term_end_date_isSet;
}

bool OAIClassDetails_clever::is_term_end_date_Valid() const{
    return m_term_end_date_isValid;
}

QString OAIClassDetails_clever::getTermName() const {
    return m_term_name;
}
void OAIClassDetails_clever::setTermName(const QString &term_name) {
    m_term_name = term_name;
    m_term_name_isSet = true;
}

bool OAIClassDetails_clever::is_term_name_Set() const{
    return m_term_name_isSet;
}

bool OAIClassDetails_clever::is_term_name_Valid() const{
    return m_term_name_isValid;
}

QDateTime OAIClassDetails_clever::getTermStartDate() const {
    return m_term_start_date;
}
void OAIClassDetails_clever::setTermStartDate(const QDateTime &term_start_date) {
    m_term_start_date = term_start_date;
    m_term_start_date_isSet = true;
}

bool OAIClassDetails_clever::is_term_start_date_Set() const{
    return m_term_start_date_isSet;
}

bool OAIClassDetails_clever::is_term_start_date_Valid() const{
    return m_term_start_date_isValid;
}

bool OAIClassDetails_clever::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassDetails_clever::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
