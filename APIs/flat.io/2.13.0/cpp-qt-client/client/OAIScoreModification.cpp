/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreModification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreModification::OAIScoreModification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreModification::OAIScoreModification() {
    this->initializeModel();
}

OAIScoreModification::~OAIScoreModification() {}

void OAIScoreModification::initializeModel() {

    m_arranger_isSet = false;
    m_arranger_isValid = false;

    m_composer_isSet = false;
    m_composer_isValid = false;

    m_creation_type_isSet = false;
    m_creation_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_license_text_isSet = false;
    m_license_text_isValid = false;

    m_lyricist_isSet = false;
    m_lyricist_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_sharing_key_isSet = false;
    m_sharing_key_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIScoreModification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreModification::fromJsonObject(QJsonObject json) {

    m_arranger_isValid = ::OpenAPI::fromJsonValue(m_arranger, json[QString("arranger")]);
    m_arranger_isSet = !json[QString("arranger")].isNull() && m_arranger_isValid;

    m_composer_isValid = ::OpenAPI::fromJsonValue(m_composer, json[QString("composer")]);
    m_composer_isSet = !json[QString("composer")].isNull() && m_composer_isValid;

    m_creation_type_isValid = ::OpenAPI::fromJsonValue(m_creation_type, json[QString("creationType")]);
    m_creation_type_isSet = !json[QString("creationType")].isNull() && m_creation_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_license_text_isValid = ::OpenAPI::fromJsonValue(m_license_text, json[QString("licenseText")]);
    m_license_text_isSet = !json[QString("licenseText")].isNull() && m_license_text_isValid;

    m_lyricist_isValid = ::OpenAPI::fromJsonValue(m_lyricist, json[QString("lyricist")]);
    m_lyricist_isSet = !json[QString("lyricist")].isNull() && m_lyricist_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_sharing_key_isValid = ::OpenAPI::fromJsonValue(m_sharing_key, json[QString("sharingKey")]);
    m_sharing_key_isSet = !json[QString("sharingKey")].isNull() && m_sharing_key_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIScoreModification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreModification::asJsonObject() const {
    QJsonObject obj;
    if (m_arranger_isSet) {
        obj.insert(QString("arranger"), ::OpenAPI::toJsonValue(m_arranger));
    }
    if (m_composer_isSet) {
        obj.insert(QString("composer"), ::OpenAPI::toJsonValue(m_composer));
    }
    if (m_creation_type.isSet()) {
        obj.insert(QString("creationType"), ::OpenAPI::toJsonValue(m_creation_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_license_text_isSet) {
        obj.insert(QString("licenseText"), ::OpenAPI::toJsonValue(m_license_text));
    }
    if (m_lyricist_isSet) {
        obj.insert(QString("lyricist"), ::OpenAPI::toJsonValue(m_lyricist));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_sharing_key_isSet) {
        obj.insert(QString("sharingKey"), ::OpenAPI::toJsonValue(m_sharing_key));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIScoreModification::getArranger() const {
    return m_arranger;
}
void OAIScoreModification::setArranger(const QString &arranger) {
    m_arranger = arranger;
    m_arranger_isSet = true;
}

bool OAIScoreModification::is_arranger_Set() const{
    return m_arranger_isSet;
}

bool OAIScoreModification::is_arranger_Valid() const{
    return m_arranger_isValid;
}

QString OAIScoreModification::getComposer() const {
    return m_composer;
}
void OAIScoreModification::setComposer(const QString &composer) {
    m_composer = composer;
    m_composer_isSet = true;
}

bool OAIScoreModification::is_composer_Set() const{
    return m_composer_isSet;
}

bool OAIScoreModification::is_composer_Valid() const{
    return m_composer_isValid;
}

OAIScoreCreationType OAIScoreModification::getCreationType() const {
    return m_creation_type;
}
void OAIScoreModification::setCreationType(const OAIScoreCreationType &creation_type) {
    m_creation_type = creation_type;
    m_creation_type_isSet = true;
}

bool OAIScoreModification::is_creation_type_Set() const{
    return m_creation_type_isSet;
}

bool OAIScoreModification::is_creation_type_Valid() const{
    return m_creation_type_isValid;
}

QString OAIScoreModification::getDescription() const {
    return m_description;
}
void OAIScoreModification::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScoreModification::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScoreModification::is_description_Valid() const{
    return m_description_isValid;
}

OAIScoreLicense OAIScoreModification::getLicense() const {
    return m_license;
}
void OAIScoreModification::setLicense(const OAIScoreLicense &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIScoreModification::is_license_Set() const{
    return m_license_isSet;
}

bool OAIScoreModification::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIScoreModification::getLicenseText() const {
    return m_license_text;
}
void OAIScoreModification::setLicenseText(const QString &license_text) {
    m_license_text = license_text;
    m_license_text_isSet = true;
}

bool OAIScoreModification::is_license_text_Set() const{
    return m_license_text_isSet;
}

bool OAIScoreModification::is_license_text_Valid() const{
    return m_license_text_isValid;
}

QString OAIScoreModification::getLyricist() const {
    return m_lyricist;
}
void OAIScoreModification::setLyricist(const QString &lyricist) {
    m_lyricist = lyricist;
    m_lyricist_isSet = true;
}

bool OAIScoreModification::is_lyricist_Set() const{
    return m_lyricist_isSet;
}

bool OAIScoreModification::is_lyricist_Valid() const{
    return m_lyricist_isValid;
}

OAIScorePrivacy OAIScoreModification::getPrivacy() const {
    return m_privacy;
}
void OAIScoreModification::setPrivacy(const OAIScorePrivacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIScoreModification::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIScoreModification::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIScoreModification::getSharingKey() const {
    return m_sharing_key;
}
void OAIScoreModification::setSharingKey(const QString &sharing_key) {
    m_sharing_key = sharing_key;
    m_sharing_key_isSet = true;
}

bool OAIScoreModification::is_sharing_key_Set() const{
    return m_sharing_key_isSet;
}

bool OAIScoreModification::is_sharing_key_Valid() const{
    return m_sharing_key_isValid;
}

QString OAIScoreModification::getSubtitle() const {
    return m_subtitle;
}
void OAIScoreModification::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIScoreModification::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIScoreModification::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QList<QString> OAIScoreModification::getTags() const {
    return m_tags;
}
void OAIScoreModification::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIScoreModification::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIScoreModification::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIScoreModification::getTitle() const {
    return m_title;
}
void OAIScoreModification::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIScoreModification::is_title_Set() const{
    return m_title_isSet;
}

bool OAIScoreModification::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIScoreModification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arranger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lyricist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreModification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
