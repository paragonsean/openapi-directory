/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILtiCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILtiCredentials::OAILtiCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILtiCredentials::OAILtiCredentials() {
    this->initializeModel();
}

OAILtiCredentials::~OAILtiCredentials() {}

void OAILtiCredentials::initializeModel() {

    m_consumer_key_isSet = false;
    m_consumer_key_isValid = false;

    m_consumer_secret_isSet = false;
    m_consumer_secret_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_usage_isSet = false;
    m_last_usage_isValid = false;

    m_lms_isSet = false;
    m_lms_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;
}

void OAILtiCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILtiCredentials::fromJsonObject(QJsonObject json) {

    m_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_consumer_key, json[QString("consumerKey")]);
    m_consumer_key_isSet = !json[QString("consumerKey")].isNull() && m_consumer_key_isValid;

    m_consumer_secret_isValid = ::OpenAPI::fromJsonValue(m_consumer_secret, json[QString("consumerSecret")]);
    m_consumer_secret_isSet = !json[QString("consumerSecret")].isNull() && m_consumer_secret_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_usage_isValid = ::OpenAPI::fromJsonValue(m_last_usage, json[QString("lastUsage")]);
    m_last_usage_isSet = !json[QString("lastUsage")].isNull() && m_last_usage_isValid;

    m_lms_isValid = ::OpenAPI::fromJsonValue(m_lms, json[QString("lms")]);
    m_lms_isSet = !json[QString("lms")].isNull() && m_lms_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;
}

QString OAILtiCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILtiCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_key_isSet) {
        obj.insert(QString("consumerKey"), ::OpenAPI::toJsonValue(m_consumer_key));
    }
    if (m_consumer_secret_isSet) {
        obj.insert(QString("consumerSecret"), ::OpenAPI::toJsonValue(m_consumer_secret));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_usage_isSet) {
        obj.insert(QString("lastUsage"), ::OpenAPI::toJsonValue(m_last_usage));
    }
    if (m_lms.isSet()) {
        obj.insert(QString("lms"), ::OpenAPI::toJsonValue(m_lms));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    return obj;
}

QString OAILtiCredentials::getConsumerKey() const {
    return m_consumer_key;
}
void OAILtiCredentials::setConsumerKey(const QString &consumer_key) {
    m_consumer_key = consumer_key;
    m_consumer_key_isSet = true;
}

bool OAILtiCredentials::is_consumer_key_Set() const{
    return m_consumer_key_isSet;
}

bool OAILtiCredentials::is_consumer_key_Valid() const{
    return m_consumer_key_isValid;
}

QString OAILtiCredentials::getConsumerSecret() const {
    return m_consumer_secret;
}
void OAILtiCredentials::setConsumerSecret(const QString &consumer_secret) {
    m_consumer_secret = consumer_secret;
    m_consumer_secret_isSet = true;
}

bool OAILtiCredentials::is_consumer_secret_Set() const{
    return m_consumer_secret_isSet;
}

bool OAILtiCredentials::is_consumer_secret_Valid() const{
    return m_consumer_secret_isValid;
}

QDateTime OAILtiCredentials::getCreationDate() const {
    return m_creation_date;
}
void OAILtiCredentials::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAILtiCredentials::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAILtiCredentials::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAILtiCredentials::getCreator() const {
    return m_creator;
}
void OAILtiCredentials::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAILtiCredentials::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAILtiCredentials::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAILtiCredentials::getId() const {
    return m_id;
}
void OAILtiCredentials::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILtiCredentials::is_id_Set() const{
    return m_id_isSet;
}

bool OAILtiCredentials::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAILtiCredentials::getLastUsage() const {
    return m_last_usage;
}
void OAILtiCredentials::setLastUsage(const QDateTime &last_usage) {
    m_last_usage = last_usage;
    m_last_usage_isSet = true;
}

bool OAILtiCredentials::is_last_usage_Set() const{
    return m_last_usage_isSet;
}

bool OAILtiCredentials::is_last_usage_Valid() const{
    return m_last_usage_isValid;
}

OAILmsName OAILtiCredentials::getLms() const {
    return m_lms;
}
void OAILtiCredentials::setLms(const OAILmsName &lms) {
    m_lms = lms;
    m_lms_isSet = true;
}

bool OAILtiCredentials::is_lms_Set() const{
    return m_lms_isSet;
}

bool OAILtiCredentials::is_lms_Valid() const{
    return m_lms_isValid;
}

QString OAILtiCredentials::getName() const {
    return m_name;
}
void OAILtiCredentials::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILtiCredentials::is_name_Set() const{
    return m_name_isSet;
}

bool OAILtiCredentials::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILtiCredentials::getOrganization() const {
    return m_organization;
}
void OAILtiCredentials::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAILtiCredentials::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAILtiCredentials::is_organization_Valid() const{
    return m_organization_isValid;
}

bool OAILtiCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILtiCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
