/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreRevision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreRevision::OAIScoreRevision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreRevision::OAIScoreRevision() {
    this->initializeModel();
}

OAIScoreRevision::~OAIScoreRevision() {}

void OAIScoreRevision::initializeModel() {

    m_autosave_isSet = false;
    m_autosave_isValid = false;

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIScoreRevision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreRevision::fromJsonObject(QJsonObject json) {

    m_autosave_isValid = ::OpenAPI::fromJsonValue(m_autosave, json[QString("autosave")]);
    m_autosave_isSet = !json[QString("autosave")].isNull() && m_autosave_isValid;

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIScoreRevision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreRevision::asJsonObject() const {
    QJsonObject obj;
    if (m_autosave_isSet) {
        obj.insert(QString("autosave"), ::OpenAPI::toJsonValue(m_autosave));
    }
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

bool OAIScoreRevision::isAutosave() const {
    return m_autosave;
}
void OAIScoreRevision::setAutosave(const bool &autosave) {
    m_autosave = autosave;
    m_autosave_isSet = true;
}

bool OAIScoreRevision::is_autosave_Set() const{
    return m_autosave_isSet;
}

bool OAIScoreRevision::is_autosave_Valid() const{
    return m_autosave_isValid;
}

QList<QString> OAIScoreRevision::getCollaborators() const {
    return m_collaborators;
}
void OAIScoreRevision::setCollaborators(const QList<QString> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIScoreRevision::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIScoreRevision::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QDateTime OAIScoreRevision::getCreationDate() const {
    return m_creation_date;
}
void OAIScoreRevision::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIScoreRevision::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIScoreRevision::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIScoreRevision::getDescription() const {
    return m_description;
}
void OAIScoreRevision::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScoreRevision::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScoreRevision::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIScoreRevision::getEvent() const {
    return m_event;
}
void OAIScoreRevision::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIScoreRevision::is_event_Set() const{
    return m_event_isSet;
}

bool OAIScoreRevision::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIScoreRevision::getId() const {
    return m_id;
}
void OAIScoreRevision::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScoreRevision::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScoreRevision::is_id_Valid() const{
    return m_id_isValid;
}

OAIScoreRevisionStatistics OAIScoreRevision::getStatistics() const {
    return m_statistics;
}
void OAIScoreRevision::setStatistics(const OAIScoreRevisionStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIScoreRevision::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIScoreRevision::is_statistics_Valid() const{
    return m_statistics_isValid;
}

QString OAIScoreRevision::getUser() const {
    return m_user;
}
void OAIScoreRevision::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIScoreRevision::is_user_Set() const{
    return m_user_isSet;
}

bool OAIScoreRevision::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIScoreRevision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autosave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreRevision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
