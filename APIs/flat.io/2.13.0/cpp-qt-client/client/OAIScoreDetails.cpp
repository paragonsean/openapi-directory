/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreDetails::OAIScoreDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreDetails::OAIScoreDetails() {
    this->initializeModel();
}

OAIScoreDetails::~OAIScoreDetails() {}

void OAIScoreDetails::initializeModel() {

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_sharing_key_isSet = false;
    m_sharing_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_arranger_isSet = false;
    m_arranger_isValid = false;

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_collections_isSet = false;
    m_collections_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_composer_isSet = false;
    m_composer_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creation_type_isSet = false;
    m_creation_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_time_isSet = false;
    m_duration_time_isValid = false;

    m_google_drive_file_id_isSet = false;
    m_google_drive_file_id_isValid = false;

    m_instruments_isSet = false;
    m_instruments_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_license_text_isSet = false;
    m_license_text_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_lyricist_isSet = false;
    m_lyricist_isValid = false;

    m_main_tempo_qpm_isSet = false;
    m_main_tempo_qpm_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_number_measures_isSet = false;
    m_number_measures_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_parent_score_isSet = false;
    m_parent_score_isValid = false;

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_publication_date_isSet = false;
    m_publication_date_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_samples_isSet = false;
    m_samples_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIScoreDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreDetails::fromJsonObject(QJsonObject json) {

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("htmlUrl")]);
    m_html_url_isSet = !json[QString("htmlUrl")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_sharing_key_isValid = ::OpenAPI::fromJsonValue(m_sharing_key, json[QString("sharingKey")]);
    m_sharing_key_isSet = !json[QString("sharingKey")].isNull() && m_sharing_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_arranger_isValid = ::OpenAPI::fromJsonValue(m_arranger, json[QString("arranger")]);
    m_arranger_isSet = !json[QString("arranger")].isNull() && m_arranger_isValid;

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_collections_isValid = ::OpenAPI::fromJsonValue(m_collections, json[QString("collections")]);
    m_collections_isSet = !json[QString("collections")].isNull() && m_collections_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_composer_isValid = ::OpenAPI::fromJsonValue(m_composer, json[QString("composer")]);
    m_composer_isSet = !json[QString("composer")].isNull() && m_composer_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_creation_type_isValid = ::OpenAPI::fromJsonValue(m_creation_type, json[QString("creationType")]);
    m_creation_type_isSet = !json[QString("creationType")].isNull() && m_creation_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_time_isValid = ::OpenAPI::fromJsonValue(m_duration_time, json[QString("durationTime")]);
    m_duration_time_isSet = !json[QString("durationTime")].isNull() && m_duration_time_isValid;

    m_google_drive_file_id_isValid = ::OpenAPI::fromJsonValue(m_google_drive_file_id, json[QString("googleDriveFileId")]);
    m_google_drive_file_id_isSet = !json[QString("googleDriveFileId")].isNull() && m_google_drive_file_id_isValid;

    m_instruments_isValid = ::OpenAPI::fromJsonValue(m_instruments, json[QString("instruments")]);
    m_instruments_isSet = !json[QString("instruments")].isNull() && m_instruments_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_license_text_isValid = ::OpenAPI::fromJsonValue(m_license_text, json[QString("licenseText")]);
    m_license_text_isSet = !json[QString("licenseText")].isNull() && m_license_text_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_lyricist_isValid = ::OpenAPI::fromJsonValue(m_lyricist, json[QString("lyricist")]);
    m_lyricist_isSet = !json[QString("lyricist")].isNull() && m_lyricist_isValid;

    m_main_tempo_qpm_isValid = ::OpenAPI::fromJsonValue(m_main_tempo_qpm, json[QString("mainTempoQpm")]);
    m_main_tempo_qpm_isSet = !json[QString("mainTempoQpm")].isNull() && m_main_tempo_qpm_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_number_measures_isValid = ::OpenAPI::fromJsonValue(m_number_measures, json[QString("numberMeasures")]);
    m_number_measures_isSet = !json[QString("numberMeasures")].isNull() && m_number_measures_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_parent_score_isValid = ::OpenAPI::fromJsonValue(m_parent_score, json[QString("parentScore")]);
    m_parent_score_isSet = !json[QString("parentScore")].isNull() && m_parent_score_isValid;

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("plays")]);
    m_plays_isSet = !json[QString("plays")].isNull() && m_plays_isValid;

    m_publication_date_isValid = ::OpenAPI::fromJsonValue(m_publication_date, json[QString("publicationDate")]);
    m_publication_date_isSet = !json[QString("publicationDate")].isNull() && m_publication_date_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_samples_isValid = ::OpenAPI::fromJsonValue(m_samples, json[QString("samples")]);
    m_samples_isSet = !json[QString("samples")].isNull() && m_samples_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIScoreDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_html_url_isSet) {
        obj.insert(QString("htmlUrl"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_sharing_key_isSet) {
        obj.insert(QString("sharingKey"), ::OpenAPI::toJsonValue(m_sharing_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_arranger_isSet) {
        obj.insert(QString("arranger"), ::OpenAPI::toJsonValue(m_arranger));
    }
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_collections.size() > 0) {
        obj.insert(QString("collections"), ::OpenAPI::toJsonValue(m_collections));
    }
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_composer_isSet) {
        obj.insert(QString("composer"), ::OpenAPI::toJsonValue(m_composer));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creation_type.isSet()) {
        obj.insert(QString("creationType"), ::OpenAPI::toJsonValue(m_creation_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_time_isSet) {
        obj.insert(QString("durationTime"), ::OpenAPI::toJsonValue(m_duration_time));
    }
    if (m_google_drive_file_id_isSet) {
        obj.insert(QString("googleDriveFileId"), ::OpenAPI::toJsonValue(m_google_drive_file_id));
    }
    if (m_instruments.size() > 0) {
        obj.insert(QString("instruments"), ::OpenAPI::toJsonValue(m_instruments));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_license_text_isSet) {
        obj.insert(QString("licenseText"), ::OpenAPI::toJsonValue(m_license_text));
    }
    if (m_likes.isSet()) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_lyricist_isSet) {
        obj.insert(QString("lyricist"), ::OpenAPI::toJsonValue(m_lyricist));
    }
    if (m_main_tempo_qpm_isSet) {
        obj.insert(QString("mainTempoQpm"), ::OpenAPI::toJsonValue(m_main_tempo_qpm));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_number_measures_isSet) {
        obj.insert(QString("numberMeasures"), ::OpenAPI::toJsonValue(m_number_measures));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_parent_score_isSet) {
        obj.insert(QString("parentScore"), ::OpenAPI::toJsonValue(m_parent_score));
    }
    if (m_plays.isSet()) {
        obj.insert(QString("plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_publication_date_isSet) {
        obj.insert(QString("publicationDate"), ::OpenAPI::toJsonValue(m_publication_date));
    }
    if (m_rights.isSet()) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_samples.size() > 0) {
        obj.insert(QString("samples"), ::OpenAPI::toJsonValue(m_samples));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_views.isSet()) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QString OAIScoreDetails::getHtmlUrl() const {
    return m_html_url;
}
void OAIScoreDetails::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIScoreDetails::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIScoreDetails::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIScoreDetails::getId() const {
    return m_id;
}
void OAIScoreDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScoreDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScoreDetails::is_id_Valid() const{
    return m_id_isValid;
}

OAIScorePrivacy OAIScoreDetails::getPrivacy() const {
    return m_privacy;
}
void OAIScoreDetails::setPrivacy(const OAIScorePrivacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIScoreDetails::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIScoreDetails::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIScoreDetails::getSharingKey() const {
    return m_sharing_key;
}
void OAIScoreDetails::setSharingKey(const QString &sharing_key) {
    m_sharing_key = sharing_key;
    m_sharing_key_isSet = true;
}

bool OAIScoreDetails::is_sharing_key_Set() const{
    return m_sharing_key_isSet;
}

bool OAIScoreDetails::is_sharing_key_Valid() const{
    return m_sharing_key_isValid;
}

QString OAIScoreDetails::getTitle() const {
    return m_title;
}
void OAIScoreDetails::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIScoreDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAIScoreDetails::is_title_Valid() const{
    return m_title_isValid;
}

OAIUserPublicSummary OAIScoreDetails::getUser() const {
    return m_user;
}
void OAIScoreDetails::setUser(const OAIUserPublicSummary &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIScoreDetails::is_user_Set() const{
    return m_user_isSet;
}

bool OAIScoreDetails::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIScoreDetails::getArranger() const {
    return m_arranger;
}
void OAIScoreDetails::setArranger(const QString &arranger) {
    m_arranger = arranger;
    m_arranger_isSet = true;
}

bool OAIScoreDetails::is_arranger_Set() const{
    return m_arranger_isSet;
}

bool OAIScoreDetails::is_arranger_Valid() const{
    return m_arranger_isValid;
}

QList<OAIResourceCollaborator> OAIScoreDetails::getCollaborators() const {
    return m_collaborators;
}
void OAIScoreDetails::setCollaborators(const QList<OAIResourceCollaborator> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIScoreDetails::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIScoreDetails::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QList<QString> OAIScoreDetails::getCollections() const {
    return m_collections;
}
void OAIScoreDetails::setCollections(const QList<QString> &collections) {
    m_collections = collections;
    m_collections_isSet = true;
}

bool OAIScoreDetails::is_collections_Set() const{
    return m_collections_isSet;
}

bool OAIScoreDetails::is_collections_Valid() const{
    return m_collections_isValid;
}

OAIScoreCommentsCounts OAIScoreDetails::getComments() const {
    return m_comments;
}
void OAIScoreDetails::setComments(const OAIScoreCommentsCounts &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIScoreDetails::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIScoreDetails::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIScoreDetails::getComposer() const {
    return m_composer;
}
void OAIScoreDetails::setComposer(const QString &composer) {
    m_composer = composer;
    m_composer_isSet = true;
}

bool OAIScoreDetails::is_composer_Set() const{
    return m_composer_isSet;
}

bool OAIScoreDetails::is_composer_Valid() const{
    return m_composer_isValid;
}

QDateTime OAIScoreDetails::getCreationDate() const {
    return m_creation_date;
}
void OAIScoreDetails::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIScoreDetails::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIScoreDetails::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIScoreCreationType OAIScoreDetails::getCreationType() const {
    return m_creation_type;
}
void OAIScoreDetails::setCreationType(const OAIScoreCreationType &creation_type) {
    m_creation_type = creation_type;
    m_creation_type_isSet = true;
}

bool OAIScoreDetails::is_creation_type_Set() const{
    return m_creation_type_isSet;
}

bool OAIScoreDetails::is_creation_type_Valid() const{
    return m_creation_type_isValid;
}

QString OAIScoreDetails::getDescription() const {
    return m_description;
}
void OAIScoreDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScoreDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScoreDetails::is_description_Valid() const{
    return m_description_isValid;
}

double OAIScoreDetails::getDurationTime() const {
    return m_duration_time;
}
void OAIScoreDetails::setDurationTime(const double &duration_time) {
    m_duration_time = duration_time;
    m_duration_time_isSet = true;
}

bool OAIScoreDetails::is_duration_time_Set() const{
    return m_duration_time_isSet;
}

bool OAIScoreDetails::is_duration_time_Valid() const{
    return m_duration_time_isValid;
}

QString OAIScoreDetails::getGoogleDriveFileId() const {
    return m_google_drive_file_id;
}
void OAIScoreDetails::setGoogleDriveFileId(const QString &google_drive_file_id) {
    m_google_drive_file_id = google_drive_file_id;
    m_google_drive_file_id_isSet = true;
}

bool OAIScoreDetails::is_google_drive_file_id_Set() const{
    return m_google_drive_file_id_isSet;
}

bool OAIScoreDetails::is_google_drive_file_id_Valid() const{
    return m_google_drive_file_id_isValid;
}

QList<QString> OAIScoreDetails::getInstruments() const {
    return m_instruments;
}
void OAIScoreDetails::setInstruments(const QList<QString> &instruments) {
    m_instruments = instruments;
    m_instruments_isSet = true;
}

bool OAIScoreDetails::is_instruments_Set() const{
    return m_instruments_isSet;
}

bool OAIScoreDetails::is_instruments_Valid() const{
    return m_instruments_isValid;
}

OAIScoreLicense OAIScoreDetails::getLicense() const {
    return m_license;
}
void OAIScoreDetails::setLicense(const OAIScoreLicense &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIScoreDetails::is_license_Set() const{
    return m_license_isSet;
}

bool OAIScoreDetails::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIScoreDetails::getLicenseText() const {
    return m_license_text;
}
void OAIScoreDetails::setLicenseText(const QString &license_text) {
    m_license_text = license_text;
    m_license_text_isSet = true;
}

bool OAIScoreDetails::is_license_text_Set() const{
    return m_license_text_isSet;
}

bool OAIScoreDetails::is_license_text_Valid() const{
    return m_license_text_isValid;
}

OAIScoreLikesCounts OAIScoreDetails::getLikes() const {
    return m_likes;
}
void OAIScoreDetails::setLikes(const OAIScoreLikesCounts &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIScoreDetails::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIScoreDetails::is_likes_Valid() const{
    return m_likes_isValid;
}

QString OAIScoreDetails::getLyricist() const {
    return m_lyricist;
}
void OAIScoreDetails::setLyricist(const QString &lyricist) {
    m_lyricist = lyricist;
    m_lyricist_isSet = true;
}

bool OAIScoreDetails::is_lyricist_Set() const{
    return m_lyricist_isSet;
}

bool OAIScoreDetails::is_lyricist_Valid() const{
    return m_lyricist_isValid;
}

double OAIScoreDetails::getMainTempoQpm() const {
    return m_main_tempo_qpm;
}
void OAIScoreDetails::setMainTempoQpm(const double &main_tempo_qpm) {
    m_main_tempo_qpm = main_tempo_qpm;
    m_main_tempo_qpm_isSet = true;
}

bool OAIScoreDetails::is_main_tempo_qpm_Set() const{
    return m_main_tempo_qpm_isSet;
}

bool OAIScoreDetails::is_main_tempo_qpm_Valid() const{
    return m_main_tempo_qpm_isValid;
}

QDateTime OAIScoreDetails::getModificationDate() const {
    return m_modification_date;
}
void OAIScoreDetails::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIScoreDetails::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIScoreDetails::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

qint32 OAIScoreDetails::getNumberMeasures() const {
    return m_number_measures;
}
void OAIScoreDetails::setNumberMeasures(const qint32 &number_measures) {
    m_number_measures = number_measures;
    m_number_measures_isSet = true;
}

bool OAIScoreDetails::is_number_measures_Set() const{
    return m_number_measures_isSet;
}

bool OAIScoreDetails::is_number_measures_Valid() const{
    return m_number_measures_isValid;
}

QString OAIScoreDetails::getOrganization() const {
    return m_organization;
}
void OAIScoreDetails::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIScoreDetails::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIScoreDetails::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIScoreDetails::getParentScore() const {
    return m_parent_score;
}
void OAIScoreDetails::setParentScore(const QString &parent_score) {
    m_parent_score = parent_score;
    m_parent_score_isSet = true;
}

bool OAIScoreDetails::is_parent_score_Set() const{
    return m_parent_score_isSet;
}

bool OAIScoreDetails::is_parent_score_Valid() const{
    return m_parent_score_isValid;
}

OAIScorePlaysCounts OAIScoreDetails::getPlays() const {
    return m_plays;
}
void OAIScoreDetails::setPlays(const OAIScorePlaysCounts &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAIScoreDetails::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAIScoreDetails::is_plays_Valid() const{
    return m_plays_isValid;
}

QDateTime OAIScoreDetails::getPublicationDate() const {
    return m_publication_date;
}
void OAIScoreDetails::setPublicationDate(const QDateTime &publication_date) {
    m_publication_date = publication_date;
    m_publication_date_isSet = true;
}

bool OAIScoreDetails::is_publication_date_Set() const{
    return m_publication_date_isSet;
}

bool OAIScoreDetails::is_publication_date_Valid() const{
    return m_publication_date_isValid;
}

OAIResourceRights OAIScoreDetails::getRights() const {
    return m_rights;
}
void OAIScoreDetails::setRights(const OAIResourceRights &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAIScoreDetails::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAIScoreDetails::is_rights_Valid() const{
    return m_rights_isValid;
}

QList<QString> OAIScoreDetails::getSamples() const {
    return m_samples;
}
void OAIScoreDetails::setSamples(const QList<QString> &samples) {
    m_samples = samples;
    m_samples_isSet = true;
}

bool OAIScoreDetails::is_samples_Set() const{
    return m_samples_isSet;
}

bool OAIScoreDetails::is_samples_Valid() const{
    return m_samples_isValid;
}

QString OAIScoreDetails::getSubtitle() const {
    return m_subtitle;
}
void OAIScoreDetails::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIScoreDetails::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIScoreDetails::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QList<QString> OAIScoreDetails::getTags() const {
    return m_tags;
}
void OAIScoreDetails::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIScoreDetails::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIScoreDetails::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIScoreViewsCounts OAIScoreDetails::getViews() const {
    return m_views;
}
void OAIScoreDetails::setViews(const OAIScoreViewsCounts &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIScoreDetails::is_views_Set() const{
    return m_views_isSet;
}

bool OAIScoreDetails::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIScoreDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arranger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_composer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_drive_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lyricist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_tempo_qpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_measures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plays.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
