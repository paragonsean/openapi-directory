/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationApi_H
#define OAI_OAIOrganizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlatErrorResponse.h"
#include "OAILtiCredentials.h"
#include "OAILtiCredentialsCreation.h"
#include "OAIOrganizationInvitation.h"
#include "OAIOrganizationInvitationCreation.h"
#include "OAIUserAdminUpdate.h"
#include "OAIUserCreation.h"
#include "OAIUserDetailsAdmin.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationApi(const int timeOut = 0);
    ~OAIOrganizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  role QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  group QList<QString> [optional]
    * @param[in]  no_active_license bool [optional]
    */
    virtual void countOrgaUsers(const ::OpenAPI::OptionalParam<QList<QString>> &role = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &group = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &no_active_license = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAILtiCredentialsCreation [required]
    */
    virtual void createLtiCredentials(const OAILtiCredentialsCreation &body);

    /**
    * @param[in]  body OAIOrganizationInvitationCreation [optional]
    */
    virtual void createOrganizationInvitation(const ::OpenAPI::OptionalParam<OAIOrganizationInvitationCreation> &body = ::OpenAPI::OptionalParam<OAIOrganizationInvitationCreation>());

    /**
    * @param[in]  body OAIUserCreation [optional]
    */
    virtual void createOrganizationUser(const ::OpenAPI::OptionalParam<OAIUserCreation> &body = ::OpenAPI::OptionalParam<OAIUserCreation>());


    virtual void listLtiCredentials();

    /**
    * @param[in]  role QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  next QString [optional]
    * @param[in]  previous QString [optional]
    */
    virtual void listOrganizationInvitations(const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  next QString [optional]
    * @param[in]  previous QString [optional]
    * @param[in]  role QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  group QList<QString> [optional]
    * @param[in]  no_active_license bool [optional]
    * @param[in]  license_expiration_date QList<QString> [optional]
    * @param[in]  only_ids bool [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listOrganizationUsers(const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &role = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &group = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &no_active_license = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &license_expiration_date = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &only_ids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  invitation QString [required]
    */
    virtual void removeOrganizationInvitation(const QString &invitation);

    /**
    * @param[in]  user QString [required]
    * @param[in]  convert_to_individual bool [optional]
    */
    virtual void removeOrganizationUser(const QString &user, const ::OpenAPI::OptionalParam<bool> &convert_to_individual = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  credentials QString [required]
    */
    virtual void revokeLtiCredentials(const QString &credentials);

    /**
    * @param[in]  user QString [required]
    * @param[in]  body OAIUserAdminUpdate [required]
    */
    virtual void updateOrganizationUser(const QString &user, const OAIUserAdminUpdate &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void countOrgaUsersCallback(OAIHttpRequestWorker *worker);
    void createLtiCredentialsCallback(OAIHttpRequestWorker *worker);
    void createOrganizationInvitationCallback(OAIHttpRequestWorker *worker);
    void createOrganizationUserCallback(OAIHttpRequestWorker *worker);
    void listLtiCredentialsCallback(OAIHttpRequestWorker *worker);
    void listOrganizationInvitationsCallback(OAIHttpRequestWorker *worker);
    void listOrganizationUsersCallback(OAIHttpRequestWorker *worker);
    void removeOrganizationInvitationCallback(OAIHttpRequestWorker *worker);
    void removeOrganizationUserCallback(OAIHttpRequestWorker *worker);
    void revokeLtiCredentialsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void countOrgaUsersSignal(QList<OAIUserDetailsAdmin> summary);
    void createLtiCredentialsSignal(OAILtiCredentials summary);
    void createOrganizationInvitationSignal(OAIOrganizationInvitation summary);
    void createOrganizationUserSignal(OAIUserDetailsAdmin summary);
    void listLtiCredentialsSignal(QList<OAILtiCredentials> summary);
    void listOrganizationInvitationsSignal(QList<OAIOrganizationInvitation> summary);
    void listOrganizationUsersSignal(QList<OAIUserDetailsAdmin> summary);
    void removeOrganizationInvitationSignal();
    void removeOrganizationUserSignal();
    void revokeLtiCredentialsSignal();
    void updateOrganizationUserSignal(OAIUserDetailsAdmin summary);


    void countOrgaUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserDetailsAdmin> summary);
    void createLtiCredentialsSignalFull(OAIHttpRequestWorker *worker, OAILtiCredentials summary);
    void createOrganizationInvitationSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationInvitation summary);
    void createOrganizationUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDetailsAdmin summary);
    void listLtiCredentialsSignalFull(OAIHttpRequestWorker *worker, QList<OAILtiCredentials> summary);
    void listOrganizationInvitationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizationInvitation> summary);
    void listOrganizationUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserDetailsAdmin> summary);
    void removeOrganizationInvitationSignalFull(OAIHttpRequestWorker *worker);
    void removeOrganizationUserSignalFull(OAIHttpRequestWorker *worker);
    void revokeLtiCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void updateOrganizationUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDetailsAdmin summary);

    Q_DECL_DEPRECATED_X("Use countOrgaUsersSignalError() instead")
    void countOrgaUsersSignalE(QList<OAIUserDetailsAdmin> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countOrgaUsersSignalError(QList<OAIUserDetailsAdmin> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLtiCredentialsSignalError() instead")
    void createLtiCredentialsSignalE(OAILtiCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLtiCredentialsSignalError(OAILtiCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInvitationSignalError() instead")
    void createOrganizationInvitationSignalE(OAIOrganizationInvitation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInvitationSignalError(OAIOrganizationInvitation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationUserSignalError() instead")
    void createOrganizationUserSignalE(OAIUserDetailsAdmin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationUserSignalError(OAIUserDetailsAdmin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLtiCredentialsSignalError() instead")
    void listLtiCredentialsSignalE(QList<OAILtiCredentials> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLtiCredentialsSignalError(QList<OAILtiCredentials> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrganizationInvitationsSignalError() instead")
    void listOrganizationInvitationsSignalE(QList<OAIOrganizationInvitation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationInvitationsSignalError(QList<OAIOrganizationInvitation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrganizationUsersSignalError() instead")
    void listOrganizationUsersSignalE(QList<OAIUserDetailsAdmin> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationUsersSignalError(QList<OAIUserDetailsAdmin> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOrganizationInvitationSignalError() instead")
    void removeOrganizationInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOrganizationInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOrganizationUserSignalError() instead")
    void removeOrganizationUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOrganizationUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeLtiCredentialsSignalError() instead")
    void revokeLtiCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeLtiCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationUserSignalError() instead")
    void updateOrganizationUserSignalE(OAIUserDetailsAdmin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationUserSignalError(OAIUserDetailsAdmin summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use countOrgaUsersSignalErrorFull() instead")
    void countOrgaUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countOrgaUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLtiCredentialsSignalErrorFull() instead")
    void createLtiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLtiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationInvitationSignalErrorFull() instead")
    void createOrganizationInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationUserSignalErrorFull() instead")
    void createOrganizationUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLtiCredentialsSignalErrorFull() instead")
    void listLtiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLtiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrganizationInvitationsSignalErrorFull() instead")
    void listOrganizationInvitationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationInvitationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrganizationUsersSignalErrorFull() instead")
    void listOrganizationUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOrganizationInvitationSignalErrorFull() instead")
    void removeOrganizationInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOrganizationInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOrganizationUserSignalErrorFull() instead")
    void removeOrganizationUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOrganizationUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeLtiCredentialsSignalErrorFull() instead")
    void revokeLtiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeLtiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationUserSignalErrorFull() instead")
    void updateOrganizationUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
