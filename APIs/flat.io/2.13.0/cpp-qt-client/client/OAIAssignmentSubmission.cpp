/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentSubmission::OAIAssignmentSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentSubmission::OAIAssignmentSubmission() {
    this->initializeModel();
}

OAIAssignmentSubmission::~OAIAssignmentSubmission() {}

void OAIAssignmentSubmission::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_classroom_isSet = false;
    m_classroom_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_draft_grade_isSet = false;
    m_draft_grade_isValid = false;

    m_google_classroom_isSet = false;
    m_google_classroom_isValid = false;

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_points_isSet = false;
    m_max_points_isValid = false;

    m_microsoft_graph_isSet = false;
    m_microsoft_graph_isValid = false;

    m_return_creator_isSet = false;
    m_return_creator_isValid = false;

    m_return_date_isSet = false;
    m_return_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submission_date_isSet = false;
    m_submission_date_isValid = false;
}

void OAIAssignmentSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentSubmission::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_classroom_isValid = ::OpenAPI::fromJsonValue(m_classroom, json[QString("classroom")]);
    m_classroom_isSet = !json[QString("classroom")].isNull() && m_classroom_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_draft_grade_isValid = ::OpenAPI::fromJsonValue(m_draft_grade, json[QString("draftGrade")]);
    m_draft_grade_isSet = !json[QString("draftGrade")].isNull() && m_draft_grade_isValid;

    m_google_classroom_isValid = ::OpenAPI::fromJsonValue(m_google_classroom, json[QString("googleClassroom")]);
    m_google_classroom_isSet = !json[QString("googleClassroom")].isNull() && m_google_classroom_isValid;

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_points_isValid = ::OpenAPI::fromJsonValue(m_max_points, json[QString("maxPoints")]);
    m_max_points_isSet = !json[QString("maxPoints")].isNull() && m_max_points_isValid;

    m_microsoft_graph_isValid = ::OpenAPI::fromJsonValue(m_microsoft_graph, json[QString("microsoftGraph")]);
    m_microsoft_graph_isSet = !json[QString("microsoftGraph")].isNull() && m_microsoft_graph_isValid;

    m_return_creator_isValid = ::OpenAPI::fromJsonValue(m_return_creator, json[QString("returnCreator")]);
    m_return_creator_isSet = !json[QString("returnCreator")].isNull() && m_return_creator_isValid;

    m_return_date_isValid = ::OpenAPI::fromJsonValue(m_return_date, json[QString("returnDate")]);
    m_return_date_isSet = !json[QString("returnDate")].isNull() && m_return_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submission_date_isValid = ::OpenAPI::fromJsonValue(m_submission_date, json[QString("submissionDate")]);
    m_submission_date_isSet = !json[QString("submissionDate")].isNull() && m_submission_date_isValid;
}

QString OAIAssignmentSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_isSet) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_classroom_isSet) {
        obj.insert(QString("classroom"), ::OpenAPI::toJsonValue(m_classroom));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_draft_grade_isSet) {
        obj.insert(QString("draftGrade"), ::OpenAPI::toJsonValue(m_draft_grade));
    }
    if (m_google_classroom.isSet()) {
        obj.insert(QString("googleClassroom"), ::OpenAPI::toJsonValue(m_google_classroom));
    }
    if (m_grade_isSet) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_points_isSet) {
        obj.insert(QString("maxPoints"), ::OpenAPI::toJsonValue(m_max_points));
    }
    if (m_microsoft_graph.isSet()) {
        obj.insert(QString("microsoftGraph"), ::OpenAPI::toJsonValue(m_microsoft_graph));
    }
    if (m_return_creator_isSet) {
        obj.insert(QString("returnCreator"), ::OpenAPI::toJsonValue(m_return_creator));
    }
    if (m_return_date_isSet) {
        obj.insert(QString("returnDate"), ::OpenAPI::toJsonValue(m_return_date));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submission_date_isSet) {
        obj.insert(QString("submissionDate"), ::OpenAPI::toJsonValue(m_submission_date));
    }
    return obj;
}

QString OAIAssignmentSubmission::getAssignment() const {
    return m_assignment;
}
void OAIAssignmentSubmission::setAssignment(const QString &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAIAssignmentSubmission::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAIAssignmentSubmission::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QList<OAIMediaAttachment> OAIAssignmentSubmission::getAttachments() const {
    return m_attachments;
}
void OAIAssignmentSubmission::setAttachments(const QList<OAIMediaAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIAssignmentSubmission::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIAssignmentSubmission::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIAssignmentSubmission::getClassroom() const {
    return m_classroom;
}
void OAIAssignmentSubmission::setClassroom(const QString &classroom) {
    m_classroom = classroom;
    m_classroom_isSet = true;
}

bool OAIAssignmentSubmission::is_classroom_Set() const{
    return m_classroom_isSet;
}

bool OAIAssignmentSubmission::is_classroom_Valid() const{
    return m_classroom_isValid;
}

QString OAIAssignmentSubmission::getCreationDate() const {
    return m_creation_date;
}
void OAIAssignmentSubmission::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAssignmentSubmission::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAssignmentSubmission::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIAssignmentSubmission::getCreator() const {
    return m_creator;
}
void OAIAssignmentSubmission::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIAssignmentSubmission::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIAssignmentSubmission::is_creator_Valid() const{
    return m_creator_isValid;
}

double OAIAssignmentSubmission::getDraftGrade() const {
    return m_draft_grade;
}
void OAIAssignmentSubmission::setDraftGrade(const double &draft_grade) {
    m_draft_grade = draft_grade;
    m_draft_grade_isSet = true;
}

bool OAIAssignmentSubmission::is_draft_grade_Set() const{
    return m_draft_grade_isSet;
}

bool OAIAssignmentSubmission::is_draft_grade_Valid() const{
    return m_draft_grade_isValid;
}

OAIGoogleClassroomSubmission OAIAssignmentSubmission::getGoogleClassroom() const {
    return m_google_classroom;
}
void OAIAssignmentSubmission::setGoogleClassroom(const OAIGoogleClassroomSubmission &google_classroom) {
    m_google_classroom = google_classroom;
    m_google_classroom_isSet = true;
}

bool OAIAssignmentSubmission::is_google_classroom_Set() const{
    return m_google_classroom_isSet;
}

bool OAIAssignmentSubmission::is_google_classroom_Valid() const{
    return m_google_classroom_isValid;
}

double OAIAssignmentSubmission::getGrade() const {
    return m_grade;
}
void OAIAssignmentSubmission::setGrade(const double &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIAssignmentSubmission::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIAssignmentSubmission::is_grade_Valid() const{
    return m_grade_isValid;
}

QString OAIAssignmentSubmission::getId() const {
    return m_id;
}
void OAIAssignmentSubmission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssignmentSubmission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssignmentSubmission::is_id_Valid() const{
    return m_id_isValid;
}

double OAIAssignmentSubmission::getMaxPoints() const {
    return m_max_points;
}
void OAIAssignmentSubmission::setMaxPoints(const double &max_points) {
    m_max_points = max_points;
    m_max_points_isSet = true;
}

bool OAIAssignmentSubmission::is_max_points_Set() const{
    return m_max_points_isSet;
}

bool OAIAssignmentSubmission::is_max_points_Valid() const{
    return m_max_points_isValid;
}

OAIMicrosoftGraphSubmission OAIAssignmentSubmission::getMicrosoftGraph() const {
    return m_microsoft_graph;
}
void OAIAssignmentSubmission::setMicrosoftGraph(const OAIMicrosoftGraphSubmission &microsoft_graph) {
    m_microsoft_graph = microsoft_graph;
    m_microsoft_graph_isSet = true;
}

bool OAIAssignmentSubmission::is_microsoft_graph_Set() const{
    return m_microsoft_graph_isSet;
}

bool OAIAssignmentSubmission::is_microsoft_graph_Valid() const{
    return m_microsoft_graph_isValid;
}

QString OAIAssignmentSubmission::getReturnCreator() const {
    return m_return_creator;
}
void OAIAssignmentSubmission::setReturnCreator(const QString &return_creator) {
    m_return_creator = return_creator;
    m_return_creator_isSet = true;
}

bool OAIAssignmentSubmission::is_return_creator_Set() const{
    return m_return_creator_isSet;
}

bool OAIAssignmentSubmission::is_return_creator_Valid() const{
    return m_return_creator_isValid;
}

QString OAIAssignmentSubmission::getReturnDate() const {
    return m_return_date;
}
void OAIAssignmentSubmission::setReturnDate(const QString &return_date) {
    m_return_date = return_date;
    m_return_date_isSet = true;
}

bool OAIAssignmentSubmission::is_return_date_Set() const{
    return m_return_date_isSet;
}

bool OAIAssignmentSubmission::is_return_date_Valid() const{
    return m_return_date_isValid;
}

OAIAssignmentSubmissionState OAIAssignmentSubmission::getState() const {
    return m_state;
}
void OAIAssignmentSubmission::setState(const OAIAssignmentSubmissionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAssignmentSubmission::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAssignmentSubmission::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAssignmentSubmission::getSubmissionDate() const {
    return m_submission_date;
}
void OAIAssignmentSubmission::setSubmissionDate(const QString &submission_date) {
    m_submission_date = submission_date;
    m_submission_date_isSet = true;
}

bool OAIAssignmentSubmission::is_submission_date_Set() const{
    return m_submission_date_isSet;
}

bool OAIAssignmentSubmission::is_submission_date_Valid() const{
    return m_submission_date_isValid;
}

bool OAIAssignmentSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classroom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_classroom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
