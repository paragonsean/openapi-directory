/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaAttachment::OAIMediaAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaAttachment::OAIMediaAttachment() {
    this->initializeModel();
}

OAIMediaAttachment::~OAIMediaAttachment() {}

void OAIMediaAttachment::initializeModel() {

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_author_url_isSet = false;
    m_author_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_google_drive_file_id_isSet = false;
    m_google_drive_file_id_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_html_height_isSet = false;
    m_html_height_isValid = false;

    m_html_width_isSet = false;
    m_html_width_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_lock_score_template_isSet = false;
    m_lock_score_template_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sharing_mode_isSet = false;
    m_sharing_mode_isValid = false;

    m_thumbnail_height_isSet = false;
    m_thumbnail_height_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_thumbnail_width_isSet = false;
    m_thumbnail_width_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_worksheet_isSet = false;
    m_worksheet_isValid = false;
}

void OAIMediaAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaAttachment::fromJsonObject(QJsonObject json) {

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("authorName")]);
    m_author_name_isSet = !json[QString("authorName")].isNull() && m_author_name_isValid;

    m_author_url_isValid = ::OpenAPI::fromJsonValue(m_author_url, json[QString("authorUrl")]);
    m_author_url_isSet = !json[QString("authorUrl")].isNull() && m_author_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_google_drive_file_id_isValid = ::OpenAPI::fromJsonValue(m_google_drive_file_id, json[QString("googleDriveFileId")]);
    m_google_drive_file_id_isSet = !json[QString("googleDriveFileId")].isNull() && m_google_drive_file_id_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_html_height_isValid = ::OpenAPI::fromJsonValue(m_html_height, json[QString("htmlHeight")]);
    m_html_height_isSet = !json[QString("htmlHeight")].isNull() && m_html_height_isValid;

    m_html_width_isValid = ::OpenAPI::fromJsonValue(m_html_width, json[QString("htmlWidth")]);
    m_html_width_isSet = !json[QString("htmlWidth")].isNull() && m_html_width_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_lock_score_template_isValid = ::OpenAPI::fromJsonValue(m_lock_score_template, json[QString("lockScoreTemplate")]);
    m_lock_score_template_isSet = !json[QString("lockScoreTemplate")].isNull() && m_lock_score_template_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_sharing_mode_isValid = ::OpenAPI::fromJsonValue(m_sharing_mode, json[QString("sharingMode")]);
    m_sharing_mode_isSet = !json[QString("sharingMode")].isNull() && m_sharing_mode_isValid;

    m_thumbnail_height_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_height, json[QString("thumbnailHeight")]);
    m_thumbnail_height_isSet = !json[QString("thumbnailHeight")].isNull() && m_thumbnail_height_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_thumbnail_width_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_width, json[QString("thumbnailWidth")]);
    m_thumbnail_width_isSet = !json[QString("thumbnailWidth")].isNull() && m_thumbnail_width_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_worksheet_isValid = ::OpenAPI::fromJsonValue(m_worksheet, json[QString("worksheet")]);
    m_worksheet_isSet = !json[QString("worksheet")].isNull() && m_worksheet_isValid;
}

QString OAIMediaAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_author_name_isSet) {
        obj.insert(QString("authorName"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_author_url_isSet) {
        obj.insert(QString("authorUrl"), ::OpenAPI::toJsonValue(m_author_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_google_drive_file_id_isSet) {
        obj.insert(QString("googleDriveFileId"), ::OpenAPI::toJsonValue(m_google_drive_file_id));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_html_height_isSet) {
        obj.insert(QString("htmlHeight"), ::OpenAPI::toJsonValue(m_html_height));
    }
    if (m_html_width_isSet) {
        obj.insert(QString("htmlWidth"), ::OpenAPI::toJsonValue(m_html_width));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_lock_score_template_isSet) {
        obj.insert(QString("lockScoreTemplate"), ::OpenAPI::toJsonValue(m_lock_score_template));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sharing_mode.isSet()) {
        obj.insert(QString("sharingMode"), ::OpenAPI::toJsonValue(m_sharing_mode));
    }
    if (m_thumbnail_height_isSet) {
        obj.insert(QString("thumbnailHeight"), ::OpenAPI::toJsonValue(m_thumbnail_height));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_thumbnail_width_isSet) {
        obj.insert(QString("thumbnailWidth"), ::OpenAPI::toJsonValue(m_thumbnail_width));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_track_isSet) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_worksheet_isSet) {
        obj.insert(QString("worksheet"), ::OpenAPI::toJsonValue(m_worksheet));
    }
    return obj;
}

QString OAIMediaAttachment::getAuthorName() const {
    return m_author_name;
}
void OAIMediaAttachment::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIMediaAttachment::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIMediaAttachment::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAIMediaAttachment::getAuthorUrl() const {
    return m_author_url;
}
void OAIMediaAttachment::setAuthorUrl(const QString &author_url) {
    m_author_url = author_url;
    m_author_url_isSet = true;
}

bool OAIMediaAttachment::is_author_url_Set() const{
    return m_author_url_isSet;
}

bool OAIMediaAttachment::is_author_url_Valid() const{
    return m_author_url_isValid;
}

QString OAIMediaAttachment::getDescription() const {
    return m_description;
}
void OAIMediaAttachment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMediaAttachment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMediaAttachment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMediaAttachment::getGoogleDriveFileId() const {
    return m_google_drive_file_id;
}
void OAIMediaAttachment::setGoogleDriveFileId(const QString &google_drive_file_id) {
    m_google_drive_file_id = google_drive_file_id;
    m_google_drive_file_id_isSet = true;
}

bool OAIMediaAttachment::is_google_drive_file_id_Set() const{
    return m_google_drive_file_id_isSet;
}

bool OAIMediaAttachment::is_google_drive_file_id_Valid() const{
    return m_google_drive_file_id_isValid;
}

QString OAIMediaAttachment::getHtml() const {
    return m_html;
}
void OAIMediaAttachment::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIMediaAttachment::is_html_Set() const{
    return m_html_isSet;
}

bool OAIMediaAttachment::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIMediaAttachment::getHtmlHeight() const {
    return m_html_height;
}
void OAIMediaAttachment::setHtmlHeight(const QString &html_height) {
    m_html_height = html_height;
    m_html_height_isSet = true;
}

bool OAIMediaAttachment::is_html_height_Set() const{
    return m_html_height_isSet;
}

bool OAIMediaAttachment::is_html_height_Valid() const{
    return m_html_height_isValid;
}

QString OAIMediaAttachment::getHtmlWidth() const {
    return m_html_width;
}
void OAIMediaAttachment::setHtmlWidth(const QString &html_width) {
    m_html_width = html_width;
    m_html_width_isSet = true;
}

bool OAIMediaAttachment::is_html_width_Set() const{
    return m_html_width_isSet;
}

bool OAIMediaAttachment::is_html_width_Valid() const{
    return m_html_width_isValid;
}

QString OAIMediaAttachment::getIconUrl() const {
    return m_icon_url;
}
void OAIMediaAttachment::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIMediaAttachment::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIMediaAttachment::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

bool OAIMediaAttachment::isLockScoreTemplate() const {
    return m_lock_score_template;
}
void OAIMediaAttachment::setLockScoreTemplate(const bool &lock_score_template) {
    m_lock_score_template = lock_score_template;
    m_lock_score_template_isSet = true;
}

bool OAIMediaAttachment::is_lock_score_template_Set() const{
    return m_lock_score_template_isSet;
}

bool OAIMediaAttachment::is_lock_score_template_Valid() const{
    return m_lock_score_template_isValid;
}

QString OAIMediaAttachment::getMimeType() const {
    return m_mime_type;
}
void OAIMediaAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIMediaAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIMediaAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIMediaAttachment::getRevision() const {
    return m_revision;
}
void OAIMediaAttachment::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIMediaAttachment::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIMediaAttachment::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIMediaAttachment::getScore() const {
    return m_score;
}
void OAIMediaAttachment::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMediaAttachment::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMediaAttachment::is_score_Valid() const{
    return m_score_isValid;
}

OAIMediaScoreSharingMode OAIMediaAttachment::getSharingMode() const {
    return m_sharing_mode;
}
void OAIMediaAttachment::setSharingMode(const OAIMediaScoreSharingMode &sharing_mode) {
    m_sharing_mode = sharing_mode;
    m_sharing_mode_isSet = true;
}

bool OAIMediaAttachment::is_sharing_mode_Set() const{
    return m_sharing_mode_isSet;
}

bool OAIMediaAttachment::is_sharing_mode_Valid() const{
    return m_sharing_mode_isValid;
}

qint32 OAIMediaAttachment::getThumbnailHeight() const {
    return m_thumbnail_height;
}
void OAIMediaAttachment::setThumbnailHeight(const qint32 &thumbnail_height) {
    m_thumbnail_height = thumbnail_height;
    m_thumbnail_height_isSet = true;
}

bool OAIMediaAttachment::is_thumbnail_height_Set() const{
    return m_thumbnail_height_isSet;
}

bool OAIMediaAttachment::is_thumbnail_height_Valid() const{
    return m_thumbnail_height_isValid;
}

QString OAIMediaAttachment::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIMediaAttachment::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIMediaAttachment::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIMediaAttachment::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

qint32 OAIMediaAttachment::getThumbnailWidth() const {
    return m_thumbnail_width;
}
void OAIMediaAttachment::setThumbnailWidth(const qint32 &thumbnail_width) {
    m_thumbnail_width = thumbnail_width;
    m_thumbnail_width_isSet = true;
}

bool OAIMediaAttachment::is_thumbnail_width_Set() const{
    return m_thumbnail_width_isSet;
}

bool OAIMediaAttachment::is_thumbnail_width_Valid() const{
    return m_thumbnail_width_isValid;
}

QString OAIMediaAttachment::getTitle() const {
    return m_title;
}
void OAIMediaAttachment::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMediaAttachment::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMediaAttachment::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMediaAttachment::getTrack() const {
    return m_track;
}
void OAIMediaAttachment::setTrack(const QString &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIMediaAttachment::is_track_Set() const{
    return m_track_isSet;
}

bool OAIMediaAttachment::is_track_Valid() const{
    return m_track_isValid;
}

QString OAIMediaAttachment::getType() const {
    return m_type;
}
void OAIMediaAttachment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMediaAttachment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMediaAttachment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMediaAttachment::getUrl() const {
    return m_url;
}
void OAIMediaAttachment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMediaAttachment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMediaAttachment::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIMediaAttachment::getWorksheet() const {
    return m_worksheet;
}
void OAIMediaAttachment::setWorksheet(const QString &worksheet) {
    m_worksheet = worksheet;
    m_worksheet_isSet = true;
}

bool OAIMediaAttachment::is_worksheet_Set() const{
    return m_worksheet_isSet;
}

bool OAIMediaAttachment::is_worksheet_Valid() const{
    return m_worksheet_isValid;
}

bool OAIMediaAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_drive_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_score_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worksheet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
