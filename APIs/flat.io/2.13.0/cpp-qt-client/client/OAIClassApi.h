/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClassApi_H
#define OAI_OAIClassApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignment.h"
#include "OAIAssignmentCopy.h"
#include "OAIAssignmentCreation.h"
#include "OAIAssignmentSubmission.h"
#include "OAIAssignmentSubmissionComment.h"
#include "OAIAssignmentSubmissionCommentCreation.h"
#include "OAIAssignmentSubmissionHistory.h"
#include "OAIAssignmentSubmissionUpdate.h"
#include "OAIClassCreation.h"
#include "OAIClassDetails.h"
#include "OAIClassUpdate.h"
#include "OAIFlatErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIScoreDetails.h"
#include "OAIScoreFork.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClassApi : public QObject {
    Q_OBJECT

public:
    OAIClassApi(const int timeOut = 0);
    ~OAIClassApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_class QString [required]
    */
    virtual void activateClass(const QString &r_class);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  user QString [required]
    */
    virtual void addClassUser(const QString &r_class, const QString &user);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    */
    virtual void archiveAssignment(const QString &r_class, const QString &assignment);

    /**
    * @param[in]  r_class QString [required]
    */
    virtual void archiveClass(const QString &r_class);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  body OAIAssignmentCopy [required]
    */
    virtual void copyAssignment(const QString &r_class, const QString &assignment, const OAIAssignmentCopy &body);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  body OAIAssignmentCreation [optional]
    */
    virtual void createAssignment(const QString &r_class, const ::OpenAPI::OptionalParam<OAIAssignmentCreation> &body = ::OpenAPI::OptionalParam<OAIAssignmentCreation>());

    /**
    * @param[in]  body OAIClassCreation [required]
    */
    virtual void createClass(const OAIClassCreation &body);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  body OAIAssignmentSubmissionUpdate [required]
    */
    virtual void createSubmission(const QString &r_class, const QString &assignment, const OAIAssignmentSubmissionUpdate &body);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  user QString [required]
    */
    virtual void deleteClassUser(const QString &r_class, const QString &user);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    */
    virtual void deleteSubmission(const QString &r_class, const QString &assignment, const QString &submission);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    * @param[in]  comment QString [required]
    */
    virtual void deleteSubmissionComment(const QString &r_class, const QString &assignment, const QString &submission, const QString &comment);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    * @param[in]  body OAIAssignmentSubmissionUpdate [required]
    */
    virtual void editSubmission(const QString &r_class, const QString &assignment, const QString &submission, const OAIAssignmentSubmissionUpdate &body);

    /**
    * @param[in]  enrollment_code QString [required]
    */
    virtual void enrollClass(const QString &enrollment_code);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    */
    virtual void exportSubmissionsReviewsAsCsv(const QString &r_class, const QString &assignment);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    */
    virtual void exportSubmissionsReviewsAsExcel(const QString &r_class, const QString &assignment);

    /**
    * @param[in]  score QString [required]
    * @param[in]  body OAIScoreFork [required]
    * @param[in]  sharing_key QString [optional]
    */
    virtual void forkScore(const QString &score, const OAIScoreFork &body, const ::OpenAPI::OptionalParam<QString> &sharing_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_class QString [required]
    */
    virtual void getClass(const QString &r_class);

    /**
    * @param[in]  score QString [required]
    */
    virtual void getScoreSubmissions(const QString &score);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    */
    virtual void getSubmission(const QString &r_class, const QString &assignment, const QString &submission);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    */
    virtual void getSubmissionComments(const QString &r_class, const QString &assignment, const QString &submission);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    */
    virtual void getSubmissionHistory(const QString &r_class, const QString &assignment, const QString &submission);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    */
    virtual void getSubmissions(const QString &r_class, const QString &assignment);

    /**
    * @param[in]  r_class QString [required]
    */
    virtual void listAssignments(const QString &r_class);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  user QString [required]
    */
    virtual void listClassStudentSubmissions(const QString &r_class, const QString &user);

    /**
    * @param[in]  state QString [optional]
    */
    virtual void listClasses(const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    * @param[in]  oai_assignment_submission_comment_creation OAIAssignmentSubmissionCommentCreation [required]
    */
    virtual void postSubmissionComment(const QString &r_class, const QString &assignment, const QString &submission, const OAIAssignmentSubmissionCommentCreation &oai_assignment_submission_comment_creation);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    */
    virtual void unarchiveAssignment(const QString &r_class, const QString &assignment);

    /**
    * @param[in]  r_class QString [required]
    */
    virtual void unarchiveClass(const QString &r_class);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  body OAIClassUpdate [optional]
    */
    virtual void updateClass(const QString &r_class, const ::OpenAPI::OptionalParam<OAIClassUpdate> &body = ::OpenAPI::OptionalParam<OAIClassUpdate>());

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  assignment QString [required]
    * @param[in]  submission QString [required]
    * @param[in]  comment QString [required]
    * @param[in]  oai_assignment_submission_comment_creation OAIAssignmentSubmissionCommentCreation [required]
    */
    virtual void updateSubmissionComment(const QString &r_class, const QString &assignment, const QString &submission, const QString &comment, const OAIAssignmentSubmissionCommentCreation &oai_assignment_submission_comment_creation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateClassCallback(OAIHttpRequestWorker *worker);
    void addClassUserCallback(OAIHttpRequestWorker *worker);
    void archiveAssignmentCallback(OAIHttpRequestWorker *worker);
    void archiveClassCallback(OAIHttpRequestWorker *worker);
    void copyAssignmentCallback(OAIHttpRequestWorker *worker);
    void createAssignmentCallback(OAIHttpRequestWorker *worker);
    void createClassCallback(OAIHttpRequestWorker *worker);
    void createSubmissionCallback(OAIHttpRequestWorker *worker);
    void deleteClassUserCallback(OAIHttpRequestWorker *worker);
    void deleteSubmissionCallback(OAIHttpRequestWorker *worker);
    void deleteSubmissionCommentCallback(OAIHttpRequestWorker *worker);
    void editSubmissionCallback(OAIHttpRequestWorker *worker);
    void enrollClassCallback(OAIHttpRequestWorker *worker);
    void exportSubmissionsReviewsAsCsvCallback(OAIHttpRequestWorker *worker);
    void exportSubmissionsReviewsAsExcelCallback(OAIHttpRequestWorker *worker);
    void forkScoreCallback(OAIHttpRequestWorker *worker);
    void getClassCallback(OAIHttpRequestWorker *worker);
    void getScoreSubmissionsCallback(OAIHttpRequestWorker *worker);
    void getSubmissionCallback(OAIHttpRequestWorker *worker);
    void getSubmissionCommentsCallback(OAIHttpRequestWorker *worker);
    void getSubmissionHistoryCallback(OAIHttpRequestWorker *worker);
    void getSubmissionsCallback(OAIHttpRequestWorker *worker);
    void listAssignmentsCallback(OAIHttpRequestWorker *worker);
    void listClassStudentSubmissionsCallback(OAIHttpRequestWorker *worker);
    void listClassesCallback(OAIHttpRequestWorker *worker);
    void postSubmissionCommentCallback(OAIHttpRequestWorker *worker);
    void unarchiveAssignmentCallback(OAIHttpRequestWorker *worker);
    void unarchiveClassCallback(OAIHttpRequestWorker *worker);
    void updateClassCallback(OAIHttpRequestWorker *worker);
    void updateSubmissionCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateClassSignal(OAIClassDetails summary);
    void addClassUserSignal();
    void archiveAssignmentSignal(OAIAssignment summary);
    void archiveClassSignal(OAIClassDetails summary);
    void copyAssignmentSignal(OAIAssignment summary);
    void createAssignmentSignal(OAIAssignment summary);
    void createClassSignal(OAIClassDetails summary);
    void createSubmissionSignal(OAIAssignmentSubmission summary);
    void deleteClassUserSignal();
    void deleteSubmissionSignal();
    void deleteSubmissionCommentSignal();
    void editSubmissionSignal(OAIAssignmentSubmission summary);
    void enrollClassSignal(OAIClassDetails summary);
    void exportSubmissionsReviewsAsCsvSignal(OAIHttpFileElement summary);
    void exportSubmissionsReviewsAsExcelSignal(OAIHttpFileElement summary);
    void forkScoreSignal(OAIScoreDetails summary);
    void getClassSignal(OAIClassDetails summary);
    void getScoreSubmissionsSignal(QList<OAIAssignmentSubmission> summary);
    void getSubmissionSignal(OAIAssignmentSubmission summary);
    void getSubmissionCommentsSignal(QList<OAIAssignmentSubmissionComment> summary);
    void getSubmissionHistorySignal(QList<OAIAssignmentSubmissionHistory> summary);
    void getSubmissionsSignal(QList<OAIAssignmentSubmission> summary);
    void listAssignmentsSignal(QList<OAIAssignment> summary);
    void listClassStudentSubmissionsSignal(QList<OAIAssignmentSubmission> summary);
    void listClassesSignal(QList<OAIClassDetails> summary);
    void postSubmissionCommentSignal(OAIAssignmentSubmissionComment summary);
    void unarchiveAssignmentSignal(OAIAssignment summary);
    void unarchiveClassSignal(OAIClassDetails summary);
    void updateClassSignal(OAIClassDetails summary);
    void updateSubmissionCommentSignal(OAIAssignmentSubmissionComment summary);


    void activateClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void addClassUserSignalFull(OAIHttpRequestWorker *worker);
    void archiveAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void archiveClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void copyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void createAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void createClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void createSubmissionSignalFull(OAIHttpRequestWorker *worker, OAIAssignmentSubmission summary);
    void deleteClassUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubmissionSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubmissionCommentSignalFull(OAIHttpRequestWorker *worker);
    void editSubmissionSignalFull(OAIHttpRequestWorker *worker, OAIAssignmentSubmission summary);
    void enrollClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void exportSubmissionsReviewsAsCsvSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportSubmissionsReviewsAsExcelSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void forkScoreSignalFull(OAIHttpRequestWorker *worker, OAIScoreDetails summary);
    void getClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void getScoreSubmissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentSubmission> summary);
    void getSubmissionSignalFull(OAIHttpRequestWorker *worker, OAIAssignmentSubmission summary);
    void getSubmissionCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentSubmissionComment> summary);
    void getSubmissionHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentSubmissionHistory> summary);
    void getSubmissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentSubmission> summary);
    void listAssignmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignment> summary);
    void listClassStudentSubmissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentSubmission> summary);
    void listClassesSignalFull(OAIHttpRequestWorker *worker, QList<OAIClassDetails> summary);
    void postSubmissionCommentSignalFull(OAIHttpRequestWorker *worker, OAIAssignmentSubmissionComment summary);
    void unarchiveAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void unarchiveClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void updateClassSignalFull(OAIHttpRequestWorker *worker, OAIClassDetails summary);
    void updateSubmissionCommentSignalFull(OAIHttpRequestWorker *worker, OAIAssignmentSubmissionComment summary);

    Q_DECL_DEPRECATED_X("Use activateClassSignalError() instead")
    void activateClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activateClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addClassUserSignalError() instead")
    void addClassUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addClassUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveAssignmentSignalError() instead")
    void archiveAssignmentSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveAssignmentSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveClassSignalError() instead")
    void archiveClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyAssignmentSignalError() instead")
    void copyAssignmentSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyAssignmentSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssignmentSignalError() instead")
    void createAssignmentSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssignmentSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createClassSignalError() instead")
    void createClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubmissionSignalError() instead")
    void createSubmissionSignalE(OAIAssignmentSubmission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubmissionSignalError(OAIAssignmentSubmission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteClassUserSignalError() instead")
    void deleteClassUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteClassUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubmissionSignalError() instead")
    void deleteSubmissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubmissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubmissionCommentSignalError() instead")
    void deleteSubmissionCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubmissionCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editSubmissionSignalError() instead")
    void editSubmissionSignalE(OAIAssignmentSubmission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editSubmissionSignalError(OAIAssignmentSubmission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enrollClassSignalError() instead")
    void enrollClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enrollClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSubmissionsReviewsAsCsvSignalError() instead")
    void exportSubmissionsReviewsAsCsvSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSubmissionsReviewsAsCsvSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSubmissionsReviewsAsExcelSignalError() instead")
    void exportSubmissionsReviewsAsExcelSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSubmissionsReviewsAsExcelSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkScoreSignalError() instead")
    void forkScoreSignalE(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forkScoreSignalError(OAIScoreDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassSignalError() instead")
    void getClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreSubmissionsSignalError() instead")
    void getScoreSubmissionsSignalE(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreSubmissionsSignalError(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionSignalError() instead")
    void getSubmissionSignalE(OAIAssignmentSubmission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionSignalError(OAIAssignmentSubmission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionCommentsSignalError() instead")
    void getSubmissionCommentsSignalE(QList<OAIAssignmentSubmissionComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionCommentsSignalError(QList<OAIAssignmentSubmissionComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionHistorySignalError() instead")
    void getSubmissionHistorySignalE(QList<OAIAssignmentSubmissionHistory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionHistorySignalError(QList<OAIAssignmentSubmissionHistory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionsSignalError() instead")
    void getSubmissionsSignalE(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionsSignalError(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssignmentsSignalError() instead")
    void listAssignmentsSignalE(QList<OAIAssignment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssignmentsSignalError(QList<OAIAssignment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listClassStudentSubmissionsSignalError() instead")
    void listClassStudentSubmissionsSignalE(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listClassStudentSubmissionsSignalError(QList<OAIAssignmentSubmission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listClassesSignalError() instead")
    void listClassesSignalE(QList<OAIClassDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listClassesSignalError(QList<OAIClassDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSubmissionCommentSignalError() instead")
    void postSubmissionCommentSignalE(OAIAssignmentSubmissionComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSubmissionCommentSignalError(OAIAssignmentSubmissionComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchiveAssignmentSignalError() instead")
    void unarchiveAssignmentSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchiveAssignmentSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchiveClassSignalError() instead")
    void unarchiveClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchiveClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClassSignalError() instead")
    void updateClassSignalE(OAIClassDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClassSignalError(OAIClassDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubmissionCommentSignalError() instead")
    void updateSubmissionCommentSignalE(OAIAssignmentSubmissionComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubmissionCommentSignalError(OAIAssignmentSubmissionComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateClassSignalErrorFull() instead")
    void activateClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addClassUserSignalErrorFull() instead")
    void addClassUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addClassUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveAssignmentSignalErrorFull() instead")
    void archiveAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveClassSignalErrorFull() instead")
    void archiveClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyAssignmentSignalErrorFull() instead")
    void copyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssignmentSignalErrorFull() instead")
    void createAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createClassSignalErrorFull() instead")
    void createClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubmissionSignalErrorFull() instead")
    void createSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteClassUserSignalErrorFull() instead")
    void deleteClassUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteClassUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubmissionSignalErrorFull() instead")
    void deleteSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubmissionCommentSignalErrorFull() instead")
    void deleteSubmissionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubmissionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editSubmissionSignalErrorFull() instead")
    void editSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enrollClassSignalErrorFull() instead")
    void enrollClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enrollClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSubmissionsReviewsAsCsvSignalErrorFull() instead")
    void exportSubmissionsReviewsAsCsvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSubmissionsReviewsAsCsvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportSubmissionsReviewsAsExcelSignalErrorFull() instead")
    void exportSubmissionsReviewsAsExcelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportSubmissionsReviewsAsExcelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkScoreSignalErrorFull() instead")
    void forkScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forkScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassSignalErrorFull() instead")
    void getClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreSubmissionsSignalErrorFull() instead")
    void getScoreSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionSignalErrorFull() instead")
    void getSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionCommentsSignalErrorFull() instead")
    void getSubmissionCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionHistorySignalErrorFull() instead")
    void getSubmissionHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubmissionsSignalErrorFull() instead")
    void getSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssignmentsSignalErrorFull() instead")
    void listAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listClassStudentSubmissionsSignalErrorFull() instead")
    void listClassStudentSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listClassStudentSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listClassesSignalErrorFull() instead")
    void listClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSubmissionCommentSignalErrorFull() instead")
    void postSubmissionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSubmissionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchiveAssignmentSignalErrorFull() instead")
    void unarchiveAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchiveAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchiveClassSignalErrorFull() instead")
    void unarchiveClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchiveClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClassSignalErrorFull() instead")
    void updateClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubmissionCommentSignalErrorFull() instead")
    void updateSubmissionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubmissionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
