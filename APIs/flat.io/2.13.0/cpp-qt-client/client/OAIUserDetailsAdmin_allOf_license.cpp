/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDetailsAdmin_allOf_license.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDetailsAdmin_allOf_license::OAIUserDetailsAdmin_allOf_license(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDetailsAdmin_allOf_license::OAIUserDetailsAdmin_allOf_license() {
    this->initializeModel();
}

OAIUserDetailsAdmin_allOf_license::~OAIUserDetailsAdmin_allOf_license() {}

void OAIUserDetailsAdmin_allOf_license::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIUserDetailsAdmin_allOf_license::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDetailsAdmin_allOf_license::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIUserDetailsAdmin_allOf_license::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDetailsAdmin_allOf_license::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

bool OAIUserDetailsAdmin_allOf_license::isActive() const {
    return m_active;
}
void OAIUserDetailsAdmin_allOf_license::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUserDetailsAdmin_allOf_license::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUserDetailsAdmin_allOf_license::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAIUserDetailsAdmin_allOf_license::getExpirationDate() const {
    return m_expiration_date;
}
void OAIUserDetailsAdmin_allOf_license::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIUserDetailsAdmin_allOf_license::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIUserDetailsAdmin_allOf_license::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIUserDetailsAdmin_allOf_license::getId() const {
    return m_id;
}
void OAIUserDetailsAdmin_allOf_license::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserDetailsAdmin_allOf_license::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserDetailsAdmin_allOf_license::is_id_Valid() const{
    return m_id_isValid;
}

OAILicenseMode OAIUserDetailsAdmin_allOf_license::getMode() const {
    return m_mode;
}
void OAIUserDetailsAdmin_allOf_license::setMode(const OAILicenseMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIUserDetailsAdmin_allOf_license::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIUserDetailsAdmin_allOf_license::is_mode_Valid() const{
    return m_mode_isValid;
}

OAILicenseSources OAIUserDetailsAdmin_allOf_license::getSource() const {
    return m_source;
}
void OAIUserDetailsAdmin_allOf_license::setSource(const OAILicenseSources &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIUserDetailsAdmin_allOf_license::is_source_Set() const{
    return m_source_isSet;
}

bool OAIUserDetailsAdmin_allOf_license::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIUserDetailsAdmin_allOf_license::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDetailsAdmin_allOf_license::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
