/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPublicSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPublicSummary::OAIUserPublicSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPublicSummary::OAIUserPublicSummary() {
    this->initializeModel();
}

OAIUserPublicSummary::~OAIUserPublicSummary() {}

void OAIUserPublicSummary::initializeModel() {

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_flat_team_isSet = false;
    m_is_flat_team_isValid = false;

    m_is_power_user_isSet = false;
    m_is_power_user_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_printable_name_isSet = false;
    m_printable_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_class_role_isSet = false;
    m_class_role_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_organization_role_isSet = false;
    m_organization_role_isValid = false;
}

void OAIUserPublicSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPublicSummary::fromJsonObject(QJsonObject json) {

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_flat_team_isValid = ::OpenAPI::fromJsonValue(m_is_flat_team, json[QString("isFlatTeam")]);
    m_is_flat_team_isSet = !json[QString("isFlatTeam")].isNull() && m_is_flat_team_isValid;

    m_is_power_user_isValid = ::OpenAPI::fromJsonValue(m_is_power_user, json[QString("isPowerUser")]);
    m_is_power_user_isSet = !json[QString("isPowerUser")].isNull() && m_is_power_user_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_printable_name_isValid = ::OpenAPI::fromJsonValue(m_printable_name, json[QString("printableName")]);
    m_printable_name_isSet = !json[QString("printableName")].isNull() && m_printable_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_class_role_isValid = ::OpenAPI::fromJsonValue(m_class_role, json[QString("classRole")]);
    m_class_role_isSet = !json[QString("classRole")].isNull() && m_class_role_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("htmlUrl")]);
    m_html_url_isSet = !json[QString("htmlUrl")].isNull() && m_html_url_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_organization_role_isValid = ::OpenAPI::fromJsonValue(m_organization_role, json[QString("organizationRole")]);
    m_organization_role_isSet = !json[QString("organizationRole")].isNull() && m_organization_role_isValid;
}

QString OAIUserPublicSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPublicSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_flat_team_isSet) {
        obj.insert(QString("isFlatTeam"), ::OpenAPI::toJsonValue(m_is_flat_team));
    }
    if (m_is_power_user_isSet) {
        obj.insert(QString("isPowerUser"), ::OpenAPI::toJsonValue(m_is_power_user));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_picture_isSet) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_printable_name_isSet) {
        obj.insert(QString("printableName"), ::OpenAPI::toJsonValue(m_printable_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_class_role.isSet()) {
        obj.insert(QString("classRole"), ::OpenAPI::toJsonValue(m_class_role));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("htmlUrl"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_organization_role.isSet()) {
        obj.insert(QString("organizationRole"), ::OpenAPI::toJsonValue(m_organization_role));
    }
    return obj;
}

QString OAIUserPublicSummary::getFirstname() const {
    return m_firstname;
}
void OAIUserPublicSummary::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIUserPublicSummary::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIUserPublicSummary::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAIUserPublicSummary::getId() const {
    return m_id;
}
void OAIUserPublicSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserPublicSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserPublicSummary::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserPublicSummary::isIsFlatTeam() const {
    return m_is_flat_team;
}
void OAIUserPublicSummary::setIsFlatTeam(const bool &is_flat_team) {
    m_is_flat_team = is_flat_team;
    m_is_flat_team_isSet = true;
}

bool OAIUserPublicSummary::is_is_flat_team_Set() const{
    return m_is_flat_team_isSet;
}

bool OAIUserPublicSummary::is_is_flat_team_Valid() const{
    return m_is_flat_team_isValid;
}

bool OAIUserPublicSummary::isIsPowerUser() const {
    return m_is_power_user;
}
void OAIUserPublicSummary::setIsPowerUser(const bool &is_power_user) {
    m_is_power_user = is_power_user;
    m_is_power_user_isSet = true;
}

bool OAIUserPublicSummary::is_is_power_user_Set() const{
    return m_is_power_user_isSet;
}

bool OAIUserPublicSummary::is_is_power_user_Valid() const{
    return m_is_power_user_isValid;
}

QString OAIUserPublicSummary::getLastname() const {
    return m_lastname;
}
void OAIUserPublicSummary::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIUserPublicSummary::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIUserPublicSummary::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAIUserPublicSummary::getName() const {
    return m_name;
}
void OAIUserPublicSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserPublicSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserPublicSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserPublicSummary::getPicture() const {
    return m_picture;
}
void OAIUserPublicSummary::setPicture(const QString &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAIUserPublicSummary::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAIUserPublicSummary::is_picture_Valid() const{
    return m_picture_isValid;
}

QString OAIUserPublicSummary::getPrintableName() const {
    return m_printable_name;
}
void OAIUserPublicSummary::setPrintableName(const QString &printable_name) {
    m_printable_name = printable_name;
    m_printable_name_isSet = true;
}

bool OAIUserPublicSummary::is_printable_name_Set() const{
    return m_printable_name_isSet;
}

bool OAIUserPublicSummary::is_printable_name_Valid() const{
    return m_printable_name_isValid;
}

QString OAIUserPublicSummary::getType() const {
    return m_type;
}
void OAIUserPublicSummary::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUserPublicSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUserPublicSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUserPublicSummary::getUsername() const {
    return m_username;
}
void OAIUserPublicSummary::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserPublicSummary::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserPublicSummary::is_username_Valid() const{
    return m_username_isValid;
}

OAIClassRoles OAIUserPublicSummary::getClassRole() const {
    return m_class_role;
}
void OAIUserPublicSummary::setClassRole(const OAIClassRoles &class_role) {
    m_class_role = class_role;
    m_class_role_isSet = true;
}

bool OAIUserPublicSummary::is_class_role_Set() const{
    return m_class_role_isSet;
}

bool OAIUserPublicSummary::is_class_role_Valid() const{
    return m_class_role_isValid;
}

QString OAIUserPublicSummary::getHtmlUrl() const {
    return m_html_url;
}
void OAIUserPublicSummary::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIUserPublicSummary::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIUserPublicSummary::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIUserPublicSummary::getOrganization() const {
    return m_organization;
}
void OAIUserPublicSummary::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIUserPublicSummary::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIUserPublicSummary::is_organization_Valid() const{
    return m_organization_isValid;
}

OAIOrganizationRoles OAIUserPublicSummary::getOrganizationRole() const {
    return m_organization_role;
}
void OAIUserPublicSummary::setOrganizationRole(const OAIOrganizationRoles &organization_role) {
    m_organization_role = organization_role;
    m_organization_role_isSet = true;
}

bool OAIUserPublicSummary::is_organization_role_Set() const{
    return m_organization_role_isSet;
}

bool OAIUserPublicSummary::is_organization_role_Valid() const{
    return m_organization_role_isValid;
}

bool OAIUserPublicSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_flat_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_power_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printable_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPublicSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
