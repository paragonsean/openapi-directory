/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceCollaborator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceCollaborator::OAIResourceCollaborator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceCollaborator::OAIResourceCollaborator() {
    this->initializeModel();
}

OAIResourceCollaborator::~OAIResourceCollaborator() {}

void OAIResourceCollaborator::initializeModel() {

    m_acl_admin_isSet = false;
    m_acl_admin_isValid = false;

    m_acl_read_isSet = false;
    m_acl_read_isValid = false;

    m_acl_write_isSet = false;
    m_acl_write_isValid = false;

    m_is_collaborator_isSet = false;
    m_is_collaborator_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;
}

void OAIResourceCollaborator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceCollaborator::fromJsonObject(QJsonObject json) {

    m_acl_admin_isValid = ::OpenAPI::fromJsonValue(m_acl_admin, json[QString("aclAdmin")]);
    m_acl_admin_isSet = !json[QString("aclAdmin")].isNull() && m_acl_admin_isValid;

    m_acl_read_isValid = ::OpenAPI::fromJsonValue(m_acl_read, json[QString("aclRead")]);
    m_acl_read_isSet = !json[QString("aclRead")].isNull() && m_acl_read_isValid;

    m_acl_write_isValid = ::OpenAPI::fromJsonValue(m_acl_write, json[QString("aclWrite")]);
    m_acl_write_isSet = !json[QString("aclWrite")].isNull() && m_acl_write_isValid;

    m_is_collaborator_isValid = ::OpenAPI::fromJsonValue(m_is_collaborator, json[QString("isCollaborator")]);
    m_is_collaborator_isSet = !json[QString("isCollaborator")].isNull() && m_is_collaborator_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;
}

QString OAIResourceCollaborator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceCollaborator::asJsonObject() const {
    QJsonObject obj;
    if (m_acl_admin_isSet) {
        obj.insert(QString("aclAdmin"), ::OpenAPI::toJsonValue(m_acl_admin));
    }
    if (m_acl_read_isSet) {
        obj.insert(QString("aclRead"), ::OpenAPI::toJsonValue(m_acl_read));
    }
    if (m_acl_write_isSet) {
        obj.insert(QString("aclWrite"), ::OpenAPI::toJsonValue(m_acl_write));
    }
    if (m_is_collaborator_isSet) {
        obj.insert(QString("isCollaborator"), ::OpenAPI::toJsonValue(m_is_collaborator));
    }
    if (m_collection_isSet) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    return obj;
}

bool OAIResourceCollaborator::isAclAdmin() const {
    return m_acl_admin;
}
void OAIResourceCollaborator::setAclAdmin(const bool &acl_admin) {
    m_acl_admin = acl_admin;
    m_acl_admin_isSet = true;
}

bool OAIResourceCollaborator::is_acl_admin_Set() const{
    return m_acl_admin_isSet;
}

bool OAIResourceCollaborator::is_acl_admin_Valid() const{
    return m_acl_admin_isValid;
}

bool OAIResourceCollaborator::isAclRead() const {
    return m_acl_read;
}
void OAIResourceCollaborator::setAclRead(const bool &acl_read) {
    m_acl_read = acl_read;
    m_acl_read_isSet = true;
}

bool OAIResourceCollaborator::is_acl_read_Set() const{
    return m_acl_read_isSet;
}

bool OAIResourceCollaborator::is_acl_read_Valid() const{
    return m_acl_read_isValid;
}

bool OAIResourceCollaborator::isAclWrite() const {
    return m_acl_write;
}
void OAIResourceCollaborator::setAclWrite(const bool &acl_write) {
    m_acl_write = acl_write;
    m_acl_write_isSet = true;
}

bool OAIResourceCollaborator::is_acl_write_Set() const{
    return m_acl_write_isSet;
}

bool OAIResourceCollaborator::is_acl_write_Valid() const{
    return m_acl_write_isValid;
}

bool OAIResourceCollaborator::isIsCollaborator() const {
    return m_is_collaborator;
}
void OAIResourceCollaborator::setIsCollaborator(const bool &is_collaborator) {
    m_is_collaborator = is_collaborator;
    m_is_collaborator_isSet = true;
}

bool OAIResourceCollaborator::is_is_collaborator_Set() const{
    return m_is_collaborator_isSet;
}

bool OAIResourceCollaborator::is_is_collaborator_Valid() const{
    return m_is_collaborator_isValid;
}

QString OAIResourceCollaborator::getCollection() const {
    return m_collection;
}
void OAIResourceCollaborator::setCollection(const QString &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIResourceCollaborator::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIResourceCollaborator::is_collection_Valid() const{
    return m_collection_isValid;
}

OAIGroup OAIResourceCollaborator::getGroup() const {
    return m_group;
}
void OAIResourceCollaborator::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIResourceCollaborator::is_group_Set() const{
    return m_group_isSet;
}

bool OAIResourceCollaborator::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIResourceCollaborator::getId() const {
    return m_id;
}
void OAIResourceCollaborator::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceCollaborator::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceCollaborator::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIResourceCollaborator::isInvited() const {
    return m_invited;
}
void OAIResourceCollaborator::setInvited(const bool &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAIResourceCollaborator::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAIResourceCollaborator::is_invited_Valid() const{
    return m_invited_isValid;
}

QString OAIResourceCollaborator::getScore() const {
    return m_score;
}
void OAIResourceCollaborator::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIResourceCollaborator::is_score_Set() const{
    return m_score_isSet;
}

bool OAIResourceCollaborator::is_score_Valid() const{
    return m_score_isValid;
}

OAIUserPublic OAIResourceCollaborator::getUser() const {
    return m_user;
}
void OAIResourceCollaborator::setUser(const OAIUserPublic &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIResourceCollaborator::is_user_Set() const{
    return m_user_isSet;
}

bool OAIResourceCollaborator::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIResourceCollaborator::getUserEmail() const {
    return m_user_email;
}
void OAIResourceCollaborator::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIResourceCollaborator::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIResourceCollaborator::is_user_email_Valid() const{
    return m_user_email_isValid;
}

bool OAIResourceCollaborator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_collaborator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceCollaborator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
