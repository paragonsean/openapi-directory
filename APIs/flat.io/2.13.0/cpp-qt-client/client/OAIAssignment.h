/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssignment.h
 *
 * Assignment details
 */

#ifndef OAIAssignment_H
#define OAIAssignment_H

#include <QJsonObject>

#include "OAIAssignmentSubmission.h"
#include "OAIAssignmentType.h"
#include "OAIAssignment_canvas.h"
#include "OAIAssignment_lti.h"
#include "OAIAssignment_mfc.h"
#include "OAIGoogleClassroomCoursework.h"
#include "OAIMediaAttachment.h"
#include "OAIMicrosoftGraphAssignment.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMediaAttachment;
class OAIAssignment_canvas;
class OAIGoogleClassroomCoursework;
class OAIAssignment_lti;
class OAIAssignment_mfc;
class OAIMicrosoftGraphAssignment;
class OAIAssignmentSubmission;

class OAIAssignment : public OAIObject {
public:
    OAIAssignment();
    OAIAssignment(QString json);
    ~OAIAssignment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIMediaAttachment> getAttachments() const;
    void setAttachments(const QList<OAIMediaAttachment> &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    OAIAssignment_canvas getCanvas() const;
    void setCanvas(const OAIAssignment_canvas &canvas);
    bool is_canvas_Set() const;
    bool is_canvas_Valid() const;

    QString getClassroom() const;
    void setClassroom(const QString &classroom);
    bool is_classroom_Set() const;
    bool is_classroom_Valid() const;

    QString getCover() const;
    void setCover(const QString &cover);
    bool is_cover_Set() const;
    bool is_cover_Valid() const;

    QString getCoverFile() const;
    void setCoverFile(const QString &cover_file);
    bool is_cover_file_Set() const;
    bool is_cover_file_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getCreator() const;
    void setCreator(const QString &creator);
    bool is_creator_Set() const;
    bool is_creator_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getDueDate() const;
    void setDueDate(const QDateTime &due_date);
    bool is_due_date_Set() const;
    bool is_due_date_Valid() const;

    OAIGoogleClassroomCoursework getGoogleClassroom() const;
    void setGoogleClassroom(const OAIGoogleClassroomCoursework &google_classroom);
    bool is_google_classroom_Set() const;
    bool is_google_classroom_Valid() const;

    OAIAssignment_lti getLti() const;
    void setLti(const OAIAssignment_lti &lti);
    bool is_lti_Set() const;
    bool is_lti_Valid() const;

    double getMaxPoints() const;
    void setMaxPoints(const double &max_points);
    bool is_max_points_Set() const;
    bool is_max_points_Valid() const;

    OAIAssignment_mfc getMfc() const;
    void setMfc(const OAIAssignment_mfc &mfc);
    bool is_mfc_Set() const;
    bool is_mfc_Valid() const;

    OAIMicrosoftGraphAssignment getMicrosoftGraph() const;
    void setMicrosoftGraph(const OAIMicrosoftGraphAssignment &microsoft_graph);
    bool is_microsoft_graph_Set() const;
    bool is_microsoft_graph_Valid() const;

    QDateTime getScheduledDate() const;
    void setScheduledDate(const QDateTime &scheduled_date);
    bool is_scheduled_date_Set() const;
    bool is_scheduled_date_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList<OAIAssignmentSubmission> getSubmissions() const;
    void setSubmissions(const QList<OAIAssignmentSubmission> &submissions);
    bool is_submissions_Set() const;
    bool is_submissions_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    OAIAssignmentType getType() const;
    void setType(const OAIAssignmentType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIMediaAttachment> m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    OAIAssignment_canvas m_canvas;
    bool m_canvas_isSet;
    bool m_canvas_isValid;

    QString m_classroom;
    bool m_classroom_isSet;
    bool m_classroom_isValid;

    QString m_cover;
    bool m_cover_isSet;
    bool m_cover_isValid;

    QString m_cover_file;
    bool m_cover_file_isSet;
    bool m_cover_file_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_creator;
    bool m_creator_isSet;
    bool m_creator_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_due_date;
    bool m_due_date_isSet;
    bool m_due_date_isValid;

    OAIGoogleClassroomCoursework m_google_classroom;
    bool m_google_classroom_isSet;
    bool m_google_classroom_isValid;

    OAIAssignment_lti m_lti;
    bool m_lti_isSet;
    bool m_lti_isValid;

    double m_max_points;
    bool m_max_points_isSet;
    bool m_max_points_isValid;

    OAIAssignment_mfc m_mfc;
    bool m_mfc_isSet;
    bool m_mfc_isValid;

    OAIMicrosoftGraphAssignment m_microsoft_graph;
    bool m_microsoft_graph_isSet;
    bool m_microsoft_graph_isValid;

    QDateTime m_scheduled_date;
    bool m_scheduled_date_isSet;
    bool m_scheduled_date_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList<OAIAssignmentSubmission> m_submissions;
    bool m_submissions_isSet;
    bool m_submissions_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    OAIAssignmentType m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssignment)

#endif // OAIAssignment_H
