/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreComment::OAIScoreComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreComment::OAIScoreComment() {
    this->initializeModel();
}

OAIScoreComment::~OAIScoreComment() {}

void OAIScoreComment::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_raw_comment_isSet = false;
    m_raw_comment_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_resolved_isSet = false;
    m_resolved_isValid = false;

    m_resolved_by_isSet = false;
    m_resolved_by_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_spam_isSet = false;
    m_spam_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIScoreComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreComment::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_raw_comment_isValid = ::OpenAPI::fromJsonValue(m_raw_comment, json[QString("rawComment")]);
    m_raw_comment_isSet = !json[QString("rawComment")].isNull() && m_raw_comment_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("replyTo")]);
    m_reply_to_isSet = !json[QString("replyTo")].isNull() && m_reply_to_isValid;

    m_resolved_isValid = ::OpenAPI::fromJsonValue(m_resolved, json[QString("resolved")]);
    m_resolved_isSet = !json[QString("resolved")].isNull() && m_resolved_isValid;

    m_resolved_by_isValid = ::OpenAPI::fromJsonValue(m_resolved_by, json[QString("resolvedBy")]);
    m_resolved_by_isSet = !json[QString("resolvedBy")].isNull() && m_resolved_by_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_spam_isValid = ::OpenAPI::fromJsonValue(m_spam, json[QString("spam")]);
    m_spam_isSet = !json[QString("spam")].isNull() && m_spam_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIScoreComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreComment::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_raw_comment_isSet) {
        obj.insert(QString("rawComment"), ::OpenAPI::toJsonValue(m_raw_comment));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("replyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_resolved_isSet) {
        obj.insert(QString("resolved"), ::OpenAPI::toJsonValue(m_resolved));
    }
    if (m_resolved_by_isSet) {
        obj.insert(QString("resolvedBy"), ::OpenAPI::toJsonValue(m_resolved_by));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_spam_isSet) {
        obj.insert(QString("spam"), ::OpenAPI::toJsonValue(m_spam));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIScoreComment::getComment() const {
    return m_comment;
}
void OAIScoreComment::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIScoreComment::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIScoreComment::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIScoreCommentContext OAIScoreComment::getContext() const {
    return m_context;
}
void OAIScoreComment::setContext(const OAIScoreCommentContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIScoreComment::is_context_Set() const{
    return m_context_isSet;
}

bool OAIScoreComment::is_context_Valid() const{
    return m_context_isValid;
}

QDateTime OAIScoreComment::getDate() const {
    return m_date;
}
void OAIScoreComment::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIScoreComment::is_date_Set() const{
    return m_date_isSet;
}

bool OAIScoreComment::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIScoreComment::getId() const {
    return m_id;
}
void OAIScoreComment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScoreComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScoreComment::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIScoreComment::getMentions() const {
    return m_mentions;
}
void OAIScoreComment::setMentions(const QList<QString> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIScoreComment::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIScoreComment::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QDateTime OAIScoreComment::getModificationDate() const {
    return m_modification_date;
}
void OAIScoreComment::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIScoreComment::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIScoreComment::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QString OAIScoreComment::getRawComment() const {
    return m_raw_comment;
}
void OAIScoreComment::setRawComment(const QString &raw_comment) {
    m_raw_comment = raw_comment;
    m_raw_comment_isSet = true;
}

bool OAIScoreComment::is_raw_comment_Set() const{
    return m_raw_comment_isSet;
}

bool OAIScoreComment::is_raw_comment_Valid() const{
    return m_raw_comment_isValid;
}

QString OAIScoreComment::getReplyTo() const {
    return m_reply_to;
}
void OAIScoreComment::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAIScoreComment::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAIScoreComment::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

bool OAIScoreComment::isResolved() const {
    return m_resolved;
}
void OAIScoreComment::setResolved(const bool &resolved) {
    m_resolved = resolved;
    m_resolved_isSet = true;
}

bool OAIScoreComment::is_resolved_Set() const{
    return m_resolved_isSet;
}

bool OAIScoreComment::is_resolved_Valid() const{
    return m_resolved_isValid;
}

QString OAIScoreComment::getResolvedBy() const {
    return m_resolved_by;
}
void OAIScoreComment::setResolvedBy(const QString &resolved_by) {
    m_resolved_by = resolved_by;
    m_resolved_by_isSet = true;
}

bool OAIScoreComment::is_resolved_by_Set() const{
    return m_resolved_by_isSet;
}

bool OAIScoreComment::is_resolved_by_Valid() const{
    return m_resolved_by_isValid;
}

QString OAIScoreComment::getRevision() const {
    return m_revision;
}
void OAIScoreComment::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIScoreComment::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIScoreComment::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIScoreComment::getScore() const {
    return m_score;
}
void OAIScoreComment::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIScoreComment::is_score_Set() const{
    return m_score_isSet;
}

bool OAIScoreComment::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIScoreComment::isSpam() const {
    return m_spam;
}
void OAIScoreComment::setSpam(const bool &spam) {
    m_spam = spam;
    m_spam_isSet = true;
}

bool OAIScoreComment::is_spam_Set() const{
    return m_spam_isSet;
}

bool OAIScoreComment::is_spam_Valid() const{
    return m_spam_isValid;
}

QString OAIScoreComment::getType() const {
    return m_type;
}
void OAIScoreComment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScoreComment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScoreComment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIScoreComment::getUser() const {
    return m_user;
}
void OAIScoreComment::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIScoreComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIScoreComment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIScoreComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
