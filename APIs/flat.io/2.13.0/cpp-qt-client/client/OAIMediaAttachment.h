/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMediaAttachment.h
 *
 * Media attachment. The API will automatically resolve the details, oEmbed, and media available if possible and return them in this object 
 */

#ifndef OAIMediaAttachment_H
#define OAIMediaAttachment_H

#include <QJsonObject>

#include "OAIMediaScoreSharingMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMediaAttachment : public OAIObject {
public:
    OAIMediaAttachment();
    OAIMediaAttachment(QString json);
    ~OAIMediaAttachment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorName() const;
    void setAuthorName(const QString &author_name);
    bool is_author_name_Set() const;
    bool is_author_name_Valid() const;

    QString getAuthorUrl() const;
    void setAuthorUrl(const QString &author_url);
    bool is_author_url_Set() const;
    bool is_author_url_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getGoogleDriveFileId() const;
    void setGoogleDriveFileId(const QString &google_drive_file_id);
    bool is_google_drive_file_id_Set() const;
    bool is_google_drive_file_id_Valid() const;

    QString getHtml() const;
    void setHtml(const QString &html);
    bool is_html_Set() const;
    bool is_html_Valid() const;

    QString getHtmlHeight() const;
    void setHtmlHeight(const QString &html_height);
    bool is_html_height_Set() const;
    bool is_html_height_Valid() const;

    QString getHtmlWidth() const;
    void setHtmlWidth(const QString &html_width);
    bool is_html_width_Set() const;
    bool is_html_width_Valid() const;

    QString getIconUrl() const;
    void setIconUrl(const QString &icon_url);
    bool is_icon_url_Set() const;
    bool is_icon_url_Valid() const;

    bool isLockScoreTemplate() const;
    void setLockScoreTemplate(const bool &lock_score_template);
    bool is_lock_score_template_Set() const;
    bool is_lock_score_template_Valid() const;

    QString getMimeType() const;
    void setMimeType(const QString &mime_type);
    bool is_mime_type_Set() const;
    bool is_mime_type_Valid() const;

    QString getRevision() const;
    void setRevision(const QString &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QString getScore() const;
    void setScore(const QString &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    OAIMediaScoreSharingMode getSharingMode() const;
    void setSharingMode(const OAIMediaScoreSharingMode &sharing_mode);
    bool is_sharing_mode_Set() const;
    bool is_sharing_mode_Valid() const;

    qint32 getThumbnailHeight() const;
    void setThumbnailHeight(const qint32 &thumbnail_height);
    bool is_thumbnail_height_Set() const;
    bool is_thumbnail_height_Valid() const;

    QString getThumbnailUrl() const;
    void setThumbnailUrl(const QString &thumbnail_url);
    bool is_thumbnail_url_Set() const;
    bool is_thumbnail_url_Valid() const;

    qint32 getThumbnailWidth() const;
    void setThumbnailWidth(const qint32 &thumbnail_width);
    bool is_thumbnail_width_Set() const;
    bool is_thumbnail_width_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTrack() const;
    void setTrack(const QString &track);
    bool is_track_Set() const;
    bool is_track_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getWorksheet() const;
    void setWorksheet(const QString &worksheet);
    bool is_worksheet_Set() const;
    bool is_worksheet_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_author_name;
    bool m_author_name_isSet;
    bool m_author_name_isValid;

    QString m_author_url;
    bool m_author_url_isSet;
    bool m_author_url_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_google_drive_file_id;
    bool m_google_drive_file_id_isSet;
    bool m_google_drive_file_id_isValid;

    QString m_html;
    bool m_html_isSet;
    bool m_html_isValid;

    QString m_html_height;
    bool m_html_height_isSet;
    bool m_html_height_isValid;

    QString m_html_width;
    bool m_html_width_isSet;
    bool m_html_width_isValid;

    QString m_icon_url;
    bool m_icon_url_isSet;
    bool m_icon_url_isValid;

    bool m_lock_score_template;
    bool m_lock_score_template_isSet;
    bool m_lock_score_template_isValid;

    QString m_mime_type;
    bool m_mime_type_isSet;
    bool m_mime_type_isValid;

    QString m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QString m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    OAIMediaScoreSharingMode m_sharing_mode;
    bool m_sharing_mode_isSet;
    bool m_sharing_mode_isValid;

    qint32 m_thumbnail_height;
    bool m_thumbnail_height_isSet;
    bool m_thumbnail_height_isValid;

    QString m_thumbnail_url;
    bool m_thumbnail_url_isSet;
    bool m_thumbnail_url_isValid;

    qint32 m_thumbnail_width;
    bool m_thumbnail_width_isSet;
    bool m_thumbnail_width_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_track;
    bool m_track_isSet;
    bool m_track_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_worksheet;
    bool m_worksheet_isSet;
    bool m_worksheet_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMediaAttachment)

#endif // OAIMediaAttachment_H
