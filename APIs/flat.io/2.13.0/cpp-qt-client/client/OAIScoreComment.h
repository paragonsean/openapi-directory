/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScoreComment.h
 *
 * Comment added on a sheet music
 */

#ifndef OAIScoreComment_H
#define OAIScoreComment_H

#include <QJsonObject>

#include "OAIScoreCommentContext.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScoreCommentContext;

class OAIScoreComment : public OAIObject {
public:
    OAIScoreComment();
    OAIScoreComment(QString json);
    ~OAIScoreComment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    OAIScoreCommentContext getContext() const;
    void setContext(const OAIScoreCommentContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getMentions() const;
    void setMentions(const QList<QString> &mentions);
    bool is_mentions_Set() const;
    bool is_mentions_Valid() const;

    QDateTime getModificationDate() const;
    void setModificationDate(const QDateTime &modification_date);
    bool is_modification_date_Set() const;
    bool is_modification_date_Valid() const;

    QString getRawComment() const;
    void setRawComment(const QString &raw_comment);
    bool is_raw_comment_Set() const;
    bool is_raw_comment_Valid() const;

    QString getReplyTo() const;
    void setReplyTo(const QString &reply_to);
    bool is_reply_to_Set() const;
    bool is_reply_to_Valid() const;

    bool isResolved() const;
    void setResolved(const bool &resolved);
    bool is_resolved_Set() const;
    bool is_resolved_Valid() const;

    QString getResolvedBy() const;
    void setResolvedBy(const QString &resolved_by);
    bool is_resolved_by_Set() const;
    bool is_resolved_by_Valid() const;

    QString getRevision() const;
    void setRevision(const QString &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QString getScore() const;
    void setScore(const QString &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    bool isSpam() const;
    void setSpam(const bool &spam);
    bool is_spam_Set() const;
    bool is_spam_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    OAIScoreCommentContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_mentions;
    bool m_mentions_isSet;
    bool m_mentions_isValid;

    QDateTime m_modification_date;
    bool m_modification_date_isSet;
    bool m_modification_date_isValid;

    QString m_raw_comment;
    bool m_raw_comment_isSet;
    bool m_raw_comment_isValid;

    QString m_reply_to;
    bool m_reply_to_isSet;
    bool m_reply_to_isValid;

    bool m_resolved;
    bool m_resolved_isSet;
    bool m_resolved_isValid;

    QString m_resolved_by;
    bool m_resolved_by_isSet;
    bool m_resolved_by_isValid;

    QString m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QString m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    bool m_spam;
    bool m_spam_isSet;
    bool m_spam_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScoreComment)

#endif // OAIScoreComment_H
