/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupDetails::OAIGroupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupDetails::OAIGroupDetails() {
    this->initializeModel();
}

OAIGroupDetails::~OAIGroupDetails() {}

void OAIGroupDetails::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_users_count_isSet = false;
    m_users_count_isValid = false;
}

void OAIGroupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupDetails::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_users_count_isValid = ::OpenAPI::fromJsonValue(m_users_count, json[QString("usersCount")]);
    m_users_count_isSet = !json[QString("usersCount")].isNull() && m_users_count_isValid;
}

QString OAIGroupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_users_count_isSet) {
        obj.insert(QString("usersCount"), ::OpenAPI::toJsonValue(m_users_count));
    }
    return obj;
}

QDateTime OAIGroupDetails::getCreationDate() const {
    return m_creation_date;
}
void OAIGroupDetails::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGroupDetails::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGroupDetails::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIGroupDetails::getId() const {
    return m_id;
}
void OAIGroupDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroupDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroupDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGroupDetails::getName() const {
    return m_name;
}
void OAIGroupDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroupDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroupDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGroupDetails::getOrganization() const {
    return m_organization;
}
void OAIGroupDetails::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIGroupDetails::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIGroupDetails::is_organization_Valid() const{
    return m_organization_isValid;
}

bool OAIGroupDetails::isReadOnly() const {
    return m_read_only;
}
void OAIGroupDetails::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIGroupDetails::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIGroupDetails::is_read_only_Valid() const{
    return m_read_only_isValid;
}

OAIGroupType OAIGroupDetails::getType() const {
    return m_type;
}
void OAIGroupDetails::setType(const OAIGroupType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGroupDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGroupDetails::is_type_Valid() const{
    return m_type_isValid;
}

double OAIGroupDetails::getUsersCount() const {
    return m_users_count;
}
void OAIGroupDetails::setUsersCount(const double &users_count) {
    m_users_count = users_count;
    m_users_count_isSet = true;
}

bool OAIGroupDetails::is_users_count_Set() const{
    return m_users_count_isSet;
}

bool OAIGroupDetails::is_users_count_Valid() const{
    return m_users_count_isValid;
}

bool OAIGroupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
