/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceCollaboratorCreation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceCollaboratorCreation::OAIResourceCollaboratorCreation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceCollaboratorCreation::OAIResourceCollaboratorCreation() {
    this->initializeModel();
}

OAIResourceCollaboratorCreation::~OAIResourceCollaboratorCreation() {}

void OAIResourceCollaboratorCreation::initializeModel() {

    m_acl_admin_isSet = false;
    m_acl_admin_isValid = false;

    m_acl_read_isSet = false;
    m_acl_read_isValid = false;

    m_acl_write_isSet = false;
    m_acl_write_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_token_isSet = false;
    m_user_token_isValid = false;
}

void OAIResourceCollaboratorCreation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceCollaboratorCreation::fromJsonObject(QJsonObject json) {

    m_acl_admin_isValid = ::OpenAPI::fromJsonValue(m_acl_admin, json[QString("aclAdmin")]);
    m_acl_admin_isSet = !json[QString("aclAdmin")].isNull() && m_acl_admin_isValid;

    m_acl_read_isValid = ::OpenAPI::fromJsonValue(m_acl_read, json[QString("aclRead")]);
    m_acl_read_isSet = !json[QString("aclRead")].isNull() && m_acl_read_isValid;

    m_acl_write_isValid = ::OpenAPI::fromJsonValue(m_acl_write, json[QString("aclWrite")]);
    m_acl_write_isSet = !json[QString("aclWrite")].isNull() && m_acl_write_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_token_isValid = ::OpenAPI::fromJsonValue(m_user_token, json[QString("userToken")]);
    m_user_token_isSet = !json[QString("userToken")].isNull() && m_user_token_isValid;
}

QString OAIResourceCollaboratorCreation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceCollaboratorCreation::asJsonObject() const {
    QJsonObject obj;
    if (m_acl_admin_isSet) {
        obj.insert(QString("aclAdmin"), ::OpenAPI::toJsonValue(m_acl_admin));
    }
    if (m_acl_read_isSet) {
        obj.insert(QString("aclRead"), ::OpenAPI::toJsonValue(m_acl_read));
    }
    if (m_acl_write_isSet) {
        obj.insert(QString("aclWrite"), ::OpenAPI::toJsonValue(m_acl_write));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_token_isSet) {
        obj.insert(QString("userToken"), ::OpenAPI::toJsonValue(m_user_token));
    }
    return obj;
}

bool OAIResourceCollaboratorCreation::isAclAdmin() const {
    return m_acl_admin;
}
void OAIResourceCollaboratorCreation::setAclAdmin(const bool &acl_admin) {
    m_acl_admin = acl_admin;
    m_acl_admin_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_acl_admin_Set() const{
    return m_acl_admin_isSet;
}

bool OAIResourceCollaboratorCreation::is_acl_admin_Valid() const{
    return m_acl_admin_isValid;
}

bool OAIResourceCollaboratorCreation::isAclRead() const {
    return m_acl_read;
}
void OAIResourceCollaboratorCreation::setAclRead(const bool &acl_read) {
    m_acl_read = acl_read;
    m_acl_read_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_acl_read_Set() const{
    return m_acl_read_isSet;
}

bool OAIResourceCollaboratorCreation::is_acl_read_Valid() const{
    return m_acl_read_isValid;
}

bool OAIResourceCollaboratorCreation::isAclWrite() const {
    return m_acl_write;
}
void OAIResourceCollaboratorCreation::setAclWrite(const bool &acl_write) {
    m_acl_write = acl_write;
    m_acl_write_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_acl_write_Set() const{
    return m_acl_write_isSet;
}

bool OAIResourceCollaboratorCreation::is_acl_write_Valid() const{
    return m_acl_write_isValid;
}

QString OAIResourceCollaboratorCreation::getGroup() const {
    return m_group;
}
void OAIResourceCollaboratorCreation::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_group_Set() const{
    return m_group_isSet;
}

bool OAIResourceCollaboratorCreation::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIResourceCollaboratorCreation::getUser() const {
    return m_user;
}
void OAIResourceCollaboratorCreation::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_user_Set() const{
    return m_user_isSet;
}

bool OAIResourceCollaboratorCreation::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIResourceCollaboratorCreation::getUserEmail() const {
    return m_user_email;
}
void OAIResourceCollaboratorCreation::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIResourceCollaboratorCreation::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIResourceCollaboratorCreation::getUserToken() const {
    return m_user_token;
}
void OAIResourceCollaboratorCreation::setUserToken(const QString &user_token) {
    m_user_token = user_token;
    m_user_token_isSet = true;
}

bool OAIResourceCollaboratorCreation::is_user_token_Set() const{
    return m_user_token_isSet;
}

bool OAIResourceCollaboratorCreation::is_user_token_Valid() const{
    return m_user_token_isValid;
}

bool OAIResourceCollaboratorCreation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acl_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceCollaboratorCreation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
