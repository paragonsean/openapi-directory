/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScoreDetails.h
 *
 * The score and all its details
 */

#ifndef OAIScoreDetails_H
#define OAIScoreDetails_H

#include <QJsonObject>

#include "OAIResourceCollaborator.h"
#include "OAIResourceRights.h"
#include "OAIScoreCommentsCounts.h"
#include "OAIScoreCreationType.h"
#include "OAIScoreLicense.h"
#include "OAIScoreLikesCounts.h"
#include "OAIScorePlaysCounts.h"
#include "OAIScorePrivacy.h"
#include "OAIScoreViewsCounts.h"
#include "OAIUserPublicSummary.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserPublicSummary;
class OAIResourceCollaborator;
class OAIScoreCommentsCounts;
class OAIScoreLikesCounts;
class OAIScorePlaysCounts;
class OAIResourceRights;
class OAIScoreViewsCounts;

class OAIScoreDetails : public OAIObject {
public:
    OAIScoreDetails();
    OAIScoreDetails(QString json);
    ~OAIScoreDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIScorePrivacy getPrivacy() const;
    void setPrivacy(const OAIScorePrivacy &privacy);
    bool is_privacy_Set() const;
    bool is_privacy_Valid() const;

    QString getSharingKey() const;
    void setSharingKey(const QString &sharing_key);
    bool is_sharing_key_Set() const;
    bool is_sharing_key_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    OAIUserPublicSummary getUser() const;
    void setUser(const OAIUserPublicSummary &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getArranger() const;
    void setArranger(const QString &arranger);
    bool is_arranger_Set() const;
    bool is_arranger_Valid() const;

    QList<OAIResourceCollaborator> getCollaborators() const;
    void setCollaborators(const QList<OAIResourceCollaborator> &collaborators);
    bool is_collaborators_Set() const;
    bool is_collaborators_Valid() const;

    QList<QString> getCollections() const;
    void setCollections(const QList<QString> &collections);
    bool is_collections_Set() const;
    bool is_collections_Valid() const;

    OAIScoreCommentsCounts getComments() const;
    void setComments(const OAIScoreCommentsCounts &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QString getComposer() const;
    void setComposer(const QString &composer);
    bool is_composer_Set() const;
    bool is_composer_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    OAIScoreCreationType getCreationType() const;
    void setCreationType(const OAIScoreCreationType &creation_type);
    bool is_creation_type_Set() const;
    bool is_creation_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getDurationTime() const;
    void setDurationTime(const double &duration_time);
    bool is_duration_time_Set() const;
    bool is_duration_time_Valid() const;

    QString getGoogleDriveFileId() const;
    void setGoogleDriveFileId(const QString &google_drive_file_id);
    bool is_google_drive_file_id_Set() const;
    bool is_google_drive_file_id_Valid() const;

    QList<QString> getInstruments() const;
    void setInstruments(const QList<QString> &instruments);
    bool is_instruments_Set() const;
    bool is_instruments_Valid() const;

    OAIScoreLicense getLicense() const;
    void setLicense(const OAIScoreLicense &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QString getLicenseText() const;
    void setLicenseText(const QString &license_text);
    bool is_license_text_Set() const;
    bool is_license_text_Valid() const;

    OAIScoreLikesCounts getLikes() const;
    void setLikes(const OAIScoreLikesCounts &likes);
    bool is_likes_Set() const;
    bool is_likes_Valid() const;

    QString getLyricist() const;
    void setLyricist(const QString &lyricist);
    bool is_lyricist_Set() const;
    bool is_lyricist_Valid() const;

    double getMainTempoQpm() const;
    void setMainTempoQpm(const double &main_tempo_qpm);
    bool is_main_tempo_qpm_Set() const;
    bool is_main_tempo_qpm_Valid() const;

    QDateTime getModificationDate() const;
    void setModificationDate(const QDateTime &modification_date);
    bool is_modification_date_Set() const;
    bool is_modification_date_Valid() const;

    qint32 getNumberMeasures() const;
    void setNumberMeasures(const qint32 &number_measures);
    bool is_number_measures_Set() const;
    bool is_number_measures_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getParentScore() const;
    void setParentScore(const QString &parent_score);
    bool is_parent_score_Set() const;
    bool is_parent_score_Valid() const;

    OAIScorePlaysCounts getPlays() const;
    void setPlays(const OAIScorePlaysCounts &plays);
    bool is_plays_Set() const;
    bool is_plays_Valid() const;

    QDateTime getPublicationDate() const;
    void setPublicationDate(const QDateTime &publication_date);
    bool is_publication_date_Set() const;
    bool is_publication_date_Valid() const;

    OAIResourceRights getRights() const;
    void setRights(const OAIResourceRights &rights);
    bool is_rights_Set() const;
    bool is_rights_Valid() const;

    QList<QString> getSamples() const;
    void setSamples(const QList<QString> &samples);
    bool is_samples_Set() const;
    bool is_samples_Valid() const;

    QString getSubtitle() const;
    void setSubtitle(const QString &subtitle);
    bool is_subtitle_Set() const;
    bool is_subtitle_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIScoreViewsCounts getViews() const;
    void setViews(const OAIScoreViewsCounts &views);
    bool is_views_Set() const;
    bool is_views_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIScorePrivacy m_privacy;
    bool m_privacy_isSet;
    bool m_privacy_isValid;

    QString m_sharing_key;
    bool m_sharing_key_isSet;
    bool m_sharing_key_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    OAIUserPublicSummary m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_arranger;
    bool m_arranger_isSet;
    bool m_arranger_isValid;

    QList<OAIResourceCollaborator> m_collaborators;
    bool m_collaborators_isSet;
    bool m_collaborators_isValid;

    QList<QString> m_collections;
    bool m_collections_isSet;
    bool m_collections_isValid;

    OAIScoreCommentsCounts m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QString m_composer;
    bool m_composer_isSet;
    bool m_composer_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    OAIScoreCreationType m_creation_type;
    bool m_creation_type_isSet;
    bool m_creation_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_duration_time;
    bool m_duration_time_isSet;
    bool m_duration_time_isValid;

    QString m_google_drive_file_id;
    bool m_google_drive_file_id_isSet;
    bool m_google_drive_file_id_isValid;

    QList<QString> m_instruments;
    bool m_instruments_isSet;
    bool m_instruments_isValid;

    OAIScoreLicense m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QString m_license_text;
    bool m_license_text_isSet;
    bool m_license_text_isValid;

    OAIScoreLikesCounts m_likes;
    bool m_likes_isSet;
    bool m_likes_isValid;

    QString m_lyricist;
    bool m_lyricist_isSet;
    bool m_lyricist_isValid;

    double m_main_tempo_qpm;
    bool m_main_tempo_qpm_isSet;
    bool m_main_tempo_qpm_isValid;

    QDateTime m_modification_date;
    bool m_modification_date_isSet;
    bool m_modification_date_isValid;

    qint32 m_number_measures;
    bool m_number_measures_isSet;
    bool m_number_measures_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_parent_score;
    bool m_parent_score_isSet;
    bool m_parent_score_isValid;

    OAIScorePlaysCounts m_plays;
    bool m_plays_isSet;
    bool m_plays_isValid;

    QDateTime m_publication_date;
    bool m_publication_date_isSet;
    bool m_publication_date_isValid;

    OAIResourceRights m_rights;
    bool m_rights_isSet;
    bool m_rights_isValid;

    QList<QString> m_samples;
    bool m_samples_isSet;
    bool m_samples_isValid;

    QString m_subtitle;
    bool m_subtitle_isSet;
    bool m_subtitle_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIScoreViewsCounts m_views;
    bool m_views_isSet;
    bool m_views_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScoreDetails)

#endif // OAIScoreDetails_H
