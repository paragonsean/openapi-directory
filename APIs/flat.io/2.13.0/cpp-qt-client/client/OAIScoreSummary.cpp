/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreSummary::OAIScoreSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreSummary::OAIScoreSummary() {
    this->initializeModel();
}

OAIScoreSummary::~OAIScoreSummary() {}

void OAIScoreSummary::initializeModel() {

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_sharing_key_isSet = false;
    m_sharing_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIScoreSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreSummary::fromJsonObject(QJsonObject json) {

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("htmlUrl")]);
    m_html_url_isSet = !json[QString("htmlUrl")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_sharing_key_isValid = ::OpenAPI::fromJsonValue(m_sharing_key, json[QString("sharingKey")]);
    m_sharing_key_isSet = !json[QString("sharingKey")].isNull() && m_sharing_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIScoreSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_html_url_isSet) {
        obj.insert(QString("htmlUrl"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_sharing_key_isSet) {
        obj.insert(QString("sharingKey"), ::OpenAPI::toJsonValue(m_sharing_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIScoreSummary::getHtmlUrl() const {
    return m_html_url;
}
void OAIScoreSummary::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIScoreSummary::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIScoreSummary::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIScoreSummary::getId() const {
    return m_id;
}
void OAIScoreSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScoreSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScoreSummary::is_id_Valid() const{
    return m_id_isValid;
}

OAIScorePrivacy OAIScoreSummary::getPrivacy() const {
    return m_privacy;
}
void OAIScoreSummary::setPrivacy(const OAIScorePrivacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIScoreSummary::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIScoreSummary::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIScoreSummary::getSharingKey() const {
    return m_sharing_key;
}
void OAIScoreSummary::setSharingKey(const QString &sharing_key) {
    m_sharing_key = sharing_key;
    m_sharing_key_isSet = true;
}

bool OAIScoreSummary::is_sharing_key_Set() const{
    return m_sharing_key_isSet;
}

bool OAIScoreSummary::is_sharing_key_Valid() const{
    return m_sharing_key_isValid;
}

QString OAIScoreSummary::getTitle() const {
    return m_title;
}
void OAIScoreSummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIScoreSummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAIScoreSummary::is_title_Valid() const{
    return m_title_isValid;
}

OAIUserPublicSummary OAIScoreSummary::getUser() const {
    return m_user;
}
void OAIScoreSummary::setUser(const OAIUserPublicSummary &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIScoreSummary::is_user_Set() const{
    return m_user_isSet;
}

bool OAIScoreSummary::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIScoreSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
