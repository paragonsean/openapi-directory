/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentSubmissionHistory_attachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentSubmissionHistory_attachment::OAIAssignmentSubmissionHistory_attachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentSubmissionHistory_attachment::OAIAssignmentSubmissionHistory_attachment() {
    this->initializeModel();
}

OAIAssignmentSubmissionHistory_attachment::~OAIAssignmentSubmissionHistory_attachment() {}

void OAIAssignmentSubmissionHistory_attachment::initializeModel() {

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIAssignmentSubmissionHistory_attachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentSubmissionHistory_attachment::fromJsonObject(QJsonObject json) {

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIAssignmentSubmissionHistory_attachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentSubmissionHistory_attachment::asJsonObject() const {
    QJsonObject obj;
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAIAssignmentSubmissionHistory_attachment::getRevision() const {
    return m_revision;
}
void OAIAssignmentSubmissionHistory_attachment::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIAssignmentSubmissionHistory_attachment::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIAssignmentSubmissionHistory_attachment::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIAssignmentSubmissionHistory_attachment::getScore() const {
    return m_score;
}
void OAIAssignmentSubmissionHistory_attachment::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIAssignmentSubmissionHistory_attachment::is_score_Set() const{
    return m_score_isSet;
}

bool OAIAssignmentSubmissionHistory_attachment::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIAssignmentSubmissionHistory_attachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentSubmissionHistory_attachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
