/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScoreModification.h
 *
 * Edit the score metadata
 */

#ifndef OAIScoreModification_H
#define OAIScoreModification_H

#include <QJsonObject>

#include "OAIScoreCreationType.h"
#include "OAIScoreLicense.h"
#include "OAIScorePrivacy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScoreModification : public OAIObject {
public:
    OAIScoreModification();
    OAIScoreModification(QString json);
    ~OAIScoreModification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArranger() const;
    void setArranger(const QString &arranger);
    bool is_arranger_Set() const;
    bool is_arranger_Valid() const;

    QString getComposer() const;
    void setComposer(const QString &composer);
    bool is_composer_Set() const;
    bool is_composer_Valid() const;

    OAIScoreCreationType getCreationType() const;
    void setCreationType(const OAIScoreCreationType &creation_type);
    bool is_creation_type_Set() const;
    bool is_creation_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIScoreLicense getLicense() const;
    void setLicense(const OAIScoreLicense &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QString getLicenseText() const;
    void setLicenseText(const QString &license_text);
    bool is_license_text_Set() const;
    bool is_license_text_Valid() const;

    QString getLyricist() const;
    void setLyricist(const QString &lyricist);
    bool is_lyricist_Set() const;
    bool is_lyricist_Valid() const;

    OAIScorePrivacy getPrivacy() const;
    void setPrivacy(const OAIScorePrivacy &privacy);
    bool is_privacy_Set() const;
    bool is_privacy_Valid() const;

    QString getSharingKey() const;
    void setSharingKey(const QString &sharing_key);
    bool is_sharing_key_Set() const;
    bool is_sharing_key_Valid() const;

    QString getSubtitle() const;
    void setSubtitle(const QString &subtitle);
    bool is_subtitle_Set() const;
    bool is_subtitle_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arranger;
    bool m_arranger_isSet;
    bool m_arranger_isValid;

    QString m_composer;
    bool m_composer_isSet;
    bool m_composer_isValid;

    OAIScoreCreationType m_creation_type;
    bool m_creation_type_isSet;
    bool m_creation_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIScoreLicense m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QString m_license_text;
    bool m_license_text_isSet;
    bool m_license_text_isValid;

    QString m_lyricist;
    bool m_lyricist_isSet;
    bool m_lyricist_isValid;

    OAIScorePrivacy m_privacy;
    bool m_privacy_isSet;
    bool m_privacy_isValid;

    QString m_sharing_key;
    bool m_sharing_key_isSet;
    bool m_sharing_key_isValid;

    QString m_subtitle;
    bool m_subtitle_isSet;
    bool m_subtitle_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScoreModification)

#endif // OAIScoreModification_H
