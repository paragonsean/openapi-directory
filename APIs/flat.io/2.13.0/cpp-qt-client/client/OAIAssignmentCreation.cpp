/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentCreation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentCreation::OAIAssignmentCreation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentCreation::OAIAssignmentCreation() {
    this->initializeModel();
}

OAIAssignmentCreation::~OAIAssignmentCreation() {}

void OAIAssignmentCreation::initializeModel() {

    m_assigned_students_isSet = false;
    m_assigned_students_isValid = false;

    m_assignee_mode_isSet = false;
    m_assignee_mode_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_cover_file_isSet = false;
    m_cover_file_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_google_classroom_isSet = false;
    m_google_classroom_isValid = false;

    m_max_points_isSet = false;
    m_max_points_isValid = false;

    m_microsoft_graph_isSet = false;
    m_microsoft_graph_isValid = false;

    m_nb_playback_authorized_isSet = false;
    m_nb_playback_authorized_isValid = false;

    m_scheduled_date_isSet = false;
    m_scheduled_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_toolset_isSet = false;
    m_toolset_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAssignmentCreation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentCreation::fromJsonObject(QJsonObject json) {

    m_assigned_students_isValid = ::OpenAPI::fromJsonValue(m_assigned_students, json[QString("assignedStudents")]);
    m_assigned_students_isSet = !json[QString("assignedStudents")].isNull() && m_assigned_students_isValid;

    m_assignee_mode_isValid = ::OpenAPI::fromJsonValue(m_assignee_mode, json[QString("assigneeMode")]);
    m_assignee_mode_isSet = !json[QString("assigneeMode")].isNull() && m_assignee_mode_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_cover_file_isValid = ::OpenAPI::fromJsonValue(m_cover_file, json[QString("coverFile")]);
    m_cover_file_isSet = !json[QString("coverFile")].isNull() && m_cover_file_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_google_classroom_isValid = ::OpenAPI::fromJsonValue(m_google_classroom, json[QString("googleClassroom")]);
    m_google_classroom_isSet = !json[QString("googleClassroom")].isNull() && m_google_classroom_isValid;

    m_max_points_isValid = ::OpenAPI::fromJsonValue(m_max_points, json[QString("maxPoints")]);
    m_max_points_isSet = !json[QString("maxPoints")].isNull() && m_max_points_isValid;

    m_microsoft_graph_isValid = ::OpenAPI::fromJsonValue(m_microsoft_graph, json[QString("microsoftGraph")]);
    m_microsoft_graph_isSet = !json[QString("microsoftGraph")].isNull() && m_microsoft_graph_isValid;

    m_nb_playback_authorized_isValid = ::OpenAPI::fromJsonValue(m_nb_playback_authorized, json[QString("nbPlaybackAuthorized")]);
    m_nb_playback_authorized_isSet = !json[QString("nbPlaybackAuthorized")].isNull() && m_nb_playback_authorized_isValid;

    m_scheduled_date_isValid = ::OpenAPI::fromJsonValue(m_scheduled_date, json[QString("scheduledDate")]);
    m_scheduled_date_isSet = !json[QString("scheduledDate")].isNull() && m_scheduled_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_toolset_isValid = ::OpenAPI::fromJsonValue(m_toolset, json[QString("toolset")]);
    m_toolset_isSet = !json[QString("toolset")].isNull() && m_toolset_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAssignmentCreation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentCreation::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_students.size() > 0) {
        obj.insert(QString("assignedStudents"), ::OpenAPI::toJsonValue(m_assigned_students));
    }
    if (m_assignee_mode_isSet) {
        obj.insert(QString("assigneeMode"), ::OpenAPI::toJsonValue(m_assignee_mode));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_cover_isSet) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_cover_file_isSet) {
        obj.insert(QString("coverFile"), ::OpenAPI::toJsonValue(m_cover_file));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_google_classroom.isSet()) {
        obj.insert(QString("googleClassroom"), ::OpenAPI::toJsonValue(m_google_classroom));
    }
    if (m_max_points_isSet) {
        obj.insert(QString("maxPoints"), ::OpenAPI::toJsonValue(m_max_points));
    }
    if (m_microsoft_graph.isSet()) {
        obj.insert(QString("microsoftGraph"), ::OpenAPI::toJsonValue(m_microsoft_graph));
    }
    if (m_nb_playback_authorized_isSet) {
        obj.insert(QString("nbPlaybackAuthorized"), ::OpenAPI::toJsonValue(m_nb_playback_authorized));
    }
    if (m_scheduled_date_isSet) {
        obj.insert(QString("scheduledDate"), ::OpenAPI::toJsonValue(m_scheduled_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_toolset_isSet) {
        obj.insert(QString("toolset"), ::OpenAPI::toJsonValue(m_toolset));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIAssignmentCreation::getAssignedStudents() const {
    return m_assigned_students;
}
void OAIAssignmentCreation::setAssignedStudents(const QList<QString> &assigned_students) {
    m_assigned_students = assigned_students;
    m_assigned_students_isSet = true;
}

bool OAIAssignmentCreation::is_assigned_students_Set() const{
    return m_assigned_students_isSet;
}

bool OAIAssignmentCreation::is_assigned_students_Valid() const{
    return m_assigned_students_isValid;
}

QString OAIAssignmentCreation::getAssigneeMode() const {
    return m_assignee_mode;
}
void OAIAssignmentCreation::setAssigneeMode(const QString &assignee_mode) {
    m_assignee_mode = assignee_mode;
    m_assignee_mode_isSet = true;
}

bool OAIAssignmentCreation::is_assignee_mode_Set() const{
    return m_assignee_mode_isSet;
}

bool OAIAssignmentCreation::is_assignee_mode_Valid() const{
    return m_assignee_mode_isValid;
}

QList<OAIClassAttachmentCreation> OAIAssignmentCreation::getAttachments() const {
    return m_attachments;
}
void OAIAssignmentCreation::setAttachments(const QList<OAIClassAttachmentCreation> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIAssignmentCreation::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIAssignmentCreation::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIAssignmentCreation::getCover() const {
    return m_cover;
}
void OAIAssignmentCreation::setCover(const QString &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAIAssignmentCreation::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAIAssignmentCreation::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAIAssignmentCreation::getCoverFile() const {
    return m_cover_file;
}
void OAIAssignmentCreation::setCoverFile(const QString &cover_file) {
    m_cover_file = cover_file;
    m_cover_file_isSet = true;
}

bool OAIAssignmentCreation::is_cover_file_Set() const{
    return m_cover_file_isSet;
}

bool OAIAssignmentCreation::is_cover_file_Valid() const{
    return m_cover_file_isValid;
}

QString OAIAssignmentCreation::getDescription() const {
    return m_description;
}
void OAIAssignmentCreation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssignmentCreation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssignmentCreation::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAssignmentCreation::getDueDate() const {
    return m_due_date;
}
void OAIAssignmentCreation::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIAssignmentCreation::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIAssignmentCreation::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIAssignmentCreation_googleClassroom OAIAssignmentCreation::getGoogleClassroom() const {
    return m_google_classroom;
}
void OAIAssignmentCreation::setGoogleClassroom(const OAIAssignmentCreation_googleClassroom &google_classroom) {
    m_google_classroom = google_classroom;
    m_google_classroom_isSet = true;
}

bool OAIAssignmentCreation::is_google_classroom_Set() const{
    return m_google_classroom_isSet;
}

bool OAIAssignmentCreation::is_google_classroom_Valid() const{
    return m_google_classroom_isValid;
}

double OAIAssignmentCreation::getMaxPoints() const {
    return m_max_points;
}
void OAIAssignmentCreation::setMaxPoints(const double &max_points) {
    m_max_points = max_points;
    m_max_points_isSet = true;
}

bool OAIAssignmentCreation::is_max_points_Set() const{
    return m_max_points_isSet;
}

bool OAIAssignmentCreation::is_max_points_Valid() const{
    return m_max_points_isValid;
}

OAIAssignmentCreation_microsoftGraph OAIAssignmentCreation::getMicrosoftGraph() const {
    return m_microsoft_graph;
}
void OAIAssignmentCreation::setMicrosoftGraph(const OAIAssignmentCreation_microsoftGraph &microsoft_graph) {
    m_microsoft_graph = microsoft_graph;
    m_microsoft_graph_isSet = true;
}

bool OAIAssignmentCreation::is_microsoft_graph_Set() const{
    return m_microsoft_graph_isSet;
}

bool OAIAssignmentCreation::is_microsoft_graph_Valid() const{
    return m_microsoft_graph_isValid;
}

double OAIAssignmentCreation::getNbPlaybackAuthorized() const {
    return m_nb_playback_authorized;
}
void OAIAssignmentCreation::setNbPlaybackAuthorized(const double &nb_playback_authorized) {
    m_nb_playback_authorized = nb_playback_authorized;
    m_nb_playback_authorized_isSet = true;
}

bool OAIAssignmentCreation::is_nb_playback_authorized_Set() const{
    return m_nb_playback_authorized_isSet;
}

bool OAIAssignmentCreation::is_nb_playback_authorized_Valid() const{
    return m_nb_playback_authorized_isValid;
}

QDateTime OAIAssignmentCreation::getScheduledDate() const {
    return m_scheduled_date;
}
void OAIAssignmentCreation::setScheduledDate(const QDateTime &scheduled_date) {
    m_scheduled_date = scheduled_date;
    m_scheduled_date_isSet = true;
}

bool OAIAssignmentCreation::is_scheduled_date_Set() const{
    return m_scheduled_date_isSet;
}

bool OAIAssignmentCreation::is_scheduled_date_Valid() const{
    return m_scheduled_date_isValid;
}

QString OAIAssignmentCreation::getState() const {
    return m_state;
}
void OAIAssignmentCreation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAssignmentCreation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAssignmentCreation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAssignmentCreation::getTitle() const {
    return m_title;
}
void OAIAssignmentCreation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAssignmentCreation::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAssignmentCreation::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAssignmentCreation::getToolset() const {
    return m_toolset;
}
void OAIAssignmentCreation::setToolset(const QString &toolset) {
    m_toolset = toolset;
    m_toolset_isSet = true;
}

bool OAIAssignmentCreation::is_toolset_Set() const{
    return m_toolset_isSet;
}

bool OAIAssignmentCreation::is_toolset_Valid() const{
    return m_toolset_isValid;
}

OAIAssignmentType OAIAssignmentCreation::getType() const {
    return m_type;
}
void OAIAssignmentCreation::setType(const OAIAssignmentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssignmentCreation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssignmentCreation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAssignmentCreation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_students.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_classroom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nb_playback_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toolset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentCreation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
