# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_revision_statistics import ScoreRevisionStatistics
from openapi_server import util


class ScoreRevision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autosave: bool=None, collaborators: List[str]=None, creation_date: datetime=None, description: str=None, event: str=None, id: str=None, statistics: ScoreRevisionStatistics=None, user: str=None):
        """ScoreRevision - a model defined in OpenAPI

        :param autosave: The autosave of this ScoreRevision.
        :param collaborators: The collaborators of this ScoreRevision.
        :param creation_date: The creation_date of this ScoreRevision.
        :param description: The description of this ScoreRevision.
        :param event: The event of this ScoreRevision.
        :param id: The id of this ScoreRevision.
        :param statistics: The statistics of this ScoreRevision.
        :param user: The user of this ScoreRevision.
        """
        self.openapi_types = {
            'autosave': bool,
            'collaborators': List[str],
            'creation_date': datetime,
            'description': str,
            'event': str,
            'id': str,
            'statistics': ScoreRevisionStatistics,
            'user': str
        }

        self.attribute_map = {
            'autosave': 'autosave',
            'collaborators': 'collaborators',
            'creation_date': 'creationDate',
            'description': 'description',
            'event': 'event',
            'id': 'id',
            'statistics': 'statistics',
            'user': 'user'
        }

        self._autosave = autosave
        self._collaborators = collaborators
        self._creation_date = creation_date
        self._description = description
        self._event = event
        self._id = id
        self._statistics = statistics
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreRevision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreRevision of this ScoreRevision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autosave(self):
        """Gets the autosave of this ScoreRevision.

        True if this revision was automatically generated by Flat and not on purpose by the user. 

        :return: The autosave of this ScoreRevision.
        :rtype: bool
        """
        return self._autosave

    @autosave.setter
    def autosave(self, autosave):
        """Sets the autosave of this ScoreRevision.

        True if this revision was automatically generated by Flat and not on purpose by the user. 

        :param autosave: The autosave of this ScoreRevision.
        :type autosave: bool
        """

        self._autosave = autosave

    @property
    def collaborators(self):
        """Gets the collaborators of this ScoreRevision.


        :return: The collaborators of this ScoreRevision.
        :rtype: List[str]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this ScoreRevision.


        :param collaborators: The collaborators of this ScoreRevision.
        :type collaborators: List[str]
        """

        self._collaborators = collaborators

    @property
    def creation_date(self):
        """Gets the creation_date of this ScoreRevision.

        The date when this revision was created

        :return: The creation_date of this ScoreRevision.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ScoreRevision.

        The date when this revision was created

        :param creation_date: The creation_date of this ScoreRevision.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this ScoreRevision.

        A description associated to the revision

        :return: The description of this ScoreRevision.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScoreRevision.

        A description associated to the revision

        :param description: The description of this ScoreRevision.
        :type description: str
        """

        self._description = description

    @property
    def event(self):
        """Gets the event of this ScoreRevision.

        The last event (action id) of the revision

        :return: The event of this ScoreRevision.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ScoreRevision.

        The last event (action id) of the revision

        :param event: The event of this ScoreRevision.
        :type event: str
        """

        self._event = event

    @property
    def id(self):
        """Gets the id of this ScoreRevision.

        The unique identifier of the revision.

        :return: The id of this ScoreRevision.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoreRevision.

        The unique identifier of the revision.

        :param id: The id of this ScoreRevision.
        :type id: str
        """

        self._id = id

    @property
    def statistics(self):
        """Gets the statistics of this ScoreRevision.


        :return: The statistics of this ScoreRevision.
        :rtype: ScoreRevisionStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this ScoreRevision.


        :param statistics: The statistics of this ScoreRevision.
        :type statistics: ScoreRevisionStatistics
        """

        self._statistics = statistics

    @property
    def user(self):
        """Gets the user of this ScoreRevision.

        The user identifier who created the revision

        :return: The user of this ScoreRevision.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ScoreRevision.

        The user identifier who created the revision

        :param user: The user of this ScoreRevision.
        :type user: str
        """

        self._user = user
