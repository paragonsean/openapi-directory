# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_mode import LicenseMode
from openapi_server.models.license_sources import LicenseSources
from openapi_server import util


class UserDetailsAdminAllOfLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, expiration_date: datetime=None, id: str=None, mode: LicenseMode=None, source: LicenseSources=LicenseSources.ORDER):
        """UserDetailsAdminAllOfLicense - a model defined in OpenAPI

        :param active: The active of this UserDetailsAdminAllOfLicense.
        :param expiration_date: The expiration_date of this UserDetailsAdminAllOfLicense.
        :param id: The id of this UserDetailsAdminAllOfLicense.
        :param mode: The mode of this UserDetailsAdminAllOfLicense.
        :param source: The source of this UserDetailsAdminAllOfLicense.
        """
        self.openapi_types = {
            'active': bool,
            'expiration_date': datetime,
            'id': str,
            'mode': LicenseMode,
            'source': LicenseSources
        }

        self.attribute_map = {
            'active': 'active',
            'expiration_date': 'expirationDate',
            'id': 'id',
            'mode': 'mode',
            'source': 'source'
        }

        self._active = active
        self._expiration_date = expiration_date
        self._id = id
        self._mode = mode
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDetailsAdminAllOfLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDetailsAdmin_allOf_license of this UserDetailsAdminAllOfLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this UserDetailsAdminAllOfLicense.

        ID of the current license

        :return: The active of this UserDetailsAdminAllOfLicense.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserDetailsAdminAllOfLicense.

        ID of the current license

        :param active: The active of this UserDetailsAdminAllOfLicense.
        :type active: bool
        """

        self._active = active

    @property
    def expiration_date(self):
        """Gets the expiration_date of this UserDetailsAdminAllOfLicense.

        Date when the license expires

        :return: The expiration_date of this UserDetailsAdminAllOfLicense.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this UserDetailsAdminAllOfLicense.

        Date when the license expires

        :param expiration_date: The expiration_date of this UserDetailsAdminAllOfLicense.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def id(self):
        """Gets the id of this UserDetailsAdminAllOfLicense.

        ID of the current license

        :return: The id of this UserDetailsAdminAllOfLicense.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetailsAdminAllOfLicense.

        ID of the current license

        :param id: The id of this UserDetailsAdminAllOfLicense.
        :type id: str
        """

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this UserDetailsAdminAllOfLicense.


        :return: The mode of this UserDetailsAdminAllOfLicense.
        :rtype: LicenseMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UserDetailsAdminAllOfLicense.


        :param mode: The mode of this UserDetailsAdminAllOfLicense.
        :type mode: LicenseMode
        """

        self._mode = mode

    @property
    def source(self):
        """Gets the source of this UserDetailsAdminAllOfLicense.


        :return: The source of this UserDetailsAdminAllOfLicense.
        :rtype: LicenseSources
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UserDetailsAdminAllOfLicense.


        :param source: The source of this UserDetailsAdminAllOfLicense.
        :type source: LicenseSources
        """

        self._source = source
