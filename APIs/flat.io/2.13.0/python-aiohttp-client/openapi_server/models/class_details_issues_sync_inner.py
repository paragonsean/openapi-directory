# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClassDetailsIssuesSyncInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: str=None, reason: str=None):
        """ClassDetailsIssuesSyncInner - a model defined in OpenAPI

        :param email: The email of this ClassDetailsIssuesSyncInner.
        :param id: The id of this ClassDetailsIssuesSyncInner.
        :param reason: The reason of this ClassDetailsIssuesSyncInner.
        """
        self.openapi_types = {
            'email': str,
            'id': str,
            'reason': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'reason': 'reason'
        }

        self._email = email
        self._id = id
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassDetailsIssuesSyncInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClassDetails_issues_sync_inner of this ClassDetailsIssuesSyncInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ClassDetailsIssuesSyncInner.

        The email address of the user concerned by this sync issue

        :return: The email of this ClassDetailsIssuesSyncInner.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClassDetailsIssuesSyncInner.

        The email address of the user concerned by this sync issue

        :param email: The email of this ClassDetailsIssuesSyncInner.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this ClassDetailsIssuesSyncInner.

        The account user identifier

        :return: The id of this ClassDetailsIssuesSyncInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClassDetailsIssuesSyncInner.

        The account user identifier

        :param id: The id of this ClassDetailsIssuesSyncInner.
        :type id: str
        """

        self._id = id

    @property
    def reason(self):
        """Gets the reason of this ClassDetailsIssuesSyncInner.

        The reason why the account cannot be synced

        :return: The reason of this ClassDetailsIssuesSyncInner.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ClassDetailsIssuesSyncInner.

        The reason why the account cannot be synced

        :param reason: The reason of this ClassDetailsIssuesSyncInner.
        :type reason: str
        """
        allowed_values = ["otherOrgnanization", "personalSubscription"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
