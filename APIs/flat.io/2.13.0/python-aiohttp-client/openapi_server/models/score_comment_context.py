# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreCommentContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, measure_uuids: List[str]=None, part_uuid: str=None, staff_idx: float=None, staff_uuid: str=None, start_dpq: float=None, start_time_pos: float=None, stop_dpq: float=None, stop_time_pos: float=None):
        """ScoreCommentContext - a model defined in OpenAPI

        :param measure_uuids: The measure_uuids of this ScoreCommentContext.
        :param part_uuid: The part_uuid of this ScoreCommentContext.
        :param staff_idx: The staff_idx of this ScoreCommentContext.
        :param staff_uuid: The staff_uuid of this ScoreCommentContext.
        :param start_dpq: The start_dpq of this ScoreCommentContext.
        :param start_time_pos: The start_time_pos of this ScoreCommentContext.
        :param stop_dpq: The stop_dpq of this ScoreCommentContext.
        :param stop_time_pos: The stop_time_pos of this ScoreCommentContext.
        """
        self.openapi_types = {
            'measure_uuids': List[str],
            'part_uuid': str,
            'staff_idx': float,
            'staff_uuid': str,
            'start_dpq': float,
            'start_time_pos': float,
            'stop_dpq': float,
            'stop_time_pos': float
        }

        self.attribute_map = {
            'measure_uuids': 'measureUuids',
            'part_uuid': 'partUuid',
            'staff_idx': 'staffIdx',
            'staff_uuid': 'staffUuid',
            'start_dpq': 'startDpq',
            'start_time_pos': 'startTimePos',
            'stop_dpq': 'stopDpq',
            'stop_time_pos': 'stopTimePos'
        }

        self._measure_uuids = measure_uuids
        self._part_uuid = part_uuid
        self._staff_idx = staff_idx
        self._staff_uuid = staff_uuid
        self._start_dpq = start_dpq
        self._start_time_pos = start_time_pos
        self._stop_dpq = stop_dpq
        self._stop_time_pos = stop_time_pos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreCommentContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreCommentContext of this ScoreCommentContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measure_uuids(self):
        """Gets the measure_uuids of this ScoreCommentContext.

        The list of measure UUIds

        :return: The measure_uuids of this ScoreCommentContext.
        :rtype: List[str]
        """
        return self._measure_uuids

    @measure_uuids.setter
    def measure_uuids(self, measure_uuids):
        """Sets the measure_uuids of this ScoreCommentContext.

        The list of measure UUIds

        :param measure_uuids: The measure_uuids of this ScoreCommentContext.
        :type measure_uuids: List[str]
        """
        if measure_uuids is None:
            raise ValueError("Invalid value for `measure_uuids`, must not be `None`")

        self._measure_uuids = measure_uuids

    @property
    def part_uuid(self):
        """Gets the part_uuid of this ScoreCommentContext.

        The unique identifier (UUID) of the score part

        :return: The part_uuid of this ScoreCommentContext.
        :rtype: str
        """
        return self._part_uuid

    @part_uuid.setter
    def part_uuid(self, part_uuid):
        """Sets the part_uuid of this ScoreCommentContext.

        The unique identifier (UUID) of the score part

        :param part_uuid: The part_uuid of this ScoreCommentContext.
        :type part_uuid: str
        """
        if part_uuid is None:
            raise ValueError("Invalid value for `part_uuid`, must not be `None`")

        self._part_uuid = part_uuid

    @property
    def staff_idx(self):
        """Gets the staff_idx of this ScoreCommentContext.

        (Deprecated, use `staffUuid`) The identififer of the staff

        :return: The staff_idx of this ScoreCommentContext.
        :rtype: float
        """
        return self._staff_idx

    @staff_idx.setter
    def staff_idx(self, staff_idx):
        """Sets the staff_idx of this ScoreCommentContext.

        (Deprecated, use `staffUuid`) The identififer of the staff

        :param staff_idx: The staff_idx of this ScoreCommentContext.
        :type staff_idx: float
        """

        self._staff_idx = staff_idx

    @property
    def staff_uuid(self):
        """Gets the staff_uuid of this ScoreCommentContext.

        The unique identififer (UUID) of the staff

        :return: The staff_uuid of this ScoreCommentContext.
        :rtype: str
        """
        return self._staff_uuid

    @staff_uuid.setter
    def staff_uuid(self, staff_uuid):
        """Sets the staff_uuid of this ScoreCommentContext.

        The unique identififer (UUID) of the staff

        :param staff_uuid: The staff_uuid of this ScoreCommentContext.
        :type staff_uuid: str
        """

        self._staff_uuid = staff_uuid

    @property
    def start_dpq(self):
        """Gets the start_dpq of this ScoreCommentContext.


        :return: The start_dpq of this ScoreCommentContext.
        :rtype: float
        """
        return self._start_dpq

    @start_dpq.setter
    def start_dpq(self, start_dpq):
        """Sets the start_dpq of this ScoreCommentContext.


        :param start_dpq: The start_dpq of this ScoreCommentContext.
        :type start_dpq: float
        """
        if start_dpq is None:
            raise ValueError("Invalid value for `start_dpq`, must not be `None`")

        self._start_dpq = start_dpq

    @property
    def start_time_pos(self):
        """Gets the start_time_pos of this ScoreCommentContext.


        :return: The start_time_pos of this ScoreCommentContext.
        :rtype: float
        """
        return self._start_time_pos

    @start_time_pos.setter
    def start_time_pos(self, start_time_pos):
        """Sets the start_time_pos of this ScoreCommentContext.


        :param start_time_pos: The start_time_pos of this ScoreCommentContext.
        :type start_time_pos: float
        """
        if start_time_pos is None:
            raise ValueError("Invalid value for `start_time_pos`, must not be `None`")

        self._start_time_pos = start_time_pos

    @property
    def stop_dpq(self):
        """Gets the stop_dpq of this ScoreCommentContext.


        :return: The stop_dpq of this ScoreCommentContext.
        :rtype: float
        """
        return self._stop_dpq

    @stop_dpq.setter
    def stop_dpq(self, stop_dpq):
        """Sets the stop_dpq of this ScoreCommentContext.


        :param stop_dpq: The stop_dpq of this ScoreCommentContext.
        :type stop_dpq: float
        """
        if stop_dpq is None:
            raise ValueError("Invalid value for `stop_dpq`, must not be `None`")

        self._stop_dpq = stop_dpq

    @property
    def stop_time_pos(self):
        """Gets the stop_time_pos of this ScoreCommentContext.


        :return: The stop_time_pos of this ScoreCommentContext.
        :rtype: float
        """
        return self._stop_time_pos

    @stop_time_pos.setter
    def stop_time_pos(self, stop_time_pos):
        """Sets the stop_time_pos of this ScoreCommentContext.


        :param stop_time_pos: The stop_time_pos of this ScoreCommentContext.
        :type stop_time_pos: float
        """
        if stop_time_pos is None:
            raise ValueError("Invalid value for `stop_time_pos`, must not be `None`")

        self._stop_time_pos = stop_time_pos
