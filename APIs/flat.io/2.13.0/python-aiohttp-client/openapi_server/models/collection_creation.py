# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collection_privacy import CollectionPrivacy
from openapi_server import util


class CollectionCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, privacy: CollectionPrivacy=None, title: str=None):
        """CollectionCreation - a model defined in OpenAPI

        :param privacy: The privacy of this CollectionCreation.
        :param title: The title of this CollectionCreation.
        """
        self.openapi_types = {
            'privacy': CollectionPrivacy,
            'title': str
        }

        self.attribute_map = {
            'privacy': 'privacy',
            'title': 'title'
        }

        self._privacy = privacy
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionCreation of this CollectionCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def privacy(self):
        """Gets the privacy of this CollectionCreation.


        :return: The privacy of this CollectionCreation.
        :rtype: CollectionPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this CollectionCreation.


        :param privacy: The privacy of this CollectionCreation.
        :type privacy: CollectionPrivacy
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")

        self._privacy = privacy

    @property
    def title(self):
        """Gets the title of this CollectionCreation.

        The title of the collection

        :return: The title of this CollectionCreation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CollectionCreation.

        The title of the collection

        :param title: The title of this CollectionCreation.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 300:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `300`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
