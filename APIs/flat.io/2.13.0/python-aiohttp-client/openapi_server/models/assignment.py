# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_canvas import AssignmentCanvas
from openapi_server.models.assignment_lti import AssignmentLti
from openapi_server.models.assignment_mfc import AssignmentMfc
from openapi_server.models.assignment_submission import AssignmentSubmission
from openapi_server.models.assignment_type import AssignmentType
from openapi_server.models.google_classroom_coursework import GoogleClassroomCoursework
from openapi_server.models.media_attachment import MediaAttachment
from openapi_server.models.microsoft_graph_assignment import MicrosoftGraphAssignment
from openapi_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[MediaAttachment]=None, canvas: AssignmentCanvas=None, classroom: str=None, cover: str=None, cover_file: str=None, creation_date: datetime=None, creator: str=None, description: str=None, due_date: datetime=None, google_classroom: GoogleClassroomCoursework=None, lti: AssignmentLti=None, max_points: float=None, mfc: AssignmentMfc=None, microsoft_graph: MicrosoftGraphAssignment=None, scheduled_date: datetime=None, state: str=None, submissions: List[AssignmentSubmission]=None, title: str=None, type: AssignmentType=None):
        """Assignment - a model defined in OpenAPI

        :param attachments: The attachments of this Assignment.
        :param canvas: The canvas of this Assignment.
        :param classroom: The classroom of this Assignment.
        :param cover: The cover of this Assignment.
        :param cover_file: The cover_file of this Assignment.
        :param creation_date: The creation_date of this Assignment.
        :param creator: The creator of this Assignment.
        :param description: The description of this Assignment.
        :param due_date: The due_date of this Assignment.
        :param google_classroom: The google_classroom of this Assignment.
        :param lti: The lti of this Assignment.
        :param max_points: The max_points of this Assignment.
        :param mfc: The mfc of this Assignment.
        :param microsoft_graph: The microsoft_graph of this Assignment.
        :param scheduled_date: The scheduled_date of this Assignment.
        :param state: The state of this Assignment.
        :param submissions: The submissions of this Assignment.
        :param title: The title of this Assignment.
        :param type: The type of this Assignment.
        """
        self.openapi_types = {
            'attachments': List[MediaAttachment],
            'canvas': AssignmentCanvas,
            'classroom': str,
            'cover': str,
            'cover_file': str,
            'creation_date': datetime,
            'creator': str,
            'description': str,
            'due_date': datetime,
            'google_classroom': GoogleClassroomCoursework,
            'lti': AssignmentLti,
            'max_points': float,
            'mfc': AssignmentMfc,
            'microsoft_graph': MicrosoftGraphAssignment,
            'scheduled_date': datetime,
            'state': str,
            'submissions': List[AssignmentSubmission],
            'title': str,
            'type': AssignmentType
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'canvas': 'canvas',
            'classroom': 'classroom',
            'cover': 'cover',
            'cover_file': 'coverFile',
            'creation_date': 'creationDate',
            'creator': 'creator',
            'description': 'description',
            'due_date': 'dueDate',
            'google_classroom': 'googleClassroom',
            'lti': 'lti',
            'max_points': 'maxPoints',
            'mfc': 'mfc',
            'microsoft_graph': 'microsoftGraph',
            'scheduled_date': 'scheduledDate',
            'state': 'state',
            'submissions': 'submissions',
            'title': 'title',
            'type': 'type'
        }

        self._attachments = attachments
        self._canvas = canvas
        self._classroom = classroom
        self._cover = cover
        self._cover_file = cover_file
        self._creation_date = creation_date
        self._creator = creator
        self._description = description
        self._due_date = due_date
        self._google_classroom = google_classroom
        self._lti = lti
        self._max_points = max_points
        self._mfc = mfc
        self._microsoft_graph = microsoft_graph
        self._scheduled_date = scheduled_date
        self._state = state
        self._submissions = submissions
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assignment of this Assignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Assignment.


        :return: The attachments of this Assignment.
        :rtype: List[MediaAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Assignment.


        :param attachments: The attachments of this Assignment.
        :type attachments: List[MediaAttachment]
        """

        self._attachments = attachments

    @property
    def canvas(self):
        """Gets the canvas of this Assignment.


        :return: The canvas of this Assignment.
        :rtype: AssignmentCanvas
        """
        return self._canvas

    @canvas.setter
    def canvas(self, canvas):
        """Sets the canvas of this Assignment.


        :param canvas: The canvas of this Assignment.
        :type canvas: AssignmentCanvas
        """

        self._canvas = canvas

    @property
    def classroom(self):
        """Gets the classroom of this Assignment.

        The unique identifier of the class where this assignment was posted

        :return: The classroom of this Assignment.
        :rtype: str
        """
        return self._classroom

    @classroom.setter
    def classroom(self, classroom):
        """Sets the classroom of this Assignment.

        The unique identifier of the class where this assignment was posted

        :param classroom: The classroom of this Assignment.
        :type classroom: str
        """

        self._classroom = classroom

    @property
    def cover(self):
        """Gets the cover of this Assignment.

        The URL of the cover to display

        :return: The cover of this Assignment.
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Assignment.

        The URL of the cover to display

        :param cover: The cover of this Assignment.
        :type cover: str
        """

        self._cover = cover

    @property
    def cover_file(self):
        """Gets the cover_file of this Assignment.

        The id of the cover to display

        :return: The cover_file of this Assignment.
        :rtype: str
        """
        return self._cover_file

    @cover_file.setter
    def cover_file(self, cover_file):
        """Sets the cover_file of this Assignment.

        The id of the cover to display

        :param cover_file: The cover_file of this Assignment.
        :type cover_file: str
        """

        self._cover_file = cover_file

    @property
    def creation_date(self):
        """Gets the creation_date of this Assignment.

        The creation date of this assignment

        :return: The creation_date of this Assignment.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Assignment.

        The creation date of this assignment

        :param creation_date: The creation_date of this Assignment.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def creator(self):
        """Gets the creator of this Assignment.

        The User unique identifier of the creator of this assignment 

        :return: The creator of this Assignment.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Assignment.

        The User unique identifier of the creator of this assignment 

        :param creator: The creator of this Assignment.
        :type creator: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this Assignment.

        Description and content of the assignment

        :return: The description of this Assignment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assignment.

        Description and content of the assignment

        :param description: The description of this Assignment.
        :type description: str
        """

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this Assignment.

        The due date of this assignment, late submissions will be marked as paste due. 

        :return: The due_date of this Assignment.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Assignment.

        The due date of this assignment, late submissions will be marked as paste due. 

        :param due_date: The due_date of this Assignment.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def google_classroom(self):
        """Gets the google_classroom of this Assignment.


        :return: The google_classroom of this Assignment.
        :rtype: GoogleClassroomCoursework
        """
        return self._google_classroom

    @google_classroom.setter
    def google_classroom(self, google_classroom):
        """Sets the google_classroom of this Assignment.


        :param google_classroom: The google_classroom of this Assignment.
        :type google_classroom: GoogleClassroomCoursework
        """

        self._google_classroom = google_classroom

    @property
    def lti(self):
        """Gets the lti of this Assignment.


        :return: The lti of this Assignment.
        :rtype: AssignmentLti
        """
        return self._lti

    @lti.setter
    def lti(self, lti):
        """Sets the lti of this Assignment.


        :param lti: The lti of this Assignment.
        :type lti: AssignmentLti
        """

        self._lti = lti

    @property
    def max_points(self):
        """Gets the max_points of this Assignment.

        If set, the grading will be enabled for the assignement 

        :return: The max_points of this Assignment.
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this Assignment.

        If set, the grading will be enabled for the assignement 

        :param max_points: The max_points of this Assignment.
        :type max_points: float
        """

        self._max_points = max_points

    @property
    def mfc(self):
        """Gets the mfc of this Assignment.


        :return: The mfc of this Assignment.
        :rtype: AssignmentMfc
        """
        return self._mfc

    @mfc.setter
    def mfc(self, mfc):
        """Sets the mfc of this Assignment.


        :param mfc: The mfc of this Assignment.
        :type mfc: AssignmentMfc
        """

        self._mfc = mfc

    @property
    def microsoft_graph(self):
        """Gets the microsoft_graph of this Assignment.


        :return: The microsoft_graph of this Assignment.
        :rtype: MicrosoftGraphAssignment
        """
        return self._microsoft_graph

    @microsoft_graph.setter
    def microsoft_graph(self, microsoft_graph):
        """Sets the microsoft_graph of this Assignment.


        :param microsoft_graph: The microsoft_graph of this Assignment.
        :type microsoft_graph: MicrosoftGraphAssignment
        """

        self._microsoft_graph = microsoft_graph

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this Assignment.

        The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. 

        :return: The scheduled_date of this Assignment.
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this Assignment.

        The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. 

        :param scheduled_date: The scheduled_date of this Assignment.
        :type scheduled_date: datetime
        """

        self._scheduled_date = scheduled_date

    @property
    def state(self):
        """Gets the state of this Assignment.

        State of the assignment

        :return: The state of this Assignment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Assignment.

        State of the assignment

        :param state: The state of this Assignment.
        :type state: str
        """
        allowed_values = ["draft", "active", "archived"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submissions(self):
        """Gets the submissions of this Assignment.


        :return: The submissions of this Assignment.
        :rtype: List[AssignmentSubmission]
        """
        return self._submissions

    @submissions.setter
    def submissions(self, submissions):
        """Sets the submissions of this Assignment.


        :param submissions: The submissions of this Assignment.
        :type submissions: List[AssignmentSubmission]
        """

        self._submissions = submissions

    @property
    def title(self):
        """Gets the title of this Assignment.

        Title of the assignment

        :return: The title of this Assignment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Assignment.

        Title of the assignment

        :param title: The title of this Assignment.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Assignment.


        :return: The type of this Assignment.
        :rtype: AssignmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Assignment.


        :param type: The type of this Assignment.
        :type type: AssignmentType
        """

        self._type = type
