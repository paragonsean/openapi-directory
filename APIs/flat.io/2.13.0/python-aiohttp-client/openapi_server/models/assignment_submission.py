# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_submission_state import AssignmentSubmissionState
from openapi_server.models.google_classroom_submission import GoogleClassroomSubmission
from openapi_server.models.media_attachment import MediaAttachment
from openapi_server.models.microsoft_graph_submission import MicrosoftGraphSubmission
from openapi_server import util


class AssignmentSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: str=None, attachments: List[MediaAttachment]=None, classroom: str=None, creation_date: str=None, creator: str=None, draft_grade: float=None, google_classroom: GoogleClassroomSubmission=None, grade: float=None, id: str=None, max_points: float=None, microsoft_graph: MicrosoftGraphSubmission=None, return_creator: str=None, return_date: str=None, state: AssignmentSubmissionState=None, submission_date: str=None):
        """AssignmentSubmission - a model defined in OpenAPI

        :param assignment: The assignment of this AssignmentSubmission.
        :param attachments: The attachments of this AssignmentSubmission.
        :param classroom: The classroom of this AssignmentSubmission.
        :param creation_date: The creation_date of this AssignmentSubmission.
        :param creator: The creator of this AssignmentSubmission.
        :param draft_grade: The draft_grade of this AssignmentSubmission.
        :param google_classroom: The google_classroom of this AssignmentSubmission.
        :param grade: The grade of this AssignmentSubmission.
        :param id: The id of this AssignmentSubmission.
        :param max_points: The max_points of this AssignmentSubmission.
        :param microsoft_graph: The microsoft_graph of this AssignmentSubmission.
        :param return_creator: The return_creator of this AssignmentSubmission.
        :param return_date: The return_date of this AssignmentSubmission.
        :param state: The state of this AssignmentSubmission.
        :param submission_date: The submission_date of this AssignmentSubmission.
        """
        self.openapi_types = {
            'assignment': str,
            'attachments': List[MediaAttachment],
            'classroom': str,
            'creation_date': str,
            'creator': str,
            'draft_grade': float,
            'google_classroom': GoogleClassroomSubmission,
            'grade': float,
            'id': str,
            'max_points': float,
            'microsoft_graph': MicrosoftGraphSubmission,
            'return_creator': str,
            'return_date': str,
            'state': AssignmentSubmissionState,
            'submission_date': str
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'attachments': 'attachments',
            'classroom': 'classroom',
            'creation_date': 'creationDate',
            'creator': 'creator',
            'draft_grade': 'draftGrade',
            'google_classroom': 'googleClassroom',
            'grade': 'grade',
            'id': 'id',
            'max_points': 'maxPoints',
            'microsoft_graph': 'microsoftGraph',
            'return_creator': 'returnCreator',
            'return_date': 'returnDate',
            'state': 'state',
            'submission_date': 'submissionDate'
        }

        self._assignment = assignment
        self._attachments = attachments
        self._classroom = classroom
        self._creation_date = creation_date
        self._creator = creator
        self._draft_grade = draft_grade
        self._google_classroom = google_classroom
        self._grade = grade
        self._id = id
        self._max_points = max_points
        self._microsoft_graph = microsoft_graph
        self._return_creator = return_creator
        self._return_date = return_date
        self._state = state
        self._submission_date = submission_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentSubmission of this AssignmentSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this AssignmentSubmission.

        Unique identifier of the assignment

        :return: The assignment of this AssignmentSubmission.
        :rtype: str
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this AssignmentSubmission.

        Unique identifier of the assignment

        :param assignment: The assignment of this AssignmentSubmission.
        :type assignment: str
        """

        self._assignment = assignment

    @property
    def attachments(self):
        """Gets the attachments of this AssignmentSubmission.


        :return: The attachments of this AssignmentSubmission.
        :rtype: List[MediaAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AssignmentSubmission.


        :param attachments: The attachments of this AssignmentSubmission.
        :type attachments: List[MediaAttachment]
        """

        self._attachments = attachments

    @property
    def classroom(self):
        """Gets the classroom of this AssignmentSubmission.

        Unique identifier of the classroom where the assignment was posted 

        :return: The classroom of this AssignmentSubmission.
        :rtype: str
        """
        return self._classroom

    @classroom.setter
    def classroom(self, classroom):
        """Sets the classroom of this AssignmentSubmission.

        Unique identifier of the classroom where the assignment was posted 

        :param classroom: The classroom of this AssignmentSubmission.
        :type classroom: str
        """

        self._classroom = classroom

    @property
    def creation_date(self):
        """Gets the creation_date of this AssignmentSubmission.

        The date when the submission was created

        :return: The creation_date of this AssignmentSubmission.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AssignmentSubmission.

        The date when the submission was created

        :param creation_date: The creation_date of this AssignmentSubmission.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def creator(self):
        """Gets the creator of this AssignmentSubmission.

        The User identifier of the student who created the submission

        :return: The creator of this AssignmentSubmission.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AssignmentSubmission.

        The User identifier of the student who created the submission

        :param creator: The creator of this AssignmentSubmission.
        :type creator: str
        """

        self._creator = creator

    @property
    def draft_grade(self):
        """Gets the draft_grade of this AssignmentSubmission.

        Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission

        :return: The draft_grade of this AssignmentSubmission.
        :rtype: float
        """
        return self._draft_grade

    @draft_grade.setter
    def draft_grade(self, draft_grade):
        """Sets the draft_grade of this AssignmentSubmission.

        Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission

        :param draft_grade: The draft_grade of this AssignmentSubmission.
        :type draft_grade: float
        """

        self._draft_grade = draft_grade

    @property
    def google_classroom(self):
        """Gets the google_classroom of this AssignmentSubmission.


        :return: The google_classroom of this AssignmentSubmission.
        :rtype: GoogleClassroomSubmission
        """
        return self._google_classroom

    @google_classroom.setter
    def google_classroom(self, google_classroom):
        """Sets the google_classroom of this AssignmentSubmission.


        :param google_classroom: The google_classroom of this AssignmentSubmission.
        :type google_classroom: GoogleClassroomSubmission
        """

        self._google_classroom = google_classroom

    @property
    def grade(self):
        """Gets the grade of this AssignmentSubmission.

        Optional grade. If unset, no grade was set.

        :return: The grade of this AssignmentSubmission.
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this AssignmentSubmission.

        Optional grade. If unset, no grade was set.

        :param grade: The grade of this AssignmentSubmission.
        :type grade: float
        """

        self._grade = grade

    @property
    def id(self):
        """Gets the id of this AssignmentSubmission.

        Unique identifier of the submission

        :return: The id of this AssignmentSubmission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentSubmission.

        Unique identifier of the submission

        :param id: The id of this AssignmentSubmission.
        :type id: str
        """

        self._id = id

    @property
    def max_points(self):
        """Gets the max_points of this AssignmentSubmission.

        Optional max points for the grade. If set, a corresponding `draftGrade` or `grade` will be set.

        :return: The max_points of this AssignmentSubmission.
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this AssignmentSubmission.

        Optional max points for the grade. If set, a corresponding `draftGrade` or `grade` will be set.

        :param max_points: The max_points of this AssignmentSubmission.
        :type max_points: float
        """

        self._max_points = max_points

    @property
    def microsoft_graph(self):
        """Gets the microsoft_graph of this AssignmentSubmission.


        :return: The microsoft_graph of this AssignmentSubmission.
        :rtype: MicrosoftGraphSubmission
        """
        return self._microsoft_graph

    @microsoft_graph.setter
    def microsoft_graph(self, microsoft_graph):
        """Sets the microsoft_graph of this AssignmentSubmission.


        :param microsoft_graph: The microsoft_graph of this AssignmentSubmission.
        :type microsoft_graph: MicrosoftGraphSubmission
        """

        self._microsoft_graph = microsoft_graph

    @property
    def return_creator(self):
        """Gets the return_creator of this AssignmentSubmission.

        The User unique identifier of the teacher who returned the submission 

        :return: The return_creator of this AssignmentSubmission.
        :rtype: str
        """
        return self._return_creator

    @return_creator.setter
    def return_creator(self, return_creator):
        """Sets the return_creator of this AssignmentSubmission.

        The User unique identifier of the teacher who returned the submission 

        :param return_creator: The return_creator of this AssignmentSubmission.
        :type return_creator: str
        """

        self._return_creator = return_creator

    @property
    def return_date(self):
        """Gets the return_date of this AssignmentSubmission.

        The date when the teacher returned the work

        :return: The return_date of this AssignmentSubmission.
        :rtype: str
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this AssignmentSubmission.

        The date when the teacher returned the work

        :param return_date: The return_date of this AssignmentSubmission.
        :type return_date: str
        """

        self._return_date = return_date

    @property
    def state(self):
        """Gets the state of this AssignmentSubmission.


        :return: The state of this AssignmentSubmission.
        :rtype: AssignmentSubmissionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AssignmentSubmission.


        :param state: The state of this AssignmentSubmission.
        :type state: AssignmentSubmissionState
        """

        self._state = state

    @property
    def submission_date(self):
        """Gets the submission_date of this AssignmentSubmission.

        The date when the student submitted his work

        :return: The submission_date of this AssignmentSubmission.
        :rtype: str
        """
        return self._submission_date

    @submission_date.setter
    def submission_date(self, submission_date):
        """Sets the submission_date of this AssignmentSubmission.

        The date when the student submitted his work

        :param submission_date: The submission_date of this AssignmentSubmission.
        :type submission_date: str
        """

        self._submission_date = submission_date
