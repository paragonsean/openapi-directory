# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_creation_type import ScoreCreationType
from openapi_server.models.score_license import ScoreLicense
from openapi_server.models.score_privacy import ScorePrivacy
import re
from openapi_server import util


class ScoreModification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arranger: str=None, composer: str=None, creation_type: ScoreCreationType=None, description: str=None, license: ScoreLicense=None, license_text: str=None, lyricist: str=None, privacy: ScorePrivacy=None, sharing_key: str=None, subtitle: str=None, tags: List[str]=None, title: str=None):
        """ScoreModification - a model defined in OpenAPI

        :param arranger: The arranger of this ScoreModification.
        :param composer: The composer of this ScoreModification.
        :param creation_type: The creation_type of this ScoreModification.
        :param description: The description of this ScoreModification.
        :param license: The license of this ScoreModification.
        :param license_text: The license_text of this ScoreModification.
        :param lyricist: The lyricist of this ScoreModification.
        :param privacy: The privacy of this ScoreModification.
        :param sharing_key: The sharing_key of this ScoreModification.
        :param subtitle: The subtitle of this ScoreModification.
        :param tags: The tags of this ScoreModification.
        :param title: The title of this ScoreModification.
        """
        self.openapi_types = {
            'arranger': str,
            'composer': str,
            'creation_type': ScoreCreationType,
            'description': str,
            'license': ScoreLicense,
            'license_text': str,
            'lyricist': str,
            'privacy': ScorePrivacy,
            'sharing_key': str,
            'subtitle': str,
            'tags': List[str],
            'title': str
        }

        self.attribute_map = {
            'arranger': 'arranger',
            'composer': 'composer',
            'creation_type': 'creationType',
            'description': 'description',
            'license': 'license',
            'license_text': 'licenseText',
            'lyricist': 'lyricist',
            'privacy': 'privacy',
            'sharing_key': 'sharingKey',
            'subtitle': 'subtitle',
            'tags': 'tags',
            'title': 'title'
        }

        self._arranger = arranger
        self._composer = composer
        self._creation_type = creation_type
        self._description = description
        self._license = license
        self._license_text = license_text
        self._lyricist = lyricist
        self._privacy = privacy
        self._sharing_key = sharing_key
        self._subtitle = subtitle
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreModification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreModification of this ScoreModification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arranger(self):
        """Gets the arranger of this ScoreModification.

        The arranger of the score

        :return: The arranger of this ScoreModification.
        :rtype: str
        """
        return self._arranger

    @arranger.setter
    def arranger(self, arranger):
        """Sets the arranger of this ScoreModification.

        The arranger of the score

        :param arranger: The arranger of this ScoreModification.
        :type arranger: str
        """

        self._arranger = arranger

    @property
    def composer(self):
        """Gets the composer of this ScoreModification.

        The composer of the score

        :return: The composer of this ScoreModification.
        :rtype: str
        """
        return self._composer

    @composer.setter
    def composer(self, composer):
        """Sets the composer of this ScoreModification.

        The composer of the score

        :param composer: The composer of this ScoreModification.
        :type composer: str
        """

        self._composer = composer

    @property
    def creation_type(self):
        """Gets the creation_type of this ScoreModification.


        :return: The creation_type of this ScoreModification.
        :rtype: ScoreCreationType
        """
        return self._creation_type

    @creation_type.setter
    def creation_type(self, creation_type):
        """Sets the creation_type of this ScoreModification.


        :param creation_type: The creation_type of this ScoreModification.
        :type creation_type: ScoreCreationType
        """

        self._creation_type = creation_type

    @property
    def description(self):
        """Gets the description of this ScoreModification.

        Description of the creation

        :return: The description of this ScoreModification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScoreModification.

        Description of the creation

        :param description: The description of this ScoreModification.
        :type description: str
        """
        if description is not None and len(description) > 2000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2000`")

        self._description = description

    @property
    def license(self):
        """Gets the license of this ScoreModification.


        :return: The license of this ScoreModification.
        :rtype: ScoreLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ScoreModification.


        :param license: The license of this ScoreModification.
        :type license: ScoreLicense
        """

        self._license = license

    @property
    def license_text(self):
        """Gets the license_text of this ScoreModification.

        The rights info written on the score

        :return: The license_text of this ScoreModification.
        :rtype: str
        """
        return self._license_text

    @license_text.setter
    def license_text(self, license_text):
        """Sets the license_text of this ScoreModification.

        The rights info written on the score

        :param license_text: The license_text of this ScoreModification.
        :type license_text: str
        """

        self._license_text = license_text

    @property
    def lyricist(self):
        """Gets the lyricist of this ScoreModification.

        The lyricist of the score

        :return: The lyricist of this ScoreModification.
        :rtype: str
        """
        return self._lyricist

    @lyricist.setter
    def lyricist(self, lyricist):
        """Sets the lyricist of this ScoreModification.

        The lyricist of the score

        :param lyricist: The lyricist of this ScoreModification.
        :type lyricist: str
        """

        self._lyricist = lyricist

    @property
    def privacy(self):
        """Gets the privacy of this ScoreModification.


        :return: The privacy of this ScoreModification.
        :rtype: ScorePrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ScoreModification.


        :param privacy: The privacy of this ScoreModification.
        :type privacy: ScorePrivacy
        """

        self._privacy = privacy

    @property
    def sharing_key(self):
        """Gets the sharing_key of this ScoreModification.

        When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated.

        :return: The sharing_key of this ScoreModification.
        :rtype: str
        """
        return self._sharing_key

    @sharing_key.setter
    def sharing_key(self, sharing_key):
        """Sets the sharing_key of this ScoreModification.

        When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated.

        :param sharing_key: The sharing_key of this ScoreModification.
        :type sharing_key: str
        """
        if sharing_key is not None and not re.search(r'^[a-f0-9]{128}$', sharing_key):
            raise ValueError("Invalid value for `sharing_key`, must be a follow pattern or equal to `/^[a-f0-9]{128}$/`")

        self._sharing_key = sharing_key

    @property
    def subtitle(self):
        """Gets the subtitle of this ScoreModification.

        The subtitle of the score

        :return: The subtitle of this ScoreModification.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this ScoreModification.

        The subtitle of the score

        :param subtitle: The subtitle of this ScoreModification.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def tags(self):
        """Gets the tags of this ScoreModification.

        Tags describing the score

        :return: The tags of this ScoreModification.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ScoreModification.

        Tags describing the score

        :param tags: The tags of this ScoreModification.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this ScoreModification.

        The title of the score

        :return: The title of this ScoreModification.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoreModification.

        The title of the score

        :param title: The title of this ScoreModification.
        :type title: str
        """

        self._title = title
