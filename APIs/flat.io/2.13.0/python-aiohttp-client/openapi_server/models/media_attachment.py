# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_score_sharing_mode import MediaScoreSharingMode
from openapi_server import util


class MediaAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_name: str=None, author_url: str=None, description: str=None, google_drive_file_id: str=None, html: str=None, html_height: str=None, html_width: str=None, icon_url: str=None, lock_score_template: bool=None, mime_type: str=None, revision: str=None, score: str=None, sharing_mode: MediaScoreSharingMode=MediaScoreSharingMode.READ, thumbnail_height: int=None, thumbnail_url: str=None, thumbnail_width: int=None, title: str=None, track: str=None, type: str=None, url: str=None, worksheet: str=None):
        """MediaAttachment - a model defined in OpenAPI

        :param author_name: The author_name of this MediaAttachment.
        :param author_url: The author_url of this MediaAttachment.
        :param description: The description of this MediaAttachment.
        :param google_drive_file_id: The google_drive_file_id of this MediaAttachment.
        :param html: The html of this MediaAttachment.
        :param html_height: The html_height of this MediaAttachment.
        :param html_width: The html_width of this MediaAttachment.
        :param icon_url: The icon_url of this MediaAttachment.
        :param lock_score_template: The lock_score_template of this MediaAttachment.
        :param mime_type: The mime_type of this MediaAttachment.
        :param revision: The revision of this MediaAttachment.
        :param score: The score of this MediaAttachment.
        :param sharing_mode: The sharing_mode of this MediaAttachment.
        :param thumbnail_height: The thumbnail_height of this MediaAttachment.
        :param thumbnail_url: The thumbnail_url of this MediaAttachment.
        :param thumbnail_width: The thumbnail_width of this MediaAttachment.
        :param title: The title of this MediaAttachment.
        :param track: The track of this MediaAttachment.
        :param type: The type of this MediaAttachment.
        :param url: The url of this MediaAttachment.
        :param worksheet: The worksheet of this MediaAttachment.
        """
        self.openapi_types = {
            'author_name': str,
            'author_url': str,
            'description': str,
            'google_drive_file_id': str,
            'html': str,
            'html_height': str,
            'html_width': str,
            'icon_url': str,
            'lock_score_template': bool,
            'mime_type': str,
            'revision': str,
            'score': str,
            'sharing_mode': MediaScoreSharingMode,
            'thumbnail_height': int,
            'thumbnail_url': str,
            'thumbnail_width': int,
            'title': str,
            'track': str,
            'type': str,
            'url': str,
            'worksheet': str
        }

        self.attribute_map = {
            'author_name': 'authorName',
            'author_url': 'authorUrl',
            'description': 'description',
            'google_drive_file_id': 'googleDriveFileId',
            'html': 'html',
            'html_height': 'htmlHeight',
            'html_width': 'htmlWidth',
            'icon_url': 'iconUrl',
            'lock_score_template': 'lockScoreTemplate',
            'mime_type': 'mimeType',
            'revision': 'revision',
            'score': 'score',
            'sharing_mode': 'sharingMode',
            'thumbnail_height': 'thumbnailHeight',
            'thumbnail_url': 'thumbnailUrl',
            'thumbnail_width': 'thumbnailWidth',
            'title': 'title',
            'track': 'track',
            'type': 'type',
            'url': 'url',
            'worksheet': 'worksheet'
        }

        self._author_name = author_name
        self._author_url = author_url
        self._description = description
        self._google_drive_file_id = google_drive_file_id
        self._html = html
        self._html_height = html_height
        self._html_width = html_width
        self._icon_url = icon_url
        self._lock_score_template = lock_score_template
        self._mime_type = mime_type
        self._revision = revision
        self._score = score
        self._sharing_mode = sharing_mode
        self._thumbnail_height = thumbnail_height
        self._thumbnail_url = thumbnail_url
        self._thumbnail_width = thumbnail_width
        self._title = title
        self._track = track
        self._type = type
        self._url = url
        self._worksheet = worksheet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaAttachment of this MediaAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_name(self):
        """Gets the author_name of this MediaAttachment.

        The resolved author name of the attachment

        :return: The author_name of this MediaAttachment.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this MediaAttachment.

        The resolved author name of the attachment

        :param author_name: The author_name of this MediaAttachment.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def author_url(self):
        """Gets the author_url of this MediaAttachment.

        The resolved author url of the attachment

        :return: The author_url of this MediaAttachment.
        :rtype: str
        """
        return self._author_url

    @author_url.setter
    def author_url(self, author_url):
        """Sets the author_url of this MediaAttachment.

        The resolved author url of the attachment

        :param author_url: The author_url of this MediaAttachment.
        :type author_url: str
        """

        self._author_url = author_url

    @property
    def description(self):
        """Gets the description of this MediaAttachment.

        The resolved description of the attachment

        :return: The description of this MediaAttachment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MediaAttachment.

        The resolved description of the attachment

        :param description: The description of this MediaAttachment.
        :type description: str
        """

        self._description = description

    @property
    def google_drive_file_id(self):
        """Gets the google_drive_file_id of this MediaAttachment.

        The ID of the Google Drive File

        :return: The google_drive_file_id of this MediaAttachment.
        :rtype: str
        """
        return self._google_drive_file_id

    @google_drive_file_id.setter
    def google_drive_file_id(self, google_drive_file_id):
        """Sets the google_drive_file_id of this MediaAttachment.

        The ID of the Google Drive File

        :param google_drive_file_id: The google_drive_file_id of this MediaAttachment.
        :type google_drive_file_id: str
        """

        self._google_drive_file_id = google_drive_file_id

    @property
    def html(self):
        """Gets the html of this MediaAttachment.

        If the attachment type is `rich` or `video`, the HTML code of the media to display 

        :return: The html of this MediaAttachment.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this MediaAttachment.

        If the attachment type is `rich` or `video`, the HTML code of the media to display 

        :param html: The html of this MediaAttachment.
        :type html: str
        """

        self._html = html

    @property
    def html_height(self):
        """Gets the html_height of this MediaAttachment.

        If the `html` is available, the height of the widget

        :return: The html_height of this MediaAttachment.
        :rtype: str
        """
        return self._html_height

    @html_height.setter
    def html_height(self, html_height):
        """Sets the html_height of this MediaAttachment.

        If the `html` is available, the height of the widget

        :param html_height: The html_height of this MediaAttachment.
        :type html_height: str
        """

        self._html_height = html_height

    @property
    def html_width(self):
        """Gets the html_width of this MediaAttachment.

        If the `html` is available, the width of the widget

        :return: The html_width of this MediaAttachment.
        :rtype: str
        """
        return self._html_width

    @html_width.setter
    def html_width(self, html_width):
        """Sets the html_width of this MediaAttachment.

        If the `html` is available, the width of the widget

        :param html_width: The html_width of this MediaAttachment.
        :type html_width: str
        """

        self._html_width = html_width

    @property
    def icon_url(self):
        """Gets the icon_url of this MediaAttachment.

        The URL of the icon

        :return: The icon_url of this MediaAttachment.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this MediaAttachment.

        The URL of the icon

        :param icon_url: The icon_url of this MediaAttachment.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def lock_score_template(self):
        """Gets the lock_score_template of this MediaAttachment.

        To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.

        :return: The lock_score_template of this MediaAttachment.
        :rtype: bool
        """
        return self._lock_score_template

    @lock_score_template.setter
    def lock_score_template(self, lock_score_template):
        """Sets the lock_score_template of this MediaAttachment.

        To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.

        :param lock_score_template: The lock_score_template of this MediaAttachment.
        :type lock_score_template: bool
        """

        self._lock_score_template = lock_score_template

    @property
    def mime_type(self):
        """Gets the mime_type of this MediaAttachment.

        The mine type of the file

        :return: The mime_type of this MediaAttachment.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MediaAttachment.

        The mine type of the file

        :param mime_type: The mime_type of this MediaAttachment.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def revision(self):
        """Gets the revision of this MediaAttachment.

        An unique revision identifier of a score

        :return: The revision of this MediaAttachment.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this MediaAttachment.

        An unique revision identifier of a score

        :param revision: The revision of this MediaAttachment.
        :type revision: str
        """

        self._revision = revision

    @property
    def score(self):
        """Gets the score of this MediaAttachment.

        An unique Flat score identifier

        :return: The score of this MediaAttachment.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this MediaAttachment.

        An unique Flat score identifier

        :param score: The score of this MediaAttachment.
        :type score: str
        """

        self._score = score

    @property
    def sharing_mode(self):
        """Gets the sharing_mode of this MediaAttachment.


        :return: The sharing_mode of this MediaAttachment.
        :rtype: MediaScoreSharingMode
        """
        return self._sharing_mode

    @sharing_mode.setter
    def sharing_mode(self, sharing_mode):
        """Sets the sharing_mode of this MediaAttachment.


        :param sharing_mode: The sharing_mode of this MediaAttachment.
        :type sharing_mode: MediaScoreSharingMode
        """

        self._sharing_mode = sharing_mode

    @property
    def thumbnail_height(self):
        """Gets the thumbnail_height of this MediaAttachment.

        If the `thumbnailUrl` is available, the width of the thumbnail 

        :return: The thumbnail_height of this MediaAttachment.
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """Sets the thumbnail_height of this MediaAttachment.

        If the `thumbnailUrl` is available, the width of the thumbnail 

        :param thumbnail_height: The thumbnail_height of this MediaAttachment.
        :type thumbnail_height: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this MediaAttachment.

        If the attachment type is `rich`, `video`, `photo` or `link`, a displayable thumbnail for this attachment 

        :return: The thumbnail_url of this MediaAttachment.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this MediaAttachment.

        If the attachment type is `rich`, `video`, `photo` or `link`, a displayable thumbnail for this attachment 

        :param thumbnail_url: The thumbnail_url of this MediaAttachment.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def thumbnail_width(self):
        """Gets the thumbnail_width of this MediaAttachment.

        If the `thumbnailUrl` is available, the width of the thumbnail 

        :return: The thumbnail_width of this MediaAttachment.
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """Sets the thumbnail_width of this MediaAttachment.

        If the `thumbnailUrl` is available, the width of the thumbnail 

        :param thumbnail_width: The thumbnail_width of this MediaAttachment.
        :type thumbnail_width: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def title(self):
        """Gets the title of this MediaAttachment.

        The resolved title of the attachment

        :return: The title of this MediaAttachment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MediaAttachment.

        The resolved title of the attachment

        :param title: The title of this MediaAttachment.
        :type title: str
        """

        self._title = title

    @property
    def track(self):
        """Gets the track of this MediaAttachment.

        A unique track identifier

        :return: The track of this MediaAttachment.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this MediaAttachment.

        A unique track identifier

        :param track: The track of this MediaAttachment.
        :type track: str
        """

        self._track = track

    @property
    def type(self):
        """Gets the type of this MediaAttachment.

        The type of the assignment resolved: * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment. * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property. 

        :return: The type of this MediaAttachment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediaAttachment.

        The type of the assignment resolved: * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment. * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property. 

        :param type: The type of this MediaAttachment.
        :type type: str
        """
        allowed_values = ["rich", "photo", "video", "link", "flat", "googleDrive", "worksheet", "performance"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this MediaAttachment.

        The url of the attachment

        :return: The url of this MediaAttachment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaAttachment.

        The url of the attachment

        :param url: The url of this MediaAttachment.
        :type url: str
        """

        self._url = url

    @property
    def worksheet(self):
        """Gets the worksheet of this MediaAttachment.

        An unique worksheet identifier

        :return: The worksheet of this MediaAttachment.
        :rtype: str
        """
        return self._worksheet

    @worksheet.setter
    def worksheet(self, worksheet):
        """Sets the worksheet of this MediaAttachment.

        An unique worksheet identifier

        :param worksheet: The worksheet of this MediaAttachment.
        :type worksheet: str
        """

        self._worksheet = worksheet
