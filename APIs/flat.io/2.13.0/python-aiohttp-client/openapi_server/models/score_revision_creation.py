# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreRevisionCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autosave: bool=None, data: str=None, data_encoding: str=None, description: str=None):
        """ScoreRevisionCreation - a model defined in OpenAPI

        :param autosave: The autosave of this ScoreRevisionCreation.
        :param data: The data of this ScoreRevisionCreation.
        :param data_encoding: The data_encoding of this ScoreRevisionCreation.
        :param description: The description of this ScoreRevisionCreation.
        """
        self.openapi_types = {
            'autosave': bool,
            'data': str,
            'data_encoding': str,
            'description': str
        }

        self.attribute_map = {
            'autosave': 'autosave',
            'data': 'data',
            'data_encoding': 'dataEncoding',
            'description': 'description'
        }

        self._autosave = autosave
        self._data = data
        self._data_encoding = data_encoding
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreRevisionCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreRevisionCreation of this ScoreRevisionCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autosave(self):
        """Gets the autosave of this ScoreRevisionCreation.

        Must be set to `true` if the revision was created automatically. 

        :return: The autosave of this ScoreRevisionCreation.
        :rtype: bool
        """
        return self._autosave

    @autosave.setter
    def autosave(self, autosave):
        """Sets the autosave of this ScoreRevisionCreation.

        Must be set to `true` if the revision was created automatically. 

        :param autosave: The autosave of this ScoreRevisionCreation.
        :type autosave: bool
        """

        self._autosave = autosave

    @property
    def data(self):
        """Gets the data of this ScoreRevisionCreation.

        The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file. Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request. 

        :return: The data of this ScoreRevisionCreation.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ScoreRevisionCreation.

        The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file. Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request. 

        :param data: The data of this ScoreRevisionCreation.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def data_encoding(self):
        """Gets the data_encoding of this ScoreRevisionCreation.

        The optional encoding of the score data. This property must match the encoding used for the `data` property.

        :return: The data_encoding of this ScoreRevisionCreation.
        :rtype: str
        """
        return self._data_encoding

    @data_encoding.setter
    def data_encoding(self, data_encoding):
        """Sets the data_encoding of this ScoreRevisionCreation.

        The optional encoding of the score data. This property must match the encoding used for the `data` property.

        :param data_encoding: The data_encoding of this ScoreRevisionCreation.
        :type data_encoding: str
        """
        allowed_values = ["base64"]  # noqa: E501
        if data_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `data_encoding` ({0}), must be one of {1}"
                .format(data_encoding, allowed_values)
            )

        self._data_encoding = data_encoding

    @property
    def description(self):
        """Gets the description of this ScoreRevisionCreation.

        A description associated to the revision

        :return: The description of this ScoreRevisionCreation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScoreRevisionCreation.

        A description associated to the revision

        :param description: The description of this ScoreRevisionCreation.
        :type description: str
        """

        self._description = description
