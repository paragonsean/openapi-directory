# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_submission_update_comments import AssignmentSubmissionUpdateComments
from openapi_server.models.class_attachment_creation import ClassAttachmentCreation
from openapi_server import util


class AssignmentSubmissionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[ClassAttachmentCreation]=None, comments: AssignmentSubmissionUpdateComments=None, draft_grade: float=None, grade: float=None, _return: bool=None, submit: bool=None):
        """AssignmentSubmissionUpdate - a model defined in OpenAPI

        :param attachments: The attachments of this AssignmentSubmissionUpdate.
        :param comments: The comments of this AssignmentSubmissionUpdate.
        :param draft_grade: The draft_grade of this AssignmentSubmissionUpdate.
        :param grade: The grade of this AssignmentSubmissionUpdate.
        :param _return: The _return of this AssignmentSubmissionUpdate.
        :param submit: The submit of this AssignmentSubmissionUpdate.
        """
        self.openapi_types = {
            'attachments': List[ClassAttachmentCreation],
            'comments': AssignmentSubmissionUpdateComments,
            'draft_grade': float,
            'grade': float,
            '_return': bool,
            'submit': bool
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'comments': 'comments',
            'draft_grade': 'draftGrade',
            'grade': 'grade',
            '_return': 'return',
            'submit': 'submit'
        }

        self._attachments = attachments
        self._comments = comments
        self._draft_grade = draft_grade
        self._grade = grade
        self.__return = _return
        self._submit = submit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentSubmissionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentSubmissionUpdate of this AssignmentSubmissionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this AssignmentSubmissionUpdate.


        :return: The attachments of this AssignmentSubmissionUpdate.
        :rtype: List[ClassAttachmentCreation]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AssignmentSubmissionUpdate.


        :param attachments: The attachments of this AssignmentSubmissionUpdate.
        :type attachments: List[ClassAttachmentCreation]
        """

        self._attachments = attachments

    @property
    def comments(self):
        """Gets the comments of this AssignmentSubmissionUpdate.


        :return: The comments of this AssignmentSubmissionUpdate.
        :rtype: AssignmentSubmissionUpdateComments
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AssignmentSubmissionUpdate.


        :param comments: The comments of this AssignmentSubmissionUpdate.
        :type comments: AssignmentSubmissionUpdateComments
        """

        self._comments = comments

    @property
    def draft_grade(self):
        """Gets the draft_grade of this AssignmentSubmissionUpdate.

        Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission

        :return: The draft_grade of this AssignmentSubmissionUpdate.
        :rtype: float
        """
        return self._draft_grade

    @draft_grade.setter
    def draft_grade(self, draft_grade):
        """Sets the draft_grade of this AssignmentSubmissionUpdate.

        Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission

        :param draft_grade: The draft_grade of this AssignmentSubmissionUpdate.
        :type draft_grade: float
        """
        if draft_grade is not None and draft_grade > 100:
            raise ValueError("Invalid value for `draft_grade`, must be a value less than or equal to `100`")
        if draft_grade is not None and draft_grade < 0:
            raise ValueError("Invalid value for `draft_grade`, must be a value greater than or equal to `0`")

        self._draft_grade = draft_grade

    @property
    def grade(self):
        """Gets the grade of this AssignmentSubmissionUpdate.

        Optional grade. If unset, no grade was set.

        :return: The grade of this AssignmentSubmissionUpdate.
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this AssignmentSubmissionUpdate.

        Optional grade. If unset, no grade was set.

        :param grade: The grade of this AssignmentSubmissionUpdate.
        :type grade: float
        """
        if grade is not None and grade > 100:
            raise ValueError("Invalid value for `grade`, must be a value less than or equal to `100`")
        if grade is not None and grade < 0:
            raise ValueError("Invalid value for `grade`, must be a value greater than or equal to `0`")

        self._grade = grade

    @property
    def _return(self):
        """Gets the _return of this AssignmentSubmissionUpdate.

        If `true`, the submission will be marked as done

        :return: The _return of this AssignmentSubmissionUpdate.
        :rtype: bool
        """
        return self.__return

    @_return.setter
    def _return(self, _return):
        """Sets the _return of this AssignmentSubmissionUpdate.

        If `true`, the submission will be marked as done

        :param _return: The _return of this AssignmentSubmissionUpdate.
        :type _return: bool
        """

        self.__return = _return

    @property
    def submit(self):
        """Gets the submit of this AssignmentSubmissionUpdate.

        If `true`, the submission will be marked as done

        :return: The submit of this AssignmentSubmissionUpdate.
        :rtype: bool
        """
        return self._submit

    @submit.setter
    def submit(self, submit):
        """Sets the submit of this AssignmentSubmissionUpdate.

        If `true`, the submission will be marked as done

        :param submit: The submit of this AssignmentSubmissionUpdate.
        :type submit: bool
        """

        self._submit = submit
