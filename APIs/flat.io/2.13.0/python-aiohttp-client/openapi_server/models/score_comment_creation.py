# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_comment_context import ScoreCommentContext
from openapi_server import util


class ScoreCommentCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, context: ScoreCommentContext=None, mentions: List[str]=None, raw_comment: str=None, reply_to: str=None, revision: str=None):
        """ScoreCommentCreation - a model defined in OpenAPI

        :param comment: The comment of this ScoreCommentCreation.
        :param context: The context of this ScoreCommentCreation.
        :param mentions: The mentions of this ScoreCommentCreation.
        :param raw_comment: The raw_comment of this ScoreCommentCreation.
        :param reply_to: The reply_to of this ScoreCommentCreation.
        :param revision: The revision of this ScoreCommentCreation.
        """
        self.openapi_types = {
            'comment': str,
            'context': ScoreCommentContext,
            'mentions': List[str],
            'raw_comment': str,
            'reply_to': str,
            'revision': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'context': 'context',
            'mentions': 'mentions',
            'raw_comment': 'rawComment',
            'reply_to': 'replyTo',
            'revision': 'revision'
        }

        self._comment = comment
        self._context = context
        self._mentions = mentions
        self._raw_comment = raw_comment
        self._reply_to = reply_to
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreCommentCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreCommentCreation of this ScoreCommentCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this ScoreCommentCreation.

        The comment text that can includes mentions using the following format: `@[id:username]`. 

        :return: The comment of this ScoreCommentCreation.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ScoreCommentCreation.

        The comment text that can includes mentions using the following format: `@[id:username]`. 

        :param comment: The comment of this ScoreCommentCreation.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def context(self):
        """Gets the context of this ScoreCommentCreation.


        :return: The context of this ScoreCommentCreation.
        :rtype: ScoreCommentContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ScoreCommentCreation.


        :param context: The context of this ScoreCommentCreation.
        :type context: ScoreCommentContext
        """

        self._context = context

    @property
    def mentions(self):
        """Gets the mentions of this ScoreCommentCreation.

        The list of user identifiers mentioned in this comment

        :return: The mentions of this ScoreCommentCreation.
        :rtype: List[str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this ScoreCommentCreation.

        The list of user identifiers mentioned in this comment

        :param mentions: The mentions of this ScoreCommentCreation.
        :type mentions: List[str]
        """

        self._mentions = mentions

    @property
    def raw_comment(self):
        """Gets the raw_comment of this ScoreCommentCreation.

        A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set. 

        :return: The raw_comment of this ScoreCommentCreation.
        :rtype: str
        """
        return self._raw_comment

    @raw_comment.setter
    def raw_comment(self, raw_comment):
        """Sets the raw_comment of this ScoreCommentCreation.

        A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set. 

        :param raw_comment: The raw_comment of this ScoreCommentCreation.
        :type raw_comment: str
        """

        self._raw_comment = raw_comment

    @property
    def reply_to(self):
        """Gets the reply_to of this ScoreCommentCreation.

        When the comment is a reply to another comment, the unique identifier of the parent comment 

        :return: The reply_to of this ScoreCommentCreation.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this ScoreCommentCreation.

        When the comment is a reply to another comment, the unique identifier of the parent comment 

        :param reply_to: The reply_to of this ScoreCommentCreation.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def revision(self):
        """Gets the revision of this ScoreCommentCreation.

        The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \"last\", the API will automatically take the last revision created. 

        :return: The revision of this ScoreCommentCreation.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ScoreCommentCreation.

        The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \"last\", the API will automatically take the last revision created. 

        :param revision: The revision of this ScoreCommentCreation.
        :type revision: str
        """

        self._revision = revision
