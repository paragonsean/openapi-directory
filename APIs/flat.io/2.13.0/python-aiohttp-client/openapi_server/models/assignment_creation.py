# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_creation_google_classroom import AssignmentCreationGoogleClassroom
from openapi_server.models.assignment_creation_microsoft_graph import AssignmentCreationMicrosoftGraph
from openapi_server.models.assignment_type import AssignmentType
from openapi_server.models.class_attachment_creation import ClassAttachmentCreation
from openapi_server import util


class AssignmentCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_students: List[str]=None, assignee_mode: str=None, attachments: List[ClassAttachmentCreation]=None, cover: str=None, cover_file: str=None, description: str=None, due_date: datetime=None, google_classroom: AssignmentCreationGoogleClassroom=None, max_points: float=None, microsoft_graph: AssignmentCreationMicrosoftGraph=None, nb_playback_authorized: float=None, scheduled_date: datetime=None, state: str=None, title: str=None, toolset: str=None, type: AssignmentType=None):
        """AssignmentCreation - a model defined in OpenAPI

        :param assigned_students: The assigned_students of this AssignmentCreation.
        :param assignee_mode: The assignee_mode of this AssignmentCreation.
        :param attachments: The attachments of this AssignmentCreation.
        :param cover: The cover of this AssignmentCreation.
        :param cover_file: The cover_file of this AssignmentCreation.
        :param description: The description of this AssignmentCreation.
        :param due_date: The due_date of this AssignmentCreation.
        :param google_classroom: The google_classroom of this AssignmentCreation.
        :param max_points: The max_points of this AssignmentCreation.
        :param microsoft_graph: The microsoft_graph of this AssignmentCreation.
        :param nb_playback_authorized: The nb_playback_authorized of this AssignmentCreation.
        :param scheduled_date: The scheduled_date of this AssignmentCreation.
        :param state: The state of this AssignmentCreation.
        :param title: The title of this AssignmentCreation.
        :param toolset: The toolset of this AssignmentCreation.
        :param type: The type of this AssignmentCreation.
        """
        self.openapi_types = {
            'assigned_students': List[str],
            'assignee_mode': str,
            'attachments': List[ClassAttachmentCreation],
            'cover': str,
            'cover_file': str,
            'description': str,
            'due_date': datetime,
            'google_classroom': AssignmentCreationGoogleClassroom,
            'max_points': float,
            'microsoft_graph': AssignmentCreationMicrosoftGraph,
            'nb_playback_authorized': float,
            'scheduled_date': datetime,
            'state': str,
            'title': str,
            'toolset': str,
            'type': AssignmentType
        }

        self.attribute_map = {
            'assigned_students': 'assignedStudents',
            'assignee_mode': 'assigneeMode',
            'attachments': 'attachments',
            'cover': 'cover',
            'cover_file': 'coverFile',
            'description': 'description',
            'due_date': 'dueDate',
            'google_classroom': 'googleClassroom',
            'max_points': 'maxPoints',
            'microsoft_graph': 'microsoftGraph',
            'nb_playback_authorized': 'nbPlaybackAuthorized',
            'scheduled_date': 'scheduledDate',
            'state': 'state',
            'title': 'title',
            'toolset': 'toolset',
            'type': 'type'
        }

        self._assigned_students = assigned_students
        self._assignee_mode = assignee_mode
        self._attachments = attachments
        self._cover = cover
        self._cover_file = cover_file
        self._description = description
        self._due_date = due_date
        self._google_classroom = google_classroom
        self._max_points = max_points
        self._microsoft_graph = microsoft_graph
        self._nb_playback_authorized = nb_playback_authorized
        self._scheduled_date = scheduled_date
        self._state = state
        self._title = title
        self._toolset = toolset
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentCreation of this AssignmentCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_students(self):
        """Gets the assigned_students of this AssignmentCreation.

        Identifiers for the students that have access to the assignment

        :return: The assigned_students of this AssignmentCreation.
        :rtype: List[str]
        """
        return self._assigned_students

    @assigned_students.setter
    def assigned_students(self, assigned_students):
        """Sets the assigned_students of this AssignmentCreation.

        Identifiers for the students that have access to the assignment

        :param assigned_students: The assigned_students of this AssignmentCreation.
        :type assigned_students: List[str]
        """

        self._assigned_students = assigned_students

    @property
    def assignee_mode(self):
        """Gets the assignee_mode of this AssignmentCreation.

        Possible modes of assigning assignments

        :return: The assignee_mode of this AssignmentCreation.
        :rtype: str
        """
        return self._assignee_mode

    @assignee_mode.setter
    def assignee_mode(self, assignee_mode):
        """Sets the assignee_mode of this AssignmentCreation.

        Possible modes of assigning assignments

        :param assignee_mode: The assignee_mode of this AssignmentCreation.
        :type assignee_mode: str
        """
        allowed_values = ["everyone", "selected"]  # noqa: E501
        if assignee_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_mode` ({0}), must be one of {1}"
                .format(assignee_mode, allowed_values)
            )

        self._assignee_mode = assignee_mode

    @property
    def attachments(self):
        """Gets the attachments of this AssignmentCreation.


        :return: The attachments of this AssignmentCreation.
        :rtype: List[ClassAttachmentCreation]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AssignmentCreation.


        :param attachments: The attachments of this AssignmentCreation.
        :type attachments: List[ClassAttachmentCreation]
        """

        self._attachments = attachments

    @property
    def cover(self):
        """Gets the cover of this AssignmentCreation.

        The URL of the cover to display

        :return: The cover of this AssignmentCreation.
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this AssignmentCreation.

        The URL of the cover to display

        :param cover: The cover of this AssignmentCreation.
        :type cover: str
        """

        self._cover = cover

    @property
    def cover_file(self):
        """Gets the cover_file of this AssignmentCreation.

        The id of the cover to display

        :return: The cover_file of this AssignmentCreation.
        :rtype: str
        """
        return self._cover_file

    @cover_file.setter
    def cover_file(self, cover_file):
        """Sets the cover_file of this AssignmentCreation.

        The id of the cover to display

        :param cover_file: The cover_file of this AssignmentCreation.
        :type cover_file: str
        """

        self._cover_file = cover_file

    @property
    def description(self):
        """Gets the description of this AssignmentCreation.

        Description and content of the assignment

        :return: The description of this AssignmentCreation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssignmentCreation.

        Description and content of the assignment

        :param description: The description of this AssignmentCreation.
        :type description: str
        """

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this AssignmentCreation.

        The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date. 

        :return: The due_date of this AssignmentCreation.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this AssignmentCreation.

        The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date. 

        :param due_date: The due_date of this AssignmentCreation.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def google_classroom(self):
        """Gets the google_classroom of this AssignmentCreation.


        :return: The google_classroom of this AssignmentCreation.
        :rtype: AssignmentCreationGoogleClassroom
        """
        return self._google_classroom

    @google_classroom.setter
    def google_classroom(self, google_classroom):
        """Sets the google_classroom of this AssignmentCreation.


        :param google_classroom: The google_classroom of this AssignmentCreation.
        :type google_classroom: AssignmentCreationGoogleClassroom
        """

        self._google_classroom = google_classroom

    @property
    def max_points(self):
        """Gets the max_points of this AssignmentCreation.

        If set, the grading will be enabled for the assignement with this value as the maximum of points 

        :return: The max_points of this AssignmentCreation.
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this AssignmentCreation.

        If set, the grading will be enabled for the assignement with this value as the maximum of points 

        :param max_points: The max_points of this AssignmentCreation.
        :type max_points: float
        """
        if max_points is not None and max_points > 100:
            raise ValueError("Invalid value for `max_points`, must be a value less than or equal to `100`")
        if max_points is not None and max_points < 0:
            raise ValueError("Invalid value for `max_points`, must be a value greater than or equal to `0`")

        self._max_points = max_points

    @property
    def microsoft_graph(self):
        """Gets the microsoft_graph of this AssignmentCreation.


        :return: The microsoft_graph of this AssignmentCreation.
        :rtype: AssignmentCreationMicrosoftGraph
        """
        return self._microsoft_graph

    @microsoft_graph.setter
    def microsoft_graph(self, microsoft_graph):
        """Sets the microsoft_graph of this AssignmentCreation.


        :param microsoft_graph: The microsoft_graph of this AssignmentCreation.
        :type microsoft_graph: AssignmentCreationMicrosoftGraph
        """

        self._microsoft_graph = microsoft_graph

    @property
    def nb_playback_authorized(self):
        """Gets the nb_playback_authorized of this AssignmentCreation.

        The number of playback authorized on the scores of the assignment.

        :return: The nb_playback_authorized of this AssignmentCreation.
        :rtype: float
        """
        return self._nb_playback_authorized

    @nb_playback_authorized.setter
    def nb_playback_authorized(self, nb_playback_authorized):
        """Sets the nb_playback_authorized of this AssignmentCreation.

        The number of playback authorized on the scores of the assignment.

        :param nb_playback_authorized: The nb_playback_authorized of this AssignmentCreation.
        :type nb_playback_authorized: float
        """

        self._nb_playback_authorized = nb_playback_authorized

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this AssignmentCreation.

        The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. 

        :return: The scheduled_date of this AssignmentCreation.
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this AssignmentCreation.

        The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. 

        :param scheduled_date: The scheduled_date of this AssignmentCreation.
        :type scheduled_date: datetime
        """

        self._scheduled_date = scheduled_date

    @property
    def state(self):
        """Gets the state of this AssignmentCreation.

        State of the assignment

        :return: The state of this AssignmentCreation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AssignmentCreation.

        State of the assignment

        :param state: The state of this AssignmentCreation.
        :type state: str
        """
        allowed_values = ["draft", "active"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this AssignmentCreation.

        Title of the assignment

        :return: The title of this AssignmentCreation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AssignmentCreation.

        Title of the assignment

        :param title: The title of this AssignmentCreation.
        :type title: str
        """

        self._title = title

    @property
    def toolset(self):
        """Gets the toolset of this AssignmentCreation.

        The id of the associated toolset

        :return: The toolset of this AssignmentCreation.
        :rtype: str
        """
        return self._toolset

    @toolset.setter
    def toolset(self, toolset):
        """Sets the toolset of this AssignmentCreation.

        The id of the associated toolset

        :param toolset: The toolset of this AssignmentCreation.
        :type toolset: str
        """

        self._toolset = toolset

    @property
    def type(self):
        """Gets the type of this AssignmentCreation.


        :return: The type of this AssignmentCreation.
        :rtype: AssignmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssignmentCreation.


        :param type: The type of this AssignmentCreation.
        :type type: AssignmentType
        """

        self._type = type
