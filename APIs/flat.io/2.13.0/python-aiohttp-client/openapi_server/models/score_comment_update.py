# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_comment_context import ScoreCommentContext
from openapi_server import util


class ScoreCommentUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, context: ScoreCommentContext=None, raw_comment: str=None, revision: str=None):
        """ScoreCommentUpdate - a model defined in OpenAPI

        :param comment: The comment of this ScoreCommentUpdate.
        :param context: The context of this ScoreCommentUpdate.
        :param raw_comment: The raw_comment of this ScoreCommentUpdate.
        :param revision: The revision of this ScoreCommentUpdate.
        """
        self.openapi_types = {
            'comment': str,
            'context': ScoreCommentContext,
            'raw_comment': str,
            'revision': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'context': 'context',
            'raw_comment': 'rawComment',
            'revision': 'revision'
        }

        self._comment = comment
        self._context = context
        self._raw_comment = raw_comment
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreCommentUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreCommentUpdate of this ScoreCommentUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this ScoreCommentUpdate.

        The comment text that can includes mentions using the following format: `@[id:username]`. 

        :return: The comment of this ScoreCommentUpdate.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ScoreCommentUpdate.

        The comment text that can includes mentions using the following format: `@[id:username]`. 

        :param comment: The comment of this ScoreCommentUpdate.
        :type comment: str
        """
        if comment is not None and len(comment) > 10000:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `10000`")
        if comment is not None and len(comment) < 1:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `1`")

        self._comment = comment

    @property
    def context(self):
        """Gets the context of this ScoreCommentUpdate.


        :return: The context of this ScoreCommentUpdate.
        :rtype: ScoreCommentContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ScoreCommentUpdate.


        :param context: The context of this ScoreCommentUpdate.
        :type context: ScoreCommentContext
        """

        self._context = context

    @property
    def raw_comment(self):
        """Gets the raw_comment of this ScoreCommentUpdate.

        A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set. 

        :return: The raw_comment of this ScoreCommentUpdate.
        :rtype: str
        """
        return self._raw_comment

    @raw_comment.setter
    def raw_comment(self, raw_comment):
        """Sets the raw_comment of this ScoreCommentUpdate.

        A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set. 

        :param raw_comment: The raw_comment of this ScoreCommentUpdate.
        :type raw_comment: str
        """
        if raw_comment is not None and len(raw_comment) > 10000:
            raise ValueError("Invalid value for `raw_comment`, length must be less than or equal to `10000`")
        if raw_comment is not None and len(raw_comment) < 1:
            raise ValueError("Invalid value for `raw_comment`, length must be greater than or equal to `1`")

        self._raw_comment = raw_comment

    @property
    def revision(self):
        """Gets the revision of this ScoreCommentUpdate.

        The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \"last\", the API will automatically take the last revision created. 

        :return: The revision of this ScoreCommentUpdate.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ScoreCommentUpdate.

        The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \"last\", the API will automatically take the last revision created. 

        :param revision: The revision of this ScoreCommentUpdate.
        :type revision: str
        """

        self._revision = revision
