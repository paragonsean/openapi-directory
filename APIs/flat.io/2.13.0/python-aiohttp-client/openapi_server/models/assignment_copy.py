# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignmentCopy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: str=None, classroom: str=None, scheduled_date: datetime=None):
        """AssignmentCopy - a model defined in OpenAPI

        :param assignment: The assignment of this AssignmentCopy.
        :param classroom: The classroom of this AssignmentCopy.
        :param scheduled_date: The scheduled_date of this AssignmentCopy.
        """
        self.openapi_types = {
            'assignment': str,
            'classroom': str,
            'scheduled_date': datetime
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'classroom': 'classroom',
            'scheduled_date': 'scheduledDate'
        }

        self._assignment = assignment
        self._classroom = classroom
        self._scheduled_date = scheduled_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentCopy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentCopy of this AssignmentCopy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this AssignmentCopy.

        An optional destination assignment where the original assignement will be copied. Must be a draft.

        :return: The assignment of this AssignmentCopy.
        :rtype: str
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this AssignmentCopy.

        An optional destination assignment where the original assignement will be copied. Must be a draft.

        :param assignment: The assignment of this AssignmentCopy.
        :type assignment: str
        """

        self._assignment = assignment

    @property
    def classroom(self):
        """Gets the classroom of this AssignmentCopy.

        The destination classroom where the assignment will be copied

        :return: The classroom of this AssignmentCopy.
        :rtype: str
        """
        return self._classroom

    @classroom.setter
    def classroom(self, classroom):
        """Sets the classroom of this AssignmentCopy.

        The destination classroom where the assignment will be copied

        :param classroom: The classroom of this AssignmentCopy.
        :type classroom: str
        """

        self._classroom = classroom

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this AssignmentCopy.

        The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. Alternatively the existing `scheduledDate` from the copied assignment will be used. 

        :return: The scheduled_date of this AssignmentCopy.
        :rtype: datetime
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this AssignmentCopy.

        The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. Alternatively the existing `scheduledDate` from the copied assignment will be used. 

        :param scheduled_date: The scheduled_date of this AssignmentCopy.
        :type scheduled_date: datetime
        """

        self._scheduled_date = scheduled_date
