# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_type import GroupType
from openapi_server import util


class GroupDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, id: str=None, name: str=None, organization: str=None, read_only: bool=None, type: GroupType=None, users_count: float=None):
        """GroupDetails - a model defined in OpenAPI

        :param creation_date: The creation_date of this GroupDetails.
        :param id: The id of this GroupDetails.
        :param name: The name of this GroupDetails.
        :param organization: The organization of this GroupDetails.
        :param read_only: The read_only of this GroupDetails.
        :param type: The type of this GroupDetails.
        :param users_count: The users_count of this GroupDetails.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'id': str,
            'name': str,
            'organization': str,
            'read_only': bool,
            'type': GroupType,
            'users_count': float
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'id': 'id',
            'name': 'name',
            'organization': 'organization',
            'read_only': 'readOnly',
            'type': 'type',
            'users_count': 'usersCount'
        }

        self._creation_date = creation_date
        self._id = id
        self._name = name
        self._organization = organization
        self._read_only = read_only
        self._type = type
        self._users_count = users_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupDetails of this GroupDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this GroupDetails.

        The date when the group was create

        :return: The creation_date of this GroupDetails.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GroupDetails.

        The date when the group was create

        :param creation_date: The creation_date of this GroupDetails.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this GroupDetails.

        The unique identifier of the group

        :return: The id of this GroupDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupDetails.

        The unique identifier of the group

        :param id: The id of this GroupDetails.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GroupDetails.

        The displayable name of the group

        :return: The name of this GroupDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupDetails.

        The displayable name of the group

        :param name: The name of this GroupDetails.
        :type name: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this GroupDetails.

        The unique identifier of the Organization owning the group

        :return: The organization of this GroupDetails.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this GroupDetails.

        The unique identifier of the Organization owning the group

        :param organization: The organization of this GroupDetails.
        :type organization: str
        """

        self._organization = organization

    @property
    def read_only(self):
        """Gets the read_only of this GroupDetails.

        `true` if the properties and members of this group are in in read-only 

        :return: The read_only of this GroupDetails.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this GroupDetails.

        `true` if the properties and members of this group are in in read-only 

        :param read_only: The read_only of this GroupDetails.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def type(self):
        """Gets the type of this GroupDetails.


        :return: The type of this GroupDetails.
        :rtype: GroupType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupDetails.


        :param type: The type of this GroupDetails.
        :type type: GroupType
        """

        self._type = type

    @property
    def users_count(self):
        """Gets the users_count of this GroupDetails.

        The number of students in this group

        :return: The users_count of this GroupDetails.
        :rtype: float
        """
        return self._users_count

    @users_count.setter
    def users_count(self, users_count):
        """Sets the users_count of this GroupDetails.

        The number of students in this group

        :param users_count: The users_count of this GroupDetails.
        :type users_count: float
        """

        self._users_count = users_count
