# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionCapabilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_add_scores: bool=None, can_delete: bool=None, can_delete_scores: bool=None, can_edit: bool=None, can_share: bool=None):
        """CollectionCapabilities - a model defined in OpenAPI

        :param can_add_scores: The can_add_scores of this CollectionCapabilities.
        :param can_delete: The can_delete of this CollectionCapabilities.
        :param can_delete_scores: The can_delete_scores of this CollectionCapabilities.
        :param can_edit: The can_edit of this CollectionCapabilities.
        :param can_share: The can_share of this CollectionCapabilities.
        """
        self.openapi_types = {
            'can_add_scores': bool,
            'can_delete': bool,
            'can_delete_scores': bool,
            'can_edit': bool,
            'can_share': bool
        }

        self.attribute_map = {
            'can_add_scores': 'canAddScores',
            'can_delete': 'canDelete',
            'can_delete_scores': 'canDeleteScores',
            'can_edit': 'canEdit',
            'can_share': 'canShare'
        }

        self._can_add_scores = can_add_scores
        self._can_delete = can_delete
        self._can_delete_scores = can_delete_scores
        self._can_edit = can_edit
        self._can_share = can_share

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionCapabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection_capabilities of this CollectionCapabilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_add_scores(self):
        """Gets the can_add_scores of this CollectionCapabilities.

        Whether the current user can add scores to the collection  If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score. 

        :return: The can_add_scores of this CollectionCapabilities.
        :rtype: bool
        """
        return self._can_add_scores

    @can_add_scores.setter
    def can_add_scores(self, can_add_scores):
        """Sets the can_add_scores of this CollectionCapabilities.

        Whether the current user can add scores to the collection  If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score. 

        :param can_add_scores: The can_add_scores of this CollectionCapabilities.
        :type can_add_scores: bool
        """

        self._can_add_scores = can_add_scores

    @property
    def can_delete(self):
        """Gets the can_delete of this CollectionCapabilities.

        Whether the current user can delete the collection 

        :return: The can_delete of this CollectionCapabilities.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this CollectionCapabilities.

        Whether the current user can delete the collection 

        :param can_delete: The can_delete of this CollectionCapabilities.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_delete_scores(self):
        """Gets the can_delete_scores of this CollectionCapabilities.

        Whether the current user can delete scores from the collection  If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score. 

        :return: The can_delete_scores of this CollectionCapabilities.
        :rtype: bool
        """
        return self._can_delete_scores

    @can_delete_scores.setter
    def can_delete_scores(self, can_delete_scores):
        """Sets the can_delete_scores of this CollectionCapabilities.

        Whether the current user can delete scores from the collection  If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score. 

        :param can_delete_scores: The can_delete_scores of this CollectionCapabilities.
        :type can_delete_scores: bool
        """

        self._can_delete_scores = can_delete_scores

    @property
    def can_edit(self):
        """Gets the can_edit of this CollectionCapabilities.

        Whether the current user can modify the metadata for the collection 

        :return: The can_edit of this CollectionCapabilities.
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this CollectionCapabilities.

        Whether the current user can modify the metadata for the collection 

        :param can_edit: The can_edit of this CollectionCapabilities.
        :type can_edit: bool
        """

        self._can_edit = can_edit

    @property
    def can_share(self):
        """Gets the can_share of this CollectionCapabilities.

        Whether the current user can modify the sharing settings for the collection 

        :return: The can_share of this CollectionCapabilities.
        :rtype: bool
        """
        return self._can_share

    @can_share.setter
    def can_share(self, can_share):
        """Sets the can_share of this CollectionCapabilities.

        Whether the current user can modify the sharing settings for the collection 

        :param can_share: The can_share of this CollectionCapabilities.
        :type can_share: bool
        """

        self._can_share = can_share
