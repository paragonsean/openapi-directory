# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_roles import OrganizationRoles
from openapi_server import util


class OrganizationInvitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_code: str=None, email: str=None, id: str=None, invited_by: str=None, organization: str=None, organization_role: OrganizationRoles=None, used_by: str=None):
        """OrganizationInvitation - a model defined in OpenAPI

        :param custom_code: The custom_code of this OrganizationInvitation.
        :param email: The email of this OrganizationInvitation.
        :param id: The id of this OrganizationInvitation.
        :param invited_by: The invited_by of this OrganizationInvitation.
        :param organization: The organization of this OrganizationInvitation.
        :param organization_role: The organization_role of this OrganizationInvitation.
        :param used_by: The used_by of this OrganizationInvitation.
        """
        self.openapi_types = {
            'custom_code': str,
            'email': str,
            'id': str,
            'invited_by': str,
            'organization': str,
            'organization_role': OrganizationRoles,
            'used_by': str
        }

        self.attribute_map = {
            'custom_code': 'customCode',
            'email': 'email',
            'id': 'id',
            'invited_by': 'invitedBy',
            'organization': 'organization',
            'organization_role': 'organizationRole',
            'used_by': 'usedBy'
        }

        self._custom_code = custom_code
        self._email = email
        self._id = id
        self._invited_by = invited_by
        self._organization = organization
        self._organization_role = organization_role
        self._used_by = used_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationInvitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationInvitation of this OrganizationInvitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_code(self):
        """Gets the custom_code of this OrganizationInvitation.

        Enrollment code to use when joining this organization

        :return: The custom_code of this OrganizationInvitation.
        :rtype: str
        """
        return self._custom_code

    @custom_code.setter
    def custom_code(self, custom_code):
        """Sets the custom_code of this OrganizationInvitation.

        Enrollment code to use when joining this organization

        :param custom_code: The custom_code of this OrganizationInvitation.
        :type custom_code: str
        """

        self._custom_code = custom_code

    @property
    def email(self):
        """Gets the email of this OrganizationInvitation.

        The email address this invitation was sent to

        :return: The email of this OrganizationInvitation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationInvitation.

        The email address this invitation was sent to

        :param email: The email of this OrganizationInvitation.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this OrganizationInvitation.

        The invitation unique identifier

        :return: The id of this OrganizationInvitation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationInvitation.

        The invitation unique identifier

        :param id: The id of this OrganizationInvitation.
        :type id: str
        """

        self._id = id

    @property
    def invited_by(self):
        """Gets the invited_by of this OrganizationInvitation.

        The unique identifier of the User who created this invitation

        :return: The invited_by of this OrganizationInvitation.
        :rtype: str
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this OrganizationInvitation.

        The unique identifier of the User who created this invitation

        :param invited_by: The invited_by of this OrganizationInvitation.
        :type invited_by: str
        """

        self._invited_by = invited_by

    @property
    def organization(self):
        """Gets the organization of this OrganizationInvitation.

        The unique identifier of the Organization owning this class

        :return: The organization of this OrganizationInvitation.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrganizationInvitation.

        The unique identifier of the Organization owning this class

        :param organization: The organization of this OrganizationInvitation.
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_role(self):
        """Gets the organization_role of this OrganizationInvitation.


        :return: The organization_role of this OrganizationInvitation.
        :rtype: OrganizationRoles
        """
        return self._organization_role

    @organization_role.setter
    def organization_role(self, organization_role):
        """Sets the organization_role of this OrganizationInvitation.


        :param organization_role: The organization_role of this OrganizationInvitation.
        :type organization_role: OrganizationRoles
        """

        self._organization_role = organization_role

    @property
    def used_by(self):
        """Gets the used_by of this OrganizationInvitation.

        The unique identifier of the User who used this invitation

        :return: The used_by of this OrganizationInvitation.
        :rtype: str
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this OrganizationInvitation.

        The unique identifier of the User who used this invitation

        :param used_by: The used_by of this OrganizationInvitation.
        :type used_by: str
        """

        self._used_by = used_by
