# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_score_sharing_mode import MediaScoreSharingMode
from openapi_server import util


class ClassAttachmentCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, google_drive_file_id: str=None, lock_score_template: bool=None, score: str=None, sharing_mode: MediaScoreSharingMode=MediaScoreSharingMode.READ, type: str=None, url: str=None, worksheet: str=None):
        """ClassAttachmentCreation - a model defined in OpenAPI

        :param google_drive_file_id: The google_drive_file_id of this ClassAttachmentCreation.
        :param lock_score_template: The lock_score_template of this ClassAttachmentCreation.
        :param score: The score of this ClassAttachmentCreation.
        :param sharing_mode: The sharing_mode of this ClassAttachmentCreation.
        :param type: The type of this ClassAttachmentCreation.
        :param url: The url of this ClassAttachmentCreation.
        :param worksheet: The worksheet of this ClassAttachmentCreation.
        """
        self.openapi_types = {
            'google_drive_file_id': str,
            'lock_score_template': bool,
            'score': str,
            'sharing_mode': MediaScoreSharingMode,
            'type': str,
            'url': str,
            'worksheet': str
        }

        self.attribute_map = {
            'google_drive_file_id': 'googleDriveFileId',
            'lock_score_template': 'lockScoreTemplate',
            'score': 'score',
            'sharing_mode': 'sharingMode',
            'type': 'type',
            'url': 'url',
            'worksheet': 'worksheet'
        }

        self._google_drive_file_id = google_drive_file_id
        self._lock_score_template = lock_score_template
        self._score = score
        self._sharing_mode = sharing_mode
        self._type = type
        self._url = url
        self._worksheet = worksheet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassAttachmentCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClassAttachmentCreation of this ClassAttachmentCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def google_drive_file_id(self):
        """Gets the google_drive_file_id of this ClassAttachmentCreation.

        The ID of the Google Drive File

        :return: The google_drive_file_id of this ClassAttachmentCreation.
        :rtype: str
        """
        return self._google_drive_file_id

    @google_drive_file_id.setter
    def google_drive_file_id(self, google_drive_file_id):
        """Sets the google_drive_file_id of this ClassAttachmentCreation.

        The ID of the Google Drive File

        :param google_drive_file_id: The google_drive_file_id of this ClassAttachmentCreation.
        :type google_drive_file_id: str
        """

        self._google_drive_file_id = google_drive_file_id

    @property
    def lock_score_template(self):
        """Gets the lock_score_template of this ClassAttachmentCreation.

        To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.

        :return: The lock_score_template of this ClassAttachmentCreation.
        :rtype: bool
        """
        return self._lock_score_template

    @lock_score_template.setter
    def lock_score_template(self, lock_score_template):
        """Sets the lock_score_template of this ClassAttachmentCreation.

        To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.

        :param lock_score_template: The lock_score_template of this ClassAttachmentCreation.
        :type lock_score_template: bool
        """

        self._lock_score_template = lock_score_template

    @property
    def score(self):
        """Gets the score of this ClassAttachmentCreation.

        A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the teachers and students of the class. 

        :return: The score of this ClassAttachmentCreation.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ClassAttachmentCreation.

        A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the teachers and students of the class. 

        :param score: The score of this ClassAttachmentCreation.
        :type score: str
        """

        self._score = score

    @property
    def sharing_mode(self):
        """Gets the sharing_mode of this ClassAttachmentCreation.


        :return: The sharing_mode of this ClassAttachmentCreation.
        :rtype: MediaScoreSharingMode
        """
        return self._sharing_mode

    @sharing_mode.setter
    def sharing_mode(self, sharing_mode):
        """Sets the sharing_mode of this ClassAttachmentCreation.


        :param sharing_mode: The sharing_mode of this ClassAttachmentCreation.
        :type sharing_mode: MediaScoreSharingMode
        """

        self._sharing_mode = sharing_mode

    @property
    def type(self):
        """Gets the type of this ClassAttachmentCreation.

        The type of the attachment posted

        :return: The type of this ClassAttachmentCreation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClassAttachmentCreation.

        The type of the attachment posted

        :param type: The type of this ClassAttachmentCreation.
        :type type: str
        """
        allowed_values = ["flat", "link", "googleDrive", "worksheet"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this ClassAttachmentCreation.

        The URL of the attachment.

        :return: The url of this ClassAttachmentCreation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ClassAttachmentCreation.

        The URL of the attachment.

        :param url: The url of this ClassAttachmentCreation.
        :type url: str
        """

        self._url = url

    @property
    def worksheet(self):
        """Gets the worksheet of this ClassAttachmentCreation.

        An unique worksheet identifier

        :return: The worksheet of this ClassAttachmentCreation.
        :rtype: str
        """
        return self._worksheet

    @worksheet.setter
    def worksheet(self, worksheet):
        """Sets the worksheet of this ClassAttachmentCreation.

        An unique worksheet identifier

        :param worksheet: The worksheet of this ClassAttachmentCreation.
        :type worksheet: str
        """

        self._worksheet = worksheet
