# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_collaborator import ResourceCollaborator
from openapi_server.models.resource_rights import ResourceRights
from openapi_server.models.score_comments_counts import ScoreCommentsCounts
from openapi_server.models.score_creation_type import ScoreCreationType
from openapi_server.models.score_license import ScoreLicense
from openapi_server.models.score_likes_counts import ScoreLikesCounts
from openapi_server.models.score_plays_counts import ScorePlaysCounts
from openapi_server.models.score_privacy import ScorePrivacy
from openapi_server.models.score_views_counts import ScoreViewsCounts
from openapi_server.models.user_public_summary import UserPublicSummary
from openapi_server import util


class ScoreDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_url: str=None, id: str=None, privacy: ScorePrivacy=None, sharing_key: str=None, title: str=None, user: UserPublicSummary=None, arranger: str=None, collaborators: List[ResourceCollaborator]=None, collections: List[str]=None, comments: ScoreCommentsCounts=None, composer: str=None, creation_date: datetime=None, creation_type: ScoreCreationType=None, description: str=None, duration_time: float=None, google_drive_file_id: str=None, instruments: List[str]=None, license: ScoreLicense=None, license_text: str=None, likes: ScoreLikesCounts=None, lyricist: str=None, main_tempo_qpm: float=None, modification_date: datetime=None, number_measures: int=None, organization: str=None, parent_score: str=None, plays: ScorePlaysCounts=None, publication_date: datetime=None, rights: ResourceRights=None, samples: List[str]=None, subtitle: str=None, tags: List[str]=None, views: ScoreViewsCounts=None):
        """ScoreDetails - a model defined in OpenAPI

        :param html_url: The html_url of this ScoreDetails.
        :param id: The id of this ScoreDetails.
        :param privacy: The privacy of this ScoreDetails.
        :param sharing_key: The sharing_key of this ScoreDetails.
        :param title: The title of this ScoreDetails.
        :param user: The user of this ScoreDetails.
        :param arranger: The arranger of this ScoreDetails.
        :param collaborators: The collaborators of this ScoreDetails.
        :param collections: The collections of this ScoreDetails.
        :param comments: The comments of this ScoreDetails.
        :param composer: The composer of this ScoreDetails.
        :param creation_date: The creation_date of this ScoreDetails.
        :param creation_type: The creation_type of this ScoreDetails.
        :param description: The description of this ScoreDetails.
        :param duration_time: The duration_time of this ScoreDetails.
        :param google_drive_file_id: The google_drive_file_id of this ScoreDetails.
        :param instruments: The instruments of this ScoreDetails.
        :param license: The license of this ScoreDetails.
        :param license_text: The license_text of this ScoreDetails.
        :param likes: The likes of this ScoreDetails.
        :param lyricist: The lyricist of this ScoreDetails.
        :param main_tempo_qpm: The main_tempo_qpm of this ScoreDetails.
        :param modification_date: The modification_date of this ScoreDetails.
        :param number_measures: The number_measures of this ScoreDetails.
        :param organization: The organization of this ScoreDetails.
        :param parent_score: The parent_score of this ScoreDetails.
        :param plays: The plays of this ScoreDetails.
        :param publication_date: The publication_date of this ScoreDetails.
        :param rights: The rights of this ScoreDetails.
        :param samples: The samples of this ScoreDetails.
        :param subtitle: The subtitle of this ScoreDetails.
        :param tags: The tags of this ScoreDetails.
        :param views: The views of this ScoreDetails.
        """
        self.openapi_types = {
            'html_url': str,
            'id': str,
            'privacy': ScorePrivacy,
            'sharing_key': str,
            'title': str,
            'user': UserPublicSummary,
            'arranger': str,
            'collaborators': List[ResourceCollaborator],
            'collections': List[str],
            'comments': ScoreCommentsCounts,
            'composer': str,
            'creation_date': datetime,
            'creation_type': ScoreCreationType,
            'description': str,
            'duration_time': float,
            'google_drive_file_id': str,
            'instruments': List[str],
            'license': ScoreLicense,
            'license_text': str,
            'likes': ScoreLikesCounts,
            'lyricist': str,
            'main_tempo_qpm': float,
            'modification_date': datetime,
            'number_measures': int,
            'organization': str,
            'parent_score': str,
            'plays': ScorePlaysCounts,
            'publication_date': datetime,
            'rights': ResourceRights,
            'samples': List[str],
            'subtitle': str,
            'tags': List[str],
            'views': ScoreViewsCounts
        }

        self.attribute_map = {
            'html_url': 'htmlUrl',
            'id': 'id',
            'privacy': 'privacy',
            'sharing_key': 'sharingKey',
            'title': 'title',
            'user': 'user',
            'arranger': 'arranger',
            'collaborators': 'collaborators',
            'collections': 'collections',
            'comments': 'comments',
            'composer': 'composer',
            'creation_date': 'creationDate',
            'creation_type': 'creationType',
            'description': 'description',
            'duration_time': 'durationTime',
            'google_drive_file_id': 'googleDriveFileId',
            'instruments': 'instruments',
            'license': 'license',
            'license_text': 'licenseText',
            'likes': 'likes',
            'lyricist': 'lyricist',
            'main_tempo_qpm': 'mainTempoQpm',
            'modification_date': 'modificationDate',
            'number_measures': 'numberMeasures',
            'organization': 'organization',
            'parent_score': 'parentScore',
            'plays': 'plays',
            'publication_date': 'publicationDate',
            'rights': 'rights',
            'samples': 'samples',
            'subtitle': 'subtitle',
            'tags': 'tags',
            'views': 'views'
        }

        self._html_url = html_url
        self._id = id
        self._privacy = privacy
        self._sharing_key = sharing_key
        self._title = title
        self._user = user
        self._arranger = arranger
        self._collaborators = collaborators
        self._collections = collections
        self._comments = comments
        self._composer = composer
        self._creation_date = creation_date
        self._creation_type = creation_type
        self._description = description
        self._duration_time = duration_time
        self._google_drive_file_id = google_drive_file_id
        self._instruments = instruments
        self._license = license
        self._license_text = license_text
        self._likes = likes
        self._lyricist = lyricist
        self._main_tempo_qpm = main_tempo_qpm
        self._modification_date = modification_date
        self._number_measures = number_measures
        self._organization = organization
        self._parent_score = parent_score
        self._plays = plays
        self._publication_date = publication_date
        self._rights = rights
        self._samples = samples
        self._subtitle = subtitle
        self._tags = tags
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreDetails of this ScoreDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_url(self):
        """Gets the html_url of this ScoreDetails.

        The url where the score can be viewed in a web browser

        :return: The html_url of this ScoreDetails.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this ScoreDetails.

        The url where the score can be viewed in a web browser

        :param html_url: The html_url of this ScoreDetails.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this ScoreDetails.

        The unique identifier of the score

        :return: The id of this ScoreDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoreDetails.

        The unique identifier of the score

        :param id: The id of this ScoreDetails.
        :type id: str
        """

        self._id = id

    @property
    def privacy(self):
        """Gets the privacy of this ScoreDetails.


        :return: The privacy of this ScoreDetails.
        :rtype: ScorePrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ScoreDetails.


        :param privacy: The privacy of this ScoreDetails.
        :type privacy: ScorePrivacy
        """

        self._privacy = privacy

    @property
    def sharing_key(self):
        """Gets the sharing_key of this ScoreDetails.

        The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)

        :return: The sharing_key of this ScoreDetails.
        :rtype: str
        """
        return self._sharing_key

    @sharing_key.setter
    def sharing_key(self, sharing_key):
        """Sets the sharing_key of this ScoreDetails.

        The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)

        :param sharing_key: The sharing_key of this ScoreDetails.
        :type sharing_key: str
        """

        self._sharing_key = sharing_key

    @property
    def title(self):
        """Gets the title of this ScoreDetails.

        The title of the score

        :return: The title of this ScoreDetails.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoreDetails.

        The title of the score

        :param title: The title of this ScoreDetails.
        :type title: str
        """

        self._title = title

    @property
    def user(self):
        """Gets the user of this ScoreDetails.


        :return: The user of this ScoreDetails.
        :rtype: UserPublicSummary
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ScoreDetails.


        :param user: The user of this ScoreDetails.
        :type user: UserPublicSummary
        """

        self._user = user

    @property
    def arranger(self):
        """Gets the arranger of this ScoreDetails.

        Arranger of the score

        :return: The arranger of this ScoreDetails.
        :rtype: str
        """
        return self._arranger

    @arranger.setter
    def arranger(self, arranger):
        """Sets the arranger of this ScoreDetails.

        Arranger of the score

        :param arranger: The arranger of this ScoreDetails.
        :type arranger: str
        """

        self._arranger = arranger

    @property
    def collaborators(self):
        """Gets the collaborators of this ScoreDetails.

        The list of the collaborators of the score

        :return: The collaborators of this ScoreDetails.
        :rtype: List[ResourceCollaborator]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this ScoreDetails.

        The list of the collaborators of the score

        :param collaborators: The collaborators of this ScoreDetails.
        :type collaborators: List[ResourceCollaborator]
        """

        self._collaborators = collaborators

    @property
    def collections(self):
        """Gets the collections of this ScoreDetails.

        The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.

        :return: The collections of this ScoreDetails.
        :rtype: List[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this ScoreDetails.

        The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.

        :param collections: The collections of this ScoreDetails.
        :type collections: List[str]
        """

        self._collections = collections

    @property
    def comments(self):
        """Gets the comments of this ScoreDetails.


        :return: The comments of this ScoreDetails.
        :rtype: ScoreCommentsCounts
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ScoreDetails.


        :param comments: The comments of this ScoreDetails.
        :type comments: ScoreCommentsCounts
        """

        self._comments = comments

    @property
    def composer(self):
        """Gets the composer of this ScoreDetails.

        Composer of the score

        :return: The composer of this ScoreDetails.
        :rtype: str
        """
        return self._composer

    @composer.setter
    def composer(self, composer):
        """Sets the composer of this ScoreDetails.

        Composer of the score

        :param composer: The composer of this ScoreDetails.
        :type composer: str
        """

        self._composer = composer

    @property
    def creation_date(self):
        """Gets the creation_date of this ScoreDetails.

        The date when the score was created

        :return: The creation_date of this ScoreDetails.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ScoreDetails.

        The date when the score was created

        :param creation_date: The creation_date of this ScoreDetails.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_type(self):
        """Gets the creation_type of this ScoreDetails.


        :return: The creation_type of this ScoreDetails.
        :rtype: ScoreCreationType
        """
        return self._creation_type

    @creation_type.setter
    def creation_type(self, creation_type):
        """Sets the creation_type of this ScoreDetails.


        :param creation_type: The creation_type of this ScoreDetails.
        :type creation_type: ScoreCreationType
        """

        self._creation_type = creation_type

    @property
    def description(self):
        """Gets the description of this ScoreDetails.

        Description of the creation

        :return: The description of this ScoreDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScoreDetails.

        Description of the creation

        :param description: The description of this ScoreDetails.
        :type description: str
        """

        self._description = description

    @property
    def duration_time(self):
        """Gets the duration_time of this ScoreDetails.

        In seconds, an approximative duration of the score

        :return: The duration_time of this ScoreDetails.
        :rtype: float
        """
        return self._duration_time

    @duration_time.setter
    def duration_time(self, duration_time):
        """Sets the duration_time of this ScoreDetails.

        In seconds, an approximative duration of the score

        :param duration_time: The duration_time of this ScoreDetails.
        :type duration_time: float
        """

        self._duration_time = duration_time

    @property
    def google_drive_file_id(self):
        """Gets the google_drive_file_id of this ScoreDetails.

        If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}` 

        :return: The google_drive_file_id of this ScoreDetails.
        :rtype: str
        """
        return self._google_drive_file_id

    @google_drive_file_id.setter
    def google_drive_file_id(self, google_drive_file_id):
        """Sets the google_drive_file_id of this ScoreDetails.

        If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}` 

        :param google_drive_file_id: The google_drive_file_id of this ScoreDetails.
        :type google_drive_file_id: str
        """

        self._google_drive_file_id = google_drive_file_id

    @property
    def instruments(self):
        """Gets the instruments of this ScoreDetails.

        An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`. 

        :return: The instruments of this ScoreDetails.
        :rtype: List[str]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this ScoreDetails.

        An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`. 

        :param instruments: The instruments of this ScoreDetails.
        :type instruments: List[str]
        """

        self._instruments = instruments

    @property
    def license(self):
        """Gets the license of this ScoreDetails.


        :return: The license of this ScoreDetails.
        :rtype: ScoreLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ScoreDetails.


        :param license: The license of this ScoreDetails.
        :type license: ScoreLicense
        """

        self._license = license

    @property
    def license_text(self):
        """Gets the license_text of this ScoreDetails.

        Additional license text written on the exported/printed score

        :return: The license_text of this ScoreDetails.
        :rtype: str
        """
        return self._license_text

    @license_text.setter
    def license_text(self, license_text):
        """Sets the license_text of this ScoreDetails.

        Additional license text written on the exported/printed score

        :param license_text: The license_text of this ScoreDetails.
        :type license_text: str
        """

        self._license_text = license_text

    @property
    def likes(self):
        """Gets the likes of this ScoreDetails.


        :return: The likes of this ScoreDetails.
        :rtype: ScoreLikesCounts
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this ScoreDetails.


        :param likes: The likes of this ScoreDetails.
        :type likes: ScoreLikesCounts
        """

        self._likes = likes

    @property
    def lyricist(self):
        """Gets the lyricist of this ScoreDetails.

        Lyricist of the score

        :return: The lyricist of this ScoreDetails.
        :rtype: str
        """
        return self._lyricist

    @lyricist.setter
    def lyricist(self, lyricist):
        """Sets the lyricist of this ScoreDetails.

        Lyricist of the score

        :param lyricist: The lyricist of this ScoreDetails.
        :type lyricist: str
        """

        self._lyricist = lyricist

    @property
    def main_tempo_qpm(self):
        """Gets the main_tempo_qpm of this ScoreDetails.

        The main tempo of the score (in QPM)

        :return: The main_tempo_qpm of this ScoreDetails.
        :rtype: float
        """
        return self._main_tempo_qpm

    @main_tempo_qpm.setter
    def main_tempo_qpm(self, main_tempo_qpm):
        """Sets the main_tempo_qpm of this ScoreDetails.

        The main tempo of the score (in QPM)

        :param main_tempo_qpm: The main_tempo_qpm of this ScoreDetails.
        :type main_tempo_qpm: float
        """

        self._main_tempo_qpm = main_tempo_qpm

    @property
    def modification_date(self):
        """Gets the modification_date of this ScoreDetails.

        The date of the last revision of the score

        :return: The modification_date of this ScoreDetails.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ScoreDetails.

        The date of the last revision of the score

        :param modification_date: The modification_date of this ScoreDetails.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def number_measures(self):
        """Gets the number_measures of this ScoreDetails.

        The number of measures in the score

        :return: The number_measures of this ScoreDetails.
        :rtype: int
        """
        return self._number_measures

    @number_measures.setter
    def number_measures(self, number_measures):
        """Sets the number_measures of this ScoreDetails.

        The number of measures in the score

        :param number_measures: The number_measures of this ScoreDetails.
        :type number_measures: int
        """

        self._number_measures = number_measures

    @property
    def organization(self):
        """Gets the organization of this ScoreDetails.

        If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`. 

        :return: The organization of this ScoreDetails.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ScoreDetails.

        If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`. 

        :param organization: The organization of this ScoreDetails.
        :type organization: str
        """

        self._organization = organization

    @property
    def parent_score(self):
        """Gets the parent_score of this ScoreDetails.

        If the score has been forked, the unique identifier of the parent score. 

        :return: The parent_score of this ScoreDetails.
        :rtype: str
        """
        return self._parent_score

    @parent_score.setter
    def parent_score(self, parent_score):
        """Sets the parent_score of this ScoreDetails.

        If the score has been forked, the unique identifier of the parent score. 

        :param parent_score: The parent_score of this ScoreDetails.
        :type parent_score: str
        """

        self._parent_score = parent_score

    @property
    def plays(self):
        """Gets the plays of this ScoreDetails.


        :return: The plays of this ScoreDetails.
        :rtype: ScorePlaysCounts
        """
        return self._plays

    @plays.setter
    def plays(self, plays):
        """Sets the plays of this ScoreDetails.


        :param plays: The plays of this ScoreDetails.
        :type plays: ScorePlaysCounts
        """

        self._plays = plays

    @property
    def publication_date(self):
        """Gets the publication_date of this ScoreDetails.

        The date when the score was published on Flat

        :return: The publication_date of this ScoreDetails.
        :rtype: datetime
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this ScoreDetails.

        The date when the score was published on Flat

        :param publication_date: The publication_date of this ScoreDetails.
        :type publication_date: datetime
        """

        self._publication_date = publication_date

    @property
    def rights(self):
        """Gets the rights of this ScoreDetails.


        :return: The rights of this ScoreDetails.
        :rtype: ResourceRights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this ScoreDetails.


        :param rights: The rights of this ScoreDetails.
        :type rights: ResourceRights
        """

        self._rights = rights

    @property
    def samples(self):
        """Gets the samples of this ScoreDetails.

        An array of the audio samples identifiers used the different score parts. The format of the strings is `{instrument-group}.{sample-id}`. 

        :return: The samples of this ScoreDetails.
        :rtype: List[str]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this ScoreDetails.

        An array of the audio samples identifiers used the different score parts. The format of the strings is `{instrument-group}.{sample-id}`. 

        :param samples: The samples of this ScoreDetails.
        :type samples: List[str]
        """

        self._samples = samples

    @property
    def subtitle(self):
        """Gets the subtitle of this ScoreDetails.

        Subtitle of the score

        :return: The subtitle of this ScoreDetails.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this ScoreDetails.

        Subtitle of the score

        :param subtitle: The subtitle of this ScoreDetails.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def tags(self):
        """Gets the tags of this ScoreDetails.

        Tags describing the score

        :return: The tags of this ScoreDetails.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ScoreDetails.

        Tags describing the score

        :param tags: The tags of this ScoreDetails.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def views(self):
        """Gets the views of this ScoreDetails.


        :return: The views of this ScoreDetails.
        :rtype: ScoreViewsCounts
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this ScoreDetails.


        :param views: The views of this ScoreDetails.
        :type views: ScoreViewsCounts
        """

        self._views = views
