# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_privacy import ScorePrivacy
from openapi_server.models.score_source import ScoreSource
from openapi_server import util


class ScoreCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection: str=None, data: str=None, data_encoding: str=None, filename: str=None, google_drive_folder: str=None, privacy: ScorePrivacy=None, source: ScoreSource=None, title: str=None):
        """ScoreCreation - a model defined in OpenAPI

        :param collection: The collection of this ScoreCreation.
        :param data: The data of this ScoreCreation.
        :param data_encoding: The data_encoding of this ScoreCreation.
        :param filename: The filename of this ScoreCreation.
        :param google_drive_folder: The google_drive_folder of this ScoreCreation.
        :param privacy: The privacy of this ScoreCreation.
        :param source: The source of this ScoreCreation.
        :param title: The title of this ScoreCreation.
        """
        self.openapi_types = {
            'collection': str,
            'data': str,
            'data_encoding': str,
            'filename': str,
            'google_drive_folder': str,
            'privacy': ScorePrivacy,
            'source': ScoreSource,
            'title': str
        }

        self.attribute_map = {
            'collection': 'collection',
            'data': 'data',
            'data_encoding': 'dataEncoding',
            'filename': 'filename',
            'google_drive_folder': 'googleDriveFolder',
            'privacy': 'privacy',
            'source': 'source',
            'title': 'title'
        }

        self._collection = collection
        self._data = data
        self._data_encoding = data_encoding
        self._filename = filename
        self._google_drive_folder = google_drive_folder
        self._privacy = privacy
        self._source = source
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreCreation of this ScoreCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection(self):
        """Gets the collection of this ScoreCreation.

        Unique identifier of a collection where the score will be created. If no collection identifier is provided, the score will be stored in the `root` directory. 

        :return: The collection of this ScoreCreation.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ScoreCreation.

        Unique identifier of a collection where the score will be created. If no collection identifier is provided, the score will be stored in the `root` directory. 

        :param collection: The collection of this ScoreCreation.
        :type collection: str
        """

        self._collection = collection

    @property
    def data(self):
        """Gets the data of this ScoreCreation.

        The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file. Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request. 

        :return: The data of this ScoreCreation.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ScoreCreation.

        The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file. Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request. 

        :param data: The data of this ScoreCreation.
        :type data: str
        """

        self._data = data

    @property
    def data_encoding(self):
        """Gets the data_encoding of this ScoreCreation.

        The optional encoding of the score data. This property must match the encoding used for the `data` property.

        :return: The data_encoding of this ScoreCreation.
        :rtype: str
        """
        return self._data_encoding

    @data_encoding.setter
    def data_encoding(self, data_encoding):
        """Sets the data_encoding of this ScoreCreation.

        The optional encoding of the score data. This property must match the encoding used for the `data` property.

        :param data_encoding: The data_encoding of this ScoreCreation.
        :type data_encoding: str
        """
        allowed_values = ["base64"]  # noqa: E501
        if data_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `data_encoding` ({0}), must be one of {1}"
                .format(data_encoding, allowed_values)
            )

        self._data_encoding = data_encoding

    @property
    def filename(self):
        """Gets the filename of this ScoreCreation.

        If this is an imported file, its filename

        :return: The filename of this ScoreCreation.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ScoreCreation.

        If this is an imported file, its filename

        :param filename: The filename of this ScoreCreation.
        :type filename: str
        """

        self._filename = filename

    @property
    def google_drive_folder(self):
        """Gets the google_drive_folder of this ScoreCreation.

        If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory. 

        :return: The google_drive_folder of this ScoreCreation.
        :rtype: str
        """
        return self._google_drive_folder

    @google_drive_folder.setter
    def google_drive_folder(self, google_drive_folder):
        """Sets the google_drive_folder of this ScoreCreation.

        If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory. 

        :param google_drive_folder: The google_drive_folder of this ScoreCreation.
        :type google_drive_folder: str
        """

        self._google_drive_folder = google_drive_folder

    @property
    def privacy(self):
        """Gets the privacy of this ScoreCreation.


        :return: The privacy of this ScoreCreation.
        :rtype: ScorePrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ScoreCreation.


        :param privacy: The privacy of this ScoreCreation.
        :type privacy: ScorePrivacy
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")

        self._privacy = privacy

    @property
    def source(self):
        """Gets the source of this ScoreCreation.


        :return: The source of this ScoreCreation.
        :rtype: ScoreSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ScoreCreation.


        :param source: The source of this ScoreCreation.
        :type source: ScoreSource
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this ScoreCreation.

        The title of the new score. If the title is too long, the API may trim this one.  If this title is not specified, the API will try to (in this order):   - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).   - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property   - Set a default title (e.g. \"New Music Score\") 

        :return: The title of this ScoreCreation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoreCreation.

        The title of the new score. If the title is too long, the API may trim this one.  If this title is not specified, the API will try to (in this order):   - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).   - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property   - Set a default title (e.g. \"New Music Score\") 

        :param title: The title of this ScoreCreation.
        :type title: str
        """

        self._title = title
