# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreViewsCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monthly: float=None, total: float=None, weekly: float=None):
        """ScoreViewsCounts - a model defined in OpenAPI

        :param monthly: The monthly of this ScoreViewsCounts.
        :param total: The total of this ScoreViewsCounts.
        :param weekly: The weekly of this ScoreViewsCounts.
        """
        self.openapi_types = {
            'monthly': float,
            'total': float,
            'weekly': float
        }

        self.attribute_map = {
            'monthly': 'monthly',
            'total': 'total',
            'weekly': 'weekly'
        }

        self._monthly = monthly
        self._total = total
        self._weekly = weekly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreViewsCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreViewsCounts of this ScoreViewsCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monthly(self):
        """Gets the monthly of this ScoreViewsCounts.

        The monthly number of views of the score

        :return: The monthly of this ScoreViewsCounts.
        :rtype: float
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this ScoreViewsCounts.

        The monthly number of views of the score

        :param monthly: The monthly of this ScoreViewsCounts.
        :type monthly: float
        """

        self._monthly = monthly

    @property
    def total(self):
        """Gets the total of this ScoreViewsCounts.

        The total number of views of the score

        :return: The total of this ScoreViewsCounts.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ScoreViewsCounts.

        The total number of views of the score

        :param total: The total of this ScoreViewsCounts.
        :type total: float
        """

        self._total = total

    @property
    def weekly(self):
        """Gets the weekly of this ScoreViewsCounts.

        The weekly number of views of the score

        :return: The weekly of this ScoreViewsCounts.
        :rtype: float
        """
        return self._weekly

    @weekly.setter
    def weekly(self, weekly):
        """Sets the weekly of this ScoreViewsCounts.

        The weekly number of views of the score

        :param weekly: The weekly of this ScoreViewsCounts.
        :type weekly: float
        """

        self._weekly = weekly
