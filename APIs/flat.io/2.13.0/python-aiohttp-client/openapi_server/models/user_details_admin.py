# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.class_roles import ClassRoles
from openapi_server.models.organization_roles import OrganizationRoles
from openapi_server.models.user_details_admin_all_of_license import UserDetailsAdminAllOfLicense
from openapi_server.models.user_public_summary import UserPublicSummary
from openapi_server import util


class UserDetailsAdmin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firstname: str=None, id: str=None, is_flat_team: bool=None, is_power_user: bool=None, lastname: str=None, name: str=None, picture: str=None, printable_name: str=None, type: str=None, username: str=None, class_role: ClassRoles=None, html_url: str=None, organization: str=None, organization_role: OrganizationRoles=None, email: str=None, last_activity_date: datetime=None, license: UserDetailsAdminAllOfLicense=None):
        """UserDetailsAdmin - a model defined in OpenAPI

        :param firstname: The firstname of this UserDetailsAdmin.
        :param id: The id of this UserDetailsAdmin.
        :param is_flat_team: The is_flat_team of this UserDetailsAdmin.
        :param is_power_user: The is_power_user of this UserDetailsAdmin.
        :param lastname: The lastname of this UserDetailsAdmin.
        :param name: The name of this UserDetailsAdmin.
        :param picture: The picture of this UserDetailsAdmin.
        :param printable_name: The printable_name of this UserDetailsAdmin.
        :param type: The type of this UserDetailsAdmin.
        :param username: The username of this UserDetailsAdmin.
        :param class_role: The class_role of this UserDetailsAdmin.
        :param html_url: The html_url of this UserDetailsAdmin.
        :param organization: The organization of this UserDetailsAdmin.
        :param organization_role: The organization_role of this UserDetailsAdmin.
        :param email: The email of this UserDetailsAdmin.
        :param last_activity_date: The last_activity_date of this UserDetailsAdmin.
        :param license: The license of this UserDetailsAdmin.
        """
        self.openapi_types = {
            'firstname': str,
            'id': str,
            'is_flat_team': bool,
            'is_power_user': bool,
            'lastname': str,
            'name': str,
            'picture': str,
            'printable_name': str,
            'type': str,
            'username': str,
            'class_role': ClassRoles,
            'html_url': str,
            'organization': str,
            'organization_role': OrganizationRoles,
            'email': str,
            'last_activity_date': datetime,
            'license': UserDetailsAdminAllOfLicense
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'id': 'id',
            'is_flat_team': 'isFlatTeam',
            'is_power_user': 'isPowerUser',
            'lastname': 'lastname',
            'name': 'name',
            'picture': 'picture',
            'printable_name': 'printableName',
            'type': 'type',
            'username': 'username',
            'class_role': 'classRole',
            'html_url': 'htmlUrl',
            'organization': 'organization',
            'organization_role': 'organizationRole',
            'email': 'email',
            'last_activity_date': 'lastActivityDate',
            'license': 'license'
        }

        self._firstname = firstname
        self._id = id
        self._is_flat_team = is_flat_team
        self._is_power_user = is_power_user
        self._lastname = lastname
        self._name = name
        self._picture = picture
        self._printable_name = printable_name
        self._type = type
        self._username = username
        self._class_role = class_role
        self._html_url = html_url
        self._organization = organization
        self._organization_role = organization_role
        self._email = email
        self._last_activity_date = last_activity_date
        self._license = license

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDetailsAdmin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDetailsAdmin of this UserDetailsAdmin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self):
        """Gets the firstname of this UserDetailsAdmin.

        Firstname of the user (for education users)

        :return: The firstname of this UserDetailsAdmin.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UserDetailsAdmin.

        Firstname of the user (for education users)

        :param firstname: The firstname of this UserDetailsAdmin.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def id(self):
        """Gets the id of this UserDetailsAdmin.

        The user unique identifier

        :return: The id of this UserDetailsAdmin.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetailsAdmin.

        The user unique identifier

        :param id: The id of this UserDetailsAdmin.
        :type id: str
        """

        self._id = id

    @property
    def is_flat_team(self):
        """Gets the is_flat_team of this UserDetailsAdmin.

        Will be 'true' if user is part of the Flat Team

        :return: The is_flat_team of this UserDetailsAdmin.
        :rtype: bool
        """
        return self._is_flat_team

    @is_flat_team.setter
    def is_flat_team(self, is_flat_team):
        """Sets the is_flat_team of this UserDetailsAdmin.

        Will be 'true' if user is part of the Flat Team

        :param is_flat_team: The is_flat_team of this UserDetailsAdmin.
        :type is_flat_team: bool
        """

        self._is_flat_team = is_flat_team

    @property
    def is_power_user(self):
        """Gets the is_power_user of this UserDetailsAdmin.

        User license status. 'true' if user is an individual Power user

        :return: The is_power_user of this UserDetailsAdmin.
        :rtype: bool
        """
        return self._is_power_user

    @is_power_user.setter
    def is_power_user(self, is_power_user):
        """Sets the is_power_user of this UserDetailsAdmin.

        User license status. 'true' if user is an individual Power user

        :param is_power_user: The is_power_user of this UserDetailsAdmin.
        :type is_power_user: bool
        """

        self._is_power_user = is_power_user

    @property
    def lastname(self):
        """Gets the lastname of this UserDetailsAdmin.

        Lastname of the user (for education users)

        :return: The lastname of this UserDetailsAdmin.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UserDetailsAdmin.

        Lastname of the user (for education users)

        :param lastname: The lastname of this UserDetailsAdmin.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def name(self):
        """Gets the name of this UserDetailsAdmin.

        A displayable name for the user (for consumer users)

        :return: The name of this UserDetailsAdmin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDetailsAdmin.

        A displayable name for the user (for consumer users)

        :param name: The name of this UserDetailsAdmin.
        :type name: str
        """

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this UserDetailsAdmin.

        The URL of the picture to display

        :return: The picture of this UserDetailsAdmin.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this UserDetailsAdmin.

        The URL of the picture to display

        :param picture: The picture of this UserDetailsAdmin.
        :type picture: str
        """

        self._picture = picture

    @property
    def printable_name(self):
        """Gets the printable_name of this UserDetailsAdmin.

        The name that can be directly printed (name, firstname & lastname, or username)

        :return: The printable_name of this UserDetailsAdmin.
        :rtype: str
        """
        return self._printable_name

    @printable_name.setter
    def printable_name(self, printable_name):
        """Sets the printable_name of this UserDetailsAdmin.

        The name that can be directly printed (name, firstname & lastname, or username)

        :param printable_name: The printable_name of this UserDetailsAdmin.
        :type printable_name: str
        """

        self._printable_name = printable_name

    @property
    def type(self):
        """Gets the type of this UserDetailsAdmin.

        The type of user account

        :return: The type of this UserDetailsAdmin.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserDetailsAdmin.

        The type of user account

        :param type: The type of this UserDetailsAdmin.
        :type type: str
        """
        allowed_values = ["user", "guest"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this UserDetailsAdmin.

        The user name (unique for the organization)

        :return: The username of this UserDetailsAdmin.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserDetailsAdmin.

        The user name (unique for the organization)

        :param username: The username of this UserDetailsAdmin.
        :type username: str
        """

        self._username = username

    @property
    def class_role(self):
        """Gets the class_role of this UserDetailsAdmin.


        :return: The class_role of this UserDetailsAdmin.
        :rtype: ClassRoles
        """
        return self._class_role

    @class_role.setter
    def class_role(self, class_role):
        """Sets the class_role of this UserDetailsAdmin.


        :param class_role: The class_role of this UserDetailsAdmin.
        :type class_role: ClassRoles
        """

        self._class_role = class_role

    @property
    def html_url(self):
        """Gets the html_url of this UserDetailsAdmin.

        Link to user profile (for Indiv. users only)

        :return: The html_url of this UserDetailsAdmin.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this UserDetailsAdmin.

        Link to user profile (for Indiv. users only)

        :param html_url: The html_url of this UserDetailsAdmin.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def organization(self):
        """Gets the organization of this UserDetailsAdmin.

        Organization ID (for Edu users only)

        :return: The organization of this UserDetailsAdmin.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserDetailsAdmin.

        Organization ID (for Edu users only)

        :param organization: The organization of this UserDetailsAdmin.
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_role(self):
        """Gets the organization_role of this UserDetailsAdmin.


        :return: The organization_role of this UserDetailsAdmin.
        :rtype: OrganizationRoles
        """
        return self._organization_role

    @organization_role.setter
    def organization_role(self, organization_role):
        """Sets the organization_role of this UserDetailsAdmin.


        :param organization_role: The organization_role of this UserDetailsAdmin.
        :type organization_role: OrganizationRoles
        """

        self._organization_role = organization_role

    @property
    def email(self):
        """Gets the email of this UserDetailsAdmin.

        Email of the user

        :return: The email of this UserDetailsAdmin.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetailsAdmin.

        Email of the user

        :param email: The email of this UserDetailsAdmin.
        :type email: str
        """

        self._email = email

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this UserDetailsAdmin.

        Date of the last user activity

        :return: The last_activity_date of this UserDetailsAdmin.
        :rtype: datetime
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this UserDetailsAdmin.

        Date of the last user activity

        :param last_activity_date: The last_activity_date of this UserDetailsAdmin.
        :type last_activity_date: datetime
        """

        self._last_activity_date = last_activity_date

    @property
    def license(self):
        """Gets the license of this UserDetailsAdmin.


        :return: The license of this UserDetailsAdmin.
        :rtype: UserDetailsAdminAllOfLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this UserDetailsAdmin.


        :param license: The license of this UserDetailsAdmin.
        :type license: UserDetailsAdminAllOfLicense
        """

        self._license = license
