# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flat_locales import FlatLocales
import re
from openapi_server import util


class UserCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, firstname: str=None, lastname: str=None, locale: FlatLocales=FlatLocales.EN, password: str=None, username: str=None):
        """UserCreation - a model defined in OpenAPI

        :param email: The email of this UserCreation.
        :param firstname: The firstname of this UserCreation.
        :param lastname: The lastname of this UserCreation.
        :param locale: The locale of this UserCreation.
        :param password: The password of this UserCreation.
        :param username: The username of this UserCreation.
        """
        self.openapi_types = {
            'email': str,
            'firstname': str,
            'lastname': str,
            'locale': FlatLocales,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'locale': 'locale',
            'password': 'password',
            'username': 'username'
        }

        self._email = email
        self._firstname = firstname
        self._lastname = lastname
        self._locale = locale
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCreation of this UserCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserCreation.

        Email of the new account

        :return: The email of this UserCreation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreation.

        Email of the new account

        :param email: The email of this UserCreation.
        :type email: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this UserCreation.

        First name of the user

        :return: The firstname of this UserCreation.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UserCreation.

        First name of the user

        :param firstname: The firstname of this UserCreation.
        :type firstname: str
        """
        if firstname is not None and len(firstname) > 60:
            raise ValueError("Invalid value for `firstname`, length must be less than or equal to `60`")

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this UserCreation.

        Last name of the user

        :return: The lastname of this UserCreation.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UserCreation.

        Last name of the user

        :param lastname: The lastname of this UserCreation.
        :type lastname: str
        """
        if lastname is not None and len(lastname) > 60:
            raise ValueError("Invalid value for `lastname`, length must be less than or equal to `60`")

        self._lastname = lastname

    @property
    def locale(self):
        """Gets the locale of this UserCreation.


        :return: The locale of this UserCreation.
        :rtype: FlatLocales
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserCreation.


        :param locale: The locale of this UserCreation.
        :type locale: FlatLocales
        """

        self._locale = locale

    @property
    def password(self):
        """Gets the password of this UserCreation.

        Password of the new account

        :return: The password of this UserCreation.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreation.

        Password of the new account

        :param password: The password of this UserCreation.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 1000:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `1000`")
        if password is not None and len(password) < 6:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `6`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this UserCreation.

        Username of the new account

        :return: The username of this UserCreation.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserCreation.

        Username of the new account

        :param username: The username of this UserCreation.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 30:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `30`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")
        if username is not None and not re.search(r'^[A-Za-z0-9\-_.]+$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[A-Za-z0-9\-_.]+$/`")

        self._username = username
