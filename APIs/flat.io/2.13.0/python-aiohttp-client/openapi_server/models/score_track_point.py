# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreTrackPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, measure_uuid: str=None, time: float=None, type: str=None):
        """ScoreTrackPoint - a model defined in OpenAPI

        :param measure_uuid: The measure_uuid of this ScoreTrackPoint.
        :param time: The time of this ScoreTrackPoint.
        :param type: The type of this ScoreTrackPoint.
        """
        self.openapi_types = {
            'measure_uuid': str,
            'time': float,
            'type': str
        }

        self.attribute_map = {
            'measure_uuid': 'measureUuid',
            'time': 'time',
            'type': 'type'
        }

        self._measure_uuid = measure_uuid
        self._time = time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreTrackPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreTrackPoint of this ScoreTrackPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measure_uuid(self):
        """Gets the measure_uuid of this ScoreTrackPoint.

        The measure unique identifier

        :return: The measure_uuid of this ScoreTrackPoint.
        :rtype: str
        """
        return self._measure_uuid

    @measure_uuid.setter
    def measure_uuid(self, measure_uuid):
        """Sets the measure_uuid of this ScoreTrackPoint.

        The measure unique identifier

        :param measure_uuid: The measure_uuid of this ScoreTrackPoint.
        :type measure_uuid: str
        """

        self._measure_uuid = measure_uuid

    @property
    def time(self):
        """Gets the time of this ScoreTrackPoint.

        The corresponding time in seconds

        :return: The time of this ScoreTrackPoint.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ScoreTrackPoint.

        The corresponding time in seconds

        :param time: The time of this ScoreTrackPoint.
        :type time: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def type(self):
        """Gets the type of this ScoreTrackPoint.

        The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`

        :return: The type of this ScoreTrackPoint.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScoreTrackPoint.

        The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`

        :param type: The type of this ScoreTrackPoint.
        :type type: str
        """
        allowed_values = ["measure", "end"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
