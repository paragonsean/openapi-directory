# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceCollaboratorCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl_admin: bool=False, acl_read: bool=True, acl_write: bool=False, group: str=None, user: str=None, user_email: str=None, user_token: str=None):
        """ResourceCollaboratorCreation - a model defined in OpenAPI

        :param acl_admin: The acl_admin of this ResourceCollaboratorCreation.
        :param acl_read: The acl_read of this ResourceCollaboratorCreation.
        :param acl_write: The acl_write of this ResourceCollaboratorCreation.
        :param group: The group of this ResourceCollaboratorCreation.
        :param user: The user of this ResourceCollaboratorCreation.
        :param user_email: The user_email of this ResourceCollaboratorCreation.
        :param user_token: The user_token of this ResourceCollaboratorCreation.
        """
        self.openapi_types = {
            'acl_admin': bool,
            'acl_read': bool,
            'acl_write': bool,
            'group': str,
            'user': str,
            'user_email': str,
            'user_token': str
        }

        self.attribute_map = {
            'acl_admin': 'aclAdmin',
            'acl_read': 'aclRead',
            'acl_write': 'aclWrite',
            'group': 'group',
            'user': 'user',
            'user_email': 'userEmail',
            'user_token': 'userToken'
        }

        self._acl_admin = acl_admin
        self._acl_read = acl_read
        self._acl_write = acl_write
        self._group = group
        self._user = user
        self._user_email = user_email
        self._user_token = user_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceCollaboratorCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceCollaboratorCreation of this ResourceCollaboratorCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl_admin(self):
        """Gets the acl_admin of this ResourceCollaboratorCreation.

        `True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document 

        :return: The acl_admin of this ResourceCollaboratorCreation.
        :rtype: bool
        """
        return self._acl_admin

    @acl_admin.setter
    def acl_admin(self, acl_admin):
        """Sets the acl_admin of this ResourceCollaboratorCreation.

        `True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document 

        :param acl_admin: The acl_admin of this ResourceCollaboratorCreation.
        :type acl_admin: bool
        """

        self._acl_admin = acl_admin

    @property
    def acl_read(self):
        """Gets the acl_read of this ResourceCollaboratorCreation.

        `True` if the related user can read the score. (probably true if the user has a permission on the document). 

        :return: The acl_read of this ResourceCollaboratorCreation.
        :rtype: bool
        """
        return self._acl_read

    @acl_read.setter
    def acl_read(self, acl_read):
        """Sets the acl_read of this ResourceCollaboratorCreation.

        `True` if the related user can read the score. (probably true if the user has a permission on the document). 

        :param acl_read: The acl_read of this ResourceCollaboratorCreation.
        :type acl_read: bool
        """

        self._acl_read = acl_read

    @property
    def acl_write(self):
        """Gets the acl_write of this ResourceCollaboratorCreation.

        `True` if the related user can modify the score. 

        :return: The acl_write of this ResourceCollaboratorCreation.
        :rtype: bool
        """
        return self._acl_write

    @acl_write.setter
    def acl_write(self, acl_write):
        """Sets the acl_write of this ResourceCollaboratorCreation.

        `True` if the related user can modify the score. 

        :param acl_write: The acl_write of this ResourceCollaboratorCreation.
        :type acl_write: bool
        """

        self._acl_write = acl_write

    @property
    def group(self):
        """Gets the group of this ResourceCollaboratorCreation.

        The unique identifier of a Flat group

        :return: The group of this ResourceCollaboratorCreation.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ResourceCollaboratorCreation.

        The unique identifier of a Flat group

        :param group: The group of this ResourceCollaboratorCreation.
        :type group: str
        """

        self._group = group

    @property
    def user(self):
        """Gets the user of this ResourceCollaboratorCreation.

        The unique identifier of a Flat user

        :return: The user of this ResourceCollaboratorCreation.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ResourceCollaboratorCreation.

        The unique identifier of a Flat user

        :param user: The user of this ResourceCollaboratorCreation.
        :type user: str
        """

        self._user = user

    @property
    def user_email(self):
        """Gets the user_email of this ResourceCollaboratorCreation.

        Fill this field to invite an individual user by email. 

        :return: The user_email of this ResourceCollaboratorCreation.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ResourceCollaboratorCreation.

        Fill this field to invite an individual user by email. 

        :param user_email: The user_email of this ResourceCollaboratorCreation.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_token(self):
        """Gets the user_token of this ResourceCollaboratorCreation.

        Token received in an invitation to join the score. 

        :return: The user_token of this ResourceCollaboratorCreation.
        :rtype: str
        """
        return self._user_token

    @user_token.setter
    def user_token(self, user_token):
        """Sets the user_token of this ResourceCollaboratorCreation.

        Token received in an invitation to join the score. 

        :param user_token: The user_token of this ResourceCollaboratorCreation.
        :type user_token: str
        """

        self._user_token = user_token
