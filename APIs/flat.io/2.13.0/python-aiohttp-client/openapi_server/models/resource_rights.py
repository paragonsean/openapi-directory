# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceRights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl_admin: bool=False, acl_read: bool=False, acl_write: bool=False, is_collaborator: bool=False):
        """ResourceRights - a model defined in OpenAPI

        :param acl_admin: The acl_admin of this ResourceRights.
        :param acl_read: The acl_read of this ResourceRights.
        :param acl_write: The acl_write of this ResourceRights.
        :param is_collaborator: The is_collaborator of this ResourceRights.
        """
        self.openapi_types = {
            'acl_admin': bool,
            'acl_read': bool,
            'acl_write': bool,
            'is_collaborator': bool
        }

        self.attribute_map = {
            'acl_admin': 'aclAdmin',
            'acl_read': 'aclRead',
            'acl_write': 'aclWrite',
            'is_collaborator': 'isCollaborator'
        }

        self._acl_admin = acl_admin
        self._acl_read = acl_read
        self._acl_write = acl_write
        self._is_collaborator = is_collaborator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceRights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceRights of this ResourceRights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl_admin(self):
        """Gets the acl_admin of this ResourceRights.

        `True` if the current user can manage the current document (i.e. share, delete)  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :return: The acl_admin of this ResourceRights.
        :rtype: bool
        """
        return self._acl_admin

    @acl_admin.setter
    def acl_admin(self, acl_admin):
        """Sets the acl_admin of this ResourceRights.

        `True` if the current user can manage the current document (i.e. share, delete)  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :param acl_admin: The acl_admin of this ResourceRights.
        :type acl_admin: bool
        """

        self._acl_admin = acl_admin

    @property
    def acl_read(self):
        """Gets the acl_read of this ResourceRights.

        `True` if the current user can read the current document 

        :return: The acl_read of this ResourceRights.
        :rtype: bool
        """
        return self._acl_read

    @acl_read.setter
    def acl_read(self, acl_read):
        """Sets the acl_read of this ResourceRights.

        `True` if the current user can read the current document 

        :param acl_read: The acl_read of this ResourceRights.
        :type acl_read: bool
        """

        self._acl_read = acl_read

    @property
    def acl_write(self):
        """Gets the acl_write of this ResourceRights.

        `True` if the current user can modify the current document.  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :return: The acl_write of this ResourceRights.
        :rtype: bool
        """
        return self._acl_write

    @acl_write.setter
    def acl_write(self, acl_write):
        """Sets the acl_write of this ResourceRights.

        `True` if the current user can modify the current document.  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :param acl_write: The acl_write of this ResourceRights.
        :type acl_write: bool
        """

        self._acl_write = acl_write

    @property
    def is_collaborator(self):
        """Gets the is_collaborator of this ResourceRights.

        `True` if the current user is a collaborator of the current document (direct or via group). 

        :return: The is_collaborator of this ResourceRights.
        :rtype: bool
        """
        return self._is_collaborator

    @is_collaborator.setter
    def is_collaborator(self, is_collaborator):
        """Sets the is_collaborator of this ResourceRights.

        `True` if the current user is a collaborator of the current document (direct or via group). 

        :param is_collaborator: The is_collaborator of this ResourceRights.
        :type is_collaborator: bool
        """

        self._is_collaborator = is_collaborator
