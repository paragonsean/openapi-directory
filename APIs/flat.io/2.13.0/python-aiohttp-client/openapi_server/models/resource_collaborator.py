# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.user_public import UserPublic
from openapi_server import util


class ResourceCollaborator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl_admin: bool=False, acl_read: bool=False, acl_write: bool=False, is_collaborator: bool=False, collection: str=None, group: Group=None, id: str=None, invited: bool=None, score: str=None, user: UserPublic=None, user_email: str=None):
        """ResourceCollaborator - a model defined in OpenAPI

        :param acl_admin: The acl_admin of this ResourceCollaborator.
        :param acl_read: The acl_read of this ResourceCollaborator.
        :param acl_write: The acl_write of this ResourceCollaborator.
        :param is_collaborator: The is_collaborator of this ResourceCollaborator.
        :param collection: The collection of this ResourceCollaborator.
        :param group: The group of this ResourceCollaborator.
        :param id: The id of this ResourceCollaborator.
        :param invited: The invited of this ResourceCollaborator.
        :param score: The score of this ResourceCollaborator.
        :param user: The user of this ResourceCollaborator.
        :param user_email: The user_email of this ResourceCollaborator.
        """
        self.openapi_types = {
            'acl_admin': bool,
            'acl_read': bool,
            'acl_write': bool,
            'is_collaborator': bool,
            'collection': str,
            'group': Group,
            'id': str,
            'invited': bool,
            'score': str,
            'user': UserPublic,
            'user_email': str
        }

        self.attribute_map = {
            'acl_admin': 'aclAdmin',
            'acl_read': 'aclRead',
            'acl_write': 'aclWrite',
            'is_collaborator': 'isCollaborator',
            'collection': 'collection',
            'group': 'group',
            'id': 'id',
            'invited': 'invited',
            'score': 'score',
            'user': 'user',
            'user_email': 'userEmail'
        }

        self._acl_admin = acl_admin
        self._acl_read = acl_read
        self._acl_write = acl_write
        self._is_collaborator = is_collaborator
        self._collection = collection
        self._group = group
        self._id = id
        self._invited = invited
        self._score = score
        self._user = user
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceCollaborator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceCollaborator of this ResourceCollaborator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl_admin(self):
        """Gets the acl_admin of this ResourceCollaborator.

        `True` if the current user can manage the current document (i.e. share, delete)  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :return: The acl_admin of this ResourceCollaborator.
        :rtype: bool
        """
        return self._acl_admin

    @acl_admin.setter
    def acl_admin(self, acl_admin):
        """Sets the acl_admin of this ResourceCollaborator.

        `True` if the current user can manage the current document (i.e. share, delete)  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :param acl_admin: The acl_admin of this ResourceCollaborator.
        :type acl_admin: bool
        """

        self._acl_admin = acl_admin

    @property
    def acl_read(self):
        """Gets the acl_read of this ResourceCollaborator.

        `True` if the current user can read the current document 

        :return: The acl_read of this ResourceCollaborator.
        :rtype: bool
        """
        return self._acl_read

    @acl_read.setter
    def acl_read(self, acl_read):
        """Sets the acl_read of this ResourceCollaborator.

        `True` if the current user can read the current document 

        :param acl_read: The acl_read of this ResourceCollaborator.
        :type acl_read: bool
        """

        self._acl_read = acl_read

    @property
    def acl_write(self):
        """Gets the acl_write of this ResourceCollaborator.

        `True` if the current user can modify the current document.  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :return: The acl_write of this ResourceCollaborator.
        :rtype: bool
        """
        return self._acl_write

    @acl_write.setter
    def acl_write(self, acl_write):
        """Sets the acl_write of this ResourceCollaborator.

        `True` if the current user can modify the current document.  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection. 

        :param acl_write: The acl_write of this ResourceCollaborator.
        :type acl_write: bool
        """

        self._acl_write = acl_write

    @property
    def is_collaborator(self):
        """Gets the is_collaborator of this ResourceCollaborator.

        `True` if the current user is a collaborator of the current document (direct or via group). 

        :return: The is_collaborator of this ResourceCollaborator.
        :rtype: bool
        """
        return self._is_collaborator

    @is_collaborator.setter
    def is_collaborator(self, is_collaborator):
        """Sets the is_collaborator of this ResourceCollaborator.

        `True` if the current user is a collaborator of the current document (direct or via group). 

        :param is_collaborator: The is_collaborator of this ResourceCollaborator.
        :type is_collaborator: bool
        """

        self._is_collaborator = is_collaborator

    @property
    def collection(self):
        """Gets the collection of this ResourceCollaborator.

        If this object is a permission of a collection, this property will contain the unique identifier of the collection

        :return: The collection of this ResourceCollaborator.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ResourceCollaborator.

        If this object is a permission of a collection, this property will contain the unique identifier of the collection

        :param collection: The collection of this ResourceCollaborator.
        :type collection: str
        """

        self._collection = collection

    @property
    def group(self):
        """Gets the group of this ResourceCollaborator.


        :return: The group of this ResourceCollaborator.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ResourceCollaborator.


        :param group: The group of this ResourceCollaborator.
        :type group: Group
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this ResourceCollaborator.

        The unique identifier of the permission

        :return: The id of this ResourceCollaborator.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceCollaborator.

        The unique identifier of the permission

        :param id: The id of this ResourceCollaborator.
        :type id: str
        """

        self._id = id

    @property
    def invited(self):
        """Gets the invited of this ResourceCollaborator.

        If this property is `true`, this is still a pending invitation 

        :return: The invited of this ResourceCollaborator.
        :rtype: bool
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this ResourceCollaborator.

        If this property is `true`, this is still a pending invitation 

        :param invited: The invited of this ResourceCollaborator.
        :type invited: bool
        """

        self._invited = invited

    @property
    def score(self):
        """Gets the score of this ResourceCollaborator.

        If this object is a permission of a score, this property will contain the unique identifier of the score

        :return: The score of this ResourceCollaborator.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ResourceCollaborator.

        If this object is a permission of a score, this property will contain the unique identifier of the score

        :param score: The score of this ResourceCollaborator.
        :type score: str
        """

        self._score = score

    @property
    def user(self):
        """Gets the user of this ResourceCollaborator.


        :return: The user of this ResourceCollaborator.
        :rtype: UserPublic
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ResourceCollaborator.


        :param user: The user of this ResourceCollaborator.
        :type user: UserPublic
        """

        self._user = user

    @property
    def user_email(self):
        """Gets the user_email of this ResourceCollaborator.

        If the collaborator is not a user of Flat yet, this field will contain his email. 

        :return: The user_email of this ResourceCollaborator.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ResourceCollaborator.

        If the collaborator is not a user of Flat yet, this field will contain his email. 

        :param user_email: The user_email of this ResourceCollaborator.
        :type user_email: str
        """

        self._user_email = user_email
