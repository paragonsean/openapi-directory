# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.class_roles import ClassRoles
from openapi_server.models.organization_roles import OrganizationRoles
from openapi_server.models.user_public_summary import UserPublicSummary
from openapi_server import util


class UserPublic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firstname: str=None, id: str=None, is_flat_team: bool=None, is_power_user: bool=None, lastname: str=None, name: str=None, picture: str=None, printable_name: str=None, type: str=None, username: str=None, class_role: ClassRoles=None, html_url: str=None, organization: str=None, organization_role: OrganizationRoles=None, bio: str=None, cover_picture: str=None, followers_count: int=None, following_count: int=None, instruments: List[str]=None, liked_scores_count: int=None, owned_public_scores_count: int=None, profile_theme: str=None, registration_date: datetime=None):
        """UserPublic - a model defined in OpenAPI

        :param firstname: The firstname of this UserPublic.
        :param id: The id of this UserPublic.
        :param is_flat_team: The is_flat_team of this UserPublic.
        :param is_power_user: The is_power_user of this UserPublic.
        :param lastname: The lastname of this UserPublic.
        :param name: The name of this UserPublic.
        :param picture: The picture of this UserPublic.
        :param printable_name: The printable_name of this UserPublic.
        :param type: The type of this UserPublic.
        :param username: The username of this UserPublic.
        :param class_role: The class_role of this UserPublic.
        :param html_url: The html_url of this UserPublic.
        :param organization: The organization of this UserPublic.
        :param organization_role: The organization_role of this UserPublic.
        :param bio: The bio of this UserPublic.
        :param cover_picture: The cover_picture of this UserPublic.
        :param followers_count: The followers_count of this UserPublic.
        :param following_count: The following_count of this UserPublic.
        :param instruments: The instruments of this UserPublic.
        :param liked_scores_count: The liked_scores_count of this UserPublic.
        :param owned_public_scores_count: The owned_public_scores_count of this UserPublic.
        :param profile_theme: The profile_theme of this UserPublic.
        :param registration_date: The registration_date of this UserPublic.
        """
        self.openapi_types = {
            'firstname': str,
            'id': str,
            'is_flat_team': bool,
            'is_power_user': bool,
            'lastname': str,
            'name': str,
            'picture': str,
            'printable_name': str,
            'type': str,
            'username': str,
            'class_role': ClassRoles,
            'html_url': str,
            'organization': str,
            'organization_role': OrganizationRoles,
            'bio': str,
            'cover_picture': str,
            'followers_count': int,
            'following_count': int,
            'instruments': List[str],
            'liked_scores_count': int,
            'owned_public_scores_count': int,
            'profile_theme': str,
            'registration_date': datetime
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'id': 'id',
            'is_flat_team': 'isFlatTeam',
            'is_power_user': 'isPowerUser',
            'lastname': 'lastname',
            'name': 'name',
            'picture': 'picture',
            'printable_name': 'printableName',
            'type': 'type',
            'username': 'username',
            'class_role': 'classRole',
            'html_url': 'htmlUrl',
            'organization': 'organization',
            'organization_role': 'organizationRole',
            'bio': 'bio',
            'cover_picture': 'coverPicture',
            'followers_count': 'followersCount',
            'following_count': 'followingCount',
            'instruments': 'instruments',
            'liked_scores_count': 'likedScoresCount',
            'owned_public_scores_count': 'ownedPublicScoresCount',
            'profile_theme': 'profileTheme',
            'registration_date': 'registrationDate'
        }

        self._firstname = firstname
        self._id = id
        self._is_flat_team = is_flat_team
        self._is_power_user = is_power_user
        self._lastname = lastname
        self._name = name
        self._picture = picture
        self._printable_name = printable_name
        self._type = type
        self._username = username
        self._class_role = class_role
        self._html_url = html_url
        self._organization = organization
        self._organization_role = organization_role
        self._bio = bio
        self._cover_picture = cover_picture
        self._followers_count = followers_count
        self._following_count = following_count
        self._instruments = instruments
        self._liked_scores_count = liked_scores_count
        self._owned_public_scores_count = owned_public_scores_count
        self._profile_theme = profile_theme
        self._registration_date = registration_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPublic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserPublic of this UserPublic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self):
        """Gets the firstname of this UserPublic.

        Firstname of the user (for education users)

        :return: The firstname of this UserPublic.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UserPublic.

        Firstname of the user (for education users)

        :param firstname: The firstname of this UserPublic.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def id(self):
        """Gets the id of this UserPublic.

        The user unique identifier

        :return: The id of this UserPublic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserPublic.

        The user unique identifier

        :param id: The id of this UserPublic.
        :type id: str
        """

        self._id = id

    @property
    def is_flat_team(self):
        """Gets the is_flat_team of this UserPublic.

        Will be 'true' if user is part of the Flat Team

        :return: The is_flat_team of this UserPublic.
        :rtype: bool
        """
        return self._is_flat_team

    @is_flat_team.setter
    def is_flat_team(self, is_flat_team):
        """Sets the is_flat_team of this UserPublic.

        Will be 'true' if user is part of the Flat Team

        :param is_flat_team: The is_flat_team of this UserPublic.
        :type is_flat_team: bool
        """

        self._is_flat_team = is_flat_team

    @property
    def is_power_user(self):
        """Gets the is_power_user of this UserPublic.

        User license status. 'true' if user is an individual Power user

        :return: The is_power_user of this UserPublic.
        :rtype: bool
        """
        return self._is_power_user

    @is_power_user.setter
    def is_power_user(self, is_power_user):
        """Sets the is_power_user of this UserPublic.

        User license status. 'true' if user is an individual Power user

        :param is_power_user: The is_power_user of this UserPublic.
        :type is_power_user: bool
        """

        self._is_power_user = is_power_user

    @property
    def lastname(self):
        """Gets the lastname of this UserPublic.

        Lastname of the user (for education users)

        :return: The lastname of this UserPublic.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UserPublic.

        Lastname of the user (for education users)

        :param lastname: The lastname of this UserPublic.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def name(self):
        """Gets the name of this UserPublic.

        A displayable name for the user (for consumer users)

        :return: The name of this UserPublic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserPublic.

        A displayable name for the user (for consumer users)

        :param name: The name of this UserPublic.
        :type name: str
        """

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this UserPublic.

        The URL of the picture to display

        :return: The picture of this UserPublic.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this UserPublic.

        The URL of the picture to display

        :param picture: The picture of this UserPublic.
        :type picture: str
        """

        self._picture = picture

    @property
    def printable_name(self):
        """Gets the printable_name of this UserPublic.

        The name that can be directly printed (name, firstname & lastname, or username)

        :return: The printable_name of this UserPublic.
        :rtype: str
        """
        return self._printable_name

    @printable_name.setter
    def printable_name(self, printable_name):
        """Sets the printable_name of this UserPublic.

        The name that can be directly printed (name, firstname & lastname, or username)

        :param printable_name: The printable_name of this UserPublic.
        :type printable_name: str
        """

        self._printable_name = printable_name

    @property
    def type(self):
        """Gets the type of this UserPublic.

        The type of user account

        :return: The type of this UserPublic.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserPublic.

        The type of user account

        :param type: The type of this UserPublic.
        :type type: str
        """
        allowed_values = ["user", "guest"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this UserPublic.

        The user name (unique for the organization)

        :return: The username of this UserPublic.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserPublic.

        The user name (unique for the organization)

        :param username: The username of this UserPublic.
        :type username: str
        """

        self._username = username

    @property
    def class_role(self):
        """Gets the class_role of this UserPublic.


        :return: The class_role of this UserPublic.
        :rtype: ClassRoles
        """
        return self._class_role

    @class_role.setter
    def class_role(self, class_role):
        """Sets the class_role of this UserPublic.


        :param class_role: The class_role of this UserPublic.
        :type class_role: ClassRoles
        """

        self._class_role = class_role

    @property
    def html_url(self):
        """Gets the html_url of this UserPublic.

        Link to user profile (for Indiv. users only)

        :return: The html_url of this UserPublic.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this UserPublic.

        Link to user profile (for Indiv. users only)

        :param html_url: The html_url of this UserPublic.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def organization(self):
        """Gets the organization of this UserPublic.

        Organization ID (for Edu users only)

        :return: The organization of this UserPublic.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserPublic.

        Organization ID (for Edu users only)

        :param organization: The organization of this UserPublic.
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_role(self):
        """Gets the organization_role of this UserPublic.


        :return: The organization_role of this UserPublic.
        :rtype: OrganizationRoles
        """
        return self._organization_role

    @organization_role.setter
    def organization_role(self, organization_role):
        """Sets the organization_role of this UserPublic.


        :param organization_role: The organization_role of this UserPublic.
        :type organization_role: OrganizationRoles
        """

        self._organization_role = organization_role

    @property
    def bio(self):
        """Gets the bio of this UserPublic.

        User's biography

        :return: The bio of this UserPublic.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UserPublic.

        User's biography

        :param bio: The bio of this UserPublic.
        :type bio: str
        """

        self._bio = bio

    @property
    def cover_picture(self):
        """Gets the cover_picture of this UserPublic.

        Cover picture (backgroud) for the profile

        :return: The cover_picture of this UserPublic.
        :rtype: str
        """
        return self._cover_picture

    @cover_picture.setter
    def cover_picture(self, cover_picture):
        """Sets the cover_picture of this UserPublic.

        Cover picture (backgroud) for the profile

        :param cover_picture: The cover_picture of this UserPublic.
        :type cover_picture: str
        """

        self._cover_picture = cover_picture

    @property
    def followers_count(self):
        """Gets the followers_count of this UserPublic.

        Number of followers the user have

        :return: The followers_count of this UserPublic.
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this UserPublic.

        Number of followers the user have

        :param followers_count: The followers_count of this UserPublic.
        :type followers_count: int
        """

        self._followers_count = followers_count

    @property
    def following_count(self):
        """Gets the following_count of this UserPublic.

        Number of people the user follow

        :return: The following_count of this UserPublic.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count):
        """Sets the following_count of this UserPublic.

        Number of people the user follow

        :param following_count: The following_count of this UserPublic.
        :type following_count: int
        """

        self._following_count = following_count

    @property
    def instruments(self):
        """Gets the instruments of this UserPublic.

        An array of the instrument identifiers. The format of the strings is `{instrument-group}.{instrument-id}`. 

        :return: The instruments of this UserPublic.
        :rtype: List[str]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this UserPublic.

        An array of the instrument identifiers. The format of the strings is `{instrument-group}.{instrument-id}`. 

        :param instruments: The instruments of this UserPublic.
        :type instruments: List[str]
        """

        self._instruments = instruments

    @property
    def liked_scores_count(self):
        """Gets the liked_scores_count of this UserPublic.

        Number of the scores liked by the user

        :return: The liked_scores_count of this UserPublic.
        :rtype: int
        """
        return self._liked_scores_count

    @liked_scores_count.setter
    def liked_scores_count(self, liked_scores_count):
        """Sets the liked_scores_count of this UserPublic.

        Number of the scores liked by the user

        :param liked_scores_count: The liked_scores_count of this UserPublic.
        :type liked_scores_count: int
        """

        self._liked_scores_count = liked_scores_count

    @property
    def owned_public_scores_count(self):
        """Gets the owned_public_scores_count of this UserPublic.

        Number of public scores the user have

        :return: The owned_public_scores_count of this UserPublic.
        :rtype: int
        """
        return self._owned_public_scores_count

    @owned_public_scores_count.setter
    def owned_public_scores_count(self, owned_public_scores_count):
        """Sets the owned_public_scores_count of this UserPublic.

        Number of public scores the user have

        :param owned_public_scores_count: The owned_public_scores_count of this UserPublic.
        :type owned_public_scores_count: int
        """

        self._owned_public_scores_count = owned_public_scores_count

    @property
    def profile_theme(self):
        """Gets the profile_theme of this UserPublic.

        Theme (background) for the profile

        :return: The profile_theme of this UserPublic.
        :rtype: str
        """
        return self._profile_theme

    @profile_theme.setter
    def profile_theme(self, profile_theme):
        """Sets the profile_theme of this UserPublic.

        Theme (background) for the profile

        :param profile_theme: The profile_theme of this UserPublic.
        :type profile_theme: str
        """

        self._profile_theme = profile_theme

    @property
    def registration_date(self):
        """Gets the registration_date of this UserPublic.

        Date the user signed up

        :return: The registration_date of this UserPublic.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this UserPublic.

        Date the user signed up

        :param registration_date: The registration_date of this UserPublic.
        :type registration_date: datetime
        """

        self._registration_date = registration_date
