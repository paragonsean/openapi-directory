# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignmentSubmissionComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, _date: datetime=None, id: str=None, modification_date: datetime=None, submission: str=None, unread: bool=None, user: str=None):
        """AssignmentSubmissionComment - a model defined in OpenAPI

        :param comment: The comment of this AssignmentSubmissionComment.
        :param _date: The _date of this AssignmentSubmissionComment.
        :param id: The id of this AssignmentSubmissionComment.
        :param modification_date: The modification_date of this AssignmentSubmissionComment.
        :param submission: The submission of this AssignmentSubmissionComment.
        :param unread: The unread of this AssignmentSubmissionComment.
        :param user: The user of this AssignmentSubmissionComment.
        """
        self.openapi_types = {
            'comment': str,
            '_date': datetime,
            'id': str,
            'modification_date': datetime,
            'submission': str,
            'unread': bool,
            'user': str
        }

        self.attribute_map = {
            'comment': 'comment',
            '_date': 'date',
            'id': 'id',
            'modification_date': 'modificationDate',
            'submission': 'submission',
            'unread': 'unread',
            'user': 'user'
        }

        self._comment = comment
        self.__date = _date
        self._id = id
        self._modification_date = modification_date
        self._submission = submission
        self._unread = unread
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentSubmissionComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentSubmissionComment of this AssignmentSubmissionComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this AssignmentSubmissionComment.

        The comment text

        :return: The comment of this AssignmentSubmissionComment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AssignmentSubmissionComment.

        The comment text

        :param comment: The comment of this AssignmentSubmissionComment.
        :type comment: str
        """

        self._comment = comment

    @property
    def _date(self):
        """Gets the _date of this AssignmentSubmissionComment.

        The date when the comment was posted

        :return: The _date of this AssignmentSubmissionComment.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AssignmentSubmissionComment.

        The date when the comment was posted

        :param _date: The _date of this AssignmentSubmissionComment.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this AssignmentSubmissionComment.

        The comment unique identifier

        :return: The id of this AssignmentSubmissionComment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentSubmissionComment.

        The comment unique identifier

        :param id: The id of this AssignmentSubmissionComment.
        :type id: str
        """

        self._id = id

    @property
    def modification_date(self):
        """Gets the modification_date of this AssignmentSubmissionComment.

        The date of the last comment modification

        :return: The modification_date of this AssignmentSubmissionComment.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this AssignmentSubmissionComment.

        The date of the last comment modification

        :param modification_date: The modification_date of this AssignmentSubmissionComment.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def submission(self):
        """Gets the submission of this AssignmentSubmissionComment.

        The submission unique identifier

        :return: The submission of this AssignmentSubmissionComment.
        :rtype: str
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this AssignmentSubmissionComment.

        The submission unique identifier

        :param submission: The submission of this AssignmentSubmissionComment.
        :type submission: str
        """

        self._submission = submission

    @property
    def unread(self):
        """Gets the unread of this AssignmentSubmissionComment.

        True if the comment is unread by the current user

        :return: The unread of this AssignmentSubmissionComment.
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this AssignmentSubmissionComment.

        True if the comment is unread by the current user

        :param unread: The unread of this AssignmentSubmissionComment.
        :type unread: bool
        """

        self._unread = unread

    @property
    def user(self):
        """Gets the user of this AssignmentSubmissionComment.

        The author unique identifier

        :return: The user of this AssignmentSubmissionComment.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AssignmentSubmissionComment.

        The author unique identifier

        :param user: The user of this AssignmentSubmissionComment.
        :type user: str
        """

        self._user = user
