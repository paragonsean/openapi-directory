# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collection_capabilities import CollectionCapabilities
from openapi_server.models.collection_privacy import CollectionPrivacy
from openapi_server.models.collection_type import CollectionType
from openapi_server.models.resource_collaborator import ResourceCollaborator
from openapi_server.models.resource_rights import ResourceRights
from openapi_server.models.user_public_summary import UserPublicSummary
from openapi_server import util


class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: str=None, capabilities: CollectionCapabilities=None, collaborators: List[ResourceCollaborator]=None, collections: List[str]=None, creation_date: datetime=None, html_url: str=None, id: str=None, privacy: CollectionPrivacy=None, rights: ResourceRights=None, sharing_key: str=None, title: str=None, type: CollectionType=None, user: UserPublicSummary=None):
        """Collection - a model defined in OpenAPI

        :param app: The app of this Collection.
        :param capabilities: The capabilities of this Collection.
        :param collaborators: The collaborators of this Collection.
        :param collections: The collections of this Collection.
        :param creation_date: The creation_date of this Collection.
        :param html_url: The html_url of this Collection.
        :param id: The id of this Collection.
        :param privacy: The privacy of this Collection.
        :param rights: The rights of this Collection.
        :param sharing_key: The sharing_key of this Collection.
        :param title: The title of this Collection.
        :param type: The type of this Collection.
        :param user: The user of this Collection.
        """
        self.openapi_types = {
            'app': str,
            'capabilities': CollectionCapabilities,
            'collaborators': List[ResourceCollaborator],
            'collections': List[str],
            'creation_date': datetime,
            'html_url': str,
            'id': str,
            'privacy': CollectionPrivacy,
            'rights': ResourceRights,
            'sharing_key': str,
            'title': str,
            'type': CollectionType,
            'user': UserPublicSummary
        }

        self.attribute_map = {
            'app': 'app',
            'capabilities': 'capabilities',
            'collaborators': 'collaborators',
            'collections': 'collections',
            'creation_date': 'creationDate',
            'html_url': 'htmlUrl',
            'id': 'id',
            'privacy': 'privacy',
            'rights': 'rights',
            'sharing_key': 'sharingKey',
            'title': 'title',
            'type': 'type',
            'user': 'user'
        }

        self._app = app
        self._capabilities = capabilities
        self._collaborators = collaborators
        self._collections = collections
        self._creation_date = creation_date
        self._html_url = html_url
        self._id = id
        self._privacy = privacy
        self._rights = rights
        self._sharing_key = sharing_key
        self._title = title
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection of this Collection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this Collection.

        If this directory is dedicated to an app, the unique idenfier of this app

        :return: The app of this Collection.
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this Collection.

        If this directory is dedicated to an app, the unique idenfier of this app

        :param app: The app of this Collection.
        :type app: str
        """

        self._app = app

    @property
    def capabilities(self):
        """Gets the capabilities of this Collection.


        :return: The capabilities of this Collection.
        :rtype: CollectionCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Collection.


        :param capabilities: The capabilities of this Collection.
        :type capabilities: CollectionCapabilities
        """

        self._capabilities = capabilities

    @property
    def collaborators(self):
        """Gets the collaborators of this Collection.

        The list of the collaborators of the collection

        :return: The collaborators of this Collection.
        :rtype: List[ResourceCollaborator]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this Collection.

        The list of the collaborators of the collection

        :param collaborators: The collaborators of this Collection.
        :type collaborators: List[ResourceCollaborator]
        """

        self._collaborators = collaborators

    @property
    def collections(self):
        """Gets the collections of this Collection.

        The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.

        :return: The collections of this Collection.
        :rtype: List[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this Collection.

        The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.

        :param collections: The collections of this Collection.
        :type collections: List[str]
        """

        self._collections = collections

    @property
    def creation_date(self):
        """Gets the creation_date of this Collection.

        The date when the collection was created

        :return: The creation_date of this Collection.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Collection.

        The date when the collection was created

        :param creation_date: The creation_date of this Collection.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def html_url(self):
        """Gets the html_url of this Collection.

        The url where the collection can be viewed in a web browser

        :return: The html_url of this Collection.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Collection.

        The url where the collection can be viewed in a web browser

        :param html_url: The html_url of this Collection.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Collection.

        Unique identifier of the collection

        :return: The id of this Collection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collection.

        Unique identifier of the collection

        :param id: The id of this Collection.
        :type id: str
        """

        self._id = id

    @property
    def privacy(self):
        """Gets the privacy of this Collection.


        :return: The privacy of this Collection.
        :rtype: CollectionPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this Collection.


        :param privacy: The privacy of this Collection.
        :type privacy: CollectionPrivacy
        """

        self._privacy = privacy

    @property
    def rights(self):
        """Gets the rights of this Collection.


        :return: The rights of this Collection.
        :rtype: ResourceRights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this Collection.


        :param rights: The rights of this Collection.
        :type rights: ResourceRights
        """

        self._rights = rights

    @property
    def sharing_key(self):
        """Gets the sharing_key of this Collection.

        The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)

        :return: The sharing_key of this Collection.
        :rtype: str
        """
        return self._sharing_key

    @sharing_key.setter
    def sharing_key(self, sharing_key):
        """Sets the sharing_key of this Collection.

        The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)

        :param sharing_key: The sharing_key of this Collection.
        :type sharing_key: str
        """

        self._sharing_key = sharing_key

    @property
    def title(self):
        """Gets the title of this Collection.

        The title of the collection

        :return: The title of this Collection.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Collection.

        The title of the collection

        :param title: The title of this Collection.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Collection.


        :return: The type of this Collection.
        :rtype: CollectionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Collection.


        :param type: The type of this Collection.
        :type type: CollectionType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this Collection.


        :return: The user of this Collection.
        :rtype: UserPublicSummary
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Collection.


        :param user: The user of this Collection.
        :type user: UserPublicSummary
        """

        self._user = user
