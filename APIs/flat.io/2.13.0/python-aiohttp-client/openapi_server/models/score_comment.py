# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_comment_context import ScoreCommentContext
from openapi_server import util


class ScoreComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, context: ScoreCommentContext=None, _date: datetime=None, id: str=None, mentions: List[str]=None, modification_date: datetime=None, raw_comment: str=None, reply_to: str=None, resolved: bool=None, resolved_by: str=None, revision: str=None, score: str=None, spam: bool=None, type: str=None, user: str=None):
        """ScoreComment - a model defined in OpenAPI

        :param comment: The comment of this ScoreComment.
        :param context: The context of this ScoreComment.
        :param _date: The _date of this ScoreComment.
        :param id: The id of this ScoreComment.
        :param mentions: The mentions of this ScoreComment.
        :param modification_date: The modification_date of this ScoreComment.
        :param raw_comment: The raw_comment of this ScoreComment.
        :param reply_to: The reply_to of this ScoreComment.
        :param resolved: The resolved of this ScoreComment.
        :param resolved_by: The resolved_by of this ScoreComment.
        :param revision: The revision of this ScoreComment.
        :param score: The score of this ScoreComment.
        :param spam: The spam of this ScoreComment.
        :param type: The type of this ScoreComment.
        :param user: The user of this ScoreComment.
        """
        self.openapi_types = {
            'comment': str,
            'context': ScoreCommentContext,
            '_date': datetime,
            'id': str,
            'mentions': List[str],
            'modification_date': datetime,
            'raw_comment': str,
            'reply_to': str,
            'resolved': bool,
            'resolved_by': str,
            'revision': str,
            'score': str,
            'spam': bool,
            'type': str,
            'user': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'context': 'context',
            '_date': 'date',
            'id': 'id',
            'mentions': 'mentions',
            'modification_date': 'modificationDate',
            'raw_comment': 'rawComment',
            'reply_to': 'replyTo',
            'resolved': 'resolved',
            'resolved_by': 'resolvedBy',
            'revision': 'revision',
            'score': 'score',
            'spam': 'spam',
            'type': 'type',
            'user': 'user'
        }

        self._comment = comment
        self._context = context
        self.__date = _date
        self._id = id
        self._mentions = mentions
        self._modification_date = modification_date
        self._raw_comment = raw_comment
        self._reply_to = reply_to
        self._resolved = resolved
        self._resolved_by = resolved_by
        self._revision = revision
        self._score = score
        self._spam = spam
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreComment of this ScoreComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this ScoreComment.

        The comment text that can includes mentions using the following format: `@[id:username]`. 

        :return: The comment of this ScoreComment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ScoreComment.

        The comment text that can includes mentions using the following format: `@[id:username]`. 

        :param comment: The comment of this ScoreComment.
        :type comment: str
        """

        self._comment = comment

    @property
    def context(self):
        """Gets the context of this ScoreComment.


        :return: The context of this ScoreComment.
        :rtype: ScoreCommentContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ScoreComment.


        :param context: The context of this ScoreComment.
        :type context: ScoreCommentContext
        """

        self._context = context

    @property
    def _date(self):
        """Gets the _date of this ScoreComment.

        The date when the comment was posted

        :return: The _date of this ScoreComment.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ScoreComment.

        The date when the comment was posted

        :param _date: The _date of this ScoreComment.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this ScoreComment.

        The comment unique identifier

        :return: The id of this ScoreComment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoreComment.

        The comment unique identifier

        :param id: The id of this ScoreComment.
        :type id: str
        """

        self._id = id

    @property
    def mentions(self):
        """Gets the mentions of this ScoreComment.

        The list of user identifier mentioned on the score

        :return: The mentions of this ScoreComment.
        :rtype: List[str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this ScoreComment.

        The list of user identifier mentioned on the score

        :param mentions: The mentions of this ScoreComment.
        :type mentions: List[str]
        """

        self._mentions = mentions

    @property
    def modification_date(self):
        """Gets the modification_date of this ScoreComment.

        The date of the last comment modification

        :return: The modification_date of this ScoreComment.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ScoreComment.

        The date of the last comment modification

        :param modification_date: The modification_date of this ScoreComment.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def raw_comment(self):
        """Gets the raw_comment of this ScoreComment.

        A raw version of the comment, that can be displayed without parsing the mentions. 

        :return: The raw_comment of this ScoreComment.
        :rtype: str
        """
        return self._raw_comment

    @raw_comment.setter
    def raw_comment(self, raw_comment):
        """Sets the raw_comment of this ScoreComment.

        A raw version of the comment, that can be displayed without parsing the mentions. 

        :param raw_comment: The raw_comment of this ScoreComment.
        :type raw_comment: str
        """

        self._raw_comment = raw_comment

    @property
    def reply_to(self):
        """Gets the reply_to of this ScoreComment.

        When the comment is a reply to another comment, the unique identifier of the parent comment 

        :return: The reply_to of this ScoreComment.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this ScoreComment.

        When the comment is a reply to another comment, the unique identifier of the parent comment 

        :param reply_to: The reply_to of this ScoreComment.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def resolved(self):
        """Gets the resolved of this ScoreComment.

        For inline comments, the comment can be marked as resolved and will be hidden in the future responses 

        :return: The resolved of this ScoreComment.
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this ScoreComment.

        For inline comments, the comment can be marked as resolved and will be hidden in the future responses 

        :param resolved: The resolved of this ScoreComment.
        :type resolved: bool
        """

        self._resolved = resolved

    @property
    def resolved_by(self):
        """Gets the resolved_by of this ScoreComment.

        If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved 

        :return: The resolved_by of this ScoreComment.
        :rtype: str
        """
        return self._resolved_by

    @resolved_by.setter
    def resolved_by(self, resolved_by):
        """Sets the resolved_by of this ScoreComment.

        If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved 

        :param resolved_by: The resolved_by of this ScoreComment.
        :type resolved_by: str
        """

        self._resolved_by = resolved_by

    @property
    def revision(self):
        """Gets the revision of this ScoreComment.

        The unique identifier of revision the comment was posted

        :return: The revision of this ScoreComment.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ScoreComment.

        The unique identifier of revision the comment was posted

        :param revision: The revision of this ScoreComment.
        :type revision: str
        """

        self._revision = revision

    @property
    def score(self):
        """Gets the score of this ScoreComment.

        The unique identifier of the score where the comment was posted

        :return: The score of this ScoreComment.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ScoreComment.

        The unique identifier of the score where the comment was posted

        :param score: The score of this ScoreComment.
        :type score: str
        """

        self._score = score

    @property
    def spam(self):
        """Gets the spam of this ScoreComment.

        `true  if the message has been detected as spam and hidden from other users 

        :return: The spam of this ScoreComment.
        :rtype: bool
        """
        return self._spam

    @spam.setter
    def spam(self, spam):
        """Sets the spam of this ScoreComment.

        `true  if the message has been detected as spam and hidden from other users 

        :param spam: The spam of this ScoreComment.
        :type spam: bool
        """

        self._spam = spam

    @property
    def type(self):
        """Gets the type of this ScoreComment.

        The type of the comment

        :return: The type of this ScoreComment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScoreComment.

        The type of the comment

        :param type: The type of this ScoreComment.
        :type type: str
        """
        allowed_values = ["document", "inline"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this ScoreComment.

        The author unique identifier

        :return: The user of this ScoreComment.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ScoreComment.

        The author unique identifier

        :param user: The user of this ScoreComment.
        :type user: str
        """

        self._user = user
