# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_track_point import ScoreTrackPoint
from openapi_server.models.score_track_state import ScoreTrackState
from openapi_server import util


class ScoreTrackUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: bool=None, state: ScoreTrackState=ScoreTrackState.DRAFT, synchronization_points: List[ScoreTrackPoint]=None, title: str=None):
        """ScoreTrackUpdate - a model defined in OpenAPI

        :param default: The default of this ScoreTrackUpdate.
        :param state: The state of this ScoreTrackUpdate.
        :param synchronization_points: The synchronization_points of this ScoreTrackUpdate.
        :param title: The title of this ScoreTrackUpdate.
        """
        self.openapi_types = {
            'default': bool,
            'state': ScoreTrackState,
            'synchronization_points': List[ScoreTrackPoint],
            'title': str
        }

        self.attribute_map = {
            'default': 'default',
            'state': 'state',
            'synchronization_points': 'synchronizationPoints',
            'title': 'title'
        }

        self._default = default
        self._state = state
        self._synchronization_points = synchronization_points
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreTrackUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreTrackUpdate of this ScoreTrackUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this ScoreTrackUpdate.

        True if the track should be used as default audio source

        :return: The default of this ScoreTrackUpdate.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ScoreTrackUpdate.

        True if the track should be used as default audio source

        :param default: The default of this ScoreTrackUpdate.
        :type default: bool
        """

        self._default = default

    @property
    def state(self):
        """Gets the state of this ScoreTrackUpdate.


        :return: The state of this ScoreTrackUpdate.
        :rtype: ScoreTrackState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScoreTrackUpdate.


        :param state: The state of this ScoreTrackUpdate.
        :type state: ScoreTrackState
        """

        self._state = state

    @property
    def synchronization_points(self):
        """Gets the synchronization_points of this ScoreTrackUpdate.


        :return: The synchronization_points of this ScoreTrackUpdate.
        :rtype: List[ScoreTrackPoint]
        """
        return self._synchronization_points

    @synchronization_points.setter
    def synchronization_points(self, synchronization_points):
        """Sets the synchronization_points of this ScoreTrackUpdate.


        :param synchronization_points: The synchronization_points of this ScoreTrackUpdate.
        :type synchronization_points: List[ScoreTrackPoint]
        """

        self._synchronization_points = synchronization_points

    @property
    def title(self):
        """Gets the title of this ScoreTrackUpdate.

        Title of the track

        :return: The title of this ScoreTrackUpdate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoreTrackUpdate.

        Title of the track

        :param title: The title of this ScoreTrackUpdate.
        :type title: str
        """

        self._title = title
