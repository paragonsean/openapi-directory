# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_track_point import ScoreTrackPoint
from openapi_server.models.score_track_state import ScoreTrackState
from openapi_server.models.score_track_type import ScoreTrackType
from openapi_server import util


class ScoreTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, creator: str=None, default: bool=None, id: str=None, media_id: str=None, modification_date: datetime=None, score: str=None, state: ScoreTrackState=ScoreTrackState.DRAFT, synchronization_points: List[ScoreTrackPoint]=None, title: str=None, type: ScoreTrackType=None, url: str=None):
        """ScoreTrack - a model defined in OpenAPI

        :param creation_date: The creation_date of this ScoreTrack.
        :param creator: The creator of this ScoreTrack.
        :param default: The default of this ScoreTrack.
        :param id: The id of this ScoreTrack.
        :param media_id: The media_id of this ScoreTrack.
        :param modification_date: The modification_date of this ScoreTrack.
        :param score: The score of this ScoreTrack.
        :param state: The state of this ScoreTrack.
        :param synchronization_points: The synchronization_points of this ScoreTrack.
        :param title: The title of this ScoreTrack.
        :param type: The type of this ScoreTrack.
        :param url: The url of this ScoreTrack.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'creator': str,
            'default': bool,
            'id': str,
            'media_id': str,
            'modification_date': datetime,
            'score': str,
            'state': ScoreTrackState,
            'synchronization_points': List[ScoreTrackPoint],
            'title': str,
            'type': ScoreTrackType,
            'url': str
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'creator': 'creator',
            'default': 'default',
            'id': 'id',
            'media_id': 'mediaId',
            'modification_date': 'modificationDate',
            'score': 'score',
            'state': 'state',
            'synchronization_points': 'synchronizationPoints',
            'title': 'title',
            'type': 'type',
            'url': 'url'
        }

        self._creation_date = creation_date
        self._creator = creator
        self._default = default
        self._id = id
        self._media_id = media_id
        self._modification_date = modification_date
        self._score = score
        self._state = state
        self._synchronization_points = synchronization_points
        self._title = title
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreTrack of this ScoreTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this ScoreTrack.

        The creation date of the track

        :return: The creation_date of this ScoreTrack.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ScoreTrack.

        The creation date of the track

        :param creation_date: The creation_date of this ScoreTrack.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def creator(self):
        """Gets the creator of this ScoreTrack.

        The unique identifier of the track creator

        :return: The creator of this ScoreTrack.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ScoreTrack.

        The unique identifier of the track creator

        :param creator: The creator of this ScoreTrack.
        :type creator: str
        """

        self._creator = creator

    @property
    def default(self):
        """Gets the default of this ScoreTrack.

        True if the track should be used as default audio source

        :return: The default of this ScoreTrack.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ScoreTrack.

        True if the track should be used as default audio source

        :param default: The default of this ScoreTrack.
        :type default: bool
        """

        self._default = default

    @property
    def id(self):
        """Gets the id of this ScoreTrack.

        The unique identifier of the score track

        :return: The id of this ScoreTrack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoreTrack.

        The unique identifier of the score track

        :param id: The id of this ScoreTrack.
        :type id: str
        """

        self._id = id

    @property
    def media_id(self):
        """Gets the media_id of this ScoreTrack.

        The unique identifier of the track when hosted on an external service. For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ` 

        :return: The media_id of this ScoreTrack.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this ScoreTrack.

        The unique identifier of the track when hosted on an external service. For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ` 

        :param media_id: The media_id of this ScoreTrack.
        :type media_id: str
        """

        self._media_id = media_id

    @property
    def modification_date(self):
        """Gets the modification_date of this ScoreTrack.

        The modification date of the track

        :return: The modification_date of this ScoreTrack.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ScoreTrack.

        The modification date of the track

        :param modification_date: The modification_date of this ScoreTrack.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def score(self):
        """Gets the score of this ScoreTrack.

        The unique identifier of the score

        :return: The score of this ScoreTrack.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ScoreTrack.

        The unique identifier of the score

        :param score: The score of this ScoreTrack.
        :type score: str
        """

        self._score = score

    @property
    def state(self):
        """Gets the state of this ScoreTrack.


        :return: The state of this ScoreTrack.
        :rtype: ScoreTrackState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScoreTrack.


        :param state: The state of this ScoreTrack.
        :type state: ScoreTrackState
        """

        self._state = state

    @property
    def synchronization_points(self):
        """Gets the synchronization_points of this ScoreTrack.


        :return: The synchronization_points of this ScoreTrack.
        :rtype: List[ScoreTrackPoint]
        """
        return self._synchronization_points

    @synchronization_points.setter
    def synchronization_points(self, synchronization_points):
        """Sets the synchronization_points of this ScoreTrack.


        :param synchronization_points: The synchronization_points of this ScoreTrack.
        :type synchronization_points: List[ScoreTrackPoint]
        """

        self._synchronization_points = synchronization_points

    @property
    def title(self):
        """Gets the title of this ScoreTrack.

        Title of the track

        :return: The title of this ScoreTrack.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScoreTrack.

        Title of the track

        :param title: The title of this ScoreTrack.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ScoreTrack.


        :return: The type of this ScoreTrack.
        :rtype: ScoreTrackType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScoreTrack.


        :param type: The type of this ScoreTrack.
        :type type: ScoreTrackType
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this ScoreTrack.

        The URL of the track

        :return: The url of this ScoreTrack.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScoreTrack.

        The URL of the track

        :param url: The url of this ScoreTrack.
        :type url: str
        """

        self._url = url
