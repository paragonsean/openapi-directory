/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaScoreSharingMode from './MediaScoreSharingMode';

/**
 * The MediaAttachment model module.
 * @module model/MediaAttachment
 * @version 2.13.0
 */
class MediaAttachment {
    /**
     * Constructs a new <code>MediaAttachment</code>.
     * Media attachment. The API will automatically resolve the details, oEmbed, and media available if possible and return them in this object 
     * @alias module:model/MediaAttachment
     */
    constructor() { 
        
        MediaAttachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaAttachment} obj Optional instance to populate.
     * @return {module:model/MediaAttachment} The populated <code>MediaAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaAttachment();

            if (data.hasOwnProperty('authorName')) {
                obj['authorName'] = ApiClient.convertToType(data['authorName'], 'String');
            }
            if (data.hasOwnProperty('authorUrl')) {
                obj['authorUrl'] = ApiClient.convertToType(data['authorUrl'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('googleDriveFileId')) {
                obj['googleDriveFileId'] = ApiClient.convertToType(data['googleDriveFileId'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('htmlHeight')) {
                obj['htmlHeight'] = ApiClient.convertToType(data['htmlHeight'], 'String');
            }
            if (data.hasOwnProperty('htmlWidth')) {
                obj['htmlWidth'] = ApiClient.convertToType(data['htmlWidth'], 'String');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('lockScoreTemplate')) {
                obj['lockScoreTemplate'] = ApiClient.convertToType(data['lockScoreTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'String');
            }
            if (data.hasOwnProperty('sharingMode')) {
                obj['sharingMode'] = MediaScoreSharingMode.constructFromObject(data['sharingMode']);
            }
            if (data.hasOwnProperty('thumbnailHeight')) {
                obj['thumbnailHeight'] = ApiClient.convertToType(data['thumbnailHeight'], 'Number');
            }
            if (data.hasOwnProperty('thumbnailUrl')) {
                obj['thumbnailUrl'] = ApiClient.convertToType(data['thumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('thumbnailWidth')) {
                obj['thumbnailWidth'] = ApiClient.convertToType(data['thumbnailWidth'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('track')) {
                obj['track'] = ApiClient.convertToType(data['track'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('worksheet')) {
                obj['worksheet'] = ApiClient.convertToType(data['worksheet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaAttachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorName'] && !(typeof data['authorName'] === 'string' || data['authorName'] instanceof String)) {
            throw new Error("Expected the field `authorName` to be a primitive type in the JSON string but got " + data['authorName']);
        }
        // ensure the json data is a string
        if (data['authorUrl'] && !(typeof data['authorUrl'] === 'string' || data['authorUrl'] instanceof String)) {
            throw new Error("Expected the field `authorUrl` to be a primitive type in the JSON string but got " + data['authorUrl']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['googleDriveFileId'] && !(typeof data['googleDriveFileId'] === 'string' || data['googleDriveFileId'] instanceof String)) {
            throw new Error("Expected the field `googleDriveFileId` to be a primitive type in the JSON string but got " + data['googleDriveFileId']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['htmlHeight'] && !(typeof data['htmlHeight'] === 'string' || data['htmlHeight'] instanceof String)) {
            throw new Error("Expected the field `htmlHeight` to be a primitive type in the JSON string but got " + data['htmlHeight']);
        }
        // ensure the json data is a string
        if (data['htmlWidth'] && !(typeof data['htmlWidth'] === 'string' || data['htmlWidth'] instanceof String)) {
            throw new Error("Expected the field `htmlWidth` to be a primitive type in the JSON string but got " + data['htmlWidth']);
        }
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }
        // ensure the json data is a string
        if (data['score'] && !(typeof data['score'] === 'string' || data['score'] instanceof String)) {
            throw new Error("Expected the field `score` to be a primitive type in the JSON string but got " + data['score']);
        }
        // ensure the json data is a string
        if (data['thumbnailUrl'] && !(typeof data['thumbnailUrl'] === 'string' || data['thumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got " + data['thumbnailUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['track'] && !(typeof data['track'] === 'string' || data['track'] instanceof String)) {
            throw new Error("Expected the field `track` to be a primitive type in the JSON string but got " + data['track']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['worksheet'] && !(typeof data['worksheet'] === 'string' || data['worksheet'] instanceof String)) {
            throw new Error("Expected the field `worksheet` to be a primitive type in the JSON string but got " + data['worksheet']);
        }

        return true;
    }


}



/**
 * The resolved author name of the attachment
 * @member {String} authorName
 */
MediaAttachment.prototype['authorName'] = undefined;

/**
 * The resolved author url of the attachment
 * @member {String} authorUrl
 */
MediaAttachment.prototype['authorUrl'] = undefined;

/**
 * The resolved description of the attachment
 * @member {String} description
 */
MediaAttachment.prototype['description'] = undefined;

/**
 * The ID of the Google Drive File
 * @member {String} googleDriveFileId
 */
MediaAttachment.prototype['googleDriveFileId'] = undefined;

/**
 * If the attachment type is `rich` or `video`, the HTML code of the media to display 
 * @member {String} html
 */
MediaAttachment.prototype['html'] = undefined;

/**
 * If the `html` is available, the height of the widget
 * @member {String} htmlHeight
 */
MediaAttachment.prototype['htmlHeight'] = undefined;

/**
 * If the `html` is available, the width of the widget
 * @member {String} htmlWidth
 */
MediaAttachment.prototype['htmlWidth'] = undefined;

/**
 * The URL of the icon
 * @member {String} iconUrl
 */
MediaAttachment.prototype['iconUrl'] = undefined;

/**
 * To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.
 * @member {Boolean} lockScoreTemplate
 */
MediaAttachment.prototype['lockScoreTemplate'] = undefined;

/**
 * The mine type of the file
 * @member {String} mimeType
 */
MediaAttachment.prototype['mimeType'] = undefined;

/**
 * An unique revision identifier of a score
 * @member {String} revision
 */
MediaAttachment.prototype['revision'] = undefined;

/**
 * An unique Flat score identifier
 * @member {String} score
 */
MediaAttachment.prototype['score'] = undefined;

/**
 * @member {module:model/MediaScoreSharingMode} sharingMode
 */
MediaAttachment.prototype['sharingMode'] = undefined;

/**
 * If the `thumbnailUrl` is available, the width of the thumbnail 
 * @member {Number} thumbnailHeight
 */
MediaAttachment.prototype['thumbnailHeight'] = undefined;

/**
 * If the attachment type is `rich`, `video`, `photo` or `link`, a displayable thumbnail for this attachment 
 * @member {String} thumbnailUrl
 */
MediaAttachment.prototype['thumbnailUrl'] = undefined;

/**
 * If the `thumbnailUrl` is available, the width of the thumbnail 
 * @member {Number} thumbnailWidth
 */
MediaAttachment.prototype['thumbnailWidth'] = undefined;

/**
 * The resolved title of the attachment
 * @member {String} title
 */
MediaAttachment.prototype['title'] = undefined;

/**
 * A unique track identifier
 * @member {String} track
 */
MediaAttachment.prototype['track'] = undefined;

/**
 * The type of the assignment resolved: * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment. * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property. 
 * @member {module:model/MediaAttachment.TypeEnum} type
 */
MediaAttachment.prototype['type'] = undefined;

/**
 * The url of the attachment
 * @member {String} url
 */
MediaAttachment.prototype['url'] = undefined;

/**
 * An unique worksheet identifier
 * @member {String} worksheet
 */
MediaAttachment.prototype['worksheet'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MediaAttachment['TypeEnum'] = {

    /**
     * value: "rich"
     * @const
     */
    "rich": "rich",

    /**
     * value: "photo"
     * @const
     */
    "photo": "photo",

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "flat"
     * @const
     */
    "flat": "flat",

    /**
     * value: "googleDrive"
     * @const
     */
    "googleDrive": "googleDrive",

    /**
     * value: "worksheet"
     * @const
     */
    "worksheet": "worksheet",

    /**
     * value: "performance"
     * @const
     */
    "performance": "performance"
};



export default MediaAttachment;

