/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScoreCommentContext from './ScoreCommentContext';

/**
 * The ScoreComment model module.
 * @module model/ScoreComment
 * @version 2.13.0
 */
class ScoreComment {
    /**
     * Constructs a new <code>ScoreComment</code>.
     * Comment added on a sheet music
     * @alias module:model/ScoreComment
     */
    constructor() { 
        
        ScoreComment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoreComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoreComment} obj Optional instance to populate.
     * @return {module:model/ScoreComment} The populated <code>ScoreComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoreComment();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ScoreCommentContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mentions')) {
                obj['mentions'] = ApiClient.convertToType(data['mentions'], ['String']);
            }
            if (data.hasOwnProperty('modificationDate')) {
                obj['modificationDate'] = ApiClient.convertToType(data['modificationDate'], 'Date');
            }
            if (data.hasOwnProperty('rawComment')) {
                obj['rawComment'] = ApiClient.convertToType(data['rawComment'], 'String');
            }
            if (data.hasOwnProperty('replyTo')) {
                obj['replyTo'] = ApiClient.convertToType(data['replyTo'], 'String');
            }
            if (data.hasOwnProperty('resolved')) {
                obj['resolved'] = ApiClient.convertToType(data['resolved'], 'Boolean');
            }
            if (data.hasOwnProperty('resolvedBy')) {
                obj['resolvedBy'] = ApiClient.convertToType(data['resolvedBy'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'String');
            }
            if (data.hasOwnProperty('spam')) {
                obj['spam'] = ApiClient.convertToType(data['spam'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoreComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoreComment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          ScoreCommentContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mentions'])) {
            throw new Error("Expected the field `mentions` to be an array in the JSON data but got " + data['mentions']);
        }
        // ensure the json data is a string
        if (data['rawComment'] && !(typeof data['rawComment'] === 'string' || data['rawComment'] instanceof String)) {
            throw new Error("Expected the field `rawComment` to be a primitive type in the JSON string but got " + data['rawComment']);
        }
        // ensure the json data is a string
        if (data['replyTo'] && !(typeof data['replyTo'] === 'string' || data['replyTo'] instanceof String)) {
            throw new Error("Expected the field `replyTo` to be a primitive type in the JSON string but got " + data['replyTo']);
        }
        // ensure the json data is a string
        if (data['resolvedBy'] && !(typeof data['resolvedBy'] === 'string' || data['resolvedBy'] instanceof String)) {
            throw new Error("Expected the field `resolvedBy` to be a primitive type in the JSON string but got " + data['resolvedBy']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }
        // ensure the json data is a string
        if (data['score'] && !(typeof data['score'] === 'string' || data['score'] instanceof String)) {
            throw new Error("Expected the field `score` to be a primitive type in the JSON string but got " + data['score']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * The comment text that can includes mentions using the following format: `@[id:username]`. 
 * @member {String} comment
 */
ScoreComment.prototype['comment'] = undefined;

/**
 * @member {module:model/ScoreCommentContext} context
 */
ScoreComment.prototype['context'] = undefined;

/**
 * The date when the comment was posted
 * @member {Date} date
 */
ScoreComment.prototype['date'] = undefined;

/**
 * The comment unique identifier
 * @member {String} id
 */
ScoreComment.prototype['id'] = undefined;

/**
 * The list of user identifier mentioned on the score
 * @member {Array.<String>} mentions
 */
ScoreComment.prototype['mentions'] = undefined;

/**
 * The date of the last comment modification
 * @member {Date} modificationDate
 */
ScoreComment.prototype['modificationDate'] = undefined;

/**
 * A raw version of the comment, that can be displayed without parsing the mentions. 
 * @member {String} rawComment
 */
ScoreComment.prototype['rawComment'] = undefined;

/**
 * When the comment is a reply to another comment, the unique identifier of the parent comment 
 * @member {String} replyTo
 */
ScoreComment.prototype['replyTo'] = undefined;

/**
 * For inline comments, the comment can be marked as resolved and will be hidden in the future responses 
 * @member {Boolean} resolved
 */
ScoreComment.prototype['resolved'] = undefined;

/**
 * If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved 
 * @member {String} resolvedBy
 */
ScoreComment.prototype['resolvedBy'] = undefined;

/**
 * The unique identifier of revision the comment was posted
 * @member {String} revision
 */
ScoreComment.prototype['revision'] = undefined;

/**
 * The unique identifier of the score where the comment was posted
 * @member {String} score
 */
ScoreComment.prototype['score'] = undefined;

/**
 * `true  if the message has been detected as spam and hidden from other users 
 * @member {Boolean} spam
 */
ScoreComment.prototype['spam'] = undefined;

/**
 * The type of the comment
 * @member {module:model/ScoreComment.TypeEnum} type
 */
ScoreComment.prototype['type'] = undefined;

/**
 * The author unique identifier
 * @member {String} user
 */
ScoreComment.prototype['user'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ScoreComment['TypeEnum'] = {

    /**
     * value: "document"
     * @const
     */
    "document": "document",

    /**
     * value: "inline"
     * @const
     */
    "inline": "inline"
};



export default ScoreComment;

