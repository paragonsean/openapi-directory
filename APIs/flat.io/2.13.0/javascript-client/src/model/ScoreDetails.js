/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceCollaborator from './ResourceCollaborator';
import ResourceRights from './ResourceRights';
import ScoreCommentsCounts from './ScoreCommentsCounts';
import ScoreCreationType from './ScoreCreationType';
import ScoreLicense from './ScoreLicense';
import ScoreLikesCounts from './ScoreLikesCounts';
import ScorePlaysCounts from './ScorePlaysCounts';
import ScorePrivacy from './ScorePrivacy';
import ScoreSummary from './ScoreSummary';
import ScoreViewsCounts from './ScoreViewsCounts';
import UserPublicSummary from './UserPublicSummary';

/**
 * The ScoreDetails model module.
 * @module model/ScoreDetails
 * @version 2.13.0
 */
class ScoreDetails {
    /**
     * Constructs a new <code>ScoreDetails</code>.
     * The score and all its details
     * @alias module:model/ScoreDetails
     * @implements module:model/ScoreSummary
     */
    constructor() { 
        ScoreSummary.initialize(this);
        ScoreDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoreDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoreDetails} obj Optional instance to populate.
     * @return {module:model/ScoreDetails} The populated <code>ScoreDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoreDetails();
            ScoreSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('htmlUrl')) {
                obj['htmlUrl'] = ApiClient.convertToType(data['htmlUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = ScorePrivacy.constructFromObject(data['privacy']);
            }
            if (data.hasOwnProperty('sharingKey')) {
                obj['sharingKey'] = ApiClient.convertToType(data['sharingKey'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserPublicSummary.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('arranger')) {
                obj['arranger'] = ApiClient.convertToType(data['arranger'], 'String');
            }
            if (data.hasOwnProperty('collaborators')) {
                obj['collaborators'] = ApiClient.convertToType(data['collaborators'], [ResourceCollaborator]);
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], ['String']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ScoreCommentsCounts.constructFromObject(data['comments']);
            }
            if (data.hasOwnProperty('composer')) {
                obj['composer'] = ApiClient.convertToType(data['composer'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('creationType')) {
                obj['creationType'] = ScoreCreationType.constructFromObject(data['creationType']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('durationTime')) {
                obj['durationTime'] = ApiClient.convertToType(data['durationTime'], 'Number');
            }
            if (data.hasOwnProperty('googleDriveFileId')) {
                obj['googleDriveFileId'] = ApiClient.convertToType(data['googleDriveFileId'], 'String');
            }
            if (data.hasOwnProperty('instruments')) {
                obj['instruments'] = ApiClient.convertToType(data['instruments'], ['String']);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ScoreLicense.constructFromObject(data['license']);
            }
            if (data.hasOwnProperty('licenseText')) {
                obj['licenseText'] = ApiClient.convertToType(data['licenseText'], 'String');
            }
            if (data.hasOwnProperty('likes')) {
                obj['likes'] = ScoreLikesCounts.constructFromObject(data['likes']);
            }
            if (data.hasOwnProperty('lyricist')) {
                obj['lyricist'] = ApiClient.convertToType(data['lyricist'], 'String');
            }
            if (data.hasOwnProperty('mainTempoQpm')) {
                obj['mainTempoQpm'] = ApiClient.convertToType(data['mainTempoQpm'], 'Number');
            }
            if (data.hasOwnProperty('modificationDate')) {
                obj['modificationDate'] = ApiClient.convertToType(data['modificationDate'], 'Date');
            }
            if (data.hasOwnProperty('numberMeasures')) {
                obj['numberMeasures'] = ApiClient.convertToType(data['numberMeasures'], 'Number');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('parentScore')) {
                obj['parentScore'] = ApiClient.convertToType(data['parentScore'], 'String');
            }
            if (data.hasOwnProperty('plays')) {
                obj['plays'] = ScorePlaysCounts.constructFromObject(data['plays']);
            }
            if (data.hasOwnProperty('publicationDate')) {
                obj['publicationDate'] = ApiClient.convertToType(data['publicationDate'], 'Date');
            }
            if (data.hasOwnProperty('rights')) {
                obj['rights'] = ResourceRights.constructFromObject(data['rights']);
            }
            if (data.hasOwnProperty('samples')) {
                obj['samples'] = ApiClient.convertToType(data['samples'], ['String']);
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ScoreViewsCounts.constructFromObject(data['views']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoreDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoreDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['htmlUrl'] && !(typeof data['htmlUrl'] === 'string' || data['htmlUrl'] instanceof String)) {
            throw new Error("Expected the field `htmlUrl` to be a primitive type in the JSON string but got " + data['htmlUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['sharingKey'] && !(typeof data['sharingKey'] === 'string' || data['sharingKey'] instanceof String)) {
            throw new Error("Expected the field `sharingKey` to be a primitive type in the JSON string but got " + data['sharingKey']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserPublicSummary.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['arranger'] && !(typeof data['arranger'] === 'string' || data['arranger'] instanceof String)) {
            throw new Error("Expected the field `arranger` to be a primitive type in the JSON string but got " + data['arranger']);
        }
        if (data['collaborators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collaborators'])) {
                throw new Error("Expected the field `collaborators` to be an array in the JSON data but got " + data['collaborators']);
            }
            // validate the optional field `collaborators` (array)
            for (const item of data['collaborators']) {
                ResourceCollaborator.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections'])) {
            throw new Error("Expected the field `collections` to be an array in the JSON data but got " + data['collections']);
        }
        // validate the optional field `comments`
        if (data['comments']) { // data not null
          ScoreCommentsCounts.validateJSON(data['comments']);
        }
        // ensure the json data is a string
        if (data['composer'] && !(typeof data['composer'] === 'string' || data['composer'] instanceof String)) {
            throw new Error("Expected the field `composer` to be a primitive type in the JSON string but got " + data['composer']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['googleDriveFileId'] && !(typeof data['googleDriveFileId'] === 'string' || data['googleDriveFileId'] instanceof String)) {
            throw new Error("Expected the field `googleDriveFileId` to be a primitive type in the JSON string but got " + data['googleDriveFileId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instruments'])) {
            throw new Error("Expected the field `instruments` to be an array in the JSON data but got " + data['instruments']);
        }
        // ensure the json data is a string
        if (data['licenseText'] && !(typeof data['licenseText'] === 'string' || data['licenseText'] instanceof String)) {
            throw new Error("Expected the field `licenseText` to be a primitive type in the JSON string but got " + data['licenseText']);
        }
        // validate the optional field `likes`
        if (data['likes']) { // data not null
          ScoreLikesCounts.validateJSON(data['likes']);
        }
        // ensure the json data is a string
        if (data['lyricist'] && !(typeof data['lyricist'] === 'string' || data['lyricist'] instanceof String)) {
            throw new Error("Expected the field `lyricist` to be a primitive type in the JSON string but got " + data['lyricist']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['parentScore'] && !(typeof data['parentScore'] === 'string' || data['parentScore'] instanceof String)) {
            throw new Error("Expected the field `parentScore` to be a primitive type in the JSON string but got " + data['parentScore']);
        }
        // validate the optional field `plays`
        if (data['plays']) { // data not null
          ScorePlaysCounts.validateJSON(data['plays']);
        }
        // validate the optional field `rights`
        if (data['rights']) { // data not null
          ResourceRights.validateJSON(data['rights']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['samples'])) {
            throw new Error("Expected the field `samples` to be an array in the JSON data but got " + data['samples']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `views`
        if (data['views']) { // data not null
          ScoreViewsCounts.validateJSON(data['views']);
        }

        return true;
    }


}



/**
 * The url where the score can be viewed in a web browser
 * @member {String} htmlUrl
 */
ScoreDetails.prototype['htmlUrl'] = undefined;

/**
 * The unique identifier of the score
 * @member {String} id
 */
ScoreDetails.prototype['id'] = undefined;

/**
 * @member {module:model/ScorePrivacy} privacy
 */
ScoreDetails.prototype['privacy'] = undefined;

/**
 * The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)
 * @member {String} sharingKey
 */
ScoreDetails.prototype['sharingKey'] = undefined;

/**
 * The title of the score
 * @member {String} title
 */
ScoreDetails.prototype['title'] = undefined;

/**
 * @member {module:model/UserPublicSummary} user
 */
ScoreDetails.prototype['user'] = undefined;

/**
 * Arranger of the score
 * @member {String} arranger
 */
ScoreDetails.prototype['arranger'] = undefined;

/**
 * The list of the collaborators of the score
 * @member {Array.<module:model/ResourceCollaborator>} collaborators
 */
ScoreDetails.prototype['collaborators'] = undefined;

/**
 * The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
 * @member {Array.<String>} collections
 */
ScoreDetails.prototype['collections'] = undefined;

/**
 * @member {module:model/ScoreCommentsCounts} comments
 */
ScoreDetails.prototype['comments'] = undefined;

/**
 * Composer of the score
 * @member {String} composer
 */
ScoreDetails.prototype['composer'] = undefined;

/**
 * The date when the score was created
 * @member {Date} creationDate
 */
ScoreDetails.prototype['creationDate'] = undefined;

/**
 * @member {module:model/ScoreCreationType} creationType
 */
ScoreDetails.prototype['creationType'] = undefined;

/**
 * Description of the creation
 * @member {String} description
 */
ScoreDetails.prototype['description'] = undefined;

/**
 * In seconds, an approximative duration of the score
 * @member {Number} durationTime
 */
ScoreDetails.prototype['durationTime'] = undefined;

/**
 * If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}` 
 * @member {String} googleDriveFileId
 */
ScoreDetails.prototype['googleDriveFileId'] = undefined;

/**
 * An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`. 
 * @member {Array.<String>} instruments
 */
ScoreDetails.prototype['instruments'] = undefined;

/**
 * @member {module:model/ScoreLicense} license
 */
ScoreDetails.prototype['license'] = undefined;

/**
 * Additional license text written on the exported/printed score
 * @member {String} licenseText
 */
ScoreDetails.prototype['licenseText'] = undefined;

/**
 * @member {module:model/ScoreLikesCounts} likes
 */
ScoreDetails.prototype['likes'] = undefined;

/**
 * Lyricist of the score
 * @member {String} lyricist
 */
ScoreDetails.prototype['lyricist'] = undefined;

/**
 * The main tempo of the score (in QPM)
 * @member {Number} mainTempoQpm
 */
ScoreDetails.prototype['mainTempoQpm'] = undefined;

/**
 * The date of the last revision of the score
 * @member {Date} modificationDate
 */
ScoreDetails.prototype['modificationDate'] = undefined;

/**
 * The number of measures in the score
 * @member {Number} numberMeasures
 */
ScoreDetails.prototype['numberMeasures'] = undefined;

/**
 * If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`. 
 * @member {String} organization
 */
ScoreDetails.prototype['organization'] = undefined;

/**
 * If the score has been forked, the unique identifier of the parent score. 
 * @member {String} parentScore
 */
ScoreDetails.prototype['parentScore'] = undefined;

/**
 * @member {module:model/ScorePlaysCounts} plays
 */
ScoreDetails.prototype['plays'] = undefined;

/**
 * The date when the score was published on Flat
 * @member {Date} publicationDate
 */
ScoreDetails.prototype['publicationDate'] = undefined;

/**
 * @member {module:model/ResourceRights} rights
 */
ScoreDetails.prototype['rights'] = undefined;

/**
 * An array of the audio samples identifiers used the different score parts. The format of the strings is `{instrument-group}.{sample-id}`. 
 * @member {Array.<String>} samples
 */
ScoreDetails.prototype['samples'] = undefined;

/**
 * Subtitle of the score
 * @member {String} subtitle
 */
ScoreDetails.prototype['subtitle'] = undefined;

/**
 * Tags describing the score
 * @member {Array.<String>} tags
 */
ScoreDetails.prototype['tags'] = undefined;

/**
 * @member {module:model/ScoreViewsCounts} views
 */
ScoreDetails.prototype['views'] = undefined;


// Implement ScoreSummary interface:
/**
 * The url where the score can be viewed in a web browser
 * @member {String} htmlUrl
 */
ScoreSummary.prototype['htmlUrl'] = undefined;
/**
 * The unique identifier of the score
 * @member {String} id
 */
ScoreSummary.prototype['id'] = undefined;
/**
 * @member {module:model/ScorePrivacy} privacy
 */
ScoreSummary.prototype['privacy'] = undefined;
/**
 * The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)
 * @member {String} sharingKey
 */
ScoreSummary.prototype['sharingKey'] = undefined;
/**
 * The title of the score
 * @member {String} title
 */
ScoreSummary.prototype['title'] = undefined;
/**
 * @member {module:model/UserPublicSummary} user
 */
ScoreSummary.prototype['user'] = undefined;




export default ScoreDetails;

