/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassDetailsCanvas from './ClassDetailsCanvas';
import ClassDetailsClever from './ClassDetailsClever';
import ClassDetailsGoogleClassroom from './ClassDetailsGoogleClassroom';
import ClassDetailsGoogleDrive from './ClassDetailsGoogleDrive';
import ClassDetailsIssues from './ClassDetailsIssues';
import ClassDetailsLti from './ClassDetailsLti';
import ClassDetailsMfc from './ClassDetailsMfc';
import ClassDetailsMicrosoftGraph from './ClassDetailsMicrosoftGraph';
import ClassState from './ClassState';
import GroupDetails from './GroupDetails';

/**
 * The ClassDetails model module.
 * @module model/ClassDetails
 * @version 2.13.0
 */
class ClassDetails {
    /**
     * Constructs a new <code>ClassDetails</code>.
     * A classroom
     * @alias module:model/ClassDetails
     */
    constructor() { 
        
        ClassDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClassDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClassDetails} obj Optional instance to populate.
     * @return {module:model/ClassDetails} The populated <code>ClassDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClassDetails();

            if (data.hasOwnProperty('assignmentsCount')) {
                obj['assignmentsCount'] = ApiClient.convertToType(data['assignmentsCount'], 'Number');
            }
            if (data.hasOwnProperty('canvas')) {
                obj['canvas'] = ClassDetailsCanvas.constructFromObject(data['canvas']);
            }
            if (data.hasOwnProperty('clever')) {
                obj['clever'] = ClassDetailsClever.constructFromObject(data['clever']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enrollmentCode')) {
                obj['enrollmentCode'] = ApiClient.convertToType(data['enrollmentCode'], 'String');
            }
            if (data.hasOwnProperty('googleClassroom')) {
                obj['googleClassroom'] = ClassDetailsGoogleClassroom.constructFromObject(data['googleClassroom']);
            }
            if (data.hasOwnProperty('googleDrive')) {
                obj['googleDrive'] = ClassDetailsGoogleDrive.constructFromObject(data['googleDrive']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ClassDetailsIssues.constructFromObject(data['issues']);
            }
            if (data.hasOwnProperty('lti')) {
                obj['lti'] = ClassDetailsLti.constructFromObject(data['lti']);
            }
            if (data.hasOwnProperty('mfc')) {
                obj['mfc'] = ClassDetailsMfc.constructFromObject(data['mfc']);
            }
            if (data.hasOwnProperty('microsoftGraph')) {
                obj['microsoftGraph'] = ClassDetailsMicrosoftGraph.constructFromObject(data['microsoftGraph']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ClassState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('studentsGroup')) {
                obj['studentsGroup'] = GroupDetails.constructFromObject(data['studentsGroup']);
            }
            if (data.hasOwnProperty('teachersGroup')) {
                obj['teachersGroup'] = GroupDetails.constructFromObject(data['teachersGroup']);
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ApiClient.convertToType(data['theme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClassDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClassDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `canvas`
        if (data['canvas']) { // data not null
          ClassDetailsCanvas.validateJSON(data['canvas']);
        }
        // validate the optional field `clever`
        if (data['clever']) { // data not null
          ClassDetailsClever.validateJSON(data['clever']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['enrollmentCode'] && !(typeof data['enrollmentCode'] === 'string' || data['enrollmentCode'] instanceof String)) {
            throw new Error("Expected the field `enrollmentCode` to be a primitive type in the JSON string but got " + data['enrollmentCode']);
        }
        // validate the optional field `googleClassroom`
        if (data['googleClassroom']) { // data not null
          ClassDetailsGoogleClassroom.validateJSON(data['googleClassroom']);
        }
        // validate the optional field `googleDrive`
        if (data['googleDrive']) { // data not null
          ClassDetailsGoogleDrive.validateJSON(data['googleDrive']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `issues`
        if (data['issues']) { // data not null
          ClassDetailsIssues.validateJSON(data['issues']);
        }
        // validate the optional field `lti`
        if (data['lti']) { // data not null
          ClassDetailsLti.validateJSON(data['lti']);
        }
        // validate the optional field `mfc`
        if (data['mfc']) { // data not null
          ClassDetailsMfc.validateJSON(data['mfc']);
        }
        // validate the optional field `microsoftGraph`
        if (data['microsoftGraph']) { // data not null
          ClassDetailsMicrosoftGraph.validateJSON(data['microsoftGraph']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // validate the optional field `studentsGroup`
        if (data['studentsGroup']) { // data not null
          GroupDetails.validateJSON(data['studentsGroup']);
        }
        // validate the optional field `teachersGroup`
        if (data['teachersGroup']) { // data not null
          GroupDetails.validateJSON(data['teachersGroup']);
        }
        // ensure the json data is a string
        if (data['theme'] && !(typeof data['theme'] === 'string' || data['theme'] instanceof String)) {
            throw new Error("Expected the field `theme` to be a primitive type in the JSON string but got " + data['theme']);
        }

        return true;
    }


}



/**
 * The number of assignments created in the class
 * @member {Number} assignmentsCount
 */
ClassDetails.prototype['assignmentsCount'] = undefined;

/**
 * @member {module:model/ClassDetailsCanvas} canvas
 */
ClassDetails.prototype['canvas'] = undefined;

/**
 * @member {module:model/ClassDetailsClever} clever
 */
ClassDetails.prototype['clever'] = undefined;

/**
 * The date when the class was create
 * @member {Date} creationDate
 */
ClassDetails.prototype['creationDate'] = undefined;

/**
 * An optionnal description for this class
 * @member {String} description
 */
ClassDetails.prototype['description'] = undefined;

/**
 * [Teachers only] The enrollment code that can be used by the students to join the class 
 * @member {String} enrollmentCode
 */
ClassDetails.prototype['enrollmentCode'] = undefined;

/**
 * @member {module:model/ClassDetailsGoogleClassroom} googleClassroom
 */
ClassDetails.prototype['googleClassroom'] = undefined;

/**
 * @member {module:model/ClassDetailsGoogleDrive} googleDrive
 */
ClassDetails.prototype['googleDrive'] = undefined;

/**
 * The unique identifier of the class
 * @member {String} id
 */
ClassDetails.prototype['id'] = undefined;

/**
 * @member {module:model/ClassDetailsIssues} issues
 */
ClassDetails.prototype['issues'] = undefined;

/**
 * @member {module:model/ClassDetailsLti} lti
 */
ClassDetails.prototype['lti'] = undefined;

/**
 * @member {module:model/ClassDetailsMfc} mfc
 */
ClassDetails.prototype['mfc'] = undefined;

/**
 * @member {module:model/ClassDetailsMicrosoftGraph} microsoftGraph
 */
ClassDetails.prototype['microsoftGraph'] = undefined;

/**
 * The name of the class
 * @member {String} name
 */
ClassDetails.prototype['name'] = undefined;

/**
 * The unique identifier of the Organization owning this class
 * @member {String} organization
 */
ClassDetails.prototype['organization'] = undefined;

/**
 * The unique identifier of the User owning this class
 * @member {String} owner
 */
ClassDetails.prototype['owner'] = undefined;

/**
 * The section of the class
 * @member {String} section
 */
ClassDetails.prototype['section'] = undefined;

/**
 * @member {module:model/ClassState} state
 */
ClassDetails.prototype['state'] = undefined;

/**
 * @member {module:model/GroupDetails} studentsGroup
 */
ClassDetails.prototype['studentsGroup'] = undefined;

/**
 * @member {module:model/GroupDetails} teachersGroup
 */
ClassDetails.prototype['teachersGroup'] = undefined;

/**
 * The theme identifier using in Flat User Interface
 * @member {String} theme
 */
ClassDetails.prototype['theme'] = undefined;






export default ClassDetails;

