/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignmentSubmission from '../model/AssignmentSubmission';
import FlatErrorResponse from '../model/FlatErrorResponse';
import ResourceCollaborator from '../model/ResourceCollaborator';
import ResourceCollaboratorCreation from '../model/ResourceCollaboratorCreation';
import ScoreComment from '../model/ScoreComment';
import ScoreCommentCreation from '../model/ScoreCommentCreation';
import ScoreCommentUpdate from '../model/ScoreCommentUpdate';
import ScoreCreation from '../model/ScoreCreation';
import ScoreDetails from '../model/ScoreDetails';
import ScoreFork from '../model/ScoreFork';
import ScoreModification from '../model/ScoreModification';
import ScoreRevision from '../model/ScoreRevision';
import ScoreRevisionCreation from '../model/ScoreRevisionCreation';
import ScoreTrack from '../model/ScoreTrack';
import ScoreTrackCreation from '../model/ScoreTrackCreation';
import ScoreTrackUpdate from '../model/ScoreTrackUpdate';

/**
* Score service.
* @module api/ScoreApi
* @version 2.13.0
*/
export default class ScoreApi {

    /**
    * Constructs a new ScoreApi. 
    * @alias module:api/ScoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addScoreCollaborator operation.
     * @callback module:api/ScoreApi~addScoreCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCollaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new collaborator
     * Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource. - To add an existing Flat user to the resource, specify its unique identifier in the `user` property. - To invite an external user to the resource, specify its email in the `userEmail` property. - To add a Flat group to the resource, specify its unique identifier in the `group` property. - To update an existing collaborator, process the same request with different rights. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:model/ResourceCollaboratorCreation} body 
     * @param {module:api/ScoreApi~addScoreCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCollaborator}
     */
    addScoreCollaborator(score, body, callback) {
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling addScoreCollaborator");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addScoreCollaborator");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceCollaborator;
      return this.apiClient.callApi(
        '/scores/{score}/collaborators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addScoreTrack operation.
     * @callback module:api/ScoreApi~addScoreTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new video or audio track to the score
     * Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score. This API method support medias hosted on SoundCloud, YouTube and Vimeo. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:model/ScoreTrackCreation} body 
     * @param {module:api/ScoreApi~addScoreTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreTrack}
     */
    addScoreTrack(score, body, callback) {
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling addScoreTrack");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addScoreTrack");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreTrack;
      return this.apiClient.callApi(
        '/scores/{score}/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScore operation.
     * @callback module:api/ScoreApi~createScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new score
     * Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.  This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).  The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).  If no `collection` is specified, the API will create the score in the most appropriate collection. This can be the `root` collection or a different collection based on the user's settings or API authentication method. If a `collection` is specified and this one has more public privacy settings than the score (e.g. `public` vs `private` for the score), the privacy settings of the created score will be adjusted to the collection ones. You can check the adjusted privacy settings in the returned score `privacy`, and optionally adjust these settings if needed using `PUT /scores/{score}`. 
     * @param {module:model/ScoreCreation} body 
     * @param {module:api/ScoreApi~createScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreDetails}
     */
    createScore(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createScore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreDetails;
      return this.apiClient.callApi(
        '/scores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScoreRevision operation.
     * @callback module:api/ScoreApi~createScoreRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreRevision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new revision
     * Update a score by uploading a new revision for this one. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:model/ScoreRevisionCreation} body 
     * @param {module:api/ScoreApi~createScoreRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreRevision}
     */
    createScoreRevision(score, body, callback) {
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling createScoreRevision");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createScoreRevision");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreRevision;
      return this.apiClient.callApi(
        '/scores/{score}/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScore operation.
     * @callback module:api/ScoreApi~deleteScoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a score
     * This method can be used by the owner/admin (`aclAdmin` rights) of a score as well as regular collaborators.  When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history. The score won't be accessible anymore after calling this method and the user's quota will directly be updated.  When called by a regular collaborator (`aclRead` / `aclWrite`), the score will be unshared (i.e. removed from the account & own collections). 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [now = false)] If `true`, the score deletion will be scheduled to be done ASAP
     * @param {module:api/ScoreApi~deleteScoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScore(score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling deleteScore");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'now': opts['now']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScoreComment operation.
     * @callback module:api/ScoreApi~deleteScoreCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} comment Unique identifier of a sheet music comment 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~deleteScoreCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScoreComment(score, comment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling deleteScoreComment");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling deleteScoreComment");
      }

      let pathParams = {
        'score': score,
        'comment': comment
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}/comments/{comment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScoreTrack operation.
     * @callback module:api/ScoreApi~deleteScoreTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an audio or video track linked to the score
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} track Unique identifier of a score audio track 
     * @param {module:api/ScoreApi~deleteScoreTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScoreTrack(score, track, callback) {
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling deleteScoreTrack");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling deleteScoreTrack");
      }

      let pathParams = {
        'score': score,
        'track': track
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}/tracks/{track}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editScore operation.
     * @callback module:api/ScoreApi~editScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a score's metadata
     * This API method allows you to change the metadata of a score document (e.g. its `title` or `privacy`), all the properties are optional.  To edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).  When editing the `title`, `subtitle`, `composer`, `lyricist`, `arranger` or `licenseText`, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily. This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {module:model/ScoreModification} [body] 
     * @param {module:api/ScoreApi~editScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreDetails}
     */
    editScore(score, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling editScore");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreDetails;
      return this.apiClient.callApi(
        '/scores/{score}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forkScore operation.
     * @callback module:api/ScoreApi~forkScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork a score
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:model/ScoreFork} body 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~forkScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreDetails}
     */
    forkScore(score, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling forkScore");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling forkScore");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreDetails;
      return this.apiClient.callApi(
        '/scores/{score}/fork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gerUserLikes_0 operation.
     * @callback module:api/ScoreApi~gerUserLikes_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List liked scores
     * @param {String} user Unique identifier of a Flat user. If you authenticated, you can use `me` to refer to the current user. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [ids] Return only the identifiers of the scores
     * @param {module:api/ScoreApi~gerUserLikes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreDetails>}
     */
    gerUserLikes_0(user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling gerUserLikes_0");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreDetails];
      return this.apiClient.callApi(
        '/users/{user}/likes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupScores_0 operation.
     * @callback module:api/ScoreApi~getGroupScores_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List group's scores
     * Get the list of scores shared with a group. 
     * @param {String} group Unique identifier of a Flat group 
     * @param {Object} opts Optional parameters
     * @param {String} [parent] Filter the score forked from the score id `parent`
     * @param {module:api/ScoreApi~getGroupScores_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreDetails>}
     */
    getGroupScores_0(group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getGroupScores_0");
      }

      let pathParams = {
        'group': group
      };
      let queryParams = {
        'parent': opts['parent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreDetails];
      return this.apiClient.callApi(
        '/groups/{group}/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScore operation.
     * @callback module:api/ScoreApi~getScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a score's metadata
     * Get the details of a score identified by the `score` parameter in the URL. The currently authenticated user must have at least a read access to the document to use this API call. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~getScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreDetails}
     */
    getScore(score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScore");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreDetails;
      return this.apiClient.callApi(
        '/scores/{score}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreCollaborator operation.
     * @callback module:api/ScoreApi~getScoreCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCollaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a collaborator
     * Get the information about a collaborator (User or Group). 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group** 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~getScoreCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCollaborator}
     */
    getScoreCollaborator(score, collaborator, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreCollaborator");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling getScoreCollaborator");
      }

      let pathParams = {
        'score': score,
        'collaborator': collaborator
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceCollaborator;
      return this.apiClient.callApi(
        '/scores/{score}/collaborators/{collaborator}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreCollaborators operation.
     * @callback module:api/ScoreApi~getScoreCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceCollaborator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the collaborators
     * This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.  Collaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated). 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~getScoreCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceCollaborator>}
     */
    getScoreCollaborators(score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreCollaborators");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ResourceCollaborator];
      return this.apiClient.callApi(
        '/scores/{score}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreComments operation.
     * @callback module:api/ScoreApi~getScoreCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List comments
     * This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:model/String} [type] Filter the comments by type
     * @param {module:model/String} [sort] Sort
     * @param {module:model/String} [direction] Sort direction
     * @param {module:api/ScoreApi~getScoreCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreComment>}
     */
    getScoreComments(score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreComments");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey'],
        'type': opts['type'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreComment];
      return this.apiClient.callApi(
        '/scores/{score}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreRevision operation.
     * @callback module:api/ScoreApi~getScoreRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreRevision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a score revision
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific revision metadata. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} revision Unique identifier of a score revision. You can use `last` to fetch the information related to the last version created. 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~getScoreRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreRevision}
     */
    getScoreRevision(score, revision, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreRevision");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling getScoreRevision");
      }

      let pathParams = {
        'score': score,
        'revision': revision
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreRevision;
      return this.apiClient.callApi(
        '/scores/{score}/revisions/{revision}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreRevisionData operation.
     * @callback module:api/ScoreApi~getScoreRevisionDataCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a score revision data
     * Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON `json`, MusicXML `mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, a tumbnail of the first page `thumbnail.png` or auto sync points `synchronizationPoints`. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} revision Unique identifier of a score revision. You can use `last` to fetch the information related to the last version created. 
     * @param {module:model/String} format The format of the file you will retrieve
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {String} [parts] An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids separated by commas. For example \"59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\". 
     * @param {Boolean} [onlyCached] Only return files already generated and cached in Flat's production cache. If the file is not availabe, a 404 will be returned 
     * @param {Boolean} [url] Returns a json with the `url` in it instead of redirecting 
     * @param {module:api/ScoreApi~getScoreRevisionDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getScoreRevisionData(score, revision, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreRevisionData");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling getScoreRevisionData");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getScoreRevisionData");
      }

      let pathParams = {
        'score': score,
        'revision': revision,
        'format': format
      };
      let queryParams = {
        'sharingKey': opts['sharingKey'],
        'parts': opts['parts'],
        'onlyCached': opts['onlyCached'],
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.recordare.musicxml', 'application/vnd.recordare.musicxml+xml', 'audio/midi', 'audio/mp3', 'audio/wav', 'image/png'];
      let returnType = File;
      return this.apiClient.callApi(
        '/scores/{score}/revisions/{revision}/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreRevisions operation.
     * @callback module:api/ScoreApi~getScoreRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreRevision>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the revisions
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.  Depending the plan of the account, this list can be trunked to the few last revisions. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~getScoreRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreRevision>}
     */
    getScoreRevisions(score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreRevisions");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreRevision];
      return this.apiClient.callApi(
        '/scores/{score}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreSubmissions operation.
     * @callback module:api/ScoreApi~getScoreSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:api/ScoreApi~getScoreSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    getScoreSubmissions(score, callback) {
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreSubmissions");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentSubmission];
      return this.apiClient.callApi(
        '/scores/{score}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreTrack operation.
     * @callback module:api/ScoreApi~getScoreTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details of an audio or video track linked to a score
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} track Unique identifier of a score audio track 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~getScoreTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreTrack}
     */
    getScoreTrack(score, track, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreTrack");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling getScoreTrack");
      }

      let pathParams = {
        'score': score,
        'track': track
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreTrack;
      return this.apiClient.callApi(
        '/scores/{score}/tracks/{track}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserScores_0 operation.
     * @callback module:api/ScoreApi~getUserScores_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user's scores
     * Get the list of public scores owned by a User.  **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**. This method will no longer list private and shared scores, but only public scores of a Flat account. If you want to access to private scores, please use the [Collections API](#tag/Collection) instead. 
     * @param {String} user Unique identifier of a Flat user. If you authenticated, you can use `me` to refer to the current user. 
     * @param {Object} opts Optional parameters
     * @param {String} [parent] Filter the score forked from the score id `parent`
     * @param {module:api/ScoreApi~getUserScores_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreDetails>}
     */
    getUserScores_0(user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUserScores_0");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
        'parent': opts['parent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreDetails];
      return this.apiClient.callApi(
        '/users/{user}/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listScoreTracks operation.
     * @callback module:api/ScoreApi~listScoreTracksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreTrack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the audio or video tracks linked to a score
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {String} [assignment] An assignment id with which all the tracks returned will be related to 
     * @param {Boolean} [listAutoTrack] If true, and if available, return last automatically synchronized Flat's mp3 export as an additional track 
     * @param {module:api/ScoreApi~listScoreTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreTrack>}
     */
    listScoreTracks(score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling listScoreTracks");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey'],
        'assignment': opts['assignment'],
        'listAutoTrack': opts['listAutoTrack']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreTrack];
      return this.apiClient.callApi(
        '/scores/{score}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markScoreCommentResolved operation.
     * @callback module:api/ScoreApi~markScoreCommentResolvedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark the comment as resolved
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} comment Unique identifier of a sheet music comment 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~markScoreCommentResolvedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markScoreCommentResolved(score, comment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling markScoreCommentResolved");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling markScoreCommentResolved");
      }

      let pathParams = {
        'score': score,
        'comment': comment
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}/comments/{comment}/resolved', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markScoreCommentUnresolved operation.
     * @callback module:api/ScoreApi~markScoreCommentUnresolvedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark the comment as unresolved
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} comment Unique identifier of a sheet music comment 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~markScoreCommentUnresolvedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markScoreCommentUnresolved(score, comment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling markScoreCommentUnresolved");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling markScoreCommentUnresolved");
      }

      let pathParams = {
        'score': score,
        'comment': comment
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}/comments/{comment}/resolved', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postScoreComment operation.
     * @callback module:api/ScoreApi~postScoreCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a new comment
     * Post a document or a contextualized comment on a document.  Please note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:model/ScoreCommentCreation} body 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~postScoreCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreComment}
     */
    postScoreComment(score, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling postScoreComment");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postScoreComment");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreComment;
      return this.apiClient.callApi(
        '/scores/{score}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeScoreCollaborator operation.
     * @callback module:api/ScoreApi~removeScoreCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a collaborator
     * Remove the specified collaborator from the score 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group** 
     * @param {module:api/ScoreApi~removeScoreCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeScoreCollaborator(score, collaborator, callback) {
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling removeScoreCollaborator");
      }
      // verify the required parameter 'collaborator' is set
      if (collaborator === undefined || collaborator === null) {
        throw new Error("Missing the required parameter 'collaborator' when calling removeScoreCollaborator");
      }

      let pathParams = {
        'score': score,
        'collaborator': collaborator
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}/collaborators/{collaborator}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untrashScore operation.
     * @callback module:api/ScoreApi~untrashScoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Untrash a score
     * This method will remove the score from the `trash` collection and from the deletion queue, and add it back to the original collections. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:api/ScoreApi~untrashScoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untrashScore(score, callback) {
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling untrashScore");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scores/{score}/untrash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScoreComment operation.
     * @callback module:api/ScoreApi~updateScoreCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing comment
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} comment Unique identifier of a sheet music comment 
     * @param {module:model/ScoreCommentUpdate} body 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ScoreApi~updateScoreCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreComment}
     */
    updateScoreComment(score, comment, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling updateScoreComment");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateScoreComment");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateScoreComment");
      }

      let pathParams = {
        'score': score,
        'comment': comment
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreComment;
      return this.apiClient.callApi(
        '/scores/{score}/comments/{comment}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScoreTrack operation.
     * @callback module:api/ScoreApi~updateScoreTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an audio or video track linked to a score
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {String} track Unique identifier of a score audio track 
     * @param {module:model/ScoreTrackUpdate} body 
     * @param {module:api/ScoreApi~updateScoreTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreTrack}
     */
    updateScoreTrack(score, track, body, callback) {
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling updateScoreTrack");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling updateScoreTrack");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateScoreTrack");
      }

      let pathParams = {
        'score': score,
        'track': track
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreTrack;
      return this.apiClient.callApi(
        '/scores/{score}/tracks/{track}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
