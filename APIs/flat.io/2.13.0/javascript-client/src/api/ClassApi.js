/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Assignment from '../model/Assignment';
import AssignmentCopy from '../model/AssignmentCopy';
import AssignmentCreation from '../model/AssignmentCreation';
import AssignmentSubmission from '../model/AssignmentSubmission';
import AssignmentSubmissionComment from '../model/AssignmentSubmissionComment';
import AssignmentSubmissionCommentCreation from '../model/AssignmentSubmissionCommentCreation';
import AssignmentSubmissionHistory from '../model/AssignmentSubmissionHistory';
import AssignmentSubmissionUpdate from '../model/AssignmentSubmissionUpdate';
import ClassCreation from '../model/ClassCreation';
import ClassDetails from '../model/ClassDetails';
import ClassUpdate from '../model/ClassUpdate';
import FlatErrorResponse from '../model/FlatErrorResponse';
import ScoreDetails from '../model/ScoreDetails';
import ScoreFork from '../model/ScoreFork';

/**
* Class service.
* @module api/ClassApi
* @version 2.13.0
*/
export default class ClassApi {

    /**
    * Constructs a new ClassApi. 
    * @alias module:api/ClassApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateClass operation.
     * @callback module:api/ClassApi~activateClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate the class
     * Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI. 
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~activateClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    activateClass(_class, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling activateClass");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes/{class}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addClassUser operation.
     * @callback module:api/ClassApi~addClassUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to the class
     * This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
     * @param {String} _class Unique identifier of the class
     * @param {String} user Unique identifier of the user
     * @param {module:api/ClassApi~addClassUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addClassUser(_class, user, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling addClassUser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addClassUser");
      }

      let pathParams = {
        'class': _class,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/classes/{class}/users/{user}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveAssignment operation.
     * @callback module:api/ClassApi~archiveAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive the assignment
     * Archive the assignment 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:api/ClassApi~archiveAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assignment}
     */
    archiveAssignment(_class, assignment, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling archiveAssignment");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling archiveAssignment");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assignment;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveClass operation.
     * @callback module:api/ClassApi~archiveClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive the class
     * Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~archiveClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    archiveClass(_class, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling archiveClass");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes/{class}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyAssignment operation.
     * @callback module:api/ClassApi~copyAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy an assignment
     * Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:model/AssignmentCopy} body 
     * @param {module:api/ClassApi~copyAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assignment}
     */
    copyAssignment(_class, assignment, body, callback) {
      let postBody = body;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling copyAssignment");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling copyAssignment");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling copyAssignment");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Assignment;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssignment operation.
     * @callback module:api/ClassApi~createAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assignment creation
     * Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
     * @param {String} _class Unique identifier of the class
     * @param {Object} opts Optional parameters
     * @param {module:model/AssignmentCreation} [body] 
     * @param {module:api/ClassApi~createAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assignment}
     */
    createAssignment(_class, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling createAssignment");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Assignment;
      return this.apiClient.callApi(
        '/classes/{class}/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClass operation.
     * @callback module:api/ClassApi~createClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new class
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using `PUT /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response. 
     * @param {module:model/ClassCreation} body 
     * @param {module:api/ClassApi~createClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    createClass(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClass");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubmission operation.
     * @callback module:api/ClassApi~createSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a submission
     * Use this method as a student to create, update and submit a submission related to an assignment. Students can only set `attachments` and `submit`. Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id. 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:model/AssignmentSubmissionUpdate} body 
     * @param {module:api/ClassApi~createSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmission}
     */
    createSubmission(_class, assignment, body, callback) {
      let postBody = body;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling createSubmission");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling createSubmission");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSubmission");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignmentSubmission;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClassUser operation.
     * @callback module:api/ClassApi~deleteClassUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from the class
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
     * @param {String} _class Unique identifier of the class
     * @param {String} user Unique identifier of the user
     * @param {module:api/ClassApi~deleteClassUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteClassUser(_class, user, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling deleteClassUser");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteClassUser");
      }

      let pathParams = {
        'class': _class,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/classes/{class}/users/{user}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubmission operation.
     * @callback module:api/ClassApi~deleteSubmissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a submission
     * Use this method as a teacher to delete a submission and allow student to start over the assignment 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:api/ClassApi~deleteSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubmission(_class, assignment, submission, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling deleteSubmission");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling deleteSubmission");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling deleteSubmission");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubmissionComment operation.
     * @callback module:api/ClassApi~deleteSubmissionCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a feedback comment to a submission
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {String} comment Unique identifier of the comment
     * @param {module:api/ClassApi~deleteSubmissionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubmissionComment(_class, assignment, submission, comment, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling deleteSubmissionComment");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling deleteSubmissionComment");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling deleteSubmissionComment");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling deleteSubmissionComment");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editSubmission operation.
     * @callback module:api/ClassApi~editSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a submission
     * Use this method as a teacher to update the different submission and give feedback. Teachers can only set `return`, `draftGrade` and `grade` 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:model/AssignmentSubmissionUpdate} body 
     * @param {module:api/ClassApi~editSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmission}
     */
    editSubmission(_class, assignment, submission, body, callback) {
      let postBody = body;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling editSubmission");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling editSubmission");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling editSubmission");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editSubmission");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignmentSubmission;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enrollClass operation.
     * @callback module:api/ClassApi~enrollClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join a class
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
     * @param {String} enrollmentCode The enrollment code, available to the teacher in `ClassDetails` 
     * @param {module:api/ClassApi~enrollClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    enrollClass(enrollmentCode, callback) {
      let postBody = null;
      // verify the required parameter 'enrollmentCode' is set
      if (enrollmentCode === undefined || enrollmentCode === null) {
        throw new Error("Missing the required parameter 'enrollmentCode' when calling enrollClass");
      }

      let pathParams = {
        'enrollmentCode': enrollmentCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes/enroll/{enrollmentCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSubmissionsReviewsAsCsv operation.
     * @callback module:api/ClassApi~exportSubmissionsReviewsAsCsvCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CSV Grades exports
     * Export list of submissions grades to a CSV file
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:api/ClassApi~exportSubmissionsReviewsAsCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportSubmissionsReviewsAsCsv(_class, assignment, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling exportSubmissionsReviewsAsCsv");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling exportSubmissionsReviewsAsCsv");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = File;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSubmissionsReviewsAsExcel operation.
     * @callback module:api/ClassApi~exportSubmissionsReviewsAsExcelCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Excel Grades exports
     * Export list of submissions grades to an Excel file
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:api/ClassApi~exportSubmissionsReviewsAsExcelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportSubmissionsReviewsAsExcel(_class, assignment, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling exportSubmissionsReviewsAsExcel");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling exportSubmissionsReviewsAsExcel");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = File;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/excel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forkScore_0 operation.
     * @callback module:api/ClassApi~forkScore_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork a score
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:model/ScoreFork} body 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/ClassApi~forkScore_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreDetails}
     */
    forkScore_0(score, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling forkScore_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling forkScore_0");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreDetails;
      return this.apiClient.callApi(
        '/scores/{score}/fork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClass operation.
     * @callback module:api/ClassApi~getClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a single class
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~getClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    getClass(_class, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getClass");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes/{class}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreSubmissions_0 operation.
     * @callback module:api/ClassApi~getScoreSubmissions_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {module:api/ClassApi~getScoreSubmissions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    getScoreSubmissions_0(score, callback) {
      let postBody = null;
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreSubmissions_0");
      }

      let pathParams = {
        'score': score
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentSubmission];
      return this.apiClient.callApi(
        '/scores/{score}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmission operation.
     * @callback module:api/ClassApi~getSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a student submission
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:api/ClassApi~getSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmission}
     */
    getSubmission(_class, assignment, submission, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getSubmission");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling getSubmission");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling getSubmission");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignmentSubmission;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionComments operation.
     * @callback module:api/ClassApi~getSubmissionCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmissionComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the feedback comments of a submission
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:api/ClassApi~getSubmissionCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmissionComment>}
     */
    getSubmissionComments(_class, assignment, submission, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getSubmissionComments");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling getSubmissionComments");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling getSubmissionComments");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentSubmissionComment];
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissionHistory operation.
     * @callback module:api/ClassApi~getSubmissionHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmissionHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of the submission
     * For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories. 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:api/ClassApi~getSubmissionHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmissionHistory>}
     */
    getSubmissionHistory(_class, assignment, submission, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getSubmissionHistory");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling getSubmissionHistory");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling getSubmissionHistory");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentSubmissionHistory];
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissions operation.
     * @callback module:api/ClassApi~getSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the students' submissions
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:api/ClassApi~getSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    getSubmissions(_class, assignment, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getSubmissions");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling getSubmissions");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentSubmission];
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignments operation.
     * @callback module:api/ClassApi~listAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Assignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assignments listing
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~listAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Assignment>}
     */
    listAssignments(_class, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling listAssignments");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Assignment];
      return this.apiClient.callApi(
        '/classes/{class}/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClassStudentSubmissions operation.
     * @callback module:api/ClassApi~listClassStudentSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the submissions for a student
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class 
     * @param {String} _class Unique identifier of the class
     * @param {String} user Unique identifier of the user
     * @param {module:api/ClassApi~listClassStudentSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    listClassStudentSubmissions(_class, user, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling listClassStudentSubmissions");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listClassStudentSubmissions");
      }

      let pathParams = {
        'class': _class,
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentSubmission];
      return this.apiClient.callApi(
        '/classes/{class}/students/{user}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClasses operation.
     * @callback module:api/ClassApi~listClassesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClassDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the classes available for the current user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'active')] Filter the classes by state
     * @param {module:api/ClassApi~listClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClassDetails>}
     */
    listClasses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClassDetails];
      return this.apiClient.callApi(
        '/classes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSubmissionComment operation.
     * @callback module:api/ClassApi~postSubmissionCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmissionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a feedback comment to a submission
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:model/AssignmentSubmissionCommentCreation} assignmentSubmissionCommentCreation 
     * @param {module:api/ClassApi~postSubmissionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmissionComment}
     */
    postSubmissionComment(_class, assignment, submission, assignmentSubmissionCommentCreation, callback) {
      let postBody = assignmentSubmissionCommentCreation;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling postSubmissionComment");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling postSubmissionComment");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling postSubmissionComment");
      }
      // verify the required parameter 'assignmentSubmissionCommentCreation' is set
      if (assignmentSubmissionCommentCreation === undefined || assignmentSubmissionCommentCreation === null) {
        throw new Error("Missing the required parameter 'assignmentSubmissionCommentCreation' when calling postSubmissionComment");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignmentSubmissionComment;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchiveAssignment operation.
     * @callback module:api/ClassApi~unarchiveAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive the assignment.
     * Mark the assignment as `active`. 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:api/ClassApi~unarchiveAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assignment}
     */
    unarchiveAssignment(_class, assignment, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling unarchiveAssignment");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling unarchiveAssignment");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assignment;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchiveClass operation.
     * @callback module:api/ClassApi~unarchiveClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive the class
     * Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~unarchiveClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    unarchiveClass(_class, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling unarchiveClass");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes/{class}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClass operation.
     * @callback module:api/ClassApi~updateClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the class
     * Update the meta information of the class 
     * @param {String} _class Unique identifier of the class
     * @param {Object} opts Optional parameters
     * @param {module:model/ClassUpdate} [body] Details of the Class
     * @param {module:api/ClassApi~updateClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    updateClass(_class, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling updateClass");
      }

      let pathParams = {
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClassDetails;
      return this.apiClient.callApi(
        '/classes/{class}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubmissionComment operation.
     * @callback module:api/ClassApi~updateSubmissionCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmissionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a feedback comment to a submission
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {String} comment Unique identifier of the comment
     * @param {module:model/AssignmentSubmissionCommentCreation} assignmentSubmissionCommentCreation 
     * @param {module:api/ClassApi~updateSubmissionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmissionComment}
     */
    updateSubmissionComment(_class, assignment, submission, comment, assignmentSubmissionCommentCreation, callback) {
      let postBody = assignmentSubmissionCommentCreation;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling updateSubmissionComment");
      }
      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling updateSubmissionComment");
      }
      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling updateSubmissionComment");
      }
      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateSubmissionComment");
      }
      // verify the required parameter 'assignmentSubmissionCommentCreation' is set
      if (assignmentSubmissionCommentCreation === undefined || assignmentSubmissionCommentCreation === null) {
        throw new Error("Missing the required parameter 'assignmentSubmissionCommentCreation' when calling updateSubmissionComment");
      }

      let pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission,
        'comment': comment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignmentSubmissionComment;
      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
