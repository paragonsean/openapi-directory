/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';
import CollectionCreation from '../model/CollectionCreation';
import CollectionModification from '../model/CollectionModification';
import FlatErrorResponse from '../model/FlatErrorResponse';
import ScoreDetails from '../model/ScoreDetails';

/**
* Collection service.
* @module api/CollectionApi
* @version 2.13.0
*/
export default class CollectionApi {

    /**
    * Constructs a new CollectionApi. 
    * @alias module:api/CollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addScoreToCollection operation.
     * @callback module:api/CollectionApi~addScoreToCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a score to the collection
     * This operation will add a score to a collection. The default behavior will make the score available across multiple collections. You must have the capability `canAddScores` on the provided `collection` to perform the action. 
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/CollectionApi~addScoreToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreDetails}
     */
    addScoreToCollection(collection, score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling addScoreToCollection");
      }
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling addScoreToCollection");
      }

      let pathParams = {
        'collection': collection,
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreDetails;
      return this.apiClient.callApi(
        '/collections/{collection}/scores/{score}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollection operation.
     * @callback module:api/CollectionApi~createCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new collection
     * This method will create a new collection and add it to your `root` collection. 
     * @param {module:model/CollectionCreation} body 
     * @param {module:api/CollectionApi~createCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    createCollection(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/CollectionApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the collection
     * This method will schedule the deletion of the collection. Until deleted, the collection will be available in the `trash`. 
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {module:api/CollectionApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollection(collection, callback) {
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScoreFromCollection operation.
     * @callback module:api/CollectionApi~deleteScoreFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a score from the collection
     * This method will delete a score from the collection. Unlike [`DELETE /scores/{score}`](#operation/deleteScore), this score will not remove the score from your account, but only from the collection. This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections. 
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`). 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/CollectionApi~deleteScoreFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScoreFromCollection(collection, score, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteScoreFromCollection");
      }
      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling deleteScoreFromCollection");
      }

      let pathParams = {
        'collection': collection,
        'score': score
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection}/scores/{score}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCollection operation.
     * @callback module:api/CollectionApi~editCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a collection's metadata
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {Object} opts Optional parameters
     * @param {module:model/CollectionModification} [body] 
     * @param {module:api/CollectionApi~editCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    editCollection(collection, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling editCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collections/{collection}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollection operation.
     * @callback module:api/CollectionApi~getCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection details
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:api/CollectionApi~getCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    getCollection(collection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'sharingKey': opts['sharingKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collections/{collection}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollectionScores operation.
     * @callback module:api/CollectionApi~listCollectionScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the scores contained in a collection
     * Use this method to list the scores contained in a collection. If no sort option is provided, the scores are sorted by `modificationDate` `desc`. 
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {Object} opts Optional parameters
     * @param {String} [sharingKey] This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document. 
     * @param {module:model/String} [sort] Sort
     * @param {module:model/String} [direction] Sort direction
     * @param {Number} [limit = 25)] This is the maximum number of objects that may be returned
     * @param {String} [next] An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data. 
     * @param {String} [previous] An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data. 
     * @param {module:api/CollectionApi~listCollectionScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreDetails>}
     */
    listCollectionScores(collection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling listCollectionScores");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'sharingKey': opts['sharingKey'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'limit': opts['limit'],
        'next': opts['next'],
        'previous': opts['previous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreDetails];
      return this.apiClient.callApi(
        '/collections/{collection}/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollections operation.
     * @callback module:api/CollectionApi~listCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the collections
     * Use this method to list the user's collections contained in `parent` (by default in the `root` collection). If no sort option is provided, the collections are sorted by `creationDate` `desc`.  Note that this method will not include the `parent` collection in the listing. For example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`. 
     * @param {Object} opts Optional parameters
     * @param {String} [parent = 'root')] List the collection contained in this `parent` collection.  This option doesn't provide a complete multi-level collection support. When sharing a collection with someone, this one will have as `parent` `sharedWithMe`. 
     * @param {module:model/String} [sort] Sort
     * @param {module:model/String} [direction] Sort direction
     * @param {Number} [limit = 25)] This is the maximum number of objects that may be returned
     * @param {String} [next] An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data. 
     * @param {String} [previous] An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data. 
     * @param {module:api/CollectionApi~listCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    listCollections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'parent': opts['parent'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'limit': opts['limit'],
        'next': opts['next'],
        'previous': opts['previous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untrashCollection operation.
     * @callback module:api/CollectionApi~untrashCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Untrash a collection
     * This method will restore the collection by removing it from the `trash` and add it back to the `root` collection. 
     * @param {String} collection Unique identifier of the collection. The following aliases are supported: - `root`: The root collection of the account - `sharedWithMe`: Automatically contains new resources that have been shared individually - `trash`: Automatically contains resources that have been deleted 
     * @param {module:api/CollectionApi~untrashCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untrashCollection(collection, callback) {
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling untrashCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collection}/untrash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
