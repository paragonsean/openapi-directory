/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FlatErrorResponse from '../model/FlatErrorResponse';
import GroupDetails from '../model/GroupDetails';
import ScoreDetails from '../model/ScoreDetails';
import UserPublic from '../model/UserPublic';

/**
* Group service.
* @module api/GroupApi
* @version 2.13.0
*/
export default class GroupApi {

    /**
    * Constructs a new GroupApi. 
    * @alias module:api/GroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGroupDetails operation.
     * @callback module:api/GroupApi~getGroupDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group information
     * @param {String} group Unique identifier of a Flat group 
     * @param {module:api/GroupApi~getGroupDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupDetails}
     */
    getGroupDetails(group, callback) {
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getGroupDetails");
      }

      let pathParams = {
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupDetails;
      return this.apiClient.callApi(
        '/groups/{group}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupScores operation.
     * @callback module:api/GroupApi~getGroupScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List group's scores
     * Get the list of scores shared with a group. 
     * @param {String} group Unique identifier of a Flat group 
     * @param {Object} opts Optional parameters
     * @param {String} [parent] Filter the score forked from the score id `parent`
     * @param {module:api/GroupApi~getGroupScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreDetails>}
     */
    getGroupScores(group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getGroupScores");
      }

      let pathParams = {
        'group': group
      };
      let queryParams = {
        'parent': opts['parent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreDetails];
      return this.apiClient.callApi(
        '/groups/{group}/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupUsers operation.
     * @callback module:api/GroupApi~listGroupUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserPublic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List group's users
     * @param {String} group Unique identifier of a Flat group 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [source] Filter the users by their source 
     * @param {module:api/GroupApi~listGroupUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserPublic>}
     */
    listGroupUsers(group, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling listGroupUsers");
      }

      let pathParams = {
        'group': group
      };
      let queryParams = {
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserPublic];
      return this.apiClient.callApi(
        '/groups/{group}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
