/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Add a collaborator to a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceCollaboratorCreation {
  public static final String SERIALIZED_NAME_ACL_ADMIN = "aclAdmin";
  @SerializedName(SERIALIZED_NAME_ACL_ADMIN)
  private Boolean aclAdmin = false;

  public static final String SERIALIZED_NAME_ACL_READ = "aclRead";
  @SerializedName(SERIALIZED_NAME_ACL_READ)
  private Boolean aclRead = true;

  public static final String SERIALIZED_NAME_ACL_WRITE = "aclWrite";
  @SerializedName(SERIALIZED_NAME_ACL_WRITE)
  private Boolean aclWrite = false;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_TOKEN = "userToken";
  @SerializedName(SERIALIZED_NAME_USER_TOKEN)
  private String userToken;

  public ResourceCollaboratorCreation() {
  }

  public ResourceCollaboratorCreation aclAdmin(Boolean aclAdmin) {
    this.aclAdmin = aclAdmin;
    return this;
  }

  /**
   * &#x60;True&#x60; if the related user can can manage the current document, i.e. changing the document permissions and deleting the document 
   * @return aclAdmin
   */
  @javax.annotation.Nullable
  public Boolean getAclAdmin() {
    return aclAdmin;
  }

  public void setAclAdmin(Boolean aclAdmin) {
    this.aclAdmin = aclAdmin;
  }


  public ResourceCollaboratorCreation aclRead(Boolean aclRead) {
    this.aclRead = aclRead;
    return this;
  }

  /**
   * &#x60;True&#x60; if the related user can read the score. (probably true if the user has a permission on the document). 
   * @return aclRead
   */
  @javax.annotation.Nullable
  public Boolean getAclRead() {
    return aclRead;
  }

  public void setAclRead(Boolean aclRead) {
    this.aclRead = aclRead;
  }


  public ResourceCollaboratorCreation aclWrite(Boolean aclWrite) {
    this.aclWrite = aclWrite;
    return this;
  }

  /**
   * &#x60;True&#x60; if the related user can modify the score. 
   * @return aclWrite
   */
  @javax.annotation.Nullable
  public Boolean getAclWrite() {
    return aclWrite;
  }

  public void setAclWrite(Boolean aclWrite) {
    this.aclWrite = aclWrite;
  }


  public ResourceCollaboratorCreation group(String group) {
    this.group = group;
    return this;
  }

  /**
   * The unique identifier of a Flat group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public ResourceCollaboratorCreation user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The unique identifier of a Flat user
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public ResourceCollaboratorCreation userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Fill this field to invite an individual user by email. 
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public ResourceCollaboratorCreation userToken(String userToken) {
    this.userToken = userToken;
    return this;
  }

  /**
   * Token received in an invitation to join the score. 
   * @return userToken
   */
  @javax.annotation.Nullable
  public String getUserToken() {
    return userToken;
  }

  public void setUserToken(String userToken) {
    this.userToken = userToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceCollaboratorCreation resourceCollaboratorCreation = (ResourceCollaboratorCreation) o;
    return Objects.equals(this.aclAdmin, resourceCollaboratorCreation.aclAdmin) &&
        Objects.equals(this.aclRead, resourceCollaboratorCreation.aclRead) &&
        Objects.equals(this.aclWrite, resourceCollaboratorCreation.aclWrite) &&
        Objects.equals(this.group, resourceCollaboratorCreation.group) &&
        Objects.equals(this.user, resourceCollaboratorCreation.user) &&
        Objects.equals(this.userEmail, resourceCollaboratorCreation.userEmail) &&
        Objects.equals(this.userToken, resourceCollaboratorCreation.userToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aclAdmin, aclRead, aclWrite, group, user, userEmail, userToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceCollaboratorCreation {\n");
    sb.append("    aclAdmin: ").append(toIndentedString(aclAdmin)).append("\n");
    sb.append("    aclRead: ").append(toIndentedString(aclRead)).append("\n");
    sb.append("    aclWrite: ").append(toIndentedString(aclWrite)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userToken: ").append(toIndentedString(userToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aclAdmin");
    openapiFields.add("aclRead");
    openapiFields.add("aclWrite");
    openapiFields.add("group");
    openapiFields.add("user");
    openapiFields.add("userEmail");
    openapiFields.add("userToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceCollaboratorCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceCollaboratorCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceCollaboratorCreation is not found in the empty JSON string", ResourceCollaboratorCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceCollaboratorCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceCollaboratorCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userToken") != null && !jsonObj.get("userToken").isJsonNull()) && !jsonObj.get("userToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceCollaboratorCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceCollaboratorCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceCollaboratorCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceCollaboratorCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceCollaboratorCreation>() {
           @Override
           public void write(JsonWriter out, ResourceCollaboratorCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceCollaboratorCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceCollaboratorCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceCollaboratorCreation
   * @throws IOException if the JSON string is invalid with respect to ResourceCollaboratorCreation
   */
  public static ResourceCollaboratorCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceCollaboratorCreation.class);
  }

  /**
   * Convert an instance of ResourceCollaboratorCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

