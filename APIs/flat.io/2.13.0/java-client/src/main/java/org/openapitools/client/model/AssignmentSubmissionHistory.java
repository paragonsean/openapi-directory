/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentSubmissionHistoryAttachment;
import org.openapitools.client.model.AssignmentSubmissionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * History item of the submission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentSubmissionHistory {
  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private AssignmentSubmissionHistoryAttachment attachment;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DRAFT_GRADE = "draftGrade";
  @SerializedName(SERIALIZED_NAME_DRAFT_GRADE)
  private BigDecimal draftGrade;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade;

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private BigDecimal maxPoints;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AssignmentSubmissionState state;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<String> users = new ArrayList<>();

  public AssignmentSubmissionHistory() {
  }

  public AssignmentSubmissionHistory attachment(AssignmentSubmissionHistoryAttachment attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public AssignmentSubmissionHistoryAttachment getAttachment() {
    return attachment;
  }

  public void setAttachment(AssignmentSubmissionHistoryAttachment attachment) {
    this.attachment = attachment;
  }


  public AssignmentSubmissionHistory date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The date when the submission was changed
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public AssignmentSubmissionHistory draftGrade(BigDecimal draftGrade) {
    this.draftGrade = draftGrade;
    return this;
  }

  /**
   * The numerator of the grade at this time in the submission grade history
   * @return draftGrade
   */
  @javax.annotation.Nullable
  public BigDecimal getDraftGrade() {
    return draftGrade;
  }

  public void setDraftGrade(BigDecimal draftGrade) {
    this.draftGrade = draftGrade;
  }


  public AssignmentSubmissionHistory grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

  /**
   * The numerator of the grade at this time in the submission grade history
   * @return grade
   */
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public AssignmentSubmissionHistory maxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * The denominator of the grade at this time in the submission grade history
   * @return maxPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxPoints() {
    return maxPoints;
  }

  public void setMaxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
  }


  public AssignmentSubmissionHistory state(AssignmentSubmissionState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public AssignmentSubmissionState getState() {
    return state;
  }

  public void setState(AssignmentSubmissionState state) {
    this.state = state;
  }


  public AssignmentSubmissionHistory users(List<String> users) {
    this.users = users;
    return this;
  }

  public AssignmentSubmissionHistory addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * The user(s) unique identifier(s) who made the change
   * @return users
   */
  @javax.annotation.Nullable
  public List<String> getUsers() {
    return users;
  }

  public void setUsers(List<String> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentSubmissionHistory assignmentSubmissionHistory = (AssignmentSubmissionHistory) o;
    return Objects.equals(this.attachment, assignmentSubmissionHistory.attachment) &&
        Objects.equals(this.date, assignmentSubmissionHistory.date) &&
        Objects.equals(this.draftGrade, assignmentSubmissionHistory.draftGrade) &&
        Objects.equals(this.grade, assignmentSubmissionHistory.grade) &&
        Objects.equals(this.maxPoints, assignmentSubmissionHistory.maxPoints) &&
        Objects.equals(this.state, assignmentSubmissionHistory.state) &&
        Objects.equals(this.users, assignmentSubmissionHistory.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachment, date, draftGrade, grade, maxPoints, state, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentSubmissionHistory {\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    draftGrade: ").append(toIndentedString(draftGrade)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachment");
    openapiFields.add("date");
    openapiFields.add("draftGrade");
    openapiFields.add("grade");
    openapiFields.add("maxPoints");
    openapiFields.add("state");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentSubmissionHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentSubmissionHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentSubmissionHistory is not found in the empty JSON string", AssignmentSubmissionHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentSubmissionHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentSubmissionHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        AssignmentSubmissionHistoryAttachment.validateJsonElement(jsonObj.get("attachment"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        AssignmentSubmissionState.validateJsonElement(jsonObj.get("state"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull() && !jsonObj.get("users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentSubmissionHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentSubmissionHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentSubmissionHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentSubmissionHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentSubmissionHistory>() {
           @Override
           public void write(JsonWriter out, AssignmentSubmissionHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentSubmissionHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentSubmissionHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentSubmissionHistory
   * @throws IOException if the JSON string is invalid with respect to AssignmentSubmissionHistory
   */
  public static AssignmentSubmissionHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentSubmissionHistory.class);
  }

  /**
   * Convert an instance of AssignmentSubmissionHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

