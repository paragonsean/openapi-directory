/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectionCapabilities {
  public static final String SERIALIZED_NAME_CAN_ADD_SCORES = "canAddScores";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_SCORES)
  private Boolean canAddScores;

  public static final String SERIALIZED_NAME_CAN_DELETE = "canDelete";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE)
  private Boolean canDelete;

  public static final String SERIALIZED_NAME_CAN_DELETE_SCORES = "canDeleteScores";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_SCORES)
  private Boolean canDeleteScores;

  public static final String SERIALIZED_NAME_CAN_EDIT = "canEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CAN_SHARE = "canShare";
  @SerializedName(SERIALIZED_NAME_CAN_SHARE)
  private Boolean canShare;

  public CollectionCapabilities() {
  }

  public CollectionCapabilities canAddScores(Boolean canAddScores) {
    this.canAddScores = canAddScores;
    return this;
  }

  /**
   * Whether the current user can add scores to the collection  If this collection has the &#x60;type&#x60; &#x60;trash&#x60;, this property will be set to &#x60;false&#x60;. Use &#x60;DELETE /v2/scores/{score}&#x60; to trash a score. 
   * @return canAddScores
   */
  @javax.annotation.Nullable
  public Boolean getCanAddScores() {
    return canAddScores;
  }

  public void setCanAddScores(Boolean canAddScores) {
    this.canAddScores = canAddScores;
  }


  public CollectionCapabilities canDelete(Boolean canDelete) {
    this.canDelete = canDelete;
    return this;
  }

  /**
   * Whether the current user can delete the collection 
   * @return canDelete
   */
  @javax.annotation.Nullable
  public Boolean getCanDelete() {
    return canDelete;
  }

  public void setCanDelete(Boolean canDelete) {
    this.canDelete = canDelete;
  }


  public CollectionCapabilities canDeleteScores(Boolean canDeleteScores) {
    this.canDeleteScores = canDeleteScores;
    return this;
  }

  /**
   * Whether the current user can delete scores from the collection  If this collection has the &#x60;type&#x60; &#x60;trash&#x60;, this property will be set to &#x60;false&#x60;. Use &#x60;POST /v2/scores/{score}/untrash&#x60; to restore a score. 
   * @return canDeleteScores
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteScores() {
    return canDeleteScores;
  }

  public void setCanDeleteScores(Boolean canDeleteScores) {
    this.canDeleteScores = canDeleteScores;
  }


  public CollectionCapabilities canEdit(Boolean canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  /**
   * Whether the current user can modify the metadata for the collection 
   * @return canEdit
   */
  @javax.annotation.Nullable
  public Boolean getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Boolean canEdit) {
    this.canEdit = canEdit;
  }


  public CollectionCapabilities canShare(Boolean canShare) {
    this.canShare = canShare;
    return this;
  }

  /**
   * Whether the current user can modify the sharing settings for the collection 
   * @return canShare
   */
  @javax.annotation.Nullable
  public Boolean getCanShare() {
    return canShare;
  }

  public void setCanShare(Boolean canShare) {
    this.canShare = canShare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionCapabilities collectionCapabilities = (CollectionCapabilities) o;
    return Objects.equals(this.canAddScores, collectionCapabilities.canAddScores) &&
        Objects.equals(this.canDelete, collectionCapabilities.canDelete) &&
        Objects.equals(this.canDeleteScores, collectionCapabilities.canDeleteScores) &&
        Objects.equals(this.canEdit, collectionCapabilities.canEdit) &&
        Objects.equals(this.canShare, collectionCapabilities.canShare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAddScores, canDelete, canDeleteScores, canEdit, canShare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionCapabilities {\n");
    sb.append("    canAddScores: ").append(toIndentedString(canAddScores)).append("\n");
    sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
    sb.append("    canDeleteScores: ").append(toIndentedString(canDeleteScores)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    canShare: ").append(toIndentedString(canShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canAddScores");
    openapiFields.add("canDelete");
    openapiFields.add("canDeleteScores");
    openapiFields.add("canEdit");
    openapiFields.add("canShare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectionCapabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectionCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectionCapabilities is not found in the empty JSON string", CollectionCapabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectionCapabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectionCapabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectionCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectionCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectionCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectionCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectionCapabilities>() {
           @Override
           public void write(JsonWriter out, CollectionCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectionCapabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectionCapabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectionCapabilities
   * @throws IOException if the JSON string is invalid with respect to CollectionCapabilities
   */
  public static CollectionCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectionCapabilities.class);
  }

  /**
   * Convert an instance of CollectionCapabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

