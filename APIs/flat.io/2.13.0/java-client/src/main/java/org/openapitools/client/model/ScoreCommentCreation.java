/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScoreCommentContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creation of a comment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreCommentCreation {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ScoreCommentContext context;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private List<String> mentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAW_COMMENT = "rawComment";
  @SerializedName(SERIALIZED_NAME_RAW_COMMENT)
  private String rawComment;

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public ScoreCommentCreation() {
  }

  public ScoreCommentCreation comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The comment text that can includes mentions using the following format: &#x60;@[id:username]&#x60;. 
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ScoreCommentCreation context(ScoreCommentContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public ScoreCommentContext getContext() {
    return context;
  }

  public void setContext(ScoreCommentContext context) {
    this.context = context;
  }


  public ScoreCommentCreation mentions(List<String> mentions) {
    this.mentions = mentions;
    return this;
  }

  public ScoreCommentCreation addMentionsItem(String mentionsItem) {
    if (this.mentions == null) {
      this.mentions = new ArrayList<>();
    }
    this.mentions.add(mentionsItem);
    return this;
  }

  /**
   * The list of user identifiers mentioned in this comment
   * @return mentions
   */
  @javax.annotation.Nullable
  public List<String> getMentions() {
    return mentions;
  }

  public void setMentions(List<String> mentions) {
    this.mentions = mentions;
  }


  public ScoreCommentCreation rawComment(String rawComment) {
    this.rawComment = rawComment;
    return this;
  }

  /**
   * A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set. 
   * @return rawComment
   */
  @javax.annotation.Nullable
  public String getRawComment() {
    return rawComment;
  }

  public void setRawComment(String rawComment) {
    this.rawComment = rawComment;
  }


  public ScoreCommentCreation replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * When the comment is a reply to another comment, the unique identifier of the parent comment 
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public ScoreCommentCreation revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \&quot;last\&quot;, the API will automatically take the last revision created. 
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreCommentCreation scoreCommentCreation = (ScoreCommentCreation) o;
    return Objects.equals(this.comment, scoreCommentCreation.comment) &&
        Objects.equals(this.context, scoreCommentCreation.context) &&
        Objects.equals(this.mentions, scoreCommentCreation.mentions) &&
        Objects.equals(this.rawComment, scoreCommentCreation.rawComment) &&
        Objects.equals(this.replyTo, scoreCommentCreation.replyTo) &&
        Objects.equals(this.revision, scoreCommentCreation.revision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, context, mentions, rawComment, replyTo, revision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreCommentCreation {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    rawComment: ").append(toIndentedString(rawComment)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("context");
    openapiFields.add("mentions");
    openapiFields.add("rawComment");
    openapiFields.add("replyTo");
    openapiFields.add("revision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreCommentCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreCommentCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreCommentCreation is not found in the empty JSON string", ScoreCommentCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreCommentCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreCommentCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScoreCommentCreation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        ScoreCommentContext.validateJsonElement(jsonObj.get("context"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mentions") != null && !jsonObj.get("mentions").isJsonNull() && !jsonObj.get("mentions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentions` to be an array in the JSON string but got `%s`", jsonObj.get("mentions").toString()));
      }
      if ((jsonObj.get("rawComment") != null && !jsonObj.get("rawComment").isJsonNull()) && !jsonObj.get("rawComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawComment").toString()));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreCommentCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreCommentCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreCommentCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreCommentCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreCommentCreation>() {
           @Override
           public void write(JsonWriter out, ScoreCommentCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreCommentCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreCommentCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreCommentCreation
   * @throws IOException if the JSON string is invalid with respect to ScoreCommentCreation
   */
  public static ScoreCommentCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreCommentCreation.class);
  }

  /**
   * Convert an instance of ScoreCommentCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

