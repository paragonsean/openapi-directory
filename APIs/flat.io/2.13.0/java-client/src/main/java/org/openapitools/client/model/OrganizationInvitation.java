/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrganizationRoles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an invitation to join an organization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganizationInvitation {
  public static final String SERIALIZED_NAME_CUSTOM_CODE = "customCode";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CODE)
  private String customCode;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVITED_BY = "invitedBy";
  @SerializedName(SERIALIZED_NAME_INVITED_BY)
  private String invitedBy;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_ORGANIZATION_ROLE = "organizationRole";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ROLE)
  private OrganizationRoles organizationRole;

  public static final String SERIALIZED_NAME_USED_BY = "usedBy";
  @SerializedName(SERIALIZED_NAME_USED_BY)
  private String usedBy;

  public OrganizationInvitation() {
  }

  public OrganizationInvitation customCode(String customCode) {
    this.customCode = customCode;
    return this;
  }

  /**
   * Enrollment code to use when joining this organization
   * @return customCode
   */
  @javax.annotation.Nullable
  public String getCustomCode() {
    return customCode;
  }

  public void setCustomCode(String customCode) {
    this.customCode = customCode;
  }


  public OrganizationInvitation email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address this invitation was sent to
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OrganizationInvitation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The invitation unique identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrganizationInvitation invitedBy(String invitedBy) {
    this.invitedBy = invitedBy;
    return this;
  }

  /**
   * The unique identifier of the User who created this invitation
   * @return invitedBy
   */
  @javax.annotation.Nullable
  public String getInvitedBy() {
    return invitedBy;
  }

  public void setInvitedBy(String invitedBy) {
    this.invitedBy = invitedBy;
  }


  public OrganizationInvitation organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * The unique identifier of the Organization owning this class
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public OrganizationInvitation organizationRole(OrganizationRoles organizationRole) {
    this.organizationRole = organizationRole;
    return this;
  }

  /**
   * Get organizationRole
   * @return organizationRole
   */
  @javax.annotation.Nullable
  public OrganizationRoles getOrganizationRole() {
    return organizationRole;
  }

  public void setOrganizationRole(OrganizationRoles organizationRole) {
    this.organizationRole = organizationRole;
  }


  public OrganizationInvitation usedBy(String usedBy) {
    this.usedBy = usedBy;
    return this;
  }

  /**
   * The unique identifier of the User who used this invitation
   * @return usedBy
   */
  @javax.annotation.Nullable
  public String getUsedBy() {
    return usedBy;
  }

  public void setUsedBy(String usedBy) {
    this.usedBy = usedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationInvitation organizationInvitation = (OrganizationInvitation) o;
    return Objects.equals(this.customCode, organizationInvitation.customCode) &&
        Objects.equals(this.email, organizationInvitation.email) &&
        Objects.equals(this.id, organizationInvitation.id) &&
        Objects.equals(this.invitedBy, organizationInvitation.invitedBy) &&
        Objects.equals(this.organization, organizationInvitation.organization) &&
        Objects.equals(this.organizationRole, organizationInvitation.organizationRole) &&
        Objects.equals(this.usedBy, organizationInvitation.usedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customCode, email, id, invitedBy, organization, organizationRole, usedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationInvitation {\n");
    sb.append("    customCode: ").append(toIndentedString(customCode)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    organizationRole: ").append(toIndentedString(organizationRole)).append("\n");
    sb.append("    usedBy: ").append(toIndentedString(usedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customCode");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("invitedBy");
    openapiFields.add("organization");
    openapiFields.add("organizationRole");
    openapiFields.add("usedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationInvitation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationInvitation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationInvitation is not found in the empty JSON string", OrganizationInvitation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationInvitation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationInvitation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customCode") != null && !jsonObj.get("customCode").isJsonNull()) && !jsonObj.get("customCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customCode").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("invitedBy") != null && !jsonObj.get("invitedBy").isJsonNull()) && !jsonObj.get("invitedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitedBy").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      // validate the optional field `organizationRole`
      if (jsonObj.get("organizationRole") != null && !jsonObj.get("organizationRole").isJsonNull()) {
        OrganizationRoles.validateJsonElement(jsonObj.get("organizationRole"));
      }
      if ((jsonObj.get("usedBy") != null && !jsonObj.get("usedBy").isJsonNull()) && !jsonObj.get("usedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationInvitation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationInvitation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationInvitation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationInvitation.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationInvitation>() {
           @Override
           public void write(JsonWriter out, OrganizationInvitation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationInvitation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationInvitation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationInvitation
   * @throws IOException if the JSON string is invalid with respect to OrganizationInvitation
   */
  public static OrganizationInvitation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationInvitation.class);
  }

  /**
   * Convert an instance of OrganizationInvitation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

