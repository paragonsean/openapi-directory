/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentCanvas;
import org.openapitools.client.model.AssignmentLti;
import org.openapitools.client.model.AssignmentMfc;
import org.openapitools.client.model.AssignmentSubmission;
import org.openapitools.client.model.AssignmentType;
import org.openapitools.client.model.GoogleClassroomCoursework;
import org.openapitools.client.model.MediaAttachment;
import org.openapitools.client.model.MicrosoftGraphAssignment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assignment details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Assignment {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<MediaAttachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANVAS = "canvas";
  @SerializedName(SERIALIZED_NAME_CANVAS)
  private AssignmentCanvas canvas;

  public static final String SERIALIZED_NAME_CLASSROOM = "classroom";
  @SerializedName(SERIALIZED_NAME_CLASSROOM)
  private String classroom;

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private String cover;

  public static final String SERIALIZED_NAME_COVER_FILE = "coverFile";
  @SerializedName(SERIALIZED_NAME_COVER_FILE)
  private String coverFile;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_GOOGLE_CLASSROOM = "googleClassroom";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLASSROOM)
  private GoogleClassroomCoursework googleClassroom;

  public static final String SERIALIZED_NAME_LTI = "lti";
  @SerializedName(SERIALIZED_NAME_LTI)
  private AssignmentLti lti;

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private BigDecimal maxPoints;

  public static final String SERIALIZED_NAME_MFC = "mfc";
  @SerializedName(SERIALIZED_NAME_MFC)
  private AssignmentMfc mfc;

  public static final String SERIALIZED_NAME_MICROSOFT_GRAPH = "microsoftGraph";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_GRAPH)
  private MicrosoftGraphAssignment microsoftGraph;

  public static final String SERIALIZED_NAME_SCHEDULED_DATE = "scheduledDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DATE)
  private OffsetDateTime scheduledDate;

  /**
   * State of the assignment
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DRAFT("draft"),
    
    ACTIVE("active"),
    
    ARCHIVED("archived");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBMISSIONS = "submissions";
  @SerializedName(SERIALIZED_NAME_SUBMISSIONS)
  private List<AssignmentSubmission> submissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AssignmentType type;

  public Assignment() {
  }

  public Assignment attachments(List<MediaAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Assignment addAttachmentsItem(MediaAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<MediaAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<MediaAttachment> attachments) {
    this.attachments = attachments;
  }


  public Assignment canvas(AssignmentCanvas canvas) {
    this.canvas = canvas;
    return this;
  }

  /**
   * Get canvas
   * @return canvas
   */
  @javax.annotation.Nullable
  public AssignmentCanvas getCanvas() {
    return canvas;
  }

  public void setCanvas(AssignmentCanvas canvas) {
    this.canvas = canvas;
  }


  public Assignment classroom(String classroom) {
    this.classroom = classroom;
    return this;
  }

  /**
   * The unique identifier of the class where this assignment was posted
   * @return classroom
   */
  @javax.annotation.Nullable
  public String getClassroom() {
    return classroom;
  }

  public void setClassroom(String classroom) {
    this.classroom = classroom;
  }


  public Assignment cover(String cover) {
    this.cover = cover;
    return this;
  }

  /**
   * The URL of the cover to display
   * @return cover
   */
  @javax.annotation.Nullable
  public String getCover() {
    return cover;
  }

  public void setCover(String cover) {
    this.cover = cover;
  }


  public Assignment coverFile(String coverFile) {
    this.coverFile = coverFile;
    return this;
  }

  /**
   * The id of the cover to display
   * @return coverFile
   */
  @javax.annotation.Nullable
  public String getCoverFile() {
    return coverFile;
  }

  public void setCoverFile(String coverFile) {
    this.coverFile = coverFile;
  }


  public Assignment creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation date of this assignment
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Assignment creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * The User unique identifier of the creator of this assignment 
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public Assignment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description and content of the assignment
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Assignment dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The due date of this assignment, late submissions will be marked as paste due. 
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public Assignment googleClassroom(GoogleClassroomCoursework googleClassroom) {
    this.googleClassroom = googleClassroom;
    return this;
  }

  /**
   * Get googleClassroom
   * @return googleClassroom
   */
  @javax.annotation.Nullable
  public GoogleClassroomCoursework getGoogleClassroom() {
    return googleClassroom;
  }

  public void setGoogleClassroom(GoogleClassroomCoursework googleClassroom) {
    this.googleClassroom = googleClassroom;
  }


  public Assignment lti(AssignmentLti lti) {
    this.lti = lti;
    return this;
  }

  /**
   * Get lti
   * @return lti
   */
  @javax.annotation.Nullable
  public AssignmentLti getLti() {
    return lti;
  }

  public void setLti(AssignmentLti lti) {
    this.lti = lti;
  }


  public Assignment maxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * If set, the grading will be enabled for the assignement 
   * @return maxPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxPoints() {
    return maxPoints;
  }

  public void setMaxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
  }


  public Assignment mfc(AssignmentMfc mfc) {
    this.mfc = mfc;
    return this;
  }

  /**
   * Get mfc
   * @return mfc
   */
  @javax.annotation.Nullable
  public AssignmentMfc getMfc() {
    return mfc;
  }

  public void setMfc(AssignmentMfc mfc) {
    this.mfc = mfc;
  }


  public Assignment microsoftGraph(MicrosoftGraphAssignment microsoftGraph) {
    this.microsoftGraph = microsoftGraph;
    return this;
  }

  /**
   * Get microsoftGraph
   * @return microsoftGraph
   */
  @javax.annotation.Nullable
  public MicrosoftGraphAssignment getMicrosoftGraph() {
    return microsoftGraph;
  }

  public void setMicrosoftGraph(MicrosoftGraphAssignment microsoftGraph) {
    this.microsoftGraph = microsoftGraph;
  }


  public Assignment scheduledDate(OffsetDateTime scheduledDate) {
    this.scheduledDate = scheduledDate;
    return this;
  }

  /**
   * The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. 
   * @return scheduledDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledDate() {
    return scheduledDate;
  }

  public void setScheduledDate(OffsetDateTime scheduledDate) {
    this.scheduledDate = scheduledDate;
  }


  public Assignment state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the assignment
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Assignment submissions(List<AssignmentSubmission> submissions) {
    this.submissions = submissions;
    return this;
  }

  public Assignment addSubmissionsItem(AssignmentSubmission submissionsItem) {
    if (this.submissions == null) {
      this.submissions = new ArrayList<>();
    }
    this.submissions.add(submissionsItem);
    return this;
  }

  /**
   * Get submissions
   * @return submissions
   */
  @javax.annotation.Nullable
  public List<AssignmentSubmission> getSubmissions() {
    return submissions;
  }

  public void setSubmissions(List<AssignmentSubmission> submissions) {
    this.submissions = submissions;
  }


  public Assignment title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the assignment
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Assignment type(AssignmentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AssignmentType getType() {
    return type;
  }

  public void setType(AssignmentType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assignment assignment = (Assignment) o;
    return Objects.equals(this.attachments, assignment.attachments) &&
        Objects.equals(this.canvas, assignment.canvas) &&
        Objects.equals(this.classroom, assignment.classroom) &&
        Objects.equals(this.cover, assignment.cover) &&
        Objects.equals(this.coverFile, assignment.coverFile) &&
        Objects.equals(this.creationDate, assignment.creationDate) &&
        Objects.equals(this.creator, assignment.creator) &&
        Objects.equals(this.description, assignment.description) &&
        Objects.equals(this.dueDate, assignment.dueDate) &&
        Objects.equals(this.googleClassroom, assignment.googleClassroom) &&
        Objects.equals(this.lti, assignment.lti) &&
        Objects.equals(this.maxPoints, assignment.maxPoints) &&
        Objects.equals(this.mfc, assignment.mfc) &&
        Objects.equals(this.microsoftGraph, assignment.microsoftGraph) &&
        Objects.equals(this.scheduledDate, assignment.scheduledDate) &&
        Objects.equals(this.state, assignment.state) &&
        Objects.equals(this.submissions, assignment.submissions) &&
        Objects.equals(this.title, assignment.title) &&
        Objects.equals(this.type, assignment.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, canvas, classroom, cover, coverFile, creationDate, creator, description, dueDate, googleClassroom, lti, maxPoints, mfc, microsoftGraph, scheduledDate, state, submissions, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assignment {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    canvas: ").append(toIndentedString(canvas)).append("\n");
    sb.append("    classroom: ").append(toIndentedString(classroom)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    coverFile: ").append(toIndentedString(coverFile)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    googleClassroom: ").append(toIndentedString(googleClassroom)).append("\n");
    sb.append("    lti: ").append(toIndentedString(lti)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    mfc: ").append(toIndentedString(mfc)).append("\n");
    sb.append("    microsoftGraph: ").append(toIndentedString(microsoftGraph)).append("\n");
    sb.append("    scheduledDate: ").append(toIndentedString(scheduledDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("canvas");
    openapiFields.add("classroom");
    openapiFields.add("cover");
    openapiFields.add("coverFile");
    openapiFields.add("creationDate");
    openapiFields.add("creator");
    openapiFields.add("description");
    openapiFields.add("dueDate");
    openapiFields.add("googleClassroom");
    openapiFields.add("lti");
    openapiFields.add("maxPoints");
    openapiFields.add("mfc");
    openapiFields.add("microsoftGraph");
    openapiFields.add("scheduledDate");
    openapiFields.add("state");
    openapiFields.add("submissions");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Assignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assignment is not found in the empty JSON string", Assignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            MediaAttachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `canvas`
      if (jsonObj.get("canvas") != null && !jsonObj.get("canvas").isJsonNull()) {
        AssignmentCanvas.validateJsonElement(jsonObj.get("canvas"));
      }
      if ((jsonObj.get("classroom") != null && !jsonObj.get("classroom").isJsonNull()) && !jsonObj.get("classroom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classroom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classroom").toString()));
      }
      if ((jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) && !jsonObj.get("cover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cover").toString()));
      }
      if ((jsonObj.get("coverFile") != null && !jsonObj.get("coverFile").isJsonNull()) && !jsonObj.get("coverFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverFile").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `googleClassroom`
      if (jsonObj.get("googleClassroom") != null && !jsonObj.get("googleClassroom").isJsonNull()) {
        GoogleClassroomCoursework.validateJsonElement(jsonObj.get("googleClassroom"));
      }
      // validate the optional field `lti`
      if (jsonObj.get("lti") != null && !jsonObj.get("lti").isJsonNull()) {
        AssignmentLti.validateJsonElement(jsonObj.get("lti"));
      }
      // validate the optional field `mfc`
      if (jsonObj.get("mfc") != null && !jsonObj.get("mfc").isJsonNull()) {
        AssignmentMfc.validateJsonElement(jsonObj.get("mfc"));
      }
      // validate the optional field `microsoftGraph`
      if (jsonObj.get("microsoftGraph") != null && !jsonObj.get("microsoftGraph").isJsonNull()) {
        MicrosoftGraphAssignment.validateJsonElement(jsonObj.get("microsoftGraph"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("submissions") != null && !jsonObj.get("submissions").isJsonNull()) {
        JsonArray jsonArraysubmissions = jsonObj.getAsJsonArray("submissions");
        if (jsonArraysubmissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("submissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `submissions` to be an array in the JSON string but got `%s`", jsonObj.get("submissions").toString()));
          }

          // validate the optional field `submissions` (array)
          for (int i = 0; i < jsonArraysubmissions.size(); i++) {
            AssignmentSubmission.validateJsonElement(jsonArraysubmissions.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        AssignmentType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assignment.class));

       return (TypeAdapter<T>) new TypeAdapter<Assignment>() {
           @Override
           public void write(JsonWriter out, Assignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Assignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Assignment
   * @throws IOException if the JSON string is invalid with respect to Assignment
   */
  public static Assignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assignment.class);
  }

  /**
   * Convert an instance of Assignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

