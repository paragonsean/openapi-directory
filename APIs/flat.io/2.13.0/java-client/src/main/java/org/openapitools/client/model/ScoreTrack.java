/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScoreTrackPoint;
import org.openapitools.client.model.ScoreTrackState;
import org.openapitools.client.model.ScoreTrackType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An audio track for a score
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreTrack {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEDIA_ID = "mediaId";
  @SerializedName(SERIALIZED_NAME_MEDIA_ID)
  private String mediaId;

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ScoreTrackState state = ScoreTrackState.DRAFT;

  public static final String SERIALIZED_NAME_SYNCHRONIZATION_POINTS = "synchronizationPoints";
  @SerializedName(SERIALIZED_NAME_SYNCHRONIZATION_POINTS)
  private List<ScoreTrackPoint> synchronizationPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ScoreTrackType type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ScoreTrack() {
  }

  public ScoreTrack creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation date of the track
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ScoreTrack creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * The unique identifier of the track creator
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public ScoreTrack _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * True if the track should be used as default audio source
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public ScoreTrack id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the score track
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ScoreTrack mediaId(String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

  /**
   * The unique identifier of the track when hosted on an external service. For example, if the url is &#x60;https://www.youtube.com/watch?v&#x3D;dQw4w9WgXcQ&#x60;, &#x60;mediaId&#x60; will be &#x60;dQw4w9WgXcQ&#x60; 
   * @return mediaId
   */
  @javax.annotation.Nullable
  public String getMediaId() {
    return mediaId;
  }

  public void setMediaId(String mediaId) {
    this.mediaId = mediaId;
  }


  public ScoreTrack modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * The modification date of the track
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public ScoreTrack score(String score) {
    this.score = score;
    return this;
  }

  /**
   * The unique identifier of the score
   * @return score
   */
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public ScoreTrack state(ScoreTrackState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ScoreTrackState getState() {
    return state;
  }

  public void setState(ScoreTrackState state) {
    this.state = state;
  }


  public ScoreTrack synchronizationPoints(List<ScoreTrackPoint> synchronizationPoints) {
    this.synchronizationPoints = synchronizationPoints;
    return this;
  }

  public ScoreTrack addSynchronizationPointsItem(ScoreTrackPoint synchronizationPointsItem) {
    if (this.synchronizationPoints == null) {
      this.synchronizationPoints = new ArrayList<>();
    }
    this.synchronizationPoints.add(synchronizationPointsItem);
    return this;
  }

  /**
   * Get synchronizationPoints
   * @return synchronizationPoints
   */
  @javax.annotation.Nullable
  public List<ScoreTrackPoint> getSynchronizationPoints() {
    return synchronizationPoints;
  }

  public void setSynchronizationPoints(List<ScoreTrackPoint> synchronizationPoints) {
    this.synchronizationPoints = synchronizationPoints;
  }


  public ScoreTrack title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the track
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ScoreTrack type(ScoreTrackType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ScoreTrackType getType() {
    return type;
  }

  public void setType(ScoreTrackType type) {
    this.type = type;
  }


  public ScoreTrack url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the track
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreTrack scoreTrack = (ScoreTrack) o;
    return Objects.equals(this.creationDate, scoreTrack.creationDate) &&
        Objects.equals(this.creator, scoreTrack.creator) &&
        Objects.equals(this._default, scoreTrack._default) &&
        Objects.equals(this.id, scoreTrack.id) &&
        Objects.equals(this.mediaId, scoreTrack.mediaId) &&
        Objects.equals(this.modificationDate, scoreTrack.modificationDate) &&
        Objects.equals(this.score, scoreTrack.score) &&
        Objects.equals(this.state, scoreTrack.state) &&
        Objects.equals(this.synchronizationPoints, scoreTrack.synchronizationPoints) &&
        Objects.equals(this.title, scoreTrack.title) &&
        Objects.equals(this.type, scoreTrack.type) &&
        Objects.equals(this.url, scoreTrack.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, creator, _default, id, mediaId, modificationDate, score, state, synchronizationPoints, title, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreTrack {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    synchronizationPoints: ").append(toIndentedString(synchronizationPoints)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("creator");
    openapiFields.add("default");
    openapiFields.add("id");
    openapiFields.add("mediaId");
    openapiFields.add("modificationDate");
    openapiFields.add("score");
    openapiFields.add("state");
    openapiFields.add("synchronizationPoints");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreTrack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreTrack is not found in the empty JSON string", ScoreTrack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreTrack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreTrack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mediaId") != null && !jsonObj.get("mediaId").isJsonNull()) && !jsonObj.get("mediaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaId").toString()));
      }
      if ((jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) && !jsonObj.get("score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("score").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ScoreTrackState.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("synchronizationPoints") != null && !jsonObj.get("synchronizationPoints").isJsonNull()) {
        JsonArray jsonArraysynchronizationPoints = jsonObj.getAsJsonArray("synchronizationPoints");
        if (jsonArraysynchronizationPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("synchronizationPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `synchronizationPoints` to be an array in the JSON string but got `%s`", jsonObj.get("synchronizationPoints").toString()));
          }

          // validate the optional field `synchronizationPoints` (array)
          for (int i = 0; i < jsonArraysynchronizationPoints.size(); i++) {
            ScoreTrackPoint.validateJsonElement(jsonArraysynchronizationPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ScoreTrackType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreTrack>() {
           @Override
           public void write(JsonWriter out, ScoreTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreTrack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreTrack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreTrack
   * @throws IOException if the JSON string is invalid with respect to ScoreTrack
   */
  public static ScoreTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreTrack.class);
  }

  /**
   * Convert an instance of ScoreTrack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

