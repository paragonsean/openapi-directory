/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentSubmissionUpdateComments;
import org.openapitools.client.model.ClassAttachmentCreation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assignment Submission creation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentSubmissionUpdate {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<ClassAttachmentCreation> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private AssignmentSubmissionUpdateComments comments;

  public static final String SERIALIZED_NAME_DRAFT_GRADE = "draftGrade";
  @SerializedName(SERIALIZED_NAME_DRAFT_GRADE)
  private BigDecimal draftGrade;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade;

  public static final String SERIALIZED_NAME_RETURN = "return";
  @SerializedName(SERIALIZED_NAME_RETURN)
  private Boolean _return;

  public static final String SERIALIZED_NAME_SUBMIT = "submit";
  @SerializedName(SERIALIZED_NAME_SUBMIT)
  private Boolean submit;

  public AssignmentSubmissionUpdate() {
  }

  public AssignmentSubmissionUpdate attachments(List<ClassAttachmentCreation> attachments) {
    this.attachments = attachments;
    return this;
  }

  public AssignmentSubmissionUpdate addAttachmentsItem(ClassAttachmentCreation attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<ClassAttachmentCreation> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<ClassAttachmentCreation> attachments) {
    this.attachments = attachments;
  }


  public AssignmentSubmissionUpdate comments(AssignmentSubmissionUpdateComments comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public AssignmentSubmissionUpdateComments getComments() {
    return comments;
  }

  public void setComments(AssignmentSubmissionUpdateComments comments) {
    this.comments = comments;
  }


  public AssignmentSubmissionUpdate draftGrade(BigDecimal draftGrade) {
    this.draftGrade = draftGrade;
    return this;
  }

  /**
   * Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to &#x60;grade&#x60; once the teacher returns the submission
   * minimum: 0
   * maximum: 100
   * @return draftGrade
   */
  @javax.annotation.Nullable
  public BigDecimal getDraftGrade() {
    return draftGrade;
  }

  public void setDraftGrade(BigDecimal draftGrade) {
    this.draftGrade = draftGrade;
  }


  public AssignmentSubmissionUpdate grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

  /**
   * Optional grade. If unset, no grade was set.
   * minimum: 0
   * maximum: 100
   * @return grade
   */
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public AssignmentSubmissionUpdate _return(Boolean _return) {
    this._return = _return;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the submission will be marked as done
   * @return _return
   */
  @javax.annotation.Nullable
  public Boolean getReturn() {
    return _return;
  }

  public void setReturn(Boolean _return) {
    this._return = _return;
  }


  public AssignmentSubmissionUpdate submit(Boolean submit) {
    this.submit = submit;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the submission will be marked as done
   * @return submit
   */
  @javax.annotation.Nullable
  public Boolean getSubmit() {
    return submit;
  }

  public void setSubmit(Boolean submit) {
    this.submit = submit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentSubmissionUpdate assignmentSubmissionUpdate = (AssignmentSubmissionUpdate) o;
    return Objects.equals(this.attachments, assignmentSubmissionUpdate.attachments) &&
        Objects.equals(this.comments, assignmentSubmissionUpdate.comments) &&
        Objects.equals(this.draftGrade, assignmentSubmissionUpdate.draftGrade) &&
        Objects.equals(this.grade, assignmentSubmissionUpdate.grade) &&
        Objects.equals(this._return, assignmentSubmissionUpdate._return) &&
        Objects.equals(this.submit, assignmentSubmissionUpdate.submit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, comments, draftGrade, grade, _return, submit);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentSubmissionUpdate {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    draftGrade: ").append(toIndentedString(draftGrade)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    _return: ").append(toIndentedString(_return)).append("\n");
    sb.append("    submit: ").append(toIndentedString(submit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("comments");
    openapiFields.add("draftGrade");
    openapiFields.add("grade");
    openapiFields.add("return");
    openapiFields.add("submit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentSubmissionUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentSubmissionUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentSubmissionUpdate is not found in the empty JSON string", AssignmentSubmissionUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentSubmissionUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentSubmissionUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            ClassAttachmentCreation.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        AssignmentSubmissionUpdateComments.validateJsonElement(jsonObj.get("comments"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentSubmissionUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentSubmissionUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentSubmissionUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentSubmissionUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentSubmissionUpdate>() {
           @Override
           public void write(JsonWriter out, AssignmentSubmissionUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentSubmissionUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentSubmissionUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentSubmissionUpdate
   * @throws IOException if the JSON string is invalid with respect to AssignmentSubmissionUpdate
   */
  public static AssignmentSubmissionUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentSubmissionUpdate.class);
  }

  /**
   * Convert an instance of AssignmentSubmissionUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

