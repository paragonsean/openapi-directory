/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CollectionCapabilities;
import org.openapitools.client.model.CollectionPrivacy;
import org.openapitools.client.model.CollectionType;
import org.openapitools.client.model.ResourceCollaborator;
import org.openapitools.client.model.ResourceRights;
import org.openapitools.client.model.UserPublicSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Collection of scores
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Collection {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private String app;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private CollectionCapabilities capabilities;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private List<ResourceCollaborator> collaborators = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLLECTIONS = "collections";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS)
  private List<String> collections = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_HTML_URL = "htmlUrl";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private CollectionPrivacy privacy;

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private ResourceRights rights;

  public static final String SERIALIZED_NAME_SHARING_KEY = "sharingKey";
  @SerializedName(SERIALIZED_NAME_SHARING_KEY)
  private String sharingKey;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CollectionType type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserPublicSummary user;

  public Collection() {
  }

  public Collection app(String app) {
    this.app = app;
    return this;
  }

  /**
   * If this directory is dedicated to an app, the unique idenfier of this app
   * @return app
   */
  @javax.annotation.Nullable
  public String getApp() {
    return app;
  }

  public void setApp(String app) {
    this.app = app;
  }


  public Collection capabilities(CollectionCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public CollectionCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(CollectionCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public Collection collaborators(List<ResourceCollaborator> collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  public Collection addCollaboratorsItem(ResourceCollaborator collaboratorsItem) {
    if (this.collaborators == null) {
      this.collaborators = new ArrayList<>();
    }
    this.collaborators.add(collaboratorsItem);
    return this;
  }

  /**
   * The list of the collaborators of the collection
   * @return collaborators
   */
  @javax.annotation.Nullable
  public List<ResourceCollaborator> getCollaborators() {
    return collaborators;
  }

  public void setCollaborators(List<ResourceCollaborator> collaborators) {
    this.collaborators = collaborators;
  }


  public Collection collections(List<String> collections) {
    this.collections = collections;
    return this;
  }

  public Collection addCollectionsItem(String collectionsItem) {
    if (this.collections == null) {
      this.collections = new ArrayList<>();
    }
    this.collections.add(collectionsItem);
    return this;
  }

  /**
   * The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
   * @return collections
   */
  @javax.annotation.Nullable
  public List<String> getCollections() {
    return collections;
  }

  public void setCollections(List<String> collections) {
    this.collections = collections;
  }


  public Collection creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date when the collection was created
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Collection htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * The url where the collection can be viewed in a web browser
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public Collection id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the collection
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Collection privacy(CollectionPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nullable
  public CollectionPrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(CollectionPrivacy privacy) {
    this.privacy = privacy;
  }


  public Collection rights(ResourceRights rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Get rights
   * @return rights
   */
  @javax.annotation.Nullable
  public ResourceRights getRights() {
    return rights;
  }

  public void setRights(ResourceRights rights) {
    this.rights = rights;
  }


  public Collection sharingKey(String sharingKey) {
    this.sharingKey = sharingKey;
    return this;
  }

  /**
   * The private sharing key of the collection (available when the &#x60;privacy&#x60; mode is set to &#x60;privateLink&#x60;)
   * @return sharingKey
   */
  @javax.annotation.Nullable
  public String getSharingKey() {
    return sharingKey;
  }

  public void setSharingKey(String sharingKey) {
    this.sharingKey = sharingKey;
  }


  public Collection title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the collection
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Collection type(CollectionType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CollectionType getType() {
    return type;
  }

  public void setType(CollectionType type) {
    this.type = type;
  }


  public Collection user(UserPublicSummary user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserPublicSummary getUser() {
    return user;
  }

  public void setUser(UserPublicSummary user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collection collection = (Collection) o;
    return Objects.equals(this.app, collection.app) &&
        Objects.equals(this.capabilities, collection.capabilities) &&
        Objects.equals(this.collaborators, collection.collaborators) &&
        Objects.equals(this.collections, collection.collections) &&
        Objects.equals(this.creationDate, collection.creationDate) &&
        Objects.equals(this.htmlUrl, collection.htmlUrl) &&
        Objects.equals(this.id, collection.id) &&
        Objects.equals(this.privacy, collection.privacy) &&
        Objects.equals(this.rights, collection.rights) &&
        Objects.equals(this.sharingKey, collection.sharingKey) &&
        Objects.equals(this.title, collection.title) &&
        Objects.equals(this.type, collection.type) &&
        Objects.equals(this.user, collection.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, capabilities, collaborators, collections, creationDate, htmlUrl, id, privacy, rights, sharingKey, title, type, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collection {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    sharingKey: ").append(toIndentedString(sharingKey)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("capabilities");
    openapiFields.add("collaborators");
    openapiFields.add("collections");
    openapiFields.add("creationDate");
    openapiFields.add("htmlUrl");
    openapiFields.add("id");
    openapiFields.add("privacy");
    openapiFields.add("rights");
    openapiFields.add("sharingKey");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Collection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collection is not found in the empty JSON string", Collection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Collection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Collection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) && !jsonObj.get("app").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app").toString()));
      }
      // validate the optional field `capabilities`
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        CollectionCapabilities.validateJsonElement(jsonObj.get("capabilities"));
      }
      if (jsonObj.get("collaborators") != null && !jsonObj.get("collaborators").isJsonNull()) {
        JsonArray jsonArraycollaborators = jsonObj.getAsJsonArray("collaborators");
        if (jsonArraycollaborators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collaborators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collaborators` to be an array in the JSON string but got `%s`", jsonObj.get("collaborators").toString()));
          }

          // validate the optional field `collaborators` (array)
          for (int i = 0; i < jsonArraycollaborators.size(); i++) {
            ResourceCollaborator.validateJsonElement(jsonArraycollaborators.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collections") != null && !jsonObj.get("collections").isJsonNull() && !jsonObj.get("collections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collections` to be an array in the JSON string but got `%s`", jsonObj.get("collections").toString()));
      }
      if ((jsonObj.get("htmlUrl") != null && !jsonObj.get("htmlUrl").isJsonNull()) && !jsonObj.get("htmlUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        CollectionPrivacy.validateJsonElement(jsonObj.get("privacy"));
      }
      // validate the optional field `rights`
      if (jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) {
        ResourceRights.validateJsonElement(jsonObj.get("rights"));
      }
      if ((jsonObj.get("sharingKey") != null && !jsonObj.get("sharingKey").isJsonNull()) && !jsonObj.get("sharingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharingKey").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        CollectionType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserPublicSummary.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collection.class));

       return (TypeAdapter<T>) new TypeAdapter<Collection>() {
           @Override
           public void write(JsonWriter out, Collection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Collection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Collection
   * @throws IOException if the JSON string is invalid with respect to Collection
   */
  public static Collection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collection.class);
  }

  /**
   * Convert an instance of Collection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

