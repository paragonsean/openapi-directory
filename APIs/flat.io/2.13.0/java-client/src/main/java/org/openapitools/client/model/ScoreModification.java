/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScoreCreationType;
import org.openapitools.client.model.ScoreLicense;
import org.openapitools.client.model.ScorePrivacy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Edit the score metadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreModification {
  public static final String SERIALIZED_NAME_ARRANGER = "arranger";
  @SerializedName(SERIALIZED_NAME_ARRANGER)
  private String arranger;

  public static final String SERIALIZED_NAME_COMPOSER = "composer";
  @SerializedName(SERIALIZED_NAME_COMPOSER)
  private String composer;

  public static final String SERIALIZED_NAME_CREATION_TYPE = "creationType";
  @SerializedName(SERIALIZED_NAME_CREATION_TYPE)
  private ScoreCreationType creationType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private ScoreLicense license;

  public static final String SERIALIZED_NAME_LICENSE_TEXT = "licenseText";
  @SerializedName(SERIALIZED_NAME_LICENSE_TEXT)
  private String licenseText;

  public static final String SERIALIZED_NAME_LYRICIST = "lyricist";
  @SerializedName(SERIALIZED_NAME_LYRICIST)
  private String lyricist;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private ScorePrivacy privacy;

  public static final String SERIALIZED_NAME_SHARING_KEY = "sharingKey";
  @SerializedName(SERIALIZED_NAME_SHARING_KEY)
  private String sharingKey;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ScoreModification() {
  }

  public ScoreModification arranger(String arranger) {
    this.arranger = arranger;
    return this;
  }

  /**
   * The arranger of the score
   * @return arranger
   */
  @javax.annotation.Nullable
  public String getArranger() {
    return arranger;
  }

  public void setArranger(String arranger) {
    this.arranger = arranger;
  }


  public ScoreModification composer(String composer) {
    this.composer = composer;
    return this;
  }

  /**
   * The composer of the score
   * @return composer
   */
  @javax.annotation.Nullable
  public String getComposer() {
    return composer;
  }

  public void setComposer(String composer) {
    this.composer = composer;
  }


  public ScoreModification creationType(ScoreCreationType creationType) {
    this.creationType = creationType;
    return this;
  }

  /**
   * Get creationType
   * @return creationType
   */
  @javax.annotation.Nullable
  public ScoreCreationType getCreationType() {
    return creationType;
  }

  public void setCreationType(ScoreCreationType creationType) {
    this.creationType = creationType;
  }


  public ScoreModification description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the creation
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ScoreModification license(ScoreLicense license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  public ScoreLicense getLicense() {
    return license;
  }

  public void setLicense(ScoreLicense license) {
    this.license = license;
  }


  public ScoreModification licenseText(String licenseText) {
    this.licenseText = licenseText;
    return this;
  }

  /**
   * The rights info written on the score
   * @return licenseText
   */
  @javax.annotation.Nullable
  public String getLicenseText() {
    return licenseText;
  }

  public void setLicenseText(String licenseText) {
    this.licenseText = licenseText;
  }


  public ScoreModification lyricist(String lyricist) {
    this.lyricist = lyricist;
    return this;
  }

  /**
   * The lyricist of the score
   * @return lyricist
   */
  @javax.annotation.Nullable
  public String getLyricist() {
    return lyricist;
  }

  public void setLyricist(String lyricist) {
    this.lyricist = lyricist;
  }


  public ScoreModification privacy(ScorePrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nullable
  public ScorePrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(ScorePrivacy privacy) {
    this.privacy = privacy;
  }


  public ScoreModification sharingKey(String sharingKey) {
    this.sharingKey = sharingKey;
    return this;
  }

  /**
   * When using the &#x60;privacy&#x60; mode &#x60;privateLink&#x60;, this property can be used to set a custom sharing key, otherwise a new key will be generated.
   * @return sharingKey
   */
  @javax.annotation.Nullable
  public String getSharingKey() {
    return sharingKey;
  }

  public void setSharingKey(String sharingKey) {
    this.sharingKey = sharingKey;
  }


  public ScoreModification subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * The subtitle of the score
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public ScoreModification tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ScoreModification addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags describing the score
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ScoreModification title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the score
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreModification scoreModification = (ScoreModification) o;
    return Objects.equals(this.arranger, scoreModification.arranger) &&
        Objects.equals(this.composer, scoreModification.composer) &&
        Objects.equals(this.creationType, scoreModification.creationType) &&
        Objects.equals(this.description, scoreModification.description) &&
        Objects.equals(this.license, scoreModification.license) &&
        Objects.equals(this.licenseText, scoreModification.licenseText) &&
        Objects.equals(this.lyricist, scoreModification.lyricist) &&
        Objects.equals(this.privacy, scoreModification.privacy) &&
        Objects.equals(this.sharingKey, scoreModification.sharingKey) &&
        Objects.equals(this.subtitle, scoreModification.subtitle) &&
        Objects.equals(this.tags, scoreModification.tags) &&
        Objects.equals(this.title, scoreModification.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arranger, composer, creationType, description, license, licenseText, lyricist, privacy, sharingKey, subtitle, tags, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreModification {\n");
    sb.append("    arranger: ").append(toIndentedString(arranger)).append("\n");
    sb.append("    composer: ").append(toIndentedString(composer)).append("\n");
    sb.append("    creationType: ").append(toIndentedString(creationType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseText: ").append(toIndentedString(licenseText)).append("\n");
    sb.append("    lyricist: ").append(toIndentedString(lyricist)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    sharingKey: ").append(toIndentedString(sharingKey)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arranger");
    openapiFields.add("composer");
    openapiFields.add("creationType");
    openapiFields.add("description");
    openapiFields.add("license");
    openapiFields.add("licenseText");
    openapiFields.add("lyricist");
    openapiFields.add("privacy");
    openapiFields.add("sharingKey");
    openapiFields.add("subtitle");
    openapiFields.add("tags");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreModification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreModification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreModification is not found in the empty JSON string", ScoreModification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreModification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreModification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arranger") != null && !jsonObj.get("arranger").isJsonNull()) && !jsonObj.get("arranger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arranger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arranger").toString()));
      }
      if ((jsonObj.get("composer") != null && !jsonObj.get("composer").isJsonNull()) && !jsonObj.get("composer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `composer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("composer").toString()));
      }
      // validate the optional field `creationType`
      if (jsonObj.get("creationType") != null && !jsonObj.get("creationType").isJsonNull()) {
        ScoreCreationType.validateJsonElement(jsonObj.get("creationType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `license`
      if (jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) {
        ScoreLicense.validateJsonElement(jsonObj.get("license"));
      }
      if ((jsonObj.get("licenseText") != null && !jsonObj.get("licenseText").isJsonNull()) && !jsonObj.get("licenseText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseText").toString()));
      }
      if ((jsonObj.get("lyricist") != null && !jsonObj.get("lyricist").isJsonNull()) && !jsonObj.get("lyricist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lyricist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lyricist").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        ScorePrivacy.validateJsonElement(jsonObj.get("privacy"));
      }
      if ((jsonObj.get("sharingKey") != null && !jsonObj.get("sharingKey").isJsonNull()) && !jsonObj.get("sharingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharingKey").toString()));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreModification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreModification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreModification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreModification.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreModification>() {
           @Override
           public void write(JsonWriter out, ScoreModification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreModification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreModification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreModification
   * @throws IOException if the JSON string is invalid with respect to ScoreModification
   */
  public static ScoreModification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreModification.class);
  }

  /**
   * Convert an instance of ScoreModification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

