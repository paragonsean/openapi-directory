/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssignmentSubmission;
import java.io.File;
import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.ResourceCollaborator;
import org.openapitools.client.model.ResourceCollaboratorCreation;
import org.openapitools.client.model.ScoreComment;
import org.openapitools.client.model.ScoreCommentCreation;
import org.openapitools.client.model.ScoreCommentUpdate;
import org.openapitools.client.model.ScoreCreation;
import org.openapitools.client.model.ScoreDetails;
import org.openapitools.client.model.ScoreFork;
import org.openapitools.client.model.ScoreModification;
import org.openapitools.client.model.ScoreRevision;
import org.openapitools.client.model.ScoreRevisionCreation;
import org.openapitools.client.model.ScoreTrack;
import org.openapitools.client.model.ScoreTrackCreation;
import org.openapitools.client.model.ScoreTrackUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addScoreCollaborator
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added collaborator metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScoreCollaboratorCall(String score, ResourceCollaboratorCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/collaborators"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addScoreCollaboratorValidateBeforeCall(String score, ResourceCollaboratorCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling addScoreCollaborator(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addScoreCollaborator(Async)");
        }

        return addScoreCollaboratorCall(score, body, _callback);

    }

    /**
     * Add a new collaborator
     * Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource. - To add an existing Flat user to the resource, specify its unique identifier in the &#x60;user&#x60; property. - To invite an external user to the resource, specify its email in the &#x60;userEmail&#x60; property. - To add a Flat group to the resource, specify its unique identifier in the &#x60;group&#x60; property. - To update an existing collaborator, process the same request with different rights. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @return ResourceCollaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added collaborator metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollaborator addScoreCollaborator(String score, ResourceCollaboratorCreation body) throws ApiException {
        ApiResponse<ResourceCollaborator> localVarResp = addScoreCollaboratorWithHttpInfo(score, body);
        return localVarResp.getData();
    }

    /**
     * Add a new collaborator
     * Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource. - To add an existing Flat user to the resource, specify its unique identifier in the &#x60;user&#x60; property. - To invite an external user to the resource, specify its email in the &#x60;userEmail&#x60; property. - To add a Flat group to the resource, specify its unique identifier in the &#x60;group&#x60; property. - To update an existing collaborator, process the same request with different rights. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ResourceCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added collaborator metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollaborator> addScoreCollaboratorWithHttpInfo(String score, ResourceCollaboratorCreation body) throws ApiException {
        okhttp3.Call localVarCall = addScoreCollaboratorValidateBeforeCall(score, body, null);
        Type localVarReturnType = new TypeToken<ResourceCollaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new collaborator (asynchronously)
     * Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource. - To add an existing Flat user to the resource, specify its unique identifier in the &#x60;user&#x60; property. - To invite an external user to the resource, specify its email in the &#x60;userEmail&#x60; property. - To add a Flat group to the resource, specify its unique identifier in the &#x60;group&#x60; property. - To update an existing collaborator, process the same request with different rights. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added collaborator metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScoreCollaboratorAsync(String score, ResourceCollaboratorCreation body, final ApiCallback<ResourceCollaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = addScoreCollaboratorValidateBeforeCall(score, body, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addScoreTrack
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScoreTrackCall(String score, ScoreTrackCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/tracks"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addScoreTrackValidateBeforeCall(String score, ScoreTrackCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling addScoreTrack(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addScoreTrack(Async)");
        }

        return addScoreTrackCall(score, body, _callback);

    }

    /**
     * Add a new video or audio track to the score
     * Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score. This API method support medias hosted on SoundCloud, YouTube and Vimeo. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @return ScoreTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreTrack addScoreTrack(String score, ScoreTrackCreation body) throws ApiException {
        ApiResponse<ScoreTrack> localVarResp = addScoreTrackWithHttpInfo(score, body);
        return localVarResp.getData();
    }

    /**
     * Add a new video or audio track to the score
     * Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score. This API method support medias hosted on SoundCloud, YouTube and Vimeo. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ScoreTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreTrack> addScoreTrackWithHttpInfo(String score, ScoreTrackCreation body) throws ApiException {
        okhttp3.Call localVarCall = addScoreTrackValidateBeforeCall(score, body, null);
        Type localVarReturnType = new TypeToken<ScoreTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new video or audio track to the score (asynchronously)
     * Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score. This API method support medias hosted on SoundCloud, YouTube and Vimeo. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScoreTrackAsync(String score, ScoreTrackCreation body, final ApiCallback<ScoreTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = addScoreTrackValidateBeforeCall(score, body, _callback);
        Type localVarReturnType = new TypeToken<ScoreTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createScore
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad score creation request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScoreCall(ScoreCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScoreValidateBeforeCall(ScoreCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createScore(Async)");
        }

        return createScoreCall(body, _callback);

    }

    /**
     * Create a new score
     * Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (&#x60;vnd.recordare.musicxml&#x60; or &#x60;vnd.recordare.musicxml+xml&#x60;), a MIDI (&#x60;audio/midi&#x60;), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.  This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).  If no &#x60;collection&#x60; is specified, the API will create the score in the most appropriate collection. This can be the &#x60;root&#x60; collection or a different collection based on the user&#39;s settings or API authentication method. If a &#x60;collection&#x60; is specified and this one has more public privacy settings than the score (e.g. &#x60;public&#x60; vs &#x60;private&#x60; for the score), the privacy settings of the created score will be adjusted to the collection ones. You can check the adjusted privacy settings in the returned score &#x60;privacy&#x60;, and optionally adjust these settings if needed using &#x60;PUT /scores/{score}&#x60;. 
     * @param body  (required)
     * @return ScoreDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad score creation request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreDetails createScore(ScoreCreation body) throws ApiException {
        ApiResponse<ScoreDetails> localVarResp = createScoreWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new score
     * Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (&#x60;vnd.recordare.musicxml&#x60; or &#x60;vnd.recordare.musicxml+xml&#x60;), a MIDI (&#x60;audio/midi&#x60;), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.  This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).  If no &#x60;collection&#x60; is specified, the API will create the score in the most appropriate collection. This can be the &#x60;root&#x60; collection or a different collection based on the user&#39;s settings or API authentication method. If a &#x60;collection&#x60; is specified and this one has more public privacy settings than the score (e.g. &#x60;public&#x60; vs &#x60;private&#x60; for the score), the privacy settings of the created score will be adjusted to the collection ones. You can check the adjusted privacy settings in the returned score &#x60;privacy&#x60;, and optionally adjust these settings if needed using &#x60;PUT /scores/{score}&#x60;. 
     * @param body  (required)
     * @return ApiResponse&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad score creation request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreDetails> createScoreWithHttpInfo(ScoreCreation body) throws ApiException {
        okhttp3.Call localVarCall = createScoreValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new score (asynchronously)
     * Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (&#x60;vnd.recordare.musicxml&#x60; or &#x60;vnd.recordare.musicxml+xml&#x60;), a MIDI (&#x60;audio/midi&#x60;), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.  This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).  If no &#x60;collection&#x60; is specified, the API will create the score in the most appropriate collection. This can be the &#x60;root&#x60; collection or a different collection based on the user&#39;s settings or API authentication method. If a &#x60;collection&#x60; is specified and this one has more public privacy settings than the score (e.g. &#x60;public&#x60; vs &#x60;private&#x60; for the score), the privacy settings of the created score will be adjusted to the collection ones. You can check the adjusted privacy settings in the returned score &#x60;privacy&#x60;, and optionally adjust these settings if needed using &#x60;PUT /scores/{score}&#x60;. 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad score creation request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScoreAsync(ScoreCreation body, final ApiCallback<ScoreDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScoreValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createScoreRevision
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to modify this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScoreRevisionCall(String score, ScoreRevisionCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/revisions"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScoreRevisionValidateBeforeCall(String score, ScoreRevisionCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling createScoreRevision(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createScoreRevision(Async)");
        }

        return createScoreRevisionCall(score, body, _callback);

    }

    /**
     * Create a new revision
     * Update a score by uploading a new revision for this one. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @return ScoreRevision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to modify this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreRevision createScoreRevision(String score, ScoreRevisionCreation body) throws ApiException {
        ApiResponse<ScoreRevision> localVarResp = createScoreRevisionWithHttpInfo(score, body);
        return localVarResp.getData();
    }

    /**
     * Create a new revision
     * Update a score by uploading a new revision for this one. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ScoreRevision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to modify this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreRevision> createScoreRevisionWithHttpInfo(String score, ScoreRevisionCreation body) throws ApiException {
        okhttp3.Call localVarCall = createScoreRevisionValidateBeforeCall(score, body, null);
        Type localVarReturnType = new TypeToken<ScoreRevision>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new revision (asynchronously)
     * Update a score by uploading a new revision for this one. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to modify this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScoreRevisionAsync(String score, ScoreRevisionCreation body, final ApiCallback<ScoreRevision> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScoreRevisionValidateBeforeCall(score, body, _callback);
        Type localVarReturnType = new TypeToken<ScoreRevision>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScore
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param now If &#x60;true&#x60;, the score deletion will be scheduled to be done ASAP (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScoreCall(String score, Boolean now, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (now != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("now", now));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScoreValidateBeforeCall(String score, Boolean now, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling deleteScore(Async)");
        }

        return deleteScoreCall(score, now, _callback);

    }

    /**
     * Delete a score
     * This method can be used by the owner/admin (&#x60;aclAdmin&#x60; rights) of a score as well as regular collaborators.  When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history. The score won&#39;t be accessible anymore after calling this method and the user&#39;s quota will directly be updated.  When called by a regular collaborator (&#x60;aclRead&#x60; / &#x60;aclWrite&#x60;), the score will be unshared (i.e. removed from the account &amp; own collections). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param now If &#x60;true&#x60;, the score deletion will be scheduled to be done ASAP (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScore(String score, Boolean now) throws ApiException {
        deleteScoreWithHttpInfo(score, now);
    }

    /**
     * Delete a score
     * This method can be used by the owner/admin (&#x60;aclAdmin&#x60; rights) of a score as well as regular collaborators.  When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history. The score won&#39;t be accessible anymore after calling this method and the user&#39;s quota will directly be updated.  When called by a regular collaborator (&#x60;aclRead&#x60; / &#x60;aclWrite&#x60;), the score will be unshared (i.e. removed from the account &amp; own collections). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param now If &#x60;true&#x60;, the score deletion will be scheduled to be done ASAP (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScoreWithHttpInfo(String score, Boolean now) throws ApiException {
        okhttp3.Call localVarCall = deleteScoreValidateBeforeCall(score, now, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a score (asynchronously)
     * This method can be used by the owner/admin (&#x60;aclAdmin&#x60; rights) of a score as well as regular collaborators.  When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history. The score won&#39;t be accessible anymore after calling this method and the user&#39;s quota will directly be updated.  When called by a regular collaborator (&#x60;aclRead&#x60; / &#x60;aclWrite&#x60;), the score will be unshared (i.e. removed from the account &amp; own collections). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param now If &#x60;true&#x60;, the score deletion will be scheduled to be done ASAP (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScoreAsync(String score, Boolean now, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScoreValidateBeforeCall(score, now, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScoreComment
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScoreCommentCall(String score, String comment, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/comments/{comment}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScoreCommentValidateBeforeCall(String score, String comment, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling deleteScoreComment(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling deleteScoreComment(Async)");
        }

        return deleteScoreCommentCall(score, comment, sharingKey, _callback);

    }

    /**
     * Delete a comment
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScoreComment(String score, String comment, String sharingKey) throws ApiException {
        deleteScoreCommentWithHttpInfo(score, comment, sharingKey);
    }

    /**
     * Delete a comment
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScoreCommentWithHttpInfo(String score, String comment, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = deleteScoreCommentValidateBeforeCall(score, comment, sharingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a comment (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScoreCommentAsync(String score, String comment, String sharingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScoreCommentValidateBeforeCall(score, comment, sharingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScoreTrack
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScoreTrackCall(String score, String track, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/tracks/{track}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "track" + "}", localVarApiClient.escapeString(track.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScoreTrackValidateBeforeCall(String score, String track, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling deleteScoreTrack(Async)");
        }

        // verify the required parameter 'track' is set
        if (track == null) {
            throw new ApiException("Missing the required parameter 'track' when calling deleteScoreTrack(Async)");
        }

        return deleteScoreTrackCall(score, track, _callback);

    }

    /**
     * Remove an audio or video track linked to the score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScoreTrack(String score, String track) throws ApiException {
        deleteScoreTrackWithHttpInfo(score, track);
    }

    /**
     * Remove an audio or video track linked to the score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScoreTrackWithHttpInfo(String score, String track) throws ApiException {
        okhttp3.Call localVarCall = deleteScoreTrackValidateBeforeCall(score, track, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an audio or video track linked to the score (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Track removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScoreTrackAsync(String score, String track, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScoreTrackValidateBeforeCall(score, track, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editScore
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editScoreCall(String score, ScoreModification body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editScoreValidateBeforeCall(String score, ScoreModification body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling editScore(Async)");
        }

        return editScoreCall(score, body, _callback);

    }

    /**
     * Edit a score&#39;s metadata
     * This API method allows you to change the metadata of a score document (e.g. its &#x60;title&#x60; or &#x60;privacy&#x60;), all the properties are optional.  To edit the file itself, create a new revision using the appropriate method (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  When editing the &#x60;title&#x60;, &#x60;subtitle&#x60;, &#x60;composer&#x60;, &#x60;lyricist&#x60;, &#x60;arranger&#x60; or &#x60;licenseText&#x60;, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily. This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (optional)
     * @return ScoreDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreDetails editScore(String score, ScoreModification body) throws ApiException {
        ApiResponse<ScoreDetails> localVarResp = editScoreWithHttpInfo(score, body);
        return localVarResp.getData();
    }

    /**
     * Edit a score&#39;s metadata
     * This API method allows you to change the metadata of a score document (e.g. its &#x60;title&#x60; or &#x60;privacy&#x60;), all the properties are optional.  To edit the file itself, create a new revision using the appropriate method (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  When editing the &#x60;title&#x60;, &#x60;subtitle&#x60;, &#x60;composer&#x60;, &#x60;lyricist&#x60;, &#x60;arranger&#x60; or &#x60;licenseText&#x60;, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily. This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreDetails> editScoreWithHttpInfo(String score, ScoreModification body) throws ApiException {
        okhttp3.Call localVarCall = editScoreValidateBeforeCall(score, body, null);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a score&#39;s metadata (asynchronously)
     * This API method allows you to change the metadata of a score document (e.g. its &#x60;title&#x60; or &#x60;privacy&#x60;), all the properties are optional.  To edit the file itself, create a new revision using the appropriate method (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  When editing the &#x60;title&#x60;, &#x60;subtitle&#x60;, &#x60;composer&#x60;, &#x60;lyricist&#x60;, &#x60;arranger&#x60; or &#x60;licenseText&#x60;, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily. This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editScoreAsync(String score, ScoreModification body, final ApiCallback<ScoreDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = editScoreValidateBeforeCall(score, body, _callback);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forkScore
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkScoreCall(String score, ScoreFork body, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/fork"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forkScoreValidateBeforeCall(String score, ScoreFork body, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling forkScore(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling forkScore(Async)");
        }

        return forkScoreCall(score, body, sharingKey, _callback);

    }

    /**
     * Fork a score
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreDetails forkScore(String score, ScoreFork body, String sharingKey) throws ApiException {
        ApiResponse<ScoreDetails> localVarResp = forkScoreWithHttpInfo(score, body, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Fork a score
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreDetails> forkScoreWithHttpInfo(String score, ScoreFork body, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = forkScoreValidateBeforeCall(score, body, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fork a score (asynchronously)
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkScoreAsync(String score, ScoreFork body, String sharingKey, final ApiCallback<ScoreDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = forkScoreValidateBeforeCall(score, body, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gerUserLikes_0
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param ids Return only the identifiers of the scores (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of liked scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gerUserLikes_0Call(String user, Boolean ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user}/likes"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gerUserLikes_0ValidateBeforeCall(String user, Boolean ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling gerUserLikes_0(Async)");
        }

        return gerUserLikes_0Call(user, ids, _callback);

    }

    /**
     * List liked scores
     * 
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param ids Return only the identifiers of the scores (optional)
     * @return List&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of liked scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreDetails> gerUserLikes_0(String user, Boolean ids) throws ApiException {
        ApiResponse<List<ScoreDetails>> localVarResp = gerUserLikes_0WithHttpInfo(user, ids);
        return localVarResp.getData();
    }

    /**
     * List liked scores
     * 
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param ids Return only the identifiers of the scores (optional)
     * @return ApiResponse&lt;List&lt;ScoreDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of liked scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreDetails>> gerUserLikes_0WithHttpInfo(String user, Boolean ids) throws ApiException {
        okhttp3.Call localVarCall = gerUserLikes_0ValidateBeforeCall(user, ids, null);
        Type localVarReturnType = new TypeToken<List<ScoreDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List liked scores (asynchronously)
     * 
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param ids Return only the identifiers of the scores (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of liked scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gerUserLikes_0Async(String user, Boolean ids, final ApiCallback<List<ScoreDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gerUserLikes_0ValidateBeforeCall(user, ids, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupScores_0
     * @param group Unique identifier of a Flat group  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group&#39;s scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupScores_0Call(String group, String parent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group}/scores"
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupScores_0ValidateBeforeCall(String group, String parent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getGroupScores_0(Async)");
        }

        return getGroupScores_0Call(group, parent, _callback);

    }

    /**
     * List group&#39;s scores
     * Get the list of scores shared with a group. 
     * @param group Unique identifier of a Flat group  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @return List&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group&#39;s scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreDetails> getGroupScores_0(String group, String parent) throws ApiException {
        ApiResponse<List<ScoreDetails>> localVarResp = getGroupScores_0WithHttpInfo(group, parent);
        return localVarResp.getData();
    }

    /**
     * List group&#39;s scores
     * Get the list of scores shared with a group. 
     * @param group Unique identifier of a Flat group  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @return ApiResponse&lt;List&lt;ScoreDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group&#39;s scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreDetails>> getGroupScores_0WithHttpInfo(String group, String parent) throws ApiException {
        okhttp3.Call localVarCall = getGroupScores_0ValidateBeforeCall(group, parent, null);
        Type localVarReturnType = new TypeToken<List<ScoreDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List group&#39;s scores (asynchronously)
     * Get the list of scores shared with a group. 
     * @param group Unique identifier of a Flat group  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The group&#39;s scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupScores_0Async(String group, String parent, final ApiCallback<List<ScoreDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupScores_0ValidateBeforeCall(group, parent, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScore
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota and this document is out of the granted quota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCall(String score, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreValidateBeforeCall(String score, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScore(Async)");
        }

        return getScoreCall(score, sharingKey, _callback);

    }

    /**
     * Get a score&#39;s metadata
     * Get the details of a score identified by the &#x60;score&#x60; parameter in the URL. The currently authenticated user must have at least a read access to the document to use this API call. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota and this document is out of the granted quota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreDetails getScore(String score, String sharingKey) throws ApiException {
        ApiResponse<ScoreDetails> localVarResp = getScoreWithHttpInfo(score, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Get a score&#39;s metadata
     * Get the details of a score identified by the &#x60;score&#x60; parameter in the URL. The currently authenticated user must have at least a read access to the document to use this API call. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota and this document is out of the granted quota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreDetails> getScoreWithHttpInfo(String score, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = getScoreValidateBeforeCall(score, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a score&#39;s metadata (asynchronously)
     * Get the details of a score identified by the &#x60;score&#x60; parameter in the URL. The currently authenticated user must have at least a read access to the document to use this API call. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota and this document is out of the granted quota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreAsync(String score, String sharingKey, final ApiCallback<ScoreDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreValidateBeforeCall(score, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreCollaborator
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCollaboratorCall(String score, String collaborator, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/collaborators/{collaborator}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreCollaboratorValidateBeforeCall(String score, String collaborator, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreCollaborator(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling getScoreCollaborator(Async)");
        }

        return getScoreCollaboratorCall(score, collaborator, sharingKey, _callback);

    }

    /**
     * Get a collaborator
     * Get the information about a collaborator (User or Group). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ResourceCollaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollaborator getScoreCollaborator(String score, String collaborator, String sharingKey) throws ApiException {
        ApiResponse<ResourceCollaborator> localVarResp = getScoreCollaboratorWithHttpInfo(score, collaborator, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Get a collaborator
     * Get the information about a collaborator (User or Group). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ResourceCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollaborator> getScoreCollaboratorWithHttpInfo(String score, String collaborator, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = getScoreCollaboratorValidateBeforeCall(score, collaborator, sharingKey, null);
        Type localVarReturnType = new TypeToken<ResourceCollaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a collaborator (asynchronously)
     * Get the information about a collaborator (User or Group). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCollaboratorAsync(String score, String collaborator, String sharingKey, final ApiCallback<ResourceCollaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreCollaboratorValidateBeforeCall(score, collaborator, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreCollaborators
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCollaboratorsCall(String score, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/collaborators"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreCollaboratorsValidateBeforeCall(String score, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreCollaborators(Async)");
        }

        return getScoreCollaboratorsCall(score, sharingKey, _callback);

    }

    /**
     * List the collaborators
     * This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.  Collaborators can be a single user (the object &#x60;user&#x60; will be populated) or a group (the object &#x60;group&#x60; will be populated). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return List&lt;ResourceCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceCollaborator> getScoreCollaborators(String score, String sharingKey) throws ApiException {
        ApiResponse<List<ResourceCollaborator>> localVarResp = getScoreCollaboratorsWithHttpInfo(score, sharingKey);
        return localVarResp.getData();
    }

    /**
     * List the collaborators
     * This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.  Collaborators can be a single user (the object &#x60;user&#x60; will be populated) or a group (the object &#x60;group&#x60; will be populated). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;List&lt;ResourceCollaborator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceCollaborator>> getScoreCollaboratorsWithHttpInfo(String score, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = getScoreCollaboratorsValidateBeforeCall(score, sharingKey, null);
        Type localVarReturnType = new TypeToken<List<ResourceCollaborator>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the collaborators (asynchronously)
     * This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.  Collaborators can be a single user (the object &#x60;user&#x60; will be populated) or a group (the object &#x60;group&#x60; will be populated). 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCollaboratorsAsync(String score, String sharingKey, final ApiCallback<List<ResourceCollaborator>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreCollaboratorsValidateBeforeCall(score, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceCollaborator>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreComments
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param type Filter the comments by type (optional)
     * @param sort Sort (optional)
     * @param direction Sort direction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCommentsCall(String score, String sharingKey, String type, String sort, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/comments"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreCommentsValidateBeforeCall(String score, String sharingKey, String type, String sort, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreComments(Async)");
        }

        return getScoreCommentsCall(score, sharingKey, type, sort, direction, _callback);

    }

    /**
     * List comments
     * This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param type Filter the comments by type (optional)
     * @param sort Sort (optional)
     * @param direction Sort direction (optional)
     * @return List&lt;ScoreComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreComment> getScoreComments(String score, String sharingKey, String type, String sort, String direction) throws ApiException {
        ApiResponse<List<ScoreComment>> localVarResp = getScoreCommentsWithHttpInfo(score, sharingKey, type, sort, direction);
        return localVarResp.getData();
    }

    /**
     * List comments
     * This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param type Filter the comments by type (optional)
     * @param sort Sort (optional)
     * @param direction Sort direction (optional)
     * @return ApiResponse&lt;List&lt;ScoreComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreComment>> getScoreCommentsWithHttpInfo(String score, String sharingKey, String type, String sort, String direction) throws ApiException {
        okhttp3.Call localVarCall = getScoreCommentsValidateBeforeCall(score, sharingKey, type, sort, direction, null);
        Type localVarReturnType = new TypeToken<List<ScoreComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List comments (asynchronously)
     * This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param type Filter the comments by type (optional)
     * @param sort Sort (optional)
     * @param direction Sort direction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreCommentsAsync(String score, String sharingKey, String type, String sort, String direction, final ApiCallback<List<ScoreComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreCommentsValidateBeforeCall(score, sharingKey, type, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreRevision
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreRevisionCall(String score, String revision, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/revisions/{revision}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "revision" + "}", localVarApiClient.escapeString(revision.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreRevisionValidateBeforeCall(String score, String revision, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreRevision(Async)");
        }

        // verify the required parameter 'revision' is set
        if (revision == null) {
            throw new ApiException("Missing the required parameter 'revision' when calling getScoreRevision(Async)");
        }

        return getScoreRevisionCall(score, revision, sharingKey, _callback);

    }

    /**
     * Get a score revision
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific revision metadata. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreRevision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreRevision getScoreRevision(String score, String revision, String sharingKey) throws ApiException {
        ApiResponse<ScoreRevision> localVarResp = getScoreRevisionWithHttpInfo(score, revision, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Get a score revision
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific revision metadata. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreRevision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreRevision> getScoreRevisionWithHttpInfo(String score, String revision, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = getScoreRevisionValidateBeforeCall(score, revision, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreRevision>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a score revision (asynchronously)
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific revision metadata. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision metadata </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreRevisionAsync(String score, String revision, String sharingKey, final ApiCallback<ScoreRevision> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreRevisionValidateBeforeCall(score, revision, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreRevision>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreRevisionData
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param format The format of the file you will retrieve (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param parts An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids separated by commas. For example \&quot;59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\&quot;.  (optional)
     * @param onlyCached Only return files already generated and cached in Flat&#39;s production cache. If the file is not availabe, a 404 will be returned  (optional)
     * @param url Returns a json with the &#x60;url&#x60; in it instead of redirecting  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision data </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or associated file not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreRevisionDataCall(String score, String revision, String format, String sharingKey, String parts, Boolean onlyCached, Boolean url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/revisions/{revision}/{format}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "revision" + "}", localVarApiClient.escapeString(revision.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        if (parts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parts", parts));
        }

        if (onlyCached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyCached", onlyCached));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.recordare.musicxml",
            "application/vnd.recordare.musicxml+xml",
            "audio/midi",
            "audio/mp3",
            "audio/wav",
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreRevisionDataValidateBeforeCall(String score, String revision, String format, String sharingKey, String parts, Boolean onlyCached, Boolean url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreRevisionData(Async)");
        }

        // verify the required parameter 'revision' is set
        if (revision == null) {
            throw new ApiException("Missing the required parameter 'revision' when calling getScoreRevisionData(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getScoreRevisionData(Async)");
        }

        return getScoreRevisionDataCall(score, revision, format, sharingKey, parts, onlyCached, url, _callback);

    }

    /**
     * Get a score revision data
     * Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON &#x60;json&#x60;, MusicXML &#x60;mxl&#x60;/&#x60;xml&#x60;, MP3 &#x60;mp3&#x60;, WAV &#x60;wav&#x60;, MIDI &#x60;midi&#x60;, a tumbnail of the first page &#x60;thumbnail.png&#x60; or auto sync points &#x60;synchronizationPoints&#x60;. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param format The format of the file you will retrieve (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param parts An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids separated by commas. For example \&quot;59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\&quot;.  (optional)
     * @param onlyCached Only return files already generated and cached in Flat&#39;s production cache. If the file is not availabe, a 404 will be returned  (optional)
     * @param url Returns a json with the &#x60;url&#x60; in it instead of redirecting  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision data </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or associated file not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public File getScoreRevisionData(String score, String revision, String format, String sharingKey, String parts, Boolean onlyCached, Boolean url) throws ApiException {
        ApiResponse<File> localVarResp = getScoreRevisionDataWithHttpInfo(score, revision, format, sharingKey, parts, onlyCached, url);
        return localVarResp.getData();
    }

    /**
     * Get a score revision data
     * Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON &#x60;json&#x60;, MusicXML &#x60;mxl&#x60;/&#x60;xml&#x60;, MP3 &#x60;mp3&#x60;, WAV &#x60;wav&#x60;, MIDI &#x60;midi&#x60;, a tumbnail of the first page &#x60;thumbnail.png&#x60; or auto sync points &#x60;synchronizationPoints&#x60;. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param format The format of the file you will retrieve (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param parts An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids separated by commas. For example \&quot;59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\&quot;.  (optional)
     * @param onlyCached Only return files already generated and cached in Flat&#39;s production cache. If the file is not availabe, a 404 will be returned  (optional)
     * @param url Returns a json with the &#x60;url&#x60; in it instead of redirecting  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision data </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or associated file not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getScoreRevisionDataWithHttpInfo(String score, String revision, String format, String sharingKey, String parts, Boolean onlyCached, Boolean url) throws ApiException {
        okhttp3.Call localVarCall = getScoreRevisionDataValidateBeforeCall(score, revision, format, sharingKey, parts, onlyCached, url, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a score revision data (asynchronously)
     * Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON &#x60;json&#x60;, MusicXML &#x60;mxl&#x60;/&#x60;xml&#x60;, MP3 &#x60;mp3&#x60;, WAV &#x60;wav&#x60;, MIDI &#x60;midi&#x60;, a tumbnail of the first page &#x60;thumbnail.png&#x60; or auto sync points &#x60;synchronizationPoints&#x60;. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param revision Unique identifier of a score revision. You can use &#x60;last&#x60; to fetch the information related to the last version created.  (required)
     * @param format The format of the file you will retrieve (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param parts An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids separated by commas. For example \&quot;59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87\&quot;.  (optional)
     * @param onlyCached Only return files already generated and cached in Flat&#39;s production cache. If the file is not availabe, a 404 will be returned  (optional)
     * @param url Returns a json with the &#x60;url&#x60; in it instead of redirecting  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revision data </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or associated file not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreRevisionDataAsync(String score, String revision, String format, String sharingKey, String parts, Boolean onlyCached, Boolean url, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreRevisionDataValidateBeforeCall(score, revision, format, sharingKey, parts, onlyCached, url, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreRevisions
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of revisions </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreRevisionsCall(String score, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/revisions"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreRevisionsValidateBeforeCall(String score, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreRevisions(Async)");
        }

        return getScoreRevisionsCall(score, sharingKey, _callback);

    }

    /**
     * List the revisions
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.  Depending the plan of the account, this list can be trunked to the few last revisions. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return List&lt;ScoreRevision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of revisions </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreRevision> getScoreRevisions(String score, String sharingKey) throws ApiException {
        ApiResponse<List<ScoreRevision>> localVarResp = getScoreRevisionsWithHttpInfo(score, sharingKey);
        return localVarResp.getData();
    }

    /**
     * List the revisions
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.  Depending the plan of the account, this list can be trunked to the few last revisions. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;List&lt;ScoreRevision&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of revisions </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreRevision>> getScoreRevisionsWithHttpInfo(String score, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = getScoreRevisionsValidateBeforeCall(score, sharingKey, null);
        Type localVarReturnType = new TypeToken<List<ScoreRevision>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the revisions (asynchronously)
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.  Depending the plan of the account, this list can be trunked to the few last revisions. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of revisions </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreRevisionsAsync(String score, String sharingKey, final ApiCallback<List<ScoreRevision>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreRevisionsValidateBeforeCall(score, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreRevision>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreSubmissions
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreSubmissionsCall(String score, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/submissions"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreSubmissionsValidateBeforeCall(String score, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreSubmissions(Async)");
        }

        return getScoreSubmissionsCall(score, _callback);

    }

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @return List&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignmentSubmission> getScoreSubmissions(String score) throws ApiException {
        ApiResponse<List<AssignmentSubmission>> localVarResp = getScoreSubmissionsWithHttpInfo(score);
        return localVarResp.getData();
    }

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @return ApiResponse&lt;List&lt;AssignmentSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignmentSubmission>> getScoreSubmissionsWithHttpInfo(String score) throws ApiException {
        okhttp3.Call localVarCall = getScoreSubmissionsValidateBeforeCall(score, null);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List submissions related to the score (asynchronously)
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreSubmissionsAsync(String score, final ApiCallback<List<AssignmentSubmission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreSubmissionsValidateBeforeCall(score, _callback);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreTrack
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreTrackCall(String score, String track, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/tracks/{track}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "track" + "}", localVarApiClient.escapeString(track.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreTrackValidateBeforeCall(String score, String track, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreTrack(Async)");
        }

        // verify the required parameter 'track' is set
        if (track == null) {
            throw new ApiException("Missing the required parameter 'track' when calling getScoreTrack(Async)");
        }

        return getScoreTrackCall(score, track, sharingKey, _callback);

    }

    /**
     * Retrieve the details of an audio or video track linked to a score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreTrack getScoreTrack(String score, String track, String sharingKey) throws ApiException {
        ApiResponse<ScoreTrack> localVarResp = getScoreTrackWithHttpInfo(score, track, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Retrieve the details of an audio or video track linked to a score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreTrack> getScoreTrackWithHttpInfo(String score, String track, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = getScoreTrackValidateBeforeCall(score, track, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the details of an audio or video track linked to a score (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Track details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreTrackAsync(String score, String track, String sharingKey, final ApiCallback<ScoreTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreTrackValidateBeforeCall(score, track, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserScores_0
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserScores_0Call(String user, String parent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user}/scores"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserScores_0ValidateBeforeCall(String user, String parent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUserScores_0(Async)");
        }

        return getUserScores_0Call(user, parent, _callback);

    }

    /**
     * List user&#39;s scores
     * Get the list of public scores owned by a User.  **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**. This method will no longer list private and shared scores, but only public scores of a Flat account. If you want to access to private scores, please use the [Collections API](#tag/Collection) instead. 
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @return List&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreDetails> getUserScores_0(String user, String parent) throws ApiException {
        ApiResponse<List<ScoreDetails>> localVarResp = getUserScores_0WithHttpInfo(user, parent);
        return localVarResp.getData();
    }

    /**
     * List user&#39;s scores
     * Get the list of public scores owned by a User.  **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**. This method will no longer list private and shared scores, but only public scores of a Flat account. If you want to access to private scores, please use the [Collections API](#tag/Collection) instead. 
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @return ApiResponse&lt;List&lt;ScoreDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreDetails>> getUserScores_0WithHttpInfo(String user, String parent) throws ApiException {
        okhttp3.Call localVarCall = getUserScores_0ValidateBeforeCall(user, parent, null);
        Type localVarReturnType = new TypeToken<List<ScoreDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List user&#39;s scores (asynchronously)
     * Get the list of public scores owned by a User.  **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**. This method will no longer list private and shared scores, but only public scores of a Flat account. If you want to access to private scores, please use the [Collections API](#tag/Collection) instead. 
     * @param user Unique identifier of a Flat user. If you authenticated, you can use &#x60;me&#x60; to refer to the current user.  (required)
     * @param parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user scores </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserScores_0Async(String user, String parent, final ApiCallback<List<ScoreDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserScores_0ValidateBeforeCall(user, parent, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listScoreTracks
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param assignment An assignment id with which all the tracks returned will be related to  (optional)
     * @param listAutoTrack If true, and if available, return last automatically synchronized Flat&#39;s mp3 export as an additional track  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracks </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScoreTracksCall(String score, String sharingKey, String assignment, Boolean listAutoTrack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/tracks"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        if (assignment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment", assignment));
        }

        if (listAutoTrack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listAutoTrack", listAutoTrack));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScoreTracksValidateBeforeCall(String score, String sharingKey, String assignment, Boolean listAutoTrack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling listScoreTracks(Async)");
        }

        return listScoreTracksCall(score, sharingKey, assignment, listAutoTrack, _callback);

    }

    /**
     * List the audio or video tracks linked to a score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param assignment An assignment id with which all the tracks returned will be related to  (optional)
     * @param listAutoTrack If true, and if available, return last automatically synchronized Flat&#39;s mp3 export as an additional track  (optional)
     * @return List&lt;ScoreTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracks </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreTrack> listScoreTracks(String score, String sharingKey, String assignment, Boolean listAutoTrack) throws ApiException {
        ApiResponse<List<ScoreTrack>> localVarResp = listScoreTracksWithHttpInfo(score, sharingKey, assignment, listAutoTrack);
        return localVarResp.getData();
    }

    /**
     * List the audio or video tracks linked to a score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param assignment An assignment id with which all the tracks returned will be related to  (optional)
     * @param listAutoTrack If true, and if available, return last automatically synchronized Flat&#39;s mp3 export as an additional track  (optional)
     * @return ApiResponse&lt;List&lt;ScoreTrack&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracks </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreTrack>> listScoreTracksWithHttpInfo(String score, String sharingKey, String assignment, Boolean listAutoTrack) throws ApiException {
        okhttp3.Call localVarCall = listScoreTracksValidateBeforeCall(score, sharingKey, assignment, listAutoTrack, null);
        Type localVarReturnType = new TypeToken<List<ScoreTrack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the audio or video tracks linked to a score (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param assignment An assignment id with which all the tracks returned will be related to  (optional)
     * @param listAutoTrack If true, and if available, return last automatically synchronized Flat&#39;s mp3 export as an additional track  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tracks </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScoreTracksAsync(String score, String sharingKey, String assignment, Boolean listAutoTrack, final ApiCallback<List<ScoreTrack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScoreTracksValidateBeforeCall(score, sharingKey, assignment, listAutoTrack, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreTrack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markScoreCommentResolved
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been marked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to mark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markScoreCommentResolvedCall(String score, String comment, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/comments/{comment}/resolved"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markScoreCommentResolvedValidateBeforeCall(String score, String comment, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling markScoreCommentResolved(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling markScoreCommentResolved(Async)");
        }

        return markScoreCommentResolvedCall(score, comment, sharingKey, _callback);

    }

    /**
     * Mark the comment as resolved
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been marked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to mark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void markScoreCommentResolved(String score, String comment, String sharingKey) throws ApiException {
        markScoreCommentResolvedWithHttpInfo(score, comment, sharingKey);
    }

    /**
     * Mark the comment as resolved
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been marked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to mark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> markScoreCommentResolvedWithHttpInfo(String score, String comment, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = markScoreCommentResolvedValidateBeforeCall(score, comment, sharingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark the comment as resolved (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been marked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to mark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markScoreCommentResolvedAsync(String score, String comment, String sharingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markScoreCommentResolvedValidateBeforeCall(score, comment, sharingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for markScoreCommentUnresolved
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been unmarked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to unmark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markScoreCommentUnresolvedCall(String score, String comment, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/comments/{comment}/resolved"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markScoreCommentUnresolvedValidateBeforeCall(String score, String comment, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling markScoreCommentUnresolved(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling markScoreCommentUnresolved(Async)");
        }

        return markScoreCommentUnresolvedCall(score, comment, sharingKey, _callback);

    }

    /**
     * Mark the comment as unresolved
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been unmarked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to unmark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void markScoreCommentUnresolved(String score, String comment, String sharingKey) throws ApiException {
        markScoreCommentUnresolvedWithHttpInfo(score, comment, sharingKey);
    }

    /**
     * Mark the comment as unresolved
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been unmarked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to unmark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> markScoreCommentUnresolvedWithHttpInfo(String score, String comment, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = markScoreCommentUnresolvedValidateBeforeCall(score, comment, sharingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark the comment as unresolved (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been unmarked as resolved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to unmark this comment as resolved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or comment not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markScoreCommentUnresolvedAsync(String score, String comment, String sharingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markScoreCommentUnresolvedValidateBeforeCall(score, comment, sharingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postScoreComment
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score, to post a comment, or your API call triggered our spam filter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScoreCommentCall(String score, ScoreCommentCreation body, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/comments"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postScoreCommentValidateBeforeCall(String score, ScoreCommentCreation body, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling postScoreComment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postScoreComment(Async)");
        }

        return postScoreCommentCall(score, body, sharingKey, _callback);

    }

    /**
     * Post a new comment
     * Post a document or a contextualized comment on a document.  Please note that this method includes an anti-spam system for public scores. We don&#39;t guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a &#x60;403&#x60; HTTP error and hidden from other users when the &#x60;spam&#x60; property is &#x60;true&#x60;. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score, to post a comment, or your API call triggered our spam filter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreComment postScoreComment(String score, ScoreCommentCreation body, String sharingKey) throws ApiException {
        ApiResponse<ScoreComment> localVarResp = postScoreCommentWithHttpInfo(score, body, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Post a new comment
     * Post a document or a contextualized comment on a document.  Please note that this method includes an anti-spam system for public scores. We don&#39;t guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a &#x60;403&#x60; HTTP error and hidden from other users when the &#x60;spam&#x60; property is &#x60;true&#x60;. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score, to post a comment, or your API call triggered our spam filter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreComment> postScoreCommentWithHttpInfo(String score, ScoreCommentCreation body, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = postScoreCommentValidateBeforeCall(score, body, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post a new comment (asynchronously)
     * Post a document or a contextualized comment on a document.  Please note that this method includes an anti-spam system for public scores. We don&#39;t guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a &#x60;403&#x60; HTTP error and hidden from other users when the &#x60;spam&#x60; property is &#x60;true&#x60;. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score, to post a comment, or your API call triggered our spam filter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postScoreCommentAsync(String score, ScoreCommentCreation body, String sharingKey, final ApiCallback<ScoreComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = postScoreCommentValidateBeforeCall(score, body, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeScoreCollaborator
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The collaborator has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeScoreCollaboratorCall(String score, String collaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/collaborators/{collaborator}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "collaborator" + "}", localVarApiClient.escapeString(collaborator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeScoreCollaboratorValidateBeforeCall(String score, String collaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling removeScoreCollaborator(Async)");
        }

        // verify the required parameter 'collaborator' is set
        if (collaborator == null) {
            throw new ApiException("Missing the required parameter 'collaborator' when calling removeScoreCollaborator(Async)");
        }

        return removeScoreCollaboratorCall(score, collaborator, _callback);

    }

    /**
     * Delete a collaborator
     * Remove the specified collaborator from the score 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The collaborator has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void removeScoreCollaborator(String score, String collaborator) throws ApiException {
        removeScoreCollaboratorWithHttpInfo(score, collaborator);
    }

    /**
     * Delete a collaborator
     * Remove the specified collaborator from the score 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The collaborator has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeScoreCollaboratorWithHttpInfo(String score, String collaborator) throws ApiException {
        okhttp3.Call localVarCall = removeScoreCollaboratorValidateBeforeCall(score, collaborator, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a collaborator (asynchronously)
     * Remove the specified collaborator from the score 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param collaborator Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The collaborator has been removed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or collaborator not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeScoreCollaboratorAsync(String score, String collaborator, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeScoreCollaboratorValidateBeforeCall(score, collaborator, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untrashScore
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been untrashed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untrashScoreCall(String score, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/untrash"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untrashScoreValidateBeforeCall(String score, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling untrashScore(Async)");
        }

        return untrashScoreCall(score, _callback);

    }

    /**
     * Untrash a score
     * This method will remove the score from the &#x60;trash&#x60; collection and from the deletion queue, and add it back to the original collections. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been untrashed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void untrashScore(String score) throws ApiException {
        untrashScoreWithHttpInfo(score);
    }

    /**
     * Untrash a score
     * This method will remove the score from the &#x60;trash&#x60; collection and from the deletion queue, and add it back to the original collections. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been untrashed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untrashScoreWithHttpInfo(String score) throws ApiException {
        okhttp3.Call localVarCall = untrashScoreValidateBeforeCall(score, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Untrash a score (asynchronously)
     * This method will remove the score from the &#x60;trash&#x60; collection and from the deletion queue, and add it back to the original collections. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The score has been untrashed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to manage this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untrashScoreAsync(String score, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untrashScoreValidateBeforeCall(score, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScoreComment
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScoreCommentCall(String score, String comment, ScoreCommentUpdate body, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/comments/{comment}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScoreCommentValidateBeforeCall(String score, String comment, ScoreCommentUpdate body, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling updateScoreComment(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateScoreComment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateScoreComment(Async)");
        }

        return updateScoreCommentCall(score, comment, body, sharingKey, _callback);

    }

    /**
     * Update an existing comment
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreComment updateScoreComment(String score, String comment, ScoreCommentUpdate body, String sharingKey) throws ApiException {
        ApiResponse<ScoreComment> localVarResp = updateScoreCommentWithHttpInfo(score, comment, body, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Update an existing comment
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreComment> updateScoreCommentWithHttpInfo(String score, String comment, ScoreCommentUpdate body, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = updateScoreCommentValidateBeforeCall(score, comment, body, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing comment (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param comment Unique identifier of a sheet music comment  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The edited comment </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score or not the original comment creator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScoreCommentAsync(String score, String comment, ScoreCommentUpdate body, String sharingKey, final ApiCallback<ScoreComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScoreCommentValidateBeforeCall(score, comment, body, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScoreTrack
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScoreTrackCall(String score, String track, ScoreTrackUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/tracks/{track}"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()))
            .replace("{" + "track" + "}", localVarApiClient.escapeString(track.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScoreTrackValidateBeforeCall(String score, String track, ScoreTrackUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling updateScoreTrack(Async)");
        }

        // verify the required parameter 'track' is set
        if (track == null) {
            throw new ApiException("Missing the required parameter 'track' when calling updateScoreTrack(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateScoreTrack(Async)");
        }

        return updateScoreTrackCall(score, track, body, _callback);

    }

    /**
     * Update an audio or video track linked to a score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param body  (required)
     * @return ScoreTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreTrack updateScoreTrack(String score, String track, ScoreTrackUpdate body) throws ApiException {
        ApiResponse<ScoreTrack> localVarResp = updateScoreTrackWithHttpInfo(score, track, body);
        return localVarResp.getData();
    }

    /**
     * Update an audio or video track linked to a score
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ScoreTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreTrack> updateScoreTrackWithHttpInfo(String score, String track, ScoreTrackUpdate body) throws ApiException {
        okhttp3.Call localVarCall = updateScoreTrackValidateBeforeCall(score, track, body, null);
        Type localVarReturnType = new TypeToken<ScoreTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an audio or video track linked to a score (asynchronously)
     * 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param track Unique identifier of a score audio track  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated track </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score or Track not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScoreTrackAsync(String score, String track, ScoreTrackUpdate body, final ApiCallback<ScoreTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScoreTrackValidateBeforeCall(score, track, body, _callback);
        Type localVarReturnType = new TypeToken<ScoreTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
