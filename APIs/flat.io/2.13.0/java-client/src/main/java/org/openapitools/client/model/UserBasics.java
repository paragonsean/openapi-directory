/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserBasics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserBasics {
  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_FLAT_TEAM = "isFlatTeam";
  @SerializedName(SERIALIZED_NAME_IS_FLAT_TEAM)
  private Boolean isFlatTeam;

  public static final String SERIALIZED_NAME_IS_POWER_USER = "isPowerUser";
  @SerializedName(SERIALIZED_NAME_IS_POWER_USER)
  private Boolean isPowerUser;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_PRINTABLE_NAME = "printableName";
  @SerializedName(SERIALIZED_NAME_PRINTABLE_NAME)
  private String printableName;

  /**
   * The type of user account
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    USER("user"),
    
    GUEST("guest");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected TypeEnum type;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public UserBasics() {
  }

  public UserBasics firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

  /**
   * Firstname of the user (for education users)
   * @return firstname
   */
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public UserBasics id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The user unique identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserBasics isFlatTeam(Boolean isFlatTeam) {
    this.isFlatTeam = isFlatTeam;
    return this;
  }

  /**
   * Will be &#39;true&#39; if user is part of the Flat Team
   * @return isFlatTeam
   */
  @javax.annotation.Nullable
  public Boolean getIsFlatTeam() {
    return isFlatTeam;
  }

  public void setIsFlatTeam(Boolean isFlatTeam) {
    this.isFlatTeam = isFlatTeam;
  }


  public UserBasics isPowerUser(Boolean isPowerUser) {
    this.isPowerUser = isPowerUser;
    return this;
  }

  /**
   * User license status. &#39;true&#39; if user is an individual Power user
   * @return isPowerUser
   */
  @javax.annotation.Nullable
  public Boolean getIsPowerUser() {
    return isPowerUser;
  }

  public void setIsPowerUser(Boolean isPowerUser) {
    this.isPowerUser = isPowerUser;
  }


  public UserBasics lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

  /**
   * Lastname of the user (for education users)
   * @return lastname
   */
  @javax.annotation.Nullable
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public UserBasics name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A displayable name for the user (for consumer users)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserBasics picture(String picture) {
    this.picture = picture;
    return this;
  }

  /**
   * The URL of the picture to display
   * @return picture
   */
  @javax.annotation.Nullable
  public String getPicture() {
    return picture;
  }

  public void setPicture(String picture) {
    this.picture = picture;
  }


  public UserBasics printableName(String printableName) {
    this.printableName = printableName;
    return this;
  }

  /**
   * The name that can be directly printed (name, firstname &amp; lastname, or username)
   * @return printableName
   */
  @javax.annotation.Nullable
  public String getPrintableName() {
    return printableName;
  }

  public void setPrintableName(String printableName) {
    this.printableName = printableName;
  }


  public UserBasics type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of user account
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UserBasics username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The user name (unique for the organization)
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserBasics userBasics = (UserBasics) o;
    return Objects.equals(this.firstname, userBasics.firstname) &&
        Objects.equals(this.id, userBasics.id) &&
        Objects.equals(this.isFlatTeam, userBasics.isFlatTeam) &&
        Objects.equals(this.isPowerUser, userBasics.isPowerUser) &&
        Objects.equals(this.lastname, userBasics.lastname) &&
        Objects.equals(this.name, userBasics.name) &&
        Objects.equals(this.picture, userBasics.picture) &&
        Objects.equals(this.printableName, userBasics.printableName) &&
        Objects.equals(this.type, userBasics.type) &&
        Objects.equals(this.username, userBasics.username);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstname, id, isFlatTeam, isPowerUser, lastname, name, picture, printableName, type, username);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserBasics {\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isFlatTeam: ").append(toIndentedString(isFlatTeam)).append("\n");
    sb.append("    isPowerUser: ").append(toIndentedString(isPowerUser)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    printableName: ").append(toIndentedString(printableName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstname");
    openapiFields.add("id");
    openapiFields.add("isFlatTeam");
    openapiFields.add("isPowerUser");
    openapiFields.add("lastname");
    openapiFields.add("name");
    openapiFields.add("picture");
    openapiFields.add("printableName");
    openapiFields.add("type");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserBasics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserBasics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserBasics is not found in the empty JSON string", UserBasics.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "UserDetails":
          UserDetails.validateJsonElement(jsonElement);
          break;
        case "UserDetailsAdmin":
          UserDetailsAdmin.validateJsonElement(jsonElement);
          break;
        case "UserPublic":
          UserPublic.validateJsonElement(jsonElement);
          break;
        case "UserPublicSummary":
          UserPublicSummary.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of UserBasics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserBasics
   * @throws IOException if the JSON string is invalid with respect to UserBasics
   */
  public static UserBasics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserBasics.class);
  }

  /**
   * Convert an instance of UserBasics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

