/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LmsName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A couple of LTI 1.x OAuth credentials
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LtiCredentials {
  public static final String SERIALIZED_NAME_CONSUMER_KEY = "consumerKey";
  @SerializedName(SERIALIZED_NAME_CONSUMER_KEY)
  private String consumerKey;

  public static final String SERIALIZED_NAME_CONSUMER_SECRET = "consumerSecret";
  @SerializedName(SERIALIZED_NAME_CONSUMER_SECRET)
  private String consumerSecret;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_USAGE = "lastUsage";
  @SerializedName(SERIALIZED_NAME_LAST_USAGE)
  private OffsetDateTime lastUsage;

  public static final String SERIALIZED_NAME_LMS = "lms";
  @SerializedName(SERIALIZED_NAME_LMS)
  private LmsName lms;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public LtiCredentials() {
  }

  public LtiCredentials consumerKey(String consumerKey) {
    this.consumerKey = consumerKey;
    return this;
  }

  /**
   * OAuth 1 Consumer Key
   * @return consumerKey
   */
  @javax.annotation.Nullable
  public String getConsumerKey() {
    return consumerKey;
  }

  public void setConsumerKey(String consumerKey) {
    this.consumerKey = consumerKey;
  }


  public LtiCredentials consumerSecret(String consumerSecret) {
    this.consumerSecret = consumerSecret;
    return this;
  }

  /**
   * OAuth 1 Consumer Secret
   * @return consumerSecret
   */
  @javax.annotation.Nullable
  public String getConsumerSecret() {
    return consumerSecret;
  }

  public void setConsumerSecret(String consumerSecret) {
    this.consumerSecret = consumerSecret;
  }


  public LtiCredentials creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation date of thse credentials
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public LtiCredentials creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Unique identifier of the user who created these credentials
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public LtiCredentials id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of this couple of credentials
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LtiCredentials lastUsage(OffsetDateTime lastUsage) {
    this.lastUsage = lastUsage;
    return this;
  }

  /**
   * The last time these credentials were used
   * @return lastUsage
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsage() {
    return lastUsage;
  }

  public void setLastUsage(OffsetDateTime lastUsage) {
    this.lastUsage = lastUsage;
  }


  public LtiCredentials lms(LmsName lms) {
    this.lms = lms;
    return this;
  }

  /**
   * Get lms
   * @return lms
   */
  @javax.annotation.Nullable
  public LmsName getLms() {
    return lms;
  }

  public void setLms(LmsName lms) {
    this.lms = lms;
  }


  public LtiCredentials name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the couple of credentials
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LtiCredentials organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * The unique identifier of the Organization associated to these credentials
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LtiCredentials ltiCredentials = (LtiCredentials) o;
    return Objects.equals(this.consumerKey, ltiCredentials.consumerKey) &&
        Objects.equals(this.consumerSecret, ltiCredentials.consumerSecret) &&
        Objects.equals(this.creationDate, ltiCredentials.creationDate) &&
        Objects.equals(this.creator, ltiCredentials.creator) &&
        Objects.equals(this.id, ltiCredentials.id) &&
        Objects.equals(this.lastUsage, ltiCredentials.lastUsage) &&
        Objects.equals(this.lms, ltiCredentials.lms) &&
        Objects.equals(this.name, ltiCredentials.name) &&
        Objects.equals(this.organization, ltiCredentials.organization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerKey, consumerSecret, creationDate, creator, id, lastUsage, lms, name, organization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LtiCredentials {\n");
    sb.append("    consumerKey: ").append(toIndentedString(consumerKey)).append("\n");
    sb.append("    consumerSecret: ").append(toIndentedString(consumerSecret)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUsage: ").append(toIndentedString(lastUsage)).append("\n");
    sb.append("    lms: ").append(toIndentedString(lms)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerKey");
    openapiFields.add("consumerSecret");
    openapiFields.add("creationDate");
    openapiFields.add("creator");
    openapiFields.add("id");
    openapiFields.add("lastUsage");
    openapiFields.add("lms");
    openapiFields.add("name");
    openapiFields.add("organization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LtiCredentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LtiCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LtiCredentials is not found in the empty JSON string", LtiCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LtiCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LtiCredentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerKey") != null && !jsonObj.get("consumerKey").isJsonNull()) && !jsonObj.get("consumerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerKey").toString()));
      }
      if ((jsonObj.get("consumerSecret") != null && !jsonObj.get("consumerSecret").isJsonNull()) && !jsonObj.get("consumerSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerSecret").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `lms`
      if (jsonObj.get("lms") != null && !jsonObj.get("lms").isJsonNull()) {
        LmsName.validateJsonElement(jsonObj.get("lms"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LtiCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LtiCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LtiCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LtiCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<LtiCredentials>() {
           @Override
           public void write(JsonWriter out, LtiCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LtiCredentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LtiCredentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LtiCredentials
   * @throws IOException if the JSON string is invalid with respect to LtiCredentials
   */
  public static LtiCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LtiCredentials.class);
  }

  /**
   * Convert an instance of LtiCredentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

