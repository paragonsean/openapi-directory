/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceCollaborator;
import org.openapitools.client.model.ResourceRights;
import org.openapitools.client.model.ScoreCommentsCounts;
import org.openapitools.client.model.ScoreCreationType;
import org.openapitools.client.model.ScoreLicense;
import org.openapitools.client.model.ScoreLikesCounts;
import org.openapitools.client.model.ScorePlaysCounts;
import org.openapitools.client.model.ScorePrivacy;
import org.openapitools.client.model.ScoreViewsCounts;
import org.openapitools.client.model.UserPublicSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The score and all its details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreDetails {
  public static final String SERIALIZED_NAME_HTML_URL = "htmlUrl";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private ScorePrivacy privacy;

  public static final String SERIALIZED_NAME_SHARING_KEY = "sharingKey";
  @SerializedName(SERIALIZED_NAME_SHARING_KEY)
  private String sharingKey;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserPublicSummary user;

  public static final String SERIALIZED_NAME_ARRANGER = "arranger";
  @SerializedName(SERIALIZED_NAME_ARRANGER)
  private String arranger;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private List<ResourceCollaborator> collaborators = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLLECTIONS = "collections";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS)
  private List<String> collections = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private ScoreCommentsCounts comments;

  public static final String SERIALIZED_NAME_COMPOSER = "composer";
  @SerializedName(SERIALIZED_NAME_COMPOSER)
  private String composer;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CREATION_TYPE = "creationType";
  @SerializedName(SERIALIZED_NAME_CREATION_TYPE)
  private ScoreCreationType creationType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION_TIME = "durationTime";
  @SerializedName(SERIALIZED_NAME_DURATION_TIME)
  private BigDecimal durationTime;

  public static final String SERIALIZED_NAME_GOOGLE_DRIVE_FILE_ID = "googleDriveFileId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_DRIVE_FILE_ID)
  private String googleDriveFileId;

  public static final String SERIALIZED_NAME_INSTRUMENTS = "instruments";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTS)
  private List<String> instruments = new ArrayList<>();

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private ScoreLicense license;

  public static final String SERIALIZED_NAME_LICENSE_TEXT = "licenseText";
  @SerializedName(SERIALIZED_NAME_LICENSE_TEXT)
  private String licenseText;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private ScoreLikesCounts likes;

  public static final String SERIALIZED_NAME_LYRICIST = "lyricist";
  @SerializedName(SERIALIZED_NAME_LYRICIST)
  private String lyricist;

  public static final String SERIALIZED_NAME_MAIN_TEMPO_QPM = "mainTempoQpm";
  @SerializedName(SERIALIZED_NAME_MAIN_TEMPO_QPM)
  private BigDecimal mainTempoQpm;

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  public static final String SERIALIZED_NAME_NUMBER_MEASURES = "numberMeasures";
  @SerializedName(SERIALIZED_NAME_NUMBER_MEASURES)
  private Integer numberMeasures;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PARENT_SCORE = "parentScore";
  @SerializedName(SERIALIZED_NAME_PARENT_SCORE)
  private String parentScore;

  public static final String SERIALIZED_NAME_PLAYS = "plays";
  @SerializedName(SERIALIZED_NAME_PLAYS)
  private ScorePlaysCounts plays;

  public static final String SERIALIZED_NAME_PUBLICATION_DATE = "publicationDate";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_DATE)
  private OffsetDateTime publicationDate;

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private ResourceRights rights;

  public static final String SERIALIZED_NAME_SAMPLES = "samples";
  @SerializedName(SERIALIZED_NAME_SAMPLES)
  private List<String> samples = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private ScoreViewsCounts views;

  public ScoreDetails() {
  }

  public ScoreDetails htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * The url where the score can be viewed in a web browser
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public ScoreDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the score
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ScoreDetails privacy(ScorePrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nullable
  public ScorePrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(ScorePrivacy privacy) {
    this.privacy = privacy;
  }


  public ScoreDetails sharingKey(String sharingKey) {
    this.sharingKey = sharingKey;
    return this;
  }

  /**
   * The private sharing key of the score (available when the &#x60;privacy&#x60; mode is set to &#x60;privateLink&#x60;)
   * @return sharingKey
   */
  @javax.annotation.Nullable
  public String getSharingKey() {
    return sharingKey;
  }

  public void setSharingKey(String sharingKey) {
    this.sharingKey = sharingKey;
  }


  public ScoreDetails title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the score
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ScoreDetails user(UserPublicSummary user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserPublicSummary getUser() {
    return user;
  }

  public void setUser(UserPublicSummary user) {
    this.user = user;
  }


  public ScoreDetails arranger(String arranger) {
    this.arranger = arranger;
    return this;
  }

  /**
   * Arranger of the score
   * @return arranger
   */
  @javax.annotation.Nullable
  public String getArranger() {
    return arranger;
  }

  public void setArranger(String arranger) {
    this.arranger = arranger;
  }


  public ScoreDetails collaborators(List<ResourceCollaborator> collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  public ScoreDetails addCollaboratorsItem(ResourceCollaborator collaboratorsItem) {
    if (this.collaborators == null) {
      this.collaborators = new ArrayList<>();
    }
    this.collaborators.add(collaboratorsItem);
    return this;
  }

  /**
   * The list of the collaborators of the score
   * @return collaborators
   */
  @javax.annotation.Nullable
  public List<ResourceCollaborator> getCollaborators() {
    return collaborators;
  }

  public void setCollaborators(List<ResourceCollaborator> collaborators) {
    this.collaborators = collaborators;
  }


  public ScoreDetails collections(List<String> collections) {
    this.collections = collections;
    return this;
  }

  public ScoreDetails addCollectionsItem(String collectionsItem) {
    if (this.collections == null) {
      this.collections = new ArrayList<>();
    }
    this.collections.add(collectionsItem);
    return this;
  }

  /**
   * The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
   * @return collections
   */
  @javax.annotation.Nullable
  public List<String> getCollections() {
    return collections;
  }

  public void setCollections(List<String> collections) {
    this.collections = collections;
  }


  public ScoreDetails comments(ScoreCommentsCounts comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public ScoreCommentsCounts getComments() {
    return comments;
  }

  public void setComments(ScoreCommentsCounts comments) {
    this.comments = comments;
  }


  public ScoreDetails composer(String composer) {
    this.composer = composer;
    return this;
  }

  /**
   * Composer of the score
   * @return composer
   */
  @javax.annotation.Nullable
  public String getComposer() {
    return composer;
  }

  public void setComposer(String composer) {
    this.composer = composer;
  }


  public ScoreDetails creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date when the score was created
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ScoreDetails creationType(ScoreCreationType creationType) {
    this.creationType = creationType;
    return this;
  }

  /**
   * Get creationType
   * @return creationType
   */
  @javax.annotation.Nullable
  public ScoreCreationType getCreationType() {
    return creationType;
  }

  public void setCreationType(ScoreCreationType creationType) {
    this.creationType = creationType;
  }


  public ScoreDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the creation
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ScoreDetails durationTime(BigDecimal durationTime) {
    this.durationTime = durationTime;
    return this;
  }

  /**
   * In seconds, an approximative duration of the score
   * @return durationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getDurationTime() {
    return durationTime;
  }

  public void setDurationTime(BigDecimal durationTime) {
    this.durationTime = durationTime;
  }


  public ScoreDetails googleDriveFileId(String googleDriveFileId) {
    this.googleDriveFileId = googleDriveFileId;
    return this;
  }

  /**
   * If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: &#x60;https://drive.google.com/open?id&#x3D;{googleDriveFileId}&#x60; 
   * @return googleDriveFileId
   */
  @javax.annotation.Nullable
  public String getGoogleDriveFileId() {
    return googleDriveFileId;
  }

  public void setGoogleDriveFileId(String googleDriveFileId) {
    this.googleDriveFileId = googleDriveFileId;
  }


  public ScoreDetails instruments(List<String> instruments) {
    this.instruments = instruments;
    return this;
  }

  public ScoreDetails addInstrumentsItem(String instrumentsItem) {
    if (this.instruments == null) {
      this.instruments = new ArrayList<>();
    }
    this.instruments.add(instrumentsItem);
    return this;
  }

  /**
   * An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat&#39;s UI or instruments icons. The format of the strings is &#x60;{instrument-group}.{instrument-id}&#x60;. 
   * @return instruments
   */
  @javax.annotation.Nullable
  public List<String> getInstruments() {
    return instruments;
  }

  public void setInstruments(List<String> instruments) {
    this.instruments = instruments;
  }


  public ScoreDetails license(ScoreLicense license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  public ScoreLicense getLicense() {
    return license;
  }

  public void setLicense(ScoreLicense license) {
    this.license = license;
  }


  public ScoreDetails licenseText(String licenseText) {
    this.licenseText = licenseText;
    return this;
  }

  /**
   * Additional license text written on the exported/printed score
   * @return licenseText
   */
  @javax.annotation.Nullable
  public String getLicenseText() {
    return licenseText;
  }

  public void setLicenseText(String licenseText) {
    this.licenseText = licenseText;
  }


  public ScoreDetails likes(ScoreLikesCounts likes) {
    this.likes = likes;
    return this;
  }

  /**
   * Get likes
   * @return likes
   */
  @javax.annotation.Nullable
  public ScoreLikesCounts getLikes() {
    return likes;
  }

  public void setLikes(ScoreLikesCounts likes) {
    this.likes = likes;
  }


  public ScoreDetails lyricist(String lyricist) {
    this.lyricist = lyricist;
    return this;
  }

  /**
   * Lyricist of the score
   * @return lyricist
   */
  @javax.annotation.Nullable
  public String getLyricist() {
    return lyricist;
  }

  public void setLyricist(String lyricist) {
    this.lyricist = lyricist;
  }


  public ScoreDetails mainTempoQpm(BigDecimal mainTempoQpm) {
    this.mainTempoQpm = mainTempoQpm;
    return this;
  }

  /**
   * The main tempo of the score (in QPM)
   * @return mainTempoQpm
   */
  @javax.annotation.Nullable
  public BigDecimal getMainTempoQpm() {
    return mainTempoQpm;
  }

  public void setMainTempoQpm(BigDecimal mainTempoQpm) {
    this.mainTempoQpm = mainTempoQpm;
  }


  public ScoreDetails modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * The date of the last revision of the score
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public ScoreDetails numberMeasures(Integer numberMeasures) {
    this.numberMeasures = numberMeasures;
    return this;
  }

  /**
   * The number of measures in the score
   * @return numberMeasures
   */
  @javax.annotation.Nullable
  public Integer getNumberMeasures() {
    return numberMeasures;
  }

  public void setNumberMeasures(Integer numberMeasures) {
    this.numberMeasures = numberMeasures;
  }


  public ScoreDetails organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy &#x60;organizationPublic&#x60;. 
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public ScoreDetails parentScore(String parentScore) {
    this.parentScore = parentScore;
    return this;
  }

  /**
   * If the score has been forked, the unique identifier of the parent score. 
   * @return parentScore
   */
  @javax.annotation.Nullable
  public String getParentScore() {
    return parentScore;
  }

  public void setParentScore(String parentScore) {
    this.parentScore = parentScore;
  }


  public ScoreDetails plays(ScorePlaysCounts plays) {
    this.plays = plays;
    return this;
  }

  /**
   * Get plays
   * @return plays
   */
  @javax.annotation.Nullable
  public ScorePlaysCounts getPlays() {
    return plays;
  }

  public void setPlays(ScorePlaysCounts plays) {
    this.plays = plays;
  }


  public ScoreDetails publicationDate(OffsetDateTime publicationDate) {
    this.publicationDate = publicationDate;
    return this;
  }

  /**
   * The date when the score was published on Flat
   * @return publicationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublicationDate() {
    return publicationDate;
  }

  public void setPublicationDate(OffsetDateTime publicationDate) {
    this.publicationDate = publicationDate;
  }


  public ScoreDetails rights(ResourceRights rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Get rights
   * @return rights
   */
  @javax.annotation.Nullable
  public ResourceRights getRights() {
    return rights;
  }

  public void setRights(ResourceRights rights) {
    this.rights = rights;
  }


  public ScoreDetails samples(List<String> samples) {
    this.samples = samples;
    return this;
  }

  public ScoreDetails addSamplesItem(String samplesItem) {
    if (this.samples == null) {
      this.samples = new ArrayList<>();
    }
    this.samples.add(samplesItem);
    return this;
  }

  /**
   * An array of the audio samples identifiers used the different score parts. The format of the strings is &#x60;{instrument-group}.{sample-id}&#x60;. 
   * @return samples
   */
  @javax.annotation.Nullable
  public List<String> getSamples() {
    return samples;
  }

  public void setSamples(List<String> samples) {
    this.samples = samples;
  }


  public ScoreDetails subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Subtitle of the score
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public ScoreDetails tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ScoreDetails addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags describing the score
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ScoreDetails views(ScoreViewsCounts views) {
    this.views = views;
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nullable
  public ScoreViewsCounts getViews() {
    return views;
  }

  public void setViews(ScoreViewsCounts views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreDetails scoreDetails = (ScoreDetails) o;
    return Objects.equals(this.htmlUrl, scoreDetails.htmlUrl) &&
        Objects.equals(this.id, scoreDetails.id) &&
        Objects.equals(this.privacy, scoreDetails.privacy) &&
        Objects.equals(this.sharingKey, scoreDetails.sharingKey) &&
        Objects.equals(this.title, scoreDetails.title) &&
        Objects.equals(this.user, scoreDetails.user) &&
        Objects.equals(this.arranger, scoreDetails.arranger) &&
        Objects.equals(this.collaborators, scoreDetails.collaborators) &&
        Objects.equals(this.collections, scoreDetails.collections) &&
        Objects.equals(this.comments, scoreDetails.comments) &&
        Objects.equals(this.composer, scoreDetails.composer) &&
        Objects.equals(this.creationDate, scoreDetails.creationDate) &&
        Objects.equals(this.creationType, scoreDetails.creationType) &&
        Objects.equals(this.description, scoreDetails.description) &&
        Objects.equals(this.durationTime, scoreDetails.durationTime) &&
        Objects.equals(this.googleDriveFileId, scoreDetails.googleDriveFileId) &&
        Objects.equals(this.instruments, scoreDetails.instruments) &&
        Objects.equals(this.license, scoreDetails.license) &&
        Objects.equals(this.licenseText, scoreDetails.licenseText) &&
        Objects.equals(this.likes, scoreDetails.likes) &&
        Objects.equals(this.lyricist, scoreDetails.lyricist) &&
        Objects.equals(this.mainTempoQpm, scoreDetails.mainTempoQpm) &&
        Objects.equals(this.modificationDate, scoreDetails.modificationDate) &&
        Objects.equals(this.numberMeasures, scoreDetails.numberMeasures) &&
        Objects.equals(this.organization, scoreDetails.organization) &&
        Objects.equals(this.parentScore, scoreDetails.parentScore) &&
        Objects.equals(this.plays, scoreDetails.plays) &&
        Objects.equals(this.publicationDate, scoreDetails.publicationDate) &&
        Objects.equals(this.rights, scoreDetails.rights) &&
        Objects.equals(this.samples, scoreDetails.samples) &&
        Objects.equals(this.subtitle, scoreDetails.subtitle) &&
        Objects.equals(this.tags, scoreDetails.tags) &&
        Objects.equals(this.views, scoreDetails.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(htmlUrl, id, privacy, sharingKey, title, user, arranger, collaborators, collections, comments, composer, creationDate, creationType, description, durationTime, googleDriveFileId, instruments, license, licenseText, likes, lyricist, mainTempoQpm, modificationDate, numberMeasures, organization, parentScore, plays, publicationDate, rights, samples, subtitle, tags, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreDetails {\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    sharingKey: ").append(toIndentedString(sharingKey)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    arranger: ").append(toIndentedString(arranger)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    composer: ").append(toIndentedString(composer)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    creationType: ").append(toIndentedString(creationType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    durationTime: ").append(toIndentedString(durationTime)).append("\n");
    sb.append("    googleDriveFileId: ").append(toIndentedString(googleDriveFileId)).append("\n");
    sb.append("    instruments: ").append(toIndentedString(instruments)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseText: ").append(toIndentedString(licenseText)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    lyricist: ").append(toIndentedString(lyricist)).append("\n");
    sb.append("    mainTempoQpm: ").append(toIndentedString(mainTempoQpm)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    numberMeasures: ").append(toIndentedString(numberMeasures)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    parentScore: ").append(toIndentedString(parentScore)).append("\n");
    sb.append("    plays: ").append(toIndentedString(plays)).append("\n");
    sb.append("    publicationDate: ").append(toIndentedString(publicationDate)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("htmlUrl");
    openapiFields.add("id");
    openapiFields.add("privacy");
    openapiFields.add("sharingKey");
    openapiFields.add("title");
    openapiFields.add("user");
    openapiFields.add("arranger");
    openapiFields.add("collaborators");
    openapiFields.add("collections");
    openapiFields.add("comments");
    openapiFields.add("composer");
    openapiFields.add("creationDate");
    openapiFields.add("creationType");
    openapiFields.add("description");
    openapiFields.add("durationTime");
    openapiFields.add("googleDriveFileId");
    openapiFields.add("instruments");
    openapiFields.add("license");
    openapiFields.add("licenseText");
    openapiFields.add("likes");
    openapiFields.add("lyricist");
    openapiFields.add("mainTempoQpm");
    openapiFields.add("modificationDate");
    openapiFields.add("numberMeasures");
    openapiFields.add("organization");
    openapiFields.add("parentScore");
    openapiFields.add("plays");
    openapiFields.add("publicationDate");
    openapiFields.add("rights");
    openapiFields.add("samples");
    openapiFields.add("subtitle");
    openapiFields.add("tags");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreDetails is not found in the empty JSON string", ScoreDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("htmlUrl") != null && !jsonObj.get("htmlUrl").isJsonNull()) && !jsonObj.get("htmlUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        ScorePrivacy.validateJsonElement(jsonObj.get("privacy"));
      }
      if ((jsonObj.get("sharingKey") != null && !jsonObj.get("sharingKey").isJsonNull()) && !jsonObj.get("sharingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharingKey").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserPublicSummary.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("arranger") != null && !jsonObj.get("arranger").isJsonNull()) && !jsonObj.get("arranger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arranger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arranger").toString()));
      }
      if (jsonObj.get("collaborators") != null && !jsonObj.get("collaborators").isJsonNull()) {
        JsonArray jsonArraycollaborators = jsonObj.getAsJsonArray("collaborators");
        if (jsonArraycollaborators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collaborators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collaborators` to be an array in the JSON string but got `%s`", jsonObj.get("collaborators").toString()));
          }

          // validate the optional field `collaborators` (array)
          for (int i = 0; i < jsonArraycollaborators.size(); i++) {
            ResourceCollaborator.validateJsonElement(jsonArraycollaborators.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collections") != null && !jsonObj.get("collections").isJsonNull() && !jsonObj.get("collections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collections` to be an array in the JSON string but got `%s`", jsonObj.get("collections").toString()));
      }
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        ScoreCommentsCounts.validateJsonElement(jsonObj.get("comments"));
      }
      if ((jsonObj.get("composer") != null && !jsonObj.get("composer").isJsonNull()) && !jsonObj.get("composer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `composer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("composer").toString()));
      }
      // validate the optional field `creationType`
      if (jsonObj.get("creationType") != null && !jsonObj.get("creationType").isJsonNull()) {
        ScoreCreationType.validateJsonElement(jsonObj.get("creationType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("googleDriveFileId") != null && !jsonObj.get("googleDriveFileId").isJsonNull()) && !jsonObj.get("googleDriveFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleDriveFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleDriveFileId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instruments") != null && !jsonObj.get("instruments").isJsonNull() && !jsonObj.get("instruments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instruments` to be an array in the JSON string but got `%s`", jsonObj.get("instruments").toString()));
      }
      // validate the optional field `license`
      if (jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) {
        ScoreLicense.validateJsonElement(jsonObj.get("license"));
      }
      if ((jsonObj.get("licenseText") != null && !jsonObj.get("licenseText").isJsonNull()) && !jsonObj.get("licenseText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseText").toString()));
      }
      // validate the optional field `likes`
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        ScoreLikesCounts.validateJsonElement(jsonObj.get("likes"));
      }
      if ((jsonObj.get("lyricist") != null && !jsonObj.get("lyricist").isJsonNull()) && !jsonObj.get("lyricist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lyricist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lyricist").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("parentScore") != null && !jsonObj.get("parentScore").isJsonNull()) && !jsonObj.get("parentScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentScore").toString()));
      }
      // validate the optional field `plays`
      if (jsonObj.get("plays") != null && !jsonObj.get("plays").isJsonNull()) {
        ScorePlaysCounts.validateJsonElement(jsonObj.get("plays"));
      }
      // validate the optional field `rights`
      if (jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) {
        ResourceRights.validateJsonElement(jsonObj.get("rights"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("samples") != null && !jsonObj.get("samples").isJsonNull() && !jsonObj.get("samples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `samples` to be an array in the JSON string but got `%s`", jsonObj.get("samples").toString()));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `views`
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull()) {
        ScoreViewsCounts.validateJsonElement(jsonObj.get("views"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreDetails>() {
           @Override
           public void write(JsonWriter out, ScoreDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreDetails
   * @throws IOException if the JSON string is invalid with respect to ScoreDetails
   */
  public static ScoreDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreDetails.class);
  }

  /**
   * Convert an instance of ScoreDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

