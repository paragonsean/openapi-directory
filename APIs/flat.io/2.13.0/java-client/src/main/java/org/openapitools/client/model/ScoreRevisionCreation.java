/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A new created revision
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreRevisionCreation {
  public static final String SERIALIZED_NAME_AUTOSAVE = "autosave";
  @SerializedName(SERIALIZED_NAME_AUTOSAVE)
  private Boolean autosave;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  /**
   * The optional encoding of the score data. This property must match the encoding used for the &#x60;data&#x60; property.
   */
  @JsonAdapter(DataEncodingEnum.Adapter.class)
  public enum DataEncodingEnum {
    BASE64("base64");

    private String value;

    DataEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataEncodingEnum fromValue(String value) {
      for (DataEncodingEnum b : DataEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_ENCODING = "dataEncoding";
  @SerializedName(SERIALIZED_NAME_DATA_ENCODING)
  private DataEncodingEnum dataEncoding;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public ScoreRevisionCreation() {
  }

  public ScoreRevisionCreation autosave(Boolean autosave) {
    this.autosave = autosave;
    return this;
  }

  /**
   * Must be set to &#x60;true&#x60; if the revision was created automatically. 
   * @return autosave
   */
  @javax.annotation.Nullable
  public Boolean getAutosave() {
    return autosave;
  }

  public void setAutosave(Boolean autosave) {
    this.autosave = autosave;
  }


  public ScoreRevisionCreation data(String data) {
    this.data = data;
    return this;
  }

  /**
   * The data of the score file. It must be a MusicXML 3 file (&#x60;vnd.recordare.musicxml&#x60; or &#x60;vnd.recordare.musicxml+xml&#x60;), a MIDI file (&#x60;audio/midi&#x60;) or a Flat.json (aka Adagio.json) file. Binary payloads (&#x60;vnd.recordare.musicxml&#x60; and &#x60;audio/midi&#x60;) can be encoded in Base64, in this case the &#x60;dataEncoding&#x60; property must match the encoding used for the API request. 
   * @return data
   */
  @javax.annotation.Nonnull
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public ScoreRevisionCreation dataEncoding(DataEncodingEnum dataEncoding) {
    this.dataEncoding = dataEncoding;
    return this;
  }

  /**
   * The optional encoding of the score data. This property must match the encoding used for the &#x60;data&#x60; property.
   * @return dataEncoding
   */
  @javax.annotation.Nullable
  public DataEncodingEnum getDataEncoding() {
    return dataEncoding;
  }

  public void setDataEncoding(DataEncodingEnum dataEncoding) {
    this.dataEncoding = dataEncoding;
  }


  public ScoreRevisionCreation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description associated to the revision
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreRevisionCreation scoreRevisionCreation = (ScoreRevisionCreation) o;
    return Objects.equals(this.autosave, scoreRevisionCreation.autosave) &&
        Objects.equals(this.data, scoreRevisionCreation.data) &&
        Objects.equals(this.dataEncoding, scoreRevisionCreation.dataEncoding) &&
        Objects.equals(this.description, scoreRevisionCreation.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autosave, data, dataEncoding, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreRevisionCreation {\n");
    sb.append("    autosave: ").append(toIndentedString(autosave)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataEncoding: ").append(toIndentedString(dataEncoding)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autosave");
    openapiFields.add("data");
    openapiFields.add("dataEncoding");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreRevisionCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreRevisionCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreRevisionCreation is not found in the empty JSON string", ScoreRevisionCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreRevisionCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreRevisionCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScoreRevisionCreation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("dataEncoding") != null && !jsonObj.get("dataEncoding").isJsonNull()) && !jsonObj.get("dataEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataEncoding").toString()));
      }
      // validate the optional field `dataEncoding`
      if (jsonObj.get("dataEncoding") != null && !jsonObj.get("dataEncoding").isJsonNull()) {
        DataEncodingEnum.validateJsonElement(jsonObj.get("dataEncoding"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreRevisionCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreRevisionCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreRevisionCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreRevisionCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreRevisionCreation>() {
           @Override
           public void write(JsonWriter out, ScoreRevisionCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreRevisionCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreRevisionCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreRevisionCreation
   * @throws IOException if the JSON string is invalid with respect to ScoreRevisionCreation
   */
  public static ScoreRevisionCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreRevisionCreation.class);
  }

  /**
   * Convert an instance of ScoreRevisionCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

