/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaScoreSharingMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attachment creation for an assignment or stream post. This attachment must contain a &#x60;score&#x60; or an &#x60;url&#x60;, all the details of this one will be resolved and returned as &#x60;ClassAttachment&#x60; once the assignment or stream post is created. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClassAttachmentCreation {
  public static final String SERIALIZED_NAME_GOOGLE_DRIVE_FILE_ID = "googleDriveFileId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_DRIVE_FILE_ID)
  private String googleDriveFileId;

  public static final String SERIALIZED_NAME_LOCK_SCORE_TEMPLATE = "lockScoreTemplate";
  @SerializedName(SERIALIZED_NAME_LOCK_SCORE_TEMPLATE)
  private Boolean lockScoreTemplate;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SHARING_MODE = "sharingMode";
  @SerializedName(SERIALIZED_NAME_SHARING_MODE)
  private MediaScoreSharingMode sharingMode = MediaScoreSharingMode.READ;

  /**
   * The type of the attachment posted
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FLAT("flat"),
    
    LINK("link"),
    
    GOOGLE_DRIVE("googleDrive"),
    
    WORKSHEET("worksheet");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WORKSHEET = "worksheet";
  @SerializedName(SERIALIZED_NAME_WORKSHEET)
  private String worksheet;

  public ClassAttachmentCreation() {
  }

  public ClassAttachmentCreation googleDriveFileId(String googleDriveFileId) {
    this.googleDriveFileId = googleDriveFileId;
    return this;
  }

  /**
   * The ID of the Google Drive File
   * @return googleDriveFileId
   */
  @javax.annotation.Nullable
  public String getGoogleDriveFileId() {
    return googleDriveFileId;
  }

  public void setGoogleDriveFileId(String googleDriveFileId) {
    this.googleDriveFileId = googleDriveFileId;
  }


  public ClassAttachmentCreation lockScoreTemplate(Boolean lockScoreTemplate) {
    this.lockScoreTemplate = lockScoreTemplate;
    return this;
  }

  /**
   * To be used with a score attached in &#x60;sharingMode&#x60; &#x60;copy&#x60; (score used as template). If true, students won&#39;t be able to change the original notes of the template.
   * @return lockScoreTemplate
   */
  @javax.annotation.Nullable
  public Boolean getLockScoreTemplate() {
    return lockScoreTemplate;
  }

  public void setLockScoreTemplate(Boolean lockScoreTemplate) {
    this.lockScoreTemplate = lockScoreTemplate;
  }


  public ClassAttachmentCreation score(String score) {
    this.score = score;
    return this;
  }

  /**
   * A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the teachers and students of the class. 
   * @return score
   */
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public ClassAttachmentCreation sharingMode(MediaScoreSharingMode sharingMode) {
    this.sharingMode = sharingMode;
    return this;
  }

  /**
   * Get sharingMode
   * @return sharingMode
   */
  @javax.annotation.Nullable
  public MediaScoreSharingMode getSharingMode() {
    return sharingMode;
  }

  public void setSharingMode(MediaScoreSharingMode sharingMode) {
    this.sharingMode = sharingMode;
  }


  public ClassAttachmentCreation type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the attachment posted
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ClassAttachmentCreation url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the attachment.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ClassAttachmentCreation worksheet(String worksheet) {
    this.worksheet = worksheet;
    return this;
  }

  /**
   * An unique worksheet identifier
   * @return worksheet
   */
  @javax.annotation.Nullable
  public String getWorksheet() {
    return worksheet;
  }

  public void setWorksheet(String worksheet) {
    this.worksheet = worksheet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassAttachmentCreation classAttachmentCreation = (ClassAttachmentCreation) o;
    return Objects.equals(this.googleDriveFileId, classAttachmentCreation.googleDriveFileId) &&
        Objects.equals(this.lockScoreTemplate, classAttachmentCreation.lockScoreTemplate) &&
        Objects.equals(this.score, classAttachmentCreation.score) &&
        Objects.equals(this.sharingMode, classAttachmentCreation.sharingMode) &&
        Objects.equals(this.type, classAttachmentCreation.type) &&
        Objects.equals(this.url, classAttachmentCreation.url) &&
        Objects.equals(this.worksheet, classAttachmentCreation.worksheet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(googleDriveFileId, lockScoreTemplate, score, sharingMode, type, url, worksheet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassAttachmentCreation {\n");
    sb.append("    googleDriveFileId: ").append(toIndentedString(googleDriveFileId)).append("\n");
    sb.append("    lockScoreTemplate: ").append(toIndentedString(lockScoreTemplate)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sharingMode: ").append(toIndentedString(sharingMode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    worksheet: ").append(toIndentedString(worksheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("googleDriveFileId");
    openapiFields.add("lockScoreTemplate");
    openapiFields.add("score");
    openapiFields.add("sharingMode");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("worksheet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassAttachmentCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassAttachmentCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassAttachmentCreation is not found in the empty JSON string", ClassAttachmentCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassAttachmentCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassAttachmentCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("googleDriveFileId") != null && !jsonObj.get("googleDriveFileId").isJsonNull()) && !jsonObj.get("googleDriveFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleDriveFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleDriveFileId").toString()));
      }
      if ((jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) && !jsonObj.get("score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("score").toString()));
      }
      // validate the optional field `sharingMode`
      if (jsonObj.get("sharingMode") != null && !jsonObj.get("sharingMode").isJsonNull()) {
        MediaScoreSharingMode.validateJsonElement(jsonObj.get("sharingMode"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("worksheet") != null && !jsonObj.get("worksheet").isJsonNull()) && !jsonObj.get("worksheet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `worksheet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("worksheet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassAttachmentCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassAttachmentCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassAttachmentCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassAttachmentCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassAttachmentCreation>() {
           @Override
           public void write(JsonWriter out, ClassAttachmentCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassAttachmentCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassAttachmentCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassAttachmentCreation
   * @throws IOException if the JSON string is invalid with respect to ClassAttachmentCreation
   */
  public static ClassAttachmentCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassAttachmentCreation.class);
  }

  /**
   * Convert an instance of ClassAttachmentCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

