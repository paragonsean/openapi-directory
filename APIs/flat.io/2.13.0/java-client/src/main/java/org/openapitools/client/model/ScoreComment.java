/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScoreCommentContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Comment added on a sheet music
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreComment {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ScoreCommentContext context;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private List<String> mentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  public static final String SERIALIZED_NAME_RAW_COMMENT = "rawComment";
  @SerializedName(SERIALIZED_NAME_RAW_COMMENT)
  private String rawComment;

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_RESOLVED = "resolved";
  @SerializedName(SERIALIZED_NAME_RESOLVED)
  private Boolean resolved;

  public static final String SERIALIZED_NAME_RESOLVED_BY = "resolvedBy";
  @SerializedName(SERIALIZED_NAME_RESOLVED_BY)
  private String resolvedBy;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SPAM = "spam";
  @SerializedName(SERIALIZED_NAME_SPAM)
  private Boolean spam;

  /**
   * The type of the comment
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DOCUMENT("document"),
    
    INLINE("inline");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public ScoreComment() {
  }

  public ScoreComment comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The comment text that can includes mentions using the following format: &#x60;@[id:username]&#x60;. 
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ScoreComment context(ScoreCommentContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public ScoreCommentContext getContext() {
    return context;
  }

  public void setContext(ScoreCommentContext context) {
    this.context = context;
  }


  public ScoreComment date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The date when the comment was posted
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public ScoreComment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The comment unique identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ScoreComment mentions(List<String> mentions) {
    this.mentions = mentions;
    return this;
  }

  public ScoreComment addMentionsItem(String mentionsItem) {
    if (this.mentions == null) {
      this.mentions = new ArrayList<>();
    }
    this.mentions.add(mentionsItem);
    return this;
  }

  /**
   * The list of user identifier mentioned on the score
   * @return mentions
   */
  @javax.annotation.Nullable
  public List<String> getMentions() {
    return mentions;
  }

  public void setMentions(List<String> mentions) {
    this.mentions = mentions;
  }


  public ScoreComment modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * The date of the last comment modification
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public ScoreComment rawComment(String rawComment) {
    this.rawComment = rawComment;
    return this;
  }

  /**
   * A raw version of the comment, that can be displayed without parsing the mentions. 
   * @return rawComment
   */
  @javax.annotation.Nullable
  public String getRawComment() {
    return rawComment;
  }

  public void setRawComment(String rawComment) {
    this.rawComment = rawComment;
  }


  public ScoreComment replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * When the comment is a reply to another comment, the unique identifier of the parent comment 
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public ScoreComment resolved(Boolean resolved) {
    this.resolved = resolved;
    return this;
  }

  /**
   * For inline comments, the comment can be marked as resolved and will be hidden in the future responses 
   * @return resolved
   */
  @javax.annotation.Nullable
  public Boolean getResolved() {
    return resolved;
  }

  public void setResolved(Boolean resolved) {
    this.resolved = resolved;
  }


  public ScoreComment resolvedBy(String resolvedBy) {
    this.resolvedBy = resolvedBy;
    return this;
  }

  /**
   * If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved 
   * @return resolvedBy
   */
  @javax.annotation.Nullable
  public String getResolvedBy() {
    return resolvedBy;
  }

  public void setResolvedBy(String resolvedBy) {
    this.resolvedBy = resolvedBy;
  }


  public ScoreComment revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The unique identifier of revision the comment was posted
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }


  public ScoreComment score(String score) {
    this.score = score;
    return this;
  }

  /**
   * The unique identifier of the score where the comment was posted
   * @return score
   */
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public ScoreComment spam(Boolean spam) {
    this.spam = spam;
    return this;
  }

  /**
   * &#x60;true  if the message has been detected as spam and hidden from other users 
   * @return spam
   */
  @javax.annotation.Nullable
  public Boolean getSpam() {
    return spam;
  }

  public void setSpam(Boolean spam) {
    this.spam = spam;
  }


  public ScoreComment type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the comment
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ScoreComment user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The author unique identifier
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreComment scoreComment = (ScoreComment) o;
    return Objects.equals(this.comment, scoreComment.comment) &&
        Objects.equals(this.context, scoreComment.context) &&
        Objects.equals(this.date, scoreComment.date) &&
        Objects.equals(this.id, scoreComment.id) &&
        Objects.equals(this.mentions, scoreComment.mentions) &&
        Objects.equals(this.modificationDate, scoreComment.modificationDate) &&
        Objects.equals(this.rawComment, scoreComment.rawComment) &&
        Objects.equals(this.replyTo, scoreComment.replyTo) &&
        Objects.equals(this.resolved, scoreComment.resolved) &&
        Objects.equals(this.resolvedBy, scoreComment.resolvedBy) &&
        Objects.equals(this.revision, scoreComment.revision) &&
        Objects.equals(this.score, scoreComment.score) &&
        Objects.equals(this.spam, scoreComment.spam) &&
        Objects.equals(this.type, scoreComment.type) &&
        Objects.equals(this.user, scoreComment.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, context, date, id, mentions, modificationDate, rawComment, replyTo, resolved, resolvedBy, revision, score, spam, type, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreComment {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    rawComment: ").append(toIndentedString(rawComment)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    resolved: ").append(toIndentedString(resolved)).append("\n");
    sb.append("    resolvedBy: ").append(toIndentedString(resolvedBy)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    spam: ").append(toIndentedString(spam)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("context");
    openapiFields.add("date");
    openapiFields.add("id");
    openapiFields.add("mentions");
    openapiFields.add("modificationDate");
    openapiFields.add("rawComment");
    openapiFields.add("replyTo");
    openapiFields.add("resolved");
    openapiFields.add("resolvedBy");
    openapiFields.add("revision");
    openapiFields.add("score");
    openapiFields.add("spam");
    openapiFields.add("type");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreComment is not found in the empty JSON string", ScoreComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        ScoreCommentContext.validateJsonElement(jsonObj.get("context"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mentions") != null && !jsonObj.get("mentions").isJsonNull() && !jsonObj.get("mentions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentions` to be an array in the JSON string but got `%s`", jsonObj.get("mentions").toString()));
      }
      if ((jsonObj.get("rawComment") != null && !jsonObj.get("rawComment").isJsonNull()) && !jsonObj.get("rawComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawComment").toString()));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      if ((jsonObj.get("resolvedBy") != null && !jsonObj.get("resolvedBy").isJsonNull()) && !jsonObj.get("resolvedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolvedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolvedBy").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      if ((jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) && !jsonObj.get("score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("score").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreComment.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreComment>() {
           @Override
           public void write(JsonWriter out, ScoreComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreComment
   * @throws IOException if the JSON string is invalid with respect to ScoreComment
   */
  public static ScoreComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreComment.class);
  }

  /**
   * Convert an instance of ScoreComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

