/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreCommentContext {
  public static final String SERIALIZED_NAME_MEASURE_UUIDS = "measureUuids";
  @SerializedName(SERIALIZED_NAME_MEASURE_UUIDS)
  private List<String> measureUuids = new ArrayList<>();

  public static final String SERIALIZED_NAME_PART_UUID = "partUuid";
  @SerializedName(SERIALIZED_NAME_PART_UUID)
  private String partUuid;

  public static final String SERIALIZED_NAME_STAFF_IDX = "staffIdx";
  @SerializedName(SERIALIZED_NAME_STAFF_IDX)
  private BigDecimal staffIdx;

  public static final String SERIALIZED_NAME_STAFF_UUID = "staffUuid";
  @SerializedName(SERIALIZED_NAME_STAFF_UUID)
  private String staffUuid;

  public static final String SERIALIZED_NAME_START_DPQ = "startDpq";
  @SerializedName(SERIALIZED_NAME_START_DPQ)
  private BigDecimal startDpq;

  public static final String SERIALIZED_NAME_START_TIME_POS = "startTimePos";
  @SerializedName(SERIALIZED_NAME_START_TIME_POS)
  private BigDecimal startTimePos;

  public static final String SERIALIZED_NAME_STOP_DPQ = "stopDpq";
  @SerializedName(SERIALIZED_NAME_STOP_DPQ)
  private BigDecimal stopDpq;

  public static final String SERIALIZED_NAME_STOP_TIME_POS = "stopTimePos";
  @SerializedName(SERIALIZED_NAME_STOP_TIME_POS)
  private BigDecimal stopTimePos;

  public ScoreCommentContext() {
  }

  public ScoreCommentContext measureUuids(List<String> measureUuids) {
    this.measureUuids = measureUuids;
    return this;
  }

  public ScoreCommentContext addMeasureUuidsItem(String measureUuidsItem) {
    if (this.measureUuids == null) {
      this.measureUuids = new ArrayList<>();
    }
    this.measureUuids.add(measureUuidsItem);
    return this;
  }

  /**
   * The list of measure UUIds
   * @return measureUuids
   */
  @javax.annotation.Nonnull
  public List<String> getMeasureUuids() {
    return measureUuids;
  }

  public void setMeasureUuids(List<String> measureUuids) {
    this.measureUuids = measureUuids;
  }


  public ScoreCommentContext partUuid(String partUuid) {
    this.partUuid = partUuid;
    return this;
  }

  /**
   * The unique identifier (UUID) of the score part
   * @return partUuid
   */
  @javax.annotation.Nonnull
  public String getPartUuid() {
    return partUuid;
  }

  public void setPartUuid(String partUuid) {
    this.partUuid = partUuid;
  }


  public ScoreCommentContext staffIdx(BigDecimal staffIdx) {
    this.staffIdx = staffIdx;
    return this;
  }

  /**
   * (Deprecated, use &#x60;staffUuid&#x60;) The identififer of the staff
   * @return staffIdx
   */
  @javax.annotation.Nullable
  public BigDecimal getStaffIdx() {
    return staffIdx;
  }

  public void setStaffIdx(BigDecimal staffIdx) {
    this.staffIdx = staffIdx;
  }


  public ScoreCommentContext staffUuid(String staffUuid) {
    this.staffUuid = staffUuid;
    return this;
  }

  /**
   * The unique identififer (UUID) of the staff
   * @return staffUuid
   */
  @javax.annotation.Nullable
  public String getStaffUuid() {
    return staffUuid;
  }

  public void setStaffUuid(String staffUuid) {
    this.staffUuid = staffUuid;
  }


  public ScoreCommentContext startDpq(BigDecimal startDpq) {
    this.startDpq = startDpq;
    return this;
  }

  /**
   * Get startDpq
   * @return startDpq
   */
  @javax.annotation.Nonnull
  public BigDecimal getStartDpq() {
    return startDpq;
  }

  public void setStartDpq(BigDecimal startDpq) {
    this.startDpq = startDpq;
  }


  public ScoreCommentContext startTimePos(BigDecimal startTimePos) {
    this.startTimePos = startTimePos;
    return this;
  }

  /**
   * Get startTimePos
   * @return startTimePos
   */
  @javax.annotation.Nonnull
  public BigDecimal getStartTimePos() {
    return startTimePos;
  }

  public void setStartTimePos(BigDecimal startTimePos) {
    this.startTimePos = startTimePos;
  }


  public ScoreCommentContext stopDpq(BigDecimal stopDpq) {
    this.stopDpq = stopDpq;
    return this;
  }

  /**
   * Get stopDpq
   * @return stopDpq
   */
  @javax.annotation.Nonnull
  public BigDecimal getStopDpq() {
    return stopDpq;
  }

  public void setStopDpq(BigDecimal stopDpq) {
    this.stopDpq = stopDpq;
  }


  public ScoreCommentContext stopTimePos(BigDecimal stopTimePos) {
    this.stopTimePos = stopTimePos;
    return this;
  }

  /**
   * Get stopTimePos
   * @return stopTimePos
   */
  @javax.annotation.Nonnull
  public BigDecimal getStopTimePos() {
    return stopTimePos;
  }

  public void setStopTimePos(BigDecimal stopTimePos) {
    this.stopTimePos = stopTimePos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreCommentContext scoreCommentContext = (ScoreCommentContext) o;
    return Objects.equals(this.measureUuids, scoreCommentContext.measureUuids) &&
        Objects.equals(this.partUuid, scoreCommentContext.partUuid) &&
        Objects.equals(this.staffIdx, scoreCommentContext.staffIdx) &&
        Objects.equals(this.staffUuid, scoreCommentContext.staffUuid) &&
        Objects.equals(this.startDpq, scoreCommentContext.startDpq) &&
        Objects.equals(this.startTimePos, scoreCommentContext.startTimePos) &&
        Objects.equals(this.stopDpq, scoreCommentContext.stopDpq) &&
        Objects.equals(this.stopTimePos, scoreCommentContext.stopTimePos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(measureUuids, partUuid, staffIdx, staffUuid, startDpq, startTimePos, stopDpq, stopTimePos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreCommentContext {\n");
    sb.append("    measureUuids: ").append(toIndentedString(measureUuids)).append("\n");
    sb.append("    partUuid: ").append(toIndentedString(partUuid)).append("\n");
    sb.append("    staffIdx: ").append(toIndentedString(staffIdx)).append("\n");
    sb.append("    staffUuid: ").append(toIndentedString(staffUuid)).append("\n");
    sb.append("    startDpq: ").append(toIndentedString(startDpq)).append("\n");
    sb.append("    startTimePos: ").append(toIndentedString(startTimePos)).append("\n");
    sb.append("    stopDpq: ").append(toIndentedString(stopDpq)).append("\n");
    sb.append("    stopTimePos: ").append(toIndentedString(stopTimePos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("measureUuids");
    openapiFields.add("partUuid");
    openapiFields.add("staffIdx");
    openapiFields.add("staffUuid");
    openapiFields.add("startDpq");
    openapiFields.add("startTimePos");
    openapiFields.add("stopDpq");
    openapiFields.add("stopTimePos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("measureUuids");
    openapiRequiredFields.add("partUuid");
    openapiRequiredFields.add("startDpq");
    openapiRequiredFields.add("startTimePos");
    openapiRequiredFields.add("stopDpq");
    openapiRequiredFields.add("stopTimePos");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreCommentContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreCommentContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreCommentContext is not found in the empty JSON string", ScoreCommentContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreCommentContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreCommentContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScoreCommentContext.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("measureUuids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("measureUuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `measureUuids` to be an array in the JSON string but got `%s`", jsonObj.get("measureUuids").toString()));
      }
      if (!jsonObj.get("partUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partUuid").toString()));
      }
      if ((jsonObj.get("staffUuid") != null && !jsonObj.get("staffUuid").isJsonNull()) && !jsonObj.get("staffUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staffUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staffUuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreCommentContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreCommentContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreCommentContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreCommentContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreCommentContext>() {
           @Override
           public void write(JsonWriter out, ScoreCommentContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreCommentContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreCommentContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreCommentContext
   * @throws IOException if the JSON string is invalid with respect to ScoreCommentContext
   */
  public static ScoreCommentContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreCommentContext.class);
  }

  /**
   * Convert an instance of ScoreCommentContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

