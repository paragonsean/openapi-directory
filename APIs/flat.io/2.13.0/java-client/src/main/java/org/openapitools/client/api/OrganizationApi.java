/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.LtiCredentials;
import org.openapitools.client.model.LtiCredentialsCreation;
import org.openapitools.client.model.OrganizationInvitation;
import org.openapitools.client.model.OrganizationInvitationCreation;
import org.openapitools.client.model.UserAdminUpdate;
import org.openapitools.client.model.UserCreation;
import org.openapitools.client.model.UserDetailsAdmin;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for countOrgaUsers
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countOrgaUsersCall(List<String> role, String q, List<String> group, Boolean noActiveLicense, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/users/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "role", role));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (group != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group", group));
        }

        if (noActiveLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noActiveLicense", noActiveLicense));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countOrgaUsersValidateBeforeCall(List<String> role, String q, List<String> group, Boolean noActiveLicense, final ApiCallback _callback) throws ApiException {
        return countOrgaUsersCall(role, q, group, noActiveLicense, _callback);

    }

    /**
     * Count the organization users using the provided filters
     * 
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @return List&lt;UserDetailsAdmin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserDetailsAdmin> countOrgaUsers(List<String> role, String q, List<String> group, Boolean noActiveLicense) throws ApiException {
        ApiResponse<List<UserDetailsAdmin>> localVarResp = countOrgaUsersWithHttpInfo(role, q, group, noActiveLicense);
        return localVarResp.getData();
    }

    /**
     * Count the organization users using the provided filters
     * 
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @return ApiResponse&lt;List&lt;UserDetailsAdmin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserDetailsAdmin>> countOrgaUsersWithHttpInfo(List<String> role, String q, List<String> group, Boolean noActiveLicense) throws ApiException {
        okhttp3.Call localVarCall = countOrgaUsersValidateBeforeCall(role, q, group, noActiveLicense, null);
        Type localVarReturnType = new TypeToken<List<UserDetailsAdmin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the organization users using the provided filters (asynchronously)
     * 
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countOrgaUsersAsync(List<String> role, String q, List<String> group, Boolean noActiveLicense, final ApiCallback<List<UserDetailsAdmin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = countOrgaUsersValidateBeforeCall(role, q, group, noActiveLicense, _callback);
        Type localVarReturnType = new TypeToken<List<UserDetailsAdmin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLtiCredentials
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLtiCredentialsCall(LtiCredentialsCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/lti/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLtiCredentialsValidateBeforeCall(LtiCredentialsCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLtiCredentials(Async)");
        }

        return createLtiCredentialsCall(body, _callback);

    }

    /**
     * Create a new couple of LTI 1.x credentials
     * Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/). 
     * @param body  (required)
     * @return LtiCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public LtiCredentials createLtiCredentials(LtiCredentialsCreation body) throws ApiException {
        ApiResponse<LtiCredentials> localVarResp = createLtiCredentialsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new couple of LTI 1.x credentials
     * Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/). 
     * @param body  (required)
     * @return ApiResponse&lt;LtiCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LtiCredentials> createLtiCredentialsWithHttpInfo(LtiCredentialsCreation body) throws ApiException {
        okhttp3.Call localVarCall = createLtiCredentialsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LtiCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new couple of LTI 1.x credentials (asynchronously)
     * Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/). 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLtiCredentialsAsync(LtiCredentialsCreation body, final ApiCallback<LtiCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLtiCredentialsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LtiCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationInvitation
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New invitation created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInvitationCall(OrganizationInvitationCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationInvitationValidateBeforeCall(OrganizationInvitationCreation body, final ApiCallback _callback) throws ApiException {
        return createOrganizationInvitationCall(body, _callback);

    }

    /**
     * Create a new invitation to join the organization
     * This method creates and sends invitation for teachers and admins.  Invitations can only be used by new Flat users or users who are not part of the organization yet.  If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won&#39;t send an invitation. In this case, the property &#x60;usedBy&#x60; will be directly filled with the uniquer identifier of the corresponding user. 
     * @param body  (optional)
     * @return OrganizationInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New invitation created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationInvitation createOrganizationInvitation(OrganizationInvitationCreation body) throws ApiException {
        ApiResponse<OrganizationInvitation> localVarResp = createOrganizationInvitationWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new invitation to join the organization
     * This method creates and sends invitation for teachers and admins.  Invitations can only be used by new Flat users or users who are not part of the organization yet.  If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won&#39;t send an invitation. In this case, the property &#x60;usedBy&#x60; will be directly filled with the uniquer identifier of the corresponding user. 
     * @param body  (optional)
     * @return ApiResponse&lt;OrganizationInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New invitation created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationInvitation> createOrganizationInvitationWithHttpInfo(OrganizationInvitationCreation body) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationInvitationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<OrganizationInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new invitation to join the organization (asynchronously)
     * This method creates and sends invitation for teachers and admins.  Invitations can only be used by new Flat users or users who are not part of the organization yet.  If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won&#39;t send an invitation. In this case, the property &#x60;usedBy&#x60; will be directly filled with the uniquer identifier of the corresponding user. 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New invitation created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationInvitationAsync(OrganizationInvitationCreation body, final ApiCallback<OrganizationInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationInvitationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<OrganizationInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrganizationUser
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New user created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationUserCall(UserCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationUserValidateBeforeCall(UserCreation body, final ApiCallback _callback) throws ApiException {
        return createOrganizationUserCall(body, _callback);

    }

    /**
     * Create a new user account
     * 
     * @param body  (optional)
     * @return UserDetailsAdmin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New user created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDetailsAdmin createOrganizationUser(UserCreation body) throws ApiException {
        ApiResponse<UserDetailsAdmin> localVarResp = createOrganizationUserWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new user account
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;UserDetailsAdmin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New user created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDetailsAdmin> createOrganizationUserWithHttpInfo(UserCreation body) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationUserValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UserDetailsAdmin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user account (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New user created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrganizationUserAsync(UserCreation body, final ApiCallback<UserDetailsAdmin> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationUserValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UserDetailsAdmin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLtiCredentials
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLtiCredentialsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/lti/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLtiCredentialsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listLtiCredentialsCall(_callback);

    }

    /**
     * List LTI 1.x credentials
     * 
     * @return List&lt;LtiCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<LtiCredentials> listLtiCredentials() throws ApiException {
        ApiResponse<List<LtiCredentials>> localVarResp = listLtiCredentialsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List LTI 1.x credentials
     * 
     * @return ApiResponse&lt;List&lt;LtiCredentials&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LtiCredentials>> listLtiCredentialsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listLtiCredentialsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<LtiCredentials>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List LTI 1.x credentials (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of LTI Credentials </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLtiCredentialsAsync(final ApiCallback<List<LtiCredentials>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLtiCredentialsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<LtiCredentials>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizationInvitations
     * @param role Filter users by role (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 50)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of invitations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationInvitationsCall(String role, Integer limit, String next, String previous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (next != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
        }

        if (previous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previous", previous));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationInvitationsValidateBeforeCall(String role, Integer limit, String next, String previous, final ApiCallback _callback) throws ApiException {
        return listOrganizationInvitationsCall(role, limit, next, previous, _callback);

    }

    /**
     * List the organization invitations
     * 
     * @param role Filter users by role (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 50)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @return List&lt;OrganizationInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of invitations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizationInvitation> listOrganizationInvitations(String role, Integer limit, String next, String previous) throws ApiException {
        ApiResponse<List<OrganizationInvitation>> localVarResp = listOrganizationInvitationsWithHttpInfo(role, limit, next, previous);
        return localVarResp.getData();
    }

    /**
     * List the organization invitations
     * 
     * @param role Filter users by role (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 50)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @return ApiResponse&lt;List&lt;OrganizationInvitation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of invitations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizationInvitation>> listOrganizationInvitationsWithHttpInfo(String role, Integer limit, String next, String previous) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationInvitationsValidateBeforeCall(role, limit, next, previous, null);
        Type localVarReturnType = new TypeToken<List<OrganizationInvitation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the organization invitations (asynchronously)
     * 
     * @param role Filter users by role (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 50)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of invitations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationInvitationsAsync(String role, Integer limit, String next, String previous, final ApiCallback<List<OrganizationInvitation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationInvitationsValidateBeforeCall(role, limit, next, previous, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationInvitation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizationUsers
     * @param sort The order to sort the user list (optional)
     * @param direction Sort direction (optional)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @param licenseExpirationDate Filter users by license expiration date or &#x60;active&#x60; / &#x60;notActive&#x60; (optional)
     * @param onlyIds Return only user ids (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationUsersCall(List<String> sort, String direction, String next, String previous, List<String> role, String q, List<String> group, Boolean noActiveLicense, List<String> licenseExpirationDate, Boolean onlyIds, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (next != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
        }

        if (previous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previous", previous));
        }

        if (role != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "role", role));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (group != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group", group));
        }

        if (noActiveLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noActiveLicense", noActiveLicense));
        }

        if (licenseExpirationDate != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "licenseExpirationDate", licenseExpirationDate));
        }

        if (onlyIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyIds", onlyIds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationUsersValidateBeforeCall(List<String> sort, String direction, String next, String previous, List<String> role, String q, List<String> group, Boolean noActiveLicense, List<String> licenseExpirationDate, Boolean onlyIds, Integer limit, final ApiCallback _callback) throws ApiException {
        return listOrganizationUsersCall(sort, direction, next, previous, role, q, group, noActiveLicense, licenseExpirationDate, onlyIds, limit, _callback);

    }

    /**
     * List the organization users
     * 
     * @param sort The order to sort the user list (optional)
     * @param direction Sort direction (optional)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @param licenseExpirationDate Filter users by license expiration date or &#x60;active&#x60; / &#x60;notActive&#x60; (optional)
     * @param onlyIds Return only user ids (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 25)
     * @return List&lt;UserDetailsAdmin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserDetailsAdmin> listOrganizationUsers(List<String> sort, String direction, String next, String previous, List<String> role, String q, List<String> group, Boolean noActiveLicense, List<String> licenseExpirationDate, Boolean onlyIds, Integer limit) throws ApiException {
        ApiResponse<List<UserDetailsAdmin>> localVarResp = listOrganizationUsersWithHttpInfo(sort, direction, next, previous, role, q, group, noActiveLicense, licenseExpirationDate, onlyIds, limit);
        return localVarResp.getData();
    }

    /**
     * List the organization users
     * 
     * @param sort The order to sort the user list (optional)
     * @param direction Sort direction (optional)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @param licenseExpirationDate Filter users by license expiration date or &#x60;active&#x60; / &#x60;notActive&#x60; (optional)
     * @param onlyIds Return only user ids (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 25)
     * @return ApiResponse&lt;List&lt;UserDetailsAdmin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserDetailsAdmin>> listOrganizationUsersWithHttpInfo(List<String> sort, String direction, String next, String previous, List<String> role, String q, List<String> group, Boolean noActiveLicense, List<String> licenseExpirationDate, Boolean onlyIds, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationUsersValidateBeforeCall(sort, direction, next, previous, role, q, group, noActiveLicense, licenseExpirationDate, onlyIds, limit, null);
        Type localVarReturnType = new TypeToken<List<UserDetailsAdmin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the organization users (asynchronously)
     * 
     * @param sort The order to sort the user list (optional)
     * @param direction Sort direction (optional)
     * @param next An opaque string cursor to fetch the next page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param previous An opaque string cursor to fetch the previous page of data. The paginated API URLs are returned in the &#x60;Link&#x60; header when requesting the API. These URLs will contain a &#x60;next&#x60; and &#x60;previous&#x60; cursor based on the available data.  (optional)
     * @param role Filter users by role (optional)
     * @param q The query to search (optional)
     * @param group Filter users by group (optional)
     * @param noActiveLicense Filter users who don&#39;t have an active license (optional)
     * @param licenseExpirationDate Filter users by license expiration date or &#x60;active&#x60; / &#x60;notActive&#x60; (optional)
     * @param onlyIds Return only user ids (optional)
     * @param limit This is the maximum number of objects that may be returned (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationUsersAsync(List<String> sort, String direction, String next, String previous, List<String> role, String q, List<String> group, Boolean noActiveLicense, List<String> licenseExpirationDate, Boolean onlyIds, Integer limit, final ApiCallback<List<UserDetailsAdmin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationUsersValidateBeforeCall(sort, direction, next, previous, role, q, group, noActiveLicense, licenseExpirationDate, onlyIds, limit, _callback);
        Type localVarReturnType = new TypeToken<List<UserDetailsAdmin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOrganizationInvitation
     * @param invitation Unique identifier of the invitation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The invitation has been removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrganizationInvitationCall(String invitation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/invitations/{invitation}"
            .replace("{" + "invitation" + "}", localVarApiClient.escapeString(invitation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOrganizationInvitationValidateBeforeCall(String invitation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitation' is set
        if (invitation == null) {
            throw new ApiException("Missing the required parameter 'invitation' when calling removeOrganizationInvitation(Async)");
        }

        return removeOrganizationInvitationCall(invitation, _callback);

    }

    /**
     * Remove an organization invitation
     * 
     * @param invitation Unique identifier of the invitation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The invitation has been removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void removeOrganizationInvitation(String invitation) throws ApiException {
        removeOrganizationInvitationWithHttpInfo(invitation);
    }

    /**
     * Remove an organization invitation
     * 
     * @param invitation Unique identifier of the invitation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The invitation has been removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeOrganizationInvitationWithHttpInfo(String invitation) throws ApiException {
        okhttp3.Call localVarCall = removeOrganizationInvitationValidateBeforeCall(invitation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an organization invitation (asynchronously)
     * 
     * @param invitation Unique identifier of the invitation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The invitation has been removed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrganizationInvitationAsync(String invitation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOrganizationInvitationValidateBeforeCall(invitation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOrganizationUser
     * @param user Unique identifier of the Flat account  (required)
     * @param convertToIndividual If &#x60;true&#x60;, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io. This operation will remove the education-related data from the account. Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrganizationUserCall(String user, Boolean convertToIndividual, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/users/{user}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (convertToIndividual != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("convertToIndividual", convertToIndividual));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOrganizationUserValidateBeforeCall(String user, Boolean convertToIndividual, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling removeOrganizationUser(Async)");
        }

        return removeOrganizationUserCall(user, convertToIndividual, _callback);

    }

    /**
     * Remove an account from Flat
     * This operation removes an account from Flat and its data, including: * The music scores created by this user (documents, history, comments, collaboration information) * Education related data (assignments and classroom information) 
     * @param user Unique identifier of the Flat account  (required)
     * @param convertToIndividual If &#x60;true&#x60;, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io. This operation will remove the education-related data from the account. Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void removeOrganizationUser(String user, Boolean convertToIndividual) throws ApiException {
        removeOrganizationUserWithHttpInfo(user, convertToIndividual);
    }

    /**
     * Remove an account from Flat
     * This operation removes an account from Flat and its data, including: * The music scores created by this user (documents, history, comments, collaboration information) * Education related data (assignments and classroom information) 
     * @param user Unique identifier of the Flat account  (required)
     * @param convertToIndividual If &#x60;true&#x60;, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io. This operation will remove the education-related data from the account. Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeOrganizationUserWithHttpInfo(String user, Boolean convertToIndividual) throws ApiException {
        okhttp3.Call localVarCall = removeOrganizationUserValidateBeforeCall(user, convertToIndividual, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an account from Flat (asynchronously)
     * This operation removes an account from Flat and its data, including: * The music scores created by this user (documents, history, comments, collaboration information) * Education related data (assignments and classroom information) 
     * @param user Unique identifier of the Flat account  (required)
     * @param convertToIndividual If &#x60;true&#x60;, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io. This operation will remove the education-related data from the account. Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrganizationUserAsync(String user, Boolean convertToIndividual, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOrganizationUserValidateBeforeCall(user, convertToIndividual, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeLtiCredentials
     * @param credentials Credentials unique identifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credentials revoked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credentials not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeLtiCredentialsCall(String credentials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/lti/credentials/{credentials}"
            .replace("{" + "credentials" + "}", localVarApiClient.escapeString(credentials.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeLtiCredentialsValidateBeforeCall(String credentials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'credentials' is set
        if (credentials == null) {
            throw new ApiException("Missing the required parameter 'credentials' when calling revokeLtiCredentials(Async)");
        }

        return revokeLtiCredentialsCall(credentials, _callback);

    }

    /**
     * Revoke LTI 1.x credentials
     * 
     * @param credentials Credentials unique identifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credentials revoked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credentials not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void revokeLtiCredentials(String credentials) throws ApiException {
        revokeLtiCredentialsWithHttpInfo(credentials);
    }

    /**
     * Revoke LTI 1.x credentials
     * 
     * @param credentials Credentials unique identifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credentials revoked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credentials not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeLtiCredentialsWithHttpInfo(String credentials) throws ApiException {
        okhttp3.Call localVarCall = revokeLtiCredentialsValidateBeforeCall(credentials, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke LTI 1.x credentials (asynchronously)
     * 
     * @param credentials Credentials unique identifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credentials revoked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not admin of an organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credentials not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeLtiCredentialsAsync(String credentials, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeLtiCredentialsValidateBeforeCall(credentials, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationUser
     * @param user Unique identifier of the Flat account  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationUserCall(String user, UserAdminUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/users/{user}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationUserValidateBeforeCall(String user, UserAdminUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateOrganizationUser(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrganizationUser(Async)");
        }

        return updateOrganizationUserCall(user, body, _callback);

    }

    /**
     * Update account information
     * 
     * @param user Unique identifier of the Flat account  (required)
     * @param body  (required)
     * @return UserDetailsAdmin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDetailsAdmin updateOrganizationUser(String user, UserAdminUpdate body) throws ApiException {
        ApiResponse<UserDetailsAdmin> localVarResp = updateOrganizationUserWithHttpInfo(user, body);
        return localVarResp.getData();
    }

    /**
     * Update account information
     * 
     * @param user Unique identifier of the Flat account  (required)
     * @param body  (required)
     * @return ApiResponse&lt;UserDetailsAdmin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDetailsAdmin> updateOrganizationUserWithHttpInfo(String user, UserAdminUpdate body) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationUserValidateBeforeCall(user, body, null);
        Type localVarReturnType = new TypeToken<UserDetailsAdmin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update account information (asynchronously)
     * 
     * @param user Unique identifier of the Flat account  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationUserAsync(String user, UserAdminUpdate body, final ApiCallback<UserDetailsAdmin> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationUserValidateBeforeCall(user, body, _callback);
        Type localVarReturnType = new TypeToken<UserDetailsAdmin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
