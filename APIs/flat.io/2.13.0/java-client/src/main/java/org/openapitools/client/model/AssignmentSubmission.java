/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentSubmissionState;
import org.openapitools.client.model.GoogleClassroomSubmission;
import org.openapitools.client.model.MediaAttachment;
import org.openapitools.client.model.MicrosoftGraphSubmission;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assignment Submission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentSubmission {
  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private String assignment;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<MediaAttachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSROOM = "classroom";
  @SerializedName(SERIALIZED_NAME_CLASSROOM)
  private String classroom;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DRAFT_GRADE = "draftGrade";
  @SerializedName(SERIALIZED_NAME_DRAFT_GRADE)
  private BigDecimal draftGrade;

  public static final String SERIALIZED_NAME_GOOGLE_CLASSROOM = "googleClassroom";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLASSROOM)
  private GoogleClassroomSubmission googleClassroom;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private BigDecimal grade;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private BigDecimal maxPoints;

  public static final String SERIALIZED_NAME_MICROSOFT_GRAPH = "microsoftGraph";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_GRAPH)
  private MicrosoftGraphSubmission microsoftGraph;

  public static final String SERIALIZED_NAME_RETURN_CREATOR = "returnCreator";
  @SerializedName(SERIALIZED_NAME_RETURN_CREATOR)
  private String returnCreator;

  public static final String SERIALIZED_NAME_RETURN_DATE = "returnDate";
  @SerializedName(SERIALIZED_NAME_RETURN_DATE)
  private String returnDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AssignmentSubmissionState state;

  public static final String SERIALIZED_NAME_SUBMISSION_DATE = "submissionDate";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_DATE)
  private String submissionDate;

  public AssignmentSubmission() {
  }

  public AssignmentSubmission assignment(String assignment) {
    this.assignment = assignment;
    return this;
  }

  /**
   * Unique identifier of the assignment
   * @return assignment
   */
  @javax.annotation.Nullable
  public String getAssignment() {
    return assignment;
  }

  public void setAssignment(String assignment) {
    this.assignment = assignment;
  }


  public AssignmentSubmission attachments(List<MediaAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public AssignmentSubmission addAttachmentsItem(MediaAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<MediaAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<MediaAttachment> attachments) {
    this.attachments = attachments;
  }


  public AssignmentSubmission classroom(String classroom) {
    this.classroom = classroom;
    return this;
  }

  /**
   * Unique identifier of the classroom where the assignment was posted 
   * @return classroom
   */
  @javax.annotation.Nullable
  public String getClassroom() {
    return classroom;
  }

  public void setClassroom(String classroom) {
    this.classroom = classroom;
  }


  public AssignmentSubmission creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date when the submission was created
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public AssignmentSubmission creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * The User identifier of the student who created the submission
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public AssignmentSubmission draftGrade(BigDecimal draftGrade) {
    this.draftGrade = draftGrade;
    return this;
  }

  /**
   * Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to &#x60;grade&#x60; once the teacher returns the submission
   * @return draftGrade
   */
  @javax.annotation.Nullable
  public BigDecimal getDraftGrade() {
    return draftGrade;
  }

  public void setDraftGrade(BigDecimal draftGrade) {
    this.draftGrade = draftGrade;
  }


  public AssignmentSubmission googleClassroom(GoogleClassroomSubmission googleClassroom) {
    this.googleClassroom = googleClassroom;
    return this;
  }

  /**
   * Get googleClassroom
   * @return googleClassroom
   */
  @javax.annotation.Nullable
  public GoogleClassroomSubmission getGoogleClassroom() {
    return googleClassroom;
  }

  public void setGoogleClassroom(GoogleClassroomSubmission googleClassroom) {
    this.googleClassroom = googleClassroom;
  }


  public AssignmentSubmission grade(BigDecimal grade) {
    this.grade = grade;
    return this;
  }

  /**
   * Optional grade. If unset, no grade was set.
   * @return grade
   */
  @javax.annotation.Nullable
  public BigDecimal getGrade() {
    return grade;
  }

  public void setGrade(BigDecimal grade) {
    this.grade = grade;
  }


  public AssignmentSubmission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the submission
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssignmentSubmission maxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * Optional max points for the grade. If set, a corresponding &#x60;draftGrade&#x60; or &#x60;grade&#x60; will be set.
   * @return maxPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxPoints() {
    return maxPoints;
  }

  public void setMaxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
  }


  public AssignmentSubmission microsoftGraph(MicrosoftGraphSubmission microsoftGraph) {
    this.microsoftGraph = microsoftGraph;
    return this;
  }

  /**
   * Get microsoftGraph
   * @return microsoftGraph
   */
  @javax.annotation.Nullable
  public MicrosoftGraphSubmission getMicrosoftGraph() {
    return microsoftGraph;
  }

  public void setMicrosoftGraph(MicrosoftGraphSubmission microsoftGraph) {
    this.microsoftGraph = microsoftGraph;
  }


  public AssignmentSubmission returnCreator(String returnCreator) {
    this.returnCreator = returnCreator;
    return this;
  }

  /**
   * The User unique identifier of the teacher who returned the submission 
   * @return returnCreator
   */
  @javax.annotation.Nullable
  public String getReturnCreator() {
    return returnCreator;
  }

  public void setReturnCreator(String returnCreator) {
    this.returnCreator = returnCreator;
  }


  public AssignmentSubmission returnDate(String returnDate) {
    this.returnDate = returnDate;
    return this;
  }

  /**
   * The date when the teacher returned the work
   * @return returnDate
   */
  @javax.annotation.Nullable
  public String getReturnDate() {
    return returnDate;
  }

  public void setReturnDate(String returnDate) {
    this.returnDate = returnDate;
  }


  public AssignmentSubmission state(AssignmentSubmissionState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public AssignmentSubmissionState getState() {
    return state;
  }

  public void setState(AssignmentSubmissionState state) {
    this.state = state;
  }


  public AssignmentSubmission submissionDate(String submissionDate) {
    this.submissionDate = submissionDate;
    return this;
  }

  /**
   * The date when the student submitted his work
   * @return submissionDate
   */
  @javax.annotation.Nullable
  public String getSubmissionDate() {
    return submissionDate;
  }

  public void setSubmissionDate(String submissionDate) {
    this.submissionDate = submissionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentSubmission assignmentSubmission = (AssignmentSubmission) o;
    return Objects.equals(this.assignment, assignmentSubmission.assignment) &&
        Objects.equals(this.attachments, assignmentSubmission.attachments) &&
        Objects.equals(this.classroom, assignmentSubmission.classroom) &&
        Objects.equals(this.creationDate, assignmentSubmission.creationDate) &&
        Objects.equals(this.creator, assignmentSubmission.creator) &&
        Objects.equals(this.draftGrade, assignmentSubmission.draftGrade) &&
        Objects.equals(this.googleClassroom, assignmentSubmission.googleClassroom) &&
        Objects.equals(this.grade, assignmentSubmission.grade) &&
        Objects.equals(this.id, assignmentSubmission.id) &&
        Objects.equals(this.maxPoints, assignmentSubmission.maxPoints) &&
        Objects.equals(this.microsoftGraph, assignmentSubmission.microsoftGraph) &&
        Objects.equals(this.returnCreator, assignmentSubmission.returnCreator) &&
        Objects.equals(this.returnDate, assignmentSubmission.returnDate) &&
        Objects.equals(this.state, assignmentSubmission.state) &&
        Objects.equals(this.submissionDate, assignmentSubmission.submissionDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignment, attachments, classroom, creationDate, creator, draftGrade, googleClassroom, grade, id, maxPoints, microsoftGraph, returnCreator, returnDate, state, submissionDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentSubmission {\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    classroom: ").append(toIndentedString(classroom)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    draftGrade: ").append(toIndentedString(draftGrade)).append("\n");
    sb.append("    googleClassroom: ").append(toIndentedString(googleClassroom)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    microsoftGraph: ").append(toIndentedString(microsoftGraph)).append("\n");
    sb.append("    returnCreator: ").append(toIndentedString(returnCreator)).append("\n");
    sb.append("    returnDate: ").append(toIndentedString(returnDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    submissionDate: ").append(toIndentedString(submissionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignment");
    openapiFields.add("attachments");
    openapiFields.add("classroom");
    openapiFields.add("creationDate");
    openapiFields.add("creator");
    openapiFields.add("draftGrade");
    openapiFields.add("googleClassroom");
    openapiFields.add("grade");
    openapiFields.add("id");
    openapiFields.add("maxPoints");
    openapiFields.add("microsoftGraph");
    openapiFields.add("returnCreator");
    openapiFields.add("returnDate");
    openapiFields.add("state");
    openapiFields.add("submissionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentSubmission is not found in the empty JSON string", AssignmentSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assignment") != null && !jsonObj.get("assignment").isJsonNull()) && !jsonObj.get("assignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignment").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            MediaAttachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("classroom") != null && !jsonObj.get("classroom").isJsonNull()) && !jsonObj.get("classroom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classroom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classroom").toString()));
      }
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      // validate the optional field `googleClassroom`
      if (jsonObj.get("googleClassroom") != null && !jsonObj.get("googleClassroom").isJsonNull()) {
        GoogleClassroomSubmission.validateJsonElement(jsonObj.get("googleClassroom"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `microsoftGraph`
      if (jsonObj.get("microsoftGraph") != null && !jsonObj.get("microsoftGraph").isJsonNull()) {
        MicrosoftGraphSubmission.validateJsonElement(jsonObj.get("microsoftGraph"));
      }
      if ((jsonObj.get("returnCreator") != null && !jsonObj.get("returnCreator").isJsonNull()) && !jsonObj.get("returnCreator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnCreator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnCreator").toString()));
      }
      if ((jsonObj.get("returnDate") != null && !jsonObj.get("returnDate").isJsonNull()) && !jsonObj.get("returnDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnDate").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        AssignmentSubmissionState.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("submissionDate") != null && !jsonObj.get("submissionDate").isJsonNull()) && !jsonObj.get("submissionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submissionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submissionDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentSubmission>() {
           @Override
           public void write(JsonWriter out, AssignmentSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentSubmission
   * @throws IOException if the JSON string is invalid with respect to AssignmentSubmission
   */
  public static AssignmentSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentSubmission.class);
  }

  /**
   * Convert an instance of AssignmentSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

