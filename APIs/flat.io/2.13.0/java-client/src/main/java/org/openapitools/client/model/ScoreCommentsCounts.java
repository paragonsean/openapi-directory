/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A computed version of the total, unique, weekly and monthly number of comments added on the documents (this doesn&#39;t include inline comments). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreCommentsCounts {
  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private BigDecimal monthly;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_UNIQUE = "unique";
  @SerializedName(SERIALIZED_NAME_UNIQUE)
  private BigDecimal unique;

  public static final String SERIALIZED_NAME_WEEKLY = "weekly";
  @SerializedName(SERIALIZED_NAME_WEEKLY)
  private BigDecimal weekly;

  public ScoreCommentsCounts() {
  }

  public ScoreCommentsCounts monthly(BigDecimal monthly) {
    this.monthly = monthly;
    return this;
  }

  /**
   * The monthly unique number of comments added to the score
   * @return monthly
   */
  @javax.annotation.Nullable
  public BigDecimal getMonthly() {
    return monthly;
  }

  public void setMonthly(BigDecimal monthly) {
    this.monthly = monthly;
  }


  public ScoreCommentsCounts total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of comments added to the score
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public ScoreCommentsCounts unique(BigDecimal unique) {
    this.unique = unique;
    return this;
  }

  /**
   * The unique (1/user) number of comments added to the score
   * @return unique
   */
  @javax.annotation.Nullable
  public BigDecimal getUnique() {
    return unique;
  }

  public void setUnique(BigDecimal unique) {
    this.unique = unique;
  }


  public ScoreCommentsCounts weekly(BigDecimal weekly) {
    this.weekly = weekly;
    return this;
  }

  /**
   * The weekly unique number of comments added to the score
   * @return weekly
   */
  @javax.annotation.Nullable
  public BigDecimal getWeekly() {
    return weekly;
  }

  public void setWeekly(BigDecimal weekly) {
    this.weekly = weekly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreCommentsCounts scoreCommentsCounts = (ScoreCommentsCounts) o;
    return Objects.equals(this.monthly, scoreCommentsCounts.monthly) &&
        Objects.equals(this.total, scoreCommentsCounts.total) &&
        Objects.equals(this.unique, scoreCommentsCounts.unique) &&
        Objects.equals(this.weekly, scoreCommentsCounts.weekly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthly, total, unique, weekly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreCommentsCounts {\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    unique: ").append(toIndentedString(unique)).append("\n");
    sb.append("    weekly: ").append(toIndentedString(weekly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("monthly");
    openapiFields.add("total");
    openapiFields.add("unique");
    openapiFields.add("weekly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreCommentsCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreCommentsCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreCommentsCounts is not found in the empty JSON string", ScoreCommentsCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreCommentsCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreCommentsCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreCommentsCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreCommentsCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreCommentsCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreCommentsCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreCommentsCounts>() {
           @Override
           public void write(JsonWriter out, ScoreCommentsCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreCommentsCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreCommentsCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreCommentsCounts
   * @throws IOException if the JSON string is invalid with respect to ScoreCommentsCounts
   */
  public static ScoreCommentsCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreCommentsCounts.class);
  }

  /**
   * Convert an instance of ScoreCommentsCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

