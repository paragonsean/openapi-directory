/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentCreationGoogleClassroom;
import org.openapitools.client.model.AssignmentCreationMicrosoftGraph;
import org.openapitools.client.model.AssignmentType;
import org.openapitools.client.model.ClassAttachmentCreation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assignment creation details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentCreation {
  public static final String SERIALIZED_NAME_ASSIGNED_STUDENTS = "assignedStudents";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_STUDENTS)
  private List<String> assignedStudents = new ArrayList<>();

  /**
   * Possible modes of assigning assignments
   */
  @JsonAdapter(AssigneeModeEnum.Adapter.class)
  public enum AssigneeModeEnum {
    EVERYONE("everyone"),
    
    SELECTED("selected");

    private String value;

    AssigneeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssigneeModeEnum fromValue(String value) {
      for (AssigneeModeEnum b : AssigneeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssigneeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssigneeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssigneeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNEE_MODE = "assigneeMode";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_MODE)
  private AssigneeModeEnum assigneeMode;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<ClassAttachmentCreation> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private String cover;

  public static final String SERIALIZED_NAME_COVER_FILE = "coverFile";
  @SerializedName(SERIALIZED_NAME_COVER_FILE)
  private String coverFile;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_GOOGLE_CLASSROOM = "googleClassroom";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLASSROOM)
  private AssignmentCreationGoogleClassroom googleClassroom;

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private BigDecimal maxPoints;

  public static final String SERIALIZED_NAME_MICROSOFT_GRAPH = "microsoftGraph";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_GRAPH)
  private AssignmentCreationMicrosoftGraph microsoftGraph;

  public static final String SERIALIZED_NAME_NB_PLAYBACK_AUTHORIZED = "nbPlaybackAuthorized";
  @SerializedName(SERIALIZED_NAME_NB_PLAYBACK_AUTHORIZED)
  private BigDecimal nbPlaybackAuthorized;

  public static final String SERIALIZED_NAME_SCHEDULED_DATE = "scheduledDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DATE)
  private OffsetDateTime scheduledDate;

  /**
   * State of the assignment
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DRAFT("draft"),
    
    ACTIVE("active");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOOLSET = "toolset";
  @SerializedName(SERIALIZED_NAME_TOOLSET)
  private String toolset;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AssignmentType type;

  public AssignmentCreation() {
  }

  public AssignmentCreation assignedStudents(List<String> assignedStudents) {
    this.assignedStudents = assignedStudents;
    return this;
  }

  public AssignmentCreation addAssignedStudentsItem(String assignedStudentsItem) {
    if (this.assignedStudents == null) {
      this.assignedStudents = new ArrayList<>();
    }
    this.assignedStudents.add(assignedStudentsItem);
    return this;
  }

  /**
   * Identifiers for the students that have access to the assignment
   * @return assignedStudents
   */
  @javax.annotation.Nullable
  public List<String> getAssignedStudents() {
    return assignedStudents;
  }

  public void setAssignedStudents(List<String> assignedStudents) {
    this.assignedStudents = assignedStudents;
  }


  public AssignmentCreation assigneeMode(AssigneeModeEnum assigneeMode) {
    this.assigneeMode = assigneeMode;
    return this;
  }

  /**
   * Possible modes of assigning assignments
   * @return assigneeMode
   */
  @javax.annotation.Nullable
  public AssigneeModeEnum getAssigneeMode() {
    return assigneeMode;
  }

  public void setAssigneeMode(AssigneeModeEnum assigneeMode) {
    this.assigneeMode = assigneeMode;
  }


  public AssignmentCreation attachments(List<ClassAttachmentCreation> attachments) {
    this.attachments = attachments;
    return this;
  }

  public AssignmentCreation addAttachmentsItem(ClassAttachmentCreation attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<ClassAttachmentCreation> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<ClassAttachmentCreation> attachments) {
    this.attachments = attachments;
  }


  public AssignmentCreation cover(String cover) {
    this.cover = cover;
    return this;
  }

  /**
   * The URL of the cover to display
   * @return cover
   */
  @javax.annotation.Nullable
  public String getCover() {
    return cover;
  }

  public void setCover(String cover) {
    this.cover = cover;
  }


  public AssignmentCreation coverFile(String coverFile) {
    this.coverFile = coverFile;
    return this;
  }

  /**
   * The id of the cover to display
   * @return coverFile
   */
  @javax.annotation.Nullable
  public String getCoverFile() {
    return coverFile;
  }

  public void setCoverFile(String coverFile) {
    this.coverFile = coverFile;
  }


  public AssignmentCreation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description and content of the assignment
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AssignmentCreation dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won&#39;t have a due date. 
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public AssignmentCreation googleClassroom(AssignmentCreationGoogleClassroom googleClassroom) {
    this.googleClassroom = googleClassroom;
    return this;
  }

  /**
   * Get googleClassroom
   * @return googleClassroom
   */
  @javax.annotation.Nullable
  public AssignmentCreationGoogleClassroom getGoogleClassroom() {
    return googleClassroom;
  }

  public void setGoogleClassroom(AssignmentCreationGoogleClassroom googleClassroom) {
    this.googleClassroom = googleClassroom;
  }


  public AssignmentCreation maxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * If set, the grading will be enabled for the assignement with this value as the maximum of points 
   * minimum: 0
   * maximum: 100
   * @return maxPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxPoints() {
    return maxPoints;
  }

  public void setMaxPoints(BigDecimal maxPoints) {
    this.maxPoints = maxPoints;
  }


  public AssignmentCreation microsoftGraph(AssignmentCreationMicrosoftGraph microsoftGraph) {
    this.microsoftGraph = microsoftGraph;
    return this;
  }

  /**
   * Get microsoftGraph
   * @return microsoftGraph
   */
  @javax.annotation.Nullable
  public AssignmentCreationMicrosoftGraph getMicrosoftGraph() {
    return microsoftGraph;
  }

  public void setMicrosoftGraph(AssignmentCreationMicrosoftGraph microsoftGraph) {
    this.microsoftGraph = microsoftGraph;
  }


  public AssignmentCreation nbPlaybackAuthorized(BigDecimal nbPlaybackAuthorized) {
    this.nbPlaybackAuthorized = nbPlaybackAuthorized;
    return this;
  }

  /**
   * The number of playback authorized on the scores of the assignment.
   * @return nbPlaybackAuthorized
   */
  @javax.annotation.Nullable
  public BigDecimal getNbPlaybackAuthorized() {
    return nbPlaybackAuthorized;
  }

  public void setNbPlaybackAuthorized(BigDecimal nbPlaybackAuthorized) {
    this.nbPlaybackAuthorized = nbPlaybackAuthorized;
  }


  public AssignmentCreation scheduledDate(OffsetDateTime scheduledDate) {
    this.scheduledDate = scheduledDate;
    return this;
  }

  /**
   * The publication (scheduled) date of the assignment. If this one is specified, the assignment will only be listed to the teachers of the class. 
   * @return scheduledDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledDate() {
    return scheduledDate;
  }

  public void setScheduledDate(OffsetDateTime scheduledDate) {
    this.scheduledDate = scheduledDate;
  }


  public AssignmentCreation state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the assignment
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public AssignmentCreation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the assignment
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AssignmentCreation toolset(String toolset) {
    this.toolset = toolset;
    return this;
  }

  /**
   * The id of the associated toolset
   * @return toolset
   */
  @javax.annotation.Nullable
  public String getToolset() {
    return toolset;
  }

  public void setToolset(String toolset) {
    this.toolset = toolset;
  }


  public AssignmentCreation type(AssignmentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AssignmentType getType() {
    return type;
  }

  public void setType(AssignmentType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentCreation assignmentCreation = (AssignmentCreation) o;
    return Objects.equals(this.assignedStudents, assignmentCreation.assignedStudents) &&
        Objects.equals(this.assigneeMode, assignmentCreation.assigneeMode) &&
        Objects.equals(this.attachments, assignmentCreation.attachments) &&
        Objects.equals(this.cover, assignmentCreation.cover) &&
        Objects.equals(this.coverFile, assignmentCreation.coverFile) &&
        Objects.equals(this.description, assignmentCreation.description) &&
        Objects.equals(this.dueDate, assignmentCreation.dueDate) &&
        Objects.equals(this.googleClassroom, assignmentCreation.googleClassroom) &&
        Objects.equals(this.maxPoints, assignmentCreation.maxPoints) &&
        Objects.equals(this.microsoftGraph, assignmentCreation.microsoftGraph) &&
        Objects.equals(this.nbPlaybackAuthorized, assignmentCreation.nbPlaybackAuthorized) &&
        Objects.equals(this.scheduledDate, assignmentCreation.scheduledDate) &&
        Objects.equals(this.state, assignmentCreation.state) &&
        Objects.equals(this.title, assignmentCreation.title) &&
        Objects.equals(this.toolset, assignmentCreation.toolset) &&
        Objects.equals(this.type, assignmentCreation.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedStudents, assigneeMode, attachments, cover, coverFile, description, dueDate, googleClassroom, maxPoints, microsoftGraph, nbPlaybackAuthorized, scheduledDate, state, title, toolset, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentCreation {\n");
    sb.append("    assignedStudents: ").append(toIndentedString(assignedStudents)).append("\n");
    sb.append("    assigneeMode: ").append(toIndentedString(assigneeMode)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    coverFile: ").append(toIndentedString(coverFile)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    googleClassroom: ").append(toIndentedString(googleClassroom)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    microsoftGraph: ").append(toIndentedString(microsoftGraph)).append("\n");
    sb.append("    nbPlaybackAuthorized: ").append(toIndentedString(nbPlaybackAuthorized)).append("\n");
    sb.append("    scheduledDate: ").append(toIndentedString(scheduledDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    toolset: ").append(toIndentedString(toolset)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignedStudents");
    openapiFields.add("assigneeMode");
    openapiFields.add("attachments");
    openapiFields.add("cover");
    openapiFields.add("coverFile");
    openapiFields.add("description");
    openapiFields.add("dueDate");
    openapiFields.add("googleClassroom");
    openapiFields.add("maxPoints");
    openapiFields.add("microsoftGraph");
    openapiFields.add("nbPlaybackAuthorized");
    openapiFields.add("scheduledDate");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("toolset");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentCreation is not found in the empty JSON string", AssignmentCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("assignedStudents") != null && !jsonObj.get("assignedStudents").isJsonNull() && !jsonObj.get("assignedStudents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedStudents` to be an array in the JSON string but got `%s`", jsonObj.get("assignedStudents").toString()));
      }
      if ((jsonObj.get("assigneeMode") != null && !jsonObj.get("assigneeMode").isJsonNull()) && !jsonObj.get("assigneeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigneeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigneeMode").toString()));
      }
      // validate the optional field `assigneeMode`
      if (jsonObj.get("assigneeMode") != null && !jsonObj.get("assigneeMode").isJsonNull()) {
        AssigneeModeEnum.validateJsonElement(jsonObj.get("assigneeMode"));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            ClassAttachmentCreation.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) && !jsonObj.get("cover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cover").toString()));
      }
      if ((jsonObj.get("coverFile") != null && !jsonObj.get("coverFile").isJsonNull()) && !jsonObj.get("coverFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverFile").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `googleClassroom`
      if (jsonObj.get("googleClassroom") != null && !jsonObj.get("googleClassroom").isJsonNull()) {
        AssignmentCreationGoogleClassroom.validateJsonElement(jsonObj.get("googleClassroom"));
      }
      // validate the optional field `microsoftGraph`
      if (jsonObj.get("microsoftGraph") != null && !jsonObj.get("microsoftGraph").isJsonNull()) {
        AssignmentCreationMicrosoftGraph.validateJsonElement(jsonObj.get("microsoftGraph"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("toolset") != null && !jsonObj.get("toolset").isJsonNull()) && !jsonObj.get("toolset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toolset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toolset").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        AssignmentType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentCreation>() {
           @Override
           public void write(JsonWriter out, AssignmentCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentCreation
   * @throws IOException if the JSON string is invalid with respect to AssignmentCreation
   */
  public static AssignmentCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentCreation.class);
  }

  /**
   * Convert an instance of AssignmentCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

