/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaScoreSharingMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Media attachment. The API will automatically resolve the details, oEmbed, and media available if possible and return them in this object 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaAttachment {
  public static final String SERIALIZED_NAME_AUTHOR_NAME = "authorName";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_AUTHOR_URL = "authorUrl";
  @SerializedName(SERIALIZED_NAME_AUTHOR_URL)
  private String authorUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GOOGLE_DRIVE_FILE_ID = "googleDriveFileId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_DRIVE_FILE_ID)
  private String googleDriveFileId;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_HTML_HEIGHT = "htmlHeight";
  @SerializedName(SERIALIZED_NAME_HTML_HEIGHT)
  private String htmlHeight;

  public static final String SERIALIZED_NAME_HTML_WIDTH = "htmlWidth";
  @SerializedName(SERIALIZED_NAME_HTML_WIDTH)
  private String htmlWidth;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_LOCK_SCORE_TEMPLATE = "lockScoreTemplate";
  @SerializedName(SERIALIZED_NAME_LOCK_SCORE_TEMPLATE)
  private Boolean lockScoreTemplate;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SHARING_MODE = "sharingMode";
  @SerializedName(SERIALIZED_NAME_SHARING_MODE)
  private MediaScoreSharingMode sharingMode = MediaScoreSharingMode.READ;

  public static final String SERIALIZED_NAME_THUMBNAIL_HEIGHT = "thumbnailHeight";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HEIGHT)
  private Integer thumbnailHeight;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public static final String SERIALIZED_NAME_THUMBNAIL_WIDTH = "thumbnailWidth";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_WIDTH)
  private Integer thumbnailWidth;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private String track;

  /**
   * The type of the assignment resolved: * &#x60;rich&#x60;, &#x60;photo&#x60;, &#x60;video&#x60; are attachment types that are automatically resolved from a &#x60;link&#x60; attachment. * A &#x60;flat&#x60; attachment is a score document where the unique identifier will be specified in the &#x60;score&#x60; property. Its sharing mode will be provided in the &#x60;sharingMode&#x60; property. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    RICH("rich"),
    
    PHOTO("photo"),
    
    VIDEO("video"),
    
    LINK("link"),
    
    FLAT("flat"),
    
    GOOGLE_DRIVE("googleDrive"),
    
    WORKSHEET("worksheet"),
    
    PERFORMANCE("performance");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WORKSHEET = "worksheet";
  @SerializedName(SERIALIZED_NAME_WORKSHEET)
  private String worksheet;

  public MediaAttachment() {
  }

  public MediaAttachment authorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * The resolved author name of the attachment
   * @return authorName
   */
  @javax.annotation.Nullable
  public String getAuthorName() {
    return authorName;
  }

  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }


  public MediaAttachment authorUrl(String authorUrl) {
    this.authorUrl = authorUrl;
    return this;
  }

  /**
   * The resolved author url of the attachment
   * @return authorUrl
   */
  @javax.annotation.Nullable
  public String getAuthorUrl() {
    return authorUrl;
  }

  public void setAuthorUrl(String authorUrl) {
    this.authorUrl = authorUrl;
  }


  public MediaAttachment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The resolved description of the attachment
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MediaAttachment googleDriveFileId(String googleDriveFileId) {
    this.googleDriveFileId = googleDriveFileId;
    return this;
  }

  /**
   * The ID of the Google Drive File
   * @return googleDriveFileId
   */
  @javax.annotation.Nullable
  public String getGoogleDriveFileId() {
    return googleDriveFileId;
  }

  public void setGoogleDriveFileId(String googleDriveFileId) {
    this.googleDriveFileId = googleDriveFileId;
  }


  public MediaAttachment html(String html) {
    this.html = html;
    return this;
  }

  /**
   * If the attachment type is &#x60;rich&#x60; or &#x60;video&#x60;, the HTML code of the media to display 
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public MediaAttachment htmlHeight(String htmlHeight) {
    this.htmlHeight = htmlHeight;
    return this;
  }

  /**
   * If the &#x60;html&#x60; is available, the height of the widget
   * @return htmlHeight
   */
  @javax.annotation.Nullable
  public String getHtmlHeight() {
    return htmlHeight;
  }

  public void setHtmlHeight(String htmlHeight) {
    this.htmlHeight = htmlHeight;
  }


  public MediaAttachment htmlWidth(String htmlWidth) {
    this.htmlWidth = htmlWidth;
    return this;
  }

  /**
   * If the &#x60;html&#x60; is available, the width of the widget
   * @return htmlWidth
   */
  @javax.annotation.Nullable
  public String getHtmlWidth() {
    return htmlWidth;
  }

  public void setHtmlWidth(String htmlWidth) {
    this.htmlWidth = htmlWidth;
  }


  public MediaAttachment iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The URL of the icon
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public MediaAttachment lockScoreTemplate(Boolean lockScoreTemplate) {
    this.lockScoreTemplate = lockScoreTemplate;
    return this;
  }

  /**
   * To be used with a score attached in &#x60;sharingMode&#x60; &#x60;copy&#x60; (score used as template). If true, students won&#39;t be able to change the original notes of the template.
   * @return lockScoreTemplate
   */
  @javax.annotation.Nullable
  public Boolean getLockScoreTemplate() {
    return lockScoreTemplate;
  }

  public void setLockScoreTemplate(Boolean lockScoreTemplate) {
    this.lockScoreTemplate = lockScoreTemplate;
  }


  public MediaAttachment mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The mine type of the file
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public MediaAttachment revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * An unique revision identifier of a score
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }


  public MediaAttachment score(String score) {
    this.score = score;
    return this;
  }

  /**
   * An unique Flat score identifier
   * @return score
   */
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public MediaAttachment sharingMode(MediaScoreSharingMode sharingMode) {
    this.sharingMode = sharingMode;
    return this;
  }

  /**
   * Get sharingMode
   * @return sharingMode
   */
  @javax.annotation.Nullable
  public MediaScoreSharingMode getSharingMode() {
    return sharingMode;
  }

  public void setSharingMode(MediaScoreSharingMode sharingMode) {
    this.sharingMode = sharingMode;
  }


  public MediaAttachment thumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
    return this;
  }

  /**
   * If the &#x60;thumbnailUrl&#x60; is available, the width of the thumbnail 
   * @return thumbnailHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbnailHeight() {
    return thumbnailHeight;
  }

  public void setThumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
  }


  public MediaAttachment thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * If the attachment type is &#x60;rich&#x60;, &#x60;video&#x60;, &#x60;photo&#x60; or &#x60;link&#x60;, a displayable thumbnail for this attachment 
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }


  public MediaAttachment thumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
    return this;
  }

  /**
   * If the &#x60;thumbnailUrl&#x60; is available, the width of the thumbnail 
   * @return thumbnailWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbnailWidth() {
    return thumbnailWidth;
  }

  public void setThumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
  }


  public MediaAttachment title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The resolved title of the attachment
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MediaAttachment track(String track) {
    this.track = track;
    return this;
  }

  /**
   * A unique track identifier
   * @return track
   */
  @javax.annotation.Nullable
  public String getTrack() {
    return track;
  }

  public void setTrack(String track) {
    this.track = track;
  }


  public MediaAttachment type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the assignment resolved: * &#x60;rich&#x60;, &#x60;photo&#x60;, &#x60;video&#x60; are attachment types that are automatically resolved from a &#x60;link&#x60; attachment. * A &#x60;flat&#x60; attachment is a score document where the unique identifier will be specified in the &#x60;score&#x60; property. Its sharing mode will be provided in the &#x60;sharingMode&#x60; property. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MediaAttachment url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url of the attachment
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public MediaAttachment worksheet(String worksheet) {
    this.worksheet = worksheet;
    return this;
  }

  /**
   * An unique worksheet identifier
   * @return worksheet
   */
  @javax.annotation.Nullable
  public String getWorksheet() {
    return worksheet;
  }

  public void setWorksheet(String worksheet) {
    this.worksheet = worksheet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaAttachment mediaAttachment = (MediaAttachment) o;
    return Objects.equals(this.authorName, mediaAttachment.authorName) &&
        Objects.equals(this.authorUrl, mediaAttachment.authorUrl) &&
        Objects.equals(this.description, mediaAttachment.description) &&
        Objects.equals(this.googleDriveFileId, mediaAttachment.googleDriveFileId) &&
        Objects.equals(this.html, mediaAttachment.html) &&
        Objects.equals(this.htmlHeight, mediaAttachment.htmlHeight) &&
        Objects.equals(this.htmlWidth, mediaAttachment.htmlWidth) &&
        Objects.equals(this.iconUrl, mediaAttachment.iconUrl) &&
        Objects.equals(this.lockScoreTemplate, mediaAttachment.lockScoreTemplate) &&
        Objects.equals(this.mimeType, mediaAttachment.mimeType) &&
        Objects.equals(this.revision, mediaAttachment.revision) &&
        Objects.equals(this.score, mediaAttachment.score) &&
        Objects.equals(this.sharingMode, mediaAttachment.sharingMode) &&
        Objects.equals(this.thumbnailHeight, mediaAttachment.thumbnailHeight) &&
        Objects.equals(this.thumbnailUrl, mediaAttachment.thumbnailUrl) &&
        Objects.equals(this.thumbnailWidth, mediaAttachment.thumbnailWidth) &&
        Objects.equals(this.title, mediaAttachment.title) &&
        Objects.equals(this.track, mediaAttachment.track) &&
        Objects.equals(this.type, mediaAttachment.type) &&
        Objects.equals(this.url, mediaAttachment.url) &&
        Objects.equals(this.worksheet, mediaAttachment.worksheet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorName, authorUrl, description, googleDriveFileId, html, htmlHeight, htmlWidth, iconUrl, lockScoreTemplate, mimeType, revision, score, sharingMode, thumbnailHeight, thumbnailUrl, thumbnailWidth, title, track, type, url, worksheet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaAttachment {\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    authorUrl: ").append(toIndentedString(authorUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    googleDriveFileId: ").append(toIndentedString(googleDriveFileId)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    htmlHeight: ").append(toIndentedString(htmlHeight)).append("\n");
    sb.append("    htmlWidth: ").append(toIndentedString(htmlWidth)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    lockScoreTemplate: ").append(toIndentedString(lockScoreTemplate)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sharingMode: ").append(toIndentedString(sharingMode)).append("\n");
    sb.append("    thumbnailHeight: ").append(toIndentedString(thumbnailHeight)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    thumbnailWidth: ").append(toIndentedString(thumbnailWidth)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    worksheet: ").append(toIndentedString(worksheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorName");
    openapiFields.add("authorUrl");
    openapiFields.add("description");
    openapiFields.add("googleDriveFileId");
    openapiFields.add("html");
    openapiFields.add("htmlHeight");
    openapiFields.add("htmlWidth");
    openapiFields.add("iconUrl");
    openapiFields.add("lockScoreTemplate");
    openapiFields.add("mimeType");
    openapiFields.add("revision");
    openapiFields.add("score");
    openapiFields.add("sharingMode");
    openapiFields.add("thumbnailHeight");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("thumbnailWidth");
    openapiFields.add("title");
    openapiFields.add("track");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("worksheet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaAttachment is not found in the empty JSON string", MediaAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorName") != null && !jsonObj.get("authorName").isJsonNull()) && !jsonObj.get("authorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorName").toString()));
      }
      if ((jsonObj.get("authorUrl") != null && !jsonObj.get("authorUrl").isJsonNull()) && !jsonObj.get("authorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorUrl").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("googleDriveFileId") != null && !jsonObj.get("googleDriveFileId").isJsonNull()) && !jsonObj.get("googleDriveFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleDriveFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleDriveFileId").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("htmlHeight") != null && !jsonObj.get("htmlHeight").isJsonNull()) && !jsonObj.get("htmlHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlHeight").toString()));
      }
      if ((jsonObj.get("htmlWidth") != null && !jsonObj.get("htmlWidth").isJsonNull()) && !jsonObj.get("htmlWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlWidth").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      if ((jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) && !jsonObj.get("score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("score").toString()));
      }
      // validate the optional field `sharingMode`
      if (jsonObj.get("sharingMode") != null && !jsonObj.get("sharingMode").isJsonNull()) {
        MediaScoreSharingMode.validateJsonElement(jsonObj.get("sharingMode"));
      }
      if ((jsonObj.get("thumbnailUrl") != null && !jsonObj.get("thumbnailUrl").isJsonNull()) && !jsonObj.get("thumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUrl").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) && !jsonObj.get("track").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("worksheet") != null && !jsonObj.get("worksheet").isJsonNull()) && !jsonObj.get("worksheet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `worksheet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("worksheet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaAttachment>() {
           @Override
           public void write(JsonWriter out, MediaAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaAttachment
   * @throws IOException if the JSON string is invalid with respect to MediaAttachment
   */
  public static MediaAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaAttachment.class);
  }

  /**
   * Convert an instance of MediaAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

