/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScoreTrackPoint;
import org.openapitools.client.model.ScoreTrackState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creation of a new track. This one must contain the URL of the track or the corresponding file 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreTrackCreation {
  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ScoreTrackState state = ScoreTrackState.DRAFT;

  public static final String SERIALIZED_NAME_SYNCHRONIZATION_POINTS = "synchronizationPoints";
  @SerializedName(SERIALIZED_NAME_SYNCHRONIZATION_POINTS)
  private List<ScoreTrackPoint> synchronizationPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ScoreTrackCreation() {
  }

  public ScoreTrackCreation _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * True if the track should be used as default audio source
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public ScoreTrackCreation state(ScoreTrackState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ScoreTrackState getState() {
    return state;
  }

  public void setState(ScoreTrackState state) {
    this.state = state;
  }


  public ScoreTrackCreation synchronizationPoints(List<ScoreTrackPoint> synchronizationPoints) {
    this.synchronizationPoints = synchronizationPoints;
    return this;
  }

  public ScoreTrackCreation addSynchronizationPointsItem(ScoreTrackPoint synchronizationPointsItem) {
    if (this.synchronizationPoints == null) {
      this.synchronizationPoints = new ArrayList<>();
    }
    this.synchronizationPoints.add(synchronizationPointsItem);
    return this;
  }

  /**
   * Get synchronizationPoints
   * @return synchronizationPoints
   */
  @javax.annotation.Nullable
  public List<ScoreTrackPoint> getSynchronizationPoints() {
    return synchronizationPoints;
  }

  public void setSynchronizationPoints(List<ScoreTrackPoint> synchronizationPoints) {
    this.synchronizationPoints = synchronizationPoints;
  }


  public ScoreTrackCreation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the track
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ScoreTrackCreation url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the track
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreTrackCreation scoreTrackCreation = (ScoreTrackCreation) o;
    return Objects.equals(this._default, scoreTrackCreation._default) &&
        Objects.equals(this.state, scoreTrackCreation.state) &&
        Objects.equals(this.synchronizationPoints, scoreTrackCreation.synchronizationPoints) &&
        Objects.equals(this.title, scoreTrackCreation.title) &&
        Objects.equals(this.url, scoreTrackCreation.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_default, state, synchronizationPoints, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreTrackCreation {\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    synchronizationPoints: ").append(toIndentedString(synchronizationPoints)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default");
    openapiFields.add("state");
    openapiFields.add("synchronizationPoints");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreTrackCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreTrackCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreTrackCreation is not found in the empty JSON string", ScoreTrackCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreTrackCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreTrackCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ScoreTrackState.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("synchronizationPoints") != null && !jsonObj.get("synchronizationPoints").isJsonNull()) {
        JsonArray jsonArraysynchronizationPoints = jsonObj.getAsJsonArray("synchronizationPoints");
        if (jsonArraysynchronizationPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("synchronizationPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `synchronizationPoints` to be an array in the JSON string but got `%s`", jsonObj.get("synchronizationPoints").toString()));
          }

          // validate the optional field `synchronizationPoints` (array)
          for (int i = 0; i < jsonArraysynchronizationPoints.size(); i++) {
            ScoreTrackPoint.validateJsonElement(jsonArraysynchronizationPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreTrackCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreTrackCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreTrackCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreTrackCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreTrackCreation>() {
           @Override
           public void write(JsonWriter out, ScoreTrackCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreTrackCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreTrackCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreTrackCreation
   * @throws IOException if the JSON string is invalid with respect to ScoreTrackCreation
   */
  public static ScoreTrackCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreTrackCreation.class);
  }

  /**
   * Convert an instance of ScoreTrackCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

