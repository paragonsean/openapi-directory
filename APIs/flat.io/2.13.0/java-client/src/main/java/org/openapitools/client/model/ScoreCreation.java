/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ScorePrivacy;
import org.openapitools.client.model.ScoreSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A new created score
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreCreation {
  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  /**
   * The optional encoding of the score data. This property must match the encoding used for the &#x60;data&#x60; property.
   */
  @JsonAdapter(DataEncodingEnum.Adapter.class)
  public enum DataEncodingEnum {
    BASE64("base64");

    private String value;

    DataEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataEncodingEnum fromValue(String value) {
      for (DataEncodingEnum b : DataEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_ENCODING = "dataEncoding";
  @SerializedName(SERIALIZED_NAME_DATA_ENCODING)
  private DataEncodingEnum dataEncoding;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_GOOGLE_DRIVE_FOLDER = "googleDriveFolder";
  @SerializedName(SERIALIZED_NAME_GOOGLE_DRIVE_FOLDER)
  private String googleDriveFolder;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private ScorePrivacy privacy;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ScoreSource source;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ScoreCreation() {
  }

  public ScoreCreation collection(String collection) {
    this.collection = collection;
    return this;
  }

  /**
   * Unique identifier of a collection where the score will be created. If no collection identifier is provided, the score will be stored in the &#x60;root&#x60; directory. 
   * @return collection
   */
  @javax.annotation.Nullable
  public String getCollection() {
    return collection;
  }

  public void setCollection(String collection) {
    this.collection = collection;
  }


  public ScoreCreation data(String data) {
    this.data = data;
    return this;
  }

  /**
   * The data of the score file. It must be a MusicXML 3 file (&#x60;vnd.recordare.musicxml&#x60; or &#x60;vnd.recordare.musicxml+xml&#x60;), a MIDI file (&#x60;audio/midi&#x60;) or a Flat.json (aka Adagio.json) file. Binary payloads (&#x60;vnd.recordare.musicxml&#x60; and &#x60;audio/midi&#x60;) can be encoded in Base64, in this case the &#x60;dataEncoding&#x60; property must match the encoding used for the API request. 
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public ScoreCreation dataEncoding(DataEncodingEnum dataEncoding) {
    this.dataEncoding = dataEncoding;
    return this;
  }

  /**
   * The optional encoding of the score data. This property must match the encoding used for the &#x60;data&#x60; property.
   * @return dataEncoding
   */
  @javax.annotation.Nullable
  public DataEncodingEnum getDataEncoding() {
    return dataEncoding;
  }

  public void setDataEncoding(DataEncodingEnum dataEncoding) {
    this.dataEncoding = dataEncoding;
  }


  public ScoreCreation filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * If this is an imported file, its filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public ScoreCreation googleDriveFolder(String googleDriveFolder) {
    this.googleDriveFolder = googleDriveFolder;
    return this;
  }

  /**
   * If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory. 
   * @return googleDriveFolder
   */
  @javax.annotation.Nullable
  public String getGoogleDriveFolder() {
    return googleDriveFolder;
  }

  public void setGoogleDriveFolder(String googleDriveFolder) {
    this.googleDriveFolder = googleDriveFolder;
  }


  public ScoreCreation privacy(ScorePrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nonnull
  public ScorePrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(ScorePrivacy privacy) {
    this.privacy = privacy;
  }


  public ScoreCreation source(ScoreSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public ScoreSource getSource() {
    return source;
  }

  public void setSource(ScoreSource source) {
    this.source = source;
  }


  public ScoreCreation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the new score. If the title is too long, the API may trim this one.  If this title is not specified, the API will try to (in this order):   - Use the title contained in the file (e.g. [&#x60;movement-title&#x60;](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [&#x60;credit-words&#x60;](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).   - Use the name of the file for files from a specified &#x60;source&#x60; (e.g. Google Drive) or the one in the &#x60;filename&#x60; property   - Set a default title (e.g. \&quot;New Music Score\&quot;) 
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreCreation scoreCreation = (ScoreCreation) o;
    return Objects.equals(this.collection, scoreCreation.collection) &&
        Objects.equals(this.data, scoreCreation.data) &&
        Objects.equals(this.dataEncoding, scoreCreation.dataEncoding) &&
        Objects.equals(this.filename, scoreCreation.filename) &&
        Objects.equals(this.googleDriveFolder, scoreCreation.googleDriveFolder) &&
        Objects.equals(this.privacy, scoreCreation.privacy) &&
        Objects.equals(this.source, scoreCreation.source) &&
        Objects.equals(this.title, scoreCreation.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collection, data, dataEncoding, filename, googleDriveFolder, privacy, source, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreCreation {\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataEncoding: ").append(toIndentedString(dataEncoding)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    googleDriveFolder: ").append(toIndentedString(googleDriveFolder)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collection");
    openapiFields.add("data");
    openapiFields.add("dataEncoding");
    openapiFields.add("filename");
    openapiFields.add("googleDriveFolder");
    openapiFields.add("privacy");
    openapiFields.add("source");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("privacy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreCreation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreCreation is not found in the empty JSON string", ScoreCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreCreation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScoreCreation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collection") != null && !jsonObj.get("collection").isJsonNull()) && !jsonObj.get("collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("dataEncoding") != null && !jsonObj.get("dataEncoding").isJsonNull()) && !jsonObj.get("dataEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataEncoding").toString()));
      }
      // validate the optional field `dataEncoding`
      if (jsonObj.get("dataEncoding") != null && !jsonObj.get("dataEncoding").isJsonNull()) {
        DataEncodingEnum.validateJsonElement(jsonObj.get("dataEncoding"));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("googleDriveFolder") != null && !jsonObj.get("googleDriveFolder").isJsonNull()) && !jsonObj.get("googleDriveFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleDriveFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleDriveFolder").toString()));
      }
      // validate the required field `privacy`
      ScorePrivacy.validateJsonElement(jsonObj.get("privacy"));
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ScoreSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreCreation>() {
           @Override
           public void write(JsonWriter out, ScoreCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreCreation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreCreation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreCreation
   * @throws IOException if the JSON string is invalid with respect to ScoreCreation
   */
  public static ScoreCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreCreation.class);
  }

  /**
   * Convert an instance of ScoreCreation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

