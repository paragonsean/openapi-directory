/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Clever.com section-related information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClassDetailsClever {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  /**
   * Normalized subject of the course
   */
  @JsonAdapter(SubjectEnum.Adapter.class)
  public enum SubjectEnum {
    ENGLISH_LANGUAGE_ARTS("english/language arts"),
    
    MATH("math"),
    
    SCIENCE("science"),
    
    SOCIAL_STUDIES("social studies"),
    
    LANGUAGE("language"),
    
    HOMEROOM_ADVISORY("homeroom/advisory"),
    
    INTERVENTIONS_ONLINE_LEARNING("interventions/online learning"),
    
    TECHNOLOGY_AND_ENGINEERING("technology and engineering"),
    
    PE_AND_HEALTH("PE and health"),
    
    ARTS_AND_MUSIC("arts and music"),
    
    OTHER("other");

    private String value;

    SubjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubjectEnum fromValue(String value) {
      for (SubjectEnum b : SubjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubjectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubjectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private SubjectEnum subject;

  public static final String SERIALIZED_NAME_TERM_END_DATE = "termEndDate";
  @SerializedName(SERIALIZED_NAME_TERM_END_DATE)
  private OffsetDateTime termEndDate;

  public static final String SERIALIZED_NAME_TERM_NAME = "termName";
  @SerializedName(SERIALIZED_NAME_TERM_NAME)
  private String termName;

  public static final String SERIALIZED_NAME_TERM_START_DATE = "termStartDate";
  @SerializedName(SERIALIZED_NAME_TERM_START_DATE)
  private OffsetDateTime termStartDate;

  public ClassDetailsClever() {
  }

  public ClassDetailsClever creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation date of the section on clever
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ClassDetailsClever id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Clever section unique identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ClassDetailsClever modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * The last modification date of the section on clever
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public ClassDetailsClever subject(SubjectEnum subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Normalized subject of the course
   * @return subject
   */
  @javax.annotation.Nullable
  public SubjectEnum getSubject() {
    return subject;
  }

  public void setSubject(SubjectEnum subject) {
    this.subject = subject;
  }


  public ClassDetailsClever termEndDate(OffsetDateTime termEndDate) {
    this.termEndDate = termEndDate;
    return this;
  }

  /**
   * End date of the term
   * @return termEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTermEndDate() {
    return termEndDate;
  }

  public void setTermEndDate(OffsetDateTime termEndDate) {
    this.termEndDate = termEndDate;
  }


  public ClassDetailsClever termName(String termName) {
    this.termName = termName;
    return this;
  }

  /**
   * Name of the term when this course happens
   * @return termName
   */
  @javax.annotation.Nullable
  public String getTermName() {
    return termName;
  }

  public void setTermName(String termName) {
    this.termName = termName;
  }


  public ClassDetailsClever termStartDate(OffsetDateTime termStartDate) {
    this.termStartDate = termStartDate;
    return this;
  }

  /**
   * Beginning date of the term
   * @return termStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTermStartDate() {
    return termStartDate;
  }

  public void setTermStartDate(OffsetDateTime termStartDate) {
    this.termStartDate = termStartDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassDetailsClever classDetailsClever = (ClassDetailsClever) o;
    return Objects.equals(this.creationDate, classDetailsClever.creationDate) &&
        Objects.equals(this.id, classDetailsClever.id) &&
        Objects.equals(this.modificationDate, classDetailsClever.modificationDate) &&
        Objects.equals(this.subject, classDetailsClever.subject) &&
        Objects.equals(this.termEndDate, classDetailsClever.termEndDate) &&
        Objects.equals(this.termName, classDetailsClever.termName) &&
        Objects.equals(this.termStartDate, classDetailsClever.termStartDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, id, modificationDate, subject, termEndDate, termName, termStartDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassDetailsClever {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    termEndDate: ").append(toIndentedString(termEndDate)).append("\n");
    sb.append("    termName: ").append(toIndentedString(termName)).append("\n");
    sb.append("    termStartDate: ").append(toIndentedString(termStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("id");
    openapiFields.add("modificationDate");
    openapiFields.add("subject");
    openapiFields.add("termEndDate");
    openapiFields.add("termName");
    openapiFields.add("termStartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassDetailsClever
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassDetailsClever.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassDetailsClever is not found in the empty JSON string", ClassDetailsClever.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassDetailsClever.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassDetailsClever` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        SubjectEnum.validateJsonElement(jsonObj.get("subject"));
      }
      if ((jsonObj.get("termName") != null && !jsonObj.get("termName").isJsonNull()) && !jsonObj.get("termName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassDetailsClever.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassDetailsClever' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassDetailsClever> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassDetailsClever.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassDetailsClever>() {
           @Override
           public void write(JsonWriter out, ClassDetailsClever value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassDetailsClever read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassDetailsClever given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassDetailsClever
   * @throws IOException if the JSON string is invalid with respect to ClassDetailsClever
   */
  public static ClassDetailsClever fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassDetailsClever.class);
  }

  /**
   * Convert an instance of ClassDetailsClever to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

