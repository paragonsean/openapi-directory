/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.AssignmentCopy;
import org.openapitools.client.model.AssignmentCreation;
import org.openapitools.client.model.AssignmentSubmission;
import org.openapitools.client.model.AssignmentSubmissionComment;
import org.openapitools.client.model.AssignmentSubmissionCommentCreation;
import org.openapitools.client.model.AssignmentSubmissionHistory;
import org.openapitools.client.model.AssignmentSubmissionUpdate;
import org.openapitools.client.model.ClassCreation;
import org.openapitools.client.model.ClassDetails;
import org.openapitools.client.model.ClassUpdate;
import java.io.File;
import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.ScoreDetails;
import org.openapitools.client.model.ScoreFork;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClassApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClassApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClassApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateClass
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateClassCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/activate"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateClassValidateBeforeCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling activateClass(Async)");
        }

        return activateClassCall(propertyClass, _callback);

    }

    /**
     * Activate the class
     * Mark the class as &#x60;active&#x60;. This is mainly used for classes synchronized from Clever that are initially with an &#x60;inactive&#x60; state and hidden in the UI. 
     * @param propertyClass Unique identifier of the class (required)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails activateClass(String propertyClass) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = activateClassWithHttpInfo(propertyClass);
        return localVarResp.getData();
    }

    /**
     * Activate the class
     * Mark the class as &#x60;active&#x60;. This is mainly used for classes synchronized from Clever that are initially with an &#x60;inactive&#x60; state and hidden in the UI. 
     * @param propertyClass Unique identifier of the class (required)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> activateClassWithHttpInfo(String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = activateClassValidateBeforeCall(propertyClass, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate the class (asynchronously)
     * Mark the class as &#x60;active&#x60;. This is mainly used for classes synchronized from Clever that are initially with an &#x60;inactive&#x60; state and hidden in the UI. 
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateClassAsync(String propertyClass, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateClassValidateBeforeCall(propertyClass, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addClassUser
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been added to the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClassUserCall(String propertyClass, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/users/{user}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClassUserValidateBeforeCall(String propertyClass, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling addClassUser(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling addClassUser(Async)");
        }

        return addClassUserCall(propertyClass, user, _callback);

    }

    /**
     * Add a user to the class
     * This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been added to the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void addClassUser(String propertyClass, String user) throws ApiException {
        addClassUserWithHttpInfo(propertyClass, user);
    }

    /**
     * Add a user to the class
     * This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been added to the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addClassUserWithHttpInfo(String propertyClass, String user) throws ApiException {
        okhttp3.Call localVarCall = addClassUserValidateBeforeCall(propertyClass, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a user to the class (asynchronously)
     * This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been added to the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClassUserAsync(String propertyClass, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClassUserValidateBeforeCall(propertyClass, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for archiveAssignment
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveAssignmentCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/archive"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveAssignmentValidateBeforeCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling archiveAssignment(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling archiveAssignment(Async)");
        }

        return archiveAssignmentCall(propertyClass, assignment, _callback);

    }

    /**
     * Archive the assignment
     * Archive the assignment 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment archiveAssignment(String propertyClass, String assignment) throws ApiException {
        ApiResponse<Assignment> localVarResp = archiveAssignmentWithHttpInfo(propertyClass, assignment);
        return localVarResp.getData();
    }

    /**
     * Archive the assignment
     * Archive the assignment 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> archiveAssignmentWithHttpInfo(String propertyClass, String assignment) throws ApiException {
        okhttp3.Call localVarCall = archiveAssignmentValidateBeforeCall(propertyClass, assignment, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archive the assignment (asynchronously)
     * Archive the assignment 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveAssignmentAsync(String propertyClass, String assignment, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveAssignmentValidateBeforeCall(propertyClass, assignment, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for archiveClass
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveClassCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/archive"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveClassValidateBeforeCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling archiveClass(Async)");
        }

        return archiveClassCall(propertyClass, _callback);

    }

    /**
     * Archive the class
     * Mark the class as &#x60;archived&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param propertyClass Unique identifier of the class (required)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails archiveClass(String propertyClass) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = archiveClassWithHttpInfo(propertyClass);
        return localVarResp.getData();
    }

    /**
     * Archive the class
     * Mark the class as &#x60;archived&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param propertyClass Unique identifier of the class (required)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> archiveClassWithHttpInfo(String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = archiveClassValidateBeforeCall(propertyClass, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archive the class (asynchronously)
     * Mark the class as &#x60;archived&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveClassAsync(String propertyClass, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveClassValidateBeforeCall(propertyClass, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyAssignment
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created assingment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyAssignmentCall(String propertyClass, String assignment, AssignmentCopy body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/copy"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyAssignmentValidateBeforeCall(String propertyClass, String assignment, AssignmentCopy body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling copyAssignment(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling copyAssignment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling copyAssignment(Async)");
        }

        return copyAssignmentCall(propertyClass, assignment, body, _callback);

    }

    /**
     * Copy an assignment
     * Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created assingment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment copyAssignment(String propertyClass, String assignment, AssignmentCopy body) throws ApiException {
        ApiResponse<Assignment> localVarResp = copyAssignmentWithHttpInfo(propertyClass, assignment, body);
        return localVarResp.getData();
    }

    /**
     * Copy an assignment
     * Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created assingment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> copyAssignmentWithHttpInfo(String propertyClass, String assignment, AssignmentCopy body) throws ApiException {
        okhttp3.Call localVarCall = copyAssignmentValidateBeforeCall(propertyClass, assignment, body, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy an assignment (asynchronously)
     * Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new created assingment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyAssignmentAsync(String propertyClass, String assignment, AssignmentCopy body, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyAssignmentValidateBeforeCall(propertyClass, assignment, body, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAssignment
     * @param propertyClass Unique identifier of the class (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssignmentCall(String propertyClass, AssignmentCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssignmentValidateBeforeCall(String propertyClass, AssignmentCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling createAssignment(Async)");
        }

        return createAssignmentCall(propertyClass, body, _callback);

    }

    /**
     * Assignment creation
     * Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
     * @param propertyClass Unique identifier of the class (required)
     * @param body  (optional)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment createAssignment(String propertyClass, AssignmentCreation body) throws ApiException {
        ApiResponse<Assignment> localVarResp = createAssignmentWithHttpInfo(propertyClass, body);
        return localVarResp.getData();
    }

    /**
     * Assignment creation
     * Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
     * @param propertyClass Unique identifier of the class (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> createAssignmentWithHttpInfo(String propertyClass, AssignmentCreation body) throws ApiException {
        okhttp3.Call localVarCall = createAssignmentValidateBeforeCall(propertyClass, body, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assignment creation (asynchronously)
     * Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
     * @param propertyClass Unique identifier of the class (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssignmentAsync(String propertyClass, AssignmentCreation body, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssignmentValidateBeforeCall(propertyClass, body, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createClass
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassCall(ClassCreation body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClassValidateBeforeCall(ClassCreation body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createClass(Async)");
        }

        return createClassCall(body, _callback);

    }

    /**
     * Create a new class
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using &#x60;PUT /classes/{class}/users/{user}&#x60;, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using &#x60;POST /classes/enroll/{enrollmentCode}&#x60; and the &#x60;enrollmentCode&#x60; returned in the &#x60;ClassDetails&#x60; response. 
     * @param body  (required)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails createClass(ClassCreation body) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = createClassWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new class
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using &#x60;PUT /classes/{class}/users/{user}&#x60;, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using &#x60;POST /classes/enroll/{enrollmentCode}&#x60; and the &#x60;enrollmentCode&#x60; returned in the &#x60;ClassDetails&#x60; response. 
     * @param body  (required)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> createClassWithHttpInfo(ClassCreation body) throws ApiException {
        okhttp3.Call localVarCall = createClassValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new class (asynchronously)
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using &#x60;PUT /classes/{class}/users/{user}&#x60;, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using &#x60;POST /classes/enroll/{enrollmentCode}&#x60; and the &#x60;enrollmentCode&#x60; returned in the &#x60;ClassDetails&#x60; response. 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassAsync(ClassCreation body, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClassValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubmission
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubmissionCall(String propertyClass, String assignment, AssignmentSubmissionUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubmissionValidateBeforeCall(String propertyClass, String assignment, AssignmentSubmissionUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling createSubmission(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling createSubmission(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSubmission(Async)");
        }

        return createSubmissionCall(propertyClass, assignment, body, _callback);

    }

    /**
     * Create or edit a submission
     * Use this method as a student to create, update and submit a submission related to an assignment. Students can only set &#x60;attachments&#x60; and &#x60;submit&#x60;. Teachers can use &#x60;PUT /classes/{class}/assignments/{assignment}/submissions/{submission}&#x60; to update a submission by id. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @return AssignmentSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AssignmentSubmission createSubmission(String propertyClass, String assignment, AssignmentSubmissionUpdate body) throws ApiException {
        ApiResponse<AssignmentSubmission> localVarResp = createSubmissionWithHttpInfo(propertyClass, assignment, body);
        return localVarResp.getData();
    }

    /**
     * Create or edit a submission
     * Use this method as a student to create, update and submit a submission related to an assignment. Students can only set &#x60;attachments&#x60; and &#x60;submit&#x60;. Teachers can use &#x60;PUT /classes/{class}/assignments/{assignment}/submissions/{submission}&#x60; to update a submission by id. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @return ApiResponse&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignmentSubmission> createSubmissionWithHttpInfo(String propertyClass, String assignment, AssignmentSubmissionUpdate body) throws ApiException {
        okhttp3.Call localVarCall = createSubmissionValidateBeforeCall(propertyClass, assignment, body, null);
        Type localVarReturnType = new TypeToken<AssignmentSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or edit a submission (asynchronously)
     * Use this method as a student to create, update and submit a submission related to an assignment. Students can only set &#x60;attachments&#x60; and &#x60;submit&#x60;. Teachers can use &#x60;PUT /classes/{class}/assignments/{assignment}/submissions/{submission}&#x60; to update a submission by id. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubmissionAsync(String propertyClass, String assignment, AssignmentSubmissionUpdate body, final ApiCallback<AssignmentSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubmissionValidateBeforeCall(propertyClass, assignment, body, _callback);
        Type localVarReturnType = new TypeToken<AssignmentSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteClassUser
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been removed from the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClassUserCall(String propertyClass, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/users/{user}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClassUserValidateBeforeCall(String propertyClass, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling deleteClassUser(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling deleteClassUser(Async)");
        }

        return deleteClassUserCall(propertyClass, user, _callback);

    }

    /**
     * Remove a user from the class
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been removed from the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteClassUser(String propertyClass, String user) throws ApiException {
        deleteClassUserWithHttpInfo(propertyClass, user);
    }

    /**
     * Remove a user from the class
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been removed from the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteClassUserWithHttpInfo(String propertyClass, String user) throws ApiException {
        okhttp3.Call localVarCall = deleteClassUserValidateBeforeCall(propertyClass, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from the class (asynchronously)
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been removed from the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClassUserAsync(String propertyClass, String user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClassUserValidateBeforeCall(propertyClass, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubmission
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The submission has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubmissionCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubmissionValidateBeforeCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling deleteSubmission(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling deleteSubmission(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling deleteSubmission(Async)");
        }

        return deleteSubmissionCall(propertyClass, assignment, submission, _callback);

    }

    /**
     * Delete a submission
     * Use this method as a teacher to delete a submission and allow student to start over the assignment 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The submission has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSubmission(String propertyClass, String assignment, String submission) throws ApiException {
        deleteSubmissionWithHttpInfo(propertyClass, assignment, submission);
    }

    /**
     * Delete a submission
     * Use this method as a teacher to delete a submission and allow student to start over the assignment 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The submission has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSubmissionWithHttpInfo(String propertyClass, String assignment, String submission) throws ApiException {
        okhttp3.Call localVarCall = deleteSubmissionValidateBeforeCall(propertyClass, assignment, submission, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a submission (asynchronously)
     * Use this method as a teacher to delete a submission and allow student to start over the assignment 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The submission has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubmissionAsync(String propertyClass, String assignment, String submission, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubmissionValidateBeforeCall(propertyClass, assignment, submission, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubmissionComment
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubmissionCommentCall(String propertyClass, String assignment, String submission, String comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubmissionCommentValidateBeforeCall(String propertyClass, String assignment, String submission, String comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling deleteSubmissionComment(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling deleteSubmissionComment(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling deleteSubmissionComment(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling deleteSubmissionComment(Async)");
        }

        return deleteSubmissionCommentCall(propertyClass, assignment, submission, comment, _callback);

    }

    /**
     * Delete a feedback comment to a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSubmissionComment(String propertyClass, String assignment, String submission, String comment) throws ApiException {
        deleteSubmissionCommentWithHttpInfo(propertyClass, assignment, submission, comment);
    }

    /**
     * Delete a feedback comment to a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSubmissionCommentWithHttpInfo(String propertyClass, String assignment, String submission, String comment) throws ApiException {
        okhttp3.Call localVarCall = deleteSubmissionCommentValidateBeforeCall(propertyClass, assignment, submission, comment, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a feedback comment to a submission (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The comment has been deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubmissionCommentAsync(String propertyClass, String assignment, String submission, String comment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubmissionCommentValidateBeforeCall(propertyClass, assignment, submission, comment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editSubmission
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editSubmissionCall(String propertyClass, String assignment, String submission, AssignmentSubmissionUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editSubmissionValidateBeforeCall(String propertyClass, String assignment, String submission, AssignmentSubmissionUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling editSubmission(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling editSubmission(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling editSubmission(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling editSubmission(Async)");
        }

        return editSubmissionCall(propertyClass, assignment, submission, body, _callback);

    }

    /**
     * Edit a submission
     * Use this method as a teacher to update the different submission and give feedback. Teachers can only set &#x60;return&#x60;, &#x60;draftGrade&#x60; and &#x60;grade&#x60; 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param body  (required)
     * @return AssignmentSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AssignmentSubmission editSubmission(String propertyClass, String assignment, String submission, AssignmentSubmissionUpdate body) throws ApiException {
        ApiResponse<AssignmentSubmission> localVarResp = editSubmissionWithHttpInfo(propertyClass, assignment, submission, body);
        return localVarResp.getData();
    }

    /**
     * Edit a submission
     * Use this method as a teacher to update the different submission and give feedback. Teachers can only set &#x60;return&#x60;, &#x60;draftGrade&#x60; and &#x60;grade&#x60; 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param body  (required)
     * @return ApiResponse&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignmentSubmission> editSubmissionWithHttpInfo(String propertyClass, String assignment, String submission, AssignmentSubmissionUpdate body) throws ApiException {
        okhttp3.Call localVarCall = editSubmissionValidateBeforeCall(propertyClass, assignment, submission, body, null);
        Type localVarReturnType = new TypeToken<AssignmentSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a submission (asynchronously)
     * Use this method as a teacher to update the different submission and give feedback. Teachers can only set &#x60;return&#x60;, &#x60;draftGrade&#x60; and &#x60;grade&#x60; 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editSubmissionAsync(String propertyClass, String assignment, String submission, AssignmentSubmissionUpdate body, final ApiCallback<AssignmentSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = editSubmissionValidateBeforeCall(propertyClass, assignment, submission, body, _callback);
        Type localVarReturnType = new TypeToken<AssignmentSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollClass
     * @param enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60;  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollClassCall(String enrollmentCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/enroll/{enrollmentCode}"
            .replace("{" + "enrollmentCode" + "}", localVarApiClient.escapeString(enrollmentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollClassValidateBeforeCall(String enrollmentCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enrollmentCode' is set
        if (enrollmentCode == null) {
            throw new ApiException("Missing the required parameter 'enrollmentCode' when calling enrollClass(Async)");
        }

        return enrollClassCall(enrollmentCode, _callback);

    }

    /**
     * Join a class
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the &#x60;ClassDetails&#x60; returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
     * @param enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60;  (required)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails enrollClass(String enrollmentCode) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = enrollClassWithHttpInfo(enrollmentCode);
        return localVarResp.getData();
    }

    /**
     * Join a class
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the &#x60;ClassDetails&#x60; returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
     * @param enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60;  (required)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> enrollClassWithHttpInfo(String enrollmentCode) throws ApiException {
        okhttp3.Call localVarCall = enrollClassValidateBeforeCall(enrollmentCode, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join a class (asynchronously)
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the &#x60;ClassDetails&#x60; returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
     * @param enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60;  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollClassAsync(String enrollmentCode, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollClassValidateBeforeCall(enrollmentCode, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSubmissionsReviewsAsCsv
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSubmissionsReviewsAsCsvCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/csv"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSubmissionsReviewsAsCsvValidateBeforeCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling exportSubmissionsReviewsAsCsv(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling exportSubmissionsReviewsAsCsv(Async)");
        }

        return exportSubmissionsReviewsAsCsvCall(propertyClass, assignment, _callback);

    }

    /**
     * CSV Grades exports
     * Export list of submissions grades to a CSV file
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public File exportSubmissionsReviewsAsCsv(String propertyClass, String assignment) throws ApiException {
        ApiResponse<File> localVarResp = exportSubmissionsReviewsAsCsvWithHttpInfo(propertyClass, assignment);
        return localVarResp.getData();
    }

    /**
     * CSV Grades exports
     * Export list of submissions grades to a CSV file
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportSubmissionsReviewsAsCsvWithHttpInfo(String propertyClass, String assignment) throws ApiException {
        okhttp3.Call localVarCall = exportSubmissionsReviewsAsCsvValidateBeforeCall(propertyClass, assignment, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CSV Grades exports (asynchronously)
     * Export list of submissions grades to a CSV file
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSubmissionsReviewsAsCsvAsync(String propertyClass, String assignment, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSubmissionsReviewsAsCsvValidateBeforeCall(propertyClass, assignment, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportSubmissionsReviewsAsExcel
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSubmissionsReviewsAsExcelCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/excel"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportSubmissionsReviewsAsExcelValidateBeforeCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling exportSubmissionsReviewsAsExcel(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling exportSubmissionsReviewsAsExcel(Async)");
        }

        return exportSubmissionsReviewsAsExcelCall(propertyClass, assignment, _callback);

    }

    /**
     * Excel Grades exports
     * Export list of submissions grades to an Excel file
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public File exportSubmissionsReviewsAsExcel(String propertyClass, String assignment) throws ApiException {
        ApiResponse<File> localVarResp = exportSubmissionsReviewsAsExcelWithHttpInfo(propertyClass, assignment);
        return localVarResp.getData();
    }

    /**
     * Excel Grades exports
     * Export list of submissions grades to an Excel file
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportSubmissionsReviewsAsExcelWithHttpInfo(String propertyClass, String assignment) throws ApiException {
        okhttp3.Call localVarCall = exportSubmissionsReviewsAsExcelValidateBeforeCall(propertyClass, assignment, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Excel Grades exports (asynchronously)
     * Export list of submissions grades to an Excel file
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportSubmissionsReviewsAsExcelAsync(String propertyClass, String assignment, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportSubmissionsReviewsAsExcelValidateBeforeCall(propertyClass, assignment, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forkScore_0
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkScore_0Call(String score, ScoreFork body, String sharingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scores/{score}/fork"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sharingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sharingKey", sharingKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forkScore_0ValidateBeforeCall(String score, ScoreFork body, String sharingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling forkScore_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling forkScore_0(Async)");
        }

        return forkScore_0Call(score, body, sharingKey, _callback);

    }

    /**
     * Fork a score
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ScoreDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ScoreDetails forkScore_0(String score, ScoreFork body, String sharingKey) throws ApiException {
        ApiResponse<ScoreDetails> localVarResp = forkScore_0WithHttpInfo(score, body, sharingKey);
        return localVarResp.getData();
    }

    /**
     * Fork a score
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @return ApiResponse&lt;ScoreDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScoreDetails> forkScore_0WithHttpInfo(String score, ScoreFork body, String sharingKey) throws ApiException {
        okhttp3.Call localVarCall = forkScore_0ValidateBeforeCall(score, body, sharingKey, null);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fork a score (asynchronously)
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param body  (required)
     * @param sharingKey This sharing key must be specified to access to a score or collection with a &#x60;privacy&#x60; mode set to &#x60;privateLink&#x60; and the current user is not a collaborator of the document.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Score details </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Account overquota </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this score </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Score not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forkScore_0Async(String score, ScoreFork body, String sharingKey, final ApiCallback<ScoreDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = forkScore_0ValidateBeforeCall(score, body, sharingKey, _callback);
        Type localVarReturnType = new TypeToken<ScoreDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClass
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassValidateBeforeCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getClass(Async)");
        }

        return getClassCall(propertyClass, _callback);

    }

    /**
     * Get the details of a single class
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails getClass(String propertyClass) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = getClassWithHttpInfo(propertyClass);
        return localVarResp.getData();
    }

    /**
     * Get the details of a single class
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> getClassWithHttpInfo(String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = getClassValidateBeforeCall(propertyClass, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a single class (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassAsync(String propertyClass, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassValidateBeforeCall(propertyClass, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreSubmissions_0
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreSubmissions_0Call(String score, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scores/{score}/submissions"
            .replace("{" + "score" + "}", localVarApiClient.escapeString(score.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreSubmissions_0ValidateBeforeCall(String score, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'score' is set
        if (score == null) {
            throw new ApiException("Missing the required parameter 'score' when calling getScoreSubmissions_0(Async)");
        }

        return getScoreSubmissions_0Call(score, _callback);

    }

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @return List&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignmentSubmission> getScoreSubmissions_0(String score) throws ApiException {
        ApiResponse<List<AssignmentSubmission>> localVarResp = getScoreSubmissions_0WithHttpInfo(score);
        return localVarResp.getData();
    }

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @return ApiResponse&lt;List&lt;AssignmentSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignmentSubmission>> getScoreSubmissions_0WithHttpInfo(String score) throws ApiException {
        okhttp3.Call localVarCall = getScoreSubmissions_0ValidateBeforeCall(score, null);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List submissions related to the score (asynchronously)
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;).  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreSubmissions_0Async(String score, final ApiCallback<List<AssignmentSubmission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreSubmissions_0ValidateBeforeCall(score, _callback);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmission
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmissionValidateBeforeCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getSubmission(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling getSubmission(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling getSubmission(Async)");
        }

        return getSubmissionCall(propertyClass, assignment, submission, _callback);

    }

    /**
     * Get a student submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return AssignmentSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AssignmentSubmission getSubmission(String propertyClass, String assignment, String submission) throws ApiException {
        ApiResponse<AssignmentSubmission> localVarResp = getSubmissionWithHttpInfo(propertyClass, assignment, submission);
        return localVarResp.getData();
    }

    /**
     * Get a student submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return ApiResponse&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignmentSubmission> getSubmissionWithHttpInfo(String propertyClass, String assignment, String submission) throws ApiException {
        okhttp3.Call localVarCall = getSubmissionValidateBeforeCall(propertyClass, assignment, submission, null);
        Type localVarReturnType = new TypeToken<AssignmentSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a student submission (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A submission </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionAsync(String propertyClass, String assignment, String submission, final ApiCallback<AssignmentSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmissionValidateBeforeCall(propertyClass, assignment, submission, _callback);
        Type localVarReturnType = new TypeToken<AssignmentSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmissionComments
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionCommentsCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}/comments"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmissionCommentsValidateBeforeCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getSubmissionComments(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling getSubmissionComments(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling getSubmissionComments(Async)");
        }

        return getSubmissionCommentsCall(propertyClass, assignment, submission, _callback);

    }

    /**
     * List the feedback comments of a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return List&lt;AssignmentSubmissionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignmentSubmissionComment> getSubmissionComments(String propertyClass, String assignment, String submission) throws ApiException {
        ApiResponse<List<AssignmentSubmissionComment>> localVarResp = getSubmissionCommentsWithHttpInfo(propertyClass, assignment, submission);
        return localVarResp.getData();
    }

    /**
     * List the feedback comments of a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return ApiResponse&lt;List&lt;AssignmentSubmissionComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignmentSubmissionComment>> getSubmissionCommentsWithHttpInfo(String propertyClass, String assignment, String submission) throws ApiException {
        okhttp3.Call localVarCall = getSubmissionCommentsValidateBeforeCall(propertyClass, assignment, submission, null);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmissionComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the feedback comments of a submission (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comments of the score </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionCommentsAsync(String propertyClass, String assignment, String submission, final ApiCallback<List<AssignmentSubmissionComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmissionCommentsValidateBeforeCall(propertyClass, assignment, submission, _callback);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmissionComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmissionHistory
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The history of the submission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionHistoryCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}/history"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmissionHistoryValidateBeforeCall(String propertyClass, String assignment, String submission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getSubmissionHistory(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling getSubmissionHistory(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling getSubmissionHistory(Async)");
        }

        return getSubmissionHistoryCall(propertyClass, assignment, submission, _callback);

    }

    /**
     * Get the history of the submission
     * For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return List&lt;AssignmentSubmissionHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The history of the submission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignmentSubmissionHistory> getSubmissionHistory(String propertyClass, String assignment, String submission) throws ApiException {
        ApiResponse<List<AssignmentSubmissionHistory>> localVarResp = getSubmissionHistoryWithHttpInfo(propertyClass, assignment, submission);
        return localVarResp.getData();
    }

    /**
     * Get the history of the submission
     * For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @return ApiResponse&lt;List&lt;AssignmentSubmissionHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The history of the submission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignmentSubmissionHistory>> getSubmissionHistoryWithHttpInfo(String propertyClass, String assignment, String submission) throws ApiException {
        okhttp3.Call localVarCall = getSubmissionHistoryValidateBeforeCall(propertyClass, assignment, submission, null);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmissionHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the history of the submission (asynchronously)
     * For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The history of the submission </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionHistoryAsync(String propertyClass, String assignment, String submission, final ApiCallback<List<AssignmentSubmissionHistory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmissionHistoryValidateBeforeCall(propertyClass, assignment, submission, _callback);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmissionHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubmissions
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionsCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubmissionsValidateBeforeCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getSubmissions(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling getSubmissions(Async)");
        }

        return getSubmissionsCall(propertyClass, assignment, _callback);

    }

    /**
     * List the students&#39; submissions
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return List&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignmentSubmission> getSubmissions(String propertyClass, String assignment) throws ApiException {
        ApiResponse<List<AssignmentSubmission>> localVarResp = getSubmissionsWithHttpInfo(propertyClass, assignment);
        return localVarResp.getData();
    }

    /**
     * List the students&#39; submissions
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return ApiResponse&lt;List&lt;AssignmentSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignmentSubmission>> getSubmissionsWithHttpInfo(String propertyClass, String assignment) throws ApiException {
        okhttp3.Call localVarCall = getSubmissionsValidateBeforeCall(propertyClass, assignment, null);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the students&#39; submissions (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubmissionsAsync(String propertyClass, String assignment, final ApiCallback<List<AssignmentSubmission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubmissionsValidateBeforeCall(propertyClass, assignment, _callback);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAssignments
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assignments for the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssignmentsCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignmentsValidateBeforeCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling listAssignments(Async)");
        }

        return listAssignmentsCall(propertyClass, _callback);

    }

    /**
     * Assignments listing
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @return List&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assignments for the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Assignment> listAssignments(String propertyClass) throws ApiException {
        ApiResponse<List<Assignment>> localVarResp = listAssignmentsWithHttpInfo(propertyClass);
        return localVarResp.getData();
    }

    /**
     * Assignments listing
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @return ApiResponse&lt;List&lt;Assignment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assignments for the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Assignment>> listAssignmentsWithHttpInfo(String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = listAssignmentsValidateBeforeCall(propertyClass, null);
        Type localVarReturnType = new TypeToken<List<Assignment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assignments listing (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of assignments for the class </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssignmentsAsync(String propertyClass, final ApiCallback<List<Assignment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignmentsValidateBeforeCall(propertyClass, _callback);
        Type localVarReturnType = new TypeToken<List<Assignment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listClassStudentSubmissions
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listClassStudentSubmissionsCall(String propertyClass, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/students/{user}/submissions"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClassStudentSubmissionsValidateBeforeCall(String propertyClass, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling listClassStudentSubmissions(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling listClassStudentSubmissions(Async)");
        }

        return listClassStudentSubmissionsCall(propertyClass, user, _callback);

    }

    /**
     * List the submissions for a student
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @return List&lt;AssignmentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignmentSubmission> listClassStudentSubmissions(String propertyClass, String user) throws ApiException {
        ApiResponse<List<AssignmentSubmission>> localVarResp = listClassStudentSubmissionsWithHttpInfo(propertyClass, user);
        return localVarResp.getData();
    }

    /**
     * List the submissions for a student
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @return ApiResponse&lt;List&lt;AssignmentSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignmentSubmission>> listClassStudentSubmissionsWithHttpInfo(String propertyClass, String user) throws ApiException {
        okhttp3.Call localVarCall = listClassStudentSubmissionsValidateBeforeCall(propertyClass, user, null);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the submissions for a student (asynchronously)
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class 
     * @param propertyClass Unique identifier of the class (required)
     * @param user Unique identifier of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of submissions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listClassStudentSubmissionsAsync(String propertyClass, String user, final ApiCallback<List<AssignmentSubmission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClassStudentSubmissionsValidateBeforeCall(propertyClass, user, _callback);
        Type localVarReturnType = new TypeToken<List<AssignmentSubmission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listClasses
     * @param state Filter the classes by state (optional, default to active)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of classes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listClassesCall(String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClassesValidateBeforeCall(String state, final ApiCallback _callback) throws ApiException {
        return listClassesCall(state, _callback);

    }

    /**
     * List the classes available for the current user
     * 
     * @param state Filter the classes by state (optional, default to active)
     * @return List&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of classes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ClassDetails> listClasses(String state) throws ApiException {
        ApiResponse<List<ClassDetails>> localVarResp = listClassesWithHttpInfo(state);
        return localVarResp.getData();
    }

    /**
     * List the classes available for the current user
     * 
     * @param state Filter the classes by state (optional, default to active)
     * @return ApiResponse&lt;List&lt;ClassDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of classes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClassDetails>> listClassesWithHttpInfo(String state) throws ApiException {
        okhttp3.Call localVarCall = listClassesValidateBeforeCall(state, null);
        Type localVarReturnType = new TypeToken<List<ClassDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the classes available for the current user (asynchronously)
     * 
     * @param state Filter the classes by state (optional, default to active)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of classes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listClassesAsync(String state, final ApiCallback<List<ClassDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClassesValidateBeforeCall(state, _callback);
        Type localVarReturnType = new TypeToken<List<ClassDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSubmissionComment
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSubmissionCommentCall(String propertyClass, String assignment, String submission, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignmentSubmissionCommentCreation;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}/comments"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSubmissionCommentValidateBeforeCall(String propertyClass, String assignment, String submission, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling postSubmissionComment(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling postSubmissionComment(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling postSubmissionComment(Async)");
        }

        // verify the required parameter 'assignmentSubmissionCommentCreation' is set
        if (assignmentSubmissionCommentCreation == null) {
            throw new ApiException("Missing the required parameter 'assignmentSubmissionCommentCreation' when calling postSubmissionComment(Async)");
        }

        return postSubmissionCommentCall(propertyClass, assignment, submission, assignmentSubmissionCommentCreation, _callback);

    }

    /**
     * Add a feedback comment to a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @return AssignmentSubmissionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AssignmentSubmissionComment postSubmissionComment(String propertyClass, String assignment, String submission, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation) throws ApiException {
        ApiResponse<AssignmentSubmissionComment> localVarResp = postSubmissionCommentWithHttpInfo(propertyClass, assignment, submission, assignmentSubmissionCommentCreation);
        return localVarResp.getData();
    }

    /**
     * Add a feedback comment to a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @return ApiResponse&lt;AssignmentSubmissionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignmentSubmissionComment> postSubmissionCommentWithHttpInfo(String propertyClass, String assignment, String submission, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation) throws ApiException {
        okhttp3.Call localVarCall = postSubmissionCommentValidateBeforeCall(propertyClass, assignment, submission, assignmentSubmissionCommentCreation, null);
        Type localVarReturnType = new TypeToken<AssignmentSubmissionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a feedback comment to a submission (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSubmissionCommentAsync(String propertyClass, String assignment, String submission, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation, final ApiCallback<AssignmentSubmissionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSubmissionCommentValidateBeforeCall(propertyClass, assignment, submission, assignmentSubmissionCommentCreation, _callback);
        Type localVarReturnType = new TypeToken<AssignmentSubmissionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unarchiveAssignment
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unarchiveAssignmentCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/archive"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unarchiveAssignmentValidateBeforeCall(String propertyClass, String assignment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling unarchiveAssignment(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling unarchiveAssignment(Async)");
        }

        return unarchiveAssignmentCall(propertyClass, assignment, _callback);

    }

    /**
     * Unarchive the assignment.
     * Mark the assignment as &#x60;active&#x60;. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return Assignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Assignment unarchiveAssignment(String propertyClass, String assignment) throws ApiException {
        ApiResponse<Assignment> localVarResp = unarchiveAssignmentWithHttpInfo(propertyClass, assignment);
        return localVarResp.getData();
    }

    /**
     * Unarchive the assignment.
     * Mark the assignment as &#x60;active&#x60;. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @return ApiResponse&lt;Assignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assignment> unarchiveAssignmentWithHttpInfo(String propertyClass, String assignment) throws ApiException {
        okhttp3.Call localVarCall = unarchiveAssignmentValidateBeforeCall(propertyClass, assignment, null);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unarchive the assignment. (asynchronously)
     * Mark the assignment as &#x60;active&#x60;. 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The assignment details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unarchiveAssignmentAsync(String propertyClass, String assignment, final ApiCallback<Assignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = unarchiveAssignmentValidateBeforeCall(propertyClass, assignment, _callback);
        Type localVarReturnType = new TypeToken<Assignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unarchiveClass
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unarchiveClassCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{class}/archive"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unarchiveClassValidateBeforeCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling unarchiveClass(Async)");
        }

        return unarchiveClassCall(propertyClass, _callback);

    }

    /**
     * Unarchive the class
     * Mark the class as &#x60;active&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param propertyClass Unique identifier of the class (required)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails unarchiveClass(String propertyClass) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = unarchiveClassWithHttpInfo(propertyClass);
        return localVarResp.getData();
    }

    /**
     * Unarchive the class
     * Mark the class as &#x60;active&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param propertyClass Unique identifier of the class (required)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> unarchiveClassWithHttpInfo(String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = unarchiveClassValidateBeforeCall(propertyClass, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unarchive the class (asynchronously)
     * Mark the class as &#x60;active&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param propertyClass Unique identifier of the class (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unarchiveClassAsync(String propertyClass, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = unarchiveClassValidateBeforeCall(propertyClass, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClass
     * @param propertyClass Unique identifier of the class (required)
     * @param body Details of the Class (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClassCall(String propertyClass, ClassUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/classes/{class}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClassValidateBeforeCall(String propertyClass, ClassUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling updateClass(Async)");
        }

        return updateClassCall(propertyClass, body, _callback);

    }

    /**
     * Update the class
     * Update the meta information of the class 
     * @param propertyClass Unique identifier of the class (required)
     * @param body Details of the Class (optional)
     * @return ClassDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClassDetails updateClass(String propertyClass, ClassUpdate body) throws ApiException {
        ApiResponse<ClassDetails> localVarResp = updateClassWithHttpInfo(propertyClass, body);
        return localVarResp.getData();
    }

    /**
     * Update the class
     * Update the meta information of the class 
     * @param propertyClass Unique identifier of the class (required)
     * @param body Details of the Class (optional)
     * @return ApiResponse&lt;ClassDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassDetails> updateClassWithHttpInfo(String propertyClass, ClassUpdate body) throws ApiException {
        okhttp3.Call localVarCall = updateClassValidateBeforeCall(propertyClass, body, null);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the class (asynchronously)
     * Update the meta information of the class 
     * @param propertyClass Unique identifier of the class (required)
     * @param body Details of the Class (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new class details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClassAsync(String propertyClass, ClassUpdate body, final ApiCallback<ClassDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClassValidateBeforeCall(propertyClass, body, _callback);
        Type localVarReturnType = new TypeToken<ClassDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubmissionComment
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubmissionCommentCall(String propertyClass, String assignment, String submission, String comment, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignmentSubmissionCommentCreation;

        // create path and map variables
        String localVarPath = "/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()))
            .replace("{" + "assignment" + "}", localVarApiClient.escapeString(assignment.toString()))
            .replace("{" + "submission" + "}", localVarApiClient.escapeString(submission.toString()))
            .replace("{" + "comment" + "}", localVarApiClient.escapeString(comment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubmissionCommentValidateBeforeCall(String propertyClass, String assignment, String submission, String comment, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling updateSubmissionComment(Async)");
        }

        // verify the required parameter 'assignment' is set
        if (assignment == null) {
            throw new ApiException("Missing the required parameter 'assignment' when calling updateSubmissionComment(Async)");
        }

        // verify the required parameter 'submission' is set
        if (submission == null) {
            throw new ApiException("Missing the required parameter 'submission' when calling updateSubmissionComment(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling updateSubmissionComment(Async)");
        }

        // verify the required parameter 'assignmentSubmissionCommentCreation' is set
        if (assignmentSubmissionCommentCreation == null) {
            throw new ApiException("Missing the required parameter 'assignmentSubmissionCommentCreation' when calling updateSubmissionComment(Async)");
        }

        return updateSubmissionCommentCall(propertyClass, assignment, submission, comment, assignmentSubmissionCommentCreation, _callback);

    }

    /**
     * Update a feedback comment to a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @return AssignmentSubmissionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AssignmentSubmissionComment updateSubmissionComment(String propertyClass, String assignment, String submission, String comment, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation) throws ApiException {
        ApiResponse<AssignmentSubmissionComment> localVarResp = updateSubmissionCommentWithHttpInfo(propertyClass, assignment, submission, comment, assignmentSubmissionCommentCreation);
        return localVarResp.getData();
    }

    /**
     * Update a feedback comment to a submission
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @return ApiResponse&lt;AssignmentSubmissionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssignmentSubmissionComment> updateSubmissionCommentWithHttpInfo(String propertyClass, String assignment, String submission, String comment, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation) throws ApiException {
        okhttp3.Call localVarCall = updateSubmissionCommentValidateBeforeCall(propertyClass, assignment, submission, comment, assignmentSubmissionCommentCreation, null);
        Type localVarReturnType = new TypeToken<AssignmentSubmissionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a feedback comment to a submission (asynchronously)
     * 
     * @param propertyClass Unique identifier of the class (required)
     * @param assignment Unique identifier of the assignment (required)
     * @param submission Unique identifier of the submission (required)
     * @param comment Unique identifier of the comment (required)
     * @param assignmentSubmissionCommentCreation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The comment </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not granted to access to this submission </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubmissionCommentAsync(String propertyClass, String assignment, String submission, String comment, AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation, final ApiCallback<AssignmentSubmissionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubmissionCommentValidateBeforeCall(propertyClass, assignment, submission, comment, assignmentSubmissionCommentCreation, _callback);
        Type localVarReturnType = new TypeToken<AssignmentSubmissionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
