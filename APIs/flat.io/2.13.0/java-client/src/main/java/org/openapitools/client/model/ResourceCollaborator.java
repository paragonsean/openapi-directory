/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.UserPublic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collaborator of a score. The &#x60;userEmail&#x60; and &#x60;group&#x60; are only available if the requesting user is a collaborator of the related score (in this case these permissions will eventualy not be listed and exposed publicly). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:21.367769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceCollaborator {
  public static final String SERIALIZED_NAME_ACL_ADMIN = "aclAdmin";
  @SerializedName(SERIALIZED_NAME_ACL_ADMIN)
  private Boolean aclAdmin = false;

  public static final String SERIALIZED_NAME_ACL_READ = "aclRead";
  @SerializedName(SERIALIZED_NAME_ACL_READ)
  private Boolean aclRead = false;

  public static final String SERIALIZED_NAME_ACL_WRITE = "aclWrite";
  @SerializedName(SERIALIZED_NAME_ACL_WRITE)
  private Boolean aclWrite = false;

  public static final String SERIALIZED_NAME_IS_COLLABORATOR = "isCollaborator";
  @SerializedName(SERIALIZED_NAME_IS_COLLABORATOR)
  private Boolean isCollaborator = false;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVITED = "invited";
  @SerializedName(SERIALIZED_NAME_INVITED)
  private Boolean invited;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserPublic user;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public ResourceCollaborator() {
  }

  public ResourceCollaborator aclAdmin(Boolean aclAdmin) {
    this.aclAdmin = aclAdmin;
    return this;
  }

  /**
   * &#x60;True&#x60; if the current user can manage the current document (i.e. share, delete)  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the &#x60;capabilities&#x60; property as the end-user to have the complete possibilities with the collection. 
   * @return aclAdmin
   */
  @javax.annotation.Nullable
  public Boolean getAclAdmin() {
    return aclAdmin;
  }

  public void setAclAdmin(Boolean aclAdmin) {
    this.aclAdmin = aclAdmin;
  }


  public ResourceCollaborator aclRead(Boolean aclRead) {
    this.aclRead = aclRead;
    return this;
  }

  /**
   * &#x60;True&#x60; if the current user can read the current document 
   * @return aclRead
   */
  @javax.annotation.Nullable
  public Boolean getAclRead() {
    return aclRead;
  }

  public void setAclRead(Boolean aclRead) {
    this.aclRead = aclRead;
  }


  public ResourceCollaborator aclWrite(Boolean aclWrite) {
    this.aclWrite = aclWrite;
    return this;
  }

  /**
   * &#x60;True&#x60; if the current user can modify the current document.  If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the &#x60;capabilities&#x60; property as the end-user to have the complete possibilities with the collection. 
   * @return aclWrite
   */
  @javax.annotation.Nullable
  public Boolean getAclWrite() {
    return aclWrite;
  }

  public void setAclWrite(Boolean aclWrite) {
    this.aclWrite = aclWrite;
  }


  public ResourceCollaborator isCollaborator(Boolean isCollaborator) {
    this.isCollaborator = isCollaborator;
    return this;
  }

  /**
   * &#x60;True&#x60; if the current user is a collaborator of the current document (direct or via group). 
   * @return isCollaborator
   */
  @javax.annotation.Nullable
  public Boolean getIsCollaborator() {
    return isCollaborator;
  }

  public void setIsCollaborator(Boolean isCollaborator) {
    this.isCollaborator = isCollaborator;
  }


  public ResourceCollaborator collection(String collection) {
    this.collection = collection;
    return this;
  }

  /**
   * If this object is a permission of a collection, this property will contain the unique identifier of the collection
   * @return collection
   */
  @javax.annotation.Nullable
  public String getCollection() {
    return collection;
  }

  public void setCollection(String collection) {
    this.collection = collection;
  }


  public ResourceCollaborator group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public ResourceCollaborator id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the permission
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ResourceCollaborator invited(Boolean invited) {
    this.invited = invited;
    return this;
  }

  /**
   * If this property is &#x60;true&#x60;, this is still a pending invitation 
   * @return invited
   */
  @javax.annotation.Nullable
  public Boolean getInvited() {
    return invited;
  }

  public void setInvited(Boolean invited) {
    this.invited = invited;
  }


  public ResourceCollaborator score(String score) {
    this.score = score;
    return this;
  }

  /**
   * If this object is a permission of a score, this property will contain the unique identifier of the score
   * @return score
   */
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public ResourceCollaborator user(UserPublic user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserPublic getUser() {
    return user;
  }

  public void setUser(UserPublic user) {
    this.user = user;
  }


  public ResourceCollaborator userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * If the collaborator is not a user of Flat yet, this field will contain his email. 
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceCollaborator resourceCollaborator = (ResourceCollaborator) o;
    return Objects.equals(this.aclAdmin, resourceCollaborator.aclAdmin) &&
        Objects.equals(this.aclRead, resourceCollaborator.aclRead) &&
        Objects.equals(this.aclWrite, resourceCollaborator.aclWrite) &&
        Objects.equals(this.isCollaborator, resourceCollaborator.isCollaborator) &&
        Objects.equals(this.collection, resourceCollaborator.collection) &&
        Objects.equals(this.group, resourceCollaborator.group) &&
        Objects.equals(this.id, resourceCollaborator.id) &&
        Objects.equals(this.invited, resourceCollaborator.invited) &&
        Objects.equals(this.score, resourceCollaborator.score) &&
        Objects.equals(this.user, resourceCollaborator.user) &&
        Objects.equals(this.userEmail, resourceCollaborator.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aclAdmin, aclRead, aclWrite, isCollaborator, collection, group, id, invited, score, user, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceCollaborator {\n");
    sb.append("    aclAdmin: ").append(toIndentedString(aclAdmin)).append("\n");
    sb.append("    aclRead: ").append(toIndentedString(aclRead)).append("\n");
    sb.append("    aclWrite: ").append(toIndentedString(aclWrite)).append("\n");
    sb.append("    isCollaborator: ").append(toIndentedString(isCollaborator)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invited: ").append(toIndentedString(invited)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aclAdmin");
    openapiFields.add("aclRead");
    openapiFields.add("aclWrite");
    openapiFields.add("isCollaborator");
    openapiFields.add("collection");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("invited");
    openapiFields.add("score");
    openapiFields.add("user");
    openapiFields.add("userEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceCollaborator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceCollaborator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceCollaborator is not found in the empty JSON string", ResourceCollaborator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceCollaborator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceCollaborator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collection") != null && !jsonObj.get("collection").isJsonNull()) && !jsonObj.get("collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) && !jsonObj.get("score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("score").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserPublic.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceCollaborator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceCollaborator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceCollaborator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceCollaborator.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceCollaborator>() {
           @Override
           public void write(JsonWriter out, ResourceCollaborator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceCollaborator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceCollaborator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceCollaborator
   * @throws IOException if the JSON string is invalid with respect to ResourceCollaborator
   */
  public static ResourceCollaborator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceCollaborator.class);
  }

  /**
   * Convert an instance of ResourceCollaborator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

