/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassRoles;
import org.openapitools.client.model.OrganizationRoles;
import org.openapitools.client.model.UserPublicSummary;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UserPublic
 */
public class UserPublicTest {
    private final UserPublic model = new UserPublic();

    /**
     * Model tests for UserPublic
     */
    @Test
    public void testUserPublic() {
        // TODO: test UserPublic
    }

    /**
     * Test the property 'firstname'
     */
    @Test
    public void firstnameTest() {
        // TODO: test firstname
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isFlatTeam'
     */
    @Test
    public void isFlatTeamTest() {
        // TODO: test isFlatTeam
    }

    /**
     * Test the property 'isPowerUser'
     */
    @Test
    public void isPowerUserTest() {
        // TODO: test isPowerUser
    }

    /**
     * Test the property 'lastname'
     */
    @Test
    public void lastnameTest() {
        // TODO: test lastname
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'picture'
     */
    @Test
    public void pictureTest() {
        // TODO: test picture
    }

    /**
     * Test the property 'printableName'
     */
    @Test
    public void printableNameTest() {
        // TODO: test printableName
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        // TODO: test username
    }

    /**
     * Test the property 'classRole'
     */
    @Test
    public void classRoleTest() {
        // TODO: test classRole
    }

    /**
     * Test the property 'htmlUrl'
     */
    @Test
    public void htmlUrlTest() {
        // TODO: test htmlUrl
    }

    /**
     * Test the property 'organization'
     */
    @Test
    public void organizationTest() {
        // TODO: test organization
    }

    /**
     * Test the property 'organizationRole'
     */
    @Test
    public void organizationRoleTest() {
        // TODO: test organizationRole
    }

    /**
     * Test the property 'bio'
     */
    @Test
    public void bioTest() {
        // TODO: test bio
    }

    /**
     * Test the property 'coverPicture'
     */
    @Test
    public void coverPictureTest() {
        // TODO: test coverPicture
    }

    /**
     * Test the property 'followersCount'
     */
    @Test
    public void followersCountTest() {
        // TODO: test followersCount
    }

    /**
     * Test the property 'followingCount'
     */
    @Test
    public void followingCountTest() {
        // TODO: test followingCount
    }

    /**
     * Test the property 'instruments'
     */
    @Test
    public void instrumentsTest() {
        // TODO: test instruments
    }

    /**
     * Test the property 'likedScoresCount'
     */
    @Test
    public void likedScoresCountTest() {
        // TODO: test likedScoresCount
    }

    /**
     * Test the property 'ownedPublicScoresCount'
     */
    @Test
    public void ownedPublicScoresCountTest() {
        // TODO: test ownedPublicScoresCount
    }

    /**
     * Test the property 'profileTheme'
     */
    @Test
    public void profileThemeTest() {
        // TODO: test profileTheme
    }

    /**
     * Test the property 'registrationDate'
     */
    @Test
    public void registrationDateTest() {
        // TODO: test registrationDate
    }

}
