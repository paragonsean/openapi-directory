/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignmentSubmission;
import java.io.File;
import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.ResourceCollaborator;
import org.openapitools.client.model.ResourceCollaboratorCreation;
import org.openapitools.client.model.ScoreComment;
import org.openapitools.client.model.ScoreCommentCreation;
import org.openapitools.client.model.ScoreCommentUpdate;
import org.openapitools.client.model.ScoreCreation;
import org.openapitools.client.model.ScoreDetails;
import org.openapitools.client.model.ScoreFork;
import org.openapitools.client.model.ScoreModification;
import org.openapitools.client.model.ScoreRevision;
import org.openapitools.client.model.ScoreRevisionCreation;
import org.openapitools.client.model.ScoreTrack;
import org.openapitools.client.model.ScoreTrackCreation;
import org.openapitools.client.model.ScoreTrackUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScoreApi
 */
@Disabled
public class ScoreApiTest {

    private final ScoreApi api = new ScoreApi();

    /**
     * Add a new collaborator
     *
     * Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource. - To add an existing Flat user to the resource, specify its unique identifier in the &#x60;user&#x60; property. - To invite an external user to the resource, specify its email in the &#x60;userEmail&#x60; property. - To add a Flat group to the resource, specify its unique identifier in the &#x60;group&#x60; property. - To update an existing collaborator, process the same request with different rights. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addScoreCollaboratorTest() throws ApiException {
        String score = null;
        ResourceCollaboratorCreation body = null;
        ResourceCollaborator response = api.addScoreCollaborator(score, body);
        // TODO: test validations
    }

    /**
     * Add a new video or audio track to the score
     *
     * Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score. This API method support medias hosted on SoundCloud, YouTube and Vimeo. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addScoreTrackTest() throws ApiException {
        String score = null;
        ScoreTrackCreation body = null;
        ScoreTrack response = api.addScoreTrack(score, body);
        // TODO: test validations
    }

    /**
     * Create a new score
     *
     * Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (&#x60;vnd.recordare.musicxml&#x60; or &#x60;vnd.recordare.musicxml+xml&#x60;), a MIDI (&#x60;audio/midi&#x60;), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.  This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).  If no &#x60;collection&#x60; is specified, the API will create the score in the most appropriate collection. This can be the &#x60;root&#x60; collection or a different collection based on the user&#39;s settings or API authentication method. If a &#x60;collection&#x60; is specified and this one has more public privacy settings than the score (e.g. &#x60;public&#x60; vs &#x60;private&#x60; for the score), the privacy settings of the created score will be adjusted to the collection ones. You can check the adjusted privacy settings in the returned score &#x60;privacy&#x60;, and optionally adjust these settings if needed using &#x60;PUT /scores/{score}&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScoreTest() throws ApiException {
        ScoreCreation body = null;
        ScoreDetails response = api.createScore(body);
        // TODO: test validations
    }

    /**
     * Create a new revision
     *
     * Update a score by uploading a new revision for this one. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScoreRevisionTest() throws ApiException {
        String score = null;
        ScoreRevisionCreation body = null;
        ScoreRevision response = api.createScoreRevision(score, body);
        // TODO: test validations
    }

    /**
     * Delete a score
     *
     * This method can be used by the owner/admin (&#x60;aclAdmin&#x60; rights) of a score as well as regular collaborators.  When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history. The score won&#39;t be accessible anymore after calling this method and the user&#39;s quota will directly be updated.  When called by a regular collaborator (&#x60;aclRead&#x60; / &#x60;aclWrite&#x60;), the score will be unshared (i.e. removed from the account &amp; own collections). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScoreTest() throws ApiException {
        String score = null;
        Boolean now = null;
        api.deleteScore(score, now);
        // TODO: test validations
    }

    /**
     * Delete a comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScoreCommentTest() throws ApiException {
        String score = null;
        String comment = null;
        String sharingKey = null;
        api.deleteScoreComment(score, comment, sharingKey);
        // TODO: test validations
    }

    /**
     * Remove an audio or video track linked to the score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScoreTrackTest() throws ApiException {
        String score = null;
        String track = null;
        api.deleteScoreTrack(score, track);
        // TODO: test validations
    }

    /**
     * Edit a score&#39;s metadata
     *
     * This API method allows you to change the metadata of a score document (e.g. its &#x60;title&#x60; or &#x60;privacy&#x60;), all the properties are optional.  To edit the file itself, create a new revision using the appropriate method (&#x60;POST /v2/scores/{score}/revisions/{revision}&#x60;).  When editing the &#x60;title&#x60;, &#x60;subtitle&#x60;, &#x60;composer&#x60;, &#x60;lyricist&#x60;, &#x60;arranger&#x60; or &#x60;licenseText&#x60;, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily. This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editScoreTest() throws ApiException {
        String score = null;
        ScoreModification body = null;
        ScoreDetails response = api.editScore(score, body);
        // TODO: test validations
    }

    /**
     * Fork a score
     *
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forkScoreTest() throws ApiException {
        String score = null;
        ScoreFork body = null;
        String sharingKey = null;
        ScoreDetails response = api.forkScore(score, body, sharingKey);
        // TODO: test validations
    }

    /**
     * List liked scores
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gerUserLikes_0Test() throws ApiException {
        String user = null;
        Boolean ids = null;
        List<ScoreDetails> response = api.gerUserLikes_0(user, ids);
        // TODO: test validations
    }

    /**
     * List group&#39;s scores
     *
     * Get the list of scores shared with a group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupScores_0Test() throws ApiException {
        String group = null;
        String parent = null;
        List<ScoreDetails> response = api.getGroupScores_0(group, parent);
        // TODO: test validations
    }

    /**
     * Get a score&#39;s metadata
     *
     * Get the details of a score identified by the &#x60;score&#x60; parameter in the URL. The currently authenticated user must have at least a read access to the document to use this API call. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreTest() throws ApiException {
        String score = null;
        String sharingKey = null;
        ScoreDetails response = api.getScore(score, sharingKey);
        // TODO: test validations
    }

    /**
     * Get a collaborator
     *
     * Get the information about a collaborator (User or Group). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreCollaboratorTest() throws ApiException {
        String score = null;
        String collaborator = null;
        String sharingKey = null;
        ResourceCollaborator response = api.getScoreCollaborator(score, collaborator, sharingKey);
        // TODO: test validations
    }

    /**
     * List the collaborators
     *
     * This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.  Collaborators can be a single user (the object &#x60;user&#x60; will be populated) or a group (the object &#x60;group&#x60; will be populated). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreCollaboratorsTest() throws ApiException {
        String score = null;
        String sharingKey = null;
        List<ResourceCollaborator> response = api.getScoreCollaborators(score, sharingKey);
        // TODO: test validations
    }

    /**
     * List comments
     *
     * This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreCommentsTest() throws ApiException {
        String score = null;
        String sharingKey = null;
        String type = null;
        String sort = null;
        String direction = null;
        List<ScoreComment> response = api.getScoreComments(score, sharingKey, type, sort, direction);
        // TODO: test validations
    }

    /**
     * Get a score revision
     *
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific revision metadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreRevisionTest() throws ApiException {
        String score = null;
        String revision = null;
        String sharingKey = null;
        ScoreRevision response = api.getScoreRevision(score, revision, sharingKey);
        // TODO: test validations
    }

    /**
     * Get a score revision data
     *
     * Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON &#x60;json&#x60;, MusicXML &#x60;mxl&#x60;/&#x60;xml&#x60;, MP3 &#x60;mp3&#x60;, WAV &#x60;wav&#x60;, MIDI &#x60;midi&#x60;, a tumbnail of the first page &#x60;thumbnail.png&#x60; or auto sync points &#x60;synchronizationPoints&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreRevisionDataTest() throws ApiException {
        String score = null;
        String revision = null;
        String format = null;
        String sharingKey = null;
        String parts = null;
        Boolean onlyCached = null;
        Boolean url = null;
        File response = api.getScoreRevisionData(score, revision, format, sharingKey, parts, onlyCached, url);
        // TODO: test validations
    }

    /**
     * List the revisions
     *
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.  Depending the plan of the account, this list can be trunked to the few last revisions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreRevisionsTest() throws ApiException {
        String score = null;
        String sharingKey = null;
        List<ScoreRevision> response = api.getScoreRevisions(score, sharingKey);
        // TODO: test validations
    }

    /**
     * List submissions related to the score
     *
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreSubmissionsTest() throws ApiException {
        String score = null;
        List<AssignmentSubmission> response = api.getScoreSubmissions(score);
        // TODO: test validations
    }

    /**
     * Retrieve the details of an audio or video track linked to a score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreTrackTest() throws ApiException {
        String score = null;
        String track = null;
        String sharingKey = null;
        ScoreTrack response = api.getScoreTrack(score, track, sharingKey);
        // TODO: test validations
    }

    /**
     * List user&#39;s scores
     *
     * Get the list of public scores owned by a User.  **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**. This method will no longer list private and shared scores, but only public scores of a Flat account. If you want to access to private scores, please use the [Collections API](#tag/Collection) instead. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserScores_0Test() throws ApiException {
        String user = null;
        String parent = null;
        List<ScoreDetails> response = api.getUserScores_0(user, parent);
        // TODO: test validations
    }

    /**
     * List the audio or video tracks linked to a score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScoreTracksTest() throws ApiException {
        String score = null;
        String sharingKey = null;
        String assignment = null;
        Boolean listAutoTrack = null;
        List<ScoreTrack> response = api.listScoreTracks(score, sharingKey, assignment, listAutoTrack);
        // TODO: test validations
    }

    /**
     * Mark the comment as resolved
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markScoreCommentResolvedTest() throws ApiException {
        String score = null;
        String comment = null;
        String sharingKey = null;
        api.markScoreCommentResolved(score, comment, sharingKey);
        // TODO: test validations
    }

    /**
     * Mark the comment as unresolved
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markScoreCommentUnresolvedTest() throws ApiException {
        String score = null;
        String comment = null;
        String sharingKey = null;
        api.markScoreCommentUnresolved(score, comment, sharingKey);
        // TODO: test validations
    }

    /**
     * Post a new comment
     *
     * Post a document or a contextualized comment on a document.  Please note that this method includes an anti-spam system for public scores. We don&#39;t guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a &#x60;403&#x60; HTTP error and hidden from other users when the &#x60;spam&#x60; property is &#x60;true&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScoreCommentTest() throws ApiException {
        String score = null;
        ScoreCommentCreation body = null;
        String sharingKey = null;
        ScoreComment response = api.postScoreComment(score, body, sharingKey);
        // TODO: test validations
    }

    /**
     * Delete a collaborator
     *
     * Remove the specified collaborator from the score 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeScoreCollaboratorTest() throws ApiException {
        String score = null;
        String collaborator = null;
        api.removeScoreCollaborator(score, collaborator);
        // TODO: test validations
    }

    /**
     * Untrash a score
     *
     * This method will remove the score from the &#x60;trash&#x60; collection and from the deletion queue, and add it back to the original collections. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untrashScoreTest() throws ApiException {
        String score = null;
        api.untrashScore(score);
        // TODO: test validations
    }

    /**
     * Update an existing comment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScoreCommentTest() throws ApiException {
        String score = null;
        String comment = null;
        ScoreCommentUpdate body = null;
        String sharingKey = null;
        ScoreComment response = api.updateScoreComment(score, comment, body, sharingKey);
        // TODO: test validations
    }

    /**
     * Update an audio or video track linked to a score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScoreTrackTest() throws ApiException {
        String score = null;
        String track = null;
        ScoreTrackUpdate body = null;
        ScoreTrack response = api.updateScoreTrack(score, track, body);
        // TODO: test validations
    }

}
