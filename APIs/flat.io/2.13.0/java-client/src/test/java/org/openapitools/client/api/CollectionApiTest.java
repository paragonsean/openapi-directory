/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionCreation;
import org.openapitools.client.model.CollectionModification;
import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.ScoreDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollectionApi
 */
@Disabled
public class CollectionApiTest {

    private final CollectionApi api = new CollectionApi();

    /**
     * Add a score to the collection
     *
     * This operation will add a score to a collection. The default behavior will make the score available across multiple collections. You must have the capability &#x60;canAddScores&#x60; on the provided &#x60;collection&#x60; to perform the action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addScoreToCollectionTest() throws ApiException {
        String collection = null;
        String score = null;
        String sharingKey = null;
        ScoreDetails response = api.addScoreToCollection(collection, score, sharingKey);
        // TODO: test validations
    }

    /**
     * Create a new collection
     *
     * This method will create a new collection and add it to your &#x60;root&#x60; collection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        CollectionCreation body = null;
        Collection response = api.createCollection(body);
        // TODO: test validations
    }

    /**
     * Delete the collection
     *
     * This method will schedule the deletion of the collection. Until deleted, the collection will be available in the &#x60;trash&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String collection = null;
        api.deleteCollection(collection);
        // TODO: test validations
    }

    /**
     * Delete a score from the collection
     *
     * This method will delete a score from the collection. Unlike [&#x60;DELETE /scores/{score}&#x60;](#operation/deleteScore), this score will not remove the score from your account, but only from the collection. This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScoreFromCollectionTest() throws ApiException {
        String collection = null;
        String score = null;
        String sharingKey = null;
        api.deleteScoreFromCollection(collection, score, sharingKey);
        // TODO: test validations
    }

    /**
     * Update a collection&#39;s metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editCollectionTest() throws ApiException {
        String collection = null;
        CollectionModification body = null;
        Collection response = api.editCollection(collection, body);
        // TODO: test validations
    }

    /**
     * Get collection details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionTest() throws ApiException {
        String collection = null;
        String sharingKey = null;
        Collection response = api.getCollection(collection, sharingKey);
        // TODO: test validations
    }

    /**
     * List the scores contained in a collection
     *
     * Use this method to list the scores contained in a collection. If no sort option is provided, the scores are sorted by &#x60;modificationDate&#x60; &#x60;desc&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionScoresTest() throws ApiException {
        String collection = null;
        String sharingKey = null;
        String sort = null;
        String direction = null;
        Integer limit = null;
        String next = null;
        String previous = null;
        List<ScoreDetails> response = api.listCollectionScores(collection, sharingKey, sort, direction, limit, next, previous);
        // TODO: test validations
    }

    /**
     * List the collections
     *
     * Use this method to list the user&#39;s collections contained in &#x60;parent&#x60; (by default in the &#x60;root&#x60; collection). If no sort option is provided, the collections are sorted by &#x60;creationDate&#x60; &#x60;desc&#x60;.  Note that this method will not include the &#x60;parent&#x60; collection in the listing. For example, if you need the details of the &#x60;root&#x60; collection, you can use &#x60;GET /v2/collections/root&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionsTest() throws ApiException {
        String parent = null;
        String sort = null;
        String direction = null;
        Integer limit = null;
        String next = null;
        String previous = null;
        List<Collection> response = api.listCollections(parent, sort, direction, limit, next, previous);
        // TODO: test validations
    }

    /**
     * Untrash a collection
     *
     * This method will restore the collection by removing it from the &#x60;trash&#x60; and add it back to the &#x60;root&#x60; collection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untrashCollectionTest() throws ApiException {
        String collection = null;
        api.untrashCollection(collection);
        // TODO: test validations
    }

}
