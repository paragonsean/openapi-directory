/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaScoreSharingMode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MediaAttachment
 */
public class MediaAttachmentTest {
    private final MediaAttachment model = new MediaAttachment();

    /**
     * Model tests for MediaAttachment
     */
    @Test
    public void testMediaAttachment() {
        // TODO: test MediaAttachment
    }

    /**
     * Test the property 'authorName'
     */
    @Test
    public void authorNameTest() {
        // TODO: test authorName
    }

    /**
     * Test the property 'authorUrl'
     */
    @Test
    public void authorUrlTest() {
        // TODO: test authorUrl
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'googleDriveFileId'
     */
    @Test
    public void googleDriveFileIdTest() {
        // TODO: test googleDriveFileId
    }

    /**
     * Test the property 'html'
     */
    @Test
    public void htmlTest() {
        // TODO: test html
    }

    /**
     * Test the property 'htmlHeight'
     */
    @Test
    public void htmlHeightTest() {
        // TODO: test htmlHeight
    }

    /**
     * Test the property 'htmlWidth'
     */
    @Test
    public void htmlWidthTest() {
        // TODO: test htmlWidth
    }

    /**
     * Test the property 'iconUrl'
     */
    @Test
    public void iconUrlTest() {
        // TODO: test iconUrl
    }

    /**
     * Test the property 'lockScoreTemplate'
     */
    @Test
    public void lockScoreTemplateTest() {
        // TODO: test lockScoreTemplate
    }

    /**
     * Test the property 'mimeType'
     */
    @Test
    public void mimeTypeTest() {
        // TODO: test mimeType
    }

    /**
     * Test the property 'revision'
     */
    @Test
    public void revisionTest() {
        // TODO: test revision
    }

    /**
     * Test the property 'score'
     */
    @Test
    public void scoreTest() {
        // TODO: test score
    }

    /**
     * Test the property 'sharingMode'
     */
    @Test
    public void sharingModeTest() {
        // TODO: test sharingMode
    }

    /**
     * Test the property 'thumbnailHeight'
     */
    @Test
    public void thumbnailHeightTest() {
        // TODO: test thumbnailHeight
    }

    /**
     * Test the property 'thumbnailUrl'
     */
    @Test
    public void thumbnailUrlTest() {
        // TODO: test thumbnailUrl
    }

    /**
     * Test the property 'thumbnailWidth'
     */
    @Test
    public void thumbnailWidthTest() {
        // TODO: test thumbnailWidth
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'track'
     */
    @Test
    public void trackTest() {
        // TODO: test track
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'worksheet'
     */
    @Test
    public void worksheetTest() {
        // TODO: test worksheet
    }

}
