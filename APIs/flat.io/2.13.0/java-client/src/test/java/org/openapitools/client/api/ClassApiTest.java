/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.AssignmentCopy;
import org.openapitools.client.model.AssignmentCreation;
import org.openapitools.client.model.AssignmentSubmission;
import org.openapitools.client.model.AssignmentSubmissionComment;
import org.openapitools.client.model.AssignmentSubmissionCommentCreation;
import org.openapitools.client.model.AssignmentSubmissionHistory;
import org.openapitools.client.model.AssignmentSubmissionUpdate;
import org.openapitools.client.model.ClassCreation;
import org.openapitools.client.model.ClassDetails;
import org.openapitools.client.model.ClassUpdate;
import java.io.File;
import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.ScoreDetails;
import org.openapitools.client.model.ScoreFork;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClassApi
 */
@Disabled
public class ClassApiTest {

    private final ClassApi api = new ClassApi();

    /**
     * Activate the class
     *
     * Mark the class as &#x60;active&#x60;. This is mainly used for classes synchronized from Clever that are initially with an &#x60;inactive&#x60; state and hidden in the UI. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateClassTest() throws ApiException {
        String propertyClass = null;
        ClassDetails response = api.activateClass(propertyClass);
        // TODO: test validations
    }

    /**
     * Add a user to the class
     *
     * This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addClassUserTest() throws ApiException {
        String propertyClass = null;
        String user = null;
        api.addClassUser(propertyClass, user);
        // TODO: test validations
    }

    /**
     * Archive the assignment
     *
     * Archive the assignment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveAssignmentTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        Assignment response = api.archiveAssignment(propertyClass, assignment);
        // TODO: test validations
    }

    /**
     * Archive the class
     *
     * Mark the class as &#x60;archived&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveClassTest() throws ApiException {
        String propertyClass = null;
        ClassDetails response = api.archiveClass(propertyClass);
        // TODO: test validations
    }

    /**
     * Copy an assignment
     *
     * Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyAssignmentTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        AssignmentCopy body = null;
        Assignment response = api.copyAssignment(propertyClass, assignment, body);
        // TODO: test validations
    }

    /**
     * Assignment creation
     *
     * Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssignmentTest() throws ApiException {
        String propertyClass = null;
        AssignmentCreation body = null;
        Assignment response = api.createAssignment(propertyClass, body);
        // TODO: test validations
    }

    /**
     * Create a new class
     *
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using &#x60;PUT /classes/{class}/users/{user}&#x60;, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using &#x60;POST /classes/enroll/{enrollmentCode}&#x60; and the &#x60;enrollmentCode&#x60; returned in the &#x60;ClassDetails&#x60; response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClassTest() throws ApiException {
        ClassCreation body = null;
        ClassDetails response = api.createClass(body);
        // TODO: test validations
    }

    /**
     * Create or edit a submission
     *
     * Use this method as a student to create, update and submit a submission related to an assignment. Students can only set &#x60;attachments&#x60; and &#x60;submit&#x60;. Teachers can use &#x60;PUT /classes/{class}/assignments/{assignment}/submissions/{submission}&#x60; to update a submission by id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubmissionTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        AssignmentSubmissionUpdate body = null;
        AssignmentSubmission response = api.createSubmission(propertyClass, assignment, body);
        // TODO: test validations
    }

    /**
     * Remove a user from the class
     *
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClassUserTest() throws ApiException {
        String propertyClass = null;
        String user = null;
        api.deleteClassUser(propertyClass, user);
        // TODO: test validations
    }

    /**
     * Delete a submission
     *
     * Use this method as a teacher to delete a submission and allow student to start over the assignment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubmissionTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        api.deleteSubmission(propertyClass, assignment, submission);
        // TODO: test validations
    }

    /**
     * Delete a feedback comment to a submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubmissionCommentTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        String comment = null;
        api.deleteSubmissionComment(propertyClass, assignment, submission, comment);
        // TODO: test validations
    }

    /**
     * Edit a submission
     *
     * Use this method as a teacher to update the different submission and give feedback. Teachers can only set &#x60;return&#x60;, &#x60;draftGrade&#x60; and &#x60;grade&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editSubmissionTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        AssignmentSubmissionUpdate body = null;
        AssignmentSubmission response = api.editSubmission(propertyClass, assignment, submission, body);
        // TODO: test validations
    }

    /**
     * Join a class
     *
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the &#x60;ClassDetails&#x60; returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollClassTest() throws ApiException {
        String enrollmentCode = null;
        ClassDetails response = api.enrollClass(enrollmentCode);
        // TODO: test validations
    }

    /**
     * CSV Grades exports
     *
     * Export list of submissions grades to a CSV file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSubmissionsReviewsAsCsvTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        File response = api.exportSubmissionsReviewsAsCsv(propertyClass, assignment);
        // TODO: test validations
    }

    /**
     * Excel Grades exports
     *
     * Export list of submissions grades to an Excel file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSubmissionsReviewsAsExcelTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        File response = api.exportSubmissionsReviewsAsExcel(propertyClass, assignment);
        // TODO: test validations
    }

    /**
     * Fork a score
     *
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to &#x60;private&#x60;.  When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forkScore_0Test() throws ApiException {
        String score = null;
        ScoreFork body = null;
        String sharingKey = null;
        ScoreDetails response = api.forkScore_0(score, body, sharingKey);
        // TODO: test validations
    }

    /**
     * Get the details of a single class
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassTest() throws ApiException {
        String propertyClass = null;
        ClassDetails response = api.getClass(propertyClass);
        // TODO: test validations
    }

    /**
     * List submissions related to the score
     *
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreSubmissions_0Test() throws ApiException {
        String score = null;
        List<AssignmentSubmission> response = api.getScoreSubmissions_0(score);
        // TODO: test validations
    }

    /**
     * Get a student submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        AssignmentSubmission response = api.getSubmission(propertyClass, assignment, submission);
        // TODO: test validations
    }

    /**
     * List the feedback comments of a submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionCommentsTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        List<AssignmentSubmissionComment> response = api.getSubmissionComments(propertyClass, assignment, submission);
        // TODO: test validations
    }

    /**
     * Get the history of the submission
     *
     * For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionHistoryTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        List<AssignmentSubmissionHistory> response = api.getSubmissionHistory(propertyClass, assignment, submission);
        // TODO: test validations
    }

    /**
     * List the students&#39; submissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionsTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        List<AssignmentSubmission> response = api.getSubmissions(propertyClass, assignment);
        // TODO: test validations
    }

    /**
     * Assignments listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssignmentsTest() throws ApiException {
        String propertyClass = null;
        List<Assignment> response = api.listAssignments(propertyClass);
        // TODO: test validations
    }

    /**
     * List the submissions for a student
     *
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClassStudentSubmissionsTest() throws ApiException {
        String propertyClass = null;
        String user = null;
        List<AssignmentSubmission> response = api.listClassStudentSubmissions(propertyClass, user);
        // TODO: test validations
    }

    /**
     * List the classes available for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClassesTest() throws ApiException {
        String state = null;
        List<ClassDetails> response = api.listClasses(state);
        // TODO: test validations
    }

    /**
     * Add a feedback comment to a submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSubmissionCommentTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation = null;
        AssignmentSubmissionComment response = api.postSubmissionComment(propertyClass, assignment, submission, assignmentSubmissionCommentCreation);
        // TODO: test validations
    }

    /**
     * Unarchive the assignment.
     *
     * Mark the assignment as &#x60;active&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveAssignmentTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        Assignment response = api.unarchiveAssignment(propertyClass, assignment);
        // TODO: test validations
    }

    /**
     * Unarchive the class
     *
     * Mark the class as &#x60;active&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveClassTest() throws ApiException {
        String propertyClass = null;
        ClassDetails response = api.unarchiveClass(propertyClass);
        // TODO: test validations
    }

    /**
     * Update the class
     *
     * Update the meta information of the class 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClassTest() throws ApiException {
        String propertyClass = null;
        ClassUpdate body = null;
        ClassDetails response = api.updateClass(propertyClass, body);
        // TODO: test validations
    }

    /**
     * Update a feedback comment to a submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubmissionCommentTest() throws ApiException {
        String propertyClass = null;
        String assignment = null;
        String submission = null;
        String comment = null;
        AssignmentSubmissionCommentCreation assignmentSubmissionCommentCreation = null;
        AssignmentSubmissionComment response = api.updateSubmissionComment(propertyClass, assignment, submission, comment, assignmentSubmissionCommentCreation);
        // TODO: test validations
    }

}
