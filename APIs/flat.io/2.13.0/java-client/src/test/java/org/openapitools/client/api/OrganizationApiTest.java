/*
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and introduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * The version of the OpenAPI document: 2.13.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FlatErrorResponse;
import org.openapitools.client.model.LtiCredentials;
import org.openapitools.client.model.LtiCredentialsCreation;
import org.openapitools.client.model.OrganizationInvitation;
import org.openapitools.client.model.OrganizationInvitationCreation;
import org.openapitools.client.model.UserAdminUpdate;
import org.openapitools.client.model.UserCreation;
import org.openapitools.client.model.UserDetailsAdmin;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationApi
 */
@Disabled
public class OrganizationApiTest {

    private final OrganizationApi api = new OrganizationApi();

    /**
     * Count the organization users using the provided filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countOrgaUsersTest() throws ApiException {
        List<String> role = null;
        String q = null;
        List<String> group = null;
        Boolean noActiveLicense = null;
        List<UserDetailsAdmin> response = api.countOrgaUsers(role, q, group, noActiveLicense);
        // TODO: test validations
    }

    /**
     * Create a new couple of LTI 1.x credentials
     *
     * Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLtiCredentialsTest() throws ApiException {
        LtiCredentialsCreation body = null;
        LtiCredentials response = api.createLtiCredentials(body);
        // TODO: test validations
    }

    /**
     * Create a new invitation to join the organization
     *
     * This method creates and sends invitation for teachers and admins.  Invitations can only be used by new Flat users or users who are not part of the organization yet.  If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won&#39;t send an invitation. In this case, the property &#x60;usedBy&#x60; will be directly filled with the uniquer identifier of the corresponding user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInvitationTest() throws ApiException {
        OrganizationInvitationCreation body = null;
        OrganizationInvitation response = api.createOrganizationInvitation(body);
        // TODO: test validations
    }

    /**
     * Create a new user account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationUserTest() throws ApiException {
        UserCreation body = null;
        UserDetailsAdmin response = api.createOrganizationUser(body);
        // TODO: test validations
    }

    /**
     * List LTI 1.x credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLtiCredentialsTest() throws ApiException {
        List<LtiCredentials> response = api.listLtiCredentials();
        // TODO: test validations
    }

    /**
     * List the organization invitations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationInvitationsTest() throws ApiException {
        String role = null;
        Integer limit = null;
        String next = null;
        String previous = null;
        List<OrganizationInvitation> response = api.listOrganizationInvitations(role, limit, next, previous);
        // TODO: test validations
    }

    /**
     * List the organization users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationUsersTest() throws ApiException {
        List<String> sort = null;
        String direction = null;
        String next = null;
        String previous = null;
        List<String> role = null;
        String q = null;
        List<String> group = null;
        Boolean noActiveLicense = null;
        List<String> licenseExpirationDate = null;
        Boolean onlyIds = null;
        Integer limit = null;
        List<UserDetailsAdmin> response = api.listOrganizationUsers(sort, direction, next, previous, role, q, group, noActiveLicense, licenseExpirationDate, onlyIds, limit);
        // TODO: test validations
    }

    /**
     * Remove an organization invitation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOrganizationInvitationTest() throws ApiException {
        String invitation = null;
        api.removeOrganizationInvitation(invitation);
        // TODO: test validations
    }

    /**
     * Remove an account from Flat
     *
     * This operation removes an account from Flat and its data, including: * The music scores created by this user (documents, history, comments, collaboration information) * Education related data (assignments and classroom information) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOrganizationUserTest() throws ApiException {
        String user = null;
        Boolean convertToIndividual = null;
        api.removeOrganizationUser(user, convertToIndividual);
        // TODO: test validations
    }

    /**
     * Revoke LTI 1.x credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeLtiCredentialsTest() throws ApiException {
        String credentials = null;
        api.revokeLtiCredentials(credentials);
        // TODO: test validations
    }

    /**
     * Update account information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationUserTest() throws ApiException {
        String user = null;
        UserAdminUpdate body = null;
        UserDetailsAdmin response = api.updateOrganizationUser(user, body);
        // TODO: test validations
    }

}
