/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoc::OAIDoc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoc::OAIDoc() {
    this->initializeModel();
}

OAIDoc::~OAIDoc() {}

void OAIDoc::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_parent_doc_isSet = false;
    m_parent_doc_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDoc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoc::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_parent_doc_isValid = ::OpenAPI::fromJsonValue(m_parent_doc, json[QString("parentDoc")]);
    m_parent_doc_isSet = !json[QString("parentDoc")].isNull() && m_parent_doc_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDoc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoc::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_parent_doc_isSet) {
        obj.insert(QString("parentDoc"), ::OpenAPI::toJsonValue(m_parent_doc));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDoc::getBody() const {
    return m_body;
}
void OAIDoc::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIDoc::is_body_Set() const{
    return m_body_isSet;
}

bool OAIDoc::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIDoc::getCategory() const {
    return m_category;
}
void OAIDoc::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDoc::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDoc::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIDoc::isHidden() const {
    return m_hidden;
}
void OAIDoc::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIDoc::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIDoc::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIDoc::getParentDoc() const {
    return m_parent_doc;
}
void OAIDoc::setParentDoc(const QString &parent_doc) {
    m_parent_doc = parent_doc;
    m_parent_doc_isSet = true;
}

bool OAIDoc::is_parent_doc_Set() const{
    return m_parent_doc_isSet;
}

bool OAIDoc::is_parent_doc_Valid() const{
    return m_parent_doc_isValid;
}

QString OAIDoc::getTitle() const {
    return m_title;
}
void OAIDoc::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDoc::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDoc::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDoc::getType() const {
    return m_type;
}
void OAIDoc::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDoc::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDoc::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDoc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_doc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoc::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
