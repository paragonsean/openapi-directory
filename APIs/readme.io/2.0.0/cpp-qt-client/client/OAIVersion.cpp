/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_codename_isSet = false;
    m_codename_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_is_beta_isSet = false;
    m_is_beta_isValid = false;

    m_is_deprecated_isSet = false;
    m_is_deprecated_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_is_stable_isSet = false;
    m_is_stable_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_codename_isValid = ::OpenAPI::fromJsonValue(m_codename, json[QString("codename")]);
    m_codename_isSet = !json[QString("codename")].isNull() && m_codename_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_is_beta_isValid = ::OpenAPI::fromJsonValue(m_is_beta, json[QString("is_beta")]);
    m_is_beta_isSet = !json[QString("is_beta")].isNull() && m_is_beta_isValid;

    m_is_deprecated_isValid = ::OpenAPI::fromJsonValue(m_is_deprecated, json[QString("is_deprecated")]);
    m_is_deprecated_isSet = !json[QString("is_deprecated")].isNull() && m_is_deprecated_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("is_hidden")]);
    m_is_hidden_isSet = !json[QString("is_hidden")].isNull() && m_is_hidden_isValid;

    m_is_stable_isValid = ::OpenAPI::fromJsonValue(m_is_stable, json[QString("is_stable")]);
    m_is_stable_isSet = !json[QString("is_stable")].isNull() && m_is_stable_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_codename_isSet) {
        obj.insert(QString("codename"), ::OpenAPI::toJsonValue(m_codename));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_is_beta_isSet) {
        obj.insert(QString("is_beta"), ::OpenAPI::toJsonValue(m_is_beta));
    }
    if (m_is_deprecated_isSet) {
        obj.insert(QString("is_deprecated"), ::OpenAPI::toJsonValue(m_is_deprecated));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("is_hidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_is_stable_isSet) {
        obj.insert(QString("is_stable"), ::OpenAPI::toJsonValue(m_is_stable));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIVersion::getCodename() const {
    return m_codename;
}
void OAIVersion::setCodename(const QString &codename) {
    m_codename = codename;
    m_codename_isSet = true;
}

bool OAIVersion::is_codename_Set() const{
    return m_codename_isSet;
}

bool OAIVersion::is_codename_Valid() const{
    return m_codename_isValid;
}

QString OAIVersion::getFrom() const {
    return m_from;
}
void OAIVersion::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIVersion::is_from_Set() const{
    return m_from_isSet;
}

bool OAIVersion::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIVersion::isIsBeta() const {
    return m_is_beta;
}
void OAIVersion::setIsBeta(const bool &is_beta) {
    m_is_beta = is_beta;
    m_is_beta_isSet = true;
}

bool OAIVersion::is_is_beta_Set() const{
    return m_is_beta_isSet;
}

bool OAIVersion::is_is_beta_Valid() const{
    return m_is_beta_isValid;
}

bool OAIVersion::isIsDeprecated() const {
    return m_is_deprecated;
}
void OAIVersion::setIsDeprecated(const bool &is_deprecated) {
    m_is_deprecated = is_deprecated;
    m_is_deprecated_isSet = true;
}

bool OAIVersion::is_is_deprecated_Set() const{
    return m_is_deprecated_isSet;
}

bool OAIVersion::is_is_deprecated_Valid() const{
    return m_is_deprecated_isValid;
}

bool OAIVersion::isIsHidden() const {
    return m_is_hidden;
}
void OAIVersion::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIVersion::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIVersion::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

bool OAIVersion::isIsStable() const {
    return m_is_stable;
}
void OAIVersion::setIsStable(const bool &is_stable) {
    m_is_stable = is_stable;
    m_is_stable_isSet = true;
}

bool OAIVersion::is_is_stable_Set() const{
    return m_is_stable_isSet;
}

bool OAIVersion::is_is_stable_Valid() const{
    return m_is_stable_isValid;
}

QString OAIVersion::getVersion() const {
    return m_version;
}
void OAIVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_beta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_stable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
