/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPISpecificationApi_H
#define OAI_OAIAPISpecificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPISpecificationApi : public QObject {
    Q_OBJECT

public:
    OAIAPISpecificationApi(const int timeOut = 0);
    ~OAIAPISpecificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteAPISpecification(const QString &id);

    /**
    * @param[in]  x_readme_version QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getAPISpecification(const QString &x_readme_version, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  spec OAIHttpFileElement [optional]
    */
    virtual void updateAPISpecification(const QString &id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &spec = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  x_readme_version QString [required]
    * @param[in]  spec OAIHttpFileElement [optional]
    */
    virtual void uploadAPISpecification(const QString &x_readme_version, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &spec = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAPISpecificationCallback(OAIHttpRequestWorker *worker);
    void getAPISpecificationCallback(OAIHttpRequestWorker *worker);
    void updateAPISpecificationCallback(OAIHttpRequestWorker *worker);
    void uploadAPISpecificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAPISpecificationSignal();
    void getAPISpecificationSignal();
    void updateAPISpecificationSignal();
    void uploadAPISpecificationSignal();


    void deleteAPISpecificationSignalFull(OAIHttpRequestWorker *worker);
    void getAPISpecificationSignalFull(OAIHttpRequestWorker *worker);
    void updateAPISpecificationSignalFull(OAIHttpRequestWorker *worker);
    void uploadAPISpecificationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteAPISpecificationSignalError() instead")
    void deleteAPISpecificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAPISpecificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAPISpecificationSignalError() instead")
    void getAPISpecificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAPISpecificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAPISpecificationSignalError() instead")
    void updateAPISpecificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAPISpecificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadAPISpecificationSignalError() instead")
    void uploadAPISpecificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadAPISpecificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAPISpecificationSignalErrorFull() instead")
    void deleteAPISpecificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAPISpecificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAPISpecificationSignalErrorFull() instead")
    void getAPISpecificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAPISpecificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAPISpecificationSignalErrorFull() instead")
    void updateAPISpecificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAPISpecificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadAPISpecificationSignalErrorFull() instead")
    void uploadAPISpecificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadAPISpecificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
