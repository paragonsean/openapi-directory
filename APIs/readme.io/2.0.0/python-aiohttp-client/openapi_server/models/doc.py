# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Doc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, category: str=None, hidden: bool=True, parent_doc: str=None, title: str=None, type: str=None):
        """Doc - a model defined in OpenAPI

        :param body: The body of this Doc.
        :param category: The category of this Doc.
        :param hidden: The hidden of this Doc.
        :param parent_doc: The parent_doc of this Doc.
        :param title: The title of this Doc.
        :param type: The type of this Doc.
        """
        self.openapi_types = {
            'body': str,
            'category': str,
            'hidden': bool,
            'parent_doc': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'body': 'body',
            'category': 'category',
            'hidden': 'hidden',
            'parent_doc': 'parentDoc',
            'title': 'title',
            'type': 'type'
        }

        self._body = body
        self._category = category
        self._hidden = hidden
        self._parent_doc = parent_doc
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Doc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Doc of this Doc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Doc.

        Body content of the page, formatted in ReadMe or Github flavored Markdown. Accepts long page content, for example, greater than 100k characters

        :return: The body of this Doc.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Doc.

        Body content of the page, formatted in ReadMe or Github flavored Markdown. Accepts long page content, for example, greater than 100k characters

        :param body: The body of this Doc.
        :type body: str
        """

        self._body = body

    @property
    def category(self):
        """Gets the category of this Doc.

        Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory 

        :return: The category of this Doc.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Doc.

        Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory 

        :param category: The category of this Doc.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def hidden(self):
        """Gets the hidden of this Doc.

        Visibility of the page

        :return: The hidden of this Doc.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Doc.

        Visibility of the page

        :param hidden: The hidden of this Doc.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def parent_doc(self):
        """Gets the parent_doc of this Doc.

        For a subpage, specify the parent doc ID, which you can get through https://docs.readme.com/developers/reference/docs#getdoc

        :return: The parent_doc of this Doc.
        :rtype: str
        """
        return self._parent_doc

    @parent_doc.setter
    def parent_doc(self, parent_doc):
        """Sets the parent_doc of this Doc.

        For a subpage, specify the parent doc ID, which you can get through https://docs.readme.com/developers/reference/docs#getdoc

        :param parent_doc: The parent_doc of this Doc.
        :type parent_doc: str
        """

        self._parent_doc = parent_doc

    @property
    def title(self):
        """Gets the title of this Doc.

        Title of the page

        :return: The title of this Doc.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Doc.

        Title of the page

        :param title: The title of this Doc.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Doc.

        Type of the page. The available types all show up under the /docs/ URL path of your docs project (also known as the \"guides\" section). Can be \"basic\" (most common), \"error\" (page desribing an API error), or \"link\" (page that redirects to an external link)

        :return: The type of this Doc.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Doc.

        Type of the page. The available types all show up under the /docs/ URL path of your docs project (also known as the \"guides\" section). Can be \"basic\" (most common), \"error\" (page desribing an API error), or \"link\" (page that redirects to an external link)

        :param type: The type of this Doc.
        :type type: str
        """
        allowed_values = ["basic", "error", "link"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
