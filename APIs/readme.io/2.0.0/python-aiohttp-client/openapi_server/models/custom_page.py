# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, hidden: bool=True, html: str=None, htmlmode: bool=False, title: str=None):
        """CustomPage - a model defined in OpenAPI

        :param body: The body of this CustomPage.
        :param hidden: The hidden of this CustomPage.
        :param html: The html of this CustomPage.
        :param htmlmode: The htmlmode of this CustomPage.
        :param title: The title of this CustomPage.
        """
        self.openapi_types = {
            'body': str,
            'hidden': bool,
            'html': str,
            'htmlmode': bool,
            'title': str
        }

        self.attribute_map = {
            'body': 'body',
            'hidden': 'hidden',
            'html': 'html',
            'htmlmode': 'htmlmode',
            'title': 'title'
        }

        self._body = body
        self._hidden = hidden
        self._html = html
        self._htmlmode = htmlmode
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomPage of this CustomPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this CustomPage.

        Body formatted in Markdown (displayed by default).

        :return: The body of this CustomPage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CustomPage.

        Body formatted in Markdown (displayed by default).

        :param body: The body of this CustomPage.
        :type body: str
        """

        self._body = body

    @property
    def hidden(self):
        """Gets the hidden of this CustomPage.

        Visibility of the custom page

        :return: The hidden of this CustomPage.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CustomPage.

        Visibility of the custom page

        :param hidden: The hidden of this CustomPage.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def html(self):
        """Gets the html of this CustomPage.

        Body formatted in HTML (sanitized, only displayed if `htmlmode` is **true**).

        :return: The html of this CustomPage.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this CustomPage.

        Body formatted in HTML (sanitized, only displayed if `htmlmode` is **true**).

        :param html: The html of this CustomPage.
        :type html: str
        """

        self._html = html

    @property
    def htmlmode(self):
        """Gets the htmlmode of this CustomPage.

        **true** if `html` should be displayed, **false** if `body` should be displayed.

        :return: The htmlmode of this CustomPage.
        :rtype: bool
        """
        return self._htmlmode

    @htmlmode.setter
    def htmlmode(self, htmlmode):
        """Sets the htmlmode of this CustomPage.

        **true** if `html` should be displayed, **false** if `body` should be displayed.

        :param htmlmode: The htmlmode of this CustomPage.
        :type htmlmode: bool
        """

        self._htmlmode = htmlmode

    @property
    def title(self):
        """Gets the title of this CustomPage.

        Title of the custom page

        :return: The title of this CustomPage.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomPage.

        Title of the custom page

        :param title: The title of this CustomPage.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
