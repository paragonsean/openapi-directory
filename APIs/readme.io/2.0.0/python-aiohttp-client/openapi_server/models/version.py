# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codename: str=None, _from: str=None, is_beta: bool=True, is_deprecated: bool=None, is_hidden: bool=None, is_stable: bool=None, version: str=None):
        """Version - a model defined in OpenAPI

        :param codename: The codename of this Version.
        :param _from: The _from of this Version.
        :param is_beta: The is_beta of this Version.
        :param is_deprecated: The is_deprecated of this Version.
        :param is_hidden: The is_hidden of this Version.
        :param is_stable: The is_stable of this Version.
        :param version: The version of this Version.
        """
        self.openapi_types = {
            'codename': str,
            '_from': str,
            'is_beta': bool,
            'is_deprecated': bool,
            'is_hidden': bool,
            'is_stable': bool,
            'version': str
        }

        self.attribute_map = {
            'codename': 'codename',
            '_from': 'from',
            'is_beta': 'is_beta',
            'is_deprecated': 'is_deprecated',
            'is_hidden': 'is_hidden',
            'is_stable': 'is_stable',
            'version': 'version'
        }

        self._codename = codename
        self.__from = _from
        self._is_beta = is_beta
        self._is_deprecated = is_deprecated
        self._is_hidden = is_hidden
        self._is_stable = is_stable
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codename(self):
        """Gets the codename of this Version.

        Dubbed name of version

        :return: The codename of this Version.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this Version.

        Dubbed name of version

        :param codename: The codename of this Version.
        :type codename: str
        """

        self._codename = codename

    @property
    def _from(self):
        """Gets the _from of this Version.

        Semantic Version to use as the base fork

        :return: The _from of this Version.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Version.

        Semantic Version to use as the base fork

        :param _from: The _from of this Version.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def is_beta(self):
        """Gets the is_beta of this Version.


        :return: The is_beta of this Version.
        :rtype: bool
        """
        return self._is_beta

    @is_beta.setter
    def is_beta(self, is_beta):
        """Sets the is_beta of this Version.


        :param is_beta: The is_beta of this Version.
        :type is_beta: bool
        """

        self._is_beta = is_beta

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this Version.

        Should this be deprecated? Only allowed in PUT operations

        :return: The is_deprecated of this Version.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this Version.

        Should this be deprecated? Only allowed in PUT operations

        :param is_deprecated: The is_deprecated of this Version.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def is_hidden(self):
        """Gets the is_hidden of this Version.

        Should this be publically accessible?

        :return: The is_hidden of this Version.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this Version.

        Should this be publically accessible?

        :param is_hidden: The is_hidden of this Version.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_stable(self):
        """Gets the is_stable of this Version.

        Should this be the **main** version

        :return: The is_stable of this Version.
        :rtype: bool
        """
        return self._is_stable

    @is_stable.setter
    def is_stable(self, is_stable):
        """Sets the is_stable of this Version.

        Should this be the **main** version

        :param is_stable: The is_stable of this Version.
        :type is_stable: bool
        """

        self._is_stable = is_stable

    @property
    def version(self):
        """Gets the version of this Version.

        Semantic Version

        :return: The version of this Version.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Version.

        Semantic Version

        :param version: The version of this Version.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
