# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Changelog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, hidden: bool=True, title: str=None, type: str=''):
        """Changelog - a model defined in OpenAPI

        :param body: The body of this Changelog.
        :param hidden: The hidden of this Changelog.
        :param title: The title of this Changelog.
        :param type: The type of this Changelog.
        """
        self.openapi_types = {
            'body': str,
            'hidden': bool,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'body': 'body',
            'hidden': 'hidden',
            'title': 'title',
            'type': 'type'
        }

        self._body = body
        self._hidden = hidden
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Changelog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Changelog of this Changelog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Changelog.

        Body content of the changelog

        :return: The body of this Changelog.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Changelog.

        Body content of the changelog

        :param body: The body of this Changelog.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def hidden(self):
        """Gets the hidden of this Changelog.

        Visibility of the changelog

        :return: The hidden of this Changelog.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Changelog.

        Visibility of the changelog

        :param hidden: The hidden of this Changelog.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def title(self):
        """Gets the title of this Changelog.

        Title of the changelog

        :return: The title of this Changelog.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Changelog.

        Title of the changelog

        :param title: The title of this Changelog.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Changelog.


        :return: The type of this Changelog.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Changelog.


        :param type: The type of this Changelog.
        :type type: str
        """
        allowed_values = ["", "added", "fixed", "improved", "deprecated", "removed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
