/*
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Doc;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDoc
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The doc has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocCall(String xReadmeVersion, Doc doc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = doc;

        // create path and map variables
        String localVarPath = "/docs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocValidateBeforeCall(String xReadmeVersion, Doc doc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling createDoc(Async)");
        }

        // verify the required parameter 'doc' is set
        if (doc == null) {
            throw new ApiException("Missing the required parameter 'doc' when calling createDoc(Async)");
        }

        return createDocCall(xReadmeVersion, doc, _callback);

    }

    /**
     * Create doc
     * Create a new doc inside of this project
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The doc has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public void createDoc(String xReadmeVersion, Doc doc) throws ApiException {
        createDocWithHttpInfo(xReadmeVersion, doc);
    }

    /**
     * Create doc
     * Create a new doc inside of this project
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The doc has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createDocWithHttpInfo(String xReadmeVersion, Doc doc) throws ApiException {
        okhttp3.Call localVarCall = createDocValidateBeforeCall(xReadmeVersion, doc, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create doc (asynchronously)
     * Create a new doc inside of this project
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The doc has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocAsync(String xReadmeVersion, Doc doc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocValidateBeforeCall(xReadmeVersion, doc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDoc
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocCall(String slug, String xReadmeVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docs/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocValidateBeforeCall(String slug, String xReadmeVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling deleteDoc(Async)");
        }

        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling deleteDoc(Async)");
        }

        return deleteDocCall(slug, xReadmeVersion, _callback);

    }

    /**
     * Delete doc
     * Delete the doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDoc(String slug, String xReadmeVersion) throws ApiException {
        deleteDocWithHttpInfo(slug, xReadmeVersion);
    }

    /**
     * Delete doc
     * Delete the doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocWithHttpInfo(String slug, String xReadmeVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteDocValidateBeforeCall(slug, xReadmeVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete doc (asynchronously)
     * Delete the doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocAsync(String slug, String xReadmeVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocValidateBeforeCall(slug, xReadmeVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDoc
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocCall(String slug, String xReadmeVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docs/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocValidateBeforeCall(String slug, String xReadmeVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getDoc(Async)");
        }

        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling getDoc(Async)");
        }

        return getDocCall(slug, xReadmeVersion, _callback);

    }

    /**
     * Get doc
     * Returns the doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void getDoc(String slug, String xReadmeVersion) throws ApiException {
        getDocWithHttpInfo(slug, xReadmeVersion);
    }

    /**
     * Get doc
     * Returns the doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDocWithHttpInfo(String slug, String xReadmeVersion) throws ApiException {
        okhttp3.Call localVarCall = getDocValidateBeforeCall(slug, xReadmeVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get doc (asynchronously)
     * Returns the doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocAsync(String slug, String xReadmeVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocValidateBeforeCall(slug, xReadmeVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDocs
     * @param search Search string to look for (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search was successful and results were returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDocsCall(String search, String xReadmeVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docs/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDocsValidateBeforeCall(String search, String xReadmeVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling searchDocs(Async)");
        }

        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling searchDocs(Async)");
        }

        return searchDocsCall(search, xReadmeVersion, _callback);

    }

    /**
     * Search docs
     * Returns all docs that match the search
     * @param search Search string to look for (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search was successful and results were returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an internal error </td><td>  -  </td></tr>
     </table>
     */
    public void searchDocs(String search, String xReadmeVersion) throws ApiException {
        searchDocsWithHttpInfo(search, xReadmeVersion);
    }

    /**
     * Search docs
     * Returns all docs that match the search
     * @param search Search string to look for (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search was successful and results were returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchDocsWithHttpInfo(String search, String xReadmeVersion) throws ApiException {
        okhttp3.Call localVarCall = searchDocsValidateBeforeCall(search, xReadmeVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search docs (asynchronously)
     * Returns all docs that match the search
     * @param search Search string to look for (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The search was successful and results were returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There is an internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDocsAsync(String search, String xReadmeVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDocsValidateBeforeCall(search, xReadmeVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDoc
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocCall(String slug, String xReadmeVersion, Doc doc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = doc;

        // create path and map variables
        String localVarPath = "/docs/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocValidateBeforeCall(String slug, String xReadmeVersion, Doc doc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling updateDoc(Async)");
        }

        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling updateDoc(Async)");
        }

        // verify the required parameter 'doc' is set
        if (doc == null) {
            throw new ApiException("Missing the required parameter 'doc' when calling updateDoc(Async)");
        }

        return updateDocCall(slug, xReadmeVersion, doc, _callback);

    }

    /**
     * Update doc
     * Update a doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void updateDoc(String slug, String xReadmeVersion, Doc doc) throws ApiException {
        updateDocWithHttpInfo(slug, xReadmeVersion, doc);
    }

    /**
     * Update doc
     * Update a doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateDocWithHttpInfo(String slug, String xReadmeVersion, Doc doc) throws ApiException {
        okhttp3.Call localVarCall = updateDocValidateBeforeCall(slug, xReadmeVersion, doc, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update doc (asynchronously)
     * Update a doc with this slug
     * @param slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \&quot;New Features\&quot;, enter the slug \&quot;new-features\&quot; (required)
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param doc Doc object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The doc has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no doc with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocAsync(String slug, String xReadmeVersion, Doc doc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocValidateBeforeCall(slug, xReadmeVersion, doc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
