/*
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiSpecificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiSpecificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiSpecificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAPISpecification
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The API specification was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPISpecificationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-specification/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAPISpecificationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAPISpecification(Async)");
        }

        return deleteAPISpecificationCall(id, _callback);

    }

    /**
     * 
     * Delete an API specification in ReadMe
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The API specification was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAPISpecification(String id) throws ApiException {
        deleteAPISpecificationWithHttpInfo(id);
    }

    /**
     * 
     * Delete an API specification in ReadMe
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The API specification was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAPISpecificationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteAPISpecificationValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an API specification in ReadMe
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The API specification was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPISpecificationAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAPISpecificationValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAPISpecification
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved API specification metadata. </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAPISpecificationCall(String xReadmeVersion, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-specification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPISpecificationValidateBeforeCall(String xReadmeVersion, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling getAPISpecification(Async)");
        }

        return getAPISpecificationCall(xReadmeVersion, perPage, page, _callback);

    }

    /**
     * 
     * Get API specification metadata
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved API specification metadata. </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public void getAPISpecification(String xReadmeVersion, Integer perPage, Integer page) throws ApiException {
        getAPISpecificationWithHttpInfo(xReadmeVersion, perPage, page);
    }

    /**
     * 
     * Get API specification metadata
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved API specification metadata. </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAPISpecificationWithHttpInfo(String xReadmeVersion, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAPISpecificationValidateBeforeCall(xReadmeVersion, perPage, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get API specification metadata
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved API specification metadata. </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAPISpecificationAsync(String xReadmeVersion, Integer perPage, Integer page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPISpecificationValidateBeforeCall(xReadmeVersion, perPage, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAPISpecification
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API specification was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAPISpecificationCall(String id, File spec, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-specification/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (spec != null) {
            localVarFormParams.put("spec", spec);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAPISpecificationValidateBeforeCall(String id, File spec, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAPISpecification(Async)");
        }

        return updateAPISpecificationCall(id, spec, _callback);

    }

    /**
     * 
     * Update an API specification in ReadMe
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API specification was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public void updateAPISpecification(String id, File spec) throws ApiException {
        updateAPISpecificationWithHttpInfo(id, spec);
    }

    /**
     * 
     * Update an API specification in ReadMe
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API specification was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAPISpecificationWithHttpInfo(String id, File spec) throws ApiException {
        okhttp3.Call localVarCall = updateAPISpecificationValidateBeforeCall(id, spec, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update an API specification in ReadMe
     * @param id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The API specification was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no API specification with that ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAPISpecificationAsync(String id, File spec, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAPISpecificationValidateBeforeCall(id, spec, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadAPISpecification
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API specification successfully imported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAPISpecificationCall(String xReadmeVersion, File spec, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-specification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (spec != null) {
            localVarFormParams.put("spec", spec);
        }

        if (xReadmeVersion != null) {
            localVarHeaderParams.put("x-readme-version", localVarApiClient.parameterToString(xReadmeVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAPISpecificationValidateBeforeCall(String xReadmeVersion, File spec, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xReadmeVersion' is set
        if (xReadmeVersion == null) {
            throw new ApiException("Missing the required parameter 'xReadmeVersion' when calling uploadAPISpecification(Async)");
        }

        return uploadAPISpecificationCall(xReadmeVersion, spec, _callback);

    }

    /**
     * 
     * Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API specification successfully imported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
     </table>
     */
    public void uploadAPISpecification(String xReadmeVersion, File spec) throws ApiException {
        uploadAPISpecificationWithHttpInfo(xReadmeVersion, spec);
    }

    /**
     * 
     * Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API specification successfully imported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadAPISpecificationWithHttpInfo(String xReadmeVersion, File spec) throws ApiException {
        okhttp3.Call localVarCall = uploadAPISpecificationValidateBeforeCall(xReadmeVersion, spec, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github
     * @param xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions. (required)
     * @param spec OpenAPI/Swagger file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The API specification successfully imported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during import </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAPISpecificationAsync(String xReadmeVersion, File spec, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAPISpecificationValidateBeforeCall(xReadmeVersion, spec, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
