/*
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Version;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VersionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VersionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VersionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVersion
     * @param version Version object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model was successfully created and associated with the target project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> That version already exists in the project, or there are validation errors with the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target fork in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVersionCall(Version version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = version;

        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVersionValidateBeforeCall(Version version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createVersion(Async)");
        }

        return createVersionCall(version, _callback);

    }

    /**
     * Create version
     * Create a new version
     * @param version Version object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model was successfully created and associated with the target project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> That version already exists in the project, or there are validation errors with the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target fork in database </td><td>  -  </td></tr>
     </table>
     */
    public void createVersion(Version version) throws ApiException {
        createVersionWithHttpInfo(version);
    }

    /**
     * Create version
     * Create a new version
     * @param version Version object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model was successfully created and associated with the target project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> That version already exists in the project, or there are validation errors with the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target fork in database </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createVersionWithHttpInfo(Version version) throws ApiException {
        okhttp3.Call localVarCall = createVersionValidateBeforeCall(version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create version (asynchronously)
     * Create a new version
     * @param version Version object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model was successfully created and associated with the target project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> That version already exists in the project, or there are validation errors with the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target fork in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVersionAsync(Version version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVersionValidateBeforeCall(version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVersion
     * @param versionId Semver version indentifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot delete the main version for a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVersionCall(String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version/{versionId}"
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVersionValidateBeforeCall(String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteVersion(Async)");
        }

        return deleteVersionCall(versionId, _callback);

    }

    /**
     * Delete version
     * Delete a version
     * @param versionId Semver version indentifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot delete the main version for a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVersion(String versionId) throws ApiException {
        deleteVersionWithHttpInfo(versionId);
    }

    /**
     * Delete version
     * Delete a version
     * @param versionId Semver version indentifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot delete the main version for a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVersionWithHttpInfo(String versionId) throws ApiException {
        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(versionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete version (asynchronously)
     * Delete a version
     * @param versionId Semver version indentifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot delete the main version for a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVersionAsync(String versionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVersionValidateBeforeCall(versionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersion
     * @param versionId Semver version indentifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON version model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionCall(String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version/{versionId}"
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionValidateBeforeCall(String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersion(Async)");
        }

        return getVersionCall(versionId, _callback);

    }

    /**
     * Get version
     * Returns the version with this version ID
     * @param versionId Semver version indentifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON version model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public void getVersion(String versionId) throws ApiException {
        getVersionWithHttpInfo(versionId);
    }

    /**
     * Get version
     * Returns the version with this version ID
     * @param versionId Semver version indentifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON version model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVersionWithHttpInfo(String versionId) throws ApiException {
        okhttp3.Call localVarCall = getVersionValidateBeforeCall(versionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get version (asynchronously)
     * Returns the version with this version ID
     * @param versionId Semver version indentifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON version model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionAsync(String versionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionValidateBeforeCall(versionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of versions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getVersionsCall(_callback);

    }

    /**
     * Get versions
     * Retrieve a list of versions associated with a project API key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of versions </td><td>  -  </td></tr>
     </table>
     */
    public void getVersions() throws ApiException {
        getVersionsWithHttpInfo();
    }

    /**
     * Get versions
     * Retrieve a list of versions associated with a project API key
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of versions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVersionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVersionsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get versions (asynchronously)
     * Retrieve a list of versions associated with a project API key
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON list of versions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVersion
     * @param versionId Semver version indentifier (required)
     * @param version Version object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot demote a version through update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVersionCall(String versionId, Version version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = version;

        // create path and map variables
        String localVarPath = "/version/{versionId}"
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVersionValidateBeforeCall(String versionId, Version version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling updateVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateVersion(Async)");
        }

        return updateVersionCall(versionId, version, _callback);

    }

    /**
     * Update version
     * Update an existing version
     * @param versionId Semver version indentifier (required)
     * @param version Version object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot demote a version through update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public void updateVersion(String versionId, Version version) throws ApiException {
        updateVersionWithHttpInfo(versionId, version);
    }

    /**
     * Update version
     * Update an existing version
     * @param versionId Semver version indentifier (required)
     * @param version Version object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot demote a version through update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateVersionWithHttpInfo(String versionId, Version version) throws ApiException {
        okhttp3.Call localVarCall = updateVersionValidateBeforeCall(versionId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update version (asynchronously)
     * Update an existing version
     * @param versionId Semver version indentifier (required)
     * @param version Version object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The target version was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot demote a version through update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find target version in database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVersionAsync(String versionId, Version version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVersionValidateBeforeCall(versionId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
