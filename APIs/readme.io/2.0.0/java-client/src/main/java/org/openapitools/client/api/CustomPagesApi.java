/*
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomPagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomPagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomPagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomPage
     * @param customPage CustomPage object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom page has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomPageCall(CustomPage customPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customPage;

        // create path and map variables
        String localVarPath = "/custompages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomPageValidateBeforeCall(CustomPage customPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customPage' is set
        if (customPage == null) {
            throw new ApiException("Missing the required parameter 'customPage' when calling createCustomPage(Async)");
        }

        return createCustomPageCall(customPage, _callback);

    }

    /**
     * Create custom page
     * Create a new custom page inside of this project
     * @param customPage CustomPage object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom page has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public void createCustomPage(CustomPage customPage) throws ApiException {
        createCustomPageWithHttpInfo(customPage);
    }

    /**
     * Create custom page
     * Create a new custom page inside of this project
     * @param customPage CustomPage object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom page has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createCustomPageWithHttpInfo(CustomPage customPage) throws ApiException {
        okhttp3.Call localVarCall = createCustomPageValidateBeforeCall(customPage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create custom page (asynchronously)
     * Create a new custom page inside of this project
     * @param customPage CustomPage object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom page has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomPageAsync(CustomPage customPage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomPageValidateBeforeCall(customPage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomPage
     * @param slug Slug of custom page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomPageCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custompages/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomPageValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling deleteCustomPage(Async)");
        }

        return deleteCustomPageCall(slug, _callback);

    }

    /**
     * Delete custom page
     * Delete the custom page with this slug
     * @param slug Slug of custom page (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomPage(String slug) throws ApiException {
        deleteCustomPageWithHttpInfo(slug);
    }

    /**
     * Delete custom page
     * Delete the custom page with this slug
     * @param slug Slug of custom page (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomPageWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomPageValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete custom page (asynchronously)
     * Delete the custom page with this slug
     * @param slug Slug of custom page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomPageAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomPageValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomPage
     * @param slug Slug of custom page (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomPageCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custompages/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomPageValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getCustomPage(Async)");
        }

        return getCustomPageCall(slug, _callback);

    }

    /**
     * Get custom page
     * Returns the custom page with this slug
     * @param slug Slug of custom page (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void getCustomPage(String slug) throws ApiException {
        getCustomPageWithHttpInfo(slug);
    }

    /**
     * Get custom page
     * Returns the custom page with this slug
     * @param slug Slug of custom page (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCustomPageWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = getCustomPageValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get custom page (asynchronously)
     * Returns the custom page with this slug
     * @param slug Slug of custom page (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomPageAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomPageValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomPages
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomPagesCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custompages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomPagesValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return getCustomPagesCall(perPage, page, _callback);

    }

    /**
     * Get custom pages
     * Returns a list of custom pages associated with the project API key
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public void getCustomPages(Integer perPage, Integer page) throws ApiException {
        getCustomPagesWithHttpInfo(perPage, page);
    }

    /**
     * Get custom pages
     * Returns a list of custom pages associated with the project API key
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCustomPagesWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getCustomPagesValidateBeforeCall(perPage, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get custom pages (asynchronously)
     * Returns a list of custom pages associated with the project API key
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomPagesAsync(Integer perPage, Integer page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomPagesValidateBeforeCall(perPage, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomPage
     * @param slug Slug of custom page (required)
     * @param customPage CustomPage object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomPageCall(String slug, CustomPage customPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customPage;

        // create path and map variables
        String localVarPath = "/custompages/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomPageValidateBeforeCall(String slug, CustomPage customPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling updateCustomPage(Async)");
        }

        // verify the required parameter 'customPage' is set
        if (customPage == null) {
            throw new ApiException("Missing the required parameter 'customPage' when calling updateCustomPage(Async)");
        }

        return updateCustomPageCall(slug, customPage, _callback);

    }

    /**
     * Update custom page
     * Update a custom page with this slug
     * @param slug Slug of custom page (required)
     * @param customPage CustomPage object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void updateCustomPage(String slug, CustomPage customPage) throws ApiException {
        updateCustomPageWithHttpInfo(slug, customPage);
    }

    /**
     * Update custom page
     * Update a custom page with this slug
     * @param slug Slug of custom page (required)
     * @param customPage CustomPage object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCustomPageWithHttpInfo(String slug, CustomPage customPage) throws ApiException {
        okhttp3.Call localVarCall = updateCustomPageValidateBeforeCall(slug, customPage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update custom page (asynchronously)
     * Update a custom page with this slug
     * @param slug Slug of custom page (required)
     * @param customPage CustomPage object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom page has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no custom page with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomPageAsync(String slug, CustomPage customPage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomPageValidateBeforeCall(slug, customPage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
