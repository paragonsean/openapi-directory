/*
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Changelog;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChangelogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChangelogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChangelogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createChangelog
     * @param changelog Changelog object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The changelog has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChangelogCall(Changelog changelog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changelog;

        // create path and map variables
        String localVarPath = "/changelogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChangelogValidateBeforeCall(Changelog changelog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changelog' is set
        if (changelog == null) {
            throw new ApiException("Missing the required parameter 'changelog' when calling createChangelog(Async)");
        }

        return createChangelogCall(changelog, _callback);

    }

    /**
     * Create changelog
     * Create a new changelog inside of this project
     * @param changelog Changelog object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The changelog has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public void createChangelog(Changelog changelog) throws ApiException {
        createChangelogWithHttpInfo(changelog);
    }

    /**
     * Create changelog
     * Create a new changelog inside of this project
     * @param changelog Changelog object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The changelog has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createChangelogWithHttpInfo(Changelog changelog) throws ApiException {
        okhttp3.Call localVarCall = createChangelogValidateBeforeCall(changelog, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create changelog (asynchronously)
     * Create a new changelog inside of this project
     * @param changelog Changelog object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The changelog has successfully been created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during creation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChangelogAsync(Changelog changelog, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChangelogValidateBeforeCall(changelog, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChangelog
     * @param slug Slug of changelog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChangelogCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelogs/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChangelogValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling deleteChangelog(Async)");
        }

        return deleteChangelogCall(slug, _callback);

    }

    /**
     * Delete changelog
     * Delete the changelog with this slug
     * @param slug Slug of changelog (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChangelog(String slug) throws ApiException {
        deleteChangelogWithHttpInfo(slug);
    }

    /**
     * Delete changelog
     * Delete the changelog with this slug
     * @param slug Slug of changelog (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChangelogWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = deleteChangelogValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete changelog (asynchronously)
     * Delete the changelog with this slug
     * @param slug Slug of changelog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChangelogAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChangelogValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChangelog
     * @param slug Slug of changelog (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangelogCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelogs/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangelogValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getChangelog(Async)");
        }

        return getChangelogCall(slug, _callback);

    }

    /**
     * Get changelog
     * Returns the changelog with this slug
     * @param slug Slug of changelog (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void getChangelog(String slug) throws ApiException {
        getChangelogWithHttpInfo(slug);
    }

    /**
     * Get changelog
     * Returns the changelog with this slug
     * @param slug Slug of changelog (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getChangelogWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = getChangelogValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get changelog (asynchronously)
     * Returns the changelog with this slug
     * @param slug Slug of changelog (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog exists and has been returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangelogAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangelogValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChangelogs
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChangelogsCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangelogsValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return getChangelogsCall(perPage, page, _callback);

    }

    /**
     * Get changelogs
     * Returns a list of changelogs associated with the project API key
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public void getChangelogs(Integer perPage, Integer page) throws ApiException {
        getChangelogsWithHttpInfo(perPage, page);
    }

    /**
     * Get changelogs
     * Returns a list of changelogs associated with the project API key
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> getChangelogsWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getChangelogsValidateBeforeCall(perPage, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get changelogs (asynchronously)
     * Returns a list of changelogs associated with the project API key
     * @param perPage Number of items to include in pagination (up to 100, defaults to 10) (optional, default to 10)
     * @param page Used to specify further pages (starts at 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getChangelogsAsync(Integer perPage, Integer page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangelogsValidateBeforeCall(perPage, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChangelog
     * @param slug Slug of changelog (required)
     * @param changelog Changelog object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChangelogCall(String slug, Changelog changelog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changelog;

        // create path and map variables
        String localVarPath = "/changelogs/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChangelogValidateBeforeCall(String slug, Changelog changelog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling updateChangelog(Async)");
        }

        // verify the required parameter 'changelog' is set
        if (changelog == null) {
            throw new ApiException("Missing the required parameter 'changelog' when calling updateChangelog(Async)");
        }

        return updateChangelogCall(slug, changelog, _callback);

    }

    /**
     * Update changelog
     * Update a changelog with this slug
     * @param slug Slug of changelog (required)
     * @param changelog Changelog object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public void updateChangelog(String slug, Changelog changelog) throws ApiException {
        updateChangelogWithHttpInfo(slug, changelog);
    }

    /**
     * Update changelog
     * Update a changelog with this slug
     * @param slug Slug of changelog (required)
     * @param changelog Changelog object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateChangelogWithHttpInfo(String slug, Changelog changelog) throws ApiException {
        okhttp3.Call localVarCall = updateChangelogValidateBeforeCall(slug, changelog, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update changelog (asynchronously)
     * Update a changelog with this slug
     * @param slug Slug of changelog (required)
     * @param changelog Changelog object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changelog has successfully been updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There was a validation error during update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no changelog with that slug </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChangelogAsync(String slug, Changelog changelog, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChangelogValidateBeforeCall(slug, changelog, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
