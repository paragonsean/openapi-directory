/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* APISpecification service.
* @module api/APISpecificationApi
* @version 2.0.0
*/
export default class APISpecificationApi {

    /**
    * Constructs a new APISpecificationApi. 
    * @alias module:api/APISpecificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAPISpecification operation.
     * @callback module:api/APISpecificationApi~deleteAPISpecificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API specification in ReadMe
     * @param {String} id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page.
     * @param {module:api/APISpecificationApi~deleteAPISpecificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAPISpecification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAPISpecification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api-specification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAPISpecification operation.
     * @callback module:api/APISpecificationApi~getAPISpecificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API specification metadata
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 10)] Number of items to include in pagination (up to 100, defaults to 10)
     * @param {Number} [page = 1)] Used to specify further pages (starts at 1)
     * @param {module:api/APISpecificationApi~getAPISpecificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAPISpecification(xReadmeVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling getAPISpecification");
      }

      let pathParams = {
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api-specification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAPISpecification operation.
     * @callback module:api/APISpecificationApi~updateAPISpecificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an API specification in ReadMe
     * @param {String} id ID of the API specification. The unique ID for each API can be found by navigating to your **API Definitions** page.
     * @param {Object} opts Optional parameters
     * @param {File} [spec] OpenAPI/Swagger file
     * @param {module:api/APISpecificationApi~updateAPISpecificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAPISpecification(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAPISpecification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'spec': opts['spec']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api-specification/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAPISpecification operation.
     * @callback module:api/APISpecificationApi~uploadAPISpecificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {Object} opts Optional parameters
     * @param {File} [spec] OpenAPI/Swagger file
     * @param {module:api/APISpecificationApi~uploadAPISpecificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadAPISpecification(xReadmeVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling uploadAPISpecification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
        'spec': opts['spec']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api-specification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
