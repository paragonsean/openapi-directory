/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Changelog from '../model/Changelog';

/**
* Changelog service.
* @module api/ChangelogApi
* @version 2.0.0
*/
export default class ChangelogApi {

    /**
    * Constructs a new ChangelogApi. 
    * @alias module:api/ChangelogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChangelog operation.
     * @callback module:api/ChangelogApi~createChangelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create changelog
     * Create a new changelog inside of this project
     * @param {module:model/Changelog} changelog Changelog object
     * @param {module:api/ChangelogApi~createChangelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createChangelog(changelog, callback) {
      let postBody = changelog;
      // verify the required parameter 'changelog' is set
      if (changelog === undefined || changelog === null) {
        throw new Error("Missing the required parameter 'changelog' when calling createChangelog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChangelog operation.
     * @callback module:api/ChangelogApi~deleteChangelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete changelog
     * Delete the changelog with this slug
     * @param {String} slug Slug of changelog
     * @param {module:api/ChangelogApi~deleteChangelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChangelog(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling deleteChangelog");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelogs/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangelog operation.
     * @callback module:api/ChangelogApi~getChangelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get changelog
     * Returns the changelog with this slug
     * @param {String} slug Slug of changelog
     * @param {module:api/ChangelogApi~getChangelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChangelog(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getChangelog");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelogs/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangelogs operation.
     * @callback module:api/ChangelogApi~getChangelogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get changelogs
     * Returns a list of changelogs associated with the project API key
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 10)] Number of items to include in pagination (up to 100, defaults to 10)
     * @param {Number} [page = 1)] Used to specify further pages (starts at 1)
     * @param {module:api/ChangelogApi~getChangelogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChangelogs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChangelog operation.
     * @callback module:api/ChangelogApi~updateChangelogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update changelog
     * Update a changelog with this slug
     * @param {String} slug Slug of changelog
     * @param {module:model/Changelog} changelog Changelog object
     * @param {module:api/ChangelogApi~updateChangelogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChangelog(slug, changelog, callback) {
      let postBody = changelog;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling updateChangelog");
      }
      // verify the required parameter 'changelog' is set
      if (changelog === undefined || changelog === null) {
        throw new Error("Missing the required parameter 'changelog' when calling updateChangelog");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/changelogs/{slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
