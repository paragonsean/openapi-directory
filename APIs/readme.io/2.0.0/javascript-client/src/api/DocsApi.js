/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Doc from '../model/Doc';

/**
* Docs service.
* @module api/DocsApi
* @version 2.0.0
*/
export default class DocsApi {

    /**
    * Constructs a new DocsApi. 
    * @alias module:api/DocsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDoc operation.
     * @callback module:api/DocsApi~createDocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create doc
     * Create a new doc inside of this project
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {module:model/Doc} doc Doc object
     * @param {module:api/DocsApi~createDocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDoc(xReadmeVersion, doc, callback) {
      let postBody = doc;
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling createDoc");
      }
      // verify the required parameter 'doc' is set
      if (doc === undefined || doc === null) {
        throw new Error("Missing the required parameter 'doc' when calling createDoc");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/docs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDoc operation.
     * @callback module:api/DocsApi~deleteDocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete doc
     * Delete the doc with this slug
     * @param {String} slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {module:api/DocsApi~deleteDocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDoc(slug, xReadmeVersion, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling deleteDoc");
      }
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling deleteDoc");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/docs/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDoc operation.
     * @callback module:api/DocsApi~getDocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get doc
     * Returns the doc with this slug
     * @param {String} slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {module:api/DocsApi~getDocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDoc(slug, xReadmeVersion, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getDoc");
      }
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling getDoc");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/docs/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDocs operation.
     * @callback module:api/DocsApi~searchDocsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search docs
     * Returns all docs that match the search
     * @param {String} search Search string to look for
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {module:api/DocsApi~searchDocsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchDocs(search, xReadmeVersion, callback) {
      let postBody = null;
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling searchDocs");
      }
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling searchDocs");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': search
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/docs/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDoc operation.
     * @callback module:api/DocsApi~updateDocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update doc
     * Update a doc with this slug
     * @param {String} slug Slug of doc. must be lowercase, and replace spaces with hyphens. For example, for the page titled \"New Features\", enter the slug \"new-features\"
     * @param {String} xReadmeVersion Version number of your docs project, for example, v3.0. To see all valid versions for your docs project call https://docs.readme.com/developers/reference/version#getversions.
     * @param {module:model/Doc} doc Doc object
     * @param {module:api/DocsApi~updateDocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDoc(slug, xReadmeVersion, doc, callback) {
      let postBody = doc;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling updateDoc");
      }
      // verify the required parameter 'xReadmeVersion' is set
      if (xReadmeVersion === undefined || xReadmeVersion === null) {
        throw new Error("Missing the required parameter 'xReadmeVersion' when calling updateDoc");
      }
      // verify the required parameter 'doc' is set
      if (doc === undefined || doc === null) {
        throw new Error("Missing the required parameter 'doc' when calling updateDoc");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
        'x-readme-version': xReadmeVersion
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/docs/{slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
