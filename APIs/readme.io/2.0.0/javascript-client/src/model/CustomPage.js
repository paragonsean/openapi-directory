/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomPage model module.
 * @module model/CustomPage
 * @version 2.0.0
 */
class CustomPage {
    /**
     * Constructs a new <code>CustomPage</code>.
     * @alias module:model/CustomPage
     * @param title {String} Title of the custom page
     */
    constructor(title) { 
        
        CustomPage.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['hidden'] = true;
        obj['htmlmode'] = false;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>CustomPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomPage} obj Optional instance to populate.
     * @return {module:model/CustomPage} The populated <code>CustomPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomPage();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('htmlmode')) {
                obj['htmlmode'] = ApiClient.convertToType(data['htmlmode'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomPage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomPage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

CustomPage.RequiredProperties = ["title"];

/**
 * Body formatted in Markdown (displayed by default).
 * @member {String} body
 */
CustomPage.prototype['body'] = undefined;

/**
 * Visibility of the custom page
 * @member {Boolean} hidden
 * @default true
 */
CustomPage.prototype['hidden'] = true;

/**
 * Body formatted in HTML (sanitized, only displayed if `htmlmode` is **true**).
 * @member {String} html
 */
CustomPage.prototype['html'] = undefined;

/**
 * **true** if `html` should be displayed, **false** if `body` should be displayed.
 * @member {Boolean} htmlmode
 * @default false
 */
CustomPage.prototype['htmlmode'] = false;

/**
 * Title of the custom page
 * @member {String} title
 */
CustomPage.prototype['title'] = undefined;






export default CustomPage;

