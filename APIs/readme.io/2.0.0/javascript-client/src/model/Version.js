/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Version model module.
 * @module model/Version
 * @version 2.0.0
 */
class Version {
    /**
     * Constructs a new <code>Version</code>.
     * @alias module:model/Version
     * @param from {String} Semantic Version to use as the base fork
     * @param version {String} Semantic Version
     */
    constructor(from, version) { 
        
        Version.initialize(this, from, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, version) { 
        obj['from'] = from;
        obj['is_beta'] = true;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Version</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Version} obj Optional instance to populate.
     * @return {module:model/Version} The populated <code>Version</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Version();

            if (data.hasOwnProperty('codename')) {
                obj['codename'] = ApiClient.convertToType(data['codename'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('is_beta')) {
                obj['is_beta'] = ApiClient.convertToType(data['is_beta'], 'Boolean');
            }
            if (data.hasOwnProperty('is_deprecated')) {
                obj['is_deprecated'] = ApiClient.convertToType(data['is_deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('is_hidden')) {
                obj['is_hidden'] = ApiClient.convertToType(data['is_hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('is_stable')) {
                obj['is_stable'] = ApiClient.convertToType(data['is_stable'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Version</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Version</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Version.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['codename'] && !(typeof data['codename'] === 'string' || data['codename'] instanceof String)) {
            throw new Error("Expected the field `codename` to be a primitive type in the JSON string but got " + data['codename']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Version.RequiredProperties = ["from", "version"];

/**
 * Dubbed name of version
 * @member {String} codename
 */
Version.prototype['codename'] = undefined;

/**
 * Semantic Version to use as the base fork
 * @member {String} from
 */
Version.prototype['from'] = undefined;

/**
 * @member {Boolean} is_beta
 * @default true
 */
Version.prototype['is_beta'] = true;

/**
 * Should this be deprecated? Only allowed in PUT operations
 * @member {Boolean} is_deprecated
 */
Version.prototype['is_deprecated'] = undefined;

/**
 * Should this be publically accessible?
 * @member {Boolean} is_hidden
 */
Version.prototype['is_hidden'] = undefined;

/**
 * Should this be the **main** version
 * @member {Boolean} is_stable
 */
Version.prototype['is_stable'] = undefined;

/**
 * Semantic Version
 * @member {String} version
 */
Version.prototype['version'] = undefined;






export default Version;

