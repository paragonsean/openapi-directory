/**
 * API Endpoints
 * Create beautiful product and API documentation with our developer friendly platform.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Doc model module.
 * @module model/Doc
 * @version 2.0.0
 */
class Doc {
    /**
     * Constructs a new <code>Doc</code>.
     * @alias module:model/Doc
     * @param category {String} Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory 
     * @param title {String} Title of the page
     */
    constructor(category, title) { 
        
        Doc.initialize(this, category, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, title) { 
        obj['category'] = category;
        obj['hidden'] = true;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Doc</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Doc} obj Optional instance to populate.
     * @return {module:model/Doc} The populated <code>Doc</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Doc();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('parentDoc')) {
                obj['parentDoc'] = ApiClient.convertToType(data['parentDoc'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Doc</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Doc</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Doc.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['parentDoc'] && !(typeof data['parentDoc'] === 'string' || data['parentDoc'] instanceof String)) {
            throw new Error("Expected the field `parentDoc` to be a primitive type in the JSON string but got " + data['parentDoc']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Doc.RequiredProperties = ["category", "title"];

/**
 * Body content of the page, formatted in ReadMe or Github flavored Markdown. Accepts long page content, for example, greater than 100k characters
 * @member {String} body
 */
Doc.prototype['body'] = undefined;

/**
 * Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory 
 * @member {String} category
 */
Doc.prototype['category'] = undefined;

/**
 * Visibility of the page
 * @member {Boolean} hidden
 * @default true
 */
Doc.prototype['hidden'] = true;

/**
 * For a subpage, specify the parent doc ID, which you can get through https://docs.readme.com/developers/reference/docs#getdoc
 * @member {String} parentDoc
 */
Doc.prototype['parentDoc'] = undefined;

/**
 * Title of the page
 * @member {String} title
 */
Doc.prototype['title'] = undefined;

/**
 * Type of the page. The available types all show up under the /docs/ URL path of your docs project (also known as the \"guides\" section). Can be \"basic\" (most common), \"error\" (page desribing an API error), or \"link\" (page that redirects to an external link)
 * @member {module:model/Doc.TypeEnum} type
 */
Doc.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Doc['TypeEnum'] = {

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "link"
     * @const
     */
    "link": "link"
};



export default Doc;

