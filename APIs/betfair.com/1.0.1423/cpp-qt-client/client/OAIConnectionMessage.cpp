/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMessage::OAIConnectionMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMessage::OAIConnectionMessage() {
    this->initializeModel();
}

OAIConnectionMessage::~OAIConnectionMessage() {}

void OAIConnectionMessage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;
}

void OAIConnectionMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMessage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;
}

QString OAIConnectionMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    return obj;
}

qint32 OAIConnectionMessage::getId() const {
    return m_id;
}
void OAIConnectionMessage::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectionMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectionMessage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnectionMessage::getOp() const {
    return m_op;
}
void OAIConnectionMessage::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIConnectionMessage::is_op_Set() const{
    return m_op_isSet;
}

bool OAIConnectionMessage::is_op_Valid() const{
    return m_op_isValid;
}

QString OAIConnectionMessage::getConnectionId() const {
    return m_connection_id;
}
void OAIConnectionMessage::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIConnectionMessage::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIConnectionMessage::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

bool OAIConnectionMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
