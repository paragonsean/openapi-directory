/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketChange::OAIMarketChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketChange::OAIMarketChange() {
    this->initializeModel();
}

OAIMarketChange::~OAIMarketChange() {}

void OAIMarketChange::initializeModel() {

    m_con_isSet = false;
    m_con_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_img_isSet = false;
    m_img_isValid = false;

    m_market_definition_isSet = false;
    m_market_definition_isValid = false;

    m_rc_isSet = false;
    m_rc_isValid = false;

    m_tv_isSet = false;
    m_tv_isValid = false;
}

void OAIMarketChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketChange::fromJsonObject(QJsonObject json) {

    m_con_isValid = ::OpenAPI::fromJsonValue(m_con, json[QString("con")]);
    m_con_isSet = !json[QString("con")].isNull() && m_con_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_img_isValid = ::OpenAPI::fromJsonValue(m_img, json[QString("img")]);
    m_img_isSet = !json[QString("img")].isNull() && m_img_isValid;

    m_market_definition_isValid = ::OpenAPI::fromJsonValue(m_market_definition, json[QString("marketDefinition")]);
    m_market_definition_isSet = !json[QString("marketDefinition")].isNull() && m_market_definition_isValid;

    m_rc_isValid = ::OpenAPI::fromJsonValue(m_rc, json[QString("rc")]);
    m_rc_isSet = !json[QString("rc")].isNull() && m_rc_isValid;

    m_tv_isValid = ::OpenAPI::fromJsonValue(m_tv, json[QString("tv")]);
    m_tv_isSet = !json[QString("tv")].isNull() && m_tv_isValid;
}

QString OAIMarketChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketChange::asJsonObject() const {
    QJsonObject obj;
    if (m_con_isSet) {
        obj.insert(QString("con"), ::OpenAPI::toJsonValue(m_con));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_img_isSet) {
        obj.insert(QString("img"), ::OpenAPI::toJsonValue(m_img));
    }
    if (m_market_definition.isSet()) {
        obj.insert(QString("marketDefinition"), ::OpenAPI::toJsonValue(m_market_definition));
    }
    if (m_rc.size() > 0) {
        obj.insert(QString("rc"), ::OpenAPI::toJsonValue(m_rc));
    }
    if (m_tv_isSet) {
        obj.insert(QString("tv"), ::OpenAPI::toJsonValue(m_tv));
    }
    return obj;
}

bool OAIMarketChange::isCon() const {
    return m_con;
}
void OAIMarketChange::setCon(const bool &con) {
    m_con = con;
    m_con_isSet = true;
}

bool OAIMarketChange::is_con_Set() const{
    return m_con_isSet;
}

bool OAIMarketChange::is_con_Valid() const{
    return m_con_isValid;
}

QString OAIMarketChange::getId() const {
    return m_id;
}
void OAIMarketChange::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMarketChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMarketChange::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMarketChange::isImg() const {
    return m_img;
}
void OAIMarketChange::setImg(const bool &img) {
    m_img = img;
    m_img_isSet = true;
}

bool OAIMarketChange::is_img_Set() const{
    return m_img_isSet;
}

bool OAIMarketChange::is_img_Valid() const{
    return m_img_isValid;
}

OAIMarketDefinition OAIMarketChange::getMarketDefinition() const {
    return m_market_definition;
}
void OAIMarketChange::setMarketDefinition(const OAIMarketDefinition &market_definition) {
    m_market_definition = market_definition;
    m_market_definition_isSet = true;
}

bool OAIMarketChange::is_market_definition_Set() const{
    return m_market_definition_isSet;
}

bool OAIMarketChange::is_market_definition_Valid() const{
    return m_market_definition_isValid;
}

QList<OAIRunnerChange> OAIMarketChange::getRc() const {
    return m_rc;
}
void OAIMarketChange::setRc(const QList<OAIRunnerChange> &rc) {
    m_rc = rc;
    m_rc_isSet = true;
}

bool OAIMarketChange::is_rc_Set() const{
    return m_rc_isSet;
}

bool OAIMarketChange::is_rc_Valid() const{
    return m_rc_isValid;
}

double OAIMarketChange::getTv() const {
    return m_tv;
}
void OAIMarketChange::setTv(const double &tv) {
    m_tv = tv;
    m_tv_isSet = true;
}

bool OAIMarketChange::is_tv_Set() const{
    return m_tv_isSet;
}

bool OAIMarketChange::is_tv_Valid() const{
    return m_tv_isValid;
}

bool OAIMarketChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_con_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
