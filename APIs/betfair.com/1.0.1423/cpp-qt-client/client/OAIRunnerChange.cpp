/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunnerChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunnerChange::OAIRunnerChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunnerChange::OAIRunnerChange() {
    this->initializeModel();
}

OAIRunnerChange::~OAIRunnerChange() {}

void OAIRunnerChange::initializeModel() {

    m_atb_isSet = false;
    m_atb_isValid = false;

    m_atl_isSet = false;
    m_atl_isValid = false;

    m_batb_isSet = false;
    m_batb_isValid = false;

    m_batl_isSet = false;
    m_batl_isValid = false;

    m_bdatb_isSet = false;
    m_bdatb_isValid = false;

    m_bdatl_isSet = false;
    m_bdatl_isValid = false;

    m_hc_isSet = false;
    m_hc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ltp_isSet = false;
    m_ltp_isValid = false;

    m_spb_isSet = false;
    m_spb_isValid = false;

    m_spf_isSet = false;
    m_spf_isValid = false;

    m_spl_isSet = false;
    m_spl_isValid = false;

    m_spn_isSet = false;
    m_spn_isValid = false;

    m_trd_isSet = false;
    m_trd_isValid = false;

    m_tv_isSet = false;
    m_tv_isValid = false;
}

void OAIRunnerChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunnerChange::fromJsonObject(QJsonObject json) {

    if(json["atb"].isArray()){
        auto arr = json["atb"].toArray();
        m_atb_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_atb_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_atb_isSet = !jval.isNull() && m_atb_isValid;
                m_atb.push_back(item);
            }
        }
    }

    if(json["atl"].isArray()){
        auto arr = json["atl"].toArray();
        m_atl_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_atl_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_atl_isSet = !jval.isNull() && m_atl_isValid;
                m_atl.push_back(item);
            }
        }
    }

    if(json["batb"].isArray()){
        auto arr = json["batb"].toArray();
        m_batb_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_batb_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_batb_isSet = !jval.isNull() && m_batb_isValid;
                m_batb.push_back(item);
            }
        }
    }

    if(json["batl"].isArray()){
        auto arr = json["batl"].toArray();
        m_batl_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_batl_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_batl_isSet = !jval.isNull() && m_batl_isValid;
                m_batl.push_back(item);
            }
        }
    }

    if(json["bdatb"].isArray()){
        auto arr = json["bdatb"].toArray();
        m_bdatb_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_bdatb_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_bdatb_isSet = !jval.isNull() && m_bdatb_isValid;
                m_bdatb.push_back(item);
            }
        }
    }

    if(json["bdatl"].isArray()){
        auto arr = json["bdatl"].toArray();
        m_bdatl_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_bdatl_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_bdatl_isSet = !jval.isNull() && m_bdatl_isValid;
                m_bdatl.push_back(item);
            }
        }
    }

    m_hc_isValid = ::OpenAPI::fromJsonValue(m_hc, json[QString("hc")]);
    m_hc_isSet = !json[QString("hc")].isNull() && m_hc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ltp_isValid = ::OpenAPI::fromJsonValue(m_ltp, json[QString("ltp")]);
    m_ltp_isSet = !json[QString("ltp")].isNull() && m_ltp_isValid;

    if(json["spb"].isArray()){
        auto arr = json["spb"].toArray();
        m_spb_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_spb_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_spb_isSet = !jval.isNull() && m_spb_isValid;
                m_spb.push_back(item);
            }
        }
    }

    m_spf_isValid = ::OpenAPI::fromJsonValue(m_spf, json[QString("spf")]);
    m_spf_isSet = !json[QString("spf")].isNull() && m_spf_isValid;

    if(json["spl"].isArray()){
        auto arr = json["spl"].toArray();
        m_spl_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_spl_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_spl_isSet = !jval.isNull() && m_spl_isValid;
                m_spl.push_back(item);
            }
        }
    }

    m_spn_isValid = ::OpenAPI::fromJsonValue(m_spn, json[QString("spn")]);
    m_spn_isSet = !json[QString("spn")].isNull() && m_spn_isValid;

    if(json["trd"].isArray()){
        auto arr = json["trd"].toArray();
        m_trd_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_trd_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_trd_isSet = !jval.isNull() && m_trd_isValid;
                m_trd.push_back(item);
            }
        }
    }

    m_tv_isValid = ::OpenAPI::fromJsonValue(m_tv, json[QString("tv")]);
    m_tv_isSet = !json[QString("tv")].isNull() && m_tv_isValid;
}

QString OAIRunnerChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunnerChange::asJsonObject() const {
    QJsonObject obj;
    if (m_atb.size() > 0) {
        
        obj.insert(QString("atb"), toJsonValue(m_atb));
    }
    if (m_atl.size() > 0) {
        
        obj.insert(QString("atl"), toJsonValue(m_atl));
    }
    if (m_batb.size() > 0) {
        
        obj.insert(QString("batb"), toJsonValue(m_batb));
    }
    if (m_batl.size() > 0) {
        
        obj.insert(QString("batl"), toJsonValue(m_batl));
    }
    if (m_bdatb.size() > 0) {
        
        obj.insert(QString("bdatb"), toJsonValue(m_bdatb));
    }
    if (m_bdatl.size() > 0) {
        
        obj.insert(QString("bdatl"), toJsonValue(m_bdatl));
    }
    if (m_hc_isSet) {
        obj.insert(QString("hc"), ::OpenAPI::toJsonValue(m_hc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ltp_isSet) {
        obj.insert(QString("ltp"), ::OpenAPI::toJsonValue(m_ltp));
    }
    if (m_spb.size() > 0) {
        
        obj.insert(QString("spb"), toJsonValue(m_spb));
    }
    if (m_spf_isSet) {
        obj.insert(QString("spf"), ::OpenAPI::toJsonValue(m_spf));
    }
    if (m_spl.size() > 0) {
        
        obj.insert(QString("spl"), toJsonValue(m_spl));
    }
    if (m_spn_isSet) {
        obj.insert(QString("spn"), ::OpenAPI::toJsonValue(m_spn));
    }
    if (m_trd.size() > 0) {
        
        obj.insert(QString("trd"), toJsonValue(m_trd));
    }
    if (m_tv_isSet) {
        obj.insert(QString("tv"), ::OpenAPI::toJsonValue(m_tv));
    }
    return obj;
}

QList<QList<double>> OAIRunnerChange::getAtb() const {
    return m_atb;
}
void OAIRunnerChange::setAtb(const QList<QList<double>> &atb) {
    m_atb = atb;
    m_atb_isSet = true;
}

bool OAIRunnerChange::is_atb_Set() const{
    return m_atb_isSet;
}

bool OAIRunnerChange::is_atb_Valid() const{
    return m_atb_isValid;
}

QList<QList<double>> OAIRunnerChange::getAtl() const {
    return m_atl;
}
void OAIRunnerChange::setAtl(const QList<QList<double>> &atl) {
    m_atl = atl;
    m_atl_isSet = true;
}

bool OAIRunnerChange::is_atl_Set() const{
    return m_atl_isSet;
}

bool OAIRunnerChange::is_atl_Valid() const{
    return m_atl_isValid;
}

QList<QList<double>> OAIRunnerChange::getBatb() const {
    return m_batb;
}
void OAIRunnerChange::setBatb(const QList<QList<double>> &batb) {
    m_batb = batb;
    m_batb_isSet = true;
}

bool OAIRunnerChange::is_batb_Set() const{
    return m_batb_isSet;
}

bool OAIRunnerChange::is_batb_Valid() const{
    return m_batb_isValid;
}

QList<QList<double>> OAIRunnerChange::getBatl() const {
    return m_batl;
}
void OAIRunnerChange::setBatl(const QList<QList<double>> &batl) {
    m_batl = batl;
    m_batl_isSet = true;
}

bool OAIRunnerChange::is_batl_Set() const{
    return m_batl_isSet;
}

bool OAIRunnerChange::is_batl_Valid() const{
    return m_batl_isValid;
}

QList<QList<double>> OAIRunnerChange::getBdatb() const {
    return m_bdatb;
}
void OAIRunnerChange::setBdatb(const QList<QList<double>> &bdatb) {
    m_bdatb = bdatb;
    m_bdatb_isSet = true;
}

bool OAIRunnerChange::is_bdatb_Set() const{
    return m_bdatb_isSet;
}

bool OAIRunnerChange::is_bdatb_Valid() const{
    return m_bdatb_isValid;
}

QList<QList<double>> OAIRunnerChange::getBdatl() const {
    return m_bdatl;
}
void OAIRunnerChange::setBdatl(const QList<QList<double>> &bdatl) {
    m_bdatl = bdatl;
    m_bdatl_isSet = true;
}

bool OAIRunnerChange::is_bdatl_Set() const{
    return m_bdatl_isSet;
}

bool OAIRunnerChange::is_bdatl_Valid() const{
    return m_bdatl_isValid;
}

double OAIRunnerChange::getHc() const {
    return m_hc;
}
void OAIRunnerChange::setHc(const double &hc) {
    m_hc = hc;
    m_hc_isSet = true;
}

bool OAIRunnerChange::is_hc_Set() const{
    return m_hc_isSet;
}

bool OAIRunnerChange::is_hc_Valid() const{
    return m_hc_isValid;
}

qint64 OAIRunnerChange::getId() const {
    return m_id;
}
void OAIRunnerChange::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunnerChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunnerChange::is_id_Valid() const{
    return m_id_isValid;
}

double OAIRunnerChange::getLtp() const {
    return m_ltp;
}
void OAIRunnerChange::setLtp(const double &ltp) {
    m_ltp = ltp;
    m_ltp_isSet = true;
}

bool OAIRunnerChange::is_ltp_Set() const{
    return m_ltp_isSet;
}

bool OAIRunnerChange::is_ltp_Valid() const{
    return m_ltp_isValid;
}

QList<QList<double>> OAIRunnerChange::getSpb() const {
    return m_spb;
}
void OAIRunnerChange::setSpb(const QList<QList<double>> &spb) {
    m_spb = spb;
    m_spb_isSet = true;
}

bool OAIRunnerChange::is_spb_Set() const{
    return m_spb_isSet;
}

bool OAIRunnerChange::is_spb_Valid() const{
    return m_spb_isValid;
}

double OAIRunnerChange::getSpf() const {
    return m_spf;
}
void OAIRunnerChange::setSpf(const double &spf) {
    m_spf = spf;
    m_spf_isSet = true;
}

bool OAIRunnerChange::is_spf_Set() const{
    return m_spf_isSet;
}

bool OAIRunnerChange::is_spf_Valid() const{
    return m_spf_isValid;
}

QList<QList<double>> OAIRunnerChange::getSpl() const {
    return m_spl;
}
void OAIRunnerChange::setSpl(const QList<QList<double>> &spl) {
    m_spl = spl;
    m_spl_isSet = true;
}

bool OAIRunnerChange::is_spl_Set() const{
    return m_spl_isSet;
}

bool OAIRunnerChange::is_spl_Valid() const{
    return m_spl_isValid;
}

double OAIRunnerChange::getSpn() const {
    return m_spn;
}
void OAIRunnerChange::setSpn(const double &spn) {
    m_spn = spn;
    m_spn_isSet = true;
}

bool OAIRunnerChange::is_spn_Set() const{
    return m_spn_isSet;
}

bool OAIRunnerChange::is_spn_Valid() const{
    return m_spn_isValid;
}

QList<QList<double>> OAIRunnerChange::getTrd() const {
    return m_trd;
}
void OAIRunnerChange::setTrd(const QList<QList<double>> &trd) {
    m_trd = trd;
    m_trd_isSet = true;
}

bool OAIRunnerChange::is_trd_Set() const{
    return m_trd_isSet;
}

bool OAIRunnerChange::is_trd_Valid() const{
    return m_trd_isValid;
}

double OAIRunnerChange::getTv() const {
    return m_tv;
}
void OAIRunnerChange::setTv(const double &tv) {
    m_tv = tv;
    m_tv_isSet = true;
}

bool OAIRunnerChange::is_tv_Set() const{
    return m_tv_isSet;
}

bool OAIRunnerChange::is_tv_Valid() const{
    return m_tv_isValid;
}

bool OAIRunnerChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_atb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_atl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_batb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_batl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bdatb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bdatl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ltp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trd.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunnerChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
