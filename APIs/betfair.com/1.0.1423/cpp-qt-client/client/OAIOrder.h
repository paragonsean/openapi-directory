/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrder.h
 *
 * 
 */

#ifndef OAIOrder_H
#define OAIOrder_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOrder : public OAIObject {
public:
    OAIOrder();
    OAIOrder(QString json);
    ~OAIOrder() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAvp() const;
    void setAvp(const double &avp);
    bool is_avp_Set() const;
    bool is_avp_Valid() const;

    double getBsp() const;
    void setBsp(const double &bsp);
    bool is_bsp_Set() const;
    bool is_bsp_Valid() const;

    qint64 getCd() const;
    void setCd(const qint64 &cd);
    bool is_cd_Set() const;
    bool is_cd_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint64 getLd() const;
    void setLd(const qint64 &ld);
    bool is_ld_Set() const;
    bool is_ld_Valid() const;

    QString getLsrc() const;
    void setLsrc(const QString &lsrc);
    bool is_lsrc_Set() const;
    bool is_lsrc_Valid() const;

    qint64 getMd() const;
    void setMd(const qint64 &md);
    bool is_md_Set() const;
    bool is_md_Valid() const;

    QString getOt() const;
    void setOt(const QString &ot);
    bool is_ot_Set() const;
    bool is_ot_Valid() const;

    double getP() const;
    void setP(const double &p);
    bool is_p_Set() const;
    bool is_p_Valid() const;

    qint64 getPd() const;
    void setPd(const qint64 &pd);
    bool is_pd_Set() const;
    bool is_pd_Valid() const;

    QString getPt() const;
    void setPt(const QString &pt);
    bool is_pt_Set() const;
    bool is_pt_Valid() const;

    QString getRac() const;
    void setRac(const QString &rac);
    bool is_rac_Set() const;
    bool is_rac_Valid() const;

    QString getRc() const;
    void setRc(const QString &rc);
    bool is_rc_Set() const;
    bool is_rc_Valid() const;

    QString getRfo() const;
    void setRfo(const QString &rfo);
    bool is_rfo_Set() const;
    bool is_rfo_Valid() const;

    QString getRfs() const;
    void setRfs(const QString &rfs);
    bool is_rfs_Set() const;
    bool is_rfs_Valid() const;

    double getS() const;
    void setS(const double &s);
    bool is_s_Set() const;
    bool is_s_Valid() const;

    double getSc() const;
    void setSc(const double &sc);
    bool is_sc_Set() const;
    bool is_sc_Valid() const;

    QString getSide() const;
    void setSide(const QString &side);
    bool is_side_Set() const;
    bool is_side_Valid() const;

    double getSl() const;
    void setSl(const double &sl);
    bool is_sl_Set() const;
    bool is_sl_Valid() const;

    double getSm() const;
    void setSm(const double &sm);
    bool is_sm_Set() const;
    bool is_sm_Valid() const;

    double getSr() const;
    void setSr(const double &sr);
    bool is_sr_Set() const;
    bool is_sr_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    double getSv() const;
    void setSv(const double &sv);
    bool is_sv_Set() const;
    bool is_sv_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_avp;
    bool m_avp_isSet;
    bool m_avp_isValid;

    double m_bsp;
    bool m_bsp_isSet;
    bool m_bsp_isValid;

    qint64 m_cd;
    bool m_cd_isSet;
    bool m_cd_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint64 m_ld;
    bool m_ld_isSet;
    bool m_ld_isValid;

    QString m_lsrc;
    bool m_lsrc_isSet;
    bool m_lsrc_isValid;

    qint64 m_md;
    bool m_md_isSet;
    bool m_md_isValid;

    QString m_ot;
    bool m_ot_isSet;
    bool m_ot_isValid;

    double m_p;
    bool m_p_isSet;
    bool m_p_isValid;

    qint64 m_pd;
    bool m_pd_isSet;
    bool m_pd_isValid;

    QString m_pt;
    bool m_pt_isSet;
    bool m_pt_isValid;

    QString m_rac;
    bool m_rac_isSet;
    bool m_rac_isValid;

    QString m_rc;
    bool m_rc_isSet;
    bool m_rc_isValid;

    QString m_rfo;
    bool m_rfo_isSet;
    bool m_rfo_isValid;

    QString m_rfs;
    bool m_rfs_isSet;
    bool m_rfs_isValid;

    double m_s;
    bool m_s_isSet;
    bool m_s_isValid;

    double m_sc;
    bool m_sc_isSet;
    bool m_sc_isValid;

    QString m_side;
    bool m_side_isSet;
    bool m_side_isValid;

    double m_sl;
    bool m_sl_isSet;
    bool m_sl_isValid;

    double m_sm;
    bool m_sm_isSet;
    bool m_sm_isValid;

    double m_sr;
    bool m_sr_isSet;
    bool m_sr_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    double m_sv;
    bool m_sv_isSet;
    bool m_sv_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrder)

#endif // OAIOrder_H
