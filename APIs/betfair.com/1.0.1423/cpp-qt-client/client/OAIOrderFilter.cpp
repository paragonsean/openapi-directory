/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderFilter::OAIOrderFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderFilter::OAIOrderFilter() {
    this->initializeModel();
}

OAIOrderFilter::~OAIOrderFilter() {}

void OAIOrderFilter::initializeModel() {

    m_account_ids_isSet = false;
    m_account_ids_isValid = false;

    m_customer_strategy_refs_isSet = false;
    m_customer_strategy_refs_isValid = false;

    m_include_overall_position_isSet = false;
    m_include_overall_position_isValid = false;

    m_partition_matched_by_strategy_ref_isSet = false;
    m_partition_matched_by_strategy_ref_isValid = false;
}

void OAIOrderFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderFilter::fromJsonObject(QJsonObject json) {

    m_account_ids_isValid = ::OpenAPI::fromJsonValue(m_account_ids, json[QString("accountIds")]);
    m_account_ids_isSet = !json[QString("accountIds")].isNull() && m_account_ids_isValid;

    m_customer_strategy_refs_isValid = ::OpenAPI::fromJsonValue(m_customer_strategy_refs, json[QString("customerStrategyRefs")]);
    m_customer_strategy_refs_isSet = !json[QString("customerStrategyRefs")].isNull() && m_customer_strategy_refs_isValid;

    m_include_overall_position_isValid = ::OpenAPI::fromJsonValue(m_include_overall_position, json[QString("includeOverallPosition")]);
    m_include_overall_position_isSet = !json[QString("includeOverallPosition")].isNull() && m_include_overall_position_isValid;

    m_partition_matched_by_strategy_ref_isValid = ::OpenAPI::fromJsonValue(m_partition_matched_by_strategy_ref, json[QString("partitionMatchedByStrategyRef")]);
    m_partition_matched_by_strategy_ref_isSet = !json[QString("partitionMatchedByStrategyRef")].isNull() && m_partition_matched_by_strategy_ref_isValid;
}

QString OAIOrderFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_account_ids.size() > 0) {
        obj.insert(QString("accountIds"), ::OpenAPI::toJsonValue(m_account_ids));
    }
    if (m_customer_strategy_refs.size() > 0) {
        obj.insert(QString("customerStrategyRefs"), ::OpenAPI::toJsonValue(m_customer_strategy_refs));
    }
    if (m_include_overall_position_isSet) {
        obj.insert(QString("includeOverallPosition"), ::OpenAPI::toJsonValue(m_include_overall_position));
    }
    if (m_partition_matched_by_strategy_ref_isSet) {
        obj.insert(QString("partitionMatchedByStrategyRef"), ::OpenAPI::toJsonValue(m_partition_matched_by_strategy_ref));
    }
    return obj;
}

QList<qint64> OAIOrderFilter::getAccountIds() const {
    return m_account_ids;
}
void OAIOrderFilter::setAccountIds(const QList<qint64> &account_ids) {
    m_account_ids = account_ids;
    m_account_ids_isSet = true;
}

bool OAIOrderFilter::is_account_ids_Set() const{
    return m_account_ids_isSet;
}

bool OAIOrderFilter::is_account_ids_Valid() const{
    return m_account_ids_isValid;
}

QList<QString> OAIOrderFilter::getCustomerStrategyRefs() const {
    return m_customer_strategy_refs;
}
void OAIOrderFilter::setCustomerStrategyRefs(const QList<QString> &customer_strategy_refs) {
    m_customer_strategy_refs = customer_strategy_refs;
    m_customer_strategy_refs_isSet = true;
}

bool OAIOrderFilter::is_customer_strategy_refs_Set() const{
    return m_customer_strategy_refs_isSet;
}

bool OAIOrderFilter::is_customer_strategy_refs_Valid() const{
    return m_customer_strategy_refs_isValid;
}

bool OAIOrderFilter::isIncludeOverallPosition() const {
    return m_include_overall_position;
}
void OAIOrderFilter::setIncludeOverallPosition(const bool &include_overall_position) {
    m_include_overall_position = include_overall_position;
    m_include_overall_position_isSet = true;
}

bool OAIOrderFilter::is_include_overall_position_Set() const{
    return m_include_overall_position_isSet;
}

bool OAIOrderFilter::is_include_overall_position_Valid() const{
    return m_include_overall_position_isValid;
}

bool OAIOrderFilter::isPartitionMatchedByStrategyRef() const {
    return m_partition_matched_by_strategy_ref;
}
void OAIOrderFilter::setPartitionMatchedByStrategyRef(const bool &partition_matched_by_strategy_ref) {
    m_partition_matched_by_strategy_ref = partition_matched_by_strategy_ref;
    m_partition_matched_by_strategy_ref_isSet = true;
}

bool OAIOrderFilter::is_partition_matched_by_strategy_ref_Set() const{
    return m_partition_matched_by_strategy_ref_isSet;
}

bool OAIOrderFilter::is_partition_matched_by_strategy_ref_Valid() const{
    return m_partition_matched_by_strategy_ref_isValid;
}

bool OAIOrderFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_strategy_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_overall_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_matched_by_strategy_ref_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
