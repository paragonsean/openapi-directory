/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMarketDefinition.h
 *
 * 
 */

#ifndef OAIMarketDefinition_H
#define OAIMarketDefinition_H

#include <QJsonObject>

#include "OAIKeyLineDefinition.h"
#include "OAIPriceLadderDefinition.h"
#include "OAIRunnerDefinition.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyLineDefinition;
class OAIPriceLadderDefinition;
class OAIRunnerDefinition;

class OAIMarketDefinition : public OAIObject {
public:
    OAIMarketDefinition();
    OAIMarketDefinition(QString json);
    ~OAIMarketDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBetDelay() const;
    void setBetDelay(const qint32 &bet_delay);
    bool is_bet_delay_Set() const;
    bool is_bet_delay_Valid() const;

    QString getBettingType() const;
    void setBettingType(const QString &betting_type);
    bool is_betting_type_Set() const;
    bool is_betting_type_Valid() const;

    bool isBspMarket() const;
    void setBspMarket(const bool &bsp_market);
    bool is_bsp_market_Set() const;
    bool is_bsp_market_Valid() const;

    bool isBspReconciled() const;
    void setBspReconciled(const bool &bsp_reconciled);
    bool is_bsp_reconciled_Set() const;
    bool is_bsp_reconciled_Valid() const;

    bool isComplete() const;
    void setComplete(const bool &complete);
    bool is_complete_Set() const;
    bool is_complete_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    bool isCrossMatching() const;
    void setCrossMatching(const bool &cross_matching);
    bool is_cross_matching_Set() const;
    bool is_cross_matching_Valid() const;

    bool isDiscountAllowed() const;
    void setDiscountAllowed(const bool &discount_allowed);
    bool is_discount_allowed_Set() const;
    bool is_discount_allowed_Valid() const;

    double getEachWayDivisor() const;
    void setEachWayDivisor(const double &each_way_divisor);
    bool is_each_way_divisor_Set() const;
    bool is_each_way_divisor_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getEventTypeId() const;
    void setEventTypeId(const QString &event_type_id);
    bool is_event_type_id_Set() const;
    bool is_event_type_id_Valid() const;

    bool isInPlay() const;
    void setInPlay(const bool &in_play);
    bool is_in_play_Set() const;
    bool is_in_play_Valid() const;

    OAIKeyLineDefinition getKeyLineDefinition() const;
    void setKeyLineDefinition(const OAIKeyLineDefinition &key_line_definition);
    bool is_key_line_definition_Set() const;
    bool is_key_line_definition_Valid() const;

    double getLineInterval() const;
    void setLineInterval(const double &line_interval);
    bool is_line_interval_Set() const;
    bool is_line_interval_Valid() const;

    double getLineMaxUnit() const;
    void setLineMaxUnit(const double &line_max_unit);
    bool is_line_max_unit_Set() const;
    bool is_line_max_unit_Valid() const;

    double getLineMinUnit() const;
    void setLineMinUnit(const double &line_min_unit);
    bool is_line_min_unit_Set() const;
    bool is_line_min_unit_Valid() const;

    double getMarketBaseRate() const;
    void setMarketBaseRate(const double &market_base_rate);
    bool is_market_base_rate_Set() const;
    bool is_market_base_rate_Valid() const;

    QDateTime getMarketTime() const;
    void setMarketTime(const QDateTime &market_time);
    bool is_market_time_Set() const;
    bool is_market_time_Valid() const;

    QString getMarketType() const;
    void setMarketType(const QString &market_type);
    bool is_market_type_Set() const;
    bool is_market_type_Valid() const;

    qint32 getNumberOfActiveRunners() const;
    void setNumberOfActiveRunners(const qint32 &number_of_active_runners);
    bool is_number_of_active_runners_Set() const;
    bool is_number_of_active_runners_Valid() const;

    qint32 getNumberOfWinners() const;
    void setNumberOfWinners(const qint32 &number_of_winners);
    bool is_number_of_winners_Set() const;
    bool is_number_of_winners_Valid() const;

    QDateTime getOpenDate() const;
    void setOpenDate(const QDateTime &open_date);
    bool is_open_date_Set() const;
    bool is_open_date_Valid() const;

    bool isPersistenceEnabled() const;
    void setPersistenceEnabled(const bool &persistence_enabled);
    bool is_persistence_enabled_Set() const;
    bool is_persistence_enabled_Valid() const;

    OAIPriceLadderDefinition getPriceLadderDefinition() const;
    void setPriceLadderDefinition(const OAIPriceLadderDefinition &price_ladder_definition);
    bool is_price_ladder_definition_Set() const;
    bool is_price_ladder_definition_Valid() const;

    QString getRaceType() const;
    void setRaceType(const QString &race_type);
    bool is_race_type_Set() const;
    bool is_race_type_Valid() const;

    QList<QString> getRegulators() const;
    void setRegulators(const QList<QString> &regulators);
    bool is_regulators_Set() const;
    bool is_regulators_Valid() const;

    QList<OAIRunnerDefinition> getRunners() const;
    void setRunners(const QList<OAIRunnerDefinition> &runners);
    bool is_runners_Set() const;
    bool is_runners_Valid() const;

    bool isRunnersVoidable() const;
    void setRunnersVoidable(const bool &runners_voidable);
    bool is_runners_voidable_Set() const;
    bool is_runners_voidable_Valid() const;

    QDateTime getSettledTime() const;
    void setSettledTime(const QDateTime &settled_time);
    bool is_settled_time_Set() const;
    bool is_settled_time_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getSuspendTime() const;
    void setSuspendTime(const QDateTime &suspend_time);
    bool is_suspend_time_Set() const;
    bool is_suspend_time_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    bool isTurnInPlayEnabled() const;
    void setTurnInPlayEnabled(const bool &turn_in_play_enabled);
    bool is_turn_in_play_enabled_Set() const;
    bool is_turn_in_play_enabled_Valid() const;

    QString getVenue() const;
    void setVenue(const QString &venue);
    bool is_venue_Set() const;
    bool is_venue_Valid() const;

    qint64 getVersion() const;
    void setVersion(const qint64 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bet_delay;
    bool m_bet_delay_isSet;
    bool m_bet_delay_isValid;

    QString m_betting_type;
    bool m_betting_type_isSet;
    bool m_betting_type_isValid;

    bool m_bsp_market;
    bool m_bsp_market_isSet;
    bool m_bsp_market_isValid;

    bool m_bsp_reconciled;
    bool m_bsp_reconciled_isSet;
    bool m_bsp_reconciled_isValid;

    bool m_complete;
    bool m_complete_isSet;
    bool m_complete_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    bool m_cross_matching;
    bool m_cross_matching_isSet;
    bool m_cross_matching_isValid;

    bool m_discount_allowed;
    bool m_discount_allowed_isSet;
    bool m_discount_allowed_isValid;

    double m_each_way_divisor;
    bool m_each_way_divisor_isSet;
    bool m_each_way_divisor_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_event_type_id;
    bool m_event_type_id_isSet;
    bool m_event_type_id_isValid;

    bool m_in_play;
    bool m_in_play_isSet;
    bool m_in_play_isValid;

    OAIKeyLineDefinition m_key_line_definition;
    bool m_key_line_definition_isSet;
    bool m_key_line_definition_isValid;

    double m_line_interval;
    bool m_line_interval_isSet;
    bool m_line_interval_isValid;

    double m_line_max_unit;
    bool m_line_max_unit_isSet;
    bool m_line_max_unit_isValid;

    double m_line_min_unit;
    bool m_line_min_unit_isSet;
    bool m_line_min_unit_isValid;

    double m_market_base_rate;
    bool m_market_base_rate_isSet;
    bool m_market_base_rate_isValid;

    QDateTime m_market_time;
    bool m_market_time_isSet;
    bool m_market_time_isValid;

    QString m_market_type;
    bool m_market_type_isSet;
    bool m_market_type_isValid;

    qint32 m_number_of_active_runners;
    bool m_number_of_active_runners_isSet;
    bool m_number_of_active_runners_isValid;

    qint32 m_number_of_winners;
    bool m_number_of_winners_isSet;
    bool m_number_of_winners_isValid;

    QDateTime m_open_date;
    bool m_open_date_isSet;
    bool m_open_date_isValid;

    bool m_persistence_enabled;
    bool m_persistence_enabled_isSet;
    bool m_persistence_enabled_isValid;

    OAIPriceLadderDefinition m_price_ladder_definition;
    bool m_price_ladder_definition_isSet;
    bool m_price_ladder_definition_isValid;

    QString m_race_type;
    bool m_race_type_isSet;
    bool m_race_type_isValid;

    QList<QString> m_regulators;
    bool m_regulators_isSet;
    bool m_regulators_isValid;

    QList<OAIRunnerDefinition> m_runners;
    bool m_runners_isSet;
    bool m_runners_isValid;

    bool m_runners_voidable;
    bool m_runners_voidable_isSet;
    bool m_runners_voidable_isValid;

    QDateTime m_settled_time;
    bool m_settled_time_isSet;
    bool m_settled_time_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_suspend_time;
    bool m_suspend_time_isSet;
    bool m_suspend_time_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    bool m_turn_in_play_enabled;
    bool m_turn_in_play_enabled_isSet;
    bool m_turn_in_play_enabled_isValid;

    QString m_venue;
    bool m_venue_isSet;
    bool m_venue_isValid;

    qint64 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMarketDefinition)

#endif // OAIMarketDefinition_H
