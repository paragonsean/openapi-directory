/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderRunnerChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderRunnerChange::OAIOrderRunnerChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderRunnerChange::OAIOrderRunnerChange() {
    this->initializeModel();
}

OAIOrderRunnerChange::~OAIOrderRunnerChange() {}

void OAIOrderRunnerChange::initializeModel() {

    m_full_image_isSet = false;
    m_full_image_isValid = false;

    m_hc_isSet = false;
    m_hc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mb_isSet = false;
    m_mb_isValid = false;

    m_ml_isSet = false;
    m_ml_isValid = false;

    m_smc_isSet = false;
    m_smc_isValid = false;

    m_uo_isSet = false;
    m_uo_isValid = false;
}

void OAIOrderRunnerChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderRunnerChange::fromJsonObject(QJsonObject json) {

    m_full_image_isValid = ::OpenAPI::fromJsonValue(m_full_image, json[QString("fullImage")]);
    m_full_image_isSet = !json[QString("fullImage")].isNull() && m_full_image_isValid;

    m_hc_isValid = ::OpenAPI::fromJsonValue(m_hc, json[QString("hc")]);
    m_hc_isSet = !json[QString("hc")].isNull() && m_hc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    if(json["mb"].isArray()){
        auto arr = json["mb"].toArray();
        m_mb_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_mb_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_mb_isSet = !jval.isNull() && m_mb_isValid;
                m_mb.push_back(item);
            }
        }
    }

    if(json["ml"].isArray()){
        auto arr = json["ml"].toArray();
        m_ml_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_ml_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_ml_isSet = !jval.isNull() && m_ml_isValid;
                m_ml.push_back(item);
            }
        }
    }

    m_smc_isValid = ::OpenAPI::fromJsonValue(m_smc, json[QString("smc")]);
    m_smc_isSet = !json[QString("smc")].isNull() && m_smc_isValid;

    m_uo_isValid = ::OpenAPI::fromJsonValue(m_uo, json[QString("uo")]);
    m_uo_isSet = !json[QString("uo")].isNull() && m_uo_isValid;
}

QString OAIOrderRunnerChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderRunnerChange::asJsonObject() const {
    QJsonObject obj;
    if (m_full_image_isSet) {
        obj.insert(QString("fullImage"), ::OpenAPI::toJsonValue(m_full_image));
    }
    if (m_hc_isSet) {
        obj.insert(QString("hc"), ::OpenAPI::toJsonValue(m_hc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mb.size() > 0) {
        
        obj.insert(QString("mb"), toJsonValue(m_mb));
    }
    if (m_ml.size() > 0) {
        
        obj.insert(QString("ml"), toJsonValue(m_ml));
    }
    if (m_smc.size() > 0) {
        obj.insert(QString("smc"), ::OpenAPI::toJsonValue(m_smc));
    }
    if (m_uo.size() > 0) {
        obj.insert(QString("uo"), ::OpenAPI::toJsonValue(m_uo));
    }
    return obj;
}

bool OAIOrderRunnerChange::isFullImage() const {
    return m_full_image;
}
void OAIOrderRunnerChange::setFullImage(const bool &full_image) {
    m_full_image = full_image;
    m_full_image_isSet = true;
}

bool OAIOrderRunnerChange::is_full_image_Set() const{
    return m_full_image_isSet;
}

bool OAIOrderRunnerChange::is_full_image_Valid() const{
    return m_full_image_isValid;
}

double OAIOrderRunnerChange::getHc() const {
    return m_hc;
}
void OAIOrderRunnerChange::setHc(const double &hc) {
    m_hc = hc;
    m_hc_isSet = true;
}

bool OAIOrderRunnerChange::is_hc_Set() const{
    return m_hc_isSet;
}

bool OAIOrderRunnerChange::is_hc_Valid() const{
    return m_hc_isValid;
}

qint64 OAIOrderRunnerChange::getId() const {
    return m_id;
}
void OAIOrderRunnerChange::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderRunnerChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderRunnerChange::is_id_Valid() const{
    return m_id_isValid;
}

QList<QList<double>> OAIOrderRunnerChange::getMb() const {
    return m_mb;
}
void OAIOrderRunnerChange::setMb(const QList<QList<double>> &mb) {
    m_mb = mb;
    m_mb_isSet = true;
}

bool OAIOrderRunnerChange::is_mb_Set() const{
    return m_mb_isSet;
}

bool OAIOrderRunnerChange::is_mb_Valid() const{
    return m_mb_isValid;
}

QList<QList<double>> OAIOrderRunnerChange::getMl() const {
    return m_ml;
}
void OAIOrderRunnerChange::setMl(const QList<QList<double>> &ml) {
    m_ml = ml;
    m_ml_isSet = true;
}

bool OAIOrderRunnerChange::is_ml_Set() const{
    return m_ml_isSet;
}

bool OAIOrderRunnerChange::is_ml_Valid() const{
    return m_ml_isValid;
}

QMap<QString, OAIStrategyMatchChange> OAIOrderRunnerChange::getSmc() const {
    return m_smc;
}
void OAIOrderRunnerChange::setSmc(const QMap<QString, OAIStrategyMatchChange> &smc) {
    m_smc = smc;
    m_smc_isSet = true;
}

bool OAIOrderRunnerChange::is_smc_Set() const{
    return m_smc_isSet;
}

bool OAIOrderRunnerChange::is_smc_Valid() const{
    return m_smc_isValid;
}

QList<OAIOrder> OAIOrderRunnerChange::getUo() const {
    return m_uo;
}
void OAIOrderRunnerChange::setUo(const QList<OAIOrder> &uo) {
    m_uo = uo;
    m_uo_isSet = true;
}

bool OAIOrderRunnerChange::is_uo_Set() const{
    return m_uo_isSet;
}

bool OAIOrderRunnerChange::is_uo_Valid() const{
    return m_uo_isValid;
}

bool OAIOrderRunnerChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_smc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uo.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderRunnerChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
