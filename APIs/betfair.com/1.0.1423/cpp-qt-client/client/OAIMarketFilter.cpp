/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketFilter::OAIMarketFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketFilter::OAIMarketFilter() {
    this->initializeModel();
}

OAIMarketFilter::~OAIMarketFilter() {}

void OAIMarketFilter::initializeModel() {

    m_betting_types_isSet = false;
    m_betting_types_isValid = false;

    m_bsp_market_isSet = false;
    m_bsp_market_isValid = false;

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_event_ids_isSet = false;
    m_event_ids_isValid = false;

    m_event_type_ids_isSet = false;
    m_event_type_ids_isValid = false;

    m_market_ids_isSet = false;
    m_market_ids_isValid = false;

    m_market_types_isSet = false;
    m_market_types_isValid = false;

    m_race_types_isSet = false;
    m_race_types_isValid = false;

    m_turn_in_play_enabled_isSet = false;
    m_turn_in_play_enabled_isValid = false;

    m_venues_isSet = false;
    m_venues_isValid = false;
}

void OAIMarketFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketFilter::fromJsonObject(QJsonObject json) {

    m_betting_types_isValid = ::OpenAPI::fromJsonValue(m_betting_types, json[QString("bettingTypes")]);
    m_betting_types_isSet = !json[QString("bettingTypes")].isNull() && m_betting_types_isValid;

    m_bsp_market_isValid = ::OpenAPI::fromJsonValue(m_bsp_market, json[QString("bspMarket")]);
    m_bsp_market_isSet = !json[QString("bspMarket")].isNull() && m_bsp_market_isValid;

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("countryCodes")]);
    m_country_codes_isSet = !json[QString("countryCodes")].isNull() && m_country_codes_isValid;

    m_event_ids_isValid = ::OpenAPI::fromJsonValue(m_event_ids, json[QString("eventIds")]);
    m_event_ids_isSet = !json[QString("eventIds")].isNull() && m_event_ids_isValid;

    m_event_type_ids_isValid = ::OpenAPI::fromJsonValue(m_event_type_ids, json[QString("eventTypeIds")]);
    m_event_type_ids_isSet = !json[QString("eventTypeIds")].isNull() && m_event_type_ids_isValid;

    m_market_ids_isValid = ::OpenAPI::fromJsonValue(m_market_ids, json[QString("marketIds")]);
    m_market_ids_isSet = !json[QString("marketIds")].isNull() && m_market_ids_isValid;

    m_market_types_isValid = ::OpenAPI::fromJsonValue(m_market_types, json[QString("marketTypes")]);
    m_market_types_isSet = !json[QString("marketTypes")].isNull() && m_market_types_isValid;

    m_race_types_isValid = ::OpenAPI::fromJsonValue(m_race_types, json[QString("raceTypes")]);
    m_race_types_isSet = !json[QString("raceTypes")].isNull() && m_race_types_isValid;

    m_turn_in_play_enabled_isValid = ::OpenAPI::fromJsonValue(m_turn_in_play_enabled, json[QString("turnInPlayEnabled")]);
    m_turn_in_play_enabled_isSet = !json[QString("turnInPlayEnabled")].isNull() && m_turn_in_play_enabled_isValid;

    m_venues_isValid = ::OpenAPI::fromJsonValue(m_venues, json[QString("venues")]);
    m_venues_isSet = !json[QString("venues")].isNull() && m_venues_isValid;
}

QString OAIMarketFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_betting_types.size() > 0) {
        obj.insert(QString("bettingTypes"), ::OpenAPI::toJsonValue(m_betting_types));
    }
    if (m_bsp_market_isSet) {
        obj.insert(QString("bspMarket"), ::OpenAPI::toJsonValue(m_bsp_market));
    }
    if (m_country_codes.size() > 0) {
        obj.insert(QString("countryCodes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_event_ids.size() > 0) {
        obj.insert(QString("eventIds"), ::OpenAPI::toJsonValue(m_event_ids));
    }
    if (m_event_type_ids.size() > 0) {
        obj.insert(QString("eventTypeIds"), ::OpenAPI::toJsonValue(m_event_type_ids));
    }
    if (m_market_ids.size() > 0) {
        obj.insert(QString("marketIds"), ::OpenAPI::toJsonValue(m_market_ids));
    }
    if (m_market_types.size() > 0) {
        obj.insert(QString("marketTypes"), ::OpenAPI::toJsonValue(m_market_types));
    }
    if (m_race_types.size() > 0) {
        obj.insert(QString("raceTypes"), ::OpenAPI::toJsonValue(m_race_types));
    }
    if (m_turn_in_play_enabled_isSet) {
        obj.insert(QString("turnInPlayEnabled"), ::OpenAPI::toJsonValue(m_turn_in_play_enabled));
    }
    if (m_venues.size() > 0) {
        obj.insert(QString("venues"), ::OpenAPI::toJsonValue(m_venues));
    }
    return obj;
}

QList<QString> OAIMarketFilter::getBettingTypes() const {
    return m_betting_types;
}
void OAIMarketFilter::setBettingTypes(const QList<QString> &betting_types) {
    m_betting_types = betting_types;
    m_betting_types_isSet = true;
}

bool OAIMarketFilter::is_betting_types_Set() const{
    return m_betting_types_isSet;
}

bool OAIMarketFilter::is_betting_types_Valid() const{
    return m_betting_types_isValid;
}

bool OAIMarketFilter::isBspMarket() const {
    return m_bsp_market;
}
void OAIMarketFilter::setBspMarket(const bool &bsp_market) {
    m_bsp_market = bsp_market;
    m_bsp_market_isSet = true;
}

bool OAIMarketFilter::is_bsp_market_Set() const{
    return m_bsp_market_isSet;
}

bool OAIMarketFilter::is_bsp_market_Valid() const{
    return m_bsp_market_isValid;
}

QList<QString> OAIMarketFilter::getCountryCodes() const {
    return m_country_codes;
}
void OAIMarketFilter::setCountryCodes(const QList<QString> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAIMarketFilter::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAIMarketFilter::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

QList<QString> OAIMarketFilter::getEventIds() const {
    return m_event_ids;
}
void OAIMarketFilter::setEventIds(const QList<QString> &event_ids) {
    m_event_ids = event_ids;
    m_event_ids_isSet = true;
}

bool OAIMarketFilter::is_event_ids_Set() const{
    return m_event_ids_isSet;
}

bool OAIMarketFilter::is_event_ids_Valid() const{
    return m_event_ids_isValid;
}

QList<QString> OAIMarketFilter::getEventTypeIds() const {
    return m_event_type_ids;
}
void OAIMarketFilter::setEventTypeIds(const QList<QString> &event_type_ids) {
    m_event_type_ids = event_type_ids;
    m_event_type_ids_isSet = true;
}

bool OAIMarketFilter::is_event_type_ids_Set() const{
    return m_event_type_ids_isSet;
}

bool OAIMarketFilter::is_event_type_ids_Valid() const{
    return m_event_type_ids_isValid;
}

QList<QString> OAIMarketFilter::getMarketIds() const {
    return m_market_ids;
}
void OAIMarketFilter::setMarketIds(const QList<QString> &market_ids) {
    m_market_ids = market_ids;
    m_market_ids_isSet = true;
}

bool OAIMarketFilter::is_market_ids_Set() const{
    return m_market_ids_isSet;
}

bool OAIMarketFilter::is_market_ids_Valid() const{
    return m_market_ids_isValid;
}

QList<QString> OAIMarketFilter::getMarketTypes() const {
    return m_market_types;
}
void OAIMarketFilter::setMarketTypes(const QList<QString> &market_types) {
    m_market_types = market_types;
    m_market_types_isSet = true;
}

bool OAIMarketFilter::is_market_types_Set() const{
    return m_market_types_isSet;
}

bool OAIMarketFilter::is_market_types_Valid() const{
    return m_market_types_isValid;
}

QList<QString> OAIMarketFilter::getRaceTypes() const {
    return m_race_types;
}
void OAIMarketFilter::setRaceTypes(const QList<QString> &race_types) {
    m_race_types = race_types;
    m_race_types_isSet = true;
}

bool OAIMarketFilter::is_race_types_Set() const{
    return m_race_types_isSet;
}

bool OAIMarketFilter::is_race_types_Valid() const{
    return m_race_types_isValid;
}

bool OAIMarketFilter::isTurnInPlayEnabled() const {
    return m_turn_in_play_enabled;
}
void OAIMarketFilter::setTurnInPlayEnabled(const bool &turn_in_play_enabled) {
    m_turn_in_play_enabled = turn_in_play_enabled;
    m_turn_in_play_enabled_isSet = true;
}

bool OAIMarketFilter::is_turn_in_play_enabled_Set() const{
    return m_turn_in_play_enabled_isSet;
}

bool OAIMarketFilter::is_turn_in_play_enabled_Valid() const{
    return m_turn_in_play_enabled_isValid;
}

QList<QString> OAIMarketFilter::getVenues() const {
    return m_venues;
}
void OAIMarketFilter::setVenues(const QList<QString> &venues) {
    m_venues = venues;
    m_venues_isSet = true;
}

bool OAIMarketFilter::is_venues_Set() const{
    return m_venues_isSet;
}

bool OAIMarketFilter::is_venues_Valid() const{
    return m_venues_isValid;
}

bool OAIMarketFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_betting_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsp_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_in_play_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venues.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
