/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderMarketChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderMarketChange::OAIOrderMarketChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderMarketChange::OAIOrderMarketChange() {
    this->initializeModel();
}

OAIOrderMarketChange::~OAIOrderMarketChange() {}

void OAIOrderMarketChange::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_full_image_isSet = false;
    m_full_image_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_orc_isSet = false;
    m_orc_isValid = false;
}

void OAIOrderMarketChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderMarketChange::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_full_image_isValid = ::OpenAPI::fromJsonValue(m_full_image, json[QString("fullImage")]);
    m_full_image_isSet = !json[QString("fullImage")].isNull() && m_full_image_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_orc_isValid = ::OpenAPI::fromJsonValue(m_orc, json[QString("orc")]);
    m_orc_isSet = !json[QString("orc")].isNull() && m_orc_isValid;
}

QString OAIOrderMarketChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderMarketChange::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_full_image_isSet) {
        obj.insert(QString("fullImage"), ::OpenAPI::toJsonValue(m_full_image));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_orc.size() > 0) {
        obj.insert(QString("orc"), ::OpenAPI::toJsonValue(m_orc));
    }
    return obj;
}

qint64 OAIOrderMarketChange::getAccountId() const {
    return m_account_id;
}
void OAIOrderMarketChange::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIOrderMarketChange::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIOrderMarketChange::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIOrderMarketChange::isClosed() const {
    return m_closed;
}
void OAIOrderMarketChange::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIOrderMarketChange::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIOrderMarketChange::is_closed_Valid() const{
    return m_closed_isValid;
}

bool OAIOrderMarketChange::isFullImage() const {
    return m_full_image;
}
void OAIOrderMarketChange::setFullImage(const bool &full_image) {
    m_full_image = full_image;
    m_full_image_isSet = true;
}

bool OAIOrderMarketChange::is_full_image_Set() const{
    return m_full_image_isSet;
}

bool OAIOrderMarketChange::is_full_image_Valid() const{
    return m_full_image_isValid;
}

QString OAIOrderMarketChange::getId() const {
    return m_id;
}
void OAIOrderMarketChange::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderMarketChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderMarketChange::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrderRunnerChange> OAIOrderMarketChange::getOrc() const {
    return m_orc;
}
void OAIOrderMarketChange::setOrc(const QList<OAIOrderRunnerChange> &orc) {
    m_orc = orc;
    m_orc_isSet = true;
}

bool OAIOrderMarketChange::is_orc_Set() const{
    return m_orc_isSet;
}

bool OAIOrderMarketChange::is_orc_Valid() const{
    return m_orc_isValid;
}

bool OAIOrderMarketChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orc.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderMarketChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
