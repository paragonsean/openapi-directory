/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllResponseTypesExample.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllResponseTypesExample::OAIAllResponseTypesExample(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllResponseTypesExample::OAIAllResponseTypesExample() {
    this->initializeModel();
}

OAIAllResponseTypesExample::~OAIAllResponseTypesExample() {}

void OAIAllResponseTypesExample::initializeModel() {

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_market_change_message_isSet = false;
    m_market_change_message_isValid = false;

    m_op_types_isSet = false;
    m_op_types_isValid = false;

    m_order_change_message_isSet = false;
    m_order_change_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAllResponseTypesExample::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllResponseTypesExample::fromJsonObject(QJsonObject json) {

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_market_change_message_isValid = ::OpenAPI::fromJsonValue(m_market_change_message, json[QString("marketChangeMessage")]);
    m_market_change_message_isSet = !json[QString("marketChangeMessage")].isNull() && m_market_change_message_isValid;

    m_op_types_isValid = ::OpenAPI::fromJsonValue(m_op_types, json[QString("opTypes")]);
    m_op_types_isSet = !json[QString("opTypes")].isNull() && m_op_types_isValid;

    m_order_change_message_isValid = ::OpenAPI::fromJsonValue(m_order_change_message, json[QString("orderChangeMessage")]);
    m_order_change_message_isSet = !json[QString("orderChangeMessage")].isNull() && m_order_change_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAllResponseTypesExample::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllResponseTypesExample::asJsonObject() const {
    QJsonObject obj;
    if (m_connection.isSet()) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_market_change_message.isSet()) {
        obj.insert(QString("marketChangeMessage"), ::OpenAPI::toJsonValue(m_market_change_message));
    }
    if (m_op_types_isSet) {
        obj.insert(QString("opTypes"), ::OpenAPI::toJsonValue(m_op_types));
    }
    if (m_order_change_message.isSet()) {
        obj.insert(QString("orderChangeMessage"), ::OpenAPI::toJsonValue(m_order_change_message));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIConnectionMessage OAIAllResponseTypesExample::getConnection() const {
    return m_connection;
}
void OAIAllResponseTypesExample::setConnection(const OAIConnectionMessage &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIAllResponseTypesExample::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIAllResponseTypesExample::is_connection_Valid() const{
    return m_connection_isValid;
}

OAIMarketChangeMessage OAIAllResponseTypesExample::getMarketChangeMessage() const {
    return m_market_change_message;
}
void OAIAllResponseTypesExample::setMarketChangeMessage(const OAIMarketChangeMessage &market_change_message) {
    m_market_change_message = market_change_message;
    m_market_change_message_isSet = true;
}

bool OAIAllResponseTypesExample::is_market_change_message_Set() const{
    return m_market_change_message_isSet;
}

bool OAIAllResponseTypesExample::is_market_change_message_Valid() const{
    return m_market_change_message_isValid;
}

QString OAIAllResponseTypesExample::getOpTypes() const {
    return m_op_types;
}
void OAIAllResponseTypesExample::setOpTypes(const QString &op_types) {
    m_op_types = op_types;
    m_op_types_isSet = true;
}

bool OAIAllResponseTypesExample::is_op_types_Set() const{
    return m_op_types_isSet;
}

bool OAIAllResponseTypesExample::is_op_types_Valid() const{
    return m_op_types_isValid;
}

OAIOrderChangeMessage OAIAllResponseTypesExample::getOrderChangeMessage() const {
    return m_order_change_message;
}
void OAIAllResponseTypesExample::setOrderChangeMessage(const OAIOrderChangeMessage &order_change_message) {
    m_order_change_message = order_change_message;
    m_order_change_message_isSet = true;
}

bool OAIAllResponseTypesExample::is_order_change_message_Set() const{
    return m_order_change_message_isSet;
}

bool OAIAllResponseTypesExample::is_order_change_message_Valid() const{
    return m_order_change_message_isValid;
}

OAIStatusMessage OAIAllResponseTypesExample::getStatus() const {
    return m_status;
}
void OAIAllResponseTypesExample::setStatus(const OAIStatusMessage &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAllResponseTypesExample::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAllResponseTypesExample::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAllResponseTypesExample::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_change_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_change_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllResponseTypesExample::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
