/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatusMessage.h
 *
 * 
 */

#ifndef OAIStatusMessage_H
#define OAIStatusMessage_H

#include <QJsonObject>

#include "OAIResponseMessage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStatusMessage : public OAIObject {
public:
    OAIStatusMessage();
    OAIStatusMessage(QString json);
    ~OAIStatusMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOp() const;
    void setOp(const QString &op);
    bool is_op_Set() const;
    bool is_op_Valid() const;

    bool isConnectionClosed() const;
    void setConnectionClosed(const bool &connection_closed);
    bool is_connection_closed_Set() const;
    bool is_connection_closed_Valid() const;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    qint32 getConnectionsAvailable() const;
    void setConnectionsAvailable(const qint32 &connections_available);
    bool is_connections_available_Set() const;
    bool is_connections_available_Valid() const;

    QString getErrorCode() const;
    void setErrorCode(const QString &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getStatusCode() const;
    void setStatusCode(const QString &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_op;
    bool m_op_isSet;
    bool m_op_isValid;

    bool m_connection_closed;
    bool m_connection_closed_isSet;
    bool m_connection_closed_isValid;

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    qint32 m_connections_available;
    bool m_connections_available_isSet;
    bool m_connections_available_isValid;

    QString m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatusMessage)

#endif // OAIStatusMessage_H
