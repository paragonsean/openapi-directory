/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunnerDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunnerDefinition::OAIRunnerDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunnerDefinition::OAIRunnerDefinition() {
    this->initializeModel();
}

OAIRunnerDefinition::~OAIRunnerDefinition() {}

void OAIRunnerDefinition::initializeModel() {

    m_adjustment_factor_isSet = false;
    m_adjustment_factor_isValid = false;

    m_bsp_isSet = false;
    m_bsp_isValid = false;

    m_hc_isSet = false;
    m_hc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_removal_date_isSet = false;
    m_removal_date_isValid = false;

    m_sort_priority_isSet = false;
    m_sort_priority_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRunnerDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunnerDefinition::fromJsonObject(QJsonObject json) {

    m_adjustment_factor_isValid = ::OpenAPI::fromJsonValue(m_adjustment_factor, json[QString("adjustmentFactor")]);
    m_adjustment_factor_isSet = !json[QString("adjustmentFactor")].isNull() && m_adjustment_factor_isValid;

    m_bsp_isValid = ::OpenAPI::fromJsonValue(m_bsp, json[QString("bsp")]);
    m_bsp_isSet = !json[QString("bsp")].isNull() && m_bsp_isValid;

    m_hc_isValid = ::OpenAPI::fromJsonValue(m_hc, json[QString("hc")]);
    m_hc_isSet = !json[QString("hc")].isNull() && m_hc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_removal_date_isValid = ::OpenAPI::fromJsonValue(m_removal_date, json[QString("removalDate")]);
    m_removal_date_isSet = !json[QString("removalDate")].isNull() && m_removal_date_isValid;

    m_sort_priority_isValid = ::OpenAPI::fromJsonValue(m_sort_priority, json[QString("sortPriority")]);
    m_sort_priority_isSet = !json[QString("sortPriority")].isNull() && m_sort_priority_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRunnerDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunnerDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_factor_isSet) {
        obj.insert(QString("adjustmentFactor"), ::OpenAPI::toJsonValue(m_adjustment_factor));
    }
    if (m_bsp_isSet) {
        obj.insert(QString("bsp"), ::OpenAPI::toJsonValue(m_bsp));
    }
    if (m_hc_isSet) {
        obj.insert(QString("hc"), ::OpenAPI::toJsonValue(m_hc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_removal_date_isSet) {
        obj.insert(QString("removalDate"), ::OpenAPI::toJsonValue(m_removal_date));
    }
    if (m_sort_priority_isSet) {
        obj.insert(QString("sortPriority"), ::OpenAPI::toJsonValue(m_sort_priority));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIRunnerDefinition::getAdjustmentFactor() const {
    return m_adjustment_factor;
}
void OAIRunnerDefinition::setAdjustmentFactor(const double &adjustment_factor) {
    m_adjustment_factor = adjustment_factor;
    m_adjustment_factor_isSet = true;
}

bool OAIRunnerDefinition::is_adjustment_factor_Set() const{
    return m_adjustment_factor_isSet;
}

bool OAIRunnerDefinition::is_adjustment_factor_Valid() const{
    return m_adjustment_factor_isValid;
}

double OAIRunnerDefinition::getBsp() const {
    return m_bsp;
}
void OAIRunnerDefinition::setBsp(const double &bsp) {
    m_bsp = bsp;
    m_bsp_isSet = true;
}

bool OAIRunnerDefinition::is_bsp_Set() const{
    return m_bsp_isSet;
}

bool OAIRunnerDefinition::is_bsp_Valid() const{
    return m_bsp_isValid;
}

double OAIRunnerDefinition::getHc() const {
    return m_hc;
}
void OAIRunnerDefinition::setHc(const double &hc) {
    m_hc = hc;
    m_hc_isSet = true;
}

bool OAIRunnerDefinition::is_hc_Set() const{
    return m_hc_isSet;
}

bool OAIRunnerDefinition::is_hc_Valid() const{
    return m_hc_isValid;
}

qint64 OAIRunnerDefinition::getId() const {
    return m_id;
}
void OAIRunnerDefinition::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunnerDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunnerDefinition::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIRunnerDefinition::getRemovalDate() const {
    return m_removal_date;
}
void OAIRunnerDefinition::setRemovalDate(const QDateTime &removal_date) {
    m_removal_date = removal_date;
    m_removal_date_isSet = true;
}

bool OAIRunnerDefinition::is_removal_date_Set() const{
    return m_removal_date_isSet;
}

bool OAIRunnerDefinition::is_removal_date_Valid() const{
    return m_removal_date_isValid;
}

qint32 OAIRunnerDefinition::getSortPriority() const {
    return m_sort_priority;
}
void OAIRunnerDefinition::setSortPriority(const qint32 &sort_priority) {
    m_sort_priority = sort_priority;
    m_sort_priority_isSet = true;
}

bool OAIRunnerDefinition::is_sort_priority_Set() const{
    return m_sort_priority_isSet;
}

bool OAIRunnerDefinition::is_sort_priority_Valid() const{
    return m_sort_priority_isValid;
}

QString OAIRunnerDefinition::getStatus() const {
    return m_status;
}
void OAIRunnerDefinition::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRunnerDefinition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRunnerDefinition::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRunnerDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunnerDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
