/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllRequestTypesExample.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllRequestTypesExample::OAIAllRequestTypesExample(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllRequestTypesExample::OAIAllRequestTypesExample() {
    this->initializeModel();
}

OAIAllRequestTypesExample::~OAIAllRequestTypesExample() {}

void OAIAllRequestTypesExample::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_heartbeat_isSet = false;
    m_heartbeat_isValid = false;

    m_market_subscription_isSet = false;
    m_market_subscription_isValid = false;

    m_op_types_isSet = false;
    m_op_types_isValid = false;

    m_order_subscription_message_isSet = false;
    m_order_subscription_message_isValid = false;
}

void OAIAllRequestTypesExample::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllRequestTypesExample::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_heartbeat, json[QString("heartbeat")]);
    m_heartbeat_isSet = !json[QString("heartbeat")].isNull() && m_heartbeat_isValid;

    m_market_subscription_isValid = ::OpenAPI::fromJsonValue(m_market_subscription, json[QString("marketSubscription")]);
    m_market_subscription_isSet = !json[QString("marketSubscription")].isNull() && m_market_subscription_isValid;

    m_op_types_isValid = ::OpenAPI::fromJsonValue(m_op_types, json[QString("opTypes")]);
    m_op_types_isSet = !json[QString("opTypes")].isNull() && m_op_types_isValid;

    m_order_subscription_message_isValid = ::OpenAPI::fromJsonValue(m_order_subscription_message, json[QString("orderSubscriptionMessage")]);
    m_order_subscription_message_isSet = !json[QString("orderSubscriptionMessage")].isNull() && m_order_subscription_message_isValid;
}

QString OAIAllRequestTypesExample::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllRequestTypesExample::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_heartbeat.isSet()) {
        obj.insert(QString("heartbeat"), ::OpenAPI::toJsonValue(m_heartbeat));
    }
    if (m_market_subscription.isSet()) {
        obj.insert(QString("marketSubscription"), ::OpenAPI::toJsonValue(m_market_subscription));
    }
    if (m_op_types_isSet) {
        obj.insert(QString("opTypes"), ::OpenAPI::toJsonValue(m_op_types));
    }
    if (m_order_subscription_message.isSet()) {
        obj.insert(QString("orderSubscriptionMessage"), ::OpenAPI::toJsonValue(m_order_subscription_message));
    }
    return obj;
}

OAIAuthenticationMessage OAIAllRequestTypesExample::getAuthentication() const {
    return m_authentication;
}
void OAIAllRequestTypesExample::setAuthentication(const OAIAuthenticationMessage &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIAllRequestTypesExample::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIAllRequestTypesExample::is_authentication_Valid() const{
    return m_authentication_isValid;
}

OAIHeartbeatMessage OAIAllRequestTypesExample::getHeartbeat() const {
    return m_heartbeat;
}
void OAIAllRequestTypesExample::setHeartbeat(const OAIHeartbeatMessage &heartbeat) {
    m_heartbeat = heartbeat;
    m_heartbeat_isSet = true;
}

bool OAIAllRequestTypesExample::is_heartbeat_Set() const{
    return m_heartbeat_isSet;
}

bool OAIAllRequestTypesExample::is_heartbeat_Valid() const{
    return m_heartbeat_isValid;
}

OAIMarketSubscriptionMessage OAIAllRequestTypesExample::getMarketSubscription() const {
    return m_market_subscription;
}
void OAIAllRequestTypesExample::setMarketSubscription(const OAIMarketSubscriptionMessage &market_subscription) {
    m_market_subscription = market_subscription;
    m_market_subscription_isSet = true;
}

bool OAIAllRequestTypesExample::is_market_subscription_Set() const{
    return m_market_subscription_isSet;
}

bool OAIAllRequestTypesExample::is_market_subscription_Valid() const{
    return m_market_subscription_isValid;
}

QString OAIAllRequestTypesExample::getOpTypes() const {
    return m_op_types;
}
void OAIAllRequestTypesExample::setOpTypes(const QString &op_types) {
    m_op_types = op_types;
    m_op_types_isSet = true;
}

bool OAIAllRequestTypesExample::is_op_types_Set() const{
    return m_op_types_isSet;
}

bool OAIAllRequestTypesExample::is_op_types_Valid() const{
    return m_op_types_isValid;
}

OAIOrderSubscriptionMessage OAIAllRequestTypesExample::getOrderSubscriptionMessage() const {
    return m_order_subscription_message;
}
void OAIAllRequestTypesExample::setOrderSubscriptionMessage(const OAIOrderSubscriptionMessage &order_subscription_message) {
    m_order_subscription_message = order_subscription_message;
    m_order_subscription_message_isSet = true;
}

bool OAIAllRequestTypesExample::is_order_subscription_message_Set() const{
    return m_order_subscription_message_isSet;
}

bool OAIAllRequestTypesExample::is_order_subscription_message_Valid() const{
    return m_order_subscription_message_isValid;
}

bool OAIAllRequestTypesExample::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_subscription_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllRequestTypesExample::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
