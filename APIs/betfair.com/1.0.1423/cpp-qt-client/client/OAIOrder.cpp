/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_avp_isSet = false;
    m_avp_isValid = false;

    m_bsp_isSet = false;
    m_bsp_isValid = false;

    m_cd_isSet = false;
    m_cd_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ld_isSet = false;
    m_ld_isValid = false;

    m_lsrc_isSet = false;
    m_lsrc_isValid = false;

    m_md_isSet = false;
    m_md_isValid = false;

    m_ot_isSet = false;
    m_ot_isValid = false;

    m_p_isSet = false;
    m_p_isValid = false;

    m_pd_isSet = false;
    m_pd_isValid = false;

    m_pt_isSet = false;
    m_pt_isValid = false;

    m_rac_isSet = false;
    m_rac_isValid = false;

    m_rc_isSet = false;
    m_rc_isValid = false;

    m_rfo_isSet = false;
    m_rfo_isValid = false;

    m_rfs_isSet = false;
    m_rfs_isValid = false;

    m_s_isSet = false;
    m_s_isValid = false;

    m_sc_isSet = false;
    m_sc_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_sl_isSet = false;
    m_sl_isValid = false;

    m_sm_isSet = false;
    m_sm_isValid = false;

    m_sr_isSet = false;
    m_sr_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sv_isSet = false;
    m_sv_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_avp_isValid = ::OpenAPI::fromJsonValue(m_avp, json[QString("avp")]);
    m_avp_isSet = !json[QString("avp")].isNull() && m_avp_isValid;

    m_bsp_isValid = ::OpenAPI::fromJsonValue(m_bsp, json[QString("bsp")]);
    m_bsp_isSet = !json[QString("bsp")].isNull() && m_bsp_isValid;

    m_cd_isValid = ::OpenAPI::fromJsonValue(m_cd, json[QString("cd")]);
    m_cd_isSet = !json[QString("cd")].isNull() && m_cd_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ld_isValid = ::OpenAPI::fromJsonValue(m_ld, json[QString("ld")]);
    m_ld_isSet = !json[QString("ld")].isNull() && m_ld_isValid;

    m_lsrc_isValid = ::OpenAPI::fromJsonValue(m_lsrc, json[QString("lsrc")]);
    m_lsrc_isSet = !json[QString("lsrc")].isNull() && m_lsrc_isValid;

    m_md_isValid = ::OpenAPI::fromJsonValue(m_md, json[QString("md")]);
    m_md_isSet = !json[QString("md")].isNull() && m_md_isValid;

    m_ot_isValid = ::OpenAPI::fromJsonValue(m_ot, json[QString("ot")]);
    m_ot_isSet = !json[QString("ot")].isNull() && m_ot_isValid;

    m_p_isValid = ::OpenAPI::fromJsonValue(m_p, json[QString("p")]);
    m_p_isSet = !json[QString("p")].isNull() && m_p_isValid;

    m_pd_isValid = ::OpenAPI::fromJsonValue(m_pd, json[QString("pd")]);
    m_pd_isSet = !json[QString("pd")].isNull() && m_pd_isValid;

    m_pt_isValid = ::OpenAPI::fromJsonValue(m_pt, json[QString("pt")]);
    m_pt_isSet = !json[QString("pt")].isNull() && m_pt_isValid;

    m_rac_isValid = ::OpenAPI::fromJsonValue(m_rac, json[QString("rac")]);
    m_rac_isSet = !json[QString("rac")].isNull() && m_rac_isValid;

    m_rc_isValid = ::OpenAPI::fromJsonValue(m_rc, json[QString("rc")]);
    m_rc_isSet = !json[QString("rc")].isNull() && m_rc_isValid;

    m_rfo_isValid = ::OpenAPI::fromJsonValue(m_rfo, json[QString("rfo")]);
    m_rfo_isSet = !json[QString("rfo")].isNull() && m_rfo_isValid;

    m_rfs_isValid = ::OpenAPI::fromJsonValue(m_rfs, json[QString("rfs")]);
    m_rfs_isSet = !json[QString("rfs")].isNull() && m_rfs_isValid;

    m_s_isValid = ::OpenAPI::fromJsonValue(m_s, json[QString("s")]);
    m_s_isSet = !json[QString("s")].isNull() && m_s_isValid;

    m_sc_isValid = ::OpenAPI::fromJsonValue(m_sc, json[QString("sc")]);
    m_sc_isSet = !json[QString("sc")].isNull() && m_sc_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(m_side, json[QString("side")]);
    m_side_isSet = !json[QString("side")].isNull() && m_side_isValid;

    m_sl_isValid = ::OpenAPI::fromJsonValue(m_sl, json[QString("sl")]);
    m_sl_isSet = !json[QString("sl")].isNull() && m_sl_isValid;

    m_sm_isValid = ::OpenAPI::fromJsonValue(m_sm, json[QString("sm")]);
    m_sm_isSet = !json[QString("sm")].isNull() && m_sm_isValid;

    m_sr_isValid = ::OpenAPI::fromJsonValue(m_sr, json[QString("sr")]);
    m_sr_isSet = !json[QString("sr")].isNull() && m_sr_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sv_isValid = ::OpenAPI::fromJsonValue(m_sv, json[QString("sv")]);
    m_sv_isSet = !json[QString("sv")].isNull() && m_sv_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_avp_isSet) {
        obj.insert(QString("avp"), ::OpenAPI::toJsonValue(m_avp));
    }
    if (m_bsp_isSet) {
        obj.insert(QString("bsp"), ::OpenAPI::toJsonValue(m_bsp));
    }
    if (m_cd_isSet) {
        obj.insert(QString("cd"), ::OpenAPI::toJsonValue(m_cd));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ld_isSet) {
        obj.insert(QString("ld"), ::OpenAPI::toJsonValue(m_ld));
    }
    if (m_lsrc_isSet) {
        obj.insert(QString("lsrc"), ::OpenAPI::toJsonValue(m_lsrc));
    }
    if (m_md_isSet) {
        obj.insert(QString("md"), ::OpenAPI::toJsonValue(m_md));
    }
    if (m_ot_isSet) {
        obj.insert(QString("ot"), ::OpenAPI::toJsonValue(m_ot));
    }
    if (m_p_isSet) {
        obj.insert(QString("p"), ::OpenAPI::toJsonValue(m_p));
    }
    if (m_pd_isSet) {
        obj.insert(QString("pd"), ::OpenAPI::toJsonValue(m_pd));
    }
    if (m_pt_isSet) {
        obj.insert(QString("pt"), ::OpenAPI::toJsonValue(m_pt));
    }
    if (m_rac_isSet) {
        obj.insert(QString("rac"), ::OpenAPI::toJsonValue(m_rac));
    }
    if (m_rc_isSet) {
        obj.insert(QString("rc"), ::OpenAPI::toJsonValue(m_rc));
    }
    if (m_rfo_isSet) {
        obj.insert(QString("rfo"), ::OpenAPI::toJsonValue(m_rfo));
    }
    if (m_rfs_isSet) {
        obj.insert(QString("rfs"), ::OpenAPI::toJsonValue(m_rfs));
    }
    if (m_s_isSet) {
        obj.insert(QString("s"), ::OpenAPI::toJsonValue(m_s));
    }
    if (m_sc_isSet) {
        obj.insert(QString("sc"), ::OpenAPI::toJsonValue(m_sc));
    }
    if (m_side_isSet) {
        obj.insert(QString("side"), ::OpenAPI::toJsonValue(m_side));
    }
    if (m_sl_isSet) {
        obj.insert(QString("sl"), ::OpenAPI::toJsonValue(m_sl));
    }
    if (m_sm_isSet) {
        obj.insert(QString("sm"), ::OpenAPI::toJsonValue(m_sm));
    }
    if (m_sr_isSet) {
        obj.insert(QString("sr"), ::OpenAPI::toJsonValue(m_sr));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sv_isSet) {
        obj.insert(QString("sv"), ::OpenAPI::toJsonValue(m_sv));
    }
    return obj;
}

double OAIOrder::getAvp() const {
    return m_avp;
}
void OAIOrder::setAvp(const double &avp) {
    m_avp = avp;
    m_avp_isSet = true;
}

bool OAIOrder::is_avp_Set() const{
    return m_avp_isSet;
}

bool OAIOrder::is_avp_Valid() const{
    return m_avp_isValid;
}

double OAIOrder::getBsp() const {
    return m_bsp;
}
void OAIOrder::setBsp(const double &bsp) {
    m_bsp = bsp;
    m_bsp_isSet = true;
}

bool OAIOrder::is_bsp_Set() const{
    return m_bsp_isSet;
}

bool OAIOrder::is_bsp_Valid() const{
    return m_bsp_isValid;
}

qint64 OAIOrder::getCd() const {
    return m_cd;
}
void OAIOrder::setCd(const qint64 &cd) {
    m_cd = cd;
    m_cd_isSet = true;
}

bool OAIOrder::is_cd_Set() const{
    return m_cd_isSet;
}

bool OAIOrder::is_cd_Valid() const{
    return m_cd_isValid;
}

QString OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIOrder::getLd() const {
    return m_ld;
}
void OAIOrder::setLd(const qint64 &ld) {
    m_ld = ld;
    m_ld_isSet = true;
}

bool OAIOrder::is_ld_Set() const{
    return m_ld_isSet;
}

bool OAIOrder::is_ld_Valid() const{
    return m_ld_isValid;
}

QString OAIOrder::getLsrc() const {
    return m_lsrc;
}
void OAIOrder::setLsrc(const QString &lsrc) {
    m_lsrc = lsrc;
    m_lsrc_isSet = true;
}

bool OAIOrder::is_lsrc_Set() const{
    return m_lsrc_isSet;
}

bool OAIOrder::is_lsrc_Valid() const{
    return m_lsrc_isValid;
}

qint64 OAIOrder::getMd() const {
    return m_md;
}
void OAIOrder::setMd(const qint64 &md) {
    m_md = md;
    m_md_isSet = true;
}

bool OAIOrder::is_md_Set() const{
    return m_md_isSet;
}

bool OAIOrder::is_md_Valid() const{
    return m_md_isValid;
}

QString OAIOrder::getOt() const {
    return m_ot;
}
void OAIOrder::setOt(const QString &ot) {
    m_ot = ot;
    m_ot_isSet = true;
}

bool OAIOrder::is_ot_Set() const{
    return m_ot_isSet;
}

bool OAIOrder::is_ot_Valid() const{
    return m_ot_isValid;
}

double OAIOrder::getP() const {
    return m_p;
}
void OAIOrder::setP(const double &p) {
    m_p = p;
    m_p_isSet = true;
}

bool OAIOrder::is_p_Set() const{
    return m_p_isSet;
}

bool OAIOrder::is_p_Valid() const{
    return m_p_isValid;
}

qint64 OAIOrder::getPd() const {
    return m_pd;
}
void OAIOrder::setPd(const qint64 &pd) {
    m_pd = pd;
    m_pd_isSet = true;
}

bool OAIOrder::is_pd_Set() const{
    return m_pd_isSet;
}

bool OAIOrder::is_pd_Valid() const{
    return m_pd_isValid;
}

QString OAIOrder::getPt() const {
    return m_pt;
}
void OAIOrder::setPt(const QString &pt) {
    m_pt = pt;
    m_pt_isSet = true;
}

bool OAIOrder::is_pt_Set() const{
    return m_pt_isSet;
}

bool OAIOrder::is_pt_Valid() const{
    return m_pt_isValid;
}

QString OAIOrder::getRac() const {
    return m_rac;
}
void OAIOrder::setRac(const QString &rac) {
    m_rac = rac;
    m_rac_isSet = true;
}

bool OAIOrder::is_rac_Set() const{
    return m_rac_isSet;
}

bool OAIOrder::is_rac_Valid() const{
    return m_rac_isValid;
}

QString OAIOrder::getRc() const {
    return m_rc;
}
void OAIOrder::setRc(const QString &rc) {
    m_rc = rc;
    m_rc_isSet = true;
}

bool OAIOrder::is_rc_Set() const{
    return m_rc_isSet;
}

bool OAIOrder::is_rc_Valid() const{
    return m_rc_isValid;
}

QString OAIOrder::getRfo() const {
    return m_rfo;
}
void OAIOrder::setRfo(const QString &rfo) {
    m_rfo = rfo;
    m_rfo_isSet = true;
}

bool OAIOrder::is_rfo_Set() const{
    return m_rfo_isSet;
}

bool OAIOrder::is_rfo_Valid() const{
    return m_rfo_isValid;
}

QString OAIOrder::getRfs() const {
    return m_rfs;
}
void OAIOrder::setRfs(const QString &rfs) {
    m_rfs = rfs;
    m_rfs_isSet = true;
}

bool OAIOrder::is_rfs_Set() const{
    return m_rfs_isSet;
}

bool OAIOrder::is_rfs_Valid() const{
    return m_rfs_isValid;
}

double OAIOrder::getS() const {
    return m_s;
}
void OAIOrder::setS(const double &s) {
    m_s = s;
    m_s_isSet = true;
}

bool OAIOrder::is_s_Set() const{
    return m_s_isSet;
}

bool OAIOrder::is_s_Valid() const{
    return m_s_isValid;
}

double OAIOrder::getSc() const {
    return m_sc;
}
void OAIOrder::setSc(const double &sc) {
    m_sc = sc;
    m_sc_isSet = true;
}

bool OAIOrder::is_sc_Set() const{
    return m_sc_isSet;
}

bool OAIOrder::is_sc_Valid() const{
    return m_sc_isValid;
}

QString OAIOrder::getSide() const {
    return m_side;
}
void OAIOrder::setSide(const QString &side) {
    m_side = side;
    m_side_isSet = true;
}

bool OAIOrder::is_side_Set() const{
    return m_side_isSet;
}

bool OAIOrder::is_side_Valid() const{
    return m_side_isValid;
}

double OAIOrder::getSl() const {
    return m_sl;
}
void OAIOrder::setSl(const double &sl) {
    m_sl = sl;
    m_sl_isSet = true;
}

bool OAIOrder::is_sl_Set() const{
    return m_sl_isSet;
}

bool OAIOrder::is_sl_Valid() const{
    return m_sl_isValid;
}

double OAIOrder::getSm() const {
    return m_sm;
}
void OAIOrder::setSm(const double &sm) {
    m_sm = sm;
    m_sm_isSet = true;
}

bool OAIOrder::is_sm_Set() const{
    return m_sm_isSet;
}

bool OAIOrder::is_sm_Valid() const{
    return m_sm_isValid;
}

double OAIOrder::getSr() const {
    return m_sr;
}
void OAIOrder::setSr(const double &sr) {
    m_sr = sr;
    m_sr_isSet = true;
}

bool OAIOrder::is_sr_Set() const{
    return m_sr_isSet;
}

bool OAIOrder::is_sr_Valid() const{
    return m_sr_isValid;
}

QString OAIOrder::getStatus() const {
    return m_status;
}
void OAIOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrder::is_status_Valid() const{
    return m_status_isValid;
}

double OAIOrder::getSv() const {
    return m_sv;
}
void OAIOrder::setSv(const double &sv) {
    m_sv = sv;
    m_sv_isSet = true;
}

bool OAIOrder::is_sv_Set() const{
    return m_sv_isSet;
}

bool OAIOrder::is_sv_Valid() const{
    return m_sv_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsrc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
