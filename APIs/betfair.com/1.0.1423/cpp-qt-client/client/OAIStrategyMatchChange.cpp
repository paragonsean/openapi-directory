/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStrategyMatchChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStrategyMatchChange::OAIStrategyMatchChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStrategyMatchChange::OAIStrategyMatchChange() {
    this->initializeModel();
}

OAIStrategyMatchChange::~OAIStrategyMatchChange() {}

void OAIStrategyMatchChange::initializeModel() {

    m_mb_isSet = false;
    m_mb_isValid = false;

    m_ml_isSet = false;
    m_ml_isValid = false;
}

void OAIStrategyMatchChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStrategyMatchChange::fromJsonObject(QJsonObject json) {

    if(json["mb"].isArray()){
        auto arr = json["mb"].toArray();
        m_mb_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_mb_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_mb_isSet = !jval.isNull() && m_mb_isValid;
                m_mb.push_back(item);
            }
        }
    }

    if(json["ml"].isArray()){
        auto arr = json["ml"].toArray();
        m_ml_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_ml_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_ml_isSet = !jval.isNull() && m_ml_isValid;
                m_ml.push_back(item);
            }
        }
    }
}

QString OAIStrategyMatchChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStrategyMatchChange::asJsonObject() const {
    QJsonObject obj;
    if (m_mb.size() > 0) {
        
        obj.insert(QString("mb"), toJsonValue(m_mb));
    }
    if (m_ml.size() > 0) {
        
        obj.insert(QString("ml"), toJsonValue(m_ml));
    }
    return obj;
}

QList<QList<double>> OAIStrategyMatchChange::getMb() const {
    return m_mb;
}
void OAIStrategyMatchChange::setMb(const QList<QList<double>> &mb) {
    m_mb = mb;
    m_mb_isSet = true;
}

bool OAIStrategyMatchChange::is_mb_Set() const{
    return m_mb_isSet;
}

bool OAIStrategyMatchChange::is_mb_Valid() const{
    return m_mb_isValid;
}

QList<QList<double>> OAIStrategyMatchChange::getMl() const {
    return m_ml;
}
void OAIStrategyMatchChange::setMl(const QList<QList<double>> &ml) {
    m_ml = ml;
    m_ml_isSet = true;
}

bool OAIStrategyMatchChange::is_ml_Set() const{
    return m_ml_isSet;
}

bool OAIStrategyMatchChange::is_ml_Valid() const{
    return m_ml_isValid;
}

bool OAIStrategyMatchChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStrategyMatchChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
