/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketChangeMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketChangeMessage::OAIMarketChangeMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketChangeMessage::OAIMarketChangeMessage() {
    this->initializeModel();
}

OAIMarketChangeMessage::~OAIMarketChangeMessage() {}

void OAIMarketChangeMessage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_clk_isSet = false;
    m_clk_isValid = false;

    m_conflate_ms_isSet = false;
    m_conflate_ms_isValid = false;

    m_ct_isSet = false;
    m_ct_isValid = false;

    m_heartbeat_ms_isSet = false;
    m_heartbeat_ms_isValid = false;

    m_initial_clk_isSet = false;
    m_initial_clk_isValid = false;

    m_mc_isSet = false;
    m_mc_isValid = false;

    m_pt_isSet = false;
    m_pt_isValid = false;

    m_segment_type_isSet = false;
    m_segment_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMarketChangeMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketChangeMessage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_clk_isValid = ::OpenAPI::fromJsonValue(m_clk, json[QString("clk")]);
    m_clk_isSet = !json[QString("clk")].isNull() && m_clk_isValid;

    m_conflate_ms_isValid = ::OpenAPI::fromJsonValue(m_conflate_ms, json[QString("conflateMs")]);
    m_conflate_ms_isSet = !json[QString("conflateMs")].isNull() && m_conflate_ms_isValid;

    m_ct_isValid = ::OpenAPI::fromJsonValue(m_ct, json[QString("ct")]);
    m_ct_isSet = !json[QString("ct")].isNull() && m_ct_isValid;

    m_heartbeat_ms_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_ms, json[QString("heartbeatMs")]);
    m_heartbeat_ms_isSet = !json[QString("heartbeatMs")].isNull() && m_heartbeat_ms_isValid;

    m_initial_clk_isValid = ::OpenAPI::fromJsonValue(m_initial_clk, json[QString("initialClk")]);
    m_initial_clk_isSet = !json[QString("initialClk")].isNull() && m_initial_clk_isValid;

    m_mc_isValid = ::OpenAPI::fromJsonValue(m_mc, json[QString("mc")]);
    m_mc_isSet = !json[QString("mc")].isNull() && m_mc_isValid;

    m_pt_isValid = ::OpenAPI::fromJsonValue(m_pt, json[QString("pt")]);
    m_pt_isSet = !json[QString("pt")].isNull() && m_pt_isValid;

    m_segment_type_isValid = ::OpenAPI::fromJsonValue(m_segment_type, json[QString("segmentType")]);
    m_segment_type_isSet = !json[QString("segmentType")].isNull() && m_segment_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIMarketChangeMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketChangeMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_clk_isSet) {
        obj.insert(QString("clk"), ::OpenAPI::toJsonValue(m_clk));
    }
    if (m_conflate_ms_isSet) {
        obj.insert(QString("conflateMs"), ::OpenAPI::toJsonValue(m_conflate_ms));
    }
    if (m_ct_isSet) {
        obj.insert(QString("ct"), ::OpenAPI::toJsonValue(m_ct));
    }
    if (m_heartbeat_ms_isSet) {
        obj.insert(QString("heartbeatMs"), ::OpenAPI::toJsonValue(m_heartbeat_ms));
    }
    if (m_initial_clk_isSet) {
        obj.insert(QString("initialClk"), ::OpenAPI::toJsonValue(m_initial_clk));
    }
    if (m_mc.size() > 0) {
        obj.insert(QString("mc"), ::OpenAPI::toJsonValue(m_mc));
    }
    if (m_pt_isSet) {
        obj.insert(QString("pt"), ::OpenAPI::toJsonValue(m_pt));
    }
    if (m_segment_type_isSet) {
        obj.insert(QString("segmentType"), ::OpenAPI::toJsonValue(m_segment_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIMarketChangeMessage::getId() const {
    return m_id;
}
void OAIMarketChangeMessage::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMarketChangeMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMarketChangeMessage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMarketChangeMessage::getOp() const {
    return m_op;
}
void OAIMarketChangeMessage::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIMarketChangeMessage::is_op_Set() const{
    return m_op_isSet;
}

bool OAIMarketChangeMessage::is_op_Valid() const{
    return m_op_isValid;
}

QString OAIMarketChangeMessage::getClk() const {
    return m_clk;
}
void OAIMarketChangeMessage::setClk(const QString &clk) {
    m_clk = clk;
    m_clk_isSet = true;
}

bool OAIMarketChangeMessage::is_clk_Set() const{
    return m_clk_isSet;
}

bool OAIMarketChangeMessage::is_clk_Valid() const{
    return m_clk_isValid;
}

qint64 OAIMarketChangeMessage::getConflateMs() const {
    return m_conflate_ms;
}
void OAIMarketChangeMessage::setConflateMs(const qint64 &conflate_ms) {
    m_conflate_ms = conflate_ms;
    m_conflate_ms_isSet = true;
}

bool OAIMarketChangeMessage::is_conflate_ms_Set() const{
    return m_conflate_ms_isSet;
}

bool OAIMarketChangeMessage::is_conflate_ms_Valid() const{
    return m_conflate_ms_isValid;
}

QString OAIMarketChangeMessage::getCt() const {
    return m_ct;
}
void OAIMarketChangeMessage::setCt(const QString &ct) {
    m_ct = ct;
    m_ct_isSet = true;
}

bool OAIMarketChangeMessage::is_ct_Set() const{
    return m_ct_isSet;
}

bool OAIMarketChangeMessage::is_ct_Valid() const{
    return m_ct_isValid;
}

qint64 OAIMarketChangeMessage::getHeartbeatMs() const {
    return m_heartbeat_ms;
}
void OAIMarketChangeMessage::setHeartbeatMs(const qint64 &heartbeat_ms) {
    m_heartbeat_ms = heartbeat_ms;
    m_heartbeat_ms_isSet = true;
}

bool OAIMarketChangeMessage::is_heartbeat_ms_Set() const{
    return m_heartbeat_ms_isSet;
}

bool OAIMarketChangeMessage::is_heartbeat_ms_Valid() const{
    return m_heartbeat_ms_isValid;
}

QString OAIMarketChangeMessage::getInitialClk() const {
    return m_initial_clk;
}
void OAIMarketChangeMessage::setInitialClk(const QString &initial_clk) {
    m_initial_clk = initial_clk;
    m_initial_clk_isSet = true;
}

bool OAIMarketChangeMessage::is_initial_clk_Set() const{
    return m_initial_clk_isSet;
}

bool OAIMarketChangeMessage::is_initial_clk_Valid() const{
    return m_initial_clk_isValid;
}

QList<OAIMarketChange> OAIMarketChangeMessage::getMc() const {
    return m_mc;
}
void OAIMarketChangeMessage::setMc(const QList<OAIMarketChange> &mc) {
    m_mc = mc;
    m_mc_isSet = true;
}

bool OAIMarketChangeMessage::is_mc_Set() const{
    return m_mc_isSet;
}

bool OAIMarketChangeMessage::is_mc_Valid() const{
    return m_mc_isValid;
}

qint64 OAIMarketChangeMessage::getPt() const {
    return m_pt;
}
void OAIMarketChangeMessage::setPt(const qint64 &pt) {
    m_pt = pt;
    m_pt_isSet = true;
}

bool OAIMarketChangeMessage::is_pt_Set() const{
    return m_pt_isSet;
}

bool OAIMarketChangeMessage::is_pt_Valid() const{
    return m_pt_isValid;
}

QString OAIMarketChangeMessage::getSegmentType() const {
    return m_segment_type;
}
void OAIMarketChangeMessage::setSegmentType(const QString &segment_type) {
    m_segment_type = segment_type;
    m_segment_type_isSet = true;
}

bool OAIMarketChangeMessage::is_segment_type_Set() const{
    return m_segment_type_isSet;
}

bool OAIMarketChangeMessage::is_segment_type_Valid() const{
    return m_segment_type_isValid;
}

qint32 OAIMarketChangeMessage::getStatus() const {
    return m_status;
}
void OAIMarketChangeMessage::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMarketChangeMessage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMarketChangeMessage::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMarketChangeMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conflate_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_clk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketChangeMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
