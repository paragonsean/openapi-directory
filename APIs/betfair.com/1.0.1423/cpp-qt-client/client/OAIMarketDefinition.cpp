/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketDefinition::OAIMarketDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketDefinition::OAIMarketDefinition() {
    this->initializeModel();
}

OAIMarketDefinition::~OAIMarketDefinition() {}

void OAIMarketDefinition::initializeModel() {

    m_bet_delay_isSet = false;
    m_bet_delay_isValid = false;

    m_betting_type_isSet = false;
    m_betting_type_isValid = false;

    m_bsp_market_isSet = false;
    m_bsp_market_isValid = false;

    m_bsp_reconciled_isSet = false;
    m_bsp_reconciled_isValid = false;

    m_complete_isSet = false;
    m_complete_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_cross_matching_isSet = false;
    m_cross_matching_isValid = false;

    m_discount_allowed_isSet = false;
    m_discount_allowed_isValid = false;

    m_each_way_divisor_isSet = false;
    m_each_way_divisor_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_id_isSet = false;
    m_event_type_id_isValid = false;

    m_in_play_isSet = false;
    m_in_play_isValid = false;

    m_key_line_definition_isSet = false;
    m_key_line_definition_isValid = false;

    m_line_interval_isSet = false;
    m_line_interval_isValid = false;

    m_line_max_unit_isSet = false;
    m_line_max_unit_isValid = false;

    m_line_min_unit_isSet = false;
    m_line_min_unit_isValid = false;

    m_market_base_rate_isSet = false;
    m_market_base_rate_isValid = false;

    m_market_time_isSet = false;
    m_market_time_isValid = false;

    m_market_type_isSet = false;
    m_market_type_isValid = false;

    m_number_of_active_runners_isSet = false;
    m_number_of_active_runners_isValid = false;

    m_number_of_winners_isSet = false;
    m_number_of_winners_isValid = false;

    m_open_date_isSet = false;
    m_open_date_isValid = false;

    m_persistence_enabled_isSet = false;
    m_persistence_enabled_isValid = false;

    m_price_ladder_definition_isSet = false;
    m_price_ladder_definition_isValid = false;

    m_race_type_isSet = false;
    m_race_type_isValid = false;

    m_regulators_isSet = false;
    m_regulators_isValid = false;

    m_runners_isSet = false;
    m_runners_isValid = false;

    m_runners_voidable_isSet = false;
    m_runners_voidable_isValid = false;

    m_settled_time_isSet = false;
    m_settled_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_suspend_time_isSet = false;
    m_suspend_time_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_turn_in_play_enabled_isSet = false;
    m_turn_in_play_enabled_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMarketDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketDefinition::fromJsonObject(QJsonObject json) {

    m_bet_delay_isValid = ::OpenAPI::fromJsonValue(m_bet_delay, json[QString("betDelay")]);
    m_bet_delay_isSet = !json[QString("betDelay")].isNull() && m_bet_delay_isValid;

    m_betting_type_isValid = ::OpenAPI::fromJsonValue(m_betting_type, json[QString("bettingType")]);
    m_betting_type_isSet = !json[QString("bettingType")].isNull() && m_betting_type_isValid;

    m_bsp_market_isValid = ::OpenAPI::fromJsonValue(m_bsp_market, json[QString("bspMarket")]);
    m_bsp_market_isSet = !json[QString("bspMarket")].isNull() && m_bsp_market_isValid;

    m_bsp_reconciled_isValid = ::OpenAPI::fromJsonValue(m_bsp_reconciled, json[QString("bspReconciled")]);
    m_bsp_reconciled_isSet = !json[QString("bspReconciled")].isNull() && m_bsp_reconciled_isValid;

    m_complete_isValid = ::OpenAPI::fromJsonValue(m_complete, json[QString("complete")]);
    m_complete_isSet = !json[QString("complete")].isNull() && m_complete_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_cross_matching_isValid = ::OpenAPI::fromJsonValue(m_cross_matching, json[QString("crossMatching")]);
    m_cross_matching_isSet = !json[QString("crossMatching")].isNull() && m_cross_matching_isValid;

    m_discount_allowed_isValid = ::OpenAPI::fromJsonValue(m_discount_allowed, json[QString("discountAllowed")]);
    m_discount_allowed_isSet = !json[QString("discountAllowed")].isNull() && m_discount_allowed_isValid;

    m_each_way_divisor_isValid = ::OpenAPI::fromJsonValue(m_each_way_divisor, json[QString("eachWayDivisor")]);
    m_each_way_divisor_isSet = !json[QString("eachWayDivisor")].isNull() && m_each_way_divisor_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_type_id_isValid = ::OpenAPI::fromJsonValue(m_event_type_id, json[QString("eventTypeId")]);
    m_event_type_id_isSet = !json[QString("eventTypeId")].isNull() && m_event_type_id_isValid;

    m_in_play_isValid = ::OpenAPI::fromJsonValue(m_in_play, json[QString("inPlay")]);
    m_in_play_isSet = !json[QString("inPlay")].isNull() && m_in_play_isValid;

    m_key_line_definition_isValid = ::OpenAPI::fromJsonValue(m_key_line_definition, json[QString("keyLineDefinition")]);
    m_key_line_definition_isSet = !json[QString("keyLineDefinition")].isNull() && m_key_line_definition_isValid;

    m_line_interval_isValid = ::OpenAPI::fromJsonValue(m_line_interval, json[QString("lineInterval")]);
    m_line_interval_isSet = !json[QString("lineInterval")].isNull() && m_line_interval_isValid;

    m_line_max_unit_isValid = ::OpenAPI::fromJsonValue(m_line_max_unit, json[QString("lineMaxUnit")]);
    m_line_max_unit_isSet = !json[QString("lineMaxUnit")].isNull() && m_line_max_unit_isValid;

    m_line_min_unit_isValid = ::OpenAPI::fromJsonValue(m_line_min_unit, json[QString("lineMinUnit")]);
    m_line_min_unit_isSet = !json[QString("lineMinUnit")].isNull() && m_line_min_unit_isValid;

    m_market_base_rate_isValid = ::OpenAPI::fromJsonValue(m_market_base_rate, json[QString("marketBaseRate")]);
    m_market_base_rate_isSet = !json[QString("marketBaseRate")].isNull() && m_market_base_rate_isValid;

    m_market_time_isValid = ::OpenAPI::fromJsonValue(m_market_time, json[QString("marketTime")]);
    m_market_time_isSet = !json[QString("marketTime")].isNull() && m_market_time_isValid;

    m_market_type_isValid = ::OpenAPI::fromJsonValue(m_market_type, json[QString("marketType")]);
    m_market_type_isSet = !json[QString("marketType")].isNull() && m_market_type_isValid;

    m_number_of_active_runners_isValid = ::OpenAPI::fromJsonValue(m_number_of_active_runners, json[QString("numberOfActiveRunners")]);
    m_number_of_active_runners_isSet = !json[QString("numberOfActiveRunners")].isNull() && m_number_of_active_runners_isValid;

    m_number_of_winners_isValid = ::OpenAPI::fromJsonValue(m_number_of_winners, json[QString("numberOfWinners")]);
    m_number_of_winners_isSet = !json[QString("numberOfWinners")].isNull() && m_number_of_winners_isValid;

    m_open_date_isValid = ::OpenAPI::fromJsonValue(m_open_date, json[QString("openDate")]);
    m_open_date_isSet = !json[QString("openDate")].isNull() && m_open_date_isValid;

    m_persistence_enabled_isValid = ::OpenAPI::fromJsonValue(m_persistence_enabled, json[QString("persistenceEnabled")]);
    m_persistence_enabled_isSet = !json[QString("persistenceEnabled")].isNull() && m_persistence_enabled_isValid;

    m_price_ladder_definition_isValid = ::OpenAPI::fromJsonValue(m_price_ladder_definition, json[QString("priceLadderDefinition")]);
    m_price_ladder_definition_isSet = !json[QString("priceLadderDefinition")].isNull() && m_price_ladder_definition_isValid;

    m_race_type_isValid = ::OpenAPI::fromJsonValue(m_race_type, json[QString("raceType")]);
    m_race_type_isSet = !json[QString("raceType")].isNull() && m_race_type_isValid;

    m_regulators_isValid = ::OpenAPI::fromJsonValue(m_regulators, json[QString("regulators")]);
    m_regulators_isSet = !json[QString("regulators")].isNull() && m_regulators_isValid;

    m_runners_isValid = ::OpenAPI::fromJsonValue(m_runners, json[QString("runners")]);
    m_runners_isSet = !json[QString("runners")].isNull() && m_runners_isValid;

    m_runners_voidable_isValid = ::OpenAPI::fromJsonValue(m_runners_voidable, json[QString("runnersVoidable")]);
    m_runners_voidable_isSet = !json[QString("runnersVoidable")].isNull() && m_runners_voidable_isValid;

    m_settled_time_isValid = ::OpenAPI::fromJsonValue(m_settled_time, json[QString("settledTime")]);
    m_settled_time_isSet = !json[QString("settledTime")].isNull() && m_settled_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_suspend_time_isValid = ::OpenAPI::fromJsonValue(m_suspend_time, json[QString("suspendTime")]);
    m_suspend_time_isSet = !json[QString("suspendTime")].isNull() && m_suspend_time_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_turn_in_play_enabled_isValid = ::OpenAPI::fromJsonValue(m_turn_in_play_enabled, json[QString("turnInPlayEnabled")]);
    m_turn_in_play_enabled_isSet = !json[QString("turnInPlayEnabled")].isNull() && m_turn_in_play_enabled_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMarketDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_bet_delay_isSet) {
        obj.insert(QString("betDelay"), ::OpenAPI::toJsonValue(m_bet_delay));
    }
    if (m_betting_type_isSet) {
        obj.insert(QString("bettingType"), ::OpenAPI::toJsonValue(m_betting_type));
    }
    if (m_bsp_market_isSet) {
        obj.insert(QString("bspMarket"), ::OpenAPI::toJsonValue(m_bsp_market));
    }
    if (m_bsp_reconciled_isSet) {
        obj.insert(QString("bspReconciled"), ::OpenAPI::toJsonValue(m_bsp_reconciled));
    }
    if (m_complete_isSet) {
        obj.insert(QString("complete"), ::OpenAPI::toJsonValue(m_complete));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_cross_matching_isSet) {
        obj.insert(QString("crossMatching"), ::OpenAPI::toJsonValue(m_cross_matching));
    }
    if (m_discount_allowed_isSet) {
        obj.insert(QString("discountAllowed"), ::OpenAPI::toJsonValue(m_discount_allowed));
    }
    if (m_each_way_divisor_isSet) {
        obj.insert(QString("eachWayDivisor"), ::OpenAPI::toJsonValue(m_each_way_divisor));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type_id_isSet) {
        obj.insert(QString("eventTypeId"), ::OpenAPI::toJsonValue(m_event_type_id));
    }
    if (m_in_play_isSet) {
        obj.insert(QString("inPlay"), ::OpenAPI::toJsonValue(m_in_play));
    }
    if (m_key_line_definition.isSet()) {
        obj.insert(QString("keyLineDefinition"), ::OpenAPI::toJsonValue(m_key_line_definition));
    }
    if (m_line_interval_isSet) {
        obj.insert(QString("lineInterval"), ::OpenAPI::toJsonValue(m_line_interval));
    }
    if (m_line_max_unit_isSet) {
        obj.insert(QString("lineMaxUnit"), ::OpenAPI::toJsonValue(m_line_max_unit));
    }
    if (m_line_min_unit_isSet) {
        obj.insert(QString("lineMinUnit"), ::OpenAPI::toJsonValue(m_line_min_unit));
    }
    if (m_market_base_rate_isSet) {
        obj.insert(QString("marketBaseRate"), ::OpenAPI::toJsonValue(m_market_base_rate));
    }
    if (m_market_time_isSet) {
        obj.insert(QString("marketTime"), ::OpenAPI::toJsonValue(m_market_time));
    }
    if (m_market_type_isSet) {
        obj.insert(QString("marketType"), ::OpenAPI::toJsonValue(m_market_type));
    }
    if (m_number_of_active_runners_isSet) {
        obj.insert(QString("numberOfActiveRunners"), ::OpenAPI::toJsonValue(m_number_of_active_runners));
    }
    if (m_number_of_winners_isSet) {
        obj.insert(QString("numberOfWinners"), ::OpenAPI::toJsonValue(m_number_of_winners));
    }
    if (m_open_date_isSet) {
        obj.insert(QString("openDate"), ::OpenAPI::toJsonValue(m_open_date));
    }
    if (m_persistence_enabled_isSet) {
        obj.insert(QString("persistenceEnabled"), ::OpenAPI::toJsonValue(m_persistence_enabled));
    }
    if (m_price_ladder_definition.isSet()) {
        obj.insert(QString("priceLadderDefinition"), ::OpenAPI::toJsonValue(m_price_ladder_definition));
    }
    if (m_race_type_isSet) {
        obj.insert(QString("raceType"), ::OpenAPI::toJsonValue(m_race_type));
    }
    if (m_regulators.size() > 0) {
        obj.insert(QString("regulators"), ::OpenAPI::toJsonValue(m_regulators));
    }
    if (m_runners.size() > 0) {
        obj.insert(QString("runners"), ::OpenAPI::toJsonValue(m_runners));
    }
    if (m_runners_voidable_isSet) {
        obj.insert(QString("runnersVoidable"), ::OpenAPI::toJsonValue(m_runners_voidable));
    }
    if (m_settled_time_isSet) {
        obj.insert(QString("settledTime"), ::OpenAPI::toJsonValue(m_settled_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_suspend_time_isSet) {
        obj.insert(QString("suspendTime"), ::OpenAPI::toJsonValue(m_suspend_time));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_turn_in_play_enabled_isSet) {
        obj.insert(QString("turnInPlayEnabled"), ::OpenAPI::toJsonValue(m_turn_in_play_enabled));
    }
    if (m_venue_isSet) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIMarketDefinition::getBetDelay() const {
    return m_bet_delay;
}
void OAIMarketDefinition::setBetDelay(const qint32 &bet_delay) {
    m_bet_delay = bet_delay;
    m_bet_delay_isSet = true;
}

bool OAIMarketDefinition::is_bet_delay_Set() const{
    return m_bet_delay_isSet;
}

bool OAIMarketDefinition::is_bet_delay_Valid() const{
    return m_bet_delay_isValid;
}

QString OAIMarketDefinition::getBettingType() const {
    return m_betting_type;
}
void OAIMarketDefinition::setBettingType(const QString &betting_type) {
    m_betting_type = betting_type;
    m_betting_type_isSet = true;
}

bool OAIMarketDefinition::is_betting_type_Set() const{
    return m_betting_type_isSet;
}

bool OAIMarketDefinition::is_betting_type_Valid() const{
    return m_betting_type_isValid;
}

bool OAIMarketDefinition::isBspMarket() const {
    return m_bsp_market;
}
void OAIMarketDefinition::setBspMarket(const bool &bsp_market) {
    m_bsp_market = bsp_market;
    m_bsp_market_isSet = true;
}

bool OAIMarketDefinition::is_bsp_market_Set() const{
    return m_bsp_market_isSet;
}

bool OAIMarketDefinition::is_bsp_market_Valid() const{
    return m_bsp_market_isValid;
}

bool OAIMarketDefinition::isBspReconciled() const {
    return m_bsp_reconciled;
}
void OAIMarketDefinition::setBspReconciled(const bool &bsp_reconciled) {
    m_bsp_reconciled = bsp_reconciled;
    m_bsp_reconciled_isSet = true;
}

bool OAIMarketDefinition::is_bsp_reconciled_Set() const{
    return m_bsp_reconciled_isSet;
}

bool OAIMarketDefinition::is_bsp_reconciled_Valid() const{
    return m_bsp_reconciled_isValid;
}

bool OAIMarketDefinition::isComplete() const {
    return m_complete;
}
void OAIMarketDefinition::setComplete(const bool &complete) {
    m_complete = complete;
    m_complete_isSet = true;
}

bool OAIMarketDefinition::is_complete_Set() const{
    return m_complete_isSet;
}

bool OAIMarketDefinition::is_complete_Valid() const{
    return m_complete_isValid;
}

QString OAIMarketDefinition::getCountryCode() const {
    return m_country_code;
}
void OAIMarketDefinition::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIMarketDefinition::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIMarketDefinition::is_country_code_Valid() const{
    return m_country_code_isValid;
}

bool OAIMarketDefinition::isCrossMatching() const {
    return m_cross_matching;
}
void OAIMarketDefinition::setCrossMatching(const bool &cross_matching) {
    m_cross_matching = cross_matching;
    m_cross_matching_isSet = true;
}

bool OAIMarketDefinition::is_cross_matching_Set() const{
    return m_cross_matching_isSet;
}

bool OAIMarketDefinition::is_cross_matching_Valid() const{
    return m_cross_matching_isValid;
}

bool OAIMarketDefinition::isDiscountAllowed() const {
    return m_discount_allowed;
}
void OAIMarketDefinition::setDiscountAllowed(const bool &discount_allowed) {
    m_discount_allowed = discount_allowed;
    m_discount_allowed_isSet = true;
}

bool OAIMarketDefinition::is_discount_allowed_Set() const{
    return m_discount_allowed_isSet;
}

bool OAIMarketDefinition::is_discount_allowed_Valid() const{
    return m_discount_allowed_isValid;
}

double OAIMarketDefinition::getEachWayDivisor() const {
    return m_each_way_divisor;
}
void OAIMarketDefinition::setEachWayDivisor(const double &each_way_divisor) {
    m_each_way_divisor = each_way_divisor;
    m_each_way_divisor_isSet = true;
}

bool OAIMarketDefinition::is_each_way_divisor_Set() const{
    return m_each_way_divisor_isSet;
}

bool OAIMarketDefinition::is_each_way_divisor_Valid() const{
    return m_each_way_divisor_isValid;
}

QString OAIMarketDefinition::getEventId() const {
    return m_event_id;
}
void OAIMarketDefinition::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIMarketDefinition::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIMarketDefinition::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIMarketDefinition::getEventTypeId() const {
    return m_event_type_id;
}
void OAIMarketDefinition::setEventTypeId(const QString &event_type_id) {
    m_event_type_id = event_type_id;
    m_event_type_id_isSet = true;
}

bool OAIMarketDefinition::is_event_type_id_Set() const{
    return m_event_type_id_isSet;
}

bool OAIMarketDefinition::is_event_type_id_Valid() const{
    return m_event_type_id_isValid;
}

bool OAIMarketDefinition::isInPlay() const {
    return m_in_play;
}
void OAIMarketDefinition::setInPlay(const bool &in_play) {
    m_in_play = in_play;
    m_in_play_isSet = true;
}

bool OAIMarketDefinition::is_in_play_Set() const{
    return m_in_play_isSet;
}

bool OAIMarketDefinition::is_in_play_Valid() const{
    return m_in_play_isValid;
}

OAIKeyLineDefinition OAIMarketDefinition::getKeyLineDefinition() const {
    return m_key_line_definition;
}
void OAIMarketDefinition::setKeyLineDefinition(const OAIKeyLineDefinition &key_line_definition) {
    m_key_line_definition = key_line_definition;
    m_key_line_definition_isSet = true;
}

bool OAIMarketDefinition::is_key_line_definition_Set() const{
    return m_key_line_definition_isSet;
}

bool OAIMarketDefinition::is_key_line_definition_Valid() const{
    return m_key_line_definition_isValid;
}

double OAIMarketDefinition::getLineInterval() const {
    return m_line_interval;
}
void OAIMarketDefinition::setLineInterval(const double &line_interval) {
    m_line_interval = line_interval;
    m_line_interval_isSet = true;
}

bool OAIMarketDefinition::is_line_interval_Set() const{
    return m_line_interval_isSet;
}

bool OAIMarketDefinition::is_line_interval_Valid() const{
    return m_line_interval_isValid;
}

double OAIMarketDefinition::getLineMaxUnit() const {
    return m_line_max_unit;
}
void OAIMarketDefinition::setLineMaxUnit(const double &line_max_unit) {
    m_line_max_unit = line_max_unit;
    m_line_max_unit_isSet = true;
}

bool OAIMarketDefinition::is_line_max_unit_Set() const{
    return m_line_max_unit_isSet;
}

bool OAIMarketDefinition::is_line_max_unit_Valid() const{
    return m_line_max_unit_isValid;
}

double OAIMarketDefinition::getLineMinUnit() const {
    return m_line_min_unit;
}
void OAIMarketDefinition::setLineMinUnit(const double &line_min_unit) {
    m_line_min_unit = line_min_unit;
    m_line_min_unit_isSet = true;
}

bool OAIMarketDefinition::is_line_min_unit_Set() const{
    return m_line_min_unit_isSet;
}

bool OAIMarketDefinition::is_line_min_unit_Valid() const{
    return m_line_min_unit_isValid;
}

double OAIMarketDefinition::getMarketBaseRate() const {
    return m_market_base_rate;
}
void OAIMarketDefinition::setMarketBaseRate(const double &market_base_rate) {
    m_market_base_rate = market_base_rate;
    m_market_base_rate_isSet = true;
}

bool OAIMarketDefinition::is_market_base_rate_Set() const{
    return m_market_base_rate_isSet;
}

bool OAIMarketDefinition::is_market_base_rate_Valid() const{
    return m_market_base_rate_isValid;
}

QDateTime OAIMarketDefinition::getMarketTime() const {
    return m_market_time;
}
void OAIMarketDefinition::setMarketTime(const QDateTime &market_time) {
    m_market_time = market_time;
    m_market_time_isSet = true;
}

bool OAIMarketDefinition::is_market_time_Set() const{
    return m_market_time_isSet;
}

bool OAIMarketDefinition::is_market_time_Valid() const{
    return m_market_time_isValid;
}

QString OAIMarketDefinition::getMarketType() const {
    return m_market_type;
}
void OAIMarketDefinition::setMarketType(const QString &market_type) {
    m_market_type = market_type;
    m_market_type_isSet = true;
}

bool OAIMarketDefinition::is_market_type_Set() const{
    return m_market_type_isSet;
}

bool OAIMarketDefinition::is_market_type_Valid() const{
    return m_market_type_isValid;
}

qint32 OAIMarketDefinition::getNumberOfActiveRunners() const {
    return m_number_of_active_runners;
}
void OAIMarketDefinition::setNumberOfActiveRunners(const qint32 &number_of_active_runners) {
    m_number_of_active_runners = number_of_active_runners;
    m_number_of_active_runners_isSet = true;
}

bool OAIMarketDefinition::is_number_of_active_runners_Set() const{
    return m_number_of_active_runners_isSet;
}

bool OAIMarketDefinition::is_number_of_active_runners_Valid() const{
    return m_number_of_active_runners_isValid;
}

qint32 OAIMarketDefinition::getNumberOfWinners() const {
    return m_number_of_winners;
}
void OAIMarketDefinition::setNumberOfWinners(const qint32 &number_of_winners) {
    m_number_of_winners = number_of_winners;
    m_number_of_winners_isSet = true;
}

bool OAIMarketDefinition::is_number_of_winners_Set() const{
    return m_number_of_winners_isSet;
}

bool OAIMarketDefinition::is_number_of_winners_Valid() const{
    return m_number_of_winners_isValid;
}

QDateTime OAIMarketDefinition::getOpenDate() const {
    return m_open_date;
}
void OAIMarketDefinition::setOpenDate(const QDateTime &open_date) {
    m_open_date = open_date;
    m_open_date_isSet = true;
}

bool OAIMarketDefinition::is_open_date_Set() const{
    return m_open_date_isSet;
}

bool OAIMarketDefinition::is_open_date_Valid() const{
    return m_open_date_isValid;
}

bool OAIMarketDefinition::isPersistenceEnabled() const {
    return m_persistence_enabled;
}
void OAIMarketDefinition::setPersistenceEnabled(const bool &persistence_enabled) {
    m_persistence_enabled = persistence_enabled;
    m_persistence_enabled_isSet = true;
}

bool OAIMarketDefinition::is_persistence_enabled_Set() const{
    return m_persistence_enabled_isSet;
}

bool OAIMarketDefinition::is_persistence_enabled_Valid() const{
    return m_persistence_enabled_isValid;
}

OAIPriceLadderDefinition OAIMarketDefinition::getPriceLadderDefinition() const {
    return m_price_ladder_definition;
}
void OAIMarketDefinition::setPriceLadderDefinition(const OAIPriceLadderDefinition &price_ladder_definition) {
    m_price_ladder_definition = price_ladder_definition;
    m_price_ladder_definition_isSet = true;
}

bool OAIMarketDefinition::is_price_ladder_definition_Set() const{
    return m_price_ladder_definition_isSet;
}

bool OAIMarketDefinition::is_price_ladder_definition_Valid() const{
    return m_price_ladder_definition_isValid;
}

QString OAIMarketDefinition::getRaceType() const {
    return m_race_type;
}
void OAIMarketDefinition::setRaceType(const QString &race_type) {
    m_race_type = race_type;
    m_race_type_isSet = true;
}

bool OAIMarketDefinition::is_race_type_Set() const{
    return m_race_type_isSet;
}

bool OAIMarketDefinition::is_race_type_Valid() const{
    return m_race_type_isValid;
}

QList<QString> OAIMarketDefinition::getRegulators() const {
    return m_regulators;
}
void OAIMarketDefinition::setRegulators(const QList<QString> &regulators) {
    m_regulators = regulators;
    m_regulators_isSet = true;
}

bool OAIMarketDefinition::is_regulators_Set() const{
    return m_regulators_isSet;
}

bool OAIMarketDefinition::is_regulators_Valid() const{
    return m_regulators_isValid;
}

QList<OAIRunnerDefinition> OAIMarketDefinition::getRunners() const {
    return m_runners;
}
void OAIMarketDefinition::setRunners(const QList<OAIRunnerDefinition> &runners) {
    m_runners = runners;
    m_runners_isSet = true;
}

bool OAIMarketDefinition::is_runners_Set() const{
    return m_runners_isSet;
}

bool OAIMarketDefinition::is_runners_Valid() const{
    return m_runners_isValid;
}

bool OAIMarketDefinition::isRunnersVoidable() const {
    return m_runners_voidable;
}
void OAIMarketDefinition::setRunnersVoidable(const bool &runners_voidable) {
    m_runners_voidable = runners_voidable;
    m_runners_voidable_isSet = true;
}

bool OAIMarketDefinition::is_runners_voidable_Set() const{
    return m_runners_voidable_isSet;
}

bool OAIMarketDefinition::is_runners_voidable_Valid() const{
    return m_runners_voidable_isValid;
}

QDateTime OAIMarketDefinition::getSettledTime() const {
    return m_settled_time;
}
void OAIMarketDefinition::setSettledTime(const QDateTime &settled_time) {
    m_settled_time = settled_time;
    m_settled_time_isSet = true;
}

bool OAIMarketDefinition::is_settled_time_Set() const{
    return m_settled_time_isSet;
}

bool OAIMarketDefinition::is_settled_time_Valid() const{
    return m_settled_time_isValid;
}

QString OAIMarketDefinition::getStatus() const {
    return m_status;
}
void OAIMarketDefinition::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMarketDefinition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMarketDefinition::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIMarketDefinition::getSuspendTime() const {
    return m_suspend_time;
}
void OAIMarketDefinition::setSuspendTime(const QDateTime &suspend_time) {
    m_suspend_time = suspend_time;
    m_suspend_time_isSet = true;
}

bool OAIMarketDefinition::is_suspend_time_Set() const{
    return m_suspend_time_isSet;
}

bool OAIMarketDefinition::is_suspend_time_Valid() const{
    return m_suspend_time_isValid;
}

QString OAIMarketDefinition::getTimezone() const {
    return m_timezone;
}
void OAIMarketDefinition::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIMarketDefinition::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIMarketDefinition::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIMarketDefinition::isTurnInPlayEnabled() const {
    return m_turn_in_play_enabled;
}
void OAIMarketDefinition::setTurnInPlayEnabled(const bool &turn_in_play_enabled) {
    m_turn_in_play_enabled = turn_in_play_enabled;
    m_turn_in_play_enabled_isSet = true;
}

bool OAIMarketDefinition::is_turn_in_play_enabled_Set() const{
    return m_turn_in_play_enabled_isSet;
}

bool OAIMarketDefinition::is_turn_in_play_enabled_Valid() const{
    return m_turn_in_play_enabled_isValid;
}

QString OAIMarketDefinition::getVenue() const {
    return m_venue;
}
void OAIMarketDefinition::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIMarketDefinition::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIMarketDefinition::is_venue_Valid() const{
    return m_venue_isValid;
}

qint64 OAIMarketDefinition::getVersion() const {
    return m_version;
}
void OAIMarketDefinition::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMarketDefinition::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMarketDefinition::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMarketDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bet_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_betting_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsp_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bsp_reconciled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_matching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_divisor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_line_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_max_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_min_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_base_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_active_runners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_winners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistence_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_ladder_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regulators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runners_voidable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspend_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_in_play_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
