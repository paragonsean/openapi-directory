/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MarketFilter model module.
 * @module model/MarketFilter
 * @version 1.0.1423
 */
class MarketFilter {
    /**
     * Constructs a new <code>MarketFilter</code>.
     * @alias module:model/MarketFilter
     */
    constructor() { 
        
        MarketFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MarketFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MarketFilter} obj Optional instance to populate.
     * @return {module:model/MarketFilter} The populated <code>MarketFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MarketFilter();

            if (data.hasOwnProperty('bettingTypes')) {
                obj['bettingTypes'] = ApiClient.convertToType(data['bettingTypes'], ['String']);
            }
            if (data.hasOwnProperty('bspMarket')) {
                obj['bspMarket'] = ApiClient.convertToType(data['bspMarket'], 'Boolean');
            }
            if (data.hasOwnProperty('countryCodes')) {
                obj['countryCodes'] = ApiClient.convertToType(data['countryCodes'], ['String']);
            }
            if (data.hasOwnProperty('eventIds')) {
                obj['eventIds'] = ApiClient.convertToType(data['eventIds'], ['String']);
            }
            if (data.hasOwnProperty('eventTypeIds')) {
                obj['eventTypeIds'] = ApiClient.convertToType(data['eventTypeIds'], ['String']);
            }
            if (data.hasOwnProperty('marketIds')) {
                obj['marketIds'] = ApiClient.convertToType(data['marketIds'], ['String']);
            }
            if (data.hasOwnProperty('marketTypes')) {
                obj['marketTypes'] = ApiClient.convertToType(data['marketTypes'], ['String']);
            }
            if (data.hasOwnProperty('raceTypes')) {
                obj['raceTypes'] = ApiClient.convertToType(data['raceTypes'], ['String']);
            }
            if (data.hasOwnProperty('turnInPlayEnabled')) {
                obj['turnInPlayEnabled'] = ApiClient.convertToType(data['turnInPlayEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('venues')) {
                obj['venues'] = ApiClient.convertToType(data['venues'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MarketFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MarketFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bettingTypes'])) {
            throw new Error("Expected the field `bettingTypes` to be an array in the JSON data but got " + data['bettingTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countryCodes'])) {
            throw new Error("Expected the field `countryCodes` to be an array in the JSON data but got " + data['countryCodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventIds'])) {
            throw new Error("Expected the field `eventIds` to be an array in the JSON data but got " + data['eventIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventTypeIds'])) {
            throw new Error("Expected the field `eventTypeIds` to be an array in the JSON data but got " + data['eventTypeIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketIds'])) {
            throw new Error("Expected the field `marketIds` to be an array in the JSON data but got " + data['marketIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketTypes'])) {
            throw new Error("Expected the field `marketTypes` to be an array in the JSON data but got " + data['marketTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['raceTypes'])) {
            throw new Error("Expected the field `raceTypes` to be an array in the JSON data but got " + data['raceTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['venues'])) {
            throw new Error("Expected the field `venues` to be an array in the JSON data but got " + data['venues']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/MarketFilter.BettingTypesEnum>} bettingTypes
 */
MarketFilter.prototype['bettingTypes'] = undefined;

/**
 * @member {Boolean} bspMarket
 */
MarketFilter.prototype['bspMarket'] = undefined;

/**
 * @member {Array.<String>} countryCodes
 */
MarketFilter.prototype['countryCodes'] = undefined;

/**
 * @member {Array.<String>} eventIds
 */
MarketFilter.prototype['eventIds'] = undefined;

/**
 * @member {Array.<String>} eventTypeIds
 */
MarketFilter.prototype['eventTypeIds'] = undefined;

/**
 * @member {Array.<String>} marketIds
 */
MarketFilter.prototype['marketIds'] = undefined;

/**
 * @member {Array.<String>} marketTypes
 */
MarketFilter.prototype['marketTypes'] = undefined;

/**
 * @member {Array.<String>} raceTypes
 */
MarketFilter.prototype['raceTypes'] = undefined;

/**
 * @member {Boolean} turnInPlayEnabled
 */
MarketFilter.prototype['turnInPlayEnabled'] = undefined;

/**
 * @member {Array.<String>} venues
 */
MarketFilter.prototype['venues'] = undefined;





/**
 * Allowed values for the <code>bettingTypes</code> property.
 * @enum {String}
 * @readonly
 */
MarketFilter['BettingTypesEnum'] = {

    /**
     * value: "ODDS"
     * @const
     */
    "ODDS": "ODDS",

    /**
     * value: "LINE"
     * @const
     */
    "LINE": "LINE",

    /**
     * value: "RANGE"
     * @const
     */
    "RANGE": "RANGE",

    /**
     * value: "ASIAN_HANDICAP_DOUBLE_LINE"
     * @const
     */
    "ASIAN_HANDICAP_DOUBLE_LINE": "ASIAN_HANDICAP_DOUBLE_LINE",

    /**
     * value: "ASIAN_HANDICAP_SINGLE_LINE"
     * @const
     */
    "ASIAN_HANDICAP_SINGLE_LINE": "ASIAN_HANDICAP_SINGLE_LINE"
};



export default MarketFilter;

