/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Order from './Order';
import StrategyMatchChange from './StrategyMatchChange';

/**
 * The OrderRunnerChange model module.
 * @module model/OrderRunnerChange
 * @version 1.0.1423
 */
class OrderRunnerChange {
    /**
     * Constructs a new <code>OrderRunnerChange</code>.
     * @alias module:model/OrderRunnerChange
     */
    constructor() { 
        
        OrderRunnerChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderRunnerChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderRunnerChange} obj Optional instance to populate.
     * @return {module:model/OrderRunnerChange} The populated <code>OrderRunnerChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderRunnerChange();

            if (data.hasOwnProperty('fullImage')) {
                obj['fullImage'] = ApiClient.convertToType(data['fullImage'], 'Boolean');
            }
            if (data.hasOwnProperty('hc')) {
                obj['hc'] = ApiClient.convertToType(data['hc'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mb')) {
                obj['mb'] = ApiClient.convertToType(data['mb'], [['Number']]);
            }
            if (data.hasOwnProperty('ml')) {
                obj['ml'] = ApiClient.convertToType(data['ml'], [['Number']]);
            }
            if (data.hasOwnProperty('smc')) {
                obj['smc'] = ApiClient.convertToType(data['smc'], {'String': StrategyMatchChange});
            }
            if (data.hasOwnProperty('uo')) {
                obj['uo'] = ApiClient.convertToType(data['uo'], [Order]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderRunnerChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderRunnerChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['mb'])) {
            throw new Error("Expected the field `mb` to be an array in the JSON data but got " + data['mb']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ml'])) {
            throw new Error("Expected the field `ml` to be an array in the JSON data but got " + data['ml']);
        }
        if (data['uo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['uo'])) {
                throw new Error("Expected the field `uo` to be an array in the JSON data but got " + data['uo']);
            }
            // validate the optional field `uo` (array)
            for (const item of data['uo']) {
                Order.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Boolean} fullImage
 */
OrderRunnerChange.prototype['fullImage'] = undefined;

/**
 * Handicap - the handicap of the runner (selection) (null if not applicable)
 * @member {Number} hc
 */
OrderRunnerChange.prototype['hc'] = undefined;

/**
 * Selection Id - the id of the runner (selection)
 * @member {Number} id
 */
OrderRunnerChange.prototype['id'] = undefined;

/**
 * Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)
 * @member {Array.<Array.<Number>>} mb
 */
OrderRunnerChange.prototype['mb'] = undefined;

/**
 * Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)
 * @member {Array.<Array.<Number>>} ml
 */
OrderRunnerChange.prototype['ml'] = undefined;

/**
 * Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference
 * @member {Object.<String, module:model/StrategyMatchChange>} smc
 */
OrderRunnerChange.prototype['smc'] = undefined;

/**
 * Unmatched Orders - orders on this runner (selection) that are not fully matched
 * @member {Array.<module:model/Order>} uo
 */
OrderRunnerChange.prototype['uo'] = undefined;






export default OrderRunnerChange;

