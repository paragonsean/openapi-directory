/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyLineDefinition from './KeyLineDefinition';
import PriceLadderDefinition from './PriceLadderDefinition';
import RunnerDefinition from './RunnerDefinition';

/**
 * The MarketDefinition model module.
 * @module model/MarketDefinition
 * @version 1.0.1423
 */
class MarketDefinition {
    /**
     * Constructs a new <code>MarketDefinition</code>.
     * @alias module:model/MarketDefinition
     */
    constructor() { 
        
        MarketDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MarketDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MarketDefinition} obj Optional instance to populate.
     * @return {module:model/MarketDefinition} The populated <code>MarketDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MarketDefinition();

            if (data.hasOwnProperty('betDelay')) {
                obj['betDelay'] = ApiClient.convertToType(data['betDelay'], 'Number');
            }
            if (data.hasOwnProperty('bettingType')) {
                obj['bettingType'] = ApiClient.convertToType(data['bettingType'], 'String');
            }
            if (data.hasOwnProperty('bspMarket')) {
                obj['bspMarket'] = ApiClient.convertToType(data['bspMarket'], 'Boolean');
            }
            if (data.hasOwnProperty('bspReconciled')) {
                obj['bspReconciled'] = ApiClient.convertToType(data['bspReconciled'], 'Boolean');
            }
            if (data.hasOwnProperty('complete')) {
                obj['complete'] = ApiClient.convertToType(data['complete'], 'Boolean');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('crossMatching')) {
                obj['crossMatching'] = ApiClient.convertToType(data['crossMatching'], 'Boolean');
            }
            if (data.hasOwnProperty('discountAllowed')) {
                obj['discountAllowed'] = ApiClient.convertToType(data['discountAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('eachWayDivisor')) {
                obj['eachWayDivisor'] = ApiClient.convertToType(data['eachWayDivisor'], 'Number');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('eventTypeId')) {
                obj['eventTypeId'] = ApiClient.convertToType(data['eventTypeId'], 'String');
            }
            if (data.hasOwnProperty('inPlay')) {
                obj['inPlay'] = ApiClient.convertToType(data['inPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('keyLineDefinition')) {
                obj['keyLineDefinition'] = KeyLineDefinition.constructFromObject(data['keyLineDefinition']);
            }
            if (data.hasOwnProperty('lineInterval')) {
                obj['lineInterval'] = ApiClient.convertToType(data['lineInterval'], 'Number');
            }
            if (data.hasOwnProperty('lineMaxUnit')) {
                obj['lineMaxUnit'] = ApiClient.convertToType(data['lineMaxUnit'], 'Number');
            }
            if (data.hasOwnProperty('lineMinUnit')) {
                obj['lineMinUnit'] = ApiClient.convertToType(data['lineMinUnit'], 'Number');
            }
            if (data.hasOwnProperty('marketBaseRate')) {
                obj['marketBaseRate'] = ApiClient.convertToType(data['marketBaseRate'], 'Number');
            }
            if (data.hasOwnProperty('marketTime')) {
                obj['marketTime'] = ApiClient.convertToType(data['marketTime'], 'Date');
            }
            if (data.hasOwnProperty('marketType')) {
                obj['marketType'] = ApiClient.convertToType(data['marketType'], 'String');
            }
            if (data.hasOwnProperty('numberOfActiveRunners')) {
                obj['numberOfActiveRunners'] = ApiClient.convertToType(data['numberOfActiveRunners'], 'Number');
            }
            if (data.hasOwnProperty('numberOfWinners')) {
                obj['numberOfWinners'] = ApiClient.convertToType(data['numberOfWinners'], 'Number');
            }
            if (data.hasOwnProperty('openDate')) {
                obj['openDate'] = ApiClient.convertToType(data['openDate'], 'Date');
            }
            if (data.hasOwnProperty('persistenceEnabled')) {
                obj['persistenceEnabled'] = ApiClient.convertToType(data['persistenceEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('priceLadderDefinition')) {
                obj['priceLadderDefinition'] = PriceLadderDefinition.constructFromObject(data['priceLadderDefinition']);
            }
            if (data.hasOwnProperty('raceType')) {
                obj['raceType'] = ApiClient.convertToType(data['raceType'], 'String');
            }
            if (data.hasOwnProperty('regulators')) {
                obj['regulators'] = ApiClient.convertToType(data['regulators'], ['String']);
            }
            if (data.hasOwnProperty('runners')) {
                obj['runners'] = ApiClient.convertToType(data['runners'], [RunnerDefinition]);
            }
            if (data.hasOwnProperty('runnersVoidable')) {
                obj['runnersVoidable'] = ApiClient.convertToType(data['runnersVoidable'], 'Boolean');
            }
            if (data.hasOwnProperty('settledTime')) {
                obj['settledTime'] = ApiClient.convertToType(data['settledTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('suspendTime')) {
                obj['suspendTime'] = ApiClient.convertToType(data['suspendTime'], 'Date');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('turnInPlayEnabled')) {
                obj['turnInPlayEnabled'] = ApiClient.convertToType(data['turnInPlayEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MarketDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MarketDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bettingType'] && !(typeof data['bettingType'] === 'string' || data['bettingType'] instanceof String)) {
            throw new Error("Expected the field `bettingType` to be a primitive type in the JSON string but got " + data['bettingType']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['eventTypeId'] && !(typeof data['eventTypeId'] === 'string' || data['eventTypeId'] instanceof String)) {
            throw new Error("Expected the field `eventTypeId` to be a primitive type in the JSON string but got " + data['eventTypeId']);
        }
        // validate the optional field `keyLineDefinition`
        if (data['keyLineDefinition']) { // data not null
          KeyLineDefinition.validateJSON(data['keyLineDefinition']);
        }
        // ensure the json data is a string
        if (data['marketType'] && !(typeof data['marketType'] === 'string' || data['marketType'] instanceof String)) {
            throw new Error("Expected the field `marketType` to be a primitive type in the JSON string but got " + data['marketType']);
        }
        // validate the optional field `priceLadderDefinition`
        if (data['priceLadderDefinition']) { // data not null
          PriceLadderDefinition.validateJSON(data['priceLadderDefinition']);
        }
        // ensure the json data is a string
        if (data['raceType'] && !(typeof data['raceType'] === 'string' || data['raceType'] instanceof String)) {
            throw new Error("Expected the field `raceType` to be a primitive type in the JSON string but got " + data['raceType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regulators'])) {
            throw new Error("Expected the field `regulators` to be an array in the JSON data but got " + data['regulators']);
        }
        if (data['runners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runners'])) {
                throw new Error("Expected the field `runners` to be an array in the JSON data but got " + data['runners']);
            }
            // validate the optional field `runners` (array)
            for (const item of data['runners']) {
                RunnerDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['venue'] && !(typeof data['venue'] === 'string' || data['venue'] instanceof String)) {
            throw new Error("Expected the field `venue` to be a primitive type in the JSON string but got " + data['venue']);
        }

        return true;
    }


}



/**
 * @member {Number} betDelay
 */
MarketDefinition.prototype['betDelay'] = undefined;

/**
 * @member {module:model/MarketDefinition.BettingTypeEnum} bettingType
 */
MarketDefinition.prototype['bettingType'] = undefined;

/**
 * @member {Boolean} bspMarket
 */
MarketDefinition.prototype['bspMarket'] = undefined;

/**
 * @member {Boolean} bspReconciled
 */
MarketDefinition.prototype['bspReconciled'] = undefined;

/**
 * @member {Boolean} complete
 */
MarketDefinition.prototype['complete'] = undefined;

/**
 * @member {String} countryCode
 */
MarketDefinition.prototype['countryCode'] = undefined;

/**
 * @member {Boolean} crossMatching
 */
MarketDefinition.prototype['crossMatching'] = undefined;

/**
 * @member {Boolean} discountAllowed
 */
MarketDefinition.prototype['discountAllowed'] = undefined;

/**
 * @member {Number} eachWayDivisor
 */
MarketDefinition.prototype['eachWayDivisor'] = undefined;

/**
 * @member {String} eventId
 */
MarketDefinition.prototype['eventId'] = undefined;

/**
 * The Event Type the market is contained within.
 * @member {String} eventTypeId
 */
MarketDefinition.prototype['eventTypeId'] = undefined;

/**
 * @member {Boolean} inPlay
 */
MarketDefinition.prototype['inPlay'] = undefined;

/**
 * @member {module:model/KeyLineDefinition} keyLineDefinition
 */
MarketDefinition.prototype['keyLineDefinition'] = undefined;

/**
 * For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.
 * @member {Number} lineInterval
 */
MarketDefinition.prototype['lineInterval'] = undefined;

/**
 * For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).
 * @member {Number} lineMaxUnit
 */
MarketDefinition.prototype['lineMaxUnit'] = undefined;

/**
 * For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).
 * @member {Number} lineMinUnit
 */
MarketDefinition.prototype['lineMinUnit'] = undefined;

/**
 * @member {Number} marketBaseRate
 */
MarketDefinition.prototype['marketBaseRate'] = undefined;

/**
 * @member {Date} marketTime
 */
MarketDefinition.prototype['marketTime'] = undefined;

/**
 * @member {String} marketType
 */
MarketDefinition.prototype['marketType'] = undefined;

/**
 * @member {Number} numberOfActiveRunners
 */
MarketDefinition.prototype['numberOfActiveRunners'] = undefined;

/**
 * @member {Number} numberOfWinners
 */
MarketDefinition.prototype['numberOfWinners'] = undefined;

/**
 * @member {Date} openDate
 */
MarketDefinition.prototype['openDate'] = undefined;

/**
 * @member {Boolean} persistenceEnabled
 */
MarketDefinition.prototype['persistenceEnabled'] = undefined;

/**
 * @member {module:model/PriceLadderDefinition} priceLadderDefinition
 */
MarketDefinition.prototype['priceLadderDefinition'] = undefined;

/**
 * @member {String} raceType
 */
MarketDefinition.prototype['raceType'] = undefined;

/**
 * The market regulators.
 * @member {Array.<String>} regulators
 */
MarketDefinition.prototype['regulators'] = undefined;

/**
 * @member {Array.<module:model/RunnerDefinition>} runners
 */
MarketDefinition.prototype['runners'] = undefined;

/**
 * @member {Boolean} runnersVoidable
 */
MarketDefinition.prototype['runnersVoidable'] = undefined;

/**
 * @member {Date} settledTime
 */
MarketDefinition.prototype['settledTime'] = undefined;

/**
 * @member {module:model/MarketDefinition.StatusEnum} status
 */
MarketDefinition.prototype['status'] = undefined;

/**
 * @member {Date} suspendTime
 */
MarketDefinition.prototype['suspendTime'] = undefined;

/**
 * @member {String} timezone
 */
MarketDefinition.prototype['timezone'] = undefined;

/**
 * @member {Boolean} turnInPlayEnabled
 */
MarketDefinition.prototype['turnInPlayEnabled'] = undefined;

/**
 * @member {String} venue
 */
MarketDefinition.prototype['venue'] = undefined;

/**
 * @member {Number} version
 */
MarketDefinition.prototype['version'] = undefined;





/**
 * Allowed values for the <code>bettingType</code> property.
 * @enum {String}
 * @readonly
 */
MarketDefinition['BettingTypeEnum'] = {

    /**
     * value: "ODDS"
     * @const
     */
    "ODDS": "ODDS",

    /**
     * value: "LINE"
     * @const
     */
    "LINE": "LINE",

    /**
     * value: "RANGE"
     * @const
     */
    "RANGE": "RANGE",

    /**
     * value: "ASIAN_HANDICAP_DOUBLE_LINE"
     * @const
     */
    "ASIAN_HANDICAP_DOUBLE_LINE": "ASIAN_HANDICAP_DOUBLE_LINE",

    /**
     * value: "ASIAN_HANDICAP_SINGLE_LINE"
     * @const
     */
    "ASIAN_HANDICAP_SINGLE_LINE": "ASIAN_HANDICAP_SINGLE_LINE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MarketDefinition['StatusEnum'] = {

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED"
};



export default MarketDefinition;

