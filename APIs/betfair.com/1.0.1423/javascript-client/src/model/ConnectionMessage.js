/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseMessage from './ResponseMessage';

/**
 * The ConnectionMessage model module.
 * @module model/ConnectionMessage
 * @version 1.0.1423
 */
class ConnectionMessage {
    /**
     * Constructs a new <code>ConnectionMessage</code>.
     * @alias module:model/ConnectionMessage
     * @extends module:model/ResponseMessage
     * @implements module:model/ResponseMessage
     */
    constructor() { 
        ResponseMessage.initialize(this);
        ConnectionMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionMessage} obj Optional instance to populate.
     * @return {module:model/ConnectionMessage} The populated <code>ConnectionMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionMessage();
            ResponseMessage.constructFromObject(data, obj);
            ResponseMessage.constructFromObject(data, obj);

            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }

        return true;
    }


}



/**
 * The connection id
 * @member {String} connectionId
 */
ConnectionMessage.prototype['connectionId'] = undefined;


// Implement ResponseMessage interface:
/**
 * Client generated unique id to link request with response (like json rpc)
 * @member {Number} id
 */
ResponseMessage.prototype['id'] = undefined;
/**
 * The operation type
 * @member {String} op
 */
ResponseMessage.prototype['op'] = undefined;




export default ConnectionMessage;

