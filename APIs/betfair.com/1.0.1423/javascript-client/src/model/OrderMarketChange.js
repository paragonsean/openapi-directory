/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderRunnerChange from './OrderRunnerChange';

/**
 * The OrderMarketChange model module.
 * @module model/OrderMarketChange
 * @version 1.0.1423
 */
class OrderMarketChange {
    /**
     * Constructs a new <code>OrderMarketChange</code>.
     * @alias module:model/OrderMarketChange
     */
    constructor() { 
        
        OrderMarketChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderMarketChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderMarketChange} obj Optional instance to populate.
     * @return {module:model/OrderMarketChange} The populated <code>OrderMarketChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderMarketChange();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'Boolean');
            }
            if (data.hasOwnProperty('fullImage')) {
                obj['fullImage'] = ApiClient.convertToType(data['fullImage'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('orc')) {
                obj['orc'] = ApiClient.convertToType(data['orc'], [OrderRunnerChange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderMarketChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderMarketChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['orc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orc'])) {
                throw new Error("Expected the field `orc` to be an array in the JSON data but got " + data['orc']);
            }
            // validate the optional field `orc` (array)
            for (const item of data['orc']) {
                OrderRunnerChange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} accountId
 */
OrderMarketChange.prototype['accountId'] = undefined;

/**
 * @member {Boolean} closed
 */
OrderMarketChange.prototype['closed'] = undefined;

/**
 * @member {Boolean} fullImage
 */
OrderMarketChange.prototype['fullImage'] = undefined;

/**
 * Market Id - the id of the market the order is on
 * @member {String} id
 */
OrderMarketChange.prototype['id'] = undefined;

/**
 * Order Changes - a list of changes to orders on a selection
 * @member {Array.<module:model/OrderRunnerChange>} orc
 */
OrderMarketChange.prototype['orc'] = undefined;






export default OrderMarketChange;

