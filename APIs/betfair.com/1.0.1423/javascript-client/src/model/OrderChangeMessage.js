/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderMarketChange from './OrderMarketChange';
import ResponseMessage from './ResponseMessage';

/**
 * The OrderChangeMessage model module.
 * @module model/OrderChangeMessage
 * @version 1.0.1423
 */
class OrderChangeMessage {
    /**
     * Constructs a new <code>OrderChangeMessage</code>.
     * @alias module:model/OrderChangeMessage
     * @extends module:model/ResponseMessage
     * @implements module:model/ResponseMessage
     */
    constructor() { 
        ResponseMessage.initialize(this);
        OrderChangeMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderChangeMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderChangeMessage} obj Optional instance to populate.
     * @return {module:model/OrderChangeMessage} The populated <code>OrderChangeMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderChangeMessage();
            ResponseMessage.constructFromObject(data, obj);
            ResponseMessage.constructFromObject(data, obj);

            if (data.hasOwnProperty('clk')) {
                obj['clk'] = ApiClient.convertToType(data['clk'], 'String');
            }
            if (data.hasOwnProperty('conflateMs')) {
                obj['conflateMs'] = ApiClient.convertToType(data['conflateMs'], 'Number');
            }
            if (data.hasOwnProperty('ct')) {
                obj['ct'] = ApiClient.convertToType(data['ct'], 'String');
            }
            if (data.hasOwnProperty('heartbeatMs')) {
                obj['heartbeatMs'] = ApiClient.convertToType(data['heartbeatMs'], 'Number');
            }
            if (data.hasOwnProperty('initialClk')) {
                obj['initialClk'] = ApiClient.convertToType(data['initialClk'], 'String');
            }
            if (data.hasOwnProperty('oc')) {
                obj['oc'] = ApiClient.convertToType(data['oc'], [OrderMarketChange]);
            }
            if (data.hasOwnProperty('pt')) {
                obj['pt'] = ApiClient.convertToType(data['pt'], 'Number');
            }
            if (data.hasOwnProperty('segmentType')) {
                obj['segmentType'] = ApiClient.convertToType(data['segmentType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderChangeMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderChangeMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clk'] && !(typeof data['clk'] === 'string' || data['clk'] instanceof String)) {
            throw new Error("Expected the field `clk` to be a primitive type in the JSON string but got " + data['clk']);
        }
        // ensure the json data is a string
        if (data['ct'] && !(typeof data['ct'] === 'string' || data['ct'] instanceof String)) {
            throw new Error("Expected the field `ct` to be a primitive type in the JSON string but got " + data['ct']);
        }
        // ensure the json data is a string
        if (data['initialClk'] && !(typeof data['initialClk'] === 'string' || data['initialClk'] instanceof String)) {
            throw new Error("Expected the field `initialClk` to be a primitive type in the JSON string but got " + data['initialClk']);
        }
        if (data['oc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['oc'])) {
                throw new Error("Expected the field `oc` to be an array in the JSON data but got " + data['oc']);
            }
            // validate the optional field `oc` (array)
            for (const item of data['oc']) {
                OrderMarketChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['segmentType'] && !(typeof data['segmentType'] === 'string' || data['segmentType'] instanceof String)) {
            throw new Error("Expected the field `segmentType` to be a primitive type in the JSON string but got " + data['segmentType']);
        }

        return true;
    }


}



/**
 * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
 * @member {String} clk
 */
OrderChangeMessage.prototype['clk'] = undefined;

/**
 * Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
 * @member {Number} conflateMs
 */
OrderChangeMessage.prototype['conflateMs'] = undefined;

/**
 * Change Type - set to indicate the type of change - if null this is a delta)
 * @member {module:model/OrderChangeMessage.CtEnum} ct
 */
OrderChangeMessage.prototype['ct'] = undefined;

/**
 * Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
 * @member {Number} heartbeatMs
 */
OrderChangeMessage.prototype['heartbeatMs'] = undefined;

/**
 * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
 * @member {String} initialClk
 */
OrderChangeMessage.prototype['initialClk'] = undefined;

/**
 * OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat
 * @member {Array.<module:model/OrderMarketChange>} oc
 */
OrderChangeMessage.prototype['oc'] = undefined;

/**
 * Publish Time (in millis since epoch) that the changes were generated
 * @member {Number} pt
 */
OrderChangeMessage.prototype['pt'] = undefined;

/**
 * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
 * @member {module:model/OrderChangeMessage.SegmentTypeEnum} segmentType
 */
OrderChangeMessage.prototype['segmentType'] = undefined;

/**
 * Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
 * @member {Number} status
 */
OrderChangeMessage.prototype['status'] = undefined;


// Implement ResponseMessage interface:
/**
 * Client generated unique id to link request with response (like json rpc)
 * @member {Number} id
 */
ResponseMessage.prototype['id'] = undefined;
/**
 * The operation type
 * @member {String} op
 */
ResponseMessage.prototype['op'] = undefined;



/**
 * Allowed values for the <code>ct</code> property.
 * @enum {String}
 * @readonly
 */
OrderChangeMessage['CtEnum'] = {

    /**
     * value: "SUB_IMAGE"
     * @const
     */
    "SUB_IMAGE": "SUB_IMAGE",

    /**
     * value: "RESUB_DELTA"
     * @const
     */
    "RESUB_DELTA": "RESUB_DELTA",

    /**
     * value: "HEARTBEAT"
     * @const
     */
    "HEARTBEAT": "HEARTBEAT"
};


/**
 * Allowed values for the <code>segmentType</code> property.
 * @enum {String}
 * @readonly
 */
OrderChangeMessage['SegmentTypeEnum'] = {

    /**
     * value: "SEG_START"
     * @const
     */
    "SEG_START": "SEG_START",

    /**
     * value: "SEG"
     * @const
     */
    "SEG": "SEG",

    /**
     * value: "SEG_END"
     * @const
     */
    "SEG_END": "SEG_END"
};



export default OrderChangeMessage;

