/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunnerChange model module.
 * @module model/RunnerChange
 * @version 1.0.1423
 */
class RunnerChange {
    /**
     * Constructs a new <code>RunnerChange</code>.
     * @alias module:model/RunnerChange
     */
    constructor() { 
        
        RunnerChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunnerChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunnerChange} obj Optional instance to populate.
     * @return {module:model/RunnerChange} The populated <code>RunnerChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunnerChange();

            if (data.hasOwnProperty('atb')) {
                obj['atb'] = ApiClient.convertToType(data['atb'], [['Number']]);
            }
            if (data.hasOwnProperty('atl')) {
                obj['atl'] = ApiClient.convertToType(data['atl'], [['Number']]);
            }
            if (data.hasOwnProperty('batb')) {
                obj['batb'] = ApiClient.convertToType(data['batb'], [['Number']]);
            }
            if (data.hasOwnProperty('batl')) {
                obj['batl'] = ApiClient.convertToType(data['batl'], [['Number']]);
            }
            if (data.hasOwnProperty('bdatb')) {
                obj['bdatb'] = ApiClient.convertToType(data['bdatb'], [['Number']]);
            }
            if (data.hasOwnProperty('bdatl')) {
                obj['bdatl'] = ApiClient.convertToType(data['bdatl'], [['Number']]);
            }
            if (data.hasOwnProperty('hc')) {
                obj['hc'] = ApiClient.convertToType(data['hc'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ltp')) {
                obj['ltp'] = ApiClient.convertToType(data['ltp'], 'Number');
            }
            if (data.hasOwnProperty('spb')) {
                obj['spb'] = ApiClient.convertToType(data['spb'], [['Number']]);
            }
            if (data.hasOwnProperty('spf')) {
                obj['spf'] = ApiClient.convertToType(data['spf'], 'Number');
            }
            if (data.hasOwnProperty('spl')) {
                obj['spl'] = ApiClient.convertToType(data['spl'], [['Number']]);
            }
            if (data.hasOwnProperty('spn')) {
                obj['spn'] = ApiClient.convertToType(data['spn'], 'Number');
            }
            if (data.hasOwnProperty('trd')) {
                obj['trd'] = ApiClient.convertToType(data['trd'], [['Number']]);
            }
            if (data.hasOwnProperty('tv')) {
                obj['tv'] = ApiClient.convertToType(data['tv'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunnerChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunnerChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['atb'])) {
            throw new Error("Expected the field `atb` to be an array in the JSON data but got " + data['atb']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['atl'])) {
            throw new Error("Expected the field `atl` to be an array in the JSON data but got " + data['atl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['batb'])) {
            throw new Error("Expected the field `batb` to be an array in the JSON data but got " + data['batb']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['batl'])) {
            throw new Error("Expected the field `batl` to be an array in the JSON data but got " + data['batl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bdatb'])) {
            throw new Error("Expected the field `bdatb` to be an array in the JSON data but got " + data['bdatb']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bdatl'])) {
            throw new Error("Expected the field `bdatl` to be an array in the JSON data but got " + data['bdatl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['spb'])) {
            throw new Error("Expected the field `spb` to be an array in the JSON data but got " + data['spb']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['spl'])) {
            throw new Error("Expected the field `spl` to be an array in the JSON data but got " + data['spl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['trd'])) {
            throw new Error("Expected the field `trd` to be an array in the JSON data but got " + data['trd']);
        }

        return true;
    }


}



/**
 * Available To Back - PriceVol tuple delta of price changes (0 vol is remove)
 * @member {Array.<Array.<Number>>} atb
 */
RunnerChange.prototype['atb'] = undefined;

/**
 * Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)
 * @member {Array.<Array.<Number>>} atl
 */
RunnerChange.prototype['atl'] = undefined;

/**
 * Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
 * @member {Array.<Array.<Number>>} batb
 */
RunnerChange.prototype['batb'] = undefined;

/**
 * Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
 * @member {Array.<Array.<Number>>} batl
 */
RunnerChange.prototype['batl'] = undefined;

/**
 * Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
 * @member {Array.<Array.<Number>>} bdatb
 */
RunnerChange.prototype['bdatb'] = undefined;

/**
 * Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
 * @member {Array.<Array.<Number>>} bdatl
 */
RunnerChange.prototype['bdatl'] = undefined;

/**
 * Handicap - the handicap of the runner (selection) (null if not applicable)
 * @member {Number} hc
 */
RunnerChange.prototype['hc'] = undefined;

/**
 * Selection Id - the id of the runner (selection)
 * @member {Number} id
 */
RunnerChange.prototype['id'] = undefined;

/**
 * Last Traded Price - The last traded price (or null if un-changed)
 * @member {Number} ltp
 */
RunnerChange.prototype['ltp'] = undefined;

/**
 * Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)
 * @member {Array.<Array.<Number>>} spb
 */
RunnerChange.prototype['spb'] = undefined;

/**
 * Starting Price Far - The far starting price (or null if un-changed)
 * @member {Number} spf
 */
RunnerChange.prototype['spf'] = undefined;

/**
 * Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)
 * @member {Array.<Array.<Number>>} spl
 */
RunnerChange.prototype['spl'] = undefined;

/**
 * Starting Price Near - The far starting price (or null if un-changed)
 * @member {Number} spn
 */
RunnerChange.prototype['spn'] = undefined;

/**
 * Traded - PriceVol tuple delta of price changes (0 vol is remove)
 * @member {Array.<Array.<Number>>} trd
 */
RunnerChange.prototype['trd'] = undefined;

/**
 * The total amount matched. This value is truncated at 2dp.
 * @member {Number} tv
 */
RunnerChange.prototype['tv'] = undefined;






export default RunnerChange;

