/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseMessage from './ResponseMessage';

/**
 * The StatusMessage model module.
 * @module model/StatusMessage
 * @version 1.0.1423
 */
class StatusMessage {
    /**
     * Constructs a new <code>StatusMessage</code>.
     * @alias module:model/StatusMessage
     * @extends module:model/ResponseMessage
     * @implements module:model/ResponseMessage
     */
    constructor() { 
        ResponseMessage.initialize(this);
        StatusMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatusMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatusMessage} obj Optional instance to populate.
     * @return {module:model/StatusMessage} The populated <code>StatusMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatusMessage();
            ResponseMessage.constructFromObject(data, obj);
            ResponseMessage.constructFromObject(data, obj);

            if (data.hasOwnProperty('connectionClosed')) {
                obj['connectionClosed'] = ApiClient.convertToType(data['connectionClosed'], 'Boolean');
            }
            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
            if (data.hasOwnProperty('connectionsAvailable')) {
                obj['connectionsAvailable'] = ApiClient.convertToType(data['connectionsAvailable'], 'Number');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatusMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatusMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['statusCode'] && !(typeof data['statusCode'] === 'string' || data['statusCode'] instanceof String)) {
            throw new Error("Expected the field `statusCode` to be a primitive type in the JSON string but got " + data['statusCode']);
        }

        return true;
    }


}



/**
 * Is the connection now closed
 * @member {Boolean} connectionClosed
 */
StatusMessage.prototype['connectionClosed'] = undefined;

/**
 * The connection id
 * @member {String} connectionId
 */
StatusMessage.prototype['connectionId'] = undefined;

/**
 * The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.
 * @member {Number} connectionsAvailable
 */
StatusMessage.prototype['connectionsAvailable'] = undefined;

/**
 * The type of error in case of a failure
 * @member {module:model/StatusMessage.ErrorCodeEnum} errorCode
 */
StatusMessage.prototype['errorCode'] = undefined;

/**
 * Additional message in case of a failure
 * @member {String} errorMessage
 */
StatusMessage.prototype['errorMessage'] = undefined;

/**
 * The status of the last request
 * @member {module:model/StatusMessage.StatusCodeEnum} statusCode
 */
StatusMessage.prototype['statusCode'] = undefined;


// Implement ResponseMessage interface:
/**
 * Client generated unique id to link request with response (like json rpc)
 * @member {Number} id
 */
ResponseMessage.prototype['id'] = undefined;
/**
 * The operation type
 * @member {String} op
 */
ResponseMessage.prototype['op'] = undefined;



/**
 * Allowed values for the <code>errorCode</code> property.
 * @enum {String}
 * @readonly
 */
StatusMessage['ErrorCodeEnum'] = {

    /**
     * value: "NO_APP_KEY"
     * @const
     */
    "NO_APP_KEY": "NO_APP_KEY",

    /**
     * value: "INVALID_APP_KEY"
     * @const
     */
    "INVALID_APP_KEY": "INVALID_APP_KEY",

    /**
     * value: "NO_SESSION"
     * @const
     */
    "NO_SESSION": "NO_SESSION",

    /**
     * value: "INVALID_SESSION_INFORMATION"
     * @const
     */
    "INVALID_SESSION_INFORMATION": "INVALID_SESSION_INFORMATION",

    /**
     * value: "NOT_AUTHORIZED"
     * @const
     */
    "NOT_AUTHORIZED": "NOT_AUTHORIZED",

    /**
     * value: "INVALID_INPUT"
     * @const
     */
    "INVALID_INPUT": "INVALID_INPUT",

    /**
     * value: "INVALID_CLOCK"
     * @const
     */
    "INVALID_CLOCK": "INVALID_CLOCK",

    /**
     * value: "UNEXPECTED_ERROR"
     * @const
     */
    "UNEXPECTED_ERROR": "UNEXPECTED_ERROR",

    /**
     * value: "TIMEOUT"
     * @const
     */
    "TIMEOUT": "TIMEOUT",

    /**
     * value: "SUBSCRIPTION_LIMIT_EXCEEDED"
     * @const
     */
    "SUBSCRIPTION_LIMIT_EXCEEDED": "SUBSCRIPTION_LIMIT_EXCEEDED",

    /**
     * value: "INVALID_REQUEST"
     * @const
     */
    "INVALID_REQUEST": "INVALID_REQUEST",

    /**
     * value: "CONNECTION_FAILED"
     * @const
     */
    "CONNECTION_FAILED": "CONNECTION_FAILED",

    /**
     * value: "MAX_CONNECTION_LIMIT_EXCEEDED"
     * @const
     */
    "MAX_CONNECTION_LIMIT_EXCEEDED": "MAX_CONNECTION_LIMIT_EXCEEDED",

    /**
     * value: "TOO_MANY_REQUESTS"
     * @const
     */
    "TOO_MANY_REQUESTS": "TOO_MANY_REQUESTS"
};


/**
 * Allowed values for the <code>statusCode</code> property.
 * @enum {String}
 * @readonly
 */
StatusMessage['StatusCodeEnum'] = {

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE"
};



export default StatusMessage;

