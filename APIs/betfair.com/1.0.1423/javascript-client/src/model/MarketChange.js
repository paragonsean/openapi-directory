/**
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MarketDefinition from './MarketDefinition';
import RunnerChange from './RunnerChange';

/**
 * The MarketChange model module.
 * @module model/MarketChange
 * @version 1.0.1423
 */
class MarketChange {
    /**
     * Constructs a new <code>MarketChange</code>.
     * @alias module:model/MarketChange
     */
    constructor() { 
        
        MarketChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MarketChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MarketChange} obj Optional instance to populate.
     * @return {module:model/MarketChange} The populated <code>MarketChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MarketChange();

            if (data.hasOwnProperty('con')) {
                obj['con'] = ApiClient.convertToType(data['con'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('img')) {
                obj['img'] = ApiClient.convertToType(data['img'], 'Boolean');
            }
            if (data.hasOwnProperty('marketDefinition')) {
                obj['marketDefinition'] = MarketDefinition.constructFromObject(data['marketDefinition']);
            }
            if (data.hasOwnProperty('rc')) {
                obj['rc'] = ApiClient.convertToType(data['rc'], [RunnerChange]);
            }
            if (data.hasOwnProperty('tv')) {
                obj['tv'] = ApiClient.convertToType(data['tv'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MarketChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MarketChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `marketDefinition`
        if (data['marketDefinition']) { // data not null
          MarketDefinition.validateJSON(data['marketDefinition']);
        }
        if (data['rc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rc'])) {
                throw new Error("Expected the field `rc` to be an array in the JSON data but got " + data['rc']);
            }
            // validate the optional field `rc` (array)
            for (const item of data['rc']) {
                RunnerChange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Conflated - have more than a single change been combined (or null if not conflated)
 * @member {Boolean} con
 */
MarketChange.prototype['con'] = undefined;

/**
 * Market Id - the id of the market
 * @member {String} id
 */
MarketChange.prototype['id'] = undefined;

/**
 * Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)
 * @member {Boolean} img
 */
MarketChange.prototype['img'] = undefined;

/**
 * @member {module:model/MarketDefinition} marketDefinition
 */
MarketChange.prototype['marketDefinition'] = undefined;

/**
 * Runner Changes - a list of changes to runners (or null if un-changed)
 * @member {Array.<module:model/RunnerChange>} rc
 */
MarketChange.prototype['rc'] = undefined;

/**
 * The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)
 * @member {Number} tv
 */
MarketChange.prototype['tv'] = undefined;






export default MarketChange;

