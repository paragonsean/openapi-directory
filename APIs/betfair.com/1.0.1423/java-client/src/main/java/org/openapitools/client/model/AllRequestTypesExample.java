/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthenticationMessage;
import org.openapitools.client.model.HeartbeatMessage;
import org.openapitools.client.model.MarketSubscriptionMessage;
import org.openapitools.client.model.OrderSubscriptionMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AllRequestTypesExample
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllRequestTypesExample {
  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private AuthenticationMessage authentication;

  public static final String SERIALIZED_NAME_HEARTBEAT = "heartbeat";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT)
  private HeartbeatMessage heartbeat;

  public static final String SERIALIZED_NAME_MARKET_SUBSCRIPTION = "marketSubscription";
  @SerializedName(SERIALIZED_NAME_MARKET_SUBSCRIPTION)
  private MarketSubscriptionMessage marketSubscription;

  /**
   * Gets or Sets opTypes
   */
  @JsonAdapter(OpTypesEnum.Adapter.class)
  public enum OpTypesEnum {
    HEARTBEAT("heartbeat"),
    
    AUTHENTICATION("authentication"),
    
    MARKET_SUBSCRIPTION("marketSubscription"),
    
    ORDER_SUBSCRIPTION("orderSubscription");

    private String value;

    OpTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpTypesEnum fromValue(String value) {
      for (OpTypesEnum b : OpTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OP_TYPES = "opTypes";
  @SerializedName(SERIALIZED_NAME_OP_TYPES)
  private OpTypesEnum opTypes;

  public static final String SERIALIZED_NAME_ORDER_SUBSCRIPTION_MESSAGE = "orderSubscriptionMessage";
  @SerializedName(SERIALIZED_NAME_ORDER_SUBSCRIPTION_MESSAGE)
  private OrderSubscriptionMessage orderSubscriptionMessage;

  public AllRequestTypesExample() {
  }

  public AllRequestTypesExample authentication(AuthenticationMessage authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public AuthenticationMessage getAuthentication() {
    return authentication;
  }

  public void setAuthentication(AuthenticationMessage authentication) {
    this.authentication = authentication;
  }


  public AllRequestTypesExample heartbeat(HeartbeatMessage heartbeat) {
    this.heartbeat = heartbeat;
    return this;
  }

  /**
   * Get heartbeat
   * @return heartbeat
   */
  @javax.annotation.Nullable
  public HeartbeatMessage getHeartbeat() {
    return heartbeat;
  }

  public void setHeartbeat(HeartbeatMessage heartbeat) {
    this.heartbeat = heartbeat;
  }


  public AllRequestTypesExample marketSubscription(MarketSubscriptionMessage marketSubscription) {
    this.marketSubscription = marketSubscription;
    return this;
  }

  /**
   * Get marketSubscription
   * @return marketSubscription
   */
  @javax.annotation.Nullable
  public MarketSubscriptionMessage getMarketSubscription() {
    return marketSubscription;
  }

  public void setMarketSubscription(MarketSubscriptionMessage marketSubscription) {
    this.marketSubscription = marketSubscription;
  }


  public AllRequestTypesExample opTypes(OpTypesEnum opTypes) {
    this.opTypes = opTypes;
    return this;
  }

  /**
   * Get opTypes
   * @return opTypes
   */
  @javax.annotation.Nullable
  public OpTypesEnum getOpTypes() {
    return opTypes;
  }

  public void setOpTypes(OpTypesEnum opTypes) {
    this.opTypes = opTypes;
  }


  public AllRequestTypesExample orderSubscriptionMessage(OrderSubscriptionMessage orderSubscriptionMessage) {
    this.orderSubscriptionMessage = orderSubscriptionMessage;
    return this;
  }

  /**
   * Get orderSubscriptionMessage
   * @return orderSubscriptionMessage
   */
  @javax.annotation.Nullable
  public OrderSubscriptionMessage getOrderSubscriptionMessage() {
    return orderSubscriptionMessage;
  }

  public void setOrderSubscriptionMessage(OrderSubscriptionMessage orderSubscriptionMessage) {
    this.orderSubscriptionMessage = orderSubscriptionMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllRequestTypesExample allRequestTypesExample = (AllRequestTypesExample) o;
    return Objects.equals(this.authentication, allRequestTypesExample.authentication) &&
        Objects.equals(this.heartbeat, allRequestTypesExample.heartbeat) &&
        Objects.equals(this.marketSubscription, allRequestTypesExample.marketSubscription) &&
        Objects.equals(this.opTypes, allRequestTypesExample.opTypes) &&
        Objects.equals(this.orderSubscriptionMessage, allRequestTypesExample.orderSubscriptionMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authentication, heartbeat, marketSubscription, opTypes, orderSubscriptionMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllRequestTypesExample {\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    heartbeat: ").append(toIndentedString(heartbeat)).append("\n");
    sb.append("    marketSubscription: ").append(toIndentedString(marketSubscription)).append("\n");
    sb.append("    opTypes: ").append(toIndentedString(opTypes)).append("\n");
    sb.append("    orderSubscriptionMessage: ").append(toIndentedString(orderSubscriptionMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication");
    openapiFields.add("heartbeat");
    openapiFields.add("marketSubscription");
    openapiFields.add("opTypes");
    openapiFields.add("orderSubscriptionMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllRequestTypesExample
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllRequestTypesExample.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllRequestTypesExample is not found in the empty JSON string", AllRequestTypesExample.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllRequestTypesExample.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllRequestTypesExample` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authentication`
      if (jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) {
        AuthenticationMessage.validateJsonElement(jsonObj.get("authentication"));
      }
      // validate the optional field `heartbeat`
      if (jsonObj.get("heartbeat") != null && !jsonObj.get("heartbeat").isJsonNull()) {
        HeartbeatMessage.validateJsonElement(jsonObj.get("heartbeat"));
      }
      // validate the optional field `marketSubscription`
      if (jsonObj.get("marketSubscription") != null && !jsonObj.get("marketSubscription").isJsonNull()) {
        MarketSubscriptionMessage.validateJsonElement(jsonObj.get("marketSubscription"));
      }
      if ((jsonObj.get("opTypes") != null && !jsonObj.get("opTypes").isJsonNull()) && !jsonObj.get("opTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opTypes").toString()));
      }
      // validate the optional field `opTypes`
      if (jsonObj.get("opTypes") != null && !jsonObj.get("opTypes").isJsonNull()) {
        OpTypesEnum.validateJsonElement(jsonObj.get("opTypes"));
      }
      // validate the optional field `orderSubscriptionMessage`
      if (jsonObj.get("orderSubscriptionMessage") != null && !jsonObj.get("orderSubscriptionMessage").isJsonNull()) {
        OrderSubscriptionMessage.validateJsonElement(jsonObj.get("orderSubscriptionMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllRequestTypesExample.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllRequestTypesExample' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllRequestTypesExample> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllRequestTypesExample.class));

       return (TypeAdapter<T>) new TypeAdapter<AllRequestTypesExample>() {
           @Override
           public void write(JsonWriter out, AllRequestTypesExample value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllRequestTypesExample read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllRequestTypesExample given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllRequestTypesExample
   * @throws IOException if the JSON string is invalid with respect to AllRequestTypesExample
   */
  public static AllRequestTypesExample fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllRequestTypesExample.class);
  }

  /**
   * Convert an instance of AllRequestTypesExample to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

