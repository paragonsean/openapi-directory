/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunnerChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunnerChange {
  public static final String SERIALIZED_NAME_ATB = "atb";
  @SerializedName(SERIALIZED_NAME_ATB)
  private List<List<Double>> atb = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATL = "atl";
  @SerializedName(SERIALIZED_NAME_ATL)
  private List<List<Double>> atl = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATB = "batb";
  @SerializedName(SERIALIZED_NAME_BATB)
  private List<List<Double>> batb = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATL = "batl";
  @SerializedName(SERIALIZED_NAME_BATL)
  private List<List<Double>> batl = new ArrayList<>();

  public static final String SERIALIZED_NAME_BDATB = "bdatb";
  @SerializedName(SERIALIZED_NAME_BDATB)
  private List<List<Double>> bdatb = new ArrayList<>();

  public static final String SERIALIZED_NAME_BDATL = "bdatl";
  @SerializedName(SERIALIZED_NAME_BDATL)
  private List<List<Double>> bdatl = new ArrayList<>();

  public static final String SERIALIZED_NAME_HC = "hc";
  @SerializedName(SERIALIZED_NAME_HC)
  private Double hc;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LTP = "ltp";
  @SerializedName(SERIALIZED_NAME_LTP)
  private Double ltp;

  public static final String SERIALIZED_NAME_SPB = "spb";
  @SerializedName(SERIALIZED_NAME_SPB)
  private List<List<Double>> spb = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPF = "spf";
  @SerializedName(SERIALIZED_NAME_SPF)
  private Double spf;

  public static final String SERIALIZED_NAME_SPL = "spl";
  @SerializedName(SERIALIZED_NAME_SPL)
  private List<List<Double>> spl = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPN = "spn";
  @SerializedName(SERIALIZED_NAME_SPN)
  private Double spn;

  public static final String SERIALIZED_NAME_TRD = "trd";
  @SerializedName(SERIALIZED_NAME_TRD)
  private List<List<Double>> trd = new ArrayList<>();

  public static final String SERIALIZED_NAME_TV = "tv";
  @SerializedName(SERIALIZED_NAME_TV)
  private Double tv;

  public RunnerChange() {
  }

  public RunnerChange atb(List<List<Double>> atb) {
    this.atb = atb;
    return this;
  }

  public RunnerChange addAtbItem(List<Double> atbItem) {
    if (this.atb == null) {
      this.atb = new ArrayList<>();
    }
    this.atb.add(atbItem);
    return this;
  }

  /**
   * Available To Back - PriceVol tuple delta of price changes (0 vol is remove)
   * @return atb
   */
  @javax.annotation.Nullable
  public List<List<Double>> getAtb() {
    return atb;
  }

  public void setAtb(List<List<Double>> atb) {
    this.atb = atb;
  }


  public RunnerChange atl(List<List<Double>> atl) {
    this.atl = atl;
    return this;
  }

  public RunnerChange addAtlItem(List<Double> atlItem) {
    if (this.atl == null) {
      this.atl = new ArrayList<>();
    }
    this.atl.add(atlItem);
    return this;
  }

  /**
   * Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)
   * @return atl
   */
  @javax.annotation.Nullable
  public List<List<Double>> getAtl() {
    return atl;
  }

  public void setAtl(List<List<Double>> atl) {
    this.atl = atl;
  }


  public RunnerChange batb(List<List<Double>> batb) {
    this.batb = batb;
    return this;
  }

  public RunnerChange addBatbItem(List<Double> batbItem) {
    if (this.batb == null) {
      this.batb = new ArrayList<>();
    }
    this.batb.add(batbItem);
    return this;
  }

  /**
   * Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
   * @return batb
   */
  @javax.annotation.Nullable
  public List<List<Double>> getBatb() {
    return batb;
  }

  public void setBatb(List<List<Double>> batb) {
    this.batb = batb;
  }


  public RunnerChange batl(List<List<Double>> batl) {
    this.batl = batl;
    return this;
  }

  public RunnerChange addBatlItem(List<Double> batlItem) {
    if (this.batl == null) {
      this.batl = new ArrayList<>();
    }
    this.batl.add(batlItem);
    return this;
  }

  /**
   * Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
   * @return batl
   */
  @javax.annotation.Nullable
  public List<List<Double>> getBatl() {
    return batl;
  }

  public void setBatl(List<List<Double>> batl) {
    this.batl = batl;
  }


  public RunnerChange bdatb(List<List<Double>> bdatb) {
    this.bdatb = bdatb;
    return this;
  }

  public RunnerChange addBdatbItem(List<Double> bdatbItem) {
    if (this.bdatb == null) {
      this.bdatb = new ArrayList<>();
    }
    this.bdatb.add(bdatbItem);
    return this;
  }

  /**
   * Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
   * @return bdatb
   */
  @javax.annotation.Nullable
  public List<List<Double>> getBdatb() {
    return bdatb;
  }

  public void setBdatb(List<List<Double>> bdatb) {
    this.bdatb = bdatb;
  }


  public RunnerChange bdatl(List<List<Double>> bdatl) {
    this.bdatl = bdatl;
    return this;
  }

  public RunnerChange addBdatlItem(List<Double> bdatlItem) {
    if (this.bdatl == null) {
      this.bdatl = new ArrayList<>();
    }
    this.bdatl.add(bdatlItem);
    return this;
  }

  /**
   * Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)
   * @return bdatl
   */
  @javax.annotation.Nullable
  public List<List<Double>> getBdatl() {
    return bdatl;
  }

  public void setBdatl(List<List<Double>> bdatl) {
    this.bdatl = bdatl;
  }


  public RunnerChange hc(Double hc) {
    this.hc = hc;
    return this;
  }

  /**
   * Handicap - the handicap of the runner (selection) (null if not applicable)
   * @return hc
   */
  @javax.annotation.Nullable
  public Double getHc() {
    return hc;
  }

  public void setHc(Double hc) {
    this.hc = hc;
  }


  public RunnerChange id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Selection Id - the id of the runner (selection)
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public RunnerChange ltp(Double ltp) {
    this.ltp = ltp;
    return this;
  }

  /**
   * Last Traded Price - The last traded price (or null if un-changed)
   * @return ltp
   */
  @javax.annotation.Nullable
  public Double getLtp() {
    return ltp;
  }

  public void setLtp(Double ltp) {
    this.ltp = ltp;
  }


  public RunnerChange spb(List<List<Double>> spb) {
    this.spb = spb;
    return this;
  }

  public RunnerChange addSpbItem(List<Double> spbItem) {
    if (this.spb == null) {
      this.spb = new ArrayList<>();
    }
    this.spb.add(spbItem);
    return this;
  }

  /**
   * Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)
   * @return spb
   */
  @javax.annotation.Nullable
  public List<List<Double>> getSpb() {
    return spb;
  }

  public void setSpb(List<List<Double>> spb) {
    this.spb = spb;
  }


  public RunnerChange spf(Double spf) {
    this.spf = spf;
    return this;
  }

  /**
   * Starting Price Far - The far starting price (or null if un-changed)
   * @return spf
   */
  @javax.annotation.Nullable
  public Double getSpf() {
    return spf;
  }

  public void setSpf(Double spf) {
    this.spf = spf;
  }


  public RunnerChange spl(List<List<Double>> spl) {
    this.spl = spl;
    return this;
  }

  public RunnerChange addSplItem(List<Double> splItem) {
    if (this.spl == null) {
      this.spl = new ArrayList<>();
    }
    this.spl.add(splItem);
    return this;
  }

  /**
   * Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)
   * @return spl
   */
  @javax.annotation.Nullable
  public List<List<Double>> getSpl() {
    return spl;
  }

  public void setSpl(List<List<Double>> spl) {
    this.spl = spl;
  }


  public RunnerChange spn(Double spn) {
    this.spn = spn;
    return this;
  }

  /**
   * Starting Price Near - The far starting price (or null if un-changed)
   * @return spn
   */
  @javax.annotation.Nullable
  public Double getSpn() {
    return spn;
  }

  public void setSpn(Double spn) {
    this.spn = spn;
  }


  public RunnerChange trd(List<List<Double>> trd) {
    this.trd = trd;
    return this;
  }

  public RunnerChange addTrdItem(List<Double> trdItem) {
    if (this.trd == null) {
      this.trd = new ArrayList<>();
    }
    this.trd.add(trdItem);
    return this;
  }

  /**
   * Traded - PriceVol tuple delta of price changes (0 vol is remove)
   * @return trd
   */
  @javax.annotation.Nullable
  public List<List<Double>> getTrd() {
    return trd;
  }

  public void setTrd(List<List<Double>> trd) {
    this.trd = trd;
  }


  public RunnerChange tv(Double tv) {
    this.tv = tv;
    return this;
  }

  /**
   * The total amount matched. This value is truncated at 2dp.
   * @return tv
   */
  @javax.annotation.Nullable
  public Double getTv() {
    return tv;
  }

  public void setTv(Double tv) {
    this.tv = tv;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnerChange runnerChange = (RunnerChange) o;
    return Objects.equals(this.atb, runnerChange.atb) &&
        Objects.equals(this.atl, runnerChange.atl) &&
        Objects.equals(this.batb, runnerChange.batb) &&
        Objects.equals(this.batl, runnerChange.batl) &&
        Objects.equals(this.bdatb, runnerChange.bdatb) &&
        Objects.equals(this.bdatl, runnerChange.bdatl) &&
        Objects.equals(this.hc, runnerChange.hc) &&
        Objects.equals(this.id, runnerChange.id) &&
        Objects.equals(this.ltp, runnerChange.ltp) &&
        Objects.equals(this.spb, runnerChange.spb) &&
        Objects.equals(this.spf, runnerChange.spf) &&
        Objects.equals(this.spl, runnerChange.spl) &&
        Objects.equals(this.spn, runnerChange.spn) &&
        Objects.equals(this.trd, runnerChange.trd) &&
        Objects.equals(this.tv, runnerChange.tv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atb, atl, batb, batl, bdatb, bdatl, hc, id, ltp, spb, spf, spl, spn, trd, tv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnerChange {\n");
    sb.append("    atb: ").append(toIndentedString(atb)).append("\n");
    sb.append("    atl: ").append(toIndentedString(atl)).append("\n");
    sb.append("    batb: ").append(toIndentedString(batb)).append("\n");
    sb.append("    batl: ").append(toIndentedString(batl)).append("\n");
    sb.append("    bdatb: ").append(toIndentedString(bdatb)).append("\n");
    sb.append("    bdatl: ").append(toIndentedString(bdatl)).append("\n");
    sb.append("    hc: ").append(toIndentedString(hc)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ltp: ").append(toIndentedString(ltp)).append("\n");
    sb.append("    spb: ").append(toIndentedString(spb)).append("\n");
    sb.append("    spf: ").append(toIndentedString(spf)).append("\n");
    sb.append("    spl: ").append(toIndentedString(spl)).append("\n");
    sb.append("    spn: ").append(toIndentedString(spn)).append("\n");
    sb.append("    trd: ").append(toIndentedString(trd)).append("\n");
    sb.append("    tv: ").append(toIndentedString(tv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("atb");
    openapiFields.add("atl");
    openapiFields.add("batb");
    openapiFields.add("batl");
    openapiFields.add("bdatb");
    openapiFields.add("bdatl");
    openapiFields.add("hc");
    openapiFields.add("id");
    openapiFields.add("ltp");
    openapiFields.add("spb");
    openapiFields.add("spf");
    openapiFields.add("spl");
    openapiFields.add("spn");
    openapiFields.add("trd");
    openapiFields.add("tv");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunnerChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunnerChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunnerChange is not found in the empty JSON string", RunnerChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunnerChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunnerChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("atb") != null && !jsonObj.get("atb").isJsonNull() && !jsonObj.get("atb").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `atb` to be an array in the JSON string but got `%s`", jsonObj.get("atb").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("atl") != null && !jsonObj.get("atl").isJsonNull() && !jsonObj.get("atl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `atl` to be an array in the JSON string but got `%s`", jsonObj.get("atl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("batb") != null && !jsonObj.get("batb").isJsonNull() && !jsonObj.get("batb").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `batb` to be an array in the JSON string but got `%s`", jsonObj.get("batb").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("batl") != null && !jsonObj.get("batl").isJsonNull() && !jsonObj.get("batl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `batl` to be an array in the JSON string but got `%s`", jsonObj.get("batl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bdatb") != null && !jsonObj.get("bdatb").isJsonNull() && !jsonObj.get("bdatb").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bdatb` to be an array in the JSON string but got `%s`", jsonObj.get("bdatb").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bdatl") != null && !jsonObj.get("bdatl").isJsonNull() && !jsonObj.get("bdatl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bdatl` to be an array in the JSON string but got `%s`", jsonObj.get("bdatl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("spb") != null && !jsonObj.get("spb").isJsonNull() && !jsonObj.get("spb").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spb` to be an array in the JSON string but got `%s`", jsonObj.get("spb").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("spl") != null && !jsonObj.get("spl").isJsonNull() && !jsonObj.get("spl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spl` to be an array in the JSON string but got `%s`", jsonObj.get("spl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trd") != null && !jsonObj.get("trd").isJsonNull() && !jsonObj.get("trd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trd` to be an array in the JSON string but got `%s`", jsonObj.get("trd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunnerChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunnerChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunnerChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunnerChange.class));

       return (TypeAdapter<T>) new TypeAdapter<RunnerChange>() {
           @Override
           public void write(JsonWriter out, RunnerChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunnerChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunnerChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunnerChange
   * @throws IOException if the JSON string is invalid with respect to RunnerChange
   */
  public static RunnerChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunnerChange.class);
  }

  /**
   * Convert an instance of RunnerChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

