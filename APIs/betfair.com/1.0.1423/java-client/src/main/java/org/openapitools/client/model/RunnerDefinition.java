/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunnerDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunnerDefinition {
  public static final String SERIALIZED_NAME_ADJUSTMENT_FACTOR = "adjustmentFactor";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_FACTOR)
  private Double adjustmentFactor;

  public static final String SERIALIZED_NAME_BSP = "bsp";
  @SerializedName(SERIALIZED_NAME_BSP)
  private Double bsp;

  public static final String SERIALIZED_NAME_HC = "hc";
  @SerializedName(SERIALIZED_NAME_HC)
  private Double hc;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_REMOVAL_DATE = "removalDate";
  @SerializedName(SERIALIZED_NAME_REMOVAL_DATE)
  private OffsetDateTime removalDate;

  public static final String SERIALIZED_NAME_SORT_PRIORITY = "sortPriority";
  @SerializedName(SERIALIZED_NAME_SORT_PRIORITY)
  private Integer sortPriority;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    WINNER("WINNER"),
    
    LOSER("LOSER"),
    
    REMOVED("REMOVED"),
    
    REMOVED_VACANT("REMOVED_VACANT"),
    
    HIDDEN("HIDDEN"),
    
    PLACED("PLACED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public RunnerDefinition() {
  }

  public RunnerDefinition adjustmentFactor(Double adjustmentFactor) {
    this.adjustmentFactor = adjustmentFactor;
    return this;
  }

  /**
   * Get adjustmentFactor
   * @return adjustmentFactor
   */
  @javax.annotation.Nullable
  public Double getAdjustmentFactor() {
    return adjustmentFactor;
  }

  public void setAdjustmentFactor(Double adjustmentFactor) {
    this.adjustmentFactor = adjustmentFactor;
  }


  public RunnerDefinition bsp(Double bsp) {
    this.bsp = bsp;
    return this;
  }

  /**
   * Get bsp
   * @return bsp
   */
  @javax.annotation.Nullable
  public Double getBsp() {
    return bsp;
  }

  public void setBsp(Double bsp) {
    this.bsp = bsp;
  }


  public RunnerDefinition hc(Double hc) {
    this.hc = hc;
    return this;
  }

  /**
   * Handicap - the handicap of the runner (selection) (null if not applicable)
   * @return hc
   */
  @javax.annotation.Nullable
  public Double getHc() {
    return hc;
  }

  public void setHc(Double hc) {
    this.hc = hc;
  }


  public RunnerDefinition id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Selection Id - the id of the runner (selection)
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public RunnerDefinition removalDate(OffsetDateTime removalDate) {
    this.removalDate = removalDate;
    return this;
  }

  /**
   * Get removalDate
   * @return removalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRemovalDate() {
    return removalDate;
  }

  public void setRemovalDate(OffsetDateTime removalDate) {
    this.removalDate = removalDate;
  }


  public RunnerDefinition sortPriority(Integer sortPriority) {
    this.sortPriority = sortPriority;
    return this;
  }

  /**
   * Get sortPriority
   * @return sortPriority
   */
  @javax.annotation.Nullable
  public Integer getSortPriority() {
    return sortPriority;
  }

  public void setSortPriority(Integer sortPriority) {
    this.sortPriority = sortPriority;
  }


  public RunnerDefinition status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnerDefinition runnerDefinition = (RunnerDefinition) o;
    return Objects.equals(this.adjustmentFactor, runnerDefinition.adjustmentFactor) &&
        Objects.equals(this.bsp, runnerDefinition.bsp) &&
        Objects.equals(this.hc, runnerDefinition.hc) &&
        Objects.equals(this.id, runnerDefinition.id) &&
        Objects.equals(this.removalDate, runnerDefinition.removalDate) &&
        Objects.equals(this.sortPriority, runnerDefinition.sortPriority) &&
        Objects.equals(this.status, runnerDefinition.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustmentFactor, bsp, hc, id, removalDate, sortPriority, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnerDefinition {\n");
    sb.append("    adjustmentFactor: ").append(toIndentedString(adjustmentFactor)).append("\n");
    sb.append("    bsp: ").append(toIndentedString(bsp)).append("\n");
    sb.append("    hc: ").append(toIndentedString(hc)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    removalDate: ").append(toIndentedString(removalDate)).append("\n");
    sb.append("    sortPriority: ").append(toIndentedString(sortPriority)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustmentFactor");
    openapiFields.add("bsp");
    openapiFields.add("hc");
    openapiFields.add("id");
    openapiFields.add("removalDate");
    openapiFields.add("sortPriority");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunnerDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunnerDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunnerDefinition is not found in the empty JSON string", RunnerDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunnerDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunnerDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunnerDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunnerDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunnerDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunnerDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RunnerDefinition>() {
           @Override
           public void write(JsonWriter out, RunnerDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunnerDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunnerDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunnerDefinition
   * @throws IOException if the JSON string is invalid with respect to RunnerDefinition
   */
  public static RunnerDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunnerDefinition.class);
  }

  /**
   * Convert an instance of RunnerDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

