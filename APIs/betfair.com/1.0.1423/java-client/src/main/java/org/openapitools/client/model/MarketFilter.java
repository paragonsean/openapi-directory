/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketFilter {
  /**
   * Gets or Sets bettingTypes
   */
  @JsonAdapter(BettingTypesEnum.Adapter.class)
  public enum BettingTypesEnum {
    ODDS("ODDS"),
    
    LINE("LINE"),
    
    RANGE("RANGE"),
    
    ASIAN_HANDICAP_DOUBLE_LINE("ASIAN_HANDICAP_DOUBLE_LINE"),
    
    ASIAN_HANDICAP_SINGLE_LINE("ASIAN_HANDICAP_SINGLE_LINE");

    private String value;

    BettingTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BettingTypesEnum fromValue(String value) {
      for (BettingTypesEnum b : BettingTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BettingTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BettingTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BettingTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BettingTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BettingTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BETTING_TYPES = "bettingTypes";
  @SerializedName(SERIALIZED_NAME_BETTING_TYPES)
  private List<BettingTypesEnum> bettingTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BSP_MARKET = "bspMarket";
  @SerializedName(SERIALIZED_NAME_BSP_MARKET)
  private Boolean bspMarket;

  public static final String SERIALIZED_NAME_COUNTRY_CODES = "countryCodes";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODES)
  private List<String> countryCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_IDS = "eventIds";
  @SerializedName(SERIALIZED_NAME_EVENT_IDS)
  private List<String> eventIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TYPE_IDS = "eventTypeIds";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_IDS)
  private List<String> eventTypeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_IDS = "marketIds";
  @SerializedName(SERIALIZED_NAME_MARKET_IDS)
  private List<String> marketIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_TYPES = "marketTypes";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPES)
  private List<String> marketTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RACE_TYPES = "raceTypes";
  @SerializedName(SERIALIZED_NAME_RACE_TYPES)
  private List<String> raceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TURN_IN_PLAY_ENABLED = "turnInPlayEnabled";
  @SerializedName(SERIALIZED_NAME_TURN_IN_PLAY_ENABLED)
  private Boolean turnInPlayEnabled;

  public static final String SERIALIZED_NAME_VENUES = "venues";
  @SerializedName(SERIALIZED_NAME_VENUES)
  private List<String> venues = new ArrayList<>();

  public MarketFilter() {
  }

  public MarketFilter bettingTypes(List<BettingTypesEnum> bettingTypes) {
    this.bettingTypes = bettingTypes;
    return this;
  }

  public MarketFilter addBettingTypesItem(BettingTypesEnum bettingTypesItem) {
    if (this.bettingTypes == null) {
      this.bettingTypes = new ArrayList<>();
    }
    this.bettingTypes.add(bettingTypesItem);
    return this;
  }

  /**
   * Get bettingTypes
   * @return bettingTypes
   */
  @javax.annotation.Nullable
  public List<BettingTypesEnum> getBettingTypes() {
    return bettingTypes;
  }

  public void setBettingTypes(List<BettingTypesEnum> bettingTypes) {
    this.bettingTypes = bettingTypes;
  }


  public MarketFilter bspMarket(Boolean bspMarket) {
    this.bspMarket = bspMarket;
    return this;
  }

  /**
   * Get bspMarket
   * @return bspMarket
   */
  @javax.annotation.Nullable
  public Boolean getBspMarket() {
    return bspMarket;
  }

  public void setBspMarket(Boolean bspMarket) {
    this.bspMarket = bspMarket;
  }


  public MarketFilter countryCodes(List<String> countryCodes) {
    this.countryCodes = countryCodes;
    return this;
  }

  public MarketFilter addCountryCodesItem(String countryCodesItem) {
    if (this.countryCodes == null) {
      this.countryCodes = new ArrayList<>();
    }
    this.countryCodes.add(countryCodesItem);
    return this;
  }

  /**
   * Get countryCodes
   * @return countryCodes
   */
  @javax.annotation.Nullable
  public List<String> getCountryCodes() {
    return countryCodes;
  }

  public void setCountryCodes(List<String> countryCodes) {
    this.countryCodes = countryCodes;
  }


  public MarketFilter eventIds(List<String> eventIds) {
    this.eventIds = eventIds;
    return this;
  }

  public MarketFilter addEventIdsItem(String eventIdsItem) {
    if (this.eventIds == null) {
      this.eventIds = new ArrayList<>();
    }
    this.eventIds.add(eventIdsItem);
    return this;
  }

  /**
   * Get eventIds
   * @return eventIds
   */
  @javax.annotation.Nullable
  public List<String> getEventIds() {
    return eventIds;
  }

  public void setEventIds(List<String> eventIds) {
    this.eventIds = eventIds;
  }


  public MarketFilter eventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
    return this;
  }

  public MarketFilter addEventTypeIdsItem(String eventTypeIdsItem) {
    if (this.eventTypeIds == null) {
      this.eventTypeIds = new ArrayList<>();
    }
    this.eventTypeIds.add(eventTypeIdsItem);
    return this;
  }

  /**
   * Get eventTypeIds
   * @return eventTypeIds
   */
  @javax.annotation.Nullable
  public List<String> getEventTypeIds() {
    return eventTypeIds;
  }

  public void setEventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
  }


  public MarketFilter marketIds(List<String> marketIds) {
    this.marketIds = marketIds;
    return this;
  }

  public MarketFilter addMarketIdsItem(String marketIdsItem) {
    if (this.marketIds == null) {
      this.marketIds = new ArrayList<>();
    }
    this.marketIds.add(marketIdsItem);
    return this;
  }

  /**
   * Get marketIds
   * @return marketIds
   */
  @javax.annotation.Nullable
  public List<String> getMarketIds() {
    return marketIds;
  }

  public void setMarketIds(List<String> marketIds) {
    this.marketIds = marketIds;
  }


  public MarketFilter marketTypes(List<String> marketTypes) {
    this.marketTypes = marketTypes;
    return this;
  }

  public MarketFilter addMarketTypesItem(String marketTypesItem) {
    if (this.marketTypes == null) {
      this.marketTypes = new ArrayList<>();
    }
    this.marketTypes.add(marketTypesItem);
    return this;
  }

  /**
   * Get marketTypes
   * @return marketTypes
   */
  @javax.annotation.Nullable
  public List<String> getMarketTypes() {
    return marketTypes;
  }

  public void setMarketTypes(List<String> marketTypes) {
    this.marketTypes = marketTypes;
  }


  public MarketFilter raceTypes(List<String> raceTypes) {
    this.raceTypes = raceTypes;
    return this;
  }

  public MarketFilter addRaceTypesItem(String raceTypesItem) {
    if (this.raceTypes == null) {
      this.raceTypes = new ArrayList<>();
    }
    this.raceTypes.add(raceTypesItem);
    return this;
  }

  /**
   * Get raceTypes
   * @return raceTypes
   */
  @javax.annotation.Nullable
  public List<String> getRaceTypes() {
    return raceTypes;
  }

  public void setRaceTypes(List<String> raceTypes) {
    this.raceTypes = raceTypes;
  }


  public MarketFilter turnInPlayEnabled(Boolean turnInPlayEnabled) {
    this.turnInPlayEnabled = turnInPlayEnabled;
    return this;
  }

  /**
   * Get turnInPlayEnabled
   * @return turnInPlayEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTurnInPlayEnabled() {
    return turnInPlayEnabled;
  }

  public void setTurnInPlayEnabled(Boolean turnInPlayEnabled) {
    this.turnInPlayEnabled = turnInPlayEnabled;
  }


  public MarketFilter venues(List<String> venues) {
    this.venues = venues;
    return this;
  }

  public MarketFilter addVenuesItem(String venuesItem) {
    if (this.venues == null) {
      this.venues = new ArrayList<>();
    }
    this.venues.add(venuesItem);
    return this;
  }

  /**
   * Get venues
   * @return venues
   */
  @javax.annotation.Nullable
  public List<String> getVenues() {
    return venues;
  }

  public void setVenues(List<String> venues) {
    this.venues = venues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketFilter marketFilter = (MarketFilter) o;
    return Objects.equals(this.bettingTypes, marketFilter.bettingTypes) &&
        Objects.equals(this.bspMarket, marketFilter.bspMarket) &&
        Objects.equals(this.countryCodes, marketFilter.countryCodes) &&
        Objects.equals(this.eventIds, marketFilter.eventIds) &&
        Objects.equals(this.eventTypeIds, marketFilter.eventTypeIds) &&
        Objects.equals(this.marketIds, marketFilter.marketIds) &&
        Objects.equals(this.marketTypes, marketFilter.marketTypes) &&
        Objects.equals(this.raceTypes, marketFilter.raceTypes) &&
        Objects.equals(this.turnInPlayEnabled, marketFilter.turnInPlayEnabled) &&
        Objects.equals(this.venues, marketFilter.venues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bettingTypes, bspMarket, countryCodes, eventIds, eventTypeIds, marketIds, marketTypes, raceTypes, turnInPlayEnabled, venues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketFilter {\n");
    sb.append("    bettingTypes: ").append(toIndentedString(bettingTypes)).append("\n");
    sb.append("    bspMarket: ").append(toIndentedString(bspMarket)).append("\n");
    sb.append("    countryCodes: ").append(toIndentedString(countryCodes)).append("\n");
    sb.append("    eventIds: ").append(toIndentedString(eventIds)).append("\n");
    sb.append("    eventTypeIds: ").append(toIndentedString(eventTypeIds)).append("\n");
    sb.append("    marketIds: ").append(toIndentedString(marketIds)).append("\n");
    sb.append("    marketTypes: ").append(toIndentedString(marketTypes)).append("\n");
    sb.append("    raceTypes: ").append(toIndentedString(raceTypes)).append("\n");
    sb.append("    turnInPlayEnabled: ").append(toIndentedString(turnInPlayEnabled)).append("\n");
    sb.append("    venues: ").append(toIndentedString(venues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bettingTypes");
    openapiFields.add("bspMarket");
    openapiFields.add("countryCodes");
    openapiFields.add("eventIds");
    openapiFields.add("eventTypeIds");
    openapiFields.add("marketIds");
    openapiFields.add("marketTypes");
    openapiFields.add("raceTypes");
    openapiFields.add("turnInPlayEnabled");
    openapiFields.add("venues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketFilter is not found in the empty JSON string", MarketFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bettingTypes") != null && !jsonObj.get("bettingTypes").isJsonNull() && !jsonObj.get("bettingTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bettingTypes` to be an array in the JSON string but got `%s`", jsonObj.get("bettingTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countryCodes") != null && !jsonObj.get("countryCodes").isJsonNull() && !jsonObj.get("countryCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodes` to be an array in the JSON string but got `%s`", jsonObj.get("countryCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventIds") != null && !jsonObj.get("eventIds").isJsonNull() && !jsonObj.get("eventIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventIds` to be an array in the JSON string but got `%s`", jsonObj.get("eventIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventTypeIds") != null && !jsonObj.get("eventTypeIds").isJsonNull() && !jsonObj.get("eventTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("eventTypeIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketIds") != null && !jsonObj.get("marketIds").isJsonNull() && !jsonObj.get("marketIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketIds` to be an array in the JSON string but got `%s`", jsonObj.get("marketIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marketTypes") != null && !jsonObj.get("marketTypes").isJsonNull() && !jsonObj.get("marketTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketTypes` to be an array in the JSON string but got `%s`", jsonObj.get("marketTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("raceTypes") != null && !jsonObj.get("raceTypes").isJsonNull() && !jsonObj.get("raceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `raceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("raceTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("venues") != null && !jsonObj.get("venues").isJsonNull() && !jsonObj.get("venues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `venues` to be an array in the JSON string but got `%s`", jsonObj.get("venues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketFilter>() {
           @Override
           public void write(JsonWriter out, MarketFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketFilter
   * @throws IOException if the JSON string is invalid with respect to MarketFilter
   */
  public static MarketFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketFilter.class);
  }

  /**
   * Convert an instance of MarketFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

