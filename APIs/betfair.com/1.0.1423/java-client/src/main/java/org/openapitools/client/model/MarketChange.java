/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MarketDefinition;
import org.openapitools.client.model.RunnerChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketChange {
  public static final String SERIALIZED_NAME_CON = "con";
  @SerializedName(SERIALIZED_NAME_CON)
  private Boolean con;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMG = "img";
  @SerializedName(SERIALIZED_NAME_IMG)
  private Boolean img;

  public static final String SERIALIZED_NAME_MARKET_DEFINITION = "marketDefinition";
  @SerializedName(SERIALIZED_NAME_MARKET_DEFINITION)
  private MarketDefinition marketDefinition;

  public static final String SERIALIZED_NAME_RC = "rc";
  @SerializedName(SERIALIZED_NAME_RC)
  private List<RunnerChange> rc = new ArrayList<>();

  public static final String SERIALIZED_NAME_TV = "tv";
  @SerializedName(SERIALIZED_NAME_TV)
  private Double tv;

  public MarketChange() {
  }

  public MarketChange con(Boolean con) {
    this.con = con;
    return this;
  }

  /**
   * Conflated - have more than a single change been combined (or null if not conflated)
   * @return con
   */
  @javax.annotation.Nullable
  public Boolean getCon() {
    return con;
  }

  public void setCon(Boolean con) {
    this.con = con;
  }


  public MarketChange id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Market Id - the id of the market
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MarketChange img(Boolean img) {
    this.img = img;
    return this;
  }

  /**
   * Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)
   * @return img
   */
  @javax.annotation.Nullable
  public Boolean getImg() {
    return img;
  }

  public void setImg(Boolean img) {
    this.img = img;
  }


  public MarketChange marketDefinition(MarketDefinition marketDefinition) {
    this.marketDefinition = marketDefinition;
    return this;
  }

  /**
   * Get marketDefinition
   * @return marketDefinition
   */
  @javax.annotation.Nullable
  public MarketDefinition getMarketDefinition() {
    return marketDefinition;
  }

  public void setMarketDefinition(MarketDefinition marketDefinition) {
    this.marketDefinition = marketDefinition;
  }


  public MarketChange rc(List<RunnerChange> rc) {
    this.rc = rc;
    return this;
  }

  public MarketChange addRcItem(RunnerChange rcItem) {
    if (this.rc == null) {
      this.rc = new ArrayList<>();
    }
    this.rc.add(rcItem);
    return this;
  }

  /**
   * Runner Changes - a list of changes to runners (or null if un-changed)
   * @return rc
   */
  @javax.annotation.Nullable
  public List<RunnerChange> getRc() {
    return rc;
  }

  public void setRc(List<RunnerChange> rc) {
    this.rc = rc;
  }


  public MarketChange tv(Double tv) {
    this.tv = tv;
    return this;
  }

  /**
   * The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)
   * @return tv
   */
  @javax.annotation.Nullable
  public Double getTv() {
    return tv;
  }

  public void setTv(Double tv) {
    this.tv = tv;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketChange marketChange = (MarketChange) o;
    return Objects.equals(this.con, marketChange.con) &&
        Objects.equals(this.id, marketChange.id) &&
        Objects.equals(this.img, marketChange.img) &&
        Objects.equals(this.marketDefinition, marketChange.marketDefinition) &&
        Objects.equals(this.rc, marketChange.rc) &&
        Objects.equals(this.tv, marketChange.tv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(con, id, img, marketDefinition, rc, tv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketChange {\n");
    sb.append("    con: ").append(toIndentedString(con)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    img: ").append(toIndentedString(img)).append("\n");
    sb.append("    marketDefinition: ").append(toIndentedString(marketDefinition)).append("\n");
    sb.append("    rc: ").append(toIndentedString(rc)).append("\n");
    sb.append("    tv: ").append(toIndentedString(tv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("con");
    openapiFields.add("id");
    openapiFields.add("img");
    openapiFields.add("marketDefinition");
    openapiFields.add("rc");
    openapiFields.add("tv");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketChange is not found in the empty JSON string", MarketChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `marketDefinition`
      if (jsonObj.get("marketDefinition") != null && !jsonObj.get("marketDefinition").isJsonNull()) {
        MarketDefinition.validateJsonElement(jsonObj.get("marketDefinition"));
      }
      if (jsonObj.get("rc") != null && !jsonObj.get("rc").isJsonNull()) {
        JsonArray jsonArrayrc = jsonObj.getAsJsonArray("rc");
        if (jsonArrayrc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rc` to be an array in the JSON string but got `%s`", jsonObj.get("rc").toString()));
          }

          // validate the optional field `rc` (array)
          for (int i = 0; i < jsonArrayrc.size(); i++) {
            RunnerChange.validateJsonElement(jsonArrayrc.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketChange.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketChange>() {
           @Override
           public void write(JsonWriter out, MarketChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketChange
   * @throws IOException if the JSON string is invalid with respect to MarketChange
   */
  public static MarketChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketChange.class);
  }

  /**
   * Convert an instance of MarketChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

