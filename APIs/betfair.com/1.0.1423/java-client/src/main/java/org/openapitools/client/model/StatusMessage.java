/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatusMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatusMessage extends ResponseMessage {
  public static final String SERIALIZED_NAME_CONNECTION_CLOSED = "connectionClosed";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CLOSED)
  private Boolean connectionClosed;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_CONNECTIONS_AVAILABLE = "connectionsAvailable";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS_AVAILABLE)
  private Integer connectionsAvailable;

  /**
   * The type of error in case of a failure
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    NO_APP_KEY("NO_APP_KEY"),
    
    INVALID_APP_KEY("INVALID_APP_KEY"),
    
    NO_SESSION("NO_SESSION"),
    
    INVALID_SESSION_INFORMATION("INVALID_SESSION_INFORMATION"),
    
    NOT_AUTHORIZED("NOT_AUTHORIZED"),
    
    INVALID_INPUT("INVALID_INPUT"),
    
    INVALID_CLOCK("INVALID_CLOCK"),
    
    UNEXPECTED_ERROR("UNEXPECTED_ERROR"),
    
    TIMEOUT("TIMEOUT"),
    
    SUBSCRIPTION_LIMIT_EXCEEDED("SUBSCRIPTION_LIMIT_EXCEEDED"),
    
    INVALID_REQUEST("INVALID_REQUEST"),
    
    CONNECTION_FAILED("CONNECTION_FAILED"),
    
    MAX_CONNECTION_LIMIT_EXCEEDED("MAX_CONNECTION_LIMIT_EXCEEDED"),
    
    TOO_MANY_REQUESTS("TOO_MANY_REQUESTS");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String value) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCodeEnum errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  /**
   * The status of the last request
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    SUCCESS("SUCCESS"),
    
    FAILURE("FAILURE");

    private String value;

    StatusCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodeEnum fromValue(String value) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCodeEnum statusCode;

  public StatusMessage() {
    this.op = this.getClass().getSimpleName();
  }

  public StatusMessage connectionClosed(Boolean connectionClosed) {
    this.connectionClosed = connectionClosed;
    return this;
  }

  /**
   * Is the connection now closed
   * @return connectionClosed
   */
  @javax.annotation.Nullable
  public Boolean getConnectionClosed() {
    return connectionClosed;
  }

  public void setConnectionClosed(Boolean connectionClosed) {
    this.connectionClosed = connectionClosed;
  }


  public StatusMessage connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * The connection id
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public StatusMessage connectionsAvailable(Integer connectionsAvailable) {
    this.connectionsAvailable = connectionsAvailable;
    return this;
  }

  /**
   * The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.
   * @return connectionsAvailable
   */
  @javax.annotation.Nullable
  public Integer getConnectionsAvailable() {
    return connectionsAvailable;
  }

  public void setConnectionsAvailable(Integer connectionsAvailable) {
    this.connectionsAvailable = connectionsAvailable;
  }


  public StatusMessage errorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The type of error in case of a failure
   * @return errorCode
   */
  @javax.annotation.Nullable
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }


  public StatusMessage errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Additional message in case of a failure
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public StatusMessage statusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * The status of the last request
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StatusCodeEnum getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusMessage statusMessage = (StatusMessage) o;
    return Objects.equals(this.connectionClosed, statusMessage.connectionClosed) &&
        Objects.equals(this.connectionId, statusMessage.connectionId) &&
        Objects.equals(this.connectionsAvailable, statusMessage.connectionsAvailable) &&
        Objects.equals(this.errorCode, statusMessage.errorCode) &&
        Objects.equals(this.errorMessage, statusMessage.errorMessage) &&
        Objects.equals(this.statusCode, statusMessage.statusCode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionClosed, connectionId, connectionsAvailable, errorCode, errorMessage, statusCode, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusMessage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    connectionClosed: ").append(toIndentedString(connectionClosed)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    connectionsAvailable: ").append(toIndentedString(connectionsAvailable)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("op");
    openapiFields.add("connectionClosed");
    openapiFields.add("connectionId");
    openapiFields.add("connectionsAvailable");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("statusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatusMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatusMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatusMessage is not found in the empty JSON string", StatusMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatusMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatusMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatusMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatusMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatusMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatusMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<StatusMessage>() {
           @Override
           public void write(JsonWriter out, StatusMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatusMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatusMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatusMessage
   * @throws IOException if the JSON string is invalid with respect to StatusMessage
   */
  public static StatusMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatusMessage.class);
  }

  /**
   * Convert an instance of StatusMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

