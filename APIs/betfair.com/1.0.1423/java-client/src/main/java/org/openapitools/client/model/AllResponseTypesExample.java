/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionMessage;
import org.openapitools.client.model.MarketChangeMessage;
import org.openapitools.client.model.OrderChangeMessage;
import org.openapitools.client.model.StatusMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AllResponseTypesExample
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllResponseTypesExample {
  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private ConnectionMessage connection;

  public static final String SERIALIZED_NAME_MARKET_CHANGE_MESSAGE = "marketChangeMessage";
  @SerializedName(SERIALIZED_NAME_MARKET_CHANGE_MESSAGE)
  private MarketChangeMessage marketChangeMessage;

  /**
   * Gets or Sets opTypes
   */
  @JsonAdapter(OpTypesEnum.Adapter.class)
  public enum OpTypesEnum {
    CONNECTION("connection"),
    
    STATUS("status"),
    
    MCM("mcm"),
    
    OCM("ocm");

    private String value;

    OpTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpTypesEnum fromValue(String value) {
      for (OpTypesEnum b : OpTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OP_TYPES = "opTypes";
  @SerializedName(SERIALIZED_NAME_OP_TYPES)
  private OpTypesEnum opTypes;

  public static final String SERIALIZED_NAME_ORDER_CHANGE_MESSAGE = "orderChangeMessage";
  @SerializedName(SERIALIZED_NAME_ORDER_CHANGE_MESSAGE)
  private OrderChangeMessage orderChangeMessage;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusMessage status;

  public AllResponseTypesExample() {
  }

  public AllResponseTypesExample connection(ConnectionMessage connection) {
    this.connection = connection;
    return this;
  }

  /**
   * Get connection
   * @return connection
   */
  @javax.annotation.Nullable
  public ConnectionMessage getConnection() {
    return connection;
  }

  public void setConnection(ConnectionMessage connection) {
    this.connection = connection;
  }


  public AllResponseTypesExample marketChangeMessage(MarketChangeMessage marketChangeMessage) {
    this.marketChangeMessage = marketChangeMessage;
    return this;
  }

  /**
   * Get marketChangeMessage
   * @return marketChangeMessage
   */
  @javax.annotation.Nullable
  public MarketChangeMessage getMarketChangeMessage() {
    return marketChangeMessage;
  }

  public void setMarketChangeMessage(MarketChangeMessage marketChangeMessage) {
    this.marketChangeMessage = marketChangeMessage;
  }


  public AllResponseTypesExample opTypes(OpTypesEnum opTypes) {
    this.opTypes = opTypes;
    return this;
  }

  /**
   * Get opTypes
   * @return opTypes
   */
  @javax.annotation.Nullable
  public OpTypesEnum getOpTypes() {
    return opTypes;
  }

  public void setOpTypes(OpTypesEnum opTypes) {
    this.opTypes = opTypes;
  }


  public AllResponseTypesExample orderChangeMessage(OrderChangeMessage orderChangeMessage) {
    this.orderChangeMessage = orderChangeMessage;
    return this;
  }

  /**
   * Get orderChangeMessage
   * @return orderChangeMessage
   */
  @javax.annotation.Nullable
  public OrderChangeMessage getOrderChangeMessage() {
    return orderChangeMessage;
  }

  public void setOrderChangeMessage(OrderChangeMessage orderChangeMessage) {
    this.orderChangeMessage = orderChangeMessage;
  }


  public AllResponseTypesExample status(StatusMessage status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusMessage getStatus() {
    return status;
  }

  public void setStatus(StatusMessage status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllResponseTypesExample allResponseTypesExample = (AllResponseTypesExample) o;
    return Objects.equals(this.connection, allResponseTypesExample.connection) &&
        Objects.equals(this.marketChangeMessage, allResponseTypesExample.marketChangeMessage) &&
        Objects.equals(this.opTypes, allResponseTypesExample.opTypes) &&
        Objects.equals(this.orderChangeMessage, allResponseTypesExample.orderChangeMessage) &&
        Objects.equals(this.status, allResponseTypesExample.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connection, marketChangeMessage, opTypes, orderChangeMessage, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllResponseTypesExample {\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    marketChangeMessage: ").append(toIndentedString(marketChangeMessage)).append("\n");
    sb.append("    opTypes: ").append(toIndentedString(opTypes)).append("\n");
    sb.append("    orderChangeMessage: ").append(toIndentedString(orderChangeMessage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection");
    openapiFields.add("marketChangeMessage");
    openapiFields.add("opTypes");
    openapiFields.add("orderChangeMessage");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllResponseTypesExample
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllResponseTypesExample.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllResponseTypesExample is not found in the empty JSON string", AllResponseTypesExample.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllResponseTypesExample.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllResponseTypesExample` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connection`
      if (jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) {
        ConnectionMessage.validateJsonElement(jsonObj.get("connection"));
      }
      // validate the optional field `marketChangeMessage`
      if (jsonObj.get("marketChangeMessage") != null && !jsonObj.get("marketChangeMessage").isJsonNull()) {
        MarketChangeMessage.validateJsonElement(jsonObj.get("marketChangeMessage"));
      }
      if ((jsonObj.get("opTypes") != null && !jsonObj.get("opTypes").isJsonNull()) && !jsonObj.get("opTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opTypes").toString()));
      }
      // validate the optional field `opTypes`
      if (jsonObj.get("opTypes") != null && !jsonObj.get("opTypes").isJsonNull()) {
        OpTypesEnum.validateJsonElement(jsonObj.get("opTypes"));
      }
      // validate the optional field `orderChangeMessage`
      if (jsonObj.get("orderChangeMessage") != null && !jsonObj.get("orderChangeMessage").isJsonNull()) {
        OrderChangeMessage.validateJsonElement(jsonObj.get("orderChangeMessage"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusMessage.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllResponseTypesExample.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllResponseTypesExample' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllResponseTypesExample> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllResponseTypesExample.class));

       return (TypeAdapter<T>) new TypeAdapter<AllResponseTypesExample>() {
           @Override
           public void write(JsonWriter out, AllResponseTypesExample value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllResponseTypesExample read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllResponseTypesExample given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllResponseTypesExample
   * @throws IOException if the JSON string is invalid with respect to AllResponseTypesExample
   */
  public static AllResponseTypesExample fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllResponseTypesExample.class);
  }

  /**
   * Convert an instance of AllResponseTypesExample to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

