/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.StrategyMatchChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderRunnerChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderRunnerChange {
  public static final String SERIALIZED_NAME_FULL_IMAGE = "fullImage";
  @SerializedName(SERIALIZED_NAME_FULL_IMAGE)
  private Boolean fullImage;

  public static final String SERIALIZED_NAME_HC = "hc";
  @SerializedName(SERIALIZED_NAME_HC)
  private Double hc;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MB = "mb";
  @SerializedName(SERIALIZED_NAME_MB)
  private List<List<Double>> mb = new ArrayList<>();

  public static final String SERIALIZED_NAME_ML = "ml";
  @SerializedName(SERIALIZED_NAME_ML)
  private List<List<Double>> ml = new ArrayList<>();

  public static final String SERIALIZED_NAME_SMC = "smc";
  @SerializedName(SERIALIZED_NAME_SMC)
  private Map<String, StrategyMatchChange> smc = new HashMap<>();

  public static final String SERIALIZED_NAME_UO = "uo";
  @SerializedName(SERIALIZED_NAME_UO)
  private List<Order> uo = new ArrayList<>();

  public OrderRunnerChange() {
  }

  public OrderRunnerChange fullImage(Boolean fullImage) {
    this.fullImage = fullImage;
    return this;
  }

  /**
   * Get fullImage
   * @return fullImage
   */
  @javax.annotation.Nullable
  public Boolean getFullImage() {
    return fullImage;
  }

  public void setFullImage(Boolean fullImage) {
    this.fullImage = fullImage;
  }


  public OrderRunnerChange hc(Double hc) {
    this.hc = hc;
    return this;
  }

  /**
   * Handicap - the handicap of the runner (selection) (null if not applicable)
   * @return hc
   */
  @javax.annotation.Nullable
  public Double getHc() {
    return hc;
  }

  public void setHc(Double hc) {
    this.hc = hc;
  }


  public OrderRunnerChange id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Selection Id - the id of the runner (selection)
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public OrderRunnerChange mb(List<List<Double>> mb) {
    this.mb = mb;
    return this;
  }

  public OrderRunnerChange addMbItem(List<Double> mbItem) {
    if (this.mb == null) {
      this.mb = new ArrayList<>();
    }
    this.mb.add(mbItem);
    return this;
  }

  /**
   * Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)
   * @return mb
   */
  @javax.annotation.Nullable
  public List<List<Double>> getMb() {
    return mb;
  }

  public void setMb(List<List<Double>> mb) {
    this.mb = mb;
  }


  public OrderRunnerChange ml(List<List<Double>> ml) {
    this.ml = ml;
    return this;
  }

  public OrderRunnerChange addMlItem(List<Double> mlItem) {
    if (this.ml == null) {
      this.ml = new ArrayList<>();
    }
    this.ml.add(mlItem);
    return this;
  }

  /**
   * Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)
   * @return ml
   */
  @javax.annotation.Nullable
  public List<List<Double>> getMl() {
    return ml;
  }

  public void setMl(List<List<Double>> ml) {
    this.ml = ml;
  }


  public OrderRunnerChange smc(Map<String, StrategyMatchChange> smc) {
    this.smc = smc;
    return this;
  }

  public OrderRunnerChange putSmcItem(String key, StrategyMatchChange smcItem) {
    if (this.smc == null) {
      this.smc = new HashMap<>();
    }
    this.smc.put(key, smcItem);
    return this;
  }

  /**
   * Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference
   * @return smc
   */
  @javax.annotation.Nullable
  public Map<String, StrategyMatchChange> getSmc() {
    return smc;
  }

  public void setSmc(Map<String, StrategyMatchChange> smc) {
    this.smc = smc;
  }


  public OrderRunnerChange uo(List<Order> uo) {
    this.uo = uo;
    return this;
  }

  public OrderRunnerChange addUoItem(Order uoItem) {
    if (this.uo == null) {
      this.uo = new ArrayList<>();
    }
    this.uo.add(uoItem);
    return this;
  }

  /**
   * Unmatched Orders - orders on this runner (selection) that are not fully matched
   * @return uo
   */
  @javax.annotation.Nullable
  public List<Order> getUo() {
    return uo;
  }

  public void setUo(List<Order> uo) {
    this.uo = uo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderRunnerChange orderRunnerChange = (OrderRunnerChange) o;
    return Objects.equals(this.fullImage, orderRunnerChange.fullImage) &&
        Objects.equals(this.hc, orderRunnerChange.hc) &&
        Objects.equals(this.id, orderRunnerChange.id) &&
        Objects.equals(this.mb, orderRunnerChange.mb) &&
        Objects.equals(this.ml, orderRunnerChange.ml) &&
        Objects.equals(this.smc, orderRunnerChange.smc) &&
        Objects.equals(this.uo, orderRunnerChange.uo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullImage, hc, id, mb, ml, smc, uo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderRunnerChange {\n");
    sb.append("    fullImage: ").append(toIndentedString(fullImage)).append("\n");
    sb.append("    hc: ").append(toIndentedString(hc)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mb: ").append(toIndentedString(mb)).append("\n");
    sb.append("    ml: ").append(toIndentedString(ml)).append("\n");
    sb.append("    smc: ").append(toIndentedString(smc)).append("\n");
    sb.append("    uo: ").append(toIndentedString(uo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullImage");
    openapiFields.add("hc");
    openapiFields.add("id");
    openapiFields.add("mb");
    openapiFields.add("ml");
    openapiFields.add("smc");
    openapiFields.add("uo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderRunnerChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderRunnerChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderRunnerChange is not found in the empty JSON string", OrderRunnerChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderRunnerChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderRunnerChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("mb") != null && !jsonObj.get("mb").isJsonNull() && !jsonObj.get("mb").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mb` to be an array in the JSON string but got `%s`", jsonObj.get("mb").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ml") != null && !jsonObj.get("ml").isJsonNull() && !jsonObj.get("ml").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ml` to be an array in the JSON string but got `%s`", jsonObj.get("ml").toString()));
      }
      if (jsonObj.get("uo") != null && !jsonObj.get("uo").isJsonNull()) {
        JsonArray jsonArrayuo = jsonObj.getAsJsonArray("uo");
        if (jsonArrayuo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uo` to be an array in the JSON string but got `%s`", jsonObj.get("uo").toString()));
          }

          // validate the optional field `uo` (array)
          for (int i = 0; i < jsonArrayuo.size(); i++) {
            Order.validateJsonElement(jsonArrayuo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderRunnerChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderRunnerChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderRunnerChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderRunnerChange.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderRunnerChange>() {
           @Override
           public void write(JsonWriter out, OrderRunnerChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderRunnerChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderRunnerChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderRunnerChange
   * @throws IOException if the JSON string is invalid with respect to OrderRunnerChange
   */
  public static OrderRunnerChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderRunnerChange.class);
  }

  /**
   * Convert an instance of OrderRunnerChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

