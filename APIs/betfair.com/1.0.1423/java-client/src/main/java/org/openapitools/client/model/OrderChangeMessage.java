/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderMarketChange;
import org.openapitools.client.model.ResponseMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderChangeMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderChangeMessage extends ResponseMessage {
  public static final String SERIALIZED_NAME_CLK = "clk";
  @SerializedName(SERIALIZED_NAME_CLK)
  private String clk;

  public static final String SERIALIZED_NAME_CONFLATE_MS = "conflateMs";
  @SerializedName(SERIALIZED_NAME_CONFLATE_MS)
  private Long conflateMs;

  /**
   * Change Type - set to indicate the type of change - if null this is a delta)
   */
  @JsonAdapter(CtEnum.Adapter.class)
  public enum CtEnum {
    SUB_IMAGE("SUB_IMAGE"),
    
    RESUB_DELTA("RESUB_DELTA"),
    
    HEARTBEAT("HEARTBEAT");

    private String value;

    CtEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CtEnum fromValue(String value) {
      for (CtEnum b : CtEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CtEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CtEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CtEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CtEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CtEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CT = "ct";
  @SerializedName(SERIALIZED_NAME_CT)
  private CtEnum ct;

  public static final String SERIALIZED_NAME_HEARTBEAT_MS = "heartbeatMs";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_MS)
  private Long heartbeatMs;

  public static final String SERIALIZED_NAME_INITIAL_CLK = "initialClk";
  @SerializedName(SERIALIZED_NAME_INITIAL_CLK)
  private String initialClk;

  public static final String SERIALIZED_NAME_OC = "oc";
  @SerializedName(SERIALIZED_NAME_OC)
  private List<OrderMarketChange> oc = new ArrayList<>();

  public static final String SERIALIZED_NAME_PT = "pt";
  @SerializedName(SERIALIZED_NAME_PT)
  private Long pt;

  /**
   * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
   */
  @JsonAdapter(SegmentTypeEnum.Adapter.class)
  public enum SegmentTypeEnum {
    SEG_START("SEG_START"),
    
    SEG("SEG"),
    
    SEG_END("SEG_END");

    private String value;

    SegmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentTypeEnum fromValue(String value) {
      for (SegmentTypeEnum b : SegmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SegmentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT_TYPE = "segmentType";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TYPE)
  private SegmentTypeEnum segmentType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public OrderChangeMessage() {
    this.op = this.getClass().getSimpleName();
  }

  public OrderChangeMessage clk(String clk) {
    this.clk = clk;
    return this;
  }

  /**
   * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
   * @return clk
   */
  @javax.annotation.Nullable
  public String getClk() {
    return clk;
  }

  public void setClk(String clk) {
    this.clk = clk;
  }


  public OrderChangeMessage conflateMs(Long conflateMs) {
    this.conflateMs = conflateMs;
    return this;
  }

  /**
   * Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
   * @return conflateMs
   */
  @javax.annotation.Nullable
  public Long getConflateMs() {
    return conflateMs;
  }

  public void setConflateMs(Long conflateMs) {
    this.conflateMs = conflateMs;
  }


  public OrderChangeMessage ct(CtEnum ct) {
    this.ct = ct;
    return this;
  }

  /**
   * Change Type - set to indicate the type of change - if null this is a delta)
   * @return ct
   */
  @javax.annotation.Nullable
  public CtEnum getCt() {
    return ct;
  }

  public void setCt(CtEnum ct) {
    this.ct = ct;
  }


  public OrderChangeMessage heartbeatMs(Long heartbeatMs) {
    this.heartbeatMs = heartbeatMs;
    return this;
  }

  /**
   * Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
   * @return heartbeatMs
   */
  @javax.annotation.Nullable
  public Long getHeartbeatMs() {
    return heartbeatMs;
  }

  public void setHeartbeatMs(Long heartbeatMs) {
    this.heartbeatMs = heartbeatMs;
  }


  public OrderChangeMessage initialClk(String initialClk) {
    this.initialClk = initialClk;
    return this;
  }

  /**
   * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
   * @return initialClk
   */
  @javax.annotation.Nullable
  public String getInitialClk() {
    return initialClk;
  }

  public void setInitialClk(String initialClk) {
    this.initialClk = initialClk;
  }


  public OrderChangeMessage oc(List<OrderMarketChange> oc) {
    this.oc = oc;
    return this;
  }

  public OrderChangeMessage addOcItem(OrderMarketChange ocItem) {
    if (this.oc == null) {
      this.oc = new ArrayList<>();
    }
    this.oc.add(ocItem);
    return this;
  }

  /**
   * OrderMarketChanges - the modifications to account&#39;s orders (will be null on a heartbeat
   * @return oc
   */
  @javax.annotation.Nullable
  public List<OrderMarketChange> getOc() {
    return oc;
  }

  public void setOc(List<OrderMarketChange> oc) {
    this.oc = oc;
  }


  public OrderChangeMessage pt(Long pt) {
    this.pt = pt;
    return this;
  }

  /**
   * Publish Time (in millis since epoch) that the changes were generated
   * @return pt
   */
  @javax.annotation.Nullable
  public Long getPt() {
    return pt;
  }

  public void setPt(Long pt) {
    this.pt = pt;
  }


  public OrderChangeMessage segmentType(SegmentTypeEnum segmentType) {
    this.segmentType = segmentType;
    return this;
  }

  /**
   * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
   * @return segmentType
   */
  @javax.annotation.Nullable
  public SegmentTypeEnum getSegmentType() {
    return segmentType;
  }

  public void setSegmentType(SegmentTypeEnum segmentType) {
    this.segmentType = segmentType;
  }


  public OrderChangeMessage status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderChangeMessage orderChangeMessage = (OrderChangeMessage) o;
    return Objects.equals(this.clk, orderChangeMessage.clk) &&
        Objects.equals(this.conflateMs, orderChangeMessage.conflateMs) &&
        Objects.equals(this.ct, orderChangeMessage.ct) &&
        Objects.equals(this.heartbeatMs, orderChangeMessage.heartbeatMs) &&
        Objects.equals(this.initialClk, orderChangeMessage.initialClk) &&
        Objects.equals(this.oc, orderChangeMessage.oc) &&
        Objects.equals(this.pt, orderChangeMessage.pt) &&
        Objects.equals(this.segmentType, orderChangeMessage.segmentType) &&
        Objects.equals(this.status, orderChangeMessage.status) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clk, conflateMs, ct, heartbeatMs, initialClk, oc, pt, segmentType, status, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderChangeMessage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    clk: ").append(toIndentedString(clk)).append("\n");
    sb.append("    conflateMs: ").append(toIndentedString(conflateMs)).append("\n");
    sb.append("    ct: ").append(toIndentedString(ct)).append("\n");
    sb.append("    heartbeatMs: ").append(toIndentedString(heartbeatMs)).append("\n");
    sb.append("    initialClk: ").append(toIndentedString(initialClk)).append("\n");
    sb.append("    oc: ").append(toIndentedString(oc)).append("\n");
    sb.append("    pt: ").append(toIndentedString(pt)).append("\n");
    sb.append("    segmentType: ").append(toIndentedString(segmentType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("op");
    openapiFields.add("clk");
    openapiFields.add("conflateMs");
    openapiFields.add("ct");
    openapiFields.add("heartbeatMs");
    openapiFields.add("initialClk");
    openapiFields.add("oc");
    openapiFields.add("pt");
    openapiFields.add("segmentType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderChangeMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderChangeMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderChangeMessage is not found in the empty JSON string", OrderChangeMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderChangeMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderChangeMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderChangeMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderChangeMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderChangeMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderChangeMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderChangeMessage>() {
           @Override
           public void write(JsonWriter out, OrderChangeMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderChangeMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderChangeMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderChangeMessage
   * @throws IOException if the JSON string is invalid with respect to OrderChangeMessage
   */
  public static OrderChangeMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderChangeMessage.class);
  }

  /**
   * Convert an instance of OrderChangeMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

