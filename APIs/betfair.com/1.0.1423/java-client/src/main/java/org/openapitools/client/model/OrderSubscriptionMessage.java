/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderFilter;
import org.openapitools.client.model.RequestMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderSubscriptionMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:11.866632-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderSubscriptionMessage extends RequestMessage {
  public static final String SERIALIZED_NAME_CLK = "clk";
  @SerializedName(SERIALIZED_NAME_CLK)
  private String clk;

  public static final String SERIALIZED_NAME_CONFLATE_MS = "conflateMs";
  @SerializedName(SERIALIZED_NAME_CONFLATE_MS)
  private Long conflateMs;

  public static final String SERIALIZED_NAME_HEARTBEAT_MS = "heartbeatMs";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_MS)
  private Long heartbeatMs;

  public static final String SERIALIZED_NAME_INITIAL_CLK = "initialClk";
  @SerializedName(SERIALIZED_NAME_INITIAL_CLK)
  private String initialClk;

  public static final String SERIALIZED_NAME_ORDER_FILTER = "orderFilter";
  @SerializedName(SERIALIZED_NAME_ORDER_FILTER)
  private OrderFilter orderFilter;

  public static final String SERIALIZED_NAME_SEGMENTATION_ENABLED = "segmentationEnabled";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_ENABLED)
  private Boolean segmentationEnabled;

  public OrderSubscriptionMessage() {
    this.op = this.getClass().getSimpleName();
  }

  public OrderSubscriptionMessage clk(String clk) {
    this.clk = clk;
    return this;
  }

  /**
   * Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription
   * @return clk
   */
  @javax.annotation.Nullable
  public String getClk() {
    return clk;
  }

  public void setClk(String clk) {
    this.clk = clk;
  }


  public OrderSubscriptionMessage conflateMs(Long conflateMs) {
    this.conflateMs = conflateMs;
    return this;
  }

  /**
   * Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)
   * @return conflateMs
   */
  @javax.annotation.Nullable
  public Long getConflateMs() {
    return conflateMs;
  }

  public void setConflateMs(Long conflateMs) {
    this.conflateMs = conflateMs;
  }


  public OrderSubscriptionMessage heartbeatMs(Long heartbeatMs) {
    this.heartbeatMs = heartbeatMs;
    return this;
  }

  /**
   * Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)
   * @return heartbeatMs
   */
  @javax.annotation.Nullable
  public Long getHeartbeatMs() {
    return heartbeatMs;
  }

  public void setHeartbeatMs(Long heartbeatMs) {
    this.heartbeatMs = heartbeatMs;
  }


  public OrderSubscriptionMessage initialClk(String initialClk) {
    this.initialClk = initialClk;
    return this;
  }

  /**
   * Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription
   * @return initialClk
   */
  @javax.annotation.Nullable
  public String getInitialClk() {
    return initialClk;
  }

  public void setInitialClk(String initialClk) {
    this.initialClk = initialClk;
  }


  public OrderSubscriptionMessage orderFilter(OrderFilter orderFilter) {
    this.orderFilter = orderFilter;
    return this;
  }

  /**
   * Get orderFilter
   * @return orderFilter
   */
  @javax.annotation.Nullable
  public OrderFilter getOrderFilter() {
    return orderFilter;
  }

  public void setOrderFilter(OrderFilter orderFilter) {
    this.orderFilter = orderFilter;
  }


  public OrderSubscriptionMessage segmentationEnabled(Boolean segmentationEnabled) {
    this.segmentationEnabled = segmentationEnabled;
    return this;
  }

  /**
   * Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block
   * @return segmentationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSegmentationEnabled() {
    return segmentationEnabled;
  }

  public void setSegmentationEnabled(Boolean segmentationEnabled) {
    this.segmentationEnabled = segmentationEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderSubscriptionMessage orderSubscriptionMessage = (OrderSubscriptionMessage) o;
    return Objects.equals(this.clk, orderSubscriptionMessage.clk) &&
        Objects.equals(this.conflateMs, orderSubscriptionMessage.conflateMs) &&
        Objects.equals(this.heartbeatMs, orderSubscriptionMessage.heartbeatMs) &&
        Objects.equals(this.initialClk, orderSubscriptionMessage.initialClk) &&
        Objects.equals(this.orderFilter, orderSubscriptionMessage.orderFilter) &&
        Objects.equals(this.segmentationEnabled, orderSubscriptionMessage.segmentationEnabled) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clk, conflateMs, heartbeatMs, initialClk, orderFilter, segmentationEnabled, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderSubscriptionMessage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    clk: ").append(toIndentedString(clk)).append("\n");
    sb.append("    conflateMs: ").append(toIndentedString(conflateMs)).append("\n");
    sb.append("    heartbeatMs: ").append(toIndentedString(heartbeatMs)).append("\n");
    sb.append("    initialClk: ").append(toIndentedString(initialClk)).append("\n");
    sb.append("    orderFilter: ").append(toIndentedString(orderFilter)).append("\n");
    sb.append("    segmentationEnabled: ").append(toIndentedString(segmentationEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("op");
    openapiFields.add("clk");
    openapiFields.add("conflateMs");
    openapiFields.add("heartbeatMs");
    openapiFields.add("initialClk");
    openapiFields.add("orderFilter");
    openapiFields.add("segmentationEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderSubscriptionMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderSubscriptionMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderSubscriptionMessage is not found in the empty JSON string", OrderSubscriptionMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderSubscriptionMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderSubscriptionMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderSubscriptionMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderSubscriptionMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderSubscriptionMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderSubscriptionMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderSubscriptionMessage>() {
           @Override
           public void write(JsonWriter out, OrderSubscriptionMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderSubscriptionMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderSubscriptionMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderSubscriptionMessage
   * @throws IOException if the JSON string is invalid with respect to OrderSubscriptionMessage
   */
  public static OrderSubscriptionMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderSubscriptionMessage.class);
  }

  /**
   * Convert an instance of OrderSubscriptionMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

