/*
 * Betfair: Exchange Streaming API
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * The version of the OpenAPI document: 1.0.1423
 * Contact: bdp@betfair.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyLineDefinition;
import org.openapitools.client.model.PriceLadderDefinition;
import org.openapitools.client.model.RunnerDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MarketDefinition
 */
public class MarketDefinitionTest {
    private final MarketDefinition model = new MarketDefinition();

    /**
     * Model tests for MarketDefinition
     */
    @Test
    public void testMarketDefinition() {
        // TODO: test MarketDefinition
    }

    /**
     * Test the property 'betDelay'
     */
    @Test
    public void betDelayTest() {
        // TODO: test betDelay
    }

    /**
     * Test the property 'bettingType'
     */
    @Test
    public void bettingTypeTest() {
        // TODO: test bettingType
    }

    /**
     * Test the property 'bspMarket'
     */
    @Test
    public void bspMarketTest() {
        // TODO: test bspMarket
    }

    /**
     * Test the property 'bspReconciled'
     */
    @Test
    public void bspReconciledTest() {
        // TODO: test bspReconciled
    }

    /**
     * Test the property 'complete'
     */
    @Test
    public void completeTest() {
        // TODO: test complete
    }

    /**
     * Test the property 'countryCode'
     */
    @Test
    public void countryCodeTest() {
        // TODO: test countryCode
    }

    /**
     * Test the property 'crossMatching'
     */
    @Test
    public void crossMatchingTest() {
        // TODO: test crossMatching
    }

    /**
     * Test the property 'discountAllowed'
     */
    @Test
    public void discountAllowedTest() {
        // TODO: test discountAllowed
    }

    /**
     * Test the property 'eachWayDivisor'
     */
    @Test
    public void eachWayDivisorTest() {
        // TODO: test eachWayDivisor
    }

    /**
     * Test the property 'eventId'
     */
    @Test
    public void eventIdTest() {
        // TODO: test eventId
    }

    /**
     * Test the property 'eventTypeId'
     */
    @Test
    public void eventTypeIdTest() {
        // TODO: test eventTypeId
    }

    /**
     * Test the property 'inPlay'
     */
    @Test
    public void inPlayTest() {
        // TODO: test inPlay
    }

    /**
     * Test the property 'keyLineDefinition'
     */
    @Test
    public void keyLineDefinitionTest() {
        // TODO: test keyLineDefinition
    }

    /**
     * Test the property 'lineInterval'
     */
    @Test
    public void lineIntervalTest() {
        // TODO: test lineInterval
    }

    /**
     * Test the property 'lineMaxUnit'
     */
    @Test
    public void lineMaxUnitTest() {
        // TODO: test lineMaxUnit
    }

    /**
     * Test the property 'lineMinUnit'
     */
    @Test
    public void lineMinUnitTest() {
        // TODO: test lineMinUnit
    }

    /**
     * Test the property 'marketBaseRate'
     */
    @Test
    public void marketBaseRateTest() {
        // TODO: test marketBaseRate
    }

    /**
     * Test the property 'marketTime'
     */
    @Test
    public void marketTimeTest() {
        // TODO: test marketTime
    }

    /**
     * Test the property 'marketType'
     */
    @Test
    public void marketTypeTest() {
        // TODO: test marketType
    }

    /**
     * Test the property 'numberOfActiveRunners'
     */
    @Test
    public void numberOfActiveRunnersTest() {
        // TODO: test numberOfActiveRunners
    }

    /**
     * Test the property 'numberOfWinners'
     */
    @Test
    public void numberOfWinnersTest() {
        // TODO: test numberOfWinners
    }

    /**
     * Test the property 'openDate'
     */
    @Test
    public void openDateTest() {
        // TODO: test openDate
    }

    /**
     * Test the property 'persistenceEnabled'
     */
    @Test
    public void persistenceEnabledTest() {
        // TODO: test persistenceEnabled
    }

    /**
     * Test the property 'priceLadderDefinition'
     */
    @Test
    public void priceLadderDefinitionTest() {
        // TODO: test priceLadderDefinition
    }

    /**
     * Test the property 'raceType'
     */
    @Test
    public void raceTypeTest() {
        // TODO: test raceType
    }

    /**
     * Test the property 'regulators'
     */
    @Test
    public void regulatorsTest() {
        // TODO: test regulators
    }

    /**
     * Test the property 'runners'
     */
    @Test
    public void runnersTest() {
        // TODO: test runners
    }

    /**
     * Test the property 'runnersVoidable'
     */
    @Test
    public void runnersVoidableTest() {
        // TODO: test runnersVoidable
    }

    /**
     * Test the property 'settledTime'
     */
    @Test
    public void settledTimeTest() {
        // TODO: test settledTime
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'suspendTime'
     */
    @Test
    public void suspendTimeTest() {
        // TODO: test suspendTime
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    public void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'turnInPlayEnabled'
     */
    @Test
    public void turnInPlayEnabledTest() {
        // TODO: test turnInPlayEnabled
    }

    /**
     * Test the property 'venue'
     */
    @Test
    public void venueTest() {
        // TODO: test venue
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

}
