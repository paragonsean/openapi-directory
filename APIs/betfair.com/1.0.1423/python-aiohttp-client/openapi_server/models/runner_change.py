# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunnerChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, atb: List[List[float]]=None, atl: List[List[float]]=None, batb: List[List[float]]=None, batl: List[List[float]]=None, bdatb: List[List[float]]=None, bdatl: List[List[float]]=None, hc: float=None, id: int=None, ltp: float=None, spb: List[List[float]]=None, spf: float=None, spl: List[List[float]]=None, spn: float=None, trd: List[List[float]]=None, tv: float=None):
        """RunnerChange - a model defined in OpenAPI

        :param atb: The atb of this RunnerChange.
        :param atl: The atl of this RunnerChange.
        :param batb: The batb of this RunnerChange.
        :param batl: The batl of this RunnerChange.
        :param bdatb: The bdatb of this RunnerChange.
        :param bdatl: The bdatl of this RunnerChange.
        :param hc: The hc of this RunnerChange.
        :param id: The id of this RunnerChange.
        :param ltp: The ltp of this RunnerChange.
        :param spb: The spb of this RunnerChange.
        :param spf: The spf of this RunnerChange.
        :param spl: The spl of this RunnerChange.
        :param spn: The spn of this RunnerChange.
        :param trd: The trd of this RunnerChange.
        :param tv: The tv of this RunnerChange.
        """
        self.openapi_types = {
            'atb': List[List[float]],
            'atl': List[List[float]],
            'batb': List[List[float]],
            'batl': List[List[float]],
            'bdatb': List[List[float]],
            'bdatl': List[List[float]],
            'hc': float,
            'id': int,
            'ltp': float,
            'spb': List[List[float]],
            'spf': float,
            'spl': List[List[float]],
            'spn': float,
            'trd': List[List[float]],
            'tv': float
        }

        self.attribute_map = {
            'atb': 'atb',
            'atl': 'atl',
            'batb': 'batb',
            'batl': 'batl',
            'bdatb': 'bdatb',
            'bdatl': 'bdatl',
            'hc': 'hc',
            'id': 'id',
            'ltp': 'ltp',
            'spb': 'spb',
            'spf': 'spf',
            'spl': 'spl',
            'spn': 'spn',
            'trd': 'trd',
            'tv': 'tv'
        }

        self._atb = atb
        self._atl = atl
        self._batb = batb
        self._batl = batl
        self._bdatb = bdatb
        self._bdatl = bdatl
        self._hc = hc
        self._id = id
        self._ltp = ltp
        self._spb = spb
        self._spf = spf
        self._spl = spl
        self._spn = spn
        self._trd = trd
        self._tv = tv

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunnerChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunnerChange of this RunnerChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def atb(self):
        """Gets the atb of this RunnerChange.

        Available To Back - PriceVol tuple delta of price changes (0 vol is remove)

        :return: The atb of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._atb

    @atb.setter
    def atb(self, atb):
        """Sets the atb of this RunnerChange.

        Available To Back - PriceVol tuple delta of price changes (0 vol is remove)

        :param atb: The atb of this RunnerChange.
        :type atb: List[List[float]]
        """

        self._atb = atb

    @property
    def atl(self):
        """Gets the atl of this RunnerChange.

        Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)

        :return: The atl of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._atl

    @atl.setter
    def atl(self, atl):
        """Sets the atl of this RunnerChange.

        Available To Lay - PriceVol tuple delta of price changes (0 vol is remove)

        :param atl: The atl of this RunnerChange.
        :type atl: List[List[float]]
        """

        self._atl = atl

    @property
    def batb(self):
        """Gets the batb of this RunnerChange.

        Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :return: The batb of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._batb

    @batb.setter
    def batb(self, batb):
        """Sets the batb of this RunnerChange.

        Best Available To Back - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :param batb: The batb of this RunnerChange.
        :type batb: List[List[float]]
        """

        self._batb = batb

    @property
    def batl(self):
        """Gets the batl of this RunnerChange.

        Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :return: The batl of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._batl

    @batl.setter
    def batl(self, batl):
        """Sets the batl of this RunnerChange.

        Best Available To Lay - LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :param batl: The batl of this RunnerChange.
        :type batl: List[List[float]]
        """

        self._batl = batl

    @property
    def bdatb(self):
        """Gets the bdatb of this RunnerChange.

        Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :return: The bdatb of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._bdatb

    @bdatb.setter
    def bdatb(self, bdatb):
        """Sets the bdatb of this RunnerChange.

        Best Display Available To Back (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :param bdatb: The bdatb of this RunnerChange.
        :type bdatb: List[List[float]]
        """

        self._bdatb = bdatb

    @property
    def bdatl(self):
        """Gets the bdatl of this RunnerChange.

        Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :return: The bdatl of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._bdatl

    @bdatl.setter
    def bdatl(self, bdatl):
        """Sets the bdatl of this RunnerChange.

        Best Display Available To Lay (includes virtual prices)- LevelPriceVol triple delta of price changes, keyed by level (0 vol is remove)

        :param bdatl: The bdatl of this RunnerChange.
        :type bdatl: List[List[float]]
        """

        self._bdatl = bdatl

    @property
    def hc(self):
        """Gets the hc of this RunnerChange.

        Handicap - the handicap of the runner (selection) (null if not applicable)

        :return: The hc of this RunnerChange.
        :rtype: float
        """
        return self._hc

    @hc.setter
    def hc(self, hc):
        """Sets the hc of this RunnerChange.

        Handicap - the handicap of the runner (selection) (null if not applicable)

        :param hc: The hc of this RunnerChange.
        :type hc: float
        """

        self._hc = hc

    @property
    def id(self):
        """Gets the id of this RunnerChange.

        Selection Id - the id of the runner (selection)

        :return: The id of this RunnerChange.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunnerChange.

        Selection Id - the id of the runner (selection)

        :param id: The id of this RunnerChange.
        :type id: int
        """

        self._id = id

    @property
    def ltp(self):
        """Gets the ltp of this RunnerChange.

        Last Traded Price - The last traded price (or null if un-changed)

        :return: The ltp of this RunnerChange.
        :rtype: float
        """
        return self._ltp

    @ltp.setter
    def ltp(self, ltp):
        """Sets the ltp of this RunnerChange.

        Last Traded Price - The last traded price (or null if un-changed)

        :param ltp: The ltp of this RunnerChange.
        :type ltp: float
        """

        self._ltp = ltp

    @property
    def spb(self):
        """Gets the spb of this RunnerChange.

        Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)

        :return: The spb of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._spb

    @spb.setter
    def spb(self, spb):
        """Sets the spb of this RunnerChange.

        Starting Price Back - PriceVol tuple delta of price changes (0 vol is remove)

        :param spb: The spb of this RunnerChange.
        :type spb: List[List[float]]
        """

        self._spb = spb

    @property
    def spf(self):
        """Gets the spf of this RunnerChange.

        Starting Price Far - The far starting price (or null if un-changed)

        :return: The spf of this RunnerChange.
        :rtype: float
        """
        return self._spf

    @spf.setter
    def spf(self, spf):
        """Sets the spf of this RunnerChange.

        Starting Price Far - The far starting price (or null if un-changed)

        :param spf: The spf of this RunnerChange.
        :type spf: float
        """

        self._spf = spf

    @property
    def spl(self):
        """Gets the spl of this RunnerChange.

        Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)

        :return: The spl of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._spl

    @spl.setter
    def spl(self, spl):
        """Sets the spl of this RunnerChange.

        Starting Price Lay - PriceVol tuple delta of price changes (0 vol is remove)

        :param spl: The spl of this RunnerChange.
        :type spl: List[List[float]]
        """

        self._spl = spl

    @property
    def spn(self):
        """Gets the spn of this RunnerChange.

        Starting Price Near - The far starting price (or null if un-changed)

        :return: The spn of this RunnerChange.
        :rtype: float
        """
        return self._spn

    @spn.setter
    def spn(self, spn):
        """Sets the spn of this RunnerChange.

        Starting Price Near - The far starting price (or null if un-changed)

        :param spn: The spn of this RunnerChange.
        :type spn: float
        """

        self._spn = spn

    @property
    def trd(self):
        """Gets the trd of this RunnerChange.

        Traded - PriceVol tuple delta of price changes (0 vol is remove)

        :return: The trd of this RunnerChange.
        :rtype: List[List[float]]
        """
        return self._trd

    @trd.setter
    def trd(self, trd):
        """Sets the trd of this RunnerChange.

        Traded - PriceVol tuple delta of price changes (0 vol is remove)

        :param trd: The trd of this RunnerChange.
        :type trd: List[List[float]]
        """

        self._trd = trd

    @property
    def tv(self):
        """Gets the tv of this RunnerChange.

        The total amount matched. This value is truncated at 2dp.

        :return: The tv of this RunnerChange.
        :rtype: float
        """
        return self._tv

    @tv.setter
    def tv(self, tv):
        """Sets the tv of this RunnerChange.

        The total amount matched. This value is truncated at 2dp.

        :param tv: The tv of this RunnerChange.
        :type tv: float
        """

        self._tv = tv
