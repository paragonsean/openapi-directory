# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.market_data_filter import MarketDataFilter
from openapi_server.models.market_filter import MarketFilter
from openapi_server.models.request_message import RequestMessage
from openapi_server import util


class MarketSubscriptionMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, op: str=None, clk: str=None, conflate_ms: int=None, heartbeat_ms: int=None, initial_clk: str=None, market_data_filter: MarketDataFilter=None, market_filter: MarketFilter=None, segmentation_enabled: bool=None):
        """MarketSubscriptionMessage - a model defined in OpenAPI

        :param id: The id of this MarketSubscriptionMessage.
        :param op: The op of this MarketSubscriptionMessage.
        :param clk: The clk of this MarketSubscriptionMessage.
        :param conflate_ms: The conflate_ms of this MarketSubscriptionMessage.
        :param heartbeat_ms: The heartbeat_ms of this MarketSubscriptionMessage.
        :param initial_clk: The initial_clk of this MarketSubscriptionMessage.
        :param market_data_filter: The market_data_filter of this MarketSubscriptionMessage.
        :param market_filter: The market_filter of this MarketSubscriptionMessage.
        :param segmentation_enabled: The segmentation_enabled of this MarketSubscriptionMessage.
        """
        self.openapi_types = {
            'id': int,
            'op': str,
            'clk': str,
            'conflate_ms': int,
            'heartbeat_ms': int,
            'initial_clk': str,
            'market_data_filter': MarketDataFilter,
            'market_filter': MarketFilter,
            'segmentation_enabled': bool
        }

        self.attribute_map = {
            'id': 'id',
            'op': 'op',
            'clk': 'clk',
            'conflate_ms': 'conflateMs',
            'heartbeat_ms': 'heartbeatMs',
            'initial_clk': 'initialClk',
            'market_data_filter': 'marketDataFilter',
            'market_filter': 'marketFilter',
            'segmentation_enabled': 'segmentationEnabled'
        }

        self._id = id
        self._op = op
        self._clk = clk
        self._conflate_ms = conflate_ms
        self._heartbeat_ms = heartbeat_ms
        self._initial_clk = initial_clk
        self._market_data_filter = market_data_filter
        self._market_filter = market_filter
        self._segmentation_enabled = segmentation_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketSubscriptionMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketSubscriptionMessage of this MarketSubscriptionMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MarketSubscriptionMessage.

        Client generated unique id to link request with response (like json rpc)

        :return: The id of this MarketSubscriptionMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketSubscriptionMessage.

        Client generated unique id to link request with response (like json rpc)

        :param id: The id of this MarketSubscriptionMessage.
        :type id: int
        """

        self._id = id

    @property
    def op(self):
        """Gets the op of this MarketSubscriptionMessage.

        The operation type

        :return: The op of this MarketSubscriptionMessage.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this MarketSubscriptionMessage.

        The operation type

        :param op: The op of this MarketSubscriptionMessage.
        :type op: str
        """

        self._op = op

    @property
    def clk(self):
        """Gets the clk of this MarketSubscriptionMessage.

        Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription

        :return: The clk of this MarketSubscriptionMessage.
        :rtype: str
        """
        return self._clk

    @clk.setter
    def clk(self, clk):
        """Sets the clk of this MarketSubscriptionMessage.

        Token value delta (received in MarketChangeMessage) that should be passed to resume a subscription

        :param clk: The clk of this MarketSubscriptionMessage.
        :type clk: str
        """

        self._clk = clk

    @property
    def conflate_ms(self):
        """Gets the conflate_ms of this MarketSubscriptionMessage.

        Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)

        :return: The conflate_ms of this MarketSubscriptionMessage.
        :rtype: int
        """
        return self._conflate_ms

    @conflate_ms.setter
    def conflate_ms(self, conflate_ms):
        """Sets the conflate_ms of this MarketSubscriptionMessage.

        Conflate Milliseconds - the conflation rate (looped back on initial image after validation: bounds are 0 to 120000)

        :param conflate_ms: The conflate_ms of this MarketSubscriptionMessage.
        :type conflate_ms: int
        """

        self._conflate_ms = conflate_ms

    @property
    def heartbeat_ms(self):
        """Gets the heartbeat_ms of this MarketSubscriptionMessage.

        Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)

        :return: The heartbeat_ms of this MarketSubscriptionMessage.
        :rtype: int
        """
        return self._heartbeat_ms

    @heartbeat_ms.setter
    def heartbeat_ms(self, heartbeat_ms):
        """Sets the heartbeat_ms of this MarketSubscriptionMessage.

        Heartbeat Milliseconds - the heartbeat rate (looped back on initial image after validation: bounds are 500 to 5000)

        :param heartbeat_ms: The heartbeat_ms of this MarketSubscriptionMessage.
        :type heartbeat_ms: int
        """

        self._heartbeat_ms = heartbeat_ms

    @property
    def initial_clk(self):
        """Gets the initial_clk of this MarketSubscriptionMessage.

        Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription

        :return: The initial_clk of this MarketSubscriptionMessage.
        :rtype: str
        """
        return self._initial_clk

    @initial_clk.setter
    def initial_clk(self, initial_clk):
        """Sets the initial_clk of this MarketSubscriptionMessage.

        Token value (received in initial MarketChangeMessage) that should be passed to resume a subscription

        :param initial_clk: The initial_clk of this MarketSubscriptionMessage.
        :type initial_clk: str
        """

        self._initial_clk = initial_clk

    @property
    def market_data_filter(self):
        """Gets the market_data_filter of this MarketSubscriptionMessage.


        :return: The market_data_filter of this MarketSubscriptionMessage.
        :rtype: MarketDataFilter
        """
        return self._market_data_filter

    @market_data_filter.setter
    def market_data_filter(self, market_data_filter):
        """Sets the market_data_filter of this MarketSubscriptionMessage.


        :param market_data_filter: The market_data_filter of this MarketSubscriptionMessage.
        :type market_data_filter: MarketDataFilter
        """

        self._market_data_filter = market_data_filter

    @property
    def market_filter(self):
        """Gets the market_filter of this MarketSubscriptionMessage.


        :return: The market_filter of this MarketSubscriptionMessage.
        :rtype: MarketFilter
        """
        return self._market_filter

    @market_filter.setter
    def market_filter(self, market_filter):
        """Sets the market_filter of this MarketSubscriptionMessage.


        :param market_filter: The market_filter of this MarketSubscriptionMessage.
        :type market_filter: MarketFilter
        """

        self._market_filter = market_filter

    @property
    def segmentation_enabled(self):
        """Gets the segmentation_enabled of this MarketSubscriptionMessage.

        Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block

        :return: The segmentation_enabled of this MarketSubscriptionMessage.
        :rtype: bool
        """
        return self._segmentation_enabled

    @segmentation_enabled.setter
    def segmentation_enabled(self, segmentation_enabled):
        """Sets the segmentation_enabled of this MarketSubscriptionMessage.

        Segmentation Enabled - allow the server to send large sets of data in segments, instead of a single block

        :param segmentation_enabled: The segmentation_enabled of this MarketSubscriptionMessage.
        :type segmentation_enabled: bool
        """

        self._segmentation_enabled = segmentation_enabled
