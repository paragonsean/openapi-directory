# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.market_change import MarketChange
from openapi_server.models.response_message import ResponseMessage
from openapi_server import util


class MarketChangeMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, op: str=None, clk: str=None, conflate_ms: int=None, ct: str=None, heartbeat_ms: int=None, initial_clk: str=None, mc: List[MarketChange]=None, pt: int=None, segment_type: str=None, status: int=None):
        """MarketChangeMessage - a model defined in OpenAPI

        :param id: The id of this MarketChangeMessage.
        :param op: The op of this MarketChangeMessage.
        :param clk: The clk of this MarketChangeMessage.
        :param conflate_ms: The conflate_ms of this MarketChangeMessage.
        :param ct: The ct of this MarketChangeMessage.
        :param heartbeat_ms: The heartbeat_ms of this MarketChangeMessage.
        :param initial_clk: The initial_clk of this MarketChangeMessage.
        :param mc: The mc of this MarketChangeMessage.
        :param pt: The pt of this MarketChangeMessage.
        :param segment_type: The segment_type of this MarketChangeMessage.
        :param status: The status of this MarketChangeMessage.
        """
        self.openapi_types = {
            'id': int,
            'op': str,
            'clk': str,
            'conflate_ms': int,
            'ct': str,
            'heartbeat_ms': int,
            'initial_clk': str,
            'mc': List[MarketChange],
            'pt': int,
            'segment_type': str,
            'status': int
        }

        self.attribute_map = {
            'id': 'id',
            'op': 'op',
            'clk': 'clk',
            'conflate_ms': 'conflateMs',
            'ct': 'ct',
            'heartbeat_ms': 'heartbeatMs',
            'initial_clk': 'initialClk',
            'mc': 'mc',
            'pt': 'pt',
            'segment_type': 'segmentType',
            'status': 'status'
        }

        self._id = id
        self._op = op
        self._clk = clk
        self._conflate_ms = conflate_ms
        self._ct = ct
        self._heartbeat_ms = heartbeat_ms
        self._initial_clk = initial_clk
        self._mc = mc
        self._pt = pt
        self._segment_type = segment_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketChangeMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketChangeMessage of this MarketChangeMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MarketChangeMessage.

        Client generated unique id to link request with response (like json rpc)

        :return: The id of this MarketChangeMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketChangeMessage.

        Client generated unique id to link request with response (like json rpc)

        :param id: The id of this MarketChangeMessage.
        :type id: int
        """

        self._id = id

    @property
    def op(self):
        """Gets the op of this MarketChangeMessage.

        The operation type

        :return: The op of this MarketChangeMessage.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this MarketChangeMessage.

        The operation type

        :param op: The op of this MarketChangeMessage.
        :type op: str
        """

        self._op = op

    @property
    def clk(self):
        """Gets the clk of this MarketChangeMessage.

        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :return: The clk of this MarketChangeMessage.
        :rtype: str
        """
        return self._clk

    @clk.setter
    def clk(self, clk):
        """Sets the clk of this MarketChangeMessage.

        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :param clk: The clk of this MarketChangeMessage.
        :type clk: str
        """

        self._clk = clk

    @property
    def conflate_ms(self):
        """Gets the conflate_ms of this MarketChangeMessage.

        Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)

        :return: The conflate_ms of this MarketChangeMessage.
        :rtype: int
        """
        return self._conflate_ms

    @conflate_ms.setter
    def conflate_ms(self, conflate_ms):
        """Sets the conflate_ms of this MarketChangeMessage.

        Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)

        :param conflate_ms: The conflate_ms of this MarketChangeMessage.
        :type conflate_ms: int
        """

        self._conflate_ms = conflate_ms

    @property
    def ct(self):
        """Gets the ct of this MarketChangeMessage.

        Change Type - set to indicate the type of change - if null this is a delta)

        :return: The ct of this MarketChangeMessage.
        :rtype: str
        """
        return self._ct

    @ct.setter
    def ct(self, ct):
        """Sets the ct of this MarketChangeMessage.

        Change Type - set to indicate the type of change - if null this is a delta)

        :param ct: The ct of this MarketChangeMessage.
        :type ct: str
        """
        allowed_values = ["SUB_IMAGE", "RESUB_DELTA", "HEARTBEAT"]  # noqa: E501
        if ct not in allowed_values:
            raise ValueError(
                "Invalid value for `ct` ({0}), must be one of {1}"
                .format(ct, allowed_values)
            )

        self._ct = ct

    @property
    def heartbeat_ms(self):
        """Gets the heartbeat_ms of this MarketChangeMessage.

        Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)

        :return: The heartbeat_ms of this MarketChangeMessage.
        :rtype: int
        """
        return self._heartbeat_ms

    @heartbeat_ms.setter
    def heartbeat_ms(self, heartbeat_ms):
        """Sets the heartbeat_ms of this MarketChangeMessage.

        Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)

        :param heartbeat_ms: The heartbeat_ms of this MarketChangeMessage.
        :type heartbeat_ms: int
        """

        self._heartbeat_ms = heartbeat_ms

    @property
    def initial_clk(self):
        """Gets the initial_clk of this MarketChangeMessage.

        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :return: The initial_clk of this MarketChangeMessage.
        :rtype: str
        """
        return self._initial_clk

    @initial_clk.setter
    def initial_clk(self, initial_clk):
        """Sets the initial_clk of this MarketChangeMessage.

        Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)

        :param initial_clk: The initial_clk of this MarketChangeMessage.
        :type initial_clk: str
        """

        self._initial_clk = initial_clk

    @property
    def mc(self):
        """Gets the mc of this MarketChangeMessage.

        MarketChanges - the modifications to markets (will be null on a heartbeat

        :return: The mc of this MarketChangeMessage.
        :rtype: List[MarketChange]
        """
        return self._mc

    @mc.setter
    def mc(self, mc):
        """Sets the mc of this MarketChangeMessage.

        MarketChanges - the modifications to markets (will be null on a heartbeat

        :param mc: The mc of this MarketChangeMessage.
        :type mc: List[MarketChange]
        """

        self._mc = mc

    @property
    def pt(self):
        """Gets the pt of this MarketChangeMessage.

        Publish Time (in millis since epoch) that the changes were generated

        :return: The pt of this MarketChangeMessage.
        :rtype: int
        """
        return self._pt

    @pt.setter
    def pt(self, pt):
        """Sets the pt of this MarketChangeMessage.

        Publish Time (in millis since epoch) that the changes were generated

        :param pt: The pt of this MarketChangeMessage.
        :type pt: int
        """

        self._pt = pt

    @property
    def segment_type(self):
        """Gets the segment_type of this MarketChangeMessage.

        Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented

        :return: The segment_type of this MarketChangeMessage.
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this MarketChangeMessage.

        Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented

        :param segment_type: The segment_type of this MarketChangeMessage.
        :type segment_type: str
        """
        allowed_values = ["SEG_START", "SEG", "SEG_END"]  # noqa: E501
        if segment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `segment_type` ({0}), must be one of {1}"
                .format(segment_type, allowed_values)
            )

        self._segment_type = segment_type

    @property
    def status(self):
        """Gets the status of this MarketChangeMessage.

        Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies

        :return: The status of this MarketChangeMessage.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarketChangeMessage.

        Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies

        :param status: The status of this MarketChangeMessage.
        :type status: int
        """

        self._status = status
