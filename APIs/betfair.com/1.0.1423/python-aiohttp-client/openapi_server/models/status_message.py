# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response_message import ResponseMessage
from openapi_server import util


class StatusMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, op: str=None, connection_closed: bool=None, connection_id: str=None, connections_available: int=None, error_code: str=None, error_message: str=None, status_code: str=None):
        """StatusMessage - a model defined in OpenAPI

        :param id: The id of this StatusMessage.
        :param op: The op of this StatusMessage.
        :param connection_closed: The connection_closed of this StatusMessage.
        :param connection_id: The connection_id of this StatusMessage.
        :param connections_available: The connections_available of this StatusMessage.
        :param error_code: The error_code of this StatusMessage.
        :param error_message: The error_message of this StatusMessage.
        :param status_code: The status_code of this StatusMessage.
        """
        self.openapi_types = {
            'id': int,
            'op': str,
            'connection_closed': bool,
            'connection_id': str,
            'connections_available': int,
            'error_code': str,
            'error_message': str,
            'status_code': str
        }

        self.attribute_map = {
            'id': 'id',
            'op': 'op',
            'connection_closed': 'connectionClosed',
            'connection_id': 'connectionId',
            'connections_available': 'connectionsAvailable',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'status_code': 'statusCode'
        }

        self._id = id
        self._op = op
        self._connection_closed = connection_closed
        self._connection_id = connection_id
        self._connections_available = connections_available
        self._error_code = error_code
        self._error_message = error_message
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusMessage of this StatusMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StatusMessage.

        Client generated unique id to link request with response (like json rpc)

        :return: The id of this StatusMessage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatusMessage.

        Client generated unique id to link request with response (like json rpc)

        :param id: The id of this StatusMessage.
        :type id: int
        """

        self._id = id

    @property
    def op(self):
        """Gets the op of this StatusMessage.

        The operation type

        :return: The op of this StatusMessage.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this StatusMessage.

        The operation type

        :param op: The op of this StatusMessage.
        :type op: str
        """

        self._op = op

    @property
    def connection_closed(self):
        """Gets the connection_closed of this StatusMessage.

        Is the connection now closed

        :return: The connection_closed of this StatusMessage.
        :rtype: bool
        """
        return self._connection_closed

    @connection_closed.setter
    def connection_closed(self, connection_closed):
        """Sets the connection_closed of this StatusMessage.

        Is the connection now closed

        :param connection_closed: The connection_closed of this StatusMessage.
        :type connection_closed: bool
        """

        self._connection_closed = connection_closed

    @property
    def connection_id(self):
        """Gets the connection_id of this StatusMessage.

        The connection id

        :return: The connection_id of this StatusMessage.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this StatusMessage.

        The connection id

        :param connection_id: The connection_id of this StatusMessage.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def connections_available(self):
        """Gets the connections_available of this StatusMessage.

        The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.

        :return: The connections_available of this StatusMessage.
        :rtype: int
        """
        return self._connections_available

    @connections_available.setter
    def connections_available(self, connections_available):
        """Sets the connections_available of this StatusMessage.

        The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.

        :param connections_available: The connections_available of this StatusMessage.
        :type connections_available: int
        """

        self._connections_available = connections_available

    @property
    def error_code(self):
        """Gets the error_code of this StatusMessage.

        The type of error in case of a failure

        :return: The error_code of this StatusMessage.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this StatusMessage.

        The type of error in case of a failure

        :param error_code: The error_code of this StatusMessage.
        :type error_code: str
        """
        allowed_values = ["NO_APP_KEY", "INVALID_APP_KEY", "NO_SESSION", "INVALID_SESSION_INFORMATION", "NOT_AUTHORIZED", "INVALID_INPUT", "INVALID_CLOCK", "UNEXPECTED_ERROR", "TIMEOUT", "SUBSCRIPTION_LIMIT_EXCEEDED", "INVALID_REQUEST", "CONNECTION_FAILED", "MAX_CONNECTION_LIMIT_EXCEEDED", "TOO_MANY_REQUESTS"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this StatusMessage.

        Additional message in case of a failure

        :return: The error_message of this StatusMessage.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this StatusMessage.

        Additional message in case of a failure

        :param error_message: The error_message of this StatusMessage.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def status_code(self):
        """Gets the status_code of this StatusMessage.

        The status of the last request

        :return: The status_code of this StatusMessage.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this StatusMessage.

        The status of the last request

        :param status_code: The status_code of this StatusMessage.
        :type status_code: str
        """
        allowed_values = ["SUCCESS", "FAILURE"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code
