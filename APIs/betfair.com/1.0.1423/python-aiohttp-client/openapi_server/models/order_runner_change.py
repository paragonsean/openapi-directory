# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order import Order
from openapi_server.models.strategy_match_change import StrategyMatchChange
from openapi_server import util


class OrderRunnerChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_image: bool=None, hc: float=None, id: int=None, mb: List[List[float]]=None, ml: List[List[float]]=None, smc: Dict[str, StrategyMatchChange]=None, uo: List[Order]=None):
        """OrderRunnerChange - a model defined in OpenAPI

        :param full_image: The full_image of this OrderRunnerChange.
        :param hc: The hc of this OrderRunnerChange.
        :param id: The id of this OrderRunnerChange.
        :param mb: The mb of this OrderRunnerChange.
        :param ml: The ml of this OrderRunnerChange.
        :param smc: The smc of this OrderRunnerChange.
        :param uo: The uo of this OrderRunnerChange.
        """
        self.openapi_types = {
            'full_image': bool,
            'hc': float,
            'id': int,
            'mb': List[List[float]],
            'ml': List[List[float]],
            'smc': Dict[str, StrategyMatchChange],
            'uo': List[Order]
        }

        self.attribute_map = {
            'full_image': 'fullImage',
            'hc': 'hc',
            'id': 'id',
            'mb': 'mb',
            'ml': 'ml',
            'smc': 'smc',
            'uo': 'uo'
        }

        self._full_image = full_image
        self._hc = hc
        self._id = id
        self._mb = mb
        self._ml = ml
        self._smc = smc
        self._uo = uo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderRunnerChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderRunnerChange of this OrderRunnerChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_image(self):
        """Gets the full_image of this OrderRunnerChange.


        :return: The full_image of this OrderRunnerChange.
        :rtype: bool
        """
        return self._full_image

    @full_image.setter
    def full_image(self, full_image):
        """Sets the full_image of this OrderRunnerChange.


        :param full_image: The full_image of this OrderRunnerChange.
        :type full_image: bool
        """

        self._full_image = full_image

    @property
    def hc(self):
        """Gets the hc of this OrderRunnerChange.

        Handicap - the handicap of the runner (selection) (null if not applicable)

        :return: The hc of this OrderRunnerChange.
        :rtype: float
        """
        return self._hc

    @hc.setter
    def hc(self, hc):
        """Sets the hc of this OrderRunnerChange.

        Handicap - the handicap of the runner (selection) (null if not applicable)

        :param hc: The hc of this OrderRunnerChange.
        :type hc: float
        """

        self._hc = hc

    @property
    def id(self):
        """Gets the id of this OrderRunnerChange.

        Selection Id - the id of the runner (selection)

        :return: The id of this OrderRunnerChange.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderRunnerChange.

        Selection Id - the id of the runner (selection)

        :param id: The id of this OrderRunnerChange.
        :type id: int
        """

        self._id = id

    @property
    def mb(self):
        """Gets the mb of this OrderRunnerChange.

        Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)

        :return: The mb of this OrderRunnerChange.
        :rtype: List[List[float]]
        """
        return self._mb

    @mb.setter
    def mb(self, mb):
        """Sets the mb of this OrderRunnerChange.

        Matched Backs - matched amounts by distinct matched price on the Back side for this runner (selection)

        :param mb: The mb of this OrderRunnerChange.
        :type mb: List[List[float]]
        """

        self._mb = mb

    @property
    def ml(self):
        """Gets the ml of this OrderRunnerChange.

        Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)

        :return: The ml of this OrderRunnerChange.
        :rtype: List[List[float]]
        """
        return self._ml

    @ml.setter
    def ml(self, ml):
        """Sets the ml of this OrderRunnerChange.

        Matched Lays - matched amounts by distinct matched price on the Lay side for this runner (selection)

        :param ml: The ml of this OrderRunnerChange.
        :type ml: List[List[float]]
        """

        self._ml = ml

    @property
    def smc(self):
        """Gets the smc of this OrderRunnerChange.

        Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference

        :return: The smc of this OrderRunnerChange.
        :rtype: Dict[str, StrategyMatchChange]
        """
        return self._smc

    @smc.setter
    def smc(self, smc):
        """Sets the smc of this OrderRunnerChange.

        Strategy Matches - Matched Backs and Matched Lays grouped by strategy reference

        :param smc: The smc of this OrderRunnerChange.
        :type smc: Dict[str, StrategyMatchChange]
        """

        self._smc = smc

    @property
    def uo(self):
        """Gets the uo of this OrderRunnerChange.

        Unmatched Orders - orders on this runner (selection) that are not fully matched

        :return: The uo of this OrderRunnerChange.
        :rtype: List[Order]
        """
        return self._uo

    @uo.setter
    def uo(self, uo):
        """Sets the uo of this OrderRunnerChange.

        Unmatched Orders - orders on this runner (selection) that are not fully matched

        :param uo: The uo of this OrderRunnerChange.
        :type uo: List[Order]
        """

        self._uo = uo
