# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_message import AuthenticationMessage
from openapi_server.models.heartbeat_message import HeartbeatMessage
from openapi_server.models.market_subscription_message import MarketSubscriptionMessage
from openapi_server.models.order_subscription_message import OrderSubscriptionMessage
from openapi_server import util


class AllRequestTypesExample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: AuthenticationMessage=None, heartbeat: HeartbeatMessage=None, market_subscription: MarketSubscriptionMessage=None, op_types: str=None, order_subscription_message: OrderSubscriptionMessage=None):
        """AllRequestTypesExample - a model defined in OpenAPI

        :param authentication: The authentication of this AllRequestTypesExample.
        :param heartbeat: The heartbeat of this AllRequestTypesExample.
        :param market_subscription: The market_subscription of this AllRequestTypesExample.
        :param op_types: The op_types of this AllRequestTypesExample.
        :param order_subscription_message: The order_subscription_message of this AllRequestTypesExample.
        """
        self.openapi_types = {
            'authentication': AuthenticationMessage,
            'heartbeat': HeartbeatMessage,
            'market_subscription': MarketSubscriptionMessage,
            'op_types': str,
            'order_subscription_message': OrderSubscriptionMessage
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'heartbeat': 'heartbeat',
            'market_subscription': 'marketSubscription',
            'op_types': 'opTypes',
            'order_subscription_message': 'orderSubscriptionMessage'
        }

        self._authentication = authentication
        self._heartbeat = heartbeat
        self._market_subscription = market_subscription
        self._op_types = op_types
        self._order_subscription_message = order_subscription_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllRequestTypesExample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllRequestTypesExample of this AllRequestTypesExample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this AllRequestTypesExample.


        :return: The authentication of this AllRequestTypesExample.
        :rtype: AuthenticationMessage
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this AllRequestTypesExample.


        :param authentication: The authentication of this AllRequestTypesExample.
        :type authentication: AuthenticationMessage
        """

        self._authentication = authentication

    @property
    def heartbeat(self):
        """Gets the heartbeat of this AllRequestTypesExample.


        :return: The heartbeat of this AllRequestTypesExample.
        :rtype: HeartbeatMessage
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, heartbeat):
        """Sets the heartbeat of this AllRequestTypesExample.


        :param heartbeat: The heartbeat of this AllRequestTypesExample.
        :type heartbeat: HeartbeatMessage
        """

        self._heartbeat = heartbeat

    @property
    def market_subscription(self):
        """Gets the market_subscription of this AllRequestTypesExample.


        :return: The market_subscription of this AllRequestTypesExample.
        :rtype: MarketSubscriptionMessage
        """
        return self._market_subscription

    @market_subscription.setter
    def market_subscription(self, market_subscription):
        """Sets the market_subscription of this AllRequestTypesExample.


        :param market_subscription: The market_subscription of this AllRequestTypesExample.
        :type market_subscription: MarketSubscriptionMessage
        """

        self._market_subscription = market_subscription

    @property
    def op_types(self):
        """Gets the op_types of this AllRequestTypesExample.


        :return: The op_types of this AllRequestTypesExample.
        :rtype: str
        """
        return self._op_types

    @op_types.setter
    def op_types(self, op_types):
        """Sets the op_types of this AllRequestTypesExample.


        :param op_types: The op_types of this AllRequestTypesExample.
        :type op_types: str
        """
        allowed_values = ["heartbeat", "authentication", "marketSubscription", "orderSubscription"]  # noqa: E501
        if op_types not in allowed_values:
            raise ValueError(
                "Invalid value for `op_types` ({0}), must be one of {1}"
                .format(op_types, allowed_values)
            )

        self._op_types = op_types

    @property
    def order_subscription_message(self):
        """Gets the order_subscription_message of this AllRequestTypesExample.


        :return: The order_subscription_message of this AllRequestTypesExample.
        :rtype: OrderSubscriptionMessage
        """
        return self._order_subscription_message

    @order_subscription_message.setter
    def order_subscription_message(self, order_subscription_message):
        """Sets the order_subscription_message of this AllRequestTypesExample.


        :param order_subscription_message: The order_subscription_message of this AllRequestTypesExample.
        :type order_subscription_message: OrderSubscriptionMessage
        """

        self._order_subscription_message = order_subscription_message
