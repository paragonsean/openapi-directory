# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avp: float=None, bsp: float=None, cd: int=None, id: str=None, ld: int=None, lsrc: str=None, md: int=None, ot: str=None, p: float=None, pd: int=None, pt: str=None, rac: str=None, rc: str=None, rfo: str=None, rfs: str=None, s: float=None, sc: float=None, side: str=None, sl: float=None, sm: float=None, sr: float=None, status: str=None, sv: float=None):
        """Order - a model defined in OpenAPI

        :param avp: The avp of this Order.
        :param bsp: The bsp of this Order.
        :param cd: The cd of this Order.
        :param id: The id of this Order.
        :param ld: The ld of this Order.
        :param lsrc: The lsrc of this Order.
        :param md: The md of this Order.
        :param ot: The ot of this Order.
        :param p: The p of this Order.
        :param pd: The pd of this Order.
        :param pt: The pt of this Order.
        :param rac: The rac of this Order.
        :param rc: The rc of this Order.
        :param rfo: The rfo of this Order.
        :param rfs: The rfs of this Order.
        :param s: The s of this Order.
        :param sc: The sc of this Order.
        :param side: The side of this Order.
        :param sl: The sl of this Order.
        :param sm: The sm of this Order.
        :param sr: The sr of this Order.
        :param status: The status of this Order.
        :param sv: The sv of this Order.
        """
        self.openapi_types = {
            'avp': float,
            'bsp': float,
            'cd': int,
            'id': str,
            'ld': int,
            'lsrc': str,
            'md': int,
            'ot': str,
            'p': float,
            'pd': int,
            'pt': str,
            'rac': str,
            'rc': str,
            'rfo': str,
            'rfs': str,
            's': float,
            'sc': float,
            'side': str,
            'sl': float,
            'sm': float,
            'sr': float,
            'status': str,
            'sv': float
        }

        self.attribute_map = {
            'avp': 'avp',
            'bsp': 'bsp',
            'cd': 'cd',
            'id': 'id',
            'ld': 'ld',
            'lsrc': 'lsrc',
            'md': 'md',
            'ot': 'ot',
            'p': 'p',
            'pd': 'pd',
            'pt': 'pt',
            'rac': 'rac',
            'rc': 'rc',
            'rfo': 'rfo',
            'rfs': 'rfs',
            's': 's',
            'sc': 'sc',
            'side': 'side',
            'sl': 'sl',
            'sm': 'sm',
            'sr': 'sr',
            'status': 'status',
            'sv': 'sv'
        }

        self._avp = avp
        self._bsp = bsp
        self._cd = cd
        self._id = id
        self._ld = ld
        self._lsrc = lsrc
        self._md = md
        self._ot = ot
        self._p = p
        self._pd = pd
        self._pt = pt
        self._rac = rac
        self._rc = rc
        self._rfo = rfo
        self._rfs = rfs
        self._s = s
        self._sc = sc
        self._side = side
        self._sl = sl
        self._sm = sm
        self._sr = sr
        self._status = status
        self._sv = sv

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avp(self):
        """Gets the avp of this Order.

        Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.

        :return: The avp of this Order.
        :rtype: float
        """
        return self._avp

    @avp.setter
    def avp(self, avp):
        """Sets the avp of this Order.

        Average Price Matched - the average price the order was matched at (null if the order is not matched). This value is not meaningful for activity on Line markets and is not guaranteed to be returned or maintained for these markets.

        :param avp: The avp of this Order.
        :type avp: float
        """

        self._avp = avp

    @property
    def bsp(self):
        """Gets the bsp of this Order.

        BSP Liability - the BSP liability of the order (null if the order is not a BSP order)

        :return: The bsp of this Order.
        :rtype: float
        """
        return self._bsp

    @bsp.setter
    def bsp(self, bsp):
        """Sets the bsp of this Order.

        BSP Liability - the BSP liability of the order (null if the order is not a BSP order)

        :param bsp: The bsp of this Order.
        :type bsp: float
        """

        self._bsp = bsp

    @property
    def cd(self):
        """Gets the cd of this Order.

        Cancelled Date - the date the order was cancelled (null if the order is not cancelled)

        :return: The cd of this Order.
        :rtype: int
        """
        return self._cd

    @cd.setter
    def cd(self, cd):
        """Sets the cd of this Order.

        Cancelled Date - the date the order was cancelled (null if the order is not cancelled)

        :param cd: The cd of this Order.
        :type cd: int
        """

        self._cd = cd

    @property
    def id(self):
        """Gets the id of this Order.

        Bet Id - the id of the order

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        Bet Id - the id of the order

        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def ld(self):
        """Gets the ld of this Order.

        Lapsed Date - the date the order was lapsed (null if the order is not lapsed)

        :return: The ld of this Order.
        :rtype: int
        """
        return self._ld

    @ld.setter
    def ld(self, ld):
        """Sets the ld of this Order.

        Lapsed Date - the date the order was lapsed (null if the order is not lapsed)

        :param ld: The ld of this Order.
        :type ld: int
        """

        self._ld = ld

    @property
    def lsrc(self):
        """Gets the lsrc of this Order.

        Lapse Status Reason Code - the reason that some or all of this order has been lapsed (null if no portion of the order is lapsed

        :return: The lsrc of this Order.
        :rtype: str
        """
        return self._lsrc

    @lsrc.setter
    def lsrc(self, lsrc):
        """Sets the lsrc of this Order.

        Lapse Status Reason Code - the reason that some or all of this order has been lapsed (null if no portion of the order is lapsed

        :param lsrc: The lsrc of this Order.
        :type lsrc: str
        """

        self._lsrc = lsrc

    @property
    def md(self):
        """Gets the md of this Order.

        Matched Date - the date the order was matched (null if the order is not matched)

        :return: The md of this Order.
        :rtype: int
        """
        return self._md

    @md.setter
    def md(self, md):
        """Sets the md of this Order.

        Matched Date - the date the order was matched (null if the order is not matched)

        :param md: The md of this Order.
        :type md: int
        """

        self._md = md

    @property
    def ot(self):
        """Gets the ot of this Order.

        Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)

        :return: The ot of this Order.
        :rtype: str
        """
        return self._ot

    @ot.setter
    def ot(self, ot):
        """Sets the ot of this Order.

        Order Type - the type of the order (L = LIMIT, MOC = MARKET_ON_CLOSE, LOC = LIMIT_ON_CLOSE)

        :param ot: The ot of this Order.
        :type ot: str
        """
        allowed_values = ["L", "LOC", "MOC"]  # noqa: E501
        if ot not in allowed_values:
            raise ValueError(
                "Invalid value for `ot` ({0}), must be one of {1}"
                .format(ot, allowed_values)
            )

        self._ot = ot

    @property
    def p(self):
        """Gets the p of this Order.

        Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps

        :return: The p of this Order.
        :rtype: float
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this Order.

        Price - the original placed price of the order. Line markets operate at even-money odds of 2.0. However, price for these markets refers to the line positions available as defined by the markets min-max range and interval steps

        :param p: The p of this Order.
        :type p: float
        """

        self._p = p

    @property
    def pd(self):
        """Gets the pd of this Order.

        Placed Date - the date the order was placed

        :return: The pd of this Order.
        :rtype: int
        """
        return self._pd

    @pd.setter
    def pd(self, pd):
        """Sets the pd of this Order.

        Placed Date - the date the order was placed

        :param pd: The pd of this Order.
        :type pd: int
        """

        self._pd = pd

    @property
    def pt(self):
        """Gets the pt of this Order.

        Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)

        :return: The pt of this Order.
        :rtype: str
        """
        return self._pt

    @pt.setter
    def pt(self, pt):
        """Sets the pt of this Order.

        Persistence Type - whether the order will persist at in play or not (L = LAPSE, P = PERSIST, MOC = Market On Close)

        :param pt: The pt of this Order.
        :type pt: str
        """
        allowed_values = ["L", "P", "MOC"]  # noqa: E501
        if pt not in allowed_values:
            raise ValueError(
                "Invalid value for `pt` ({0}), must be one of {1}"
                .format(pt, allowed_values)
            )

        self._pt = pt

    @property
    def rac(self):
        """Gets the rac of this Order.

        Regulator Auth Code - the auth code returned by the regulator

        :return: The rac of this Order.
        :rtype: str
        """
        return self._rac

    @rac.setter
    def rac(self, rac):
        """Sets the rac of this Order.

        Regulator Auth Code - the auth code returned by the regulator

        :param rac: The rac of this Order.
        :type rac: str
        """

        self._rac = rac

    @property
    def rc(self):
        """Gets the rc of this Order.

        Regulator Code - the regulator of the order

        :return: The rc of this Order.
        :rtype: str
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this Order.

        Regulator Code - the regulator of the order

        :param rc: The rc of this Order.
        :type rc: str
        """

        self._rc = rc

    @property
    def rfo(self):
        """Gets the rfo of this Order.

        Order Reference - the customer's order reference for this order (empty string if one was not set)

        :return: The rfo of this Order.
        :rtype: str
        """
        return self._rfo

    @rfo.setter
    def rfo(self, rfo):
        """Sets the rfo of this Order.

        Order Reference - the customer's order reference for this order (empty string if one was not set)

        :param rfo: The rfo of this Order.
        :type rfo: str
        """

        self._rfo = rfo

    @property
    def rfs(self):
        """Gets the rfs of this Order.

        Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)

        :return: The rfs of this Order.
        :rtype: str
        """
        return self._rfs

    @rfs.setter
    def rfs(self, rfs):
        """Sets the rfs of this Order.

        Strategy Reference - the customer's strategy reference for this order (empty string if one was not set)

        :param rfs: The rfs of this Order.
        :type rfs: str
        """

        self._rfs = rfs

    @property
    def s(self):
        """Gets the s of this Order.

        Size - the original placed size of the order

        :return: The s of this Order.
        :rtype: float
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this Order.

        Size - the original placed size of the order

        :param s: The s of this Order.
        :type s: float
        """

        self._s = s

    @property
    def sc(self):
        """Gets the sc of this Order.

        Size Cancelled - the amount of the order that has been cancelled

        :return: The sc of this Order.
        :rtype: float
        """
        return self._sc

    @sc.setter
    def sc(self, sc):
        """Sets the sc of this Order.

        Size Cancelled - the amount of the order that has been cancelled

        :param sc: The sc of this Order.
        :type sc: float
        """

        self._sc = sc

    @property
    def side(self):
        """Gets the side of this Order.

        Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.

        :return: The side of this Order.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Order.

        Side - the side of the order. For Line markets a 'B' bet refers to a SELL line and an 'L' bet refers to a BUY line.

        :param side: The side of this Order.
        :type side: str
        """
        allowed_values = ["B", "L"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def sl(self):
        """Gets the sl of this Order.

        Size Lapsed - the amount of the order that has been lapsed

        :return: The sl of this Order.
        :rtype: float
        """
        return self._sl

    @sl.setter
    def sl(self, sl):
        """Sets the sl of this Order.

        Size Lapsed - the amount of the order that has been lapsed

        :param sl: The sl of this Order.
        :type sl: float
        """

        self._sl = sl

    @property
    def sm(self):
        """Gets the sm of this Order.

        Size Matched - the amount of the order that has been matched

        :return: The sm of this Order.
        :rtype: float
        """
        return self._sm

    @sm.setter
    def sm(self, sm):
        """Sets the sm of this Order.

        Size Matched - the amount of the order that has been matched

        :param sm: The sm of this Order.
        :type sm: float
        """

        self._sm = sm

    @property
    def sr(self):
        """Gets the sr of this Order.

        Size Remaining - the amount of the order that is remaining unmatched

        :return: The sr of this Order.
        :rtype: float
        """
        return self._sr

    @sr.setter
    def sr(self, sr):
        """Sets the sr of this Order.

        Size Remaining - the amount of the order that is remaining unmatched

        :param sr: The sr of this Order.
        :type sr: float
        """

        self._sr = sr

    @property
    def status(self):
        """Gets the status of this Order.

        Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        Status - the status of the order (E = EXECUTABLE, EC = EXECUTION_COMPLETE)

        :param status: The status of this Order.
        :type status: str
        """
        allowed_values = ["E", "EC"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sv(self):
        """Gets the sv of this Order.

        Size Voided - the amount of the order that has been voided

        :return: The sv of this Order.
        :rtype: float
        """
        return self._sv

    @sv.setter
    def sv(self, sv):
        """Sets the sv of this Order.

        Size Voided - the amount of the order that has been voided

        :param sv: The sv of this Order.
        :type sv: float
        """

        self._sv = sv
