# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ids: List[int]=None, customer_strategy_refs: List[str]=None, include_overall_position: bool=None, partition_matched_by_strategy_ref: bool=None):
        """OrderFilter - a model defined in OpenAPI

        :param account_ids: The account_ids of this OrderFilter.
        :param customer_strategy_refs: The customer_strategy_refs of this OrderFilter.
        :param include_overall_position: The include_overall_position of this OrderFilter.
        :param partition_matched_by_strategy_ref: The partition_matched_by_strategy_ref of this OrderFilter.
        """
        self.openapi_types = {
            'account_ids': List[int],
            'customer_strategy_refs': List[str],
            'include_overall_position': bool,
            'partition_matched_by_strategy_ref': bool
        }

        self.attribute_map = {
            'account_ids': 'accountIds',
            'customer_strategy_refs': 'customerStrategyRefs',
            'include_overall_position': 'includeOverallPosition',
            'partition_matched_by_strategy_ref': 'partitionMatchedByStrategyRef'
        }

        self._account_ids = account_ids
        self._customer_strategy_refs = customer_strategy_refs
        self._include_overall_position = include_overall_position
        self._partition_matched_by_strategy_ref = partition_matched_by_strategy_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderFilter of this OrderFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ids(self):
        """Gets the account_ids of this OrderFilter.

        Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.

        :return: The account_ids of this OrderFilter.
        :rtype: List[int]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this OrderFilter.

        Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.

        :param account_ids: The account_ids of this OrderFilter.
        :type account_ids: List[int]
        """

        self._account_ids = account_ids

    @property
    def customer_strategy_refs(self):
        """Gets the customer_strategy_refs of this OrderFilter.

        Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)

        :return: The customer_strategy_refs of this OrderFilter.
        :rtype: List[str]
        """
        return self._customer_strategy_refs

    @customer_strategy_refs.setter
    def customer_strategy_refs(self, customer_strategy_refs):
        """Sets the customer_strategy_refs of this OrderFilter.

        Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)

        :param customer_strategy_refs: The customer_strategy_refs of this OrderFilter.
        :type customer_strategy_refs: List[str]
        """

        self._customer_strategy_refs = customer_strategy_refs

    @property
    def include_overall_position(self):
        """Gets the include_overall_position of this OrderFilter.

        Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true

        :return: The include_overall_position of this OrderFilter.
        :rtype: bool
        """
        return self._include_overall_position

    @include_overall_position.setter
    def include_overall_position(self, include_overall_position):
        """Sets the include_overall_position of this OrderFilter.

        Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true

        :param include_overall_position: The include_overall_position of this OrderFilter.
        :type include_overall_position: bool
        """

        self._include_overall_position = include_overall_position

    @property
    def partition_matched_by_strategy_ref(self):
        """Gets the partition_matched_by_strategy_ref of this OrderFilter.

        Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false

        :return: The partition_matched_by_strategy_ref of this OrderFilter.
        :rtype: bool
        """
        return self._partition_matched_by_strategy_ref

    @partition_matched_by_strategy_ref.setter
    def partition_matched_by_strategy_ref(self, partition_matched_by_strategy_ref):
        """Sets the partition_matched_by_strategy_ref of this OrderFilter.

        Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false

        :param partition_matched_by_strategy_ref: The partition_matched_by_strategy_ref of this OrderFilter.
        :type partition_matched_by_strategy_ref: bool
        """

        self._partition_matched_by_strategy_ref = partition_matched_by_strategy_ref
