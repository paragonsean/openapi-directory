# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_message import ConnectionMessage
from openapi_server.models.market_change_message import MarketChangeMessage
from openapi_server.models.order_change_message import OrderChangeMessage
from openapi_server.models.status_message import StatusMessage
from openapi_server import util


class AllResponseTypesExample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection: ConnectionMessage=None, market_change_message: MarketChangeMessage=None, op_types: str=None, order_change_message: OrderChangeMessage=None, status: StatusMessage=None):
        """AllResponseTypesExample - a model defined in OpenAPI

        :param connection: The connection of this AllResponseTypesExample.
        :param market_change_message: The market_change_message of this AllResponseTypesExample.
        :param op_types: The op_types of this AllResponseTypesExample.
        :param order_change_message: The order_change_message of this AllResponseTypesExample.
        :param status: The status of this AllResponseTypesExample.
        """
        self.openapi_types = {
            'connection': ConnectionMessage,
            'market_change_message': MarketChangeMessage,
            'op_types': str,
            'order_change_message': OrderChangeMessage,
            'status': StatusMessage
        }

        self.attribute_map = {
            'connection': 'connection',
            'market_change_message': 'marketChangeMessage',
            'op_types': 'opTypes',
            'order_change_message': 'orderChangeMessage',
            'status': 'status'
        }

        self._connection = connection
        self._market_change_message = market_change_message
        self._op_types = op_types
        self._order_change_message = order_change_message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllResponseTypesExample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllResponseTypesExample of this AllResponseTypesExample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self):
        """Gets the connection of this AllResponseTypesExample.


        :return: The connection of this AllResponseTypesExample.
        :rtype: ConnectionMessage
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this AllResponseTypesExample.


        :param connection: The connection of this AllResponseTypesExample.
        :type connection: ConnectionMessage
        """

        self._connection = connection

    @property
    def market_change_message(self):
        """Gets the market_change_message of this AllResponseTypesExample.


        :return: The market_change_message of this AllResponseTypesExample.
        :rtype: MarketChangeMessage
        """
        return self._market_change_message

    @market_change_message.setter
    def market_change_message(self, market_change_message):
        """Sets the market_change_message of this AllResponseTypesExample.


        :param market_change_message: The market_change_message of this AllResponseTypesExample.
        :type market_change_message: MarketChangeMessage
        """

        self._market_change_message = market_change_message

    @property
    def op_types(self):
        """Gets the op_types of this AllResponseTypesExample.


        :return: The op_types of this AllResponseTypesExample.
        :rtype: str
        """
        return self._op_types

    @op_types.setter
    def op_types(self, op_types):
        """Sets the op_types of this AllResponseTypesExample.


        :param op_types: The op_types of this AllResponseTypesExample.
        :type op_types: str
        """
        allowed_values = ["connection", "status", "mcm", "ocm"]  # noqa: E501
        if op_types not in allowed_values:
            raise ValueError(
                "Invalid value for `op_types` ({0}), must be one of {1}"
                .format(op_types, allowed_values)
            )

        self._op_types = op_types

    @property
    def order_change_message(self):
        """Gets the order_change_message of this AllResponseTypesExample.


        :return: The order_change_message of this AllResponseTypesExample.
        :rtype: OrderChangeMessage
        """
        return self._order_change_message

    @order_change_message.setter
    def order_change_message(self, order_change_message):
        """Sets the order_change_message of this AllResponseTypesExample.


        :param order_change_message: The order_change_message of this AllResponseTypesExample.
        :type order_change_message: OrderChangeMessage
        """

        self._order_change_message = order_change_message

    @property
    def status(self):
        """Gets the status of this AllResponseTypesExample.


        :return: The status of this AllResponseTypesExample.
        :rtype: StatusMessage
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AllResponseTypesExample.


        :param status: The status of this AllResponseTypesExample.
        :type status: StatusMessage
        """

        self._status = status
