# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_line_definition import KeyLineDefinition
from openapi_server.models.price_ladder_definition import PriceLadderDefinition
from openapi_server.models.runner_definition import RunnerDefinition
from openapi_server import util


class MarketDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bet_delay: int=None, betting_type: str=None, bsp_market: bool=None, bsp_reconciled: bool=None, complete: bool=None, country_code: str=None, cross_matching: bool=None, discount_allowed: bool=None, each_way_divisor: float=None, event_id: str=None, event_type_id: str=None, in_play: bool=None, key_line_definition: KeyLineDefinition=None, line_interval: float=None, line_max_unit: float=None, line_min_unit: float=None, market_base_rate: float=None, market_time: datetime=None, market_type: str=None, number_of_active_runners: int=None, number_of_winners: int=None, open_date: datetime=None, persistence_enabled: bool=None, price_ladder_definition: PriceLadderDefinition=None, race_type: str=None, regulators: List[str]=None, runners: List[RunnerDefinition]=None, runners_voidable: bool=None, settled_time: datetime=None, status: str=None, suspend_time: datetime=None, timezone: str=None, turn_in_play_enabled: bool=None, venue: str=None, version: int=None):
        """MarketDefinition - a model defined in OpenAPI

        :param bet_delay: The bet_delay of this MarketDefinition.
        :param betting_type: The betting_type of this MarketDefinition.
        :param bsp_market: The bsp_market of this MarketDefinition.
        :param bsp_reconciled: The bsp_reconciled of this MarketDefinition.
        :param complete: The complete of this MarketDefinition.
        :param country_code: The country_code of this MarketDefinition.
        :param cross_matching: The cross_matching of this MarketDefinition.
        :param discount_allowed: The discount_allowed of this MarketDefinition.
        :param each_way_divisor: The each_way_divisor of this MarketDefinition.
        :param event_id: The event_id of this MarketDefinition.
        :param event_type_id: The event_type_id of this MarketDefinition.
        :param in_play: The in_play of this MarketDefinition.
        :param key_line_definition: The key_line_definition of this MarketDefinition.
        :param line_interval: The line_interval of this MarketDefinition.
        :param line_max_unit: The line_max_unit of this MarketDefinition.
        :param line_min_unit: The line_min_unit of this MarketDefinition.
        :param market_base_rate: The market_base_rate of this MarketDefinition.
        :param market_time: The market_time of this MarketDefinition.
        :param market_type: The market_type of this MarketDefinition.
        :param number_of_active_runners: The number_of_active_runners of this MarketDefinition.
        :param number_of_winners: The number_of_winners of this MarketDefinition.
        :param open_date: The open_date of this MarketDefinition.
        :param persistence_enabled: The persistence_enabled of this MarketDefinition.
        :param price_ladder_definition: The price_ladder_definition of this MarketDefinition.
        :param race_type: The race_type of this MarketDefinition.
        :param regulators: The regulators of this MarketDefinition.
        :param runners: The runners of this MarketDefinition.
        :param runners_voidable: The runners_voidable of this MarketDefinition.
        :param settled_time: The settled_time of this MarketDefinition.
        :param status: The status of this MarketDefinition.
        :param suspend_time: The suspend_time of this MarketDefinition.
        :param timezone: The timezone of this MarketDefinition.
        :param turn_in_play_enabled: The turn_in_play_enabled of this MarketDefinition.
        :param venue: The venue of this MarketDefinition.
        :param version: The version of this MarketDefinition.
        """
        self.openapi_types = {
            'bet_delay': int,
            'betting_type': str,
            'bsp_market': bool,
            'bsp_reconciled': bool,
            'complete': bool,
            'country_code': str,
            'cross_matching': bool,
            'discount_allowed': bool,
            'each_way_divisor': float,
            'event_id': str,
            'event_type_id': str,
            'in_play': bool,
            'key_line_definition': KeyLineDefinition,
            'line_interval': float,
            'line_max_unit': float,
            'line_min_unit': float,
            'market_base_rate': float,
            'market_time': datetime,
            'market_type': str,
            'number_of_active_runners': int,
            'number_of_winners': int,
            'open_date': datetime,
            'persistence_enabled': bool,
            'price_ladder_definition': PriceLadderDefinition,
            'race_type': str,
            'regulators': List[str],
            'runners': List[RunnerDefinition],
            'runners_voidable': bool,
            'settled_time': datetime,
            'status': str,
            'suspend_time': datetime,
            'timezone': str,
            'turn_in_play_enabled': bool,
            'venue': str,
            'version': int
        }

        self.attribute_map = {
            'bet_delay': 'betDelay',
            'betting_type': 'bettingType',
            'bsp_market': 'bspMarket',
            'bsp_reconciled': 'bspReconciled',
            'complete': 'complete',
            'country_code': 'countryCode',
            'cross_matching': 'crossMatching',
            'discount_allowed': 'discountAllowed',
            'each_way_divisor': 'eachWayDivisor',
            'event_id': 'eventId',
            'event_type_id': 'eventTypeId',
            'in_play': 'inPlay',
            'key_line_definition': 'keyLineDefinition',
            'line_interval': 'lineInterval',
            'line_max_unit': 'lineMaxUnit',
            'line_min_unit': 'lineMinUnit',
            'market_base_rate': 'marketBaseRate',
            'market_time': 'marketTime',
            'market_type': 'marketType',
            'number_of_active_runners': 'numberOfActiveRunners',
            'number_of_winners': 'numberOfWinners',
            'open_date': 'openDate',
            'persistence_enabled': 'persistenceEnabled',
            'price_ladder_definition': 'priceLadderDefinition',
            'race_type': 'raceType',
            'regulators': 'regulators',
            'runners': 'runners',
            'runners_voidable': 'runnersVoidable',
            'settled_time': 'settledTime',
            'status': 'status',
            'suspend_time': 'suspendTime',
            'timezone': 'timezone',
            'turn_in_play_enabled': 'turnInPlayEnabled',
            'venue': 'venue',
            'version': 'version'
        }

        self._bet_delay = bet_delay
        self._betting_type = betting_type
        self._bsp_market = bsp_market
        self._bsp_reconciled = bsp_reconciled
        self._complete = complete
        self._country_code = country_code
        self._cross_matching = cross_matching
        self._discount_allowed = discount_allowed
        self._each_way_divisor = each_way_divisor
        self._event_id = event_id
        self._event_type_id = event_type_id
        self._in_play = in_play
        self._key_line_definition = key_line_definition
        self._line_interval = line_interval
        self._line_max_unit = line_max_unit
        self._line_min_unit = line_min_unit
        self._market_base_rate = market_base_rate
        self._market_time = market_time
        self._market_type = market_type
        self._number_of_active_runners = number_of_active_runners
        self._number_of_winners = number_of_winners
        self._open_date = open_date
        self._persistence_enabled = persistence_enabled
        self._price_ladder_definition = price_ladder_definition
        self._race_type = race_type
        self._regulators = regulators
        self._runners = runners
        self._runners_voidable = runners_voidable
        self._settled_time = settled_time
        self._status = status
        self._suspend_time = suspend_time
        self._timezone = timezone
        self._turn_in_play_enabled = turn_in_play_enabled
        self._venue = venue
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketDefinition of this MarketDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bet_delay(self):
        """Gets the bet_delay of this MarketDefinition.


        :return: The bet_delay of this MarketDefinition.
        :rtype: int
        """
        return self._bet_delay

    @bet_delay.setter
    def bet_delay(self, bet_delay):
        """Sets the bet_delay of this MarketDefinition.


        :param bet_delay: The bet_delay of this MarketDefinition.
        :type bet_delay: int
        """

        self._bet_delay = bet_delay

    @property
    def betting_type(self):
        """Gets the betting_type of this MarketDefinition.


        :return: The betting_type of this MarketDefinition.
        :rtype: str
        """
        return self._betting_type

    @betting_type.setter
    def betting_type(self, betting_type):
        """Sets the betting_type of this MarketDefinition.


        :param betting_type: The betting_type of this MarketDefinition.
        :type betting_type: str
        """
        allowed_values = ["ODDS", "LINE", "RANGE", "ASIAN_HANDICAP_DOUBLE_LINE", "ASIAN_HANDICAP_SINGLE_LINE"]  # noqa: E501
        if betting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `betting_type` ({0}), must be one of {1}"
                .format(betting_type, allowed_values)
            )

        self._betting_type = betting_type

    @property
    def bsp_market(self):
        """Gets the bsp_market of this MarketDefinition.


        :return: The bsp_market of this MarketDefinition.
        :rtype: bool
        """
        return self._bsp_market

    @bsp_market.setter
    def bsp_market(self, bsp_market):
        """Sets the bsp_market of this MarketDefinition.


        :param bsp_market: The bsp_market of this MarketDefinition.
        :type bsp_market: bool
        """

        self._bsp_market = bsp_market

    @property
    def bsp_reconciled(self):
        """Gets the bsp_reconciled of this MarketDefinition.


        :return: The bsp_reconciled of this MarketDefinition.
        :rtype: bool
        """
        return self._bsp_reconciled

    @bsp_reconciled.setter
    def bsp_reconciled(self, bsp_reconciled):
        """Sets the bsp_reconciled of this MarketDefinition.


        :param bsp_reconciled: The bsp_reconciled of this MarketDefinition.
        :type bsp_reconciled: bool
        """

        self._bsp_reconciled = bsp_reconciled

    @property
    def complete(self):
        """Gets the complete of this MarketDefinition.


        :return: The complete of this MarketDefinition.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this MarketDefinition.


        :param complete: The complete of this MarketDefinition.
        :type complete: bool
        """

        self._complete = complete

    @property
    def country_code(self):
        """Gets the country_code of this MarketDefinition.


        :return: The country_code of this MarketDefinition.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this MarketDefinition.


        :param country_code: The country_code of this MarketDefinition.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def cross_matching(self):
        """Gets the cross_matching of this MarketDefinition.


        :return: The cross_matching of this MarketDefinition.
        :rtype: bool
        """
        return self._cross_matching

    @cross_matching.setter
    def cross_matching(self, cross_matching):
        """Sets the cross_matching of this MarketDefinition.


        :param cross_matching: The cross_matching of this MarketDefinition.
        :type cross_matching: bool
        """

        self._cross_matching = cross_matching

    @property
    def discount_allowed(self):
        """Gets the discount_allowed of this MarketDefinition.


        :return: The discount_allowed of this MarketDefinition.
        :rtype: bool
        """
        return self._discount_allowed

    @discount_allowed.setter
    def discount_allowed(self, discount_allowed):
        """Sets the discount_allowed of this MarketDefinition.


        :param discount_allowed: The discount_allowed of this MarketDefinition.
        :type discount_allowed: bool
        """

        self._discount_allowed = discount_allowed

    @property
    def each_way_divisor(self):
        """Gets the each_way_divisor of this MarketDefinition.


        :return: The each_way_divisor of this MarketDefinition.
        :rtype: float
        """
        return self._each_way_divisor

    @each_way_divisor.setter
    def each_way_divisor(self, each_way_divisor):
        """Sets the each_way_divisor of this MarketDefinition.


        :param each_way_divisor: The each_way_divisor of this MarketDefinition.
        :type each_way_divisor: float
        """

        self._each_way_divisor = each_way_divisor

    @property
    def event_id(self):
        """Gets the event_id of this MarketDefinition.


        :return: The event_id of this MarketDefinition.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this MarketDefinition.


        :param event_id: The event_id of this MarketDefinition.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_type_id(self):
        """Gets the event_type_id of this MarketDefinition.

        The Event Type the market is contained within.

        :return: The event_type_id of this MarketDefinition.
        :rtype: str
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this MarketDefinition.

        The Event Type the market is contained within.

        :param event_type_id: The event_type_id of this MarketDefinition.
        :type event_type_id: str
        """

        self._event_type_id = event_type_id

    @property
    def in_play(self):
        """Gets the in_play of this MarketDefinition.


        :return: The in_play of this MarketDefinition.
        :rtype: bool
        """
        return self._in_play

    @in_play.setter
    def in_play(self, in_play):
        """Sets the in_play of this MarketDefinition.


        :param in_play: The in_play of this MarketDefinition.
        :type in_play: bool
        """

        self._in_play = in_play

    @property
    def key_line_definition(self):
        """Gets the key_line_definition of this MarketDefinition.


        :return: The key_line_definition of this MarketDefinition.
        :rtype: KeyLineDefinition
        """
        return self._key_line_definition

    @key_line_definition.setter
    def key_line_definition(self, key_line_definition):
        """Sets the key_line_definition of this MarketDefinition.


        :param key_line_definition: The key_line_definition of this MarketDefinition.
        :type key_line_definition: KeyLineDefinition
        """

        self._key_line_definition = key_line_definition

    @property
    def line_interval(self):
        """Gets the line_interval of this MarketDefinition.

        For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.

        :return: The line_interval of this MarketDefinition.
        :rtype: float
        """
        return self._line_interval

    @line_interval.setter
    def line_interval(self, line_interval):
        """Sets the line_interval of this MarketDefinition.

        For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.

        :param line_interval: The line_interval of this MarketDefinition.
        :type line_interval: float
        """

        self._line_interval = line_interval

    @property
    def line_max_unit(self):
        """Gets the line_max_unit of this MarketDefinition.

        For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).

        :return: The line_max_unit of this MarketDefinition.
        :rtype: float
        """
        return self._line_max_unit

    @line_max_unit.setter
    def line_max_unit(self, line_max_unit):
        """Sets the line_max_unit of this MarketDefinition.

        For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).

        :param line_max_unit: The line_max_unit of this MarketDefinition.
        :type line_max_unit: float
        """

        self._line_max_unit = line_max_unit

    @property
    def line_min_unit(self):
        """Gets the line_min_unit of this MarketDefinition.

        For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).

        :return: The line_min_unit of this MarketDefinition.
        :rtype: float
        """
        return self._line_min_unit

    @line_min_unit.setter
    def line_min_unit(self, line_min_unit):
        """Sets the line_min_unit of this MarketDefinition.

        For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).

        :param line_min_unit: The line_min_unit of this MarketDefinition.
        :type line_min_unit: float
        """

        self._line_min_unit = line_min_unit

    @property
    def market_base_rate(self):
        """Gets the market_base_rate of this MarketDefinition.


        :return: The market_base_rate of this MarketDefinition.
        :rtype: float
        """
        return self._market_base_rate

    @market_base_rate.setter
    def market_base_rate(self, market_base_rate):
        """Sets the market_base_rate of this MarketDefinition.


        :param market_base_rate: The market_base_rate of this MarketDefinition.
        :type market_base_rate: float
        """

        self._market_base_rate = market_base_rate

    @property
    def market_time(self):
        """Gets the market_time of this MarketDefinition.


        :return: The market_time of this MarketDefinition.
        :rtype: datetime
        """
        return self._market_time

    @market_time.setter
    def market_time(self, market_time):
        """Sets the market_time of this MarketDefinition.


        :param market_time: The market_time of this MarketDefinition.
        :type market_time: datetime
        """

        self._market_time = market_time

    @property
    def market_type(self):
        """Gets the market_type of this MarketDefinition.


        :return: The market_type of this MarketDefinition.
        :rtype: str
        """
        return self._market_type

    @market_type.setter
    def market_type(self, market_type):
        """Sets the market_type of this MarketDefinition.


        :param market_type: The market_type of this MarketDefinition.
        :type market_type: str
        """

        self._market_type = market_type

    @property
    def number_of_active_runners(self):
        """Gets the number_of_active_runners of this MarketDefinition.


        :return: The number_of_active_runners of this MarketDefinition.
        :rtype: int
        """
        return self._number_of_active_runners

    @number_of_active_runners.setter
    def number_of_active_runners(self, number_of_active_runners):
        """Sets the number_of_active_runners of this MarketDefinition.


        :param number_of_active_runners: The number_of_active_runners of this MarketDefinition.
        :type number_of_active_runners: int
        """

        self._number_of_active_runners = number_of_active_runners

    @property
    def number_of_winners(self):
        """Gets the number_of_winners of this MarketDefinition.


        :return: The number_of_winners of this MarketDefinition.
        :rtype: int
        """
        return self._number_of_winners

    @number_of_winners.setter
    def number_of_winners(self, number_of_winners):
        """Sets the number_of_winners of this MarketDefinition.


        :param number_of_winners: The number_of_winners of this MarketDefinition.
        :type number_of_winners: int
        """

        self._number_of_winners = number_of_winners

    @property
    def open_date(self):
        """Gets the open_date of this MarketDefinition.


        :return: The open_date of this MarketDefinition.
        :rtype: datetime
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this MarketDefinition.


        :param open_date: The open_date of this MarketDefinition.
        :type open_date: datetime
        """

        self._open_date = open_date

    @property
    def persistence_enabled(self):
        """Gets the persistence_enabled of this MarketDefinition.


        :return: The persistence_enabled of this MarketDefinition.
        :rtype: bool
        """
        return self._persistence_enabled

    @persistence_enabled.setter
    def persistence_enabled(self, persistence_enabled):
        """Sets the persistence_enabled of this MarketDefinition.


        :param persistence_enabled: The persistence_enabled of this MarketDefinition.
        :type persistence_enabled: bool
        """

        self._persistence_enabled = persistence_enabled

    @property
    def price_ladder_definition(self):
        """Gets the price_ladder_definition of this MarketDefinition.


        :return: The price_ladder_definition of this MarketDefinition.
        :rtype: PriceLadderDefinition
        """
        return self._price_ladder_definition

    @price_ladder_definition.setter
    def price_ladder_definition(self, price_ladder_definition):
        """Sets the price_ladder_definition of this MarketDefinition.


        :param price_ladder_definition: The price_ladder_definition of this MarketDefinition.
        :type price_ladder_definition: PriceLadderDefinition
        """

        self._price_ladder_definition = price_ladder_definition

    @property
    def race_type(self):
        """Gets the race_type of this MarketDefinition.


        :return: The race_type of this MarketDefinition.
        :rtype: str
        """
        return self._race_type

    @race_type.setter
    def race_type(self, race_type):
        """Sets the race_type of this MarketDefinition.


        :param race_type: The race_type of this MarketDefinition.
        :type race_type: str
        """

        self._race_type = race_type

    @property
    def regulators(self):
        """Gets the regulators of this MarketDefinition.

        The market regulators.

        :return: The regulators of this MarketDefinition.
        :rtype: List[str]
        """
        return self._regulators

    @regulators.setter
    def regulators(self, regulators):
        """Sets the regulators of this MarketDefinition.

        The market regulators.

        :param regulators: The regulators of this MarketDefinition.
        :type regulators: List[str]
        """

        self._regulators = regulators

    @property
    def runners(self):
        """Gets the runners of this MarketDefinition.


        :return: The runners of this MarketDefinition.
        :rtype: List[RunnerDefinition]
        """
        return self._runners

    @runners.setter
    def runners(self, runners):
        """Sets the runners of this MarketDefinition.


        :param runners: The runners of this MarketDefinition.
        :type runners: List[RunnerDefinition]
        """

        self._runners = runners

    @property
    def runners_voidable(self):
        """Gets the runners_voidable of this MarketDefinition.


        :return: The runners_voidable of this MarketDefinition.
        :rtype: bool
        """
        return self._runners_voidable

    @runners_voidable.setter
    def runners_voidable(self, runners_voidable):
        """Sets the runners_voidable of this MarketDefinition.


        :param runners_voidable: The runners_voidable of this MarketDefinition.
        :type runners_voidable: bool
        """

        self._runners_voidable = runners_voidable

    @property
    def settled_time(self):
        """Gets the settled_time of this MarketDefinition.


        :return: The settled_time of this MarketDefinition.
        :rtype: datetime
        """
        return self._settled_time

    @settled_time.setter
    def settled_time(self, settled_time):
        """Sets the settled_time of this MarketDefinition.


        :param settled_time: The settled_time of this MarketDefinition.
        :type settled_time: datetime
        """

        self._settled_time = settled_time

    @property
    def status(self):
        """Gets the status of this MarketDefinition.


        :return: The status of this MarketDefinition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarketDefinition.


        :param status: The status of this MarketDefinition.
        :type status: str
        """
        allowed_values = ["INACTIVE", "OPEN", "SUSPENDED", "CLOSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def suspend_time(self):
        """Gets the suspend_time of this MarketDefinition.


        :return: The suspend_time of this MarketDefinition.
        :rtype: datetime
        """
        return self._suspend_time

    @suspend_time.setter
    def suspend_time(self, suspend_time):
        """Sets the suspend_time of this MarketDefinition.


        :param suspend_time: The suspend_time of this MarketDefinition.
        :type suspend_time: datetime
        """

        self._suspend_time = suspend_time

    @property
    def timezone(self):
        """Gets the timezone of this MarketDefinition.


        :return: The timezone of this MarketDefinition.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this MarketDefinition.


        :param timezone: The timezone of this MarketDefinition.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def turn_in_play_enabled(self):
        """Gets the turn_in_play_enabled of this MarketDefinition.


        :return: The turn_in_play_enabled of this MarketDefinition.
        :rtype: bool
        """
        return self._turn_in_play_enabled

    @turn_in_play_enabled.setter
    def turn_in_play_enabled(self, turn_in_play_enabled):
        """Sets the turn_in_play_enabled of this MarketDefinition.


        :param turn_in_play_enabled: The turn_in_play_enabled of this MarketDefinition.
        :type turn_in_play_enabled: bool
        """

        self._turn_in_play_enabled = turn_in_play_enabled

    @property
    def venue(self):
        """Gets the venue of this MarketDefinition.


        :return: The venue of this MarketDefinition.
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this MarketDefinition.


        :param venue: The venue of this MarketDefinition.
        :type venue: str
        """

        self._venue = venue

    @property
    def version(self):
        """Gets the version of this MarketDefinition.


        :return: The version of this MarketDefinition.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MarketDefinition.


        :param version: The version of this MarketDefinition.
        :type version: int
        """

        self._version = version
