# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunnerDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment_factor: float=None, bsp: float=None, hc: float=None, id: int=None, removal_date: datetime=None, sort_priority: int=None, status: str=None):
        """RunnerDefinition - a model defined in OpenAPI

        :param adjustment_factor: The adjustment_factor of this RunnerDefinition.
        :param bsp: The bsp of this RunnerDefinition.
        :param hc: The hc of this RunnerDefinition.
        :param id: The id of this RunnerDefinition.
        :param removal_date: The removal_date of this RunnerDefinition.
        :param sort_priority: The sort_priority of this RunnerDefinition.
        :param status: The status of this RunnerDefinition.
        """
        self.openapi_types = {
            'adjustment_factor': float,
            'bsp': float,
            'hc': float,
            'id': int,
            'removal_date': datetime,
            'sort_priority': int,
            'status': str
        }

        self.attribute_map = {
            'adjustment_factor': 'adjustmentFactor',
            'bsp': 'bsp',
            'hc': 'hc',
            'id': 'id',
            'removal_date': 'removalDate',
            'sort_priority': 'sortPriority',
            'status': 'status'
        }

        self._adjustment_factor = adjustment_factor
        self._bsp = bsp
        self._hc = hc
        self._id = id
        self._removal_date = removal_date
        self._sort_priority = sort_priority
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunnerDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunnerDefinition of this RunnerDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment_factor(self):
        """Gets the adjustment_factor of this RunnerDefinition.


        :return: The adjustment_factor of this RunnerDefinition.
        :rtype: float
        """
        return self._adjustment_factor

    @adjustment_factor.setter
    def adjustment_factor(self, adjustment_factor):
        """Sets the adjustment_factor of this RunnerDefinition.


        :param adjustment_factor: The adjustment_factor of this RunnerDefinition.
        :type adjustment_factor: float
        """

        self._adjustment_factor = adjustment_factor

    @property
    def bsp(self):
        """Gets the bsp of this RunnerDefinition.


        :return: The bsp of this RunnerDefinition.
        :rtype: float
        """
        return self._bsp

    @bsp.setter
    def bsp(self, bsp):
        """Sets the bsp of this RunnerDefinition.


        :param bsp: The bsp of this RunnerDefinition.
        :type bsp: float
        """

        self._bsp = bsp

    @property
    def hc(self):
        """Gets the hc of this RunnerDefinition.

        Handicap - the handicap of the runner (selection) (null if not applicable)

        :return: The hc of this RunnerDefinition.
        :rtype: float
        """
        return self._hc

    @hc.setter
    def hc(self, hc):
        """Sets the hc of this RunnerDefinition.

        Handicap - the handicap of the runner (selection) (null if not applicable)

        :param hc: The hc of this RunnerDefinition.
        :type hc: float
        """

        self._hc = hc

    @property
    def id(self):
        """Gets the id of this RunnerDefinition.

        Selection Id - the id of the runner (selection)

        :return: The id of this RunnerDefinition.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunnerDefinition.

        Selection Id - the id of the runner (selection)

        :param id: The id of this RunnerDefinition.
        :type id: int
        """

        self._id = id

    @property
    def removal_date(self):
        """Gets the removal_date of this RunnerDefinition.


        :return: The removal_date of this RunnerDefinition.
        :rtype: datetime
        """
        return self._removal_date

    @removal_date.setter
    def removal_date(self, removal_date):
        """Sets the removal_date of this RunnerDefinition.


        :param removal_date: The removal_date of this RunnerDefinition.
        :type removal_date: datetime
        """

        self._removal_date = removal_date

    @property
    def sort_priority(self):
        """Gets the sort_priority of this RunnerDefinition.


        :return: The sort_priority of this RunnerDefinition.
        :rtype: int
        """
        return self._sort_priority

    @sort_priority.setter
    def sort_priority(self, sort_priority):
        """Sets the sort_priority of this RunnerDefinition.


        :param sort_priority: The sort_priority of this RunnerDefinition.
        :type sort_priority: int
        """

        self._sort_priority = sort_priority

    @property
    def status(self):
        """Gets the status of this RunnerDefinition.


        :return: The status of this RunnerDefinition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunnerDefinition.


        :param status: The status of this RunnerDefinition.
        :type status: str
        """
        allowed_values = ["ACTIVE", "WINNER", "LOSER", "REMOVED", "REMOVED_VACANT", "HIDDEN", "PLACED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
