# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, betting_types: List[str]=None, bsp_market: bool=None, country_codes: List[str]=None, event_ids: List[str]=None, event_type_ids: List[str]=None, market_ids: List[str]=None, market_types: List[str]=None, race_types: List[str]=None, turn_in_play_enabled: bool=None, venues: List[str]=None):
        """MarketFilter - a model defined in OpenAPI

        :param betting_types: The betting_types of this MarketFilter.
        :param bsp_market: The bsp_market of this MarketFilter.
        :param country_codes: The country_codes of this MarketFilter.
        :param event_ids: The event_ids of this MarketFilter.
        :param event_type_ids: The event_type_ids of this MarketFilter.
        :param market_ids: The market_ids of this MarketFilter.
        :param market_types: The market_types of this MarketFilter.
        :param race_types: The race_types of this MarketFilter.
        :param turn_in_play_enabled: The turn_in_play_enabled of this MarketFilter.
        :param venues: The venues of this MarketFilter.
        """
        self.openapi_types = {
            'betting_types': List[str],
            'bsp_market': bool,
            'country_codes': List[str],
            'event_ids': List[str],
            'event_type_ids': List[str],
            'market_ids': List[str],
            'market_types': List[str],
            'race_types': List[str],
            'turn_in_play_enabled': bool,
            'venues': List[str]
        }

        self.attribute_map = {
            'betting_types': 'bettingTypes',
            'bsp_market': 'bspMarket',
            'country_codes': 'countryCodes',
            'event_ids': 'eventIds',
            'event_type_ids': 'eventTypeIds',
            'market_ids': 'marketIds',
            'market_types': 'marketTypes',
            'race_types': 'raceTypes',
            'turn_in_play_enabled': 'turnInPlayEnabled',
            'venues': 'venues'
        }

        self._betting_types = betting_types
        self._bsp_market = bsp_market
        self._country_codes = country_codes
        self._event_ids = event_ids
        self._event_type_ids = event_type_ids
        self._market_ids = market_ids
        self._market_types = market_types
        self._race_types = race_types
        self._turn_in_play_enabled = turn_in_play_enabled
        self._venues = venues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketFilter of this MarketFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def betting_types(self):
        """Gets the betting_types of this MarketFilter.


        :return: The betting_types of this MarketFilter.
        :rtype: List[str]
        """
        return self._betting_types

    @betting_types.setter
    def betting_types(self, betting_types):
        """Sets the betting_types of this MarketFilter.


        :param betting_types: The betting_types of this MarketFilter.
        :type betting_types: List[str]
        """
        allowed_values = ["ODDS", "LINE", "RANGE", "ASIAN_HANDICAP_DOUBLE_LINE", "ASIAN_HANDICAP_SINGLE_LINE"]  # noqa: E501
        if not set(betting_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `betting_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(betting_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._betting_types = betting_types

    @property
    def bsp_market(self):
        """Gets the bsp_market of this MarketFilter.


        :return: The bsp_market of this MarketFilter.
        :rtype: bool
        """
        return self._bsp_market

    @bsp_market.setter
    def bsp_market(self, bsp_market):
        """Sets the bsp_market of this MarketFilter.


        :param bsp_market: The bsp_market of this MarketFilter.
        :type bsp_market: bool
        """

        self._bsp_market = bsp_market

    @property
    def country_codes(self):
        """Gets the country_codes of this MarketFilter.


        :return: The country_codes of this MarketFilter.
        :rtype: List[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this MarketFilter.


        :param country_codes: The country_codes of this MarketFilter.
        :type country_codes: List[str]
        """

        self._country_codes = country_codes

    @property
    def event_ids(self):
        """Gets the event_ids of this MarketFilter.


        :return: The event_ids of this MarketFilter.
        :rtype: List[str]
        """
        return self._event_ids

    @event_ids.setter
    def event_ids(self, event_ids):
        """Sets the event_ids of this MarketFilter.


        :param event_ids: The event_ids of this MarketFilter.
        :type event_ids: List[str]
        """

        self._event_ids = event_ids

    @property
    def event_type_ids(self):
        """Gets the event_type_ids of this MarketFilter.


        :return: The event_type_ids of this MarketFilter.
        :rtype: List[str]
        """
        return self._event_type_ids

    @event_type_ids.setter
    def event_type_ids(self, event_type_ids):
        """Sets the event_type_ids of this MarketFilter.


        :param event_type_ids: The event_type_ids of this MarketFilter.
        :type event_type_ids: List[str]
        """

        self._event_type_ids = event_type_ids

    @property
    def market_ids(self):
        """Gets the market_ids of this MarketFilter.


        :return: The market_ids of this MarketFilter.
        :rtype: List[str]
        """
        return self._market_ids

    @market_ids.setter
    def market_ids(self, market_ids):
        """Sets the market_ids of this MarketFilter.


        :param market_ids: The market_ids of this MarketFilter.
        :type market_ids: List[str]
        """

        self._market_ids = market_ids

    @property
    def market_types(self):
        """Gets the market_types of this MarketFilter.


        :return: The market_types of this MarketFilter.
        :rtype: List[str]
        """
        return self._market_types

    @market_types.setter
    def market_types(self, market_types):
        """Sets the market_types of this MarketFilter.


        :param market_types: The market_types of this MarketFilter.
        :type market_types: List[str]
        """

        self._market_types = market_types

    @property
    def race_types(self):
        """Gets the race_types of this MarketFilter.


        :return: The race_types of this MarketFilter.
        :rtype: List[str]
        """
        return self._race_types

    @race_types.setter
    def race_types(self, race_types):
        """Sets the race_types of this MarketFilter.


        :param race_types: The race_types of this MarketFilter.
        :type race_types: List[str]
        """

        self._race_types = race_types

    @property
    def turn_in_play_enabled(self):
        """Gets the turn_in_play_enabled of this MarketFilter.


        :return: The turn_in_play_enabled of this MarketFilter.
        :rtype: bool
        """
        return self._turn_in_play_enabled

    @turn_in_play_enabled.setter
    def turn_in_play_enabled(self, turn_in_play_enabled):
        """Sets the turn_in_play_enabled of this MarketFilter.


        :param turn_in_play_enabled: The turn_in_play_enabled of this MarketFilter.
        :type turn_in_play_enabled: bool
        """

        self._turn_in_play_enabled = turn_in_play_enabled

    @property
    def venues(self):
        """Gets the venues of this MarketFilter.


        :return: The venues of this MarketFilter.
        :rtype: List[str]
        """
        return self._venues

    @venues.setter
    def venues(self, venues):
        """Sets the venues of this MarketFilter.


        :param venues: The venues of this MarketFilter.
        :type venues: List[str]
        """

        self._venues = venues
