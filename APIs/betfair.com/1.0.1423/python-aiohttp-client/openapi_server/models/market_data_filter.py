# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketDataFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[str]=None, ladder_levels: int=None):
        """MarketDataFilter - a model defined in OpenAPI

        :param fields: The fields of this MarketDataFilter.
        :param ladder_levels: The ladder_levels of this MarketDataFilter.
        """
        self.openapi_types = {
            'fields': List[str],
            'ladder_levels': int
        }

        self.attribute_map = {
            'fields': 'fields',
            'ladder_levels': 'ladderLevels'
        }

        self._fields = fields
        self._ladder_levels = ladder_levels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketDataFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketDataFilter of this MarketDataFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this MarketDataFilter.


        :return: The fields of this MarketDataFilter.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this MarketDataFilter.


        :param fields: The fields of this MarketDataFilter.
        :type fields: List[str]
        """
        allowed_values = ["EX_BEST_OFFERS_DISP", "EX_BEST_OFFERS", "EX_ALL_OFFERS", "EX_TRADED", "EX_TRADED_VOL", "EX_LTP", "EX_MARKET_DEF", "SP_TRADED", "SP_PROJECTED"]  # noqa: E501
        if not set(fields).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `fields` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(fields) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._fields = fields

    @property
    def ladder_levels(self):
        """Gets the ladder_levels of this MarketDataFilter.


        :return: The ladder_levels of this MarketDataFilter.
        :rtype: int
        """
        return self._ladder_levels

    @ladder_levels.setter
    def ladder_levels(self, ladder_levels):
        """Sets the ladder_levels of this MarketDataFilter.


        :param ladder_levels: The ladder_levels of this MarketDataFilter.
        :type ladder_levels: int
        """

        self._ladder_levels = ladder_levels
