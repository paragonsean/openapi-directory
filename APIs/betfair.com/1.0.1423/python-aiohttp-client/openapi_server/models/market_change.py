# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.market_definition import MarketDefinition
from openapi_server.models.runner_change import RunnerChange
from openapi_server import util


class MarketChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, con: bool=None, id: str=None, img: bool=None, market_definition: MarketDefinition=None, rc: List[RunnerChange]=None, tv: float=None):
        """MarketChange - a model defined in OpenAPI

        :param con: The con of this MarketChange.
        :param id: The id of this MarketChange.
        :param img: The img of this MarketChange.
        :param market_definition: The market_definition of this MarketChange.
        :param rc: The rc of this MarketChange.
        :param tv: The tv of this MarketChange.
        """
        self.openapi_types = {
            'con': bool,
            'id': str,
            'img': bool,
            'market_definition': MarketDefinition,
            'rc': List[RunnerChange],
            'tv': float
        }

        self.attribute_map = {
            'con': 'con',
            'id': 'id',
            'img': 'img',
            'market_definition': 'marketDefinition',
            'rc': 'rc',
            'tv': 'tv'
        }

        self._con = con
        self._id = id
        self._img = img
        self._market_definition = market_definition
        self._rc = rc
        self._tv = tv

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketChange of this MarketChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def con(self):
        """Gets the con of this MarketChange.

        Conflated - have more than a single change been combined (or null if not conflated)

        :return: The con of this MarketChange.
        :rtype: bool
        """
        return self._con

    @con.setter
    def con(self, con):
        """Sets the con of this MarketChange.

        Conflated - have more than a single change been combined (or null if not conflated)

        :param con: The con of this MarketChange.
        :type con: bool
        """

        self._con = con

    @property
    def id(self):
        """Gets the id of this MarketChange.

        Market Id - the id of the market

        :return: The id of this MarketChange.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketChange.

        Market Id - the id of the market

        :param id: The id of this MarketChange.
        :type id: str
        """

        self._id = id

    @property
    def img(self):
        """Gets the img of this MarketChange.

        Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)

        :return: The img of this MarketChange.
        :rtype: bool
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this MarketChange.

        Image - replace existing prices / data with the data supplied: it is not a delta (or null if delta)

        :param img: The img of this MarketChange.
        :type img: bool
        """

        self._img = img

    @property
    def market_definition(self):
        """Gets the market_definition of this MarketChange.


        :return: The market_definition of this MarketChange.
        :rtype: MarketDefinition
        """
        return self._market_definition

    @market_definition.setter
    def market_definition(self, market_definition):
        """Sets the market_definition of this MarketChange.


        :param market_definition: The market_definition of this MarketChange.
        :type market_definition: MarketDefinition
        """

        self._market_definition = market_definition

    @property
    def rc(self):
        """Gets the rc of this MarketChange.

        Runner Changes - a list of changes to runners (or null if un-changed)

        :return: The rc of this MarketChange.
        :rtype: List[RunnerChange]
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this MarketChange.

        Runner Changes - a list of changes to runners (or null if un-changed)

        :param rc: The rc of this MarketChange.
        :type rc: List[RunnerChange]
        """

        self._rc = rc

    @property
    def tv(self):
        """Gets the tv of this MarketChange.

        The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)

        :return: The tv of this MarketChange.
        :rtype: float
        """
        return self._tv

    @tv.setter
    def tv(self, tv):
        """Sets the tv of this MarketChange.

        The total amount matched across the market. This value is truncated at 2dp (or null if un-changed)

        :param tv: The tv of this MarketChange.
        :type tv: float
        """

        self._tv = tv
