/**
 * Arespass
 * Analyzes a password and calculates its entropy.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEc.h
 *
 * 
 */

#ifndef OAIEc_H
#define OAIEc_H

#include <QJsonObject>

#include "OAIEc_alphabetSequence_inner.h"
#include "OAIEc_entropyDistribution_inner.h"
#include "OAIEc_keyboardSequence_inner.h"
#include "OAIEc_numberSequence_inner.h"
#include "OAIEc_repeatedChars_inner.h"
#include "OAIEc_total_inner.h"
#include "OAIEc_words_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEc_alphabetSequence_inner;
class OAIEc_entropyDistribution_inner;
class OAIEc_keyboardSequence_inner;
class OAIEc_numberSequence_inner;
class OAIEc_repeatedChars_inner;
class OAIEc_total_inner;
class OAIEc_words_inner;

class OAIEc : public OAIObject {
public:
    OAIEc();
    OAIEc(QString json);
    ~OAIEc() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIEc_alphabetSequence_inner> getAlphabetSequence() const;
    void setAlphabetSequence(const QList<OAIEc_alphabetSequence_inner> &alphabet_sequence);
    bool is_alphabet_sequence_Set() const;
    bool is_alphabet_sequence_Valid() const;

    QString getApiVersion() const;
    void setApiVersion(const QString &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QString getDetectedKeyboard() const;
    void setDetectedKeyboard(const QString &detected_keyboard);
    bool is_detected_keyboard_Set() const;
    bool is_detected_keyboard_Valid() const;

    double getEfficiency() const;
    void setEfficiency(const double &efficiency);
    bool is_efficiency_Set() const;
    bool is_efficiency_Valid() const;

    double getEntropy() const;
    void setEntropy(const double &entropy);
    bool is_entropy_Set() const;
    bool is_entropy_Valid() const;

    QList<OAIEc_entropyDistribution_inner> getEntropyDistribution() const;
    void setEntropyDistribution(const QList<OAIEc_entropyDistribution_inner> &entropy_distribution);
    bool is_entropy_distribution_Set() const;
    bool is_entropy_distribution_Valid() const;

    double getIdealEntropy() const;
    void setIdealEntropy(const double &ideal_entropy);
    bool is_ideal_entropy_Set() const;
    bool is_ideal_entropy_Valid() const;

    QList<OAIEc_keyboardSequence_inner> getKeyboardSequence() const;
    void setKeyboardSequence(const QList<OAIEc_keyboardSequence_inner> &keyboard_sequence);
    bool is_keyboard_sequence_Set() const;
    bool is_keyboard_sequence_Valid() const;

    QString getL33tPassword() const;
    void setL33tPassword(const QString &l33t_password);
    bool is_l33t_password_Set() const;
    bool is_l33t_password_Valid() const;

    double getNonUniformEntropyDistributionPenalty() const;
    void setNonUniformEntropyDistributionPenalty(const double &non_uniform_entropy_distribution_penalty);
    bool is_non_uniform_entropy_distribution_penalty_Set() const;
    bool is_non_uniform_entropy_distribution_penalty_Valid() const;

    QList<OAIEc_numberSequence_inner> getNumberSequence() const;
    void setNumberSequence(const QList<OAIEc_numberSequence_inner> &number_sequence);
    bool is_number_sequence_Set() const;
    bool is_number_sequence_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    qint32 getPasswordLength() const;
    void setPasswordLength(const qint32 &password_length);
    bool is_password_length_Set() const;
    bool is_password_length_Valid() const;

    double getPenalty() const;
    void setPenalty(const double &penalty);
    bool is_penalty_Set() const;
    bool is_penalty_Valid() const;

    QList<OAIEc_repeatedChars_inner> getRepeatedChars() const;
    void setRepeatedChars(const QList<OAIEc_repeatedChars_inner> &repeated_chars);
    bool is_repeated_chars_Set() const;
    bool is_repeated_chars_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    double getRequestTimestamp() const;
    void setRequestTimestamp(const double &request_timestamp);
    bool is_request_timestamp_Set() const;
    bool is_request_timestamp_Valid() const;

    QList<QString> getSummary() const;
    void setSummary(const QList<QString> &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    QList<OAIEc_total_inner> getTotal() const;
    void setTotal(const QList<OAIEc_total_inner> &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    QList<OAIEc_words_inner> getWords() const;
    void setWords(const QList<OAIEc_words_inner> &words);
    bool is_words_Set() const;
    bool is_words_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIEc_alphabetSequence_inner> m_alphabet_sequence;
    bool m_alphabet_sequence_isSet;
    bool m_alphabet_sequence_isValid;

    QString m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QString m_detected_keyboard;
    bool m_detected_keyboard_isSet;
    bool m_detected_keyboard_isValid;

    double m_efficiency;
    bool m_efficiency_isSet;
    bool m_efficiency_isValid;

    double m_entropy;
    bool m_entropy_isSet;
    bool m_entropy_isValid;

    QList<OAIEc_entropyDistribution_inner> m_entropy_distribution;
    bool m_entropy_distribution_isSet;
    bool m_entropy_distribution_isValid;

    double m_ideal_entropy;
    bool m_ideal_entropy_isSet;
    bool m_ideal_entropy_isValid;

    QList<OAIEc_keyboardSequence_inner> m_keyboard_sequence;
    bool m_keyboard_sequence_isSet;
    bool m_keyboard_sequence_isValid;

    QString m_l33t_password;
    bool m_l33t_password_isSet;
    bool m_l33t_password_isValid;

    double m_non_uniform_entropy_distribution_penalty;
    bool m_non_uniform_entropy_distribution_penalty_isSet;
    bool m_non_uniform_entropy_distribution_penalty_isValid;

    QList<OAIEc_numberSequence_inner> m_number_sequence;
    bool m_number_sequence_isSet;
    bool m_number_sequence_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    qint32 m_password_length;
    bool m_password_length_isSet;
    bool m_password_length_isValid;

    double m_penalty;
    bool m_penalty_isSet;
    bool m_penalty_isValid;

    QList<OAIEc_repeatedChars_inner> m_repeated_chars;
    bool m_repeated_chars_isSet;
    bool m_repeated_chars_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    double m_request_timestamp;
    bool m_request_timestamp_isSet;
    bool m_request_timestamp_isValid;

    QList<QString> m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    QList<OAIEc_total_inner> m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    QList<OAIEc_words_inner> m_words;
    bool m_words_isSet;
    bool m_words_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEc)

#endif // OAIEc_H
