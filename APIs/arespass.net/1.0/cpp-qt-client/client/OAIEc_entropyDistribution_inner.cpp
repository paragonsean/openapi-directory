/**
 * Arespass
 * Analyzes a password and calculates its entropy.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEc_entropyDistribution_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEc_entropyDistribution_inner::OAIEc_entropyDistribution_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEc_entropyDistribution_inner::OAIEc_entropyDistribution_inner() {
    this->initializeModel();
}

OAIEc_entropyDistribution_inner::~OAIEc_entropyDistribution_inner() {}

void OAIEc_entropyDistribution_inner::initializeModel() {

    m_r_char_isSet = false;
    m_r_char_isValid = false;

    m_l33tchar_isSet = false;
    m_l33tchar_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;
}

void OAIEc_entropyDistribution_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEc_entropyDistribution_inner::fromJsonObject(QJsonObject json) {

    m_r_char_isValid = ::OpenAPI::fromJsonValue(m_r_char, json[QString("char")]);
    m_r_char_isSet = !json[QString("char")].isNull() && m_r_char_isValid;

    m_l33tchar_isValid = ::OpenAPI::fromJsonValue(m_l33tchar, json[QString("l33tchar")]);
    m_l33tchar_isSet = !json[QString("l33tchar")].isNull() && m_l33tchar_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;
}

QString OAIEc_entropyDistribution_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEc_entropyDistribution_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_r_char_isSet) {
        obj.insert(QString("char"), ::OpenAPI::toJsonValue(m_r_char));
    }
    if (m_l33tchar_isSet) {
        obj.insert(QString("l33tchar"), ::OpenAPI::toJsonValue(m_l33tchar));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    return obj;
}

QString OAIEc_entropyDistribution_inner::getRChar() const {
    return m_r_char;
}
void OAIEc_entropyDistribution_inner::setRChar(const QString &r_char) {
    m_r_char = r_char;
    m_r_char_isSet = true;
}

bool OAIEc_entropyDistribution_inner::is_r_char_Set() const{
    return m_r_char_isSet;
}

bool OAIEc_entropyDistribution_inner::is_r_char_Valid() const{
    return m_r_char_isValid;
}

QString OAIEc_entropyDistribution_inner::getL33tchar() const {
    return m_l33tchar;
}
void OAIEc_entropyDistribution_inner::setL33tchar(const QString &l33tchar) {
    m_l33tchar = l33tchar;
    m_l33tchar_isSet = true;
}

bool OAIEc_entropyDistribution_inner::is_l33tchar_Set() const{
    return m_l33tchar_isSet;
}

bool OAIEc_entropyDistribution_inner::is_l33tchar_Valid() const{
    return m_l33tchar_isValid;
}

double OAIEc_entropyDistribution_inner::getPercentage() const {
    return m_percentage;
}
void OAIEc_entropyDistribution_inner::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIEc_entropyDistribution_inner::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIEc_entropyDistribution_inner::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAIEc_entropyDistribution_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_char_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l33tchar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEc_entropyDistribution_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
