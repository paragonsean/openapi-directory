/*
 * Arespass
 * Analyzes a password and calculates its entropy.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.About;
import java.math.BigDecimal;
import org.openapitools.client.model.Ec;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aboutGet
     * @param outputFormat **The format of the returned metadata.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **The metadata about this API&amp;#58; version number, release date and available languages.**  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**                  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aboutGetCall(String outputFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/about";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aboutGetValidateBeforeCall(String outputFormat, final ApiCallback _callback) throws ApiException {
        return aboutGetCall(outputFormat, _callback);

    }

    /**
     * Metadata about this API&amp;#58; version number, release date and available languages.  Metadata requests are NOT billed. 
     * 
     * @param outputFormat **The format of the returned metadata.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @return About
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **The metadata about this API&amp;#58; version number, release date and available languages.**  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**                  </td><td>  -  </td></tr>
     </table>
     */
    public About aboutGet(String outputFormat) throws ApiException {
        ApiResponse<About> localVarResp = aboutGetWithHttpInfo(outputFormat);
        return localVarResp.getData();
    }

    /**
     * Metadata about this API&amp;#58; version number, release date and available languages.  Metadata requests are NOT billed. 
     * 
     * @param outputFormat **The format of the returned metadata.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @return ApiResponse&lt;About&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **The metadata about this API&amp;#58; version number, release date and available languages.**  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**                  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<About> aboutGetWithHttpInfo(String outputFormat) throws ApiException {
        okhttp3.Call localVarCall = aboutGetValidateBeforeCall(outputFormat, null);
        Type localVarReturnType = new TypeToken<About>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metadata about this API&amp;#58; version number, release date and available languages.  Metadata requests are NOT billed.  (asynchronously)
     * 
     * @param outputFormat **The format of the returned metadata.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **The metadata about this API&amp;#58; version number, release date and available languages.**  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**                  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aboutGetAsync(String outputFormat, final ApiCallback<About> _callback) throws ApiException {

        okhttp3.Call localVarCall = aboutGetValidateBeforeCall(outputFormat, _callback);
        Type localVarReturnType = new TypeToken<About>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecGet
     * @param password **The password to be analyzed.**  Minimum length is 4 characters; maximum length is 128 characters.  Beware that certain characters like &#39;&amp;#35;&#39;, &#39;&amp;#61;&#39; or &#39;&amp;#63;&#39; must be properly encoded.  For more information about this issue, please refer to RFC 3986 (\&quot;*Uniform Resource Identifier (URI): Generic Syntax*\&quot;), sections 2.1, 2.2 and 2.4.  (required)
     * @param outputFormat **The format of the returned analysis.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @param penalty **The penalty applied to each character that is part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  The character used as decimal separator is always &#39;&amp;#46;&#39;. Hence, a parameter value like *0,33* would be illegal.  The default value is *0.25*.  (optional)
     * @param reqId **An identifier for this request.**  The request identifier is a string that must match the regular expression *_/(?i)^[a-z0-9]{8,16}$/_*.  This identifier is echoed in the returned response. Its value has no effect on the password analysis.  If this parameter is unset, a randomly generated identifier will be automatically assigned to this request.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The password analysis, including the calculated entropy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecGetCall(String password, String outputFormat, BigDecimal penalty, String reqId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (penalty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("penalty", penalty));
        }

        if (reqId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reqId", reqId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecGetValidateBeforeCall(String password, String outputFormat, BigDecimal penalty, String reqId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling ecGet(Async)");
        }

        return ecGetCall(password, outputFormat, penalty, reqId, _callback);

    }

    /**
     * The entropy calculator - alias ec -, analyzes a password and calculates its entropy.  Entropy calculator requests are billed. 
     * 
     * @param password **The password to be analyzed.**  Minimum length is 4 characters; maximum length is 128 characters.  Beware that certain characters like &#39;&amp;#35;&#39;, &#39;&amp;#61;&#39; or &#39;&amp;#63;&#39; must be properly encoded.  For more information about this issue, please refer to RFC 3986 (\&quot;*Uniform Resource Identifier (URI): Generic Syntax*\&quot;), sections 2.1, 2.2 and 2.4.  (required)
     * @param outputFormat **The format of the returned analysis.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @param penalty **The penalty applied to each character that is part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  The character used as decimal separator is always &#39;&amp;#46;&#39;. Hence, a parameter value like *0,33* would be illegal.  The default value is *0.25*.  (optional)
     * @param reqId **An identifier for this request.**  The request identifier is a string that must match the regular expression *_/(?i)^[a-z0-9]{8,16}$/_*.  This identifier is echoed in the returned response. Its value has no effect on the password analysis.  If this parameter is unset, a randomly generated identifier will be automatically assigned to this request.  (optional)
     * @return Ec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The password analysis, including the calculated entropy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**  </td><td>  -  </td></tr>
     </table>
     */
    public Ec ecGet(String password, String outputFormat, BigDecimal penalty, String reqId) throws ApiException {
        ApiResponse<Ec> localVarResp = ecGetWithHttpInfo(password, outputFormat, penalty, reqId);
        return localVarResp.getData();
    }

    /**
     * The entropy calculator - alias ec -, analyzes a password and calculates its entropy.  Entropy calculator requests are billed. 
     * 
     * @param password **The password to be analyzed.**  Minimum length is 4 characters; maximum length is 128 characters.  Beware that certain characters like &#39;&amp;#35;&#39;, &#39;&amp;#61;&#39; or &#39;&amp;#63;&#39; must be properly encoded.  For more information about this issue, please refer to RFC 3986 (\&quot;*Uniform Resource Identifier (URI): Generic Syntax*\&quot;), sections 2.1, 2.2 and 2.4.  (required)
     * @param outputFormat **The format of the returned analysis.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @param penalty **The penalty applied to each character that is part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  The character used as decimal separator is always &#39;&amp;#46;&#39;. Hence, a parameter value like *0,33* would be illegal.  The default value is *0.25*.  (optional)
     * @param reqId **An identifier for this request.**  The request identifier is a string that must match the regular expression *_/(?i)^[a-z0-9]{8,16}$/_*.  This identifier is echoed in the returned response. Its value has no effect on the password analysis.  If this parameter is unset, a randomly generated identifier will be automatically assigned to this request.  (optional)
     * @return ApiResponse&lt;Ec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The password analysis, including the calculated entropy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ec> ecGetWithHttpInfo(String password, String outputFormat, BigDecimal penalty, String reqId) throws ApiException {
        okhttp3.Call localVarCall = ecGetValidateBeforeCall(password, outputFormat, penalty, reqId, null);
        Type localVarReturnType = new TypeToken<Ec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The entropy calculator - alias ec -, analyzes a password and calculates its entropy.  Entropy calculator requests are billed.  (asynchronously)
     * 
     * @param password **The password to be analyzed.**  Minimum length is 4 characters; maximum length is 128 characters.  Beware that certain characters like &#39;&amp;#35;&#39;, &#39;&amp;#61;&#39; or &#39;&amp;#63;&#39; must be properly encoded.  For more information about this issue, please refer to RFC 3986 (\&quot;*Uniform Resource Identifier (URI): Generic Syntax*\&quot;), sections 2.1, 2.2 and 2.4.  (required)
     * @param outputFormat **The format of the returned analysis.**  Allowed values are *json*, *xml* and *yaml*.  The default value is *xml*.  (optional)
     * @param penalty **The penalty applied to each character that is part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  The character used as decimal separator is always &#39;&amp;#46;&#39;. Hence, a parameter value like *0,33* would be illegal.  The default value is *0.25*.  (optional)
     * @param reqId **An identifier for this request.**  The request identifier is a string that must match the regular expression *_/(?i)^[a-z0-9]{8,16}$/_*.  This identifier is echoed in the returned response. Its value has no effect on the password analysis.  If this parameter is unset, a randomly generated identifier will be automatically assigned to this request.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The password analysis, including the calculated entropy. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **At least one error was found in the request parameters.**  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> **HTTP method POST is not allowed.**  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Unexpected server error.**  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecGetAsync(String password, String outputFormat, BigDecimal penalty, String reqId, final ApiCallback<Ec> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecGetValidateBeforeCall(password, outputFormat, penalty, reqId, _callback);
        Type localVarReturnType = new TypeToken<Ec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
