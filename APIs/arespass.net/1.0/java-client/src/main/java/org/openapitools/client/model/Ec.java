/*
 * Arespass
 * Analyzes a password and calculates its entropy.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EcAlphabetSequenceInner;
import org.openapitools.client.model.EcEntropyDistributionInner;
import org.openapitools.client.model.EcKeyboardSequenceInner;
import org.openapitools.client.model.EcNumberSequenceInner;
import org.openapitools.client.model.EcRepeatedCharsInner;
import org.openapitools.client.model.EcTotalInner;
import org.openapitools.client.model.EcWordsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:13.021156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ec {
  public static final String SERIALIZED_NAME_ALPHABET_SEQUENCE = "alphabetSequence";
  @SerializedName(SERIALIZED_NAME_ALPHABET_SEQUENCE)
  private List<EcAlphabetSequenceInner> alphabetSequence = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_DETECTED_KEYBOARD = "detectedKeyboard";
  @SerializedName(SERIALIZED_NAME_DETECTED_KEYBOARD)
  private String detectedKeyboard;

  public static final String SERIALIZED_NAME_EFFICIENCY = "efficiency";
  @SerializedName(SERIALIZED_NAME_EFFICIENCY)
  private BigDecimal efficiency;

  public static final String SERIALIZED_NAME_ENTROPY = "entropy";
  @SerializedName(SERIALIZED_NAME_ENTROPY)
  private BigDecimal entropy;

  public static final String SERIALIZED_NAME_ENTROPY_DISTRIBUTION = "entropyDistribution";
  @SerializedName(SERIALIZED_NAME_ENTROPY_DISTRIBUTION)
  private List<EcEntropyDistributionInner> entropyDistribution = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDEAL_ENTROPY = "idealEntropy";
  @SerializedName(SERIALIZED_NAME_IDEAL_ENTROPY)
  private BigDecimal idealEntropy;

  public static final String SERIALIZED_NAME_KEYBOARD_SEQUENCE = "keyboardSequence";
  @SerializedName(SERIALIZED_NAME_KEYBOARD_SEQUENCE)
  private List<EcKeyboardSequenceInner> keyboardSequence = new ArrayList<>();

  public static final String SERIALIZED_NAME_L33T_PASSWORD = "l33tPassword";
  @SerializedName(SERIALIZED_NAME_L33T_PASSWORD)
  private String l33tPassword;

  public static final String SERIALIZED_NAME_NON_UNIFORM_ENTROPY_DISTRIBUTION_PENALTY = "nonUniformEntropyDistributionPenalty";
  @SerializedName(SERIALIZED_NAME_NON_UNIFORM_ENTROPY_DISTRIBUTION_PENALTY)
  private BigDecimal nonUniformEntropyDistributionPenalty;

  public static final String SERIALIZED_NAME_NUMBER_SEQUENCE = "numberSequence";
  @SerializedName(SERIALIZED_NAME_NUMBER_SEQUENCE)
  private List<EcNumberSequenceInner> numberSequence = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "passwordLength";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  private Integer passwordLength;

  public static final String SERIALIZED_NAME_PENALTY = "penalty";
  @SerializedName(SERIALIZED_NAME_PENALTY)
  private BigDecimal penalty;

  public static final String SERIALIZED_NAME_REPEATED_CHARS = "repeatedChars";
  @SerializedName(SERIALIZED_NAME_REPEATED_CHARS)
  private List<EcRepeatedCharsInner> repeatedChars = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_TIMESTAMP = "requestTimestamp";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIMESTAMP)
  private BigDecimal requestTimestamp;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private List<String> summary = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private List<EcTotalInner> total = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORDS = "words";
  @SerializedName(SERIALIZED_NAME_WORDS)
  private List<EcWordsInner> words = new ArrayList<>();

  public Ec() {
  }

  public Ec alphabetSequence(List<EcAlphabetSequenceInner> alphabetSequence) {
    this.alphabetSequence = alphabetSequence;
    return this;
  }

  public Ec addAlphabetSequenceItem(EcAlphabetSequenceInner alphabetSequenceItem) {
    if (this.alphabetSequence == null) {
      this.alphabetSequence = new ArrayList<>();
    }
    this.alphabetSequence.add(alphabetSequenceItem);
    return this;
  }

  /**
   * **The penalty applied to each character that has been found to be part of an alphabet sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
   * @return alphabetSequence
   */
  @javax.annotation.Nullable
  public List<EcAlphabetSequenceInner> getAlphabetSequence() {
    return alphabetSequence;
  }

  public void setAlphabetSequence(List<EcAlphabetSequenceInner> alphabetSequence) {
    this.alphabetSequence = alphabetSequence;
  }


  public Ec apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * **This API version number.** 
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public Ec detectedKeyboard(String detectedKeyboard) {
    this.detectedKeyboard = detectedKeyboard;
    return this;
  }

  /**
   * **The detected keyboard, QWERTY or Dvorak.** 
   * @return detectedKeyboard
   */
  @javax.annotation.Nullable
  public String getDetectedKeyboard() {
    return detectedKeyboard;
  }

  public void setDetectedKeyboard(String detectedKeyboard) {
    this.detectedKeyboard = detectedKeyboard;
  }


  public Ec efficiency(BigDecimal efficiency) {
    this.efficiency = efficiency;
    return this;
  }

  /**
   * **The ratio entropy / idealEntropy.**  It is a float number in the range [0, 1]. 
   * @return efficiency
   */
  @javax.annotation.Nullable
  public BigDecimal getEfficiency() {
    return efficiency;
  }

  public void setEfficiency(BigDecimal efficiency) {
    this.efficiency = efficiency;
  }


  public Ec entropy(BigDecimal entropy) {
    this.entropy = entropy;
    return this;
  }

  /**
   * **The entropy calculated for the input password.**  It is measured in bits. 
   * @return entropy
   */
  @javax.annotation.Nullable
  public BigDecimal getEntropy() {
    return entropy;
  }

  public void setEntropy(BigDecimal entropy) {
    this.entropy = entropy;
  }


  public Ec entropyDistribution(List<EcEntropyDistributionInner> entropyDistribution) {
    this.entropyDistribution = entropyDistribution;
    return this;
  }

  public Ec addEntropyDistributionItem(EcEntropyDistributionInner entropyDistributionItem) {
    if (this.entropyDistribution == null) {
      this.entropyDistribution = new ArrayList<>();
    }
    this.entropyDistribution.add(entropyDistributionItem);
    return this;
  }

  /**
   * **The distribution of the calculated entropy among the password characters.** 
   * @return entropyDistribution
   */
  @javax.annotation.Nullable
  public List<EcEntropyDistributionInner> getEntropyDistribution() {
    return entropyDistribution;
  }

  public void setEntropyDistribution(List<EcEntropyDistributionInner> entropyDistribution) {
    this.entropyDistribution = entropyDistribution;
  }


  public Ec idealEntropy(BigDecimal idealEntropy) {
    this.idealEntropy = idealEntropy;
    return this;
  }

  /**
   * **The Shannon entropy.**  The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.  It is measured in bits. 
   * @return idealEntropy
   */
  @javax.annotation.Nullable
  public BigDecimal getIdealEntropy() {
    return idealEntropy;
  }

  public void setIdealEntropy(BigDecimal idealEntropy) {
    this.idealEntropy = idealEntropy;
  }


  public Ec keyboardSequence(List<EcKeyboardSequenceInner> keyboardSequence) {
    this.keyboardSequence = keyboardSequence;
    return this;
  }

  public Ec addKeyboardSequenceItem(EcKeyboardSequenceInner keyboardSequenceItem) {
    if (this.keyboardSequence == null) {
      this.keyboardSequence = new ArrayList<>();
    }
    this.keyboardSequence.add(keyboardSequenceItem);
    return this;
  }

  /**
   * **The penalty applied to each character that has been found to be part of a keyboard sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
   * @return keyboardSequence
   */
  @javax.annotation.Nullable
  public List<EcKeyboardSequenceInner> getKeyboardSequence() {
    return keyboardSequence;
  }

  public void setKeyboardSequence(List<EcKeyboardSequenceInner> keyboardSequence) {
    this.keyboardSequence = keyboardSequence;
  }


  public Ec l33tPassword(String l33tPassword) {
    this.l33tPassword = l33tPassword;
    return this;
  }

  /**
   * The analyzed password after the l33t substitution.
   * @return l33tPassword
   */
  @javax.annotation.Nullable
  public String getL33tPassword() {
    return l33tPassword;
  }

  public void setL33tPassword(String l33tPassword) {
    this.l33tPassword = l33tPassword;
  }


  public Ec nonUniformEntropyDistributionPenalty(BigDecimal nonUniformEntropyDistributionPenalty) {
    this.nonUniformEntropyDistributionPenalty = nonUniformEntropyDistributionPenalty;
    return this;
  }

  /**
   * **The penalty applied to the whole password because of irregular entropy distribution.**  This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
   * @return nonUniformEntropyDistributionPenalty
   */
  @javax.annotation.Nullable
  public BigDecimal getNonUniformEntropyDistributionPenalty() {
    return nonUniformEntropyDistributionPenalty;
  }

  public void setNonUniformEntropyDistributionPenalty(BigDecimal nonUniformEntropyDistributionPenalty) {
    this.nonUniformEntropyDistributionPenalty = nonUniformEntropyDistributionPenalty;
  }


  public Ec numberSequence(List<EcNumberSequenceInner> numberSequence) {
    this.numberSequence = numberSequence;
    return this;
  }

  public Ec addNumberSequenceItem(EcNumberSequenceInner numberSequenceItem) {
    if (this.numberSequence == null) {
      this.numberSequence = new ArrayList<>();
    }
    this.numberSequence.add(numberSequenceItem);
    return this;
  }

  /**
   * **The penalty applied to each character that has been found to be part of a number sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
   * @return numberSequence
   */
  @javax.annotation.Nullable
  public List<EcNumberSequenceInner> getNumberSequence() {
    return numberSequence;
  }

  public void setNumberSequence(List<EcNumberSequenceInner> numberSequence) {
    this.numberSequence = numberSequence;
  }


  public Ec password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The analyzed password.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public Ec passwordLength(Integer passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The number of characters the password has.
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public Integer getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(Integer passwordLength) {
    this.passwordLength = passwordLength;
  }


  public Ec penalty(BigDecimal penalty) {
    this.penalty = penalty;
    return this;
  }

  /**
   * **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  Its value is equal to the value of the input parameter *penalty*. 
   * @return penalty
   */
  @javax.annotation.Nullable
  public BigDecimal getPenalty() {
    return penalty;
  }

  public void setPenalty(BigDecimal penalty) {
    this.penalty = penalty;
  }


  public Ec repeatedChars(List<EcRepeatedCharsInner> repeatedChars) {
    this.repeatedChars = repeatedChars;
    return this;
  }

  public Ec addRepeatedCharsItem(EcRepeatedCharsInner repeatedCharsItem) {
    if (this.repeatedChars == null) {
      this.repeatedChars = new ArrayList<>();
    }
    this.repeatedChars.add(repeatedCharsItem);
    return this;
  }

  /**
   * **The penalty applied to each character that are repeated**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.           
   * @return repeatedChars
   */
  @javax.annotation.Nullable
  public List<EcRepeatedCharsInner> getRepeatedChars() {
    return repeatedChars;
  }

  public void setRepeatedChars(List<EcRepeatedCharsInner> repeatedChars) {
    this.repeatedChars = repeatedChars;
  }


  public Ec requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * **The identifier of the request that corresponds to this response.** 
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public Ec requestTimestamp(BigDecimal requestTimestamp) {
    this.requestTimestamp = requestTimestamp;
    return this;
  }

  /**
   * **The timestamp for this response.**  Milliseconds from the epoch of 1970-01-01T00:00:00Z. 
   * @return requestTimestamp
   */
  @javax.annotation.Nullable
  public BigDecimal getRequestTimestamp() {
    return requestTimestamp;
  }

  public void setRequestTimestamp(BigDecimal requestTimestamp) {
    this.requestTimestamp = requestTimestamp;
  }


  public Ec summary(List<String> summary) {
    this.summary = summary;
    return this;
  }

  public Ec addSummaryItem(String summaryItem) {
    if (this.summary == null) {
      this.summary = new ArrayList<>();
    }
    this.summary.add(summaryItem);
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public List<String> getSummary() {
    return summary;
  }

  public void setSummary(List<String> summary) {
    this.summary = summary;
  }


  public Ec total(List<EcTotalInner> total) {
    this.total = total;
    return this;
  }

  public Ec addTotalItem(EcTotalInner totalItem) {
    if (this.total == null) {
      this.total = new ArrayList<>();
    }
    this.total.add(totalItem);
    return this;
  }

  /**
   * **The total penalty applied to each character.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
   * @return total
   */
  @javax.annotation.Nullable
  public List<EcTotalInner> getTotal() {
    return total;
  }

  public void setTotal(List<EcTotalInner> total) {
    this.total = total;
  }


  public Ec words(List<EcWordsInner> words) {
    this.words = words;
    return this;
  }

  public Ec addWordsItem(EcWordsInner wordsItem) {
    if (this.words == null) {
      this.words = new ArrayList<>();
    }
    this.words.add(wordsItem);
    return this;
  }

  /**
   * **The penalty applied to each character that has been found to be part of a word.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
   * @return words
   */
  @javax.annotation.Nullable
  public List<EcWordsInner> getWords() {
    return words;
  }

  public void setWords(List<EcWordsInner> words) {
    this.words = words;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ec ec = (Ec) o;
    return Objects.equals(this.alphabetSequence, ec.alphabetSequence) &&
        Objects.equals(this.apiVersion, ec.apiVersion) &&
        Objects.equals(this.detectedKeyboard, ec.detectedKeyboard) &&
        Objects.equals(this.efficiency, ec.efficiency) &&
        Objects.equals(this.entropy, ec.entropy) &&
        Objects.equals(this.entropyDistribution, ec.entropyDistribution) &&
        Objects.equals(this.idealEntropy, ec.idealEntropy) &&
        Objects.equals(this.keyboardSequence, ec.keyboardSequence) &&
        Objects.equals(this.l33tPassword, ec.l33tPassword) &&
        Objects.equals(this.nonUniformEntropyDistributionPenalty, ec.nonUniformEntropyDistributionPenalty) &&
        Objects.equals(this.numberSequence, ec.numberSequence) &&
        Objects.equals(this.password, ec.password) &&
        Objects.equals(this.passwordLength, ec.passwordLength) &&
        Objects.equals(this.penalty, ec.penalty) &&
        Objects.equals(this.repeatedChars, ec.repeatedChars) &&
        Objects.equals(this.requestId, ec.requestId) &&
        Objects.equals(this.requestTimestamp, ec.requestTimestamp) &&
        Objects.equals(this.summary, ec.summary) &&
        Objects.equals(this.total, ec.total) &&
        Objects.equals(this.words, ec.words);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alphabetSequence, apiVersion, detectedKeyboard, efficiency, entropy, entropyDistribution, idealEntropy, keyboardSequence, l33tPassword, nonUniformEntropyDistributionPenalty, numberSequence, password, passwordLength, penalty, repeatedChars, requestId, requestTimestamp, summary, total, words);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ec {\n");
    sb.append("    alphabetSequence: ").append(toIndentedString(alphabetSequence)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    detectedKeyboard: ").append(toIndentedString(detectedKeyboard)).append("\n");
    sb.append("    efficiency: ").append(toIndentedString(efficiency)).append("\n");
    sb.append("    entropy: ").append(toIndentedString(entropy)).append("\n");
    sb.append("    entropyDistribution: ").append(toIndentedString(entropyDistribution)).append("\n");
    sb.append("    idealEntropy: ").append(toIndentedString(idealEntropy)).append("\n");
    sb.append("    keyboardSequence: ").append(toIndentedString(keyboardSequence)).append("\n");
    sb.append("    l33tPassword: ").append(toIndentedString(l33tPassword)).append("\n");
    sb.append("    nonUniformEntropyDistributionPenalty: ").append(toIndentedString(nonUniformEntropyDistributionPenalty)).append("\n");
    sb.append("    numberSequence: ").append(toIndentedString(numberSequence)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    penalty: ").append(toIndentedString(penalty)).append("\n");
    sb.append("    repeatedChars: ").append(toIndentedString(repeatedChars)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestTimestamp: ").append(toIndentedString(requestTimestamp)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    words: ").append(toIndentedString(words)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alphabetSequence");
    openapiFields.add("apiVersion");
    openapiFields.add("detectedKeyboard");
    openapiFields.add("efficiency");
    openapiFields.add("entropy");
    openapiFields.add("entropyDistribution");
    openapiFields.add("idealEntropy");
    openapiFields.add("keyboardSequence");
    openapiFields.add("l33tPassword");
    openapiFields.add("nonUniformEntropyDistributionPenalty");
    openapiFields.add("numberSequence");
    openapiFields.add("password");
    openapiFields.add("passwordLength");
    openapiFields.add("penalty");
    openapiFields.add("repeatedChars");
    openapiFields.add("requestId");
    openapiFields.add("requestTimestamp");
    openapiFields.add("summary");
    openapiFields.add("total");
    openapiFields.add("words");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ec is not found in the empty JSON string", Ec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("alphabetSequence") != null && !jsonObj.get("alphabetSequence").isJsonNull()) {
        JsonArray jsonArrayalphabetSequence = jsonObj.getAsJsonArray("alphabetSequence");
        if (jsonArrayalphabetSequence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alphabetSequence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alphabetSequence` to be an array in the JSON string but got `%s`", jsonObj.get("alphabetSequence").toString()));
          }

          // validate the optional field `alphabetSequence` (array)
          for (int i = 0; i < jsonArrayalphabetSequence.size(); i++) {
            EcAlphabetSequenceInner.validateJsonElement(jsonArrayalphabetSequence.get(i));
          };
        }
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if ((jsonObj.get("detectedKeyboard") != null && !jsonObj.get("detectedKeyboard").isJsonNull()) && !jsonObj.get("detectedKeyboard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedKeyboard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectedKeyboard").toString()));
      }
      if (jsonObj.get("entropyDistribution") != null && !jsonObj.get("entropyDistribution").isJsonNull()) {
        JsonArray jsonArrayentropyDistribution = jsonObj.getAsJsonArray("entropyDistribution");
        if (jsonArrayentropyDistribution != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entropyDistribution").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entropyDistribution` to be an array in the JSON string but got `%s`", jsonObj.get("entropyDistribution").toString()));
          }

          // validate the optional field `entropyDistribution` (array)
          for (int i = 0; i < jsonArrayentropyDistribution.size(); i++) {
            EcEntropyDistributionInner.validateJsonElement(jsonArrayentropyDistribution.get(i));
          };
        }
      }
      if (jsonObj.get("keyboardSequence") != null && !jsonObj.get("keyboardSequence").isJsonNull()) {
        JsonArray jsonArraykeyboardSequence = jsonObj.getAsJsonArray("keyboardSequence");
        if (jsonArraykeyboardSequence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keyboardSequence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keyboardSequence` to be an array in the JSON string but got `%s`", jsonObj.get("keyboardSequence").toString()));
          }

          // validate the optional field `keyboardSequence` (array)
          for (int i = 0; i < jsonArraykeyboardSequence.size(); i++) {
            EcKeyboardSequenceInner.validateJsonElement(jsonArraykeyboardSequence.get(i));
          };
        }
      }
      if ((jsonObj.get("l33tPassword") != null && !jsonObj.get("l33tPassword").isJsonNull()) && !jsonObj.get("l33tPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `l33tPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("l33tPassword").toString()));
      }
      if (jsonObj.get("numberSequence") != null && !jsonObj.get("numberSequence").isJsonNull()) {
        JsonArray jsonArraynumberSequence = jsonObj.getAsJsonArray("numberSequence");
        if (jsonArraynumberSequence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("numberSequence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `numberSequence` to be an array in the JSON string but got `%s`", jsonObj.get("numberSequence").toString()));
          }

          // validate the optional field `numberSequence` (array)
          for (int i = 0; i < jsonArraynumberSequence.size(); i++) {
            EcNumberSequenceInner.validateJsonElement(jsonArraynumberSequence.get(i));
          };
        }
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (jsonObj.get("repeatedChars") != null && !jsonObj.get("repeatedChars").isJsonNull()) {
        JsonArray jsonArrayrepeatedChars = jsonObj.getAsJsonArray("repeatedChars");
        if (jsonArrayrepeatedChars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repeatedChars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repeatedChars` to be an array in the JSON string but got `%s`", jsonObj.get("repeatedChars").toString()));
          }

          // validate the optional field `repeatedChars` (array)
          for (int i = 0; i < jsonArrayrepeatedChars.size(); i++) {
            EcRepeatedCharsInner.validateJsonElement(jsonArrayrepeatedChars.get(i));
          };
        }
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull() && !jsonObj.get("summary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be an array in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        JsonArray jsonArraytotal = jsonObj.getAsJsonArray("total");
        if (jsonArraytotal != null) {
          // ensure the json data is an array
          if (!jsonObj.get("total").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `total` to be an array in the JSON string but got `%s`", jsonObj.get("total").toString()));
          }

          // validate the optional field `total` (array)
          for (int i = 0; i < jsonArraytotal.size(); i++) {
            EcTotalInner.validateJsonElement(jsonArraytotal.get(i));
          };
        }
      }
      if (jsonObj.get("words") != null && !jsonObj.get("words").isJsonNull()) {
        JsonArray jsonArraywords = jsonObj.getAsJsonArray("words");
        if (jsonArraywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("words").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `words` to be an array in the JSON string but got `%s`", jsonObj.get("words").toString()));
          }

          // validate the optional field `words` (array)
          for (int i = 0; i < jsonArraywords.size(); i++) {
            EcWordsInner.validateJsonElement(jsonArraywords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ec.class));

       return (TypeAdapter<T>) new TypeAdapter<Ec>() {
           @Override
           public void write(JsonWriter out, Ec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ec
   * @throws IOException if the JSON string is invalid with respect to Ec
   */
  public static Ec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ec.class);
  }

  /**
   * Convert an instance of Ec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

