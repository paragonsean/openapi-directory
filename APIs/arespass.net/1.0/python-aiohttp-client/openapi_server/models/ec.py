# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ec_alphabet_sequence_inner import EcAlphabetSequenceInner
from openapi_server.models.ec_entropy_distribution_inner import EcEntropyDistributionInner
from openapi_server.models.ec_keyboard_sequence_inner import EcKeyboardSequenceInner
from openapi_server.models.ec_number_sequence_inner import EcNumberSequenceInner
from openapi_server.models.ec_repeated_chars_inner import EcRepeatedCharsInner
from openapi_server.models.ec_total_inner import EcTotalInner
from openapi_server.models.ec_words_inner import EcWordsInner
from openapi_server import util


class Ec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alphabet_sequence: List[EcAlphabetSequenceInner]=None, api_version: str=None, detected_keyboard: str=None, efficiency: float=None, entropy: float=None, entropy_distribution: List[EcEntropyDistributionInner]=None, ideal_entropy: float=None, keyboard_sequence: List[EcKeyboardSequenceInner]=None, l33t_password: str=None, non_uniform_entropy_distribution_penalty: float=None, number_sequence: List[EcNumberSequenceInner]=None, password: str=None, password_length: int=None, penalty: float=None, repeated_chars: List[EcRepeatedCharsInner]=None, request_id: str=None, request_timestamp: float=None, summary: List[str]=None, total: List[EcTotalInner]=None, words: List[EcWordsInner]=None):
        """Ec - a model defined in OpenAPI

        :param alphabet_sequence: The alphabet_sequence of this Ec.
        :param api_version: The api_version of this Ec.
        :param detected_keyboard: The detected_keyboard of this Ec.
        :param efficiency: The efficiency of this Ec.
        :param entropy: The entropy of this Ec.
        :param entropy_distribution: The entropy_distribution of this Ec.
        :param ideal_entropy: The ideal_entropy of this Ec.
        :param keyboard_sequence: The keyboard_sequence of this Ec.
        :param l33t_password: The l33t_password of this Ec.
        :param non_uniform_entropy_distribution_penalty: The non_uniform_entropy_distribution_penalty of this Ec.
        :param number_sequence: The number_sequence of this Ec.
        :param password: The password of this Ec.
        :param password_length: The password_length of this Ec.
        :param penalty: The penalty of this Ec.
        :param repeated_chars: The repeated_chars of this Ec.
        :param request_id: The request_id of this Ec.
        :param request_timestamp: The request_timestamp of this Ec.
        :param summary: The summary of this Ec.
        :param total: The total of this Ec.
        :param words: The words of this Ec.
        """
        self.openapi_types = {
            'alphabet_sequence': List[EcAlphabetSequenceInner],
            'api_version': str,
            'detected_keyboard': str,
            'efficiency': float,
            'entropy': float,
            'entropy_distribution': List[EcEntropyDistributionInner],
            'ideal_entropy': float,
            'keyboard_sequence': List[EcKeyboardSequenceInner],
            'l33t_password': str,
            'non_uniform_entropy_distribution_penalty': float,
            'number_sequence': List[EcNumberSequenceInner],
            'password': str,
            'password_length': int,
            'penalty': float,
            'repeated_chars': List[EcRepeatedCharsInner],
            'request_id': str,
            'request_timestamp': float,
            'summary': List[str],
            'total': List[EcTotalInner],
            'words': List[EcWordsInner]
        }

        self.attribute_map = {
            'alphabet_sequence': 'alphabetSequence',
            'api_version': 'apiVersion',
            'detected_keyboard': 'detectedKeyboard',
            'efficiency': 'efficiency',
            'entropy': 'entropy',
            'entropy_distribution': 'entropyDistribution',
            'ideal_entropy': 'idealEntropy',
            'keyboard_sequence': 'keyboardSequence',
            'l33t_password': 'l33tPassword',
            'non_uniform_entropy_distribution_penalty': 'nonUniformEntropyDistributionPenalty',
            'number_sequence': 'numberSequence',
            'password': 'password',
            'password_length': 'passwordLength',
            'penalty': 'penalty',
            'repeated_chars': 'repeatedChars',
            'request_id': 'requestId',
            'request_timestamp': 'requestTimestamp',
            'summary': 'summary',
            'total': 'total',
            'words': 'words'
        }

        self._alphabet_sequence = alphabet_sequence
        self._api_version = api_version
        self._detected_keyboard = detected_keyboard
        self._efficiency = efficiency
        self._entropy = entropy
        self._entropy_distribution = entropy_distribution
        self._ideal_entropy = ideal_entropy
        self._keyboard_sequence = keyboard_sequence
        self._l33t_password = l33t_password
        self._non_uniform_entropy_distribution_penalty = non_uniform_entropy_distribution_penalty
        self._number_sequence = number_sequence
        self._password = password
        self._password_length = password_length
        self._penalty = penalty
        self._repeated_chars = repeated_chars
        self._request_id = request_id
        self._request_timestamp = request_timestamp
        self._summary = summary
        self._total = total
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ec of this Ec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alphabet_sequence(self):
        """Gets the alphabet_sequence of this Ec.

        **The penalty applied to each character that has been found to be part of an alphabet sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :return: The alphabet_sequence of this Ec.
        :rtype: List[EcAlphabetSequenceInner]
        """
        return self._alphabet_sequence

    @alphabet_sequence.setter
    def alphabet_sequence(self, alphabet_sequence):
        """Sets the alphabet_sequence of this Ec.

        **The penalty applied to each character that has been found to be part of an alphabet sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :param alphabet_sequence: The alphabet_sequence of this Ec.
        :type alphabet_sequence: List[EcAlphabetSequenceInner]
        """

        self._alphabet_sequence = alphabet_sequence

    @property
    def api_version(self):
        """Gets the api_version of this Ec.

        **This API version number.** 

        :return: The api_version of this Ec.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Ec.

        **This API version number.** 

        :param api_version: The api_version of this Ec.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def detected_keyboard(self):
        """Gets the detected_keyboard of this Ec.

        **The detected keyboard, QWERTY or Dvorak.** 

        :return: The detected_keyboard of this Ec.
        :rtype: str
        """
        return self._detected_keyboard

    @detected_keyboard.setter
    def detected_keyboard(self, detected_keyboard):
        """Sets the detected_keyboard of this Ec.

        **The detected keyboard, QWERTY or Dvorak.** 

        :param detected_keyboard: The detected_keyboard of this Ec.
        :type detected_keyboard: str
        """

        self._detected_keyboard = detected_keyboard

    @property
    def efficiency(self):
        """Gets the efficiency of this Ec.

        **The ratio entropy / idealEntropy.**  It is a float number in the range [0, 1]. 

        :return: The efficiency of this Ec.
        :rtype: float
        """
        return self._efficiency

    @efficiency.setter
    def efficiency(self, efficiency):
        """Sets the efficiency of this Ec.

        **The ratio entropy / idealEntropy.**  It is a float number in the range [0, 1]. 

        :param efficiency: The efficiency of this Ec.
        :type efficiency: float
        """

        self._efficiency = efficiency

    @property
    def entropy(self):
        """Gets the entropy of this Ec.

        **The entropy calculated for the input password.**  It is measured in bits. 

        :return: The entropy of this Ec.
        :rtype: float
        """
        return self._entropy

    @entropy.setter
    def entropy(self, entropy):
        """Sets the entropy of this Ec.

        **The entropy calculated for the input password.**  It is measured in bits. 

        :param entropy: The entropy of this Ec.
        :type entropy: float
        """

        self._entropy = entropy

    @property
    def entropy_distribution(self):
        """Gets the entropy_distribution of this Ec.

        **The distribution of the calculated entropy among the password characters.** 

        :return: The entropy_distribution of this Ec.
        :rtype: List[EcEntropyDistributionInner]
        """
        return self._entropy_distribution

    @entropy_distribution.setter
    def entropy_distribution(self, entropy_distribution):
        """Sets the entropy_distribution of this Ec.

        **The distribution of the calculated entropy among the password characters.** 

        :param entropy_distribution: The entropy_distribution of this Ec.
        :type entropy_distribution: List[EcEntropyDistributionInner]
        """

        self._entropy_distribution = entropy_distribution

    @property
    def ideal_entropy(self):
        """Gets the ideal_entropy of this Ec.

        **The Shannon entropy.**  The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.  It is measured in bits. 

        :return: The ideal_entropy of this Ec.
        :rtype: float
        """
        return self._ideal_entropy

    @ideal_entropy.setter
    def ideal_entropy(self, ideal_entropy):
        """Sets the ideal_entropy of this Ec.

        **The Shannon entropy.**  The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.  It is measured in bits. 

        :param ideal_entropy: The ideal_entropy of this Ec.
        :type ideal_entropy: float
        """

        self._ideal_entropy = ideal_entropy

    @property
    def keyboard_sequence(self):
        """Gets the keyboard_sequence of this Ec.

        **The penalty applied to each character that has been found to be part of a keyboard sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :return: The keyboard_sequence of this Ec.
        :rtype: List[EcKeyboardSequenceInner]
        """
        return self._keyboard_sequence

    @keyboard_sequence.setter
    def keyboard_sequence(self, keyboard_sequence):
        """Sets the keyboard_sequence of this Ec.

        **The penalty applied to each character that has been found to be part of a keyboard sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :param keyboard_sequence: The keyboard_sequence of this Ec.
        :type keyboard_sequence: List[EcKeyboardSequenceInner]
        """

        self._keyboard_sequence = keyboard_sequence

    @property
    def l33t_password(self):
        """Gets the l33t_password of this Ec.

        The analyzed password after the l33t substitution.

        :return: The l33t_password of this Ec.
        :rtype: str
        """
        return self._l33t_password

    @l33t_password.setter
    def l33t_password(self, l33t_password):
        """Sets the l33t_password of this Ec.

        The analyzed password after the l33t substitution.

        :param l33t_password: The l33t_password of this Ec.
        :type l33t_password: str
        """

        self._l33t_password = l33t_password

    @property
    def non_uniform_entropy_distribution_penalty(self):
        """Gets the non_uniform_entropy_distribution_penalty of this Ec.

        **The penalty applied to the whole password because of irregular entropy distribution.**  This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :return: The non_uniform_entropy_distribution_penalty of this Ec.
        :rtype: float
        """
        return self._non_uniform_entropy_distribution_penalty

    @non_uniform_entropy_distribution_penalty.setter
    def non_uniform_entropy_distribution_penalty(self, non_uniform_entropy_distribution_penalty):
        """Sets the non_uniform_entropy_distribution_penalty of this Ec.

        **The penalty applied to the whole password because of irregular entropy distribution.**  This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :param non_uniform_entropy_distribution_penalty: The non_uniform_entropy_distribution_penalty of this Ec.
        :type non_uniform_entropy_distribution_penalty: float
        """

        self._non_uniform_entropy_distribution_penalty = non_uniform_entropy_distribution_penalty

    @property
    def number_sequence(self):
        """Gets the number_sequence of this Ec.

        **The penalty applied to each character that has been found to be part of a number sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :return: The number_sequence of this Ec.
        :rtype: List[EcNumberSequenceInner]
        """
        return self._number_sequence

    @number_sequence.setter
    def number_sequence(self, number_sequence):
        """Sets the number_sequence of this Ec.

        **The penalty applied to each character that has been found to be part of a number sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :param number_sequence: The number_sequence of this Ec.
        :type number_sequence: List[EcNumberSequenceInner]
        """

        self._number_sequence = number_sequence

    @property
    def password(self):
        """Gets the password of this Ec.

        The analyzed password.

        :return: The password of this Ec.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Ec.

        The analyzed password.

        :param password: The password of this Ec.
        :type password: str
        """

        self._password = password

    @property
    def password_length(self):
        """Gets the password_length of this Ec.

        The number of characters the password has.

        :return: The password_length of this Ec.
        :rtype: int
        """
        return self._password_length

    @password_length.setter
    def password_length(self, password_length):
        """Sets the password_length of this Ec.

        The number of characters the password has.

        :param password_length: The password_length of this Ec.
        :type password_length: int
        """

        self._password_length = password_length

    @property
    def penalty(self):
        """Gets the penalty of this Ec.

        **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  Its value is equal to the value of the input parameter *penalty*. 

        :return: The penalty of this Ec.
        :rtype: float
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this Ec.

        **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  Its value is equal to the value of the input parameter *penalty*. 

        :param penalty: The penalty of this Ec.
        :type penalty: float
        """

        self._penalty = penalty

    @property
    def repeated_chars(self):
        """Gets the repeated_chars of this Ec.

        **The penalty applied to each character that are repeated**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.           

        :return: The repeated_chars of this Ec.
        :rtype: List[EcRepeatedCharsInner]
        """
        return self._repeated_chars

    @repeated_chars.setter
    def repeated_chars(self, repeated_chars):
        """Sets the repeated_chars of this Ec.

        **The penalty applied to each character that are repeated**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.           

        :param repeated_chars: The repeated_chars of this Ec.
        :type repeated_chars: List[EcRepeatedCharsInner]
        """

        self._repeated_chars = repeated_chars

    @property
    def request_id(self):
        """Gets the request_id of this Ec.

        **The identifier of the request that corresponds to this response.** 

        :return: The request_id of this Ec.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Ec.

        **The identifier of the request that corresponds to this response.** 

        :param request_id: The request_id of this Ec.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def request_timestamp(self):
        """Gets the request_timestamp of this Ec.

        **The timestamp for this response.**  Milliseconds from the epoch of 1970-01-01T00:00:00Z. 

        :return: The request_timestamp of this Ec.
        :rtype: float
        """
        return self._request_timestamp

    @request_timestamp.setter
    def request_timestamp(self, request_timestamp):
        """Sets the request_timestamp of this Ec.

        **The timestamp for this response.**  Milliseconds from the epoch of 1970-01-01T00:00:00Z. 

        :param request_timestamp: The request_timestamp of this Ec.
        :type request_timestamp: float
        """

        self._request_timestamp = request_timestamp

    @property
    def summary(self):
        """Gets the summary of this Ec.


        :return: The summary of this Ec.
        :rtype: List[str]
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Ec.


        :param summary: The summary of this Ec.
        :type summary: List[str]
        """

        self._summary = summary

    @property
    def total(self):
        """Gets the total of this Ec.

        **The total penalty applied to each character.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :return: The total of this Ec.
        :rtype: List[EcTotalInner]
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Ec.

        **The total penalty applied to each character.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :param total: The total of this Ec.
        :type total: List[EcTotalInner]
        """

        self._total = total

    @property
    def words(self):
        """Gets the words of this Ec.

        **The penalty applied to each character that has been found to be part of a word.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :return: The words of this Ec.
        :rtype: List[EcWordsInner]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this Ec.

        **The penalty applied to each character that has been found to be part of a word.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 

        :param words: The words of this Ec.
        :type words: List[EcWordsInner]
        """

        self._words = words
