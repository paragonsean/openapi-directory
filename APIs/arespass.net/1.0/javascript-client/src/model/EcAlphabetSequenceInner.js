/**
 * Arespass
 * Analyzes a password and calculates its entropy.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EcAlphabetSequenceInner model module.
 * @module model/EcAlphabetSequenceInner
 * @version 1.0
 */
class EcAlphabetSequenceInner {
    /**
     * Constructs a new <code>EcAlphabetSequenceInner</code>.
     * @alias module:model/EcAlphabetSequenceInner
     */
    constructor() { 
        
        EcAlphabetSequenceInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EcAlphabetSequenceInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcAlphabetSequenceInner} obj Optional instance to populate.
     * @return {module:model/EcAlphabetSequenceInner} The populated <code>EcAlphabetSequenceInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcAlphabetSequenceInner();

            if (data.hasOwnProperty('char')) {
                obj['char'] = ApiClient.convertToType(data['char'], 'String');
            }
            if (data.hasOwnProperty('l33tchar')) {
                obj['l33tchar'] = ApiClient.convertToType(data['l33tchar'], 'String');
            }
            if (data.hasOwnProperty('penalty')) {
                obj['penalty'] = ApiClient.convertToType(data['penalty'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcAlphabetSequenceInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcAlphabetSequenceInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['char'] && !(typeof data['char'] === 'string' || data['char'] instanceof String)) {
            throw new Error("Expected the field `char` to be a primitive type in the JSON string but got " + data['char']);
        }
        // ensure the json data is a string
        if (data['l33tchar'] && !(typeof data['l33tchar'] === 'string' || data['l33tchar'] instanceof String)) {
            throw new Error("Expected the field `l33tchar` to be a primitive type in the JSON string but got " + data['l33tchar']);
        }

        return true;
    }


}



/**
 * The n-th character.
 * @member {String} char
 */
EcAlphabetSequenceInner.prototype['char'] = undefined;

/**
 * The n-th character after the l33t transformation.
 * @member {String} l33tchar
 */
EcAlphabetSequenceInner.prototype['l33tchar'] = undefined;

/**
 * The penalty applied to this character if it is part of an alphabet sequence.  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. 
 * @member {Number} penalty
 */
EcAlphabetSequenceInner.prototype['penalty'] = undefined;






export default EcAlphabetSequenceInner;

