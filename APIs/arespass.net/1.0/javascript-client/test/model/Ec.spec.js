/**
 * Arespass
 * Analyzes a password and calculates its entropy.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Arespass);
  }
}(this, function(expect, Arespass) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Arespass.Ec();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ec', function() {
    it('should create an instance of Ec', function() {
      // uncomment below and update the code to test Ec
      //var instance = new Arespass.Ec();
      //expect(instance).to.be.a(Arespass.Ec);
    });

    it('should have the property alphabetSequence (base name: "alphabetSequence")', function() {
      // uncomment below and update the code to test the property alphabetSequence
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property apiVersion (base name: "apiVersion")', function() {
      // uncomment below and update the code to test the property apiVersion
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property detectedKeyboard (base name: "detectedKeyboard")', function() {
      // uncomment below and update the code to test the property detectedKeyboard
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property efficiency (base name: "efficiency")', function() {
      // uncomment below and update the code to test the property efficiency
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property entropy (base name: "entropy")', function() {
      // uncomment below and update the code to test the property entropy
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property entropyDistribution (base name: "entropyDistribution")', function() {
      // uncomment below and update the code to test the property entropyDistribution
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property idealEntropy (base name: "idealEntropy")', function() {
      // uncomment below and update the code to test the property idealEntropy
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property keyboardSequence (base name: "keyboardSequence")', function() {
      // uncomment below and update the code to test the property keyboardSequence
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property l33tPassword (base name: "l33tPassword")', function() {
      // uncomment below and update the code to test the property l33tPassword
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property nonUniformEntropyDistributionPenalty (base name: "nonUniformEntropyDistributionPenalty")', function() {
      // uncomment below and update the code to test the property nonUniformEntropyDistributionPenalty
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property numberSequence (base name: "numberSequence")', function() {
      // uncomment below and update the code to test the property numberSequence
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property passwordLength (base name: "passwordLength")', function() {
      // uncomment below and update the code to test the property passwordLength
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property penalty (base name: "penalty")', function() {
      // uncomment below and update the code to test the property penalty
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property repeatedChars (base name: "repeatedChars")', function() {
      // uncomment below and update the code to test the property repeatedChars
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "requestId")', function() {
      // uncomment below and update the code to test the property requestId
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property requestTimestamp (base name: "requestTimestamp")', function() {
      // uncomment below and update the code to test the property requestTimestamp
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

    it('should have the property words (base name: "words")', function() {
      // uncomment below and update the code to test the property words
      //var instance = new Arespass.Ec();
      //expect(instance).to.be();
    });

  });

}));
