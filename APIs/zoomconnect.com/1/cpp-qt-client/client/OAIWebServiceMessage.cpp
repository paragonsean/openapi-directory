/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceMessage::OAIWebServiceMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceMessage::OAIWebServiceMessage() {
    this->initializeModel();
}

OAIWebServiceMessage::~OAIWebServiceMessage() {}

void OAIWebServiceMessage::initializeModel() {

    m_campaign_isSet = false;
    m_campaign_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_credit_cost_isSet = false;
    m_credit_cost_isValid = false;

    m_date_time_received_isSet = false;
    m_date_time_received_isValid = false;

    m_date_time_scheduled_isSet = false;
    m_date_time_scheduled_isValid = false;

    m_date_time_sent_isSet = false;
    m_date_time_sent_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_from_number_isSet = false;
    m_from_number_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_message_status_isSet = false;
    m_message_status_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_number_of_messages_isSet = false;
    m_number_of_messages_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_replied_to_message_isSet = false;
    m_replied_to_message_isValid = false;

    m_to_number_isSet = false;
    m_to_number_isValid = false;

    m_user_data_field_isSet = false;
    m_user_data_field_isValid = false;
}

void OAIWebServiceMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceMessage::fromJsonObject(QJsonObject json) {

    m_campaign_isValid = ::OpenAPI::fromJsonValue(m_campaign, json[QString("campaign")]);
    m_campaign_isSet = !json[QString("campaign")].isNull() && m_campaign_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_credit_cost_isValid = ::OpenAPI::fromJsonValue(m_credit_cost, json[QString("creditCost")]);
    m_credit_cost_isSet = !json[QString("creditCost")].isNull() && m_credit_cost_isValid;

    m_date_time_received_isValid = ::OpenAPI::fromJsonValue(m_date_time_received, json[QString("dateTimeReceived")]);
    m_date_time_received_isSet = !json[QString("dateTimeReceived")].isNull() && m_date_time_received_isValid;

    m_date_time_scheduled_isValid = ::OpenAPI::fromJsonValue(m_date_time_scheduled, json[QString("dateTimeScheduled")]);
    m_date_time_scheduled_isSet = !json[QString("dateTimeScheduled")].isNull() && m_date_time_scheduled_isValid;

    m_date_time_sent_isValid = ::OpenAPI::fromJsonValue(m_date_time_sent, json[QString("dateTimeSent")]);
    m_date_time_sent_isSet = !json[QString("dateTimeSent")].isNull() && m_date_time_sent_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_from_number_isValid = ::OpenAPI::fromJsonValue(m_from_number, json[QString("fromNumber")]);
    m_from_number_isSet = !json[QString("fromNumber")].isNull() && m_from_number_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_message_status_isValid = ::OpenAPI::fromJsonValue(m_message_status, json[QString("messageStatus")]);
    m_message_status_isSet = !json[QString("messageStatus")].isNull() && m_message_status_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_number_of_messages_isValid = ::OpenAPI::fromJsonValue(m_number_of_messages, json[QString("numberOfMessages")]);
    m_number_of_messages_isSet = !json[QString("numberOfMessages")].isNull() && m_number_of_messages_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_replied_to_message_isValid = ::OpenAPI::fromJsonValue(m_replied_to_message, json[QString("repliedToMessage")]);
    m_replied_to_message_isSet = !json[QString("repliedToMessage")].isNull() && m_replied_to_message_isValid;

    m_to_number_isValid = ::OpenAPI::fromJsonValue(m_to_number, json[QString("toNumber")]);
    m_to_number_isSet = !json[QString("toNumber")].isNull() && m_to_number_isValid;

    m_user_data_field_isValid = ::OpenAPI::fromJsonValue(m_user_data_field, json[QString("userDataField")]);
    m_user_data_field_isSet = !json[QString("userDataField")].isNull() && m_user_data_field_isValid;
}

QString OAIWebServiceMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_isSet) {
        obj.insert(QString("campaign"), ::OpenAPI::toJsonValue(m_campaign));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_credit_cost_isSet) {
        obj.insert(QString("creditCost"), ::OpenAPI::toJsonValue(m_credit_cost));
    }
    if (m_date_time_received_isSet) {
        obj.insert(QString("dateTimeReceived"), ::OpenAPI::toJsonValue(m_date_time_received));
    }
    if (m_date_time_scheduled_isSet) {
        obj.insert(QString("dateTimeScheduled"), ::OpenAPI::toJsonValue(m_date_time_scheduled));
    }
    if (m_date_time_sent_isSet) {
        obj.insert(QString("dateTimeSent"), ::OpenAPI::toJsonValue(m_date_time_sent));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_from_number_isSet) {
        obj.insert(QString("fromNumber"), ::OpenAPI::toJsonValue(m_from_number));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_message_status_isSet) {
        obj.insert(QString("messageStatus"), ::OpenAPI::toJsonValue(m_message_status));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_number_of_messages_isSet) {
        obj.insert(QString("numberOfMessages"), ::OpenAPI::toJsonValue(m_number_of_messages));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_replied_to_message.isSet()) {
        obj.insert(QString("repliedToMessage"), ::OpenAPI::toJsonValue(m_replied_to_message));
    }
    if (m_to_number_isSet) {
        obj.insert(QString("toNumber"), ::OpenAPI::toJsonValue(m_to_number));
    }
    if (m_user_data_field_isSet) {
        obj.insert(QString("userDataField"), ::OpenAPI::toJsonValue(m_user_data_field));
    }
    return obj;
}

QString OAIWebServiceMessage::getCampaign() const {
    return m_campaign;
}
void OAIWebServiceMessage::setCampaign(const QString &campaign) {
    m_campaign = campaign;
    m_campaign_isSet = true;
}

bool OAIWebServiceMessage::is_campaign_Set() const{
    return m_campaign_isSet;
}

bool OAIWebServiceMessage::is_campaign_Valid() const{
    return m_campaign_isValid;
}

OAIWebServiceContactLink OAIWebServiceMessage::getContact() const {
    return m_contact;
}
void OAIWebServiceMessage::setContact(const OAIWebServiceContactLink &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIWebServiceMessage::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIWebServiceMessage::is_contact_Valid() const{
    return m_contact_isValid;
}

double OAIWebServiceMessage::getCreditCost() const {
    return m_credit_cost;
}
void OAIWebServiceMessage::setCreditCost(const double &credit_cost) {
    m_credit_cost = credit_cost;
    m_credit_cost_isSet = true;
}

bool OAIWebServiceMessage::is_credit_cost_Set() const{
    return m_credit_cost_isSet;
}

bool OAIWebServiceMessage::is_credit_cost_Valid() const{
    return m_credit_cost_isValid;
}

QDateTime OAIWebServiceMessage::getDateTimeReceived() const {
    return m_date_time_received;
}
void OAIWebServiceMessage::setDateTimeReceived(const QDateTime &date_time_received) {
    m_date_time_received = date_time_received;
    m_date_time_received_isSet = true;
}

bool OAIWebServiceMessage::is_date_time_received_Set() const{
    return m_date_time_received_isSet;
}

bool OAIWebServiceMessage::is_date_time_received_Valid() const{
    return m_date_time_received_isValid;
}

QDateTime OAIWebServiceMessage::getDateTimeScheduled() const {
    return m_date_time_scheduled;
}
void OAIWebServiceMessage::setDateTimeScheduled(const QDateTime &date_time_scheduled) {
    m_date_time_scheduled = date_time_scheduled;
    m_date_time_scheduled_isSet = true;
}

bool OAIWebServiceMessage::is_date_time_scheduled_Set() const{
    return m_date_time_scheduled_isSet;
}

bool OAIWebServiceMessage::is_date_time_scheduled_Valid() const{
    return m_date_time_scheduled_isValid;
}

QDateTime OAIWebServiceMessage::getDateTimeSent() const {
    return m_date_time_sent;
}
void OAIWebServiceMessage::setDateTimeSent(const QDateTime &date_time_sent) {
    m_date_time_sent = date_time_sent;
    m_date_time_sent_isSet = true;
}

bool OAIWebServiceMessage::is_date_time_sent_Set() const{
    return m_date_time_sent_isSet;
}

bool OAIWebServiceMessage::is_date_time_sent_Valid() const{
    return m_date_time_sent_isValid;
}

bool OAIWebServiceMessage::isDeleted() const {
    return m_deleted;
}
void OAIWebServiceMessage::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIWebServiceMessage::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIWebServiceMessage::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIWebServiceMessage::getFromNumber() const {
    return m_from_number;
}
void OAIWebServiceMessage::setFromNumber(const QString &from_number) {
    m_from_number = from_number;
    m_from_number_isSet = true;
}

bool OAIWebServiceMessage::is_from_number_Set() const{
    return m_from_number_isSet;
}

bool OAIWebServiceMessage::is_from_number_Valid() const{
    return m_from_number_isValid;
}

QList<OAILink> OAIWebServiceMessage::getLinks() const {
    return m_links;
}
void OAIWebServiceMessage::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIWebServiceMessage::is_links_Set() const{
    return m_links_isSet;
}

bool OAIWebServiceMessage::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIWebServiceMessage::getMessage() const {
    return m_message;
}
void OAIWebServiceMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWebServiceMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWebServiceMessage::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWebServiceMessage::getMessageId() const {
    return m_message_id;
}
void OAIWebServiceMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIWebServiceMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIWebServiceMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIWebServiceMessage::getMessageStatus() const {
    return m_message_status;
}
void OAIWebServiceMessage::setMessageStatus(const QString &message_status) {
    m_message_status = message_status;
    m_message_status_isSet = true;
}

bool OAIWebServiceMessage::is_message_status_Set() const{
    return m_message_status_isSet;
}

bool OAIWebServiceMessage::is_message_status_Valid() const{
    return m_message_status_isValid;
}

QString OAIWebServiceMessage::getMessageType() const {
    return m_message_type;
}
void OAIWebServiceMessage::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIWebServiceMessage::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIWebServiceMessage::is_message_type_Valid() const{
    return m_message_type_isValid;
}

qint32 OAIWebServiceMessage::getNumberOfMessages() const {
    return m_number_of_messages;
}
void OAIWebServiceMessage::setNumberOfMessages(const qint32 &number_of_messages) {
    m_number_of_messages = number_of_messages;
    m_number_of_messages_isSet = true;
}

bool OAIWebServiceMessage::is_number_of_messages_Set() const{
    return m_number_of_messages_isSet;
}

bool OAIWebServiceMessage::is_number_of_messages_Valid() const{
    return m_number_of_messages_isValid;
}

bool OAIWebServiceMessage::isRead() const {
    return m_read;
}
void OAIWebServiceMessage::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIWebServiceMessage::is_read_Set() const{
    return m_read_isSet;
}

bool OAIWebServiceMessage::is_read_Valid() const{
    return m_read_isValid;
}

OAIWebServiceMessageLink OAIWebServiceMessage::getRepliedToMessage() const {
    return m_replied_to_message;
}
void OAIWebServiceMessage::setRepliedToMessage(const OAIWebServiceMessageLink &replied_to_message) {
    m_replied_to_message = replied_to_message;
    m_replied_to_message_isSet = true;
}

bool OAIWebServiceMessage::is_replied_to_message_Set() const{
    return m_replied_to_message_isSet;
}

bool OAIWebServiceMessage::is_replied_to_message_Valid() const{
    return m_replied_to_message_isValid;
}

QString OAIWebServiceMessage::getToNumber() const {
    return m_to_number;
}
void OAIWebServiceMessage::setToNumber(const QString &to_number) {
    m_to_number = to_number;
    m_to_number_isSet = true;
}

bool OAIWebServiceMessage::is_to_number_Set() const{
    return m_to_number_isSet;
}

bool OAIWebServiceMessage::is_to_number_Valid() const{
    return m_to_number_isValid;
}

QString OAIWebServiceMessage::getUserDataField() const {
    return m_user_data_field;
}
void OAIWebServiceMessage::setUserDataField(const QString &user_data_field) {
    m_user_data_field = user_data_field;
    m_user_data_field_isSet = true;
}

bool OAIWebServiceMessage::is_user_data_field_Set() const{
    return m_user_data_field_isSet;
}

bool OAIWebServiceMessage::is_user_data_field_Valid() const{
    return m_user_data_field_isValid;
}

bool OAIWebServiceMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_scheduled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replied_to_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_field_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
