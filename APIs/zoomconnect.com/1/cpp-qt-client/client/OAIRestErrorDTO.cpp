/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestErrorDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestErrorDTO::OAIRestErrorDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestErrorDTO::OAIRestErrorDTO() {
    this->initializeModel();
}

OAIRestErrorDTO::~OAIRestErrorDTO() {}

void OAIRestErrorDTO::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_developer_message_isSet = false;
    m_developer_message_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_more_info_url_isSet = false;
    m_more_info_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRestErrorDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestErrorDTO::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_developer_message_isValid = ::OpenAPI::fromJsonValue(m_developer_message, json[QString("developerMessage")]);
    m_developer_message_isSet = !json[QString("developerMessage")].isNull() && m_developer_message_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_more_info_url_isValid = ::OpenAPI::fromJsonValue(m_more_info_url, json[QString("moreInfoUrl")]);
    m_more_info_url_isSet = !json[QString("moreInfoUrl")].isNull() && m_more_info_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRestErrorDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestErrorDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_developer_message_isSet) {
        obj.insert(QString("developerMessage"), ::OpenAPI::toJsonValue(m_developer_message));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_more_info_url_isSet) {
        obj.insert(QString("moreInfoUrl"), ::OpenAPI::toJsonValue(m_more_info_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIRestErrorDTO::getCode() const {
    return m_code;
}
void OAIRestErrorDTO::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRestErrorDTO::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRestErrorDTO::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIRestErrorDTO::getDeveloperMessage() const {
    return m_developer_message;
}
void OAIRestErrorDTO::setDeveloperMessage(const QString &developer_message) {
    m_developer_message = developer_message;
    m_developer_message_isSet = true;
}

bool OAIRestErrorDTO::is_developer_message_Set() const{
    return m_developer_message_isSet;
}

bool OAIRestErrorDTO::is_developer_message_Valid() const{
    return m_developer_message_isValid;
}

QString OAIRestErrorDTO::getMessage() const {
    return m_message;
}
void OAIRestErrorDTO::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRestErrorDTO::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRestErrorDTO::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIRestErrorDTO::getMoreInfoUrl() const {
    return m_more_info_url;
}
void OAIRestErrorDTO::setMoreInfoUrl(const QString &more_info_url) {
    m_more_info_url = more_info_url;
    m_more_info_url_isSet = true;
}

bool OAIRestErrorDTO::is_more_info_url_Set() const{
    return m_more_info_url_isSet;
}

bool OAIRestErrorDTO::is_more_info_url_Valid() const{
    return m_more_info_url_isValid;
}

QString OAIRestErrorDTO::getStatus() const {
    return m_status;
}
void OAIRestErrorDTO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRestErrorDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRestErrorDTO::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRestErrorDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_info_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestErrorDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
