/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWebServiceGroup.h"
#include "OAIWebServiceGroups.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void apiRestV1GroupsAllGet();

    /**
    * @param[in]  body OAIWebServiceGroup [optional]
    */
    virtual void apiRestV1GroupsCreatePost(const ::OpenAPI::OptionalParam<OAIWebServiceGroup> &body = ::OpenAPI::OptionalParam<OAIWebServiceGroup>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiRestV1GroupsGroupIdAddContactContactIdGet(const QString &group_id, const QString &contact_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiRestV1GroupsGroupIdAddContactContactIdPost(const QString &group_id, const QString &contact_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void apiRestV1GroupsGroupIdDelete(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    */
    virtual void apiRestV1GroupsGroupIdGet(const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  body OAIWebServiceGroup [optional]
    */
    virtual void apiRestV1GroupsGroupIdPost(const QString &group_id, const ::OpenAPI::OptionalParam<OAIWebServiceGroup> &body = ::OpenAPI::OptionalParam<OAIWebServiceGroup>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiRestV1GroupsGroupIdRemoveContactContactIdGet(const QString &group_id, const QString &contact_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  contact_id QString [required]
    */
    virtual void apiRestV1GroupsGroupIdRemoveContactContactIdPost(const QString &group_id, const QString &contact_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRestV1GroupsAllGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsCreatePostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdAddContactContactIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdAddContactContactIdPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRestV1GroupsAllGetSignal(OAIWebServiceGroups summary);
    void apiRestV1GroupsCreatePostSignal(OAIWebServiceGroup summary);
    void apiRestV1GroupsGroupIdAddContactContactIdGetSignal();
    void apiRestV1GroupsGroupIdAddContactContactIdPostSignal();
    void apiRestV1GroupsGroupIdDeleteSignal();
    void apiRestV1GroupsGroupIdGetSignal(OAIWebServiceGroup summary);
    void apiRestV1GroupsGroupIdPostSignal(OAIWebServiceGroup summary);
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetSignal();
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostSignal();


    void apiRestV1GroupsAllGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceGroups summary);
    void apiRestV1GroupsCreatePostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceGroup summary);
    void apiRestV1GroupsGroupIdAddContactContactIdGetSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdAddContactContactIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceGroup summary);
    void apiRestV1GroupsGroupIdPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceGroup summary);
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsAllGetSignalError() instead")
    void apiRestV1GroupsAllGetSignalE(OAIWebServiceGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsAllGetSignalError(OAIWebServiceGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsCreatePostSignalError() instead")
    void apiRestV1GroupsCreatePostSignalE(OAIWebServiceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsCreatePostSignalError(OAIWebServiceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdAddContactContactIdGetSignalError() instead")
    void apiRestV1GroupsGroupIdAddContactContactIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdAddContactContactIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdAddContactContactIdPostSignalError() instead")
    void apiRestV1GroupsGroupIdAddContactContactIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdAddContactContactIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdDeleteSignalError() instead")
    void apiRestV1GroupsGroupIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdGetSignalError() instead")
    void apiRestV1GroupsGroupIdGetSignalE(OAIWebServiceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdGetSignalError(OAIWebServiceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdPostSignalError() instead")
    void apiRestV1GroupsGroupIdPostSignalE(OAIWebServiceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdPostSignalError(OAIWebServiceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalError() instead")
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalError() instead")
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsAllGetSignalErrorFull() instead")
    void apiRestV1GroupsAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsCreatePostSignalErrorFull() instead")
    void apiRestV1GroupsCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdAddContactContactIdGetSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdAddContactContactIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdAddContactContactIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdAddContactContactIdPostSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdAddContactContactIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdAddContactContactIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdDeleteSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdGetSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdPostSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdRemoveContactContactIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalErrorFull() instead")
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1GroupsGroupIdRemoveContactContactIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
