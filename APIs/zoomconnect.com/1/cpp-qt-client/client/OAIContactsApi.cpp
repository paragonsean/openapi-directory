/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIContactsApi::OAIContactsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIContactsApi::~OAIContactsApi() {
}

void OAIContactsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.zoomconnect.com/app"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiRestV1ContactsAllGet", defaultConf);
    _serverIndices.insert("apiRestV1ContactsAllGet", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdAddFromGroupGroupIdGet", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdAddFromGroupGroupIdGet", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdAddFromGroupGroupIdPost", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdAddFromGroupGroupIdPost", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdAddToGroupGroupIdGet", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdAddToGroupGroupIdGet", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdAddToGroupGroupIdPost", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdAddToGroupGroupIdPost", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdDelete", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdDelete", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdGet", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdGet", 0);
    _serverConfigs.insert("apiRestV1ContactsContactIdPost", defaultConf);
    _serverIndices.insert("apiRestV1ContactsContactIdPost", 0);
    _serverConfigs.insert("apiRestV1ContactsCreatePost", defaultConf);
    _serverIndices.insert("apiRestV1ContactsCreatePost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIContactsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIContactsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIContactsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIContactsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIContactsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIContactsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIContactsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIContactsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIContactsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIContactsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIContactsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIContactsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIContactsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIContactsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIContactsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIContactsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIContactsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIContactsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIContactsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIContactsApi::apiRestV1ContactsAllGet() {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsAllGet"][_serverIndices.value("apiRestV1ContactsAllGet")].URL()+"/api/rest/v1/contacts/all");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsAllGetCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsAllGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWebServiceContacts output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsAllGetSignal(output);
        Q_EMIT apiRestV1ContactsAllGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsAllGetSignalE(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsAllGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsAllGetSignalError(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsAllGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdAddFromGroupGroupIdGet(const QString &contact_id, const QString &group_id) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdAddFromGroupGroupIdGet"][_serverIndices.value("apiRestV1ContactsContactIdAddFromGroupGroupIdGet")].URL()+"/api/rest/v1/contacts/{contactId}/addFromGroup/{groupId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdAddFromGroupGroupIdGetCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdAddFromGroupGroupIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignal();
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalE(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalError(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdAddFromGroupGroupIdPost(const QString &contact_id, const QString &group_id) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdAddFromGroupGroupIdPost"][_serverIndices.value("apiRestV1ContactsContactIdAddFromGroupGroupIdPost")].URL()+"/api/rest/v1/contacts/{contactId}/addFromGroup/{groupId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdAddFromGroupGroupIdPostCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdAddFromGroupGroupIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignal();
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalE(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalError(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdAddToGroupGroupIdGet(const QString &contact_id, const QString &group_id) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdAddToGroupGroupIdGet"][_serverIndices.value("apiRestV1ContactsContactIdAddToGroupGroupIdGet")].URL()+"/api/rest/v1/contacts/{contactId}/addToGroup/{groupId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdAddToGroupGroupIdGetCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdAddToGroupGroupIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdGetSignal();
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalE(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalError(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdAddToGroupGroupIdPost(const QString &contact_id, const QString &group_id) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdAddToGroupGroupIdPost"][_serverIndices.value("apiRestV1ContactsContactIdAddToGroupGroupIdPost")].URL()+"/api/rest/v1/contacts/{contactId}/addToGroup/{groupId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdAddToGroupGroupIdPostCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdAddToGroupGroupIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdPostSignal();
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalE(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalError(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdDelete(const QString &contact_id) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdDelete"][_serverIndices.value("apiRestV1ContactsContactIdDelete")].URL()+"/api/rest/v1/contacts/{contactId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdDeleteCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdDeleteSignal();
        Q_EMIT apiRestV1ContactsContactIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdDeleteSignalE(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdDeleteSignalError(error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdGet(const QString &contact_id) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdGet"][_serverIndices.value("apiRestV1ContactsContactIdGet")].URL()+"/api/rest/v1/contacts/{contactId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdGetCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWebServiceContact output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdGetSignal(output);
        Q_EMIT apiRestV1ContactsContactIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdGetSignalE(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdGetSignalError(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsContactIdPost(const QString &contact_id, const ::OpenAPI::OptionalParam<OAIWebServiceContact> &body) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsContactIdPost"][_serverIndices.value("apiRestV1ContactsContactIdPost")].URL()+"/api/rest/v1/contacts/{contactId}");
    
    
    {
        QString contact_idPathParam("{");
        contact_idPathParam.append("contactId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contactId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contactId"+pathSuffix : pathPrefix;
        fullPath.replace(contact_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(contact_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsContactIdPostCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsContactIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWebServiceContact output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsContactIdPostSignal(output);
        Q_EMIT apiRestV1ContactsContactIdPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsContactIdPostSignalE(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsContactIdPostSignalError(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsContactIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::apiRestV1ContactsCreatePost(const ::OpenAPI::OptionalParam<OAIWebServiceContact> &body) {
    QString fullPath = QString(_serverConfigs["apiRestV1ContactsCreatePost"][_serverIndices.value("apiRestV1ContactsCreatePost")].URL()+"/api/rest/v1/contacts/create");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContactsApi::apiRestV1ContactsCreatePostCallback);
    connect(this, &OAIContactsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContactsApi::apiRestV1ContactsCreatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWebServiceContact output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiRestV1ContactsCreatePostSignal(output);
        Q_EMIT apiRestV1ContactsCreatePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiRestV1ContactsCreatePostSignalE(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsCreatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiRestV1ContactsCreatePostSignalError(output, error_type, error_str);
        Q_EMIT apiRestV1ContactsCreatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContactsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
