/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceAnalyseMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceAnalyseMessageResponse::OAIWebServiceAnalyseMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceAnalyseMessageResponse::OAIWebServiceAnalyseMessageResponse() {
    this->initializeModel();
}

OAIWebServiceAnalyseMessageResponse::~OAIWebServiceAnalyseMessageResponse() {}

void OAIWebServiceAnalyseMessageResponse::initializeModel() {

    m_character_analysis_isSet = false;
    m_character_analysis_isValid = false;

    m_message_credit_cost_isSet = false;
    m_message_credit_cost_isValid = false;

    m_message_encoding_isSet = false;
    m_message_encoding_isValid = false;

    m_message_length_isSet = false;
    m_message_length_isValid = false;

    m_message_length_within_maximum_allowed_isSet = false;
    m_message_length_within_maximum_allowed_isValid = false;

    m_number_of_messages_isSet = false;
    m_number_of_messages_isValid = false;
}

void OAIWebServiceAnalyseMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceAnalyseMessageResponse::fromJsonObject(QJsonObject json) {

    if(json["characterAnalysis"].isArray()){
        auto arr = json["characterAnalysis"].toArray();
        m_character_analysis_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIObject> item;
                m_character_analysis_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_character_analysis_isSet = !jval.isNull() && m_character_analysis_isValid;
                m_character_analysis.push_back(item);
            }
        }
    }

    m_message_credit_cost_isValid = ::OpenAPI::fromJsonValue(m_message_credit_cost, json[QString("messageCreditCost")]);
    m_message_credit_cost_isSet = !json[QString("messageCreditCost")].isNull() && m_message_credit_cost_isValid;

    m_message_encoding_isValid = ::OpenAPI::fromJsonValue(m_message_encoding, json[QString("messageEncoding")]);
    m_message_encoding_isSet = !json[QString("messageEncoding")].isNull() && m_message_encoding_isValid;

    m_message_length_isValid = ::OpenAPI::fromJsonValue(m_message_length, json[QString("messageLength")]);
    m_message_length_isSet = !json[QString("messageLength")].isNull() && m_message_length_isValid;

    m_message_length_within_maximum_allowed_isValid = ::OpenAPI::fromJsonValue(m_message_length_within_maximum_allowed, json[QString("messageLengthWithinMaximumAllowed")]);
    m_message_length_within_maximum_allowed_isSet = !json[QString("messageLengthWithinMaximumAllowed")].isNull() && m_message_length_within_maximum_allowed_isValid;

    m_number_of_messages_isValid = ::OpenAPI::fromJsonValue(m_number_of_messages, json[QString("numberOfMessages")]);
    m_number_of_messages_isSet = !json[QString("numberOfMessages")].isNull() && m_number_of_messages_isValid;
}

QString OAIWebServiceAnalyseMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceAnalyseMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_character_analysis.size() > 0) {
        
        obj.insert(QString("characterAnalysis"), toJsonValue(m_character_analysis));
    }
    if (m_message_credit_cost_isSet) {
        obj.insert(QString("messageCreditCost"), ::OpenAPI::toJsonValue(m_message_credit_cost));
    }
    if (m_message_encoding_isSet) {
        obj.insert(QString("messageEncoding"), ::OpenAPI::toJsonValue(m_message_encoding));
    }
    if (m_message_length_isSet) {
        obj.insert(QString("messageLength"), ::OpenAPI::toJsonValue(m_message_length));
    }
    if (m_message_length_within_maximum_allowed_isSet) {
        obj.insert(QString("messageLengthWithinMaximumAllowed"), ::OpenAPI::toJsonValue(m_message_length_within_maximum_allowed));
    }
    if (m_number_of_messages_isSet) {
        obj.insert(QString("numberOfMessages"), ::OpenAPI::toJsonValue(m_number_of_messages));
    }
    return obj;
}

QList<QList<OAIObject>> OAIWebServiceAnalyseMessageResponse::getCharacterAnalysis() const {
    return m_character_analysis;
}
void OAIWebServiceAnalyseMessageResponse::setCharacterAnalysis(const QList<QList<OAIObject>> &character_analysis) {
    m_character_analysis = character_analysis;
    m_character_analysis_isSet = true;
}

bool OAIWebServiceAnalyseMessageResponse::is_character_analysis_Set() const{
    return m_character_analysis_isSet;
}

bool OAIWebServiceAnalyseMessageResponse::is_character_analysis_Valid() const{
    return m_character_analysis_isValid;
}

double OAIWebServiceAnalyseMessageResponse::getMessageCreditCost() const {
    return m_message_credit_cost;
}
void OAIWebServiceAnalyseMessageResponse::setMessageCreditCost(const double &message_credit_cost) {
    m_message_credit_cost = message_credit_cost;
    m_message_credit_cost_isSet = true;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_credit_cost_Set() const{
    return m_message_credit_cost_isSet;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_credit_cost_Valid() const{
    return m_message_credit_cost_isValid;
}

QString OAIWebServiceAnalyseMessageResponse::getMessageEncoding() const {
    return m_message_encoding;
}
void OAIWebServiceAnalyseMessageResponse::setMessageEncoding(const QString &message_encoding) {
    m_message_encoding = message_encoding;
    m_message_encoding_isSet = true;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_encoding_Set() const{
    return m_message_encoding_isSet;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_encoding_Valid() const{
    return m_message_encoding_isValid;
}

qint32 OAIWebServiceAnalyseMessageResponse::getMessageLength() const {
    return m_message_length;
}
void OAIWebServiceAnalyseMessageResponse::setMessageLength(const qint32 &message_length) {
    m_message_length = message_length;
    m_message_length_isSet = true;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_length_Set() const{
    return m_message_length_isSet;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_length_Valid() const{
    return m_message_length_isValid;
}

bool OAIWebServiceAnalyseMessageResponse::isMessageLengthWithinMaximumAllowed() const {
    return m_message_length_within_maximum_allowed;
}
void OAIWebServiceAnalyseMessageResponse::setMessageLengthWithinMaximumAllowed(const bool &message_length_within_maximum_allowed) {
    m_message_length_within_maximum_allowed = message_length_within_maximum_allowed;
    m_message_length_within_maximum_allowed_isSet = true;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_length_within_maximum_allowed_Set() const{
    return m_message_length_within_maximum_allowed_isSet;
}

bool OAIWebServiceAnalyseMessageResponse::is_message_length_within_maximum_allowed_Valid() const{
    return m_message_length_within_maximum_allowed_isValid;
}

qint32 OAIWebServiceAnalyseMessageResponse::getNumberOfMessages() const {
    return m_number_of_messages;
}
void OAIWebServiceAnalyseMessageResponse::setNumberOfMessages(const qint32 &number_of_messages) {
    m_number_of_messages = number_of_messages;
    m_number_of_messages_isSet = true;
}

bool OAIWebServiceAnalyseMessageResponse::is_number_of_messages_Set() const{
    return m_number_of_messages_isSet;
}

bool OAIWebServiceAnalyseMessageResponse::is_number_of_messages_Valid() const{
    return m_number_of_messages_isValid;
}

bool OAIWebServiceAnalyseMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_analysis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_credit_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_length_within_maximum_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_messages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceAnalyseMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
