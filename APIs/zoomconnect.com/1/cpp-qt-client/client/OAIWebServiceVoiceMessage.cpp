/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceVoiceMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceVoiceMessage::OAIWebServiceVoiceMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceVoiceMessage::OAIWebServiceVoiceMessage() {
    this->initializeModel();
}

OAIWebServiceVoiceMessage::~OAIWebServiceVoiceMessage() {}

void OAIWebServiceVoiceMessage::initializeModel() {

    m_audio_file_url_isSet = false;
    m_audio_file_url_isValid = false;

    m_campaign_isSet = false;
    m_campaign_isValid = false;

    m_date_time_sent_isSet = false;
    m_date_time_sent_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_status_isSet = false;
    m_message_status_isValid = false;

    m_to_number_isSet = false;
    m_to_number_isValid = false;

    m_user_data_field_isSet = false;
    m_user_data_field_isValid = false;

    m_voice_message_id_isSet = false;
    m_voice_message_id_isValid = false;
}

void OAIWebServiceVoiceMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceVoiceMessage::fromJsonObject(QJsonObject json) {

    m_audio_file_url_isValid = ::OpenAPI::fromJsonValue(m_audio_file_url, json[QString("audioFileUrl")]);
    m_audio_file_url_isSet = !json[QString("audioFileUrl")].isNull() && m_audio_file_url_isValid;

    m_campaign_isValid = ::OpenAPI::fromJsonValue(m_campaign, json[QString("campaign")]);
    m_campaign_isSet = !json[QString("campaign")].isNull() && m_campaign_isValid;

    m_date_time_sent_isValid = ::OpenAPI::fromJsonValue(m_date_time_sent, json[QString("dateTimeSent")]);
    m_date_time_sent_isSet = !json[QString("dateTimeSent")].isNull() && m_date_time_sent_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_status_isValid = ::OpenAPI::fromJsonValue(m_message_status, json[QString("messageStatus")]);
    m_message_status_isSet = !json[QString("messageStatus")].isNull() && m_message_status_isValid;

    m_to_number_isValid = ::OpenAPI::fromJsonValue(m_to_number, json[QString("toNumber")]);
    m_to_number_isSet = !json[QString("toNumber")].isNull() && m_to_number_isValid;

    m_user_data_field_isValid = ::OpenAPI::fromJsonValue(m_user_data_field, json[QString("userDataField")]);
    m_user_data_field_isSet = !json[QString("userDataField")].isNull() && m_user_data_field_isValid;

    m_voice_message_id_isValid = ::OpenAPI::fromJsonValue(m_voice_message_id, json[QString("voiceMessageId")]);
    m_voice_message_id_isSet = !json[QString("voiceMessageId")].isNull() && m_voice_message_id_isValid;
}

QString OAIWebServiceVoiceMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceVoiceMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_file_url_isSet) {
        obj.insert(QString("audioFileUrl"), ::OpenAPI::toJsonValue(m_audio_file_url));
    }
    if (m_campaign_isSet) {
        obj.insert(QString("campaign"), ::OpenAPI::toJsonValue(m_campaign));
    }
    if (m_date_time_sent_isSet) {
        obj.insert(QString("dateTimeSent"), ::OpenAPI::toJsonValue(m_date_time_sent));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_status_isSet) {
        obj.insert(QString("messageStatus"), ::OpenAPI::toJsonValue(m_message_status));
    }
    if (m_to_number_isSet) {
        obj.insert(QString("toNumber"), ::OpenAPI::toJsonValue(m_to_number));
    }
    if (m_user_data_field_isSet) {
        obj.insert(QString("userDataField"), ::OpenAPI::toJsonValue(m_user_data_field));
    }
    if (m_voice_message_id_isSet) {
        obj.insert(QString("voiceMessageId"), ::OpenAPI::toJsonValue(m_voice_message_id));
    }
    return obj;
}

QString OAIWebServiceVoiceMessage::getAudioFileUrl() const {
    return m_audio_file_url;
}
void OAIWebServiceVoiceMessage::setAudioFileUrl(const QString &audio_file_url) {
    m_audio_file_url = audio_file_url;
    m_audio_file_url_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_audio_file_url_Set() const{
    return m_audio_file_url_isSet;
}

bool OAIWebServiceVoiceMessage::is_audio_file_url_Valid() const{
    return m_audio_file_url_isValid;
}

QString OAIWebServiceVoiceMessage::getCampaign() const {
    return m_campaign;
}
void OAIWebServiceVoiceMessage::setCampaign(const QString &campaign) {
    m_campaign = campaign;
    m_campaign_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_campaign_Set() const{
    return m_campaign_isSet;
}

bool OAIWebServiceVoiceMessage::is_campaign_Valid() const{
    return m_campaign_isValid;
}

QDateTime OAIWebServiceVoiceMessage::getDateTimeSent() const {
    return m_date_time_sent;
}
void OAIWebServiceVoiceMessage::setDateTimeSent(const QDateTime &date_time_sent) {
    m_date_time_sent = date_time_sent;
    m_date_time_sent_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_date_time_sent_Set() const{
    return m_date_time_sent_isSet;
}

bool OAIWebServiceVoiceMessage::is_date_time_sent_Valid() const{
    return m_date_time_sent_isValid;
}

bool OAIWebServiceVoiceMessage::isDeleted() const {
    return m_deleted;
}
void OAIWebServiceVoiceMessage::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIWebServiceVoiceMessage::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIWebServiceVoiceMessage::getLanguage() const {
    return m_language;
}
void OAIWebServiceVoiceMessage::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_language_Set() const{
    return m_language_isSet;
}

bool OAIWebServiceVoiceMessage::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAILink> OAIWebServiceVoiceMessage::getLinks() const {
    return m_links;
}
void OAIWebServiceVoiceMessage::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_links_Set() const{
    return m_links_isSet;
}

bool OAIWebServiceVoiceMessage::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIWebServiceVoiceMessage::getMessage() const {
    return m_message;
}
void OAIWebServiceVoiceMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWebServiceVoiceMessage::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWebServiceVoiceMessage::getMessageStatus() const {
    return m_message_status;
}
void OAIWebServiceVoiceMessage::setMessageStatus(const QString &message_status) {
    m_message_status = message_status;
    m_message_status_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_message_status_Set() const{
    return m_message_status_isSet;
}

bool OAIWebServiceVoiceMessage::is_message_status_Valid() const{
    return m_message_status_isValid;
}

QString OAIWebServiceVoiceMessage::getToNumber() const {
    return m_to_number;
}
void OAIWebServiceVoiceMessage::setToNumber(const QString &to_number) {
    m_to_number = to_number;
    m_to_number_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_to_number_Set() const{
    return m_to_number_isSet;
}

bool OAIWebServiceVoiceMessage::is_to_number_Valid() const{
    return m_to_number_isValid;
}

QString OAIWebServiceVoiceMessage::getUserDataField() const {
    return m_user_data_field;
}
void OAIWebServiceVoiceMessage::setUserDataField(const QString &user_data_field) {
    m_user_data_field = user_data_field;
    m_user_data_field_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_user_data_field_Set() const{
    return m_user_data_field_isSet;
}

bool OAIWebServiceVoiceMessage::is_user_data_field_Valid() const{
    return m_user_data_field_isValid;
}

QString OAIWebServiceVoiceMessage::getVoiceMessageId() const {
    return m_voice_message_id;
}
void OAIWebServiceVoiceMessage::setVoiceMessageId(const QString &voice_message_id) {
    m_voice_message_id = voice_message_id;
    m_voice_message_id_isSet = true;
}

bool OAIWebServiceVoiceMessage::is_voice_message_id_Set() const{
    return m_voice_message_id_isSet;
}

bool OAIWebServiceVoiceMessage::is_voice_message_id_Valid() const{
    return m_voice_message_id_isValid;
}

bool OAIWebServiceVoiceMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceVoiceMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
