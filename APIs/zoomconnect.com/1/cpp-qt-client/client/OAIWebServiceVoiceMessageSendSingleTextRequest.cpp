/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceVoiceMessageSendSingleTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceVoiceMessageSendSingleTextRequest::OAIWebServiceVoiceMessageSendSingleTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceVoiceMessageSendSingleTextRequest::OAIWebServiceVoiceMessageSendSingleTextRequest() {
    this->initializeModel();
}

OAIWebServiceVoiceMessageSendSingleTextRequest::~OAIWebServiceVoiceMessageSendSingleTextRequest() {}

void OAIWebServiceVoiceMessageSendSingleTextRequest::initializeModel() {

    m_campaign_isSet = false;
    m_campaign_isValid = false;

    m_data_field_isSet = false;
    m_data_field_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_recipient_number_isSet = false;
    m_recipient_number_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_retry_maximum_interval_isSet = false;
    m_retry_maximum_interval_isValid = false;

    m_retry_minimum_interval_isSet = false;
    m_retry_minimum_interval_isValid = false;
}

void OAIWebServiceVoiceMessageSendSingleTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceVoiceMessageSendSingleTextRequest::fromJsonObject(QJsonObject json) {

    m_campaign_isValid = ::OpenAPI::fromJsonValue(m_campaign, json[QString("campaign")]);
    m_campaign_isSet = !json[QString("campaign")].isNull() && m_campaign_isValid;

    m_data_field_isValid = ::OpenAPI::fromJsonValue(m_data_field, json[QString("dataField")]);
    m_data_field_isSet = !json[QString("dataField")].isNull() && m_data_field_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_recipient_number_isValid = ::OpenAPI::fromJsonValue(m_recipient_number, json[QString("recipientNumber")]);
    m_recipient_number_isSet = !json[QString("recipientNumber")].isNull() && m_recipient_number_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_retry_maximum_interval_isValid = ::OpenAPI::fromJsonValue(m_retry_maximum_interval, json[QString("retryMaximumInterval")]);
    m_retry_maximum_interval_isSet = !json[QString("retryMaximumInterval")].isNull() && m_retry_maximum_interval_isValid;

    m_retry_minimum_interval_isValid = ::OpenAPI::fromJsonValue(m_retry_minimum_interval, json[QString("retryMinimumInterval")]);
    m_retry_minimum_interval_isSet = !json[QString("retryMinimumInterval")].isNull() && m_retry_minimum_interval_isValid;
}

QString OAIWebServiceVoiceMessageSendSingleTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceVoiceMessageSendSingleTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_isSet) {
        obj.insert(QString("campaign"), ::OpenAPI::toJsonValue(m_campaign));
    }
    if (m_data_field_isSet) {
        obj.insert(QString("dataField"), ::OpenAPI::toJsonValue(m_data_field));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_recipient_number_isSet) {
        obj.insert(QString("recipientNumber"), ::OpenAPI::toJsonValue(m_recipient_number));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_retry_maximum_interval_isSet) {
        obj.insert(QString("retryMaximumInterval"), ::OpenAPI::toJsonValue(m_retry_maximum_interval));
    }
    if (m_retry_minimum_interval_isSet) {
        obj.insert(QString("retryMinimumInterval"), ::OpenAPI::toJsonValue(m_retry_minimum_interval));
    }
    return obj;
}

QString OAIWebServiceVoiceMessageSendSingleTextRequest::getCampaign() const {
    return m_campaign;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setCampaign(const QString &campaign) {
    m_campaign = campaign;
    m_campaign_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_campaign_Set() const{
    return m_campaign_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_campaign_Valid() const{
    return m_campaign_isValid;
}

QString OAIWebServiceVoiceMessageSendSingleTextRequest::getDataField() const {
    return m_data_field;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setDataField(const QString &data_field) {
    m_data_field = data_field;
    m_data_field_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_data_field_Set() const{
    return m_data_field_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_data_field_Valid() const{
    return m_data_field_isValid;
}

QString OAIWebServiceVoiceMessageSendSingleTextRequest::getLanguage() const {
    return m_language;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIWebServiceVoiceMessageSendSingleTextRequest::getMessage() const {
    return m_message;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWebServiceVoiceMessageSendSingleTextRequest::getRecipientNumber() const {
    return m_recipient_number;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setRecipientNumber(const QString &recipient_number) {
    m_recipient_number = recipient_number;
    m_recipient_number_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_recipient_number_Set() const{
    return m_recipient_number_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_recipient_number_Valid() const{
    return m_recipient_number_isValid;
}

qint32 OAIWebServiceVoiceMessageSendSingleTextRequest::getRetryCount() const {
    return m_retry_count;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

qint32 OAIWebServiceVoiceMessageSendSingleTextRequest::getRetryMaximumInterval() const {
    return m_retry_maximum_interval;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setRetryMaximumInterval(const qint32 &retry_maximum_interval) {
    m_retry_maximum_interval = retry_maximum_interval;
    m_retry_maximum_interval_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_retry_maximum_interval_Set() const{
    return m_retry_maximum_interval_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_retry_maximum_interval_Valid() const{
    return m_retry_maximum_interval_isValid;
}

qint32 OAIWebServiceVoiceMessageSendSingleTextRequest::getRetryMinimumInterval() const {
    return m_retry_minimum_interval;
}
void OAIWebServiceVoiceMessageSendSingleTextRequest::setRetryMinimumInterval(const qint32 &retry_minimum_interval) {
    m_retry_minimum_interval = retry_minimum_interval;
    m_retry_minimum_interval_isSet = true;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_retry_minimum_interval_Set() const{
    return m_retry_minimum_interval_isSet;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::is_retry_minimum_interval_Valid() const{
    return m_retry_minimum_interval_isValid;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_maximum_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_minimum_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceVoiceMessageSendSingleTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
