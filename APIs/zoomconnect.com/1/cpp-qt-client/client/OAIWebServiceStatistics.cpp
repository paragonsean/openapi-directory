/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceStatistics::OAIWebServiceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceStatistics::OAIWebServiceStatistics() {
    this->initializeModel();
}

OAIWebServiceStatistics::~OAIWebServiceStatistics() {}

void OAIWebServiceStatistics::initializeModel() {

    m_delivered_isSet = false;
    m_delivered_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_failed_optout_isSet = false;
    m_failed_optout_isValid = false;

    m_failed_refunded_isSet = false;
    m_failed_refunded_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIWebServiceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceStatistics::fromJsonObject(QJsonObject json) {

    m_delivered_isValid = ::OpenAPI::fromJsonValue(m_delivered, json[QString("delivered")]);
    m_delivered_isSet = !json[QString("delivered")].isNull() && m_delivered_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_failed_optout_isValid = ::OpenAPI::fromJsonValue(m_failed_optout, json[QString("failedOptout")]);
    m_failed_optout_isSet = !json[QString("failedOptout")].isNull() && m_failed_optout_isValid;

    m_failed_refunded_isValid = ::OpenAPI::fromJsonValue(m_failed_refunded, json[QString("failedRefunded")]);
    m_failed_refunded_isSet = !json[QString("failedRefunded")].isNull() && m_failed_refunded_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIWebServiceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_delivered_isSet) {
        obj.insert(QString("delivered"), ::OpenAPI::toJsonValue(m_delivered));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_failed_optout_isSet) {
        obj.insert(QString("failedOptout"), ::OpenAPI::toJsonValue(m_failed_optout));
    }
    if (m_failed_refunded_isSet) {
        obj.insert(QString("failedRefunded"), ::OpenAPI::toJsonValue(m_failed_refunded));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIWebServiceStatistics::getDelivered() const {
    return m_delivered;
}
void OAIWebServiceStatistics::setDelivered(const double &delivered) {
    m_delivered = delivered;
    m_delivered_isSet = true;
}

bool OAIWebServiceStatistics::is_delivered_Set() const{
    return m_delivered_isSet;
}

bool OAIWebServiceStatistics::is_delivered_Valid() const{
    return m_delivered_isValid;
}

double OAIWebServiceStatistics::getFailed() const {
    return m_failed;
}
void OAIWebServiceStatistics::setFailed(const double &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIWebServiceStatistics::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIWebServiceStatistics::is_failed_Valid() const{
    return m_failed_isValid;
}

double OAIWebServiceStatistics::getFailedOptout() const {
    return m_failed_optout;
}
void OAIWebServiceStatistics::setFailedOptout(const double &failed_optout) {
    m_failed_optout = failed_optout;
    m_failed_optout_isSet = true;
}

bool OAIWebServiceStatistics::is_failed_optout_Set() const{
    return m_failed_optout_isSet;
}

bool OAIWebServiceStatistics::is_failed_optout_Valid() const{
    return m_failed_optout_isValid;
}

double OAIWebServiceStatistics::getFailedRefunded() const {
    return m_failed_refunded;
}
void OAIWebServiceStatistics::setFailedRefunded(const double &failed_refunded) {
    m_failed_refunded = failed_refunded;
    m_failed_refunded_isSet = true;
}

bool OAIWebServiceStatistics::is_failed_refunded_Set() const{
    return m_failed_refunded_isSet;
}

bool OAIWebServiceStatistics::is_failed_refunded_Valid() const{
    return m_failed_refunded_isValid;
}

double OAIWebServiceStatistics::getSent() const {
    return m_sent;
}
void OAIWebServiceStatistics::setSent(const double &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIWebServiceStatistics::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIWebServiceStatistics::is_sent_Valid() const{
    return m_sent_isValid;
}

double OAIWebServiceStatistics::getTotal() const {
    return m_total;
}
void OAIWebServiceStatistics::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIWebServiceStatistics::is_total_Set() const{
    return m_total_isSet;
}

bool OAIWebServiceStatistics::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIWebServiceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_optout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
