/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISmsApi_H
#define OAI_OAISmsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestErrorDTO.h"
#include "OAIWebServiceSendSmsRequest.h"
#include "OAIWebServiceSendSmsRequests.h"
#include "OAIWebServiceSendSmsResponse.h"
#include "OAIWebServiceSendSmsResponses.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISmsApi : public QObject {
    Q_OBJECT

public:
    OAISmsApi(const int timeOut = 0);
    ~OAISmsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void apiRestV1SmsSendBulkGet();

    /**
    * @param[in]  body OAIWebServiceSendSmsRequests [optional]
    */
    virtual void apiRestV1SmsSendBulkPost(const ::OpenAPI::OptionalParam<OAIWebServiceSendSmsRequests> &body = ::OpenAPI::OptionalParam<OAIWebServiceSendSmsRequests>());


    virtual void apiRestV1SmsSendGet();

    /**
    * @param[in]  body OAIWebServiceSendSmsRequest [optional]
    */
    virtual void apiRestV1SmsSendPost(const ::OpenAPI::OptionalParam<OAIWebServiceSendSmsRequest> &body = ::OpenAPI::OptionalParam<OAIWebServiceSendSmsRequest>());

    /**
    * @param[in]  recipient_number QString [required]
    * @param[in]  message QString [required]
    * @param[in]  date_to_send QDateTime [optional]
    * @param[in]  campaign QString [optional]
    * @param[in]  data_field QString [optional]
    */
    virtual void apiRestV1SmsSendUrlParametersGet(const QString &recipient_number, const QString &message, const ::OpenAPI::OptionalParam<QDateTime> &date_to_send = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &campaign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_field = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  recipient_number QString [required]
    * @param[in]  message QString [required]
    * @param[in]  date_to_send QDateTime [optional]
    * @param[in]  campaign QString [optional]
    * @param[in]  data_field QString [optional]
    */
    virtual void apiRestV1SmsSendUrlParametersPost(const QString &recipient_number, const QString &message, const ::OpenAPI::OptionalParam<QDateTime> &date_to_send = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &campaign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_field = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  recipient_number QString [required]
    * @param[in]  message QString [required]
    * @param[in]  date_to_send QDateTime [optional]
    * @param[in]  campaign QString [optional]
    * @param[in]  data_field QString [optional]
    */
    virtual void apiRestV1SmsSendUrlTokenGet(const QString &token, const QString &recipient_number, const QString &message, const ::OpenAPI::OptionalParam<QDateTime> &date_to_send = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &campaign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_field = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  recipient_number QString [required]
    * @param[in]  message QString [required]
    * @param[in]  date_to_send QDateTime [optional]
    * @param[in]  campaign QString [optional]
    * @param[in]  data_field QString [optional]
    */
    virtual void apiRestV1SmsSendUrlTokenPost(const QString &token, const QString &recipient_number, const QString &message, const ::OpenAPI::OptionalParam<QDateTime> &date_to_send = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &campaign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_field = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRestV1SmsSendBulkGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendBulkPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendUrlParametersGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendUrlParametersPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendUrlTokenGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1SmsSendUrlTokenPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRestV1SmsSendBulkGetSignal(OAIWebServiceSendSmsRequests summary);
    void apiRestV1SmsSendBulkPostSignal(OAIWebServiceSendSmsResponses summary);
    void apiRestV1SmsSendGetSignal(OAIWebServiceSendSmsRequest summary);
    void apiRestV1SmsSendPostSignal(OAIWebServiceSendSmsResponse summary);
    void apiRestV1SmsSendUrlParametersGetSignal(QString summary);
    void apiRestV1SmsSendUrlParametersPostSignal(QString summary);
    void apiRestV1SmsSendUrlTokenGetSignal(QString summary);
    void apiRestV1SmsSendUrlTokenPostSignal(QString summary);


    void apiRestV1SmsSendBulkGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceSendSmsRequests summary);
    void apiRestV1SmsSendBulkPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceSendSmsResponses summary);
    void apiRestV1SmsSendGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceSendSmsRequest summary);
    void apiRestV1SmsSendPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceSendSmsResponse summary);
    void apiRestV1SmsSendUrlParametersGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void apiRestV1SmsSendUrlParametersPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void apiRestV1SmsSendUrlTokenGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void apiRestV1SmsSendUrlTokenPostSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendBulkGetSignalError() instead")
    void apiRestV1SmsSendBulkGetSignalE(OAIWebServiceSendSmsRequests summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendBulkGetSignalError(OAIWebServiceSendSmsRequests summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendBulkPostSignalError() instead")
    void apiRestV1SmsSendBulkPostSignalE(OAIWebServiceSendSmsResponses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendBulkPostSignalError(OAIWebServiceSendSmsResponses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendGetSignalError() instead")
    void apiRestV1SmsSendGetSignalE(OAIWebServiceSendSmsRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendGetSignalError(OAIWebServiceSendSmsRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendPostSignalError() instead")
    void apiRestV1SmsSendPostSignalE(OAIWebServiceSendSmsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendPostSignalError(OAIWebServiceSendSmsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlParametersGetSignalError() instead")
    void apiRestV1SmsSendUrlParametersGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlParametersGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlParametersPostSignalError() instead")
    void apiRestV1SmsSendUrlParametersPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlParametersPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlTokenGetSignalError() instead")
    void apiRestV1SmsSendUrlTokenGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlTokenGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlTokenPostSignalError() instead")
    void apiRestV1SmsSendUrlTokenPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlTokenPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendBulkGetSignalErrorFull() instead")
    void apiRestV1SmsSendBulkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendBulkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendBulkPostSignalErrorFull() instead")
    void apiRestV1SmsSendBulkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendBulkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendGetSignalErrorFull() instead")
    void apiRestV1SmsSendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendPostSignalErrorFull() instead")
    void apiRestV1SmsSendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlParametersGetSignalErrorFull() instead")
    void apiRestV1SmsSendUrlParametersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlParametersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlParametersPostSignalErrorFull() instead")
    void apiRestV1SmsSendUrlParametersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlParametersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlTokenGetSignalErrorFull() instead")
    void apiRestV1SmsSendUrlTokenGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlTokenGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1SmsSendUrlTokenPostSignalErrorFull() instead")
    void apiRestV1SmsSendUrlTokenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1SmsSendUrlTokenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
