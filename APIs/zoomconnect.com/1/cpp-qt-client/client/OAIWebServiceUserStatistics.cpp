/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceUserStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceUserStatistics::OAIWebServiceUserStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceUserStatistics::OAIWebServiceUserStatistics() {
    this->initializeModel();
}

OAIWebServiceUserStatistics::~OAIWebServiceUserStatistics() {}

void OAIWebServiceUserStatistics::initializeModel() {

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIWebServiceUserStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceUserStatistics::fromJsonObject(QJsonObject json) {

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("campaigns")]);
    m_campaigns_isSet = !json[QString("campaigns")].isNull() && m_campaigns_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIWebServiceUserStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceUserStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_campaigns.size() > 0) {
        obj.insert(QString("campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIWebServiceCampaignStatistics> OAIWebServiceUserStatistics::getCampaigns() const {
    return m_campaigns;
}
void OAIWebServiceUserStatistics::setCampaigns(const QList<OAIWebServiceCampaignStatistics> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAIWebServiceUserStatistics::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAIWebServiceUserStatistics::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

OAIWebServiceStatistics OAIWebServiceUserStatistics::getTotal() const {
    return m_total;
}
void OAIWebServiceUserStatistics::setTotal(const OAIWebServiceStatistics &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIWebServiceUserStatistics::is_total_Set() const{
    return m_total_isSet;
}

bool OAIWebServiceUserStatistics::is_total_Valid() const{
    return m_total_isValid;
}

OAIWebServiceUser OAIWebServiceUserStatistics::getUser() const {
    return m_user;
}
void OAIWebServiceUserStatistics::setUser(const OAIWebServiceUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIWebServiceUserStatistics::is_user_Set() const{
    return m_user_isSet;
}

bool OAIWebServiceUserStatistics::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIWebServiceUserStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceUserStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
