/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApi_H
#define OAI_OAIMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber.h"
#include "OAIWebServiceAnalyseMessageRequestMessageOnly.h"
#include "OAIWebServiceAnalyseMessageResponse.h"
#include "OAIWebServiceMessage.h"
#include "OAIWebServiceMessages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesApi(const int timeOut = 0);
    ~OAIMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIWebServiceAnalyseMessageRequestMessageOnly [optional]
    */
    virtual void analyse(const ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly> &body = ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly>());

    /**
    * @param[in]  body OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber [optional]
    */
    virtual void analyseFull(const ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber> &body = ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber>());

    /**
    * @param[in]  body OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber [optional]
    */
    virtual void analyseMessageCreditCost(const ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber> &body = ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageAndRecipientNumber>());

    /**
    * @param[in]  body OAIWebServiceAnalyseMessageRequestMessageOnly [optional]
    */
    virtual void analyseMessageEncoding(const ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly> &body = ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly>());

    /**
    * @param[in]  body OAIWebServiceAnalyseMessageRequestMessageOnly [optional]
    */
    virtual void analyseMessageLength(const ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly> &body = ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly>());

    /**
    * @param[in]  body OAIWebServiceAnalyseMessageRequestMessageOnly [optional]
    */
    virtual void analyseNumberOfMessages(const ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly> &body = ::OpenAPI::OptionalParam<OAIWebServiceAnalyseMessageRequestMessageOnly>());

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  from_date_time_sent QDateTime [optional]
    * @param[in]  to_date_time_sent QDateTime [optional]
    * @param[in]  from_date_time_received QDateTime [optional]
    * @param[in]  to_date_time_received QDateTime [optional]
    * @param[in]  from_number QString [optional]
    * @param[in]  to_number QString [optional]
    * @param[in]  message QString [optional]
    * @param[in]  campaign QString [optional]
    * @param[in]  data_field QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  read bool [optional]
    * @param[in]  replies_to_message_id QString [optional]
    */
    virtual void apiRestV1MessagesAllGet(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date_time_sent = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date_time_sent = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date_time_received = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date_time_received = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &from_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &campaign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &read = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &replies_to_message_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  message_id QString [required]
    */
    virtual void apiRestV1MessagesMessageIdDelete(const QString &message_id);

    /**
    * @param[in]  message_id QString [required]
    */
    virtual void apiRestV1MessagesMessageIdGet(const QString &message_id);

    /**
    * @param[in]  message_id QString [required]
    */
    virtual void apiRestV1MessagesMessageIdMarkReadPost(const QString &message_id);

    /**
    * @param[in]  message_id QString [required]
    */
    virtual void apiRestV1MessagesMessageIdMarkReadPut(const QString &message_id);

    /**
    * @param[in]  message_id QString [required]
    */
    virtual void apiRestV1MessagesMessageIdMarkUnreadPost(const QString &message_id);

    /**
    * @param[in]  message_id QString [required]
    */
    virtual void apiRestV1MessagesMessageIdMarkUnreadPut(const QString &message_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyseCallback(OAIHttpRequestWorker *worker);
    void analyseFullCallback(OAIHttpRequestWorker *worker);
    void analyseMessageCreditCostCallback(OAIHttpRequestWorker *worker);
    void analyseMessageEncodingCallback(OAIHttpRequestWorker *worker);
    void analyseMessageLengthCallback(OAIHttpRequestWorker *worker);
    void analyseNumberOfMessagesCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesAllGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdMarkReadPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdMarkReadPutCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdMarkUnreadPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdMarkUnreadPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyseSignal(bool summary);
    void analyseFullSignal(OAIWebServiceAnalyseMessageResponse summary);
    void analyseMessageCreditCostSignal(double summary);
    void analyseMessageEncodingSignal(QString summary);
    void analyseMessageLengthSignal(qint32 summary);
    void analyseNumberOfMessagesSignal(qint32 summary);
    void apiRestV1MessagesAllGetSignal(OAIWebServiceMessages summary);
    void apiRestV1MessagesMessageIdDeleteSignal();
    void apiRestV1MessagesMessageIdGetSignal(OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkReadPostSignal(OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkReadPutSignal(OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkUnreadPostSignal(OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkUnreadPutSignal(OAIWebServiceMessage summary);


    void analyseSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void analyseFullSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceAnalyseMessageResponse summary);
    void analyseMessageCreditCostSignalFull(OAIHttpRequestWorker *worker, double summary);
    void analyseMessageEncodingSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void analyseMessageLengthSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void analyseNumberOfMessagesSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void apiRestV1MessagesAllGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceMessages summary);
    void apiRestV1MessagesMessageIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1MessagesMessageIdGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkReadPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkReadPutSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkUnreadPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceMessage summary);
    void apiRestV1MessagesMessageIdMarkUnreadPutSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceMessage summary);

    Q_DECL_DEPRECATED_X("Use analyseSignalError() instead")
    void analyseSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseFullSignalError() instead")
    void analyseFullSignalE(OAIWebServiceAnalyseMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseFullSignalError(OAIWebServiceAnalyseMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseMessageCreditCostSignalError() instead")
    void analyseMessageCreditCostSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseMessageCreditCostSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseMessageEncodingSignalError() instead")
    void analyseMessageEncodingSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseMessageEncodingSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseMessageLengthSignalError() instead")
    void analyseMessageLengthSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseMessageLengthSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseNumberOfMessagesSignalError() instead")
    void analyseNumberOfMessagesSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseNumberOfMessagesSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesAllGetSignalError() instead")
    void apiRestV1MessagesAllGetSignalE(OAIWebServiceMessages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesAllGetSignalError(OAIWebServiceMessages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdDeleteSignalError() instead")
    void apiRestV1MessagesMessageIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdGetSignalError() instead")
    void apiRestV1MessagesMessageIdGetSignalE(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdGetSignalError(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkReadPostSignalError() instead")
    void apiRestV1MessagesMessageIdMarkReadPostSignalE(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkReadPostSignalError(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkReadPutSignalError() instead")
    void apiRestV1MessagesMessageIdMarkReadPutSignalE(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkReadPutSignalError(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkUnreadPostSignalError() instead")
    void apiRestV1MessagesMessageIdMarkUnreadPostSignalE(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkUnreadPostSignalError(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkUnreadPutSignalError() instead")
    void apiRestV1MessagesMessageIdMarkUnreadPutSignalE(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkUnreadPutSignalError(OAIWebServiceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyseSignalErrorFull() instead")
    void analyseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseFullSignalErrorFull() instead")
    void analyseFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseMessageCreditCostSignalErrorFull() instead")
    void analyseMessageCreditCostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseMessageCreditCostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseMessageEncodingSignalErrorFull() instead")
    void analyseMessageEncodingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseMessageEncodingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseMessageLengthSignalErrorFull() instead")
    void analyseMessageLengthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseMessageLengthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyseNumberOfMessagesSignalErrorFull() instead")
    void analyseNumberOfMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyseNumberOfMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesAllGetSignalErrorFull() instead")
    void apiRestV1MessagesAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdDeleteSignalErrorFull() instead")
    void apiRestV1MessagesMessageIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdGetSignalErrorFull() instead")
    void apiRestV1MessagesMessageIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkReadPostSignalErrorFull() instead")
    void apiRestV1MessagesMessageIdMarkReadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkReadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkReadPutSignalErrorFull() instead")
    void apiRestV1MessagesMessageIdMarkReadPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkReadPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkUnreadPostSignalErrorFull() instead")
    void apiRestV1MessagesMessageIdMarkUnreadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkUnreadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1MessagesMessageIdMarkUnreadPutSignalErrorFull() instead")
    void apiRestV1MessagesMessageIdMarkUnreadPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1MessagesMessageIdMarkUnreadPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
