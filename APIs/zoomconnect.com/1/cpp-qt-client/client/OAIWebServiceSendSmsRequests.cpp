/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceSendSmsRequests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceSendSmsRequests::OAIWebServiceSendSmsRequests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceSendSmsRequests::OAIWebServiceSendSmsRequests() {
    this->initializeModel();
}

OAIWebServiceSendSmsRequests::~OAIWebServiceSendSmsRequests() {}

void OAIWebServiceSendSmsRequests::initializeModel() {

    m_default_date_to_send_isSet = false;
    m_default_date_to_send_isValid = false;

    m_messages_per_minute_isSet = false;
    m_messages_per_minute_isValid = false;

    m_send_sms_requests_isSet = false;
    m_send_sms_requests_isValid = false;
}

void OAIWebServiceSendSmsRequests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceSendSmsRequests::fromJsonObject(QJsonObject json) {

    m_default_date_to_send_isValid = ::OpenAPI::fromJsonValue(m_default_date_to_send, json[QString("defaultDateToSend")]);
    m_default_date_to_send_isSet = !json[QString("defaultDateToSend")].isNull() && m_default_date_to_send_isValid;

    m_messages_per_minute_isValid = ::OpenAPI::fromJsonValue(m_messages_per_minute, json[QString("messagesPerMinute")]);
    m_messages_per_minute_isSet = !json[QString("messagesPerMinute")].isNull() && m_messages_per_minute_isValid;

    m_send_sms_requests_isValid = ::OpenAPI::fromJsonValue(m_send_sms_requests, json[QString("sendSmsRequests")]);
    m_send_sms_requests_isSet = !json[QString("sendSmsRequests")].isNull() && m_send_sms_requests_isValid;
}

QString OAIWebServiceSendSmsRequests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceSendSmsRequests::asJsonObject() const {
    QJsonObject obj;
    if (m_default_date_to_send_isSet) {
        obj.insert(QString("defaultDateToSend"), ::OpenAPI::toJsonValue(m_default_date_to_send));
    }
    if (m_messages_per_minute_isSet) {
        obj.insert(QString("messagesPerMinute"), ::OpenAPI::toJsonValue(m_messages_per_minute));
    }
    if (m_send_sms_requests.size() > 0) {
        obj.insert(QString("sendSmsRequests"), ::OpenAPI::toJsonValue(m_send_sms_requests));
    }
    return obj;
}

QDateTime OAIWebServiceSendSmsRequests::getDefaultDateToSend() const {
    return m_default_date_to_send;
}
void OAIWebServiceSendSmsRequests::setDefaultDateToSend(const QDateTime &default_date_to_send) {
    m_default_date_to_send = default_date_to_send;
    m_default_date_to_send_isSet = true;
}

bool OAIWebServiceSendSmsRequests::is_default_date_to_send_Set() const{
    return m_default_date_to_send_isSet;
}

bool OAIWebServiceSendSmsRequests::is_default_date_to_send_Valid() const{
    return m_default_date_to_send_isValid;
}

qint32 OAIWebServiceSendSmsRequests::getMessagesPerMinute() const {
    return m_messages_per_minute;
}
void OAIWebServiceSendSmsRequests::setMessagesPerMinute(const qint32 &messages_per_minute) {
    m_messages_per_minute = messages_per_minute;
    m_messages_per_minute_isSet = true;
}

bool OAIWebServiceSendSmsRequests::is_messages_per_minute_Set() const{
    return m_messages_per_minute_isSet;
}

bool OAIWebServiceSendSmsRequests::is_messages_per_minute_Valid() const{
    return m_messages_per_minute_isValid;
}

QList<OAIWebServiceSendSmsRequest> OAIWebServiceSendSmsRequests::getSendSmsRequests() const {
    return m_send_sms_requests;
}
void OAIWebServiceSendSmsRequests::setSendSmsRequests(const QList<OAIWebServiceSendSmsRequest> &send_sms_requests) {
    m_send_sms_requests = send_sms_requests;
    m_send_sms_requests_isSet = true;
}

bool OAIWebServiceSendSmsRequests::is_send_sms_requests_Set() const{
    return m_send_sms_requests_isSet;
}

bool OAIWebServiceSendSmsRequests::is_send_sms_requests_Valid() const{
    return m_send_sms_requests_isValid;
}

bool OAIWebServiceSendSmsRequests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_date_to_send_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_sms_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceSendSmsRequests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
