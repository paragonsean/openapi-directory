/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContactsApi_H
#define OAI_OAIContactsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWebServiceContact.h"
#include "OAIWebServiceContacts.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContactsApi : public QObject {
    Q_OBJECT

public:
    OAIContactsApi(const int timeOut = 0);
    ~OAIContactsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void apiRestV1ContactsAllGet();

    /**
    * @param[in]  contact_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void apiRestV1ContactsContactIdAddFromGroupGroupIdGet(const QString &contact_id, const QString &group_id);

    /**
    * @param[in]  contact_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void apiRestV1ContactsContactIdAddFromGroupGroupIdPost(const QString &contact_id, const QString &group_id);

    /**
    * @param[in]  contact_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void apiRestV1ContactsContactIdAddToGroupGroupIdGet(const QString &contact_id, const QString &group_id);

    /**
    * @param[in]  contact_id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void apiRestV1ContactsContactIdAddToGroupGroupIdPost(const QString &contact_id, const QString &group_id);

    /**
    * @param[in]  contact_id QString [required]
    */
    virtual void apiRestV1ContactsContactIdDelete(const QString &contact_id);

    /**
    * @param[in]  contact_id QString [required]
    */
    virtual void apiRestV1ContactsContactIdGet(const QString &contact_id);

    /**
    * @param[in]  contact_id QString [required]
    * @param[in]  body OAIWebServiceContact [optional]
    */
    virtual void apiRestV1ContactsContactIdPost(const QString &contact_id, const ::OpenAPI::OptionalParam<OAIWebServiceContact> &body = ::OpenAPI::OptionalParam<OAIWebServiceContact>());

    /**
    * @param[in]  body OAIWebServiceContact [optional]
    */
    virtual void apiRestV1ContactsCreatePost(const ::OpenAPI::OptionalParam<OAIWebServiceContact> &body = ::OpenAPI::OptionalParam<OAIWebServiceContact>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRestV1ContactsAllGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdPostCallback(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsCreatePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRestV1ContactsAllGetSignal(OAIWebServiceContacts summary);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignal();
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignal();
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetSignal();
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostSignal();
    void apiRestV1ContactsContactIdDeleteSignal();
    void apiRestV1ContactsContactIdGetSignal(OAIWebServiceContact summary);
    void apiRestV1ContactsContactIdPostSignal(OAIWebServiceContact summary);
    void apiRestV1ContactsCreatePostSignal(OAIWebServiceContact summary);


    void apiRestV1ContactsAllGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceContacts summary);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiRestV1ContactsContactIdGetSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceContact summary);
    void apiRestV1ContactsContactIdPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceContact summary);
    void apiRestV1ContactsCreatePostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceContact summary);

    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsAllGetSignalError() instead")
    void apiRestV1ContactsAllGetSignalE(OAIWebServiceContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsAllGetSignalError(OAIWebServiceContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalError() instead")
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalError() instead")
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalError() instead")
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalError() instead")
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdDeleteSignalError() instead")
    void apiRestV1ContactsContactIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdGetSignalError() instead")
    void apiRestV1ContactsContactIdGetSignalE(OAIWebServiceContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdGetSignalError(OAIWebServiceContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdPostSignalError() instead")
    void apiRestV1ContactsContactIdPostSignalE(OAIWebServiceContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdPostSignalError(OAIWebServiceContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsCreatePostSignalError() instead")
    void apiRestV1ContactsCreatePostSignalE(OAIWebServiceContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsCreatePostSignalError(OAIWebServiceContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsAllGetSignalErrorFull() instead")
    void apiRestV1ContactsAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalErrorFull() instead")
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalErrorFull() instead")
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddFromGroupGroupIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalErrorFull() instead")
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddToGroupGroupIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalErrorFull() instead")
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdAddToGroupGroupIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdDeleteSignalErrorFull() instead")
    void apiRestV1ContactsContactIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdGetSignalErrorFull() instead")
    void apiRestV1ContactsContactIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsContactIdPostSignalErrorFull() instead")
    void apiRestV1ContactsContactIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsContactIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1ContactsCreatePostSignalErrorFull() instead")
    void apiRestV1ContactsCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1ContactsCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
