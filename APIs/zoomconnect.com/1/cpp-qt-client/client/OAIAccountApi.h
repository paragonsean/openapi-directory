/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWebServiceAccount.h"
#include "OAIWebServiceAccountStatistics.h"
#include "OAIWebServiceTransferCreditsRequest.h"
#include "OAIWebServiceUser.h"
#include "OAIWebServiceUsers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIWebServiceUser [optional]
    */
    virtual void apiRestV1AccountUserPut(const ::OpenAPI::OptionalParam<OAIWebServiceUser> &body = ::OpenAPI::OptionalParam<OAIWebServiceUser>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  body OAIWebServiceUser [optional]
    */
    virtual void apiRestV1AccountUserUserIdPost(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAIWebServiceUser> &body = ::OpenAPI::OptionalParam<OAIWebServiceUser>());


    virtual void getBalance();

    /**
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  user_email_address QString [optional]
    * @param[in]  campaign QString [optional]
    * @param[in]  include_refunded_and_optout bool [optional]
    * @param[in]  calculate_credit_value bool [optional]
    */
    virtual void getStatistics(const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &user_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &campaign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_refunded_and_optout = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &calculate_credit_value = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUser(const qint64 &user_id);

    /**
    * @param[in]  search_email QString [required]
    */
    virtual void search(const QString &search_email);

    /**
    * @param[in]  body OAIWebServiceTransferCreditsRequest [optional]
    */
    virtual void transfer(const ::OpenAPI::OptionalParam<OAIWebServiceTransferCreditsRequest> &body = ::OpenAPI::OptionalParam<OAIWebServiceTransferCreditsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRestV1AccountUserPutCallback(OAIHttpRequestWorker *worker);
    void apiRestV1AccountUserUserIdPostCallback(OAIHttpRequestWorker *worker);
    void getBalanceCallback(OAIHttpRequestWorker *worker);
    void getStatisticsCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void transferCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRestV1AccountUserPutSignal(OAIWebServiceUser summary);
    void apiRestV1AccountUserUserIdPostSignal(OAIWebServiceUser summary);
    void getBalanceSignal(OAIWebServiceAccount summary);
    void getStatisticsSignal(OAIWebServiceAccountStatistics summary);
    void getUserSignal(OAIWebServiceUser summary);
    void searchSignal(OAIWebServiceUsers summary);
    void transferSignal(OAIWebServiceUser summary);


    void apiRestV1AccountUserPutSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceUser summary);
    void apiRestV1AccountUserUserIdPostSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceUser summary);
    void getBalanceSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceAccount summary);
    void getStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceAccountStatistics summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceUser summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceUsers summary);
    void transferSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceUser summary);

    Q_DECL_DEPRECATED_X("Use apiRestV1AccountUserPutSignalError() instead")
    void apiRestV1AccountUserPutSignalE(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1AccountUserPutSignalError(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1AccountUserUserIdPostSignalError() instead")
    void apiRestV1AccountUserUserIdPostSignalE(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1AccountUserUserIdPostSignalError(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBalanceSignalError() instead")
    void getBalanceSignalE(OAIWebServiceAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBalanceSignalError(OAIWebServiceAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsSignalError() instead")
    void getStatisticsSignalE(OAIWebServiceAccountStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsSignalError(OAIWebServiceAccountStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(OAIWebServiceUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(OAIWebServiceUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSignalError() instead")
    void transferSignalE(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSignalError(OAIWebServiceUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRestV1AccountUserPutSignalErrorFull() instead")
    void apiRestV1AccountUserPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1AccountUserPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRestV1AccountUserUserIdPostSignalErrorFull() instead")
    void apiRestV1AccountUserUserIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRestV1AccountUserUserIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBalanceSignalErrorFull() instead")
    void getBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatisticsSignalErrorFull() instead")
    void getStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSignalErrorFull() instead")
    void transferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
