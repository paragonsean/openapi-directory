/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceVoiceMessages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceVoiceMessages::OAIWebServiceVoiceMessages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceVoiceMessages::OAIWebServiceVoiceMessages() {
    this->initializeModel();
}

OAIWebServiceVoiceMessages::~OAIWebServiceVoiceMessages() {}

void OAIWebServiceVoiceMessages::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_total_elements_isSet = false;
    m_total_elements_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIWebServiceVoiceMessages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceVoiceMessages::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_total_elements_isValid = ::OpenAPI::fromJsonValue(m_total_elements, json[QString("totalElements")]);
    m_total_elements_isSet = !json[QString("totalElements")].isNull() && m_total_elements_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;
}

QString OAIWebServiceVoiceMessages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceVoiceMessages::asJsonObject() const {
    QJsonObject obj;
    if (m_elements_isSet) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_total_elements_isSet) {
        obj.insert(QString("totalElements"), ::OpenAPI::toJsonValue(m_total_elements));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

qint32 OAIWebServiceVoiceMessages::getElements() const {
    return m_elements;
}
void OAIWebServiceVoiceMessages::setElements(const qint32 &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIWebServiceVoiceMessages::is_elements_Valid() const{
    return m_elements_isValid;
}

QList<OAILink> OAIWebServiceVoiceMessages::getLinks() const {
    return m_links;
}
void OAIWebServiceVoiceMessages::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_links_Set() const{
    return m_links_isSet;
}

bool OAIWebServiceVoiceMessages::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAIWebServiceVoiceMessage> OAIWebServiceVoiceMessages::getMessages() const {
    return m_messages;
}
void OAIWebServiceVoiceMessages::setMessages(const QList<OAIWebServiceVoiceMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIWebServiceVoiceMessages::is_messages_Valid() const{
    return m_messages_isValid;
}

qint32 OAIWebServiceVoiceMessages::getPage() const {
    return m_page;
}
void OAIWebServiceVoiceMessages::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_page_Set() const{
    return m_page_isSet;
}

bool OAIWebServiceVoiceMessages::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIWebServiceVoiceMessages::getPageSize() const {
    return m_page_size;
}
void OAIWebServiceVoiceMessages::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIWebServiceVoiceMessages::is_page_size_Valid() const{
    return m_page_size_isValid;
}

qint64 OAIWebServiceVoiceMessages::getTotalElements() const {
    return m_total_elements;
}
void OAIWebServiceVoiceMessages::setTotalElements(const qint64 &total_elements) {
    m_total_elements = total_elements;
    m_total_elements_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_total_elements_Set() const{
    return m_total_elements_isSet;
}

bool OAIWebServiceVoiceMessages::is_total_elements_Valid() const{
    return m_total_elements_isValid;
}

qint32 OAIWebServiceVoiceMessages::getTotalPages() const {
    return m_total_pages;
}
void OAIWebServiceVoiceMessages::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIWebServiceVoiceMessages::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIWebServiceVoiceMessages::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIWebServiceVoiceMessages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceVoiceMessages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
