/*
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RestErrorDTO;
import org.openapitools.client.model.WebServiceSendSmsRequest;
import org.openapitools.client.model.WebServiceSendSmsRequests;
import org.openapitools.client.model.WebServiceSendSmsResponse;
import org.openapitools.client.model.WebServiceSendSmsResponses;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmsApi
 */
@Disabled
public class SmsApiTest {

    private final SmsApi api = new SmsApi();

    /**
     * send-bulk
     *
     * Returns an example of the data to POST to send multiple messages in one transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendBulkGetTest() throws ApiException {
        WebServiceSendSmsRequests response = api.apiRestV1SmsSendBulkGet();
        // TODO: test validations
    }

    /**
     * send-bulk
     *
     * Send multiple messages in one transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendBulkPostTest() throws ApiException {
        WebServiceSendSmsRequests body = null;
        WebServiceSendSmsResponses response = api.apiRestV1SmsSendBulkPost(body);
        // TODO: test validations
    }

    /**
     * send
     *
     * Returns an example of the data to POST to send a single message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendGetTest() throws ApiException {
        WebServiceSendSmsRequest response = api.apiRestV1SmsSendGet();
        // TODO: test validations
    }

    /**
     * send
     *
     * Sends a single message. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; fields are required. All other fields are optional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendPostTest() throws ApiException {
        WebServiceSendSmsRequest body = null;
        WebServiceSendSmsResponse response = api.apiRestV1SmsSendPost(body);
        // TODO: test validations
    }

    /**
     * send-url-parameters
     *
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendUrlParametersGetTest() throws ApiException {
        String recipientNumber = null;
        String message = null;
        OffsetDateTime dateToSend = null;
        String campaign = null;
        String dataField = null;
        String response = api.apiRestV1SmsSendUrlParametersGet(recipientNumber, message, dateToSend, campaign, dataField);
        // TODO: test validations
    }

    /**
     * send-url-parameters
     *
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendUrlParametersPostTest() throws ApiException {
        String recipientNumber = null;
        String message = null;
        OffsetDateTime dateToSend = null;
        String campaign = null;
        String dataField = null;
        String response = api.apiRestV1SmsSendUrlParametersPost(recipientNumber, message, dateToSend, campaign, dataField);
        // TODO: test validations
    }

    /**
     * send-url
     *
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendUrlTokenGetTest() throws ApiException {
        String token = null;
        String recipientNumber = null;
        String message = null;
        OffsetDateTime dateToSend = null;
        String campaign = null;
        String dataField = null;
        String response = api.apiRestV1SmsSendUrlTokenGet(token, recipientNumber, message, dateToSend, campaign, dataField);
        // TODO: test validations
    }

    /**
     * send-url
     *
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1SmsSendUrlTokenPostTest() throws ApiException {
        String token = null;
        String recipientNumber = null;
        String message = null;
        OffsetDateTime dateToSend = null;
        String campaign = null;
        String dataField = null;
        String response = api.apiRestV1SmsSendUrlTokenPost(token, recipientNumber, message, dateToSend, campaign, dataField);
        // TODO: test validations
    }

}
