/*
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.WebServiceAnalyseMessageRequestMessageAndRecipientNumber;
import org.openapitools.client.model.WebServiceAnalyseMessageRequestMessageOnly;
import org.openapitools.client.model.WebServiceAnalyseMessageResponse;
import org.openapitools.client.model.WebServiceMessage;
import org.openapitools.client.model.WebServiceMessages;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Disabled
public class MessagesApiTest {

    private final MessagesApi api = new MessagesApi();

    /**
     * analyse-
     *
     * Returns details for a single message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyseTest() throws ApiException {
        WebServiceAnalyseMessageRequestMessageOnly body = null;
        Boolean response = api.analyse(body);
        // TODO: test validations
    }

    /**
     * analyse-full
     *
     * Returns full analysis of message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyseFullTest() throws ApiException {
        WebServiceAnalyseMessageRequestMessageAndRecipientNumber body = null;
        WebServiceAnalyseMessageResponse response = api.analyseFull(body);
        // TODO: test validations
    }

    /**
     * analyse-message-credit-cost
     *
     * Returns the number of credit which would be required to send the request message to the requested recipient number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyseMessageCreditCostTest() throws ApiException {
        WebServiceAnalyseMessageRequestMessageAndRecipientNumber body = null;
        Double response = api.analyseMessageCreditCost(body);
        // TODO: test validations
    }

    /**
     * analyse-message-encoding
     *
     * Returns the message encoding that would be required to send the requested message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyseMessageEncodingTest() throws ApiException {
        WebServiceAnalyseMessageRequestMessageOnly body = null;
        String response = api.analyseMessageEncoding(body);
        // TODO: test validations
    }

    /**
     * analyse-message-length
     *
     * Returns the number of characters the requested message consists of
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyseMessageLengthTest() throws ApiException {
        WebServiceAnalyseMessageRequestMessageOnly body = null;
        Integer response = api.analyseMessageLength(body);
        // TODO: test validations
    }

    /**
     * analyse-number-of-messages
     *
     * Returns the number of SMS parts which would be sent when sending the requested message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyseNumberOfMessagesTest() throws ApiException {
        WebServiceAnalyseMessageRequestMessageOnly body = null;
        Integer response = api.analyseNumberOfMessages(body);
        // TODO: test validations
    }

    /**
     * all
     *
     * Returns all messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesAllGetTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String type = null;
        String status = null;
        OffsetDateTime fromDateTimeSent = null;
        OffsetDateTime toDateTimeSent = null;
        OffsetDateTime fromDateTimeReceived = null;
        OffsetDateTime toDateTimeReceived = null;
        String fromNumber = null;
        String toNumber = null;
        String message = null;
        String campaign = null;
        String dataField = null;
        Boolean deleted = null;
        Boolean read = null;
        String repliesToMessageId = null;
        WebServiceMessages response = api.apiRestV1MessagesAllGet(pageSize, page, type, status, fromDateTimeSent, toDateTimeSent, fromDateTimeReceived, toDateTimeReceived, fromNumber, toNumber, message, campaign, dataField, deleted, read, repliesToMessageId);
        // TODO: test validations
    }

    /**
     * delete
     *
     * Deletes a  message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesMessageIdDeleteTest() throws ApiException {
        String messageId = null;
        api.apiRestV1MessagesMessageIdDelete(messageId);
        // TODO: test validations
    }

    /**
     * get
     *
     * Returns details for a single message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesMessageIdGetTest() throws ApiException {
        String messageId = null;
        WebServiceMessage response = api.apiRestV1MessagesMessageIdGet(messageId);
        // TODO: test validations
    }

    /**
     * markRead
     *
     * Marks a  message as read
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesMessageIdMarkReadPostTest() throws ApiException {
        String messageId = null;
        WebServiceMessage response = api.apiRestV1MessagesMessageIdMarkReadPost(messageId);
        // TODO: test validations
    }

    /**
     * markRead
     *
     * Marks a  message as read
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesMessageIdMarkReadPutTest() throws ApiException {
        String messageId = null;
        WebServiceMessage response = api.apiRestV1MessagesMessageIdMarkReadPut(messageId);
        // TODO: test validations
    }

    /**
     * markUnread
     *
     * Marks a  message as unread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesMessageIdMarkUnreadPostTest() throws ApiException {
        String messageId = null;
        WebServiceMessage response = api.apiRestV1MessagesMessageIdMarkUnreadPost(messageId);
        // TODO: test validations
    }

    /**
     * markUnread
     *
     * Marks a  message as unread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestV1MessagesMessageIdMarkUnreadPutTest() throws ApiException {
        String messageId = null;
        WebServiceMessage response = api.apiRestV1MessagesMessageIdMarkUnreadPut(messageId);
        // TODO: test validations
    }

}
