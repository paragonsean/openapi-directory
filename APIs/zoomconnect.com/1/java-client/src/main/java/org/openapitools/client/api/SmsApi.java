/*
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RestErrorDTO;
import org.openapitools.client.model.WebServiceSendSmsRequest;
import org.openapitools.client.model.WebServiceSendSmsRequests;
import org.openapitools.client.model.WebServiceSendSmsResponse;
import org.openapitools.client.model.WebServiceSendSmsResponses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiRestV1SmsSendBulkGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendBulkGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send-bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendBulkGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiRestV1SmsSendBulkGetCall(_callback);

    }

    /**
     * send-bulk
     * Returns an example of the data to POST to send multiple messages in one transaction.
     * @return WebServiceSendSmsRequests
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceSendSmsRequests apiRestV1SmsSendBulkGet() throws ApiException {
        ApiResponse<WebServiceSendSmsRequests> localVarResp = apiRestV1SmsSendBulkGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * send-bulk
     * Returns an example of the data to POST to send multiple messages in one transaction.
     * @return ApiResponse&lt;WebServiceSendSmsRequests&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceSendSmsRequests> apiRestV1SmsSendBulkGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendBulkGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsRequests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send-bulk (asynchronously)
     * Returns an example of the data to POST to send multiple messages in one transaction.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendBulkGetAsync(final ApiCallback<WebServiceSendSmsRequests> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendBulkGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsRequests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendBulkPost
     * @param body requests (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendBulkPostCall(WebServiceSendSmsRequests body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send-bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendBulkPostValidateBeforeCall(WebServiceSendSmsRequests body, final ApiCallback _callback) throws ApiException {
        return apiRestV1SmsSendBulkPostCall(body, _callback);

    }

    /**
     * send-bulk
     * Send multiple messages in one transaction.
     * @param body requests (optional)
     * @return WebServiceSendSmsResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceSendSmsResponses apiRestV1SmsSendBulkPost(WebServiceSendSmsRequests body) throws ApiException {
        ApiResponse<WebServiceSendSmsResponses> localVarResp = apiRestV1SmsSendBulkPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * send-bulk
     * Send multiple messages in one transaction.
     * @param body requests (optional)
     * @return ApiResponse&lt;WebServiceSendSmsResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceSendSmsResponses> apiRestV1SmsSendBulkPostWithHttpInfo(WebServiceSendSmsRequests body) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendBulkPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send-bulk (asynchronously)
     * Send multiple messages in one transaction.
     * @param body requests (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendBulkPostAsync(WebServiceSendSmsRequests body, final ApiCallback<WebServiceSendSmsResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendBulkPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiRestV1SmsSendGetCall(_callback);

    }

    /**
     * send
     * Returns an example of the data to POST to send a single message.
     * @return WebServiceSendSmsRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceSendSmsRequest apiRestV1SmsSendGet() throws ApiException {
        ApiResponse<WebServiceSendSmsRequest> localVarResp = apiRestV1SmsSendGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * send
     * Returns an example of the data to POST to send a single message.
     * @return ApiResponse&lt;WebServiceSendSmsRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceSendSmsRequest> apiRestV1SmsSendGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send (asynchronously)
     * Returns an example of the data to POST to send a single message.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendGetAsync(final ApiCallback<WebServiceSendSmsRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendPost
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error&lt;/br&gt;&lt;/br&gt;Code and message:&lt;ul&gt;&lt;li&gt;2 - Invalid mobile number&lt;/li&gt;&lt;li&gt;3 - Message cannot be empty&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendPostCall(WebServiceSendSmsRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendPostValidateBeforeCall(WebServiceSendSmsRequest body, final ApiCallback _callback) throws ApiException {
        return apiRestV1SmsSendPostCall(body, _callback);

    }

    /**
     * send
     * Sends a single message. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; fields are required. All other fields are optional.
     * @param body request (optional)
     * @return WebServiceSendSmsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error&lt;/br&gt;&lt;/br&gt;Code and message:&lt;ul&gt;&lt;li&gt;2 - Invalid mobile number&lt;/li&gt;&lt;li&gt;3 - Message cannot be empty&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceSendSmsResponse apiRestV1SmsSendPost(WebServiceSendSmsRequest body) throws ApiException {
        ApiResponse<WebServiceSendSmsResponse> localVarResp = apiRestV1SmsSendPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * send
     * Sends a single message. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; fields are required. All other fields are optional.
     * @param body request (optional)
     * @return ApiResponse&lt;WebServiceSendSmsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error&lt;/br&gt;&lt;/br&gt;Code and message:&lt;ul&gt;&lt;li&gt;2 - Invalid mobile number&lt;/li&gt;&lt;li&gt;3 - Message cannot be empty&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceSendSmsResponse> apiRestV1SmsSendPostWithHttpInfo(WebServiceSendSmsRequest body) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send (asynchronously)
     * Sends a single message. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; fields are required. All other fields are optional.
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error&lt;/br&gt;&lt;/br&gt;Code and message:&lt;ul&gt;&lt;li&gt;2 - Invalid mobile number&lt;/li&gt;&lt;li&gt;3 - Message cannot be empty&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendPostAsync(WebServiceSendSmsRequest body, final ApiCallback<WebServiceSendSmsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<WebServiceSendSmsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendUrlParametersGet
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlParametersGetCall(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send-url-parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recipientNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipientNumber", recipientNumber));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (dateToSend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateToSend", dateToSend));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (dataField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataField", dataField));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendUrlParametersGetValidateBeforeCall(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientNumber' is set
        if (recipientNumber == null) {
            throw new ApiException("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlParametersGet(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlParametersGet(Async)");
        }

        return apiRestV1SmsSendUrlParametersGetCall(recipientNumber, message, dateToSend, campaign, dataField, _callback);

    }

    /**
     * send-url-parameters
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String apiRestV1SmsSendUrlParametersGet(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        ApiResponse<String> localVarResp = apiRestV1SmsSendUrlParametersGetWithHttpInfo(recipientNumber, message, dateToSend, campaign, dataField);
        return localVarResp.getData();
    }

    /**
     * send-url-parameters
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> apiRestV1SmsSendUrlParametersGetWithHttpInfo(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendUrlParametersGetValidateBeforeCall(recipientNumber, message, dateToSend, campaign, dataField, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send-url-parameters (asynchronously)
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlParametersGetAsync(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendUrlParametersGetValidateBeforeCall(recipientNumber, message, dateToSend, campaign, dataField, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendUrlParametersPost
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlParametersPostCall(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send-url-parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recipientNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipientNumber", recipientNumber));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (dateToSend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateToSend", dateToSend));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (dataField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataField", dataField));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendUrlParametersPostValidateBeforeCall(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientNumber' is set
        if (recipientNumber == null) {
            throw new ApiException("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlParametersPost(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlParametersPost(Async)");
        }

        return apiRestV1SmsSendUrlParametersPostCall(recipientNumber, message, dateToSend, campaign, dataField, _callback);

    }

    /**
     * send-url-parameters
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String apiRestV1SmsSendUrlParametersPost(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        ApiResponse<String> localVarResp = apiRestV1SmsSendUrlParametersPostWithHttpInfo(recipientNumber, message, dateToSend, campaign, dataField);
        return localVarResp.getData();
    }

    /**
     * send-url-parameters
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> apiRestV1SmsSendUrlParametersPostWithHttpInfo(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendUrlParametersPostValidateBeforeCall(recipientNumber, message, dateToSend, campaign, dataField, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send-url-parameters (asynchronously)
     * Send a single message using URL parameters.The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlParametersPostAsync(String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendUrlParametersPostValidateBeforeCall(recipientNumber, message, dateToSend, campaign, dataField, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendUrlTokenGet
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlTokenGetCall(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send-url/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recipientNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipientNumber", recipientNumber));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (dateToSend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateToSend", dateToSend));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (dataField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataField", dataField));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendUrlTokenGetValidateBeforeCall(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling apiRestV1SmsSendUrlTokenGet(Async)");
        }

        // verify the required parameter 'recipientNumber' is set
        if (recipientNumber == null) {
            throw new ApiException("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlTokenGet(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlTokenGet(Async)");
        }

        return apiRestV1SmsSendUrlTokenGetCall(token, recipientNumber, message, dateToSend, campaign, dataField, _callback);

    }

    /**
     * send-url
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String apiRestV1SmsSendUrlTokenGet(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        ApiResponse<String> localVarResp = apiRestV1SmsSendUrlTokenGetWithHttpInfo(token, recipientNumber, message, dateToSend, campaign, dataField);
        return localVarResp.getData();
    }

    /**
     * send-url
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> apiRestV1SmsSendUrlTokenGetWithHttpInfo(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendUrlTokenGetValidateBeforeCall(token, recipientNumber, message, dateToSend, campaign, dataField, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send-url (asynchronously)
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlTokenGetAsync(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendUrlTokenGetValidateBeforeCall(token, recipientNumber, message, dateToSend, campaign, dataField, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1SmsSendUrlTokenPost
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlTokenPostCall(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/sms/send-url/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recipientNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipientNumber", recipientNumber));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (dateToSend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateToSend", dateToSend));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (dataField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataField", dataField));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1SmsSendUrlTokenPostValidateBeforeCall(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling apiRestV1SmsSendUrlTokenPost(Async)");
        }

        // verify the required parameter 'recipientNumber' is set
        if (recipientNumber == null) {
            throw new ApiException("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlTokenPost(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlTokenPost(Async)");
        }

        return apiRestV1SmsSendUrlTokenPostCall(token, recipientNumber, message, dateToSend, campaign, dataField, _callback);

    }

    /**
     * send-url
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String apiRestV1SmsSendUrlTokenPost(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        ApiResponse<String> localVarResp = apiRestV1SmsSendUrlTokenPostWithHttpInfo(token, recipientNumber, message, dateToSend, campaign, dataField);
        return localVarResp.getData();
    }

    /**
     * send-url
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> apiRestV1SmsSendUrlTokenPostWithHttpInfo(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1SmsSendUrlTokenPostValidateBeforeCall(token, recipientNumber, message, dateToSend, campaign, dataField, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send-url (asynchronously)
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The &lt;i&gt;recipientNumber&lt;/i&gt; and &lt;i&gt;message&lt;/i&gt; parameters are required. All other parameters are optional. Not that the token required here is 
     * @param token token (required)
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param message the message to send (required)
     * @param dateToSend date format: yyyyMMddHHmm (optional)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1SmsSendUrlTokenPostAsync(String token, String recipientNumber, String message, OffsetDateTime dateToSend, String campaign, String dataField, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1SmsSendUrlTokenPostValidateBeforeCall(token, recipientNumber, message, dateToSend, campaign, dataField, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
