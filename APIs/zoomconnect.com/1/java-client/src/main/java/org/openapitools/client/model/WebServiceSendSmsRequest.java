/*
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebServiceSendSmsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:22.444535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebServiceSendSmsRequest {
  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private String campaign;

  public static final String SERIALIZED_NAME_DATA_FIELD = "dataField";
  @SerializedName(SERIALIZED_NAME_DATA_FIELD)
  private String dataField;

  public static final String SERIALIZED_NAME_DATE_TO_SEND = "dateToSend";
  @SerializedName(SERIALIZED_NAME_DATE_TO_SEND)
  private OffsetDateTime dateToSend;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RECIPIENT_NUMBER = "recipientNumber";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NUMBER)
  private String recipientNumber;

  public WebServiceSendSmsRequest() {
  }

  public WebServiceSendSmsRequest campaign(String campaign) {
    this.campaign = campaign;
    return this;
  }

  /**
   * Get campaign
   * @return campaign
   */
  @javax.annotation.Nullable
  public String getCampaign() {
    return campaign;
  }

  public void setCampaign(String campaign) {
    this.campaign = campaign;
  }


  public WebServiceSendSmsRequest dataField(String dataField) {
    this.dataField = dataField;
    return this;
  }

  /**
   * Get dataField
   * @return dataField
   */
  @javax.annotation.Nullable
  public String getDataField() {
    return dataField;
  }

  public void setDataField(String dataField) {
    this.dataField = dataField;
  }


  public WebServiceSendSmsRequest dateToSend(OffsetDateTime dateToSend) {
    this.dateToSend = dateToSend;
    return this;
  }

  /**
   * Get dateToSend
   * @return dateToSend
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateToSend() {
    return dateToSend;
  }

  public void setDateToSend(OffsetDateTime dateToSend) {
    this.dateToSend = dateToSend;
  }


  public WebServiceSendSmsRequest message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public WebServiceSendSmsRequest recipientNumber(String recipientNumber) {
    this.recipientNumber = recipientNumber;
    return this;
  }

  /**
   * Get recipientNumber
   * @return recipientNumber
   */
  @javax.annotation.Nullable
  public String getRecipientNumber() {
    return recipientNumber;
  }

  public void setRecipientNumber(String recipientNumber) {
    this.recipientNumber = recipientNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebServiceSendSmsRequest webServiceSendSmsRequest = (WebServiceSendSmsRequest) o;
    return Objects.equals(this.campaign, webServiceSendSmsRequest.campaign) &&
        Objects.equals(this.dataField, webServiceSendSmsRequest.dataField) &&
        Objects.equals(this.dateToSend, webServiceSendSmsRequest.dateToSend) &&
        Objects.equals(this.message, webServiceSendSmsRequest.message) &&
        Objects.equals(this.recipientNumber, webServiceSendSmsRequest.recipientNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaign, dataField, dateToSend, message, recipientNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebServiceSendSmsRequest {\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    dataField: ").append(toIndentedString(dataField)).append("\n");
    sb.append("    dateToSend: ").append(toIndentedString(dateToSend)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    recipientNumber: ").append(toIndentedString(recipientNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaign");
    openapiFields.add("dataField");
    openapiFields.add("dateToSend");
    openapiFields.add("message");
    openapiFields.add("recipientNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebServiceSendSmsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebServiceSendSmsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebServiceSendSmsRequest is not found in the empty JSON string", WebServiceSendSmsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebServiceSendSmsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebServiceSendSmsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("campaign") != null && !jsonObj.get("campaign").isJsonNull()) && !jsonObj.get("campaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign").toString()));
      }
      if ((jsonObj.get("dataField") != null && !jsonObj.get("dataField").isJsonNull()) && !jsonObj.get("dataField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataField").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("recipientNumber") != null && !jsonObj.get("recipientNumber").isJsonNull()) && !jsonObj.get("recipientNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebServiceSendSmsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebServiceSendSmsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebServiceSendSmsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebServiceSendSmsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WebServiceSendSmsRequest>() {
           @Override
           public void write(JsonWriter out, WebServiceSendSmsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebServiceSendSmsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebServiceSendSmsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebServiceSendSmsRequest
   * @throws IOException if the JSON string is invalid with respect to WebServiceSendSmsRequest
   */
  public static WebServiceSendSmsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebServiceSendSmsRequest.class);
  }

  /**
   * Convert an instance of WebServiceSendSmsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

