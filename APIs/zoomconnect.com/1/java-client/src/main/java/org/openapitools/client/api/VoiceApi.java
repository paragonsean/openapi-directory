/*
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import java.time.OffsetDateTime;
import org.openapitools.client.model.WebServiceSendVoiceMessageResponse;
import org.openapitools.client.model.WebServiceVoiceMessage;
import org.openapitools.client.model.WebServiceVoiceMessageSendSingleTextRequest;
import org.openapitools.client.model.WebServiceVoiceMessages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiRestV1VoiceAllGet
     * @param pageSize number of elements to return at a time (optional, default to 100)
     * @param page page number (optional, default to 1)
     * @param status filter by message status (optional)
     * @param fromDateTimeSent date format: yyyyMMdd (optional)
     * @param toDateTimeSent date format: yyyyMMdd (optional)
     * @param toNumber phone number the message was sent to (optional)
     * @param message search matching message text (optional)
     * @param campaign search by campaign (optional)
     * @param dataField search by data field (optional)
     * @param deleted return only deleted / not deleted messages (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1VoiceAllGetCall(Integer pageSize, Integer page, String status, OffsetDateTime fromDateTimeSent, OffsetDateTime toDateTimeSent, String toNumber, String message, String campaign, String dataField, Boolean deleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/voice/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (fromDateTimeSent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTimeSent", fromDateTimeSent));
        }

        if (toDateTimeSent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTimeSent", toDateTimeSent));
        }

        if (toNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toNumber", toNumber));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (dataField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataField", dataField));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1VoiceAllGetValidateBeforeCall(Integer pageSize, Integer page, String status, OffsetDateTime fromDateTimeSent, OffsetDateTime toDateTimeSent, String toNumber, String message, String campaign, String dataField, Boolean deleted, final ApiCallback _callback) throws ApiException {
        return apiRestV1VoiceAllGetCall(pageSize, page, status, fromDateTimeSent, toDateTimeSent, toNumber, message, campaign, dataField, deleted, _callback);

    }

    /**
     * all
     * Returns all voice messages
     * @param pageSize number of elements to return at a time (optional, default to 100)
     * @param page page number (optional, default to 1)
     * @param status filter by message status (optional)
     * @param fromDateTimeSent date format: yyyyMMdd (optional)
     * @param toDateTimeSent date format: yyyyMMdd (optional)
     * @param toNumber phone number the message was sent to (optional)
     * @param message search matching message text (optional)
     * @param campaign search by campaign (optional)
     * @param dataField search by data field (optional)
     * @param deleted return only deleted / not deleted messages (optional)
     * @return WebServiceVoiceMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceVoiceMessages apiRestV1VoiceAllGet(Integer pageSize, Integer page, String status, OffsetDateTime fromDateTimeSent, OffsetDateTime toDateTimeSent, String toNumber, String message, String campaign, String dataField, Boolean deleted) throws ApiException {
        ApiResponse<WebServiceVoiceMessages> localVarResp = apiRestV1VoiceAllGetWithHttpInfo(pageSize, page, status, fromDateTimeSent, toDateTimeSent, toNumber, message, campaign, dataField, deleted);
        return localVarResp.getData();
    }

    /**
     * all
     * Returns all voice messages
     * @param pageSize number of elements to return at a time (optional, default to 100)
     * @param page page number (optional, default to 1)
     * @param status filter by message status (optional)
     * @param fromDateTimeSent date format: yyyyMMdd (optional)
     * @param toDateTimeSent date format: yyyyMMdd (optional)
     * @param toNumber phone number the message was sent to (optional)
     * @param message search matching message text (optional)
     * @param campaign search by campaign (optional)
     * @param dataField search by data field (optional)
     * @param deleted return only deleted / not deleted messages (optional)
     * @return ApiResponse&lt;WebServiceVoiceMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceVoiceMessages> apiRestV1VoiceAllGetWithHttpInfo(Integer pageSize, Integer page, String status, OffsetDateTime fromDateTimeSent, OffsetDateTime toDateTimeSent, String toNumber, String message, String campaign, String dataField, Boolean deleted) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1VoiceAllGetValidateBeforeCall(pageSize, page, status, fromDateTimeSent, toDateTimeSent, toNumber, message, campaign, dataField, deleted, null);
        Type localVarReturnType = new TypeToken<WebServiceVoiceMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * all (asynchronously)
     * Returns all voice messages
     * @param pageSize number of elements to return at a time (optional, default to 100)
     * @param page page number (optional, default to 1)
     * @param status filter by message status (optional)
     * @param fromDateTimeSent date format: yyyyMMdd (optional)
     * @param toDateTimeSent date format: yyyyMMdd (optional)
     * @param toNumber phone number the message was sent to (optional)
     * @param message search matching message text (optional)
     * @param campaign search by campaign (optional)
     * @param dataField search by data field (optional)
     * @param deleted return only deleted / not deleted messages (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1VoiceAllGetAsync(Integer pageSize, Integer page, String status, OffsetDateTime fromDateTimeSent, OffsetDateTime toDateTimeSent, String toNumber, String message, String campaign, String dataField, Boolean deleted, final ApiCallback<WebServiceVoiceMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1VoiceAllGetValidateBeforeCall(pageSize, page, status, fromDateTimeSent, toDateTimeSent, toNumber, message, campaign, dataField, deleted, _callback);
        Type localVarReturnType = new TypeToken<WebServiceVoiceMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1VoiceMessageIdDelete
     * @param messageId messageId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1VoiceMessageIdDeleteCall(String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/voice/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1VoiceMessageIdDeleteValidateBeforeCall(String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling apiRestV1VoiceMessageIdDelete(Async)");
        }

        return apiRestV1VoiceMessageIdDeleteCall(messageId, _callback);

    }

    /**
     * delete
     * Deletes a  message
     * @param messageId messageId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void apiRestV1VoiceMessageIdDelete(String messageId) throws ApiException {
        apiRestV1VoiceMessageIdDeleteWithHttpInfo(messageId);
    }

    /**
     * delete
     * Deletes a  message
     * @param messageId messageId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiRestV1VoiceMessageIdDeleteWithHttpInfo(String messageId) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1VoiceMessageIdDeleteValidateBeforeCall(messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete (asynchronously)
     * Deletes a  message
     * @param messageId messageId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1VoiceMessageIdDeleteAsync(String messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1VoiceMessageIdDeleteValidateBeforeCall(messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestV1VoiceMessageIdGet
     * @param messageId messageId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1VoiceMessageIdGetCall(String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/voice/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestV1VoiceMessageIdGetValidateBeforeCall(String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling apiRestV1VoiceMessageIdGet(Async)");
        }

        return apiRestV1VoiceMessageIdGetCall(messageId, _callback);

    }

    /**
     * get
     * Returns details for a single message
     * @param messageId messageId (required)
     * @return WebServiceVoiceMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceVoiceMessage apiRestV1VoiceMessageIdGet(String messageId) throws ApiException {
        ApiResponse<WebServiceVoiceMessage> localVarResp = apiRestV1VoiceMessageIdGetWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * get
     * Returns details for a single message
     * @param messageId messageId (required)
     * @return ApiResponse&lt;WebServiceVoiceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceVoiceMessage> apiRestV1VoiceMessageIdGetWithHttpInfo(String messageId) throws ApiException {
        okhttp3.Call localVarCall = apiRestV1VoiceMessageIdGetValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<WebServiceVoiceMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get (asynchronously)
     * Returns details for a single message
     * @param messageId messageId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestV1VoiceMessageIdGetAsync(String messageId, final ApiCallback<WebServiceVoiceMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestV1VoiceMessageIdGetValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<WebServiceVoiceMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for singleAudio
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param _file audio file to play, supports MP3 or WAV format (required)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param retryCount optional number of times to retry unanswered call (optional)
     * @param retryMinimumInterval optional minimum interval in minutes between retry attempts (optional)
     * @param retryMaximumInterval optional maximum interval in minutes between retry attempts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call singleAudioCall(String recipientNumber, File _file, String campaign, String dataField, Integer retryCount, Integer retryMinimumInterval, Integer retryMaximumInterval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/voice/single-audio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (recipientNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipientNumber", recipientNumber));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (dataField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataField", dataField));
        }

        if (retryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retryCount", retryCount));
        }

        if (retryMinimumInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retryMinimumInterval", retryMinimumInterval));
        }

        if (retryMaximumInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retryMaximumInterval", retryMaximumInterval));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call singleAudioValidateBeforeCall(String recipientNumber, File _file, String campaign, String dataField, Integer retryCount, Integer retryMinimumInterval, Integer retryMaximumInterval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientNumber' is set
        if (recipientNumber == null) {
            throw new ApiException("Missing the required parameter 'recipientNumber' when calling singleAudio(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling singleAudio(Async)");
        }

        return singleAudioCall(recipientNumber, _file, campaign, dataField, retryCount, retryMinimumInterval, retryMaximumInterval, _callback);

    }

    /**
     * single-audio
     * Send a single audio voice message to one recipient. Note, Content-Type header must be set to multipart/form-data for this request.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param _file audio file to play, supports MP3 or WAV format (required)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param retryCount optional number of times to retry unanswered call (optional)
     * @param retryMinimumInterval optional minimum interval in minutes between retry attempts (optional)
     * @param retryMaximumInterval optional maximum interval in minutes between retry attempts (optional)
     * @return WebServiceSendVoiceMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceSendVoiceMessageResponse singleAudio(String recipientNumber, File _file, String campaign, String dataField, Integer retryCount, Integer retryMinimumInterval, Integer retryMaximumInterval) throws ApiException {
        ApiResponse<WebServiceSendVoiceMessageResponse> localVarResp = singleAudioWithHttpInfo(recipientNumber, _file, campaign, dataField, retryCount, retryMinimumInterval, retryMaximumInterval);
        return localVarResp.getData();
    }

    /**
     * single-audio
     * Send a single audio voice message to one recipient. Note, Content-Type header must be set to multipart/form-data for this request.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param _file audio file to play, supports MP3 or WAV format (required)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param retryCount optional number of times to retry unanswered call (optional)
     * @param retryMinimumInterval optional minimum interval in minutes between retry attempts (optional)
     * @param retryMaximumInterval optional maximum interval in minutes between retry attempts (optional)
     * @return ApiResponse&lt;WebServiceSendVoiceMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceSendVoiceMessageResponse> singleAudioWithHttpInfo(String recipientNumber, File _file, String campaign, String dataField, Integer retryCount, Integer retryMinimumInterval, Integer retryMaximumInterval) throws ApiException {
        okhttp3.Call localVarCall = singleAudioValidateBeforeCall(recipientNumber, _file, campaign, dataField, retryCount, retryMinimumInterval, retryMaximumInterval, null);
        Type localVarReturnType = new TypeToken<WebServiceSendVoiceMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * single-audio (asynchronously)
     * Send a single audio voice message to one recipient. Note, Content-Type header must be set to multipart/form-data for this request.
     * @param recipientNumber the phone number of the recipient to send to (required)
     * @param _file audio file to play, supports MP3 or WAV format (required)
     * @param campaign optional campaign name (optional)
     * @param dataField optional extra data (optional)
     * @param retryCount optional number of times to retry unanswered call (optional)
     * @param retryMinimumInterval optional minimum interval in minutes between retry attempts (optional)
     * @param retryMaximumInterval optional maximum interval in minutes between retry attempts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call singleAudioAsync(String recipientNumber, File _file, String campaign, String dataField, Integer retryCount, Integer retryMinimumInterval, Integer retryMaximumInterval, final ApiCallback<WebServiceSendVoiceMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = singleAudioValidateBeforeCall(recipientNumber, _file, campaign, dataField, retryCount, retryMinimumInterval, retryMaximumInterval, _callback);
        Type localVarReturnType = new TypeToken<WebServiceSendVoiceMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for singleText
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call singleTextCall(WebServiceVoiceMessageSendSingleTextRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/voice/single-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call singleTextValidateBeforeCall(WebServiceVoiceMessageSendSingleTextRequest body, final ApiCallback _callback) throws ApiException {
        return singleTextCall(body, _callback);

    }

    /**
     * single-text
     * Send a single text voice message to one recipient
     * @param body request (optional)
     * @return WebServiceSendVoiceMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public WebServiceSendVoiceMessageResponse singleText(WebServiceVoiceMessageSendSingleTextRequest body) throws ApiException {
        ApiResponse<WebServiceSendVoiceMessageResponse> localVarResp = singleTextWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * single-text
     * Send a single text voice message to one recipient
     * @param body request (optional)
     * @return ApiResponse&lt;WebServiceSendVoiceMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebServiceSendVoiceMessageResponse> singleTextWithHttpInfo(WebServiceVoiceMessageSendSingleTextRequest body) throws ApiException {
        okhttp3.Call localVarCall = singleTextValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<WebServiceSendVoiceMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * single-text (asynchronously)
     * Send a single text voice message to one recipient
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call singleTextAsync(WebServiceVoiceMessageSendSingleTextRequest body, final ApiCallback<WebServiceSendVoiceMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = singleTextValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<WebServiceSendVoiceMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
