/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebServiceAccount from '../model/WebServiceAccount';
import WebServiceAccountStatistics from '../model/WebServiceAccountStatistics';
import WebServiceTransferCreditsRequest from '../model/WebServiceTransferCreditsRequest';
import WebServiceUser from '../model/WebServiceUser';
import WebServiceUsers from '../model/WebServiceUsers';

/**
* Account service.
* @module api/AccountApi
* @version 1
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRestV1AccountUserPut operation.
     * @callback module:api/AccountApi~apiRestV1AccountUserPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * Creates a new sub-account in your team. The following fields are required <i>firstname, lastname, email address, contact number</i> and <i>password.</i>
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceUser} [body] request
     * @param {module:api/AccountApi~apiRestV1AccountUserPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceUser}
     */
    apiRestV1AccountUserPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceUser;
      return this.apiClient.callApi(
        '/api/rest/v1/account/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1AccountUserUserIdPost operation.
     * @callback module:api/AccountApi~apiRestV1AccountUserUserIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * Updates a sub-account in your team. The following fields can be updated <i>firstname, lastname, contact number</i> and <i>password.</i>
     * @param {Number} userId userId
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceUser} [body] request
     * @param {module:api/AccountApi~apiRestV1AccountUserUserIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceUser}
     */
    apiRestV1AccountUserUserIdPost(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiRestV1AccountUserUserIdPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceUser;
      return this.apiClient.callApi(
        '/api/rest/v1/account/user/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalance operation.
     * @callback module:api/AccountApi~getBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * balance
     * Returns your account's credit balance
     * @param {module:api/AccountApi~getBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceAccount}
     */
    getBalance(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceAccount;
      return this.apiClient.callApi(
        '/api/rest/v1/account/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatistics operation.
     * @callback module:api/AccountApi~getStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceAccountStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * statistics
     * Returns data from the statistics report. Note that by default the statistics shown are based on the number of messages, use the calculateCreditValue should you wish to calculate the statistics based on credit value.
     * @param {Object} opts Optional parameters
     * @param {Date} [from] date format: dd-MM-yyyy
     * @param {Date} [to] date format: dd-MM-yyyy
     * @param {String} [userEmailAddress] optional email address of user to return statistics for a single user, default is to return statistics for all users if administrator, or statistics for your own account if not an administrator
     * @param {String} [campaign] optional campaign name
     * @param {Boolean} [includeRefundedAndOptout] optionally include refunded and optout counts, default is false
     * @param {Boolean} [calculateCreditValue] optionally calculate using credit value rather than message count, default is false
     * @param {module:api/AccountApi~getStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceAccountStatistics}
     */
    getStatistics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'userEmailAddress': opts['userEmailAddress'],
        'campaign': opts['campaign'],
        'includeRefundedAndOptout': opts['includeRefundedAndOptout'],
        'calculateCreditValue': opts['calculateCreditValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceAccountStatistics;
      return this.apiClient.callApi(
        '/api/rest/v1/account/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/AccountApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUser
     * Gets a user from a given user id
     * @param {Number} userId userId
     * @param {module:api/AccountApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceUser}
     */
    getUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceUser;
      return this.apiClient.callApi(
        '/api/rest/v1/account/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/AccountApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search
     * Find a user for a particular email address
     * @param {String} searchEmail search by email address
     * @param {module:api/AccountApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceUsers}
     */
    search(searchEmail, callback) {
      let postBody = null;
      // verify the required parameter 'searchEmail' is set
      if (searchEmail === undefined || searchEmail === null) {
        throw new Error("Missing the required parameter 'searchEmail' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchEmail': searchEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceUsers;
      return this.apiClient.callApi(
        '/api/rest/v1/account/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transfer operation.
     * @callback module:api/AccountApi~transferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transfer
     * Transfers credits between two users in the same team. The <i>account email address</i> fields as well as the <i>number of credits to transfer</i> are required. 
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceTransferCreditsRequest} [body] request
     * @param {module:api/AccountApi~transferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceUser}
     */
    transfer(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceUser;
      return this.apiClient.callApi(
        '/api/rest/v1/account/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
