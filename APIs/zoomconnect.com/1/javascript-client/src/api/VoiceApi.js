/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebServiceSendVoiceMessageResponse from '../model/WebServiceSendVoiceMessageResponse';
import WebServiceVoiceMessage from '../model/WebServiceVoiceMessage';
import WebServiceVoiceMessageSendSingleTextRequest from '../model/WebServiceVoiceMessageSendSingleTextRequest';
import WebServiceVoiceMessages from '../model/WebServiceVoiceMessages';

/**
* Voice service.
* @module api/VoiceApi
* @version 1
*/
export default class VoiceApi {

    /**
    * Constructs a new VoiceApi. 
    * @alias module:api/VoiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRestV1VoiceAllGet operation.
     * @callback module:api/VoiceApi~apiRestV1VoiceAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceVoiceMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * all
     * Returns all voice messages
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 100)] number of elements to return at a time
     * @param {Number} [page = 1)] page number
     * @param {module:model/String} [status] filter by message status
     * @param {Date} [fromDateTimeSent] date format: yyyyMMdd
     * @param {Date} [toDateTimeSent] date format: yyyyMMdd
     * @param {String} [toNumber] phone number the message was sent to
     * @param {String} [message] search matching message text
     * @param {String} [campaign] search by campaign
     * @param {String} [dataField] search by data field
     * @param {Boolean} [deleted] return only deleted / not deleted messages
     * @param {module:api/VoiceApi~apiRestV1VoiceAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceVoiceMessages}
     */
    apiRestV1VoiceAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'page': opts['page'],
        'status': opts['status'],
        'fromDateTimeSent': opts['fromDateTimeSent'],
        'toDateTimeSent': opts['toDateTimeSent'],
        'toNumber': opts['toNumber'],
        'message': opts['message'],
        'campaign': opts['campaign'],
        'dataField': opts['dataField'],
        'deleted': opts['deleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceVoiceMessages;
      return this.apiClient.callApi(
        '/api/rest/v1/voice/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1VoiceMessageIdDelete operation.
     * @callback module:api/VoiceApi~apiRestV1VoiceMessageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * Deletes a  message
     * @param {String} messageId messageId
     * @param {module:api/VoiceApi~apiRestV1VoiceMessageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1VoiceMessageIdDelete(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1VoiceMessageIdDelete");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/voice/{messageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1VoiceMessageIdGet operation.
     * @callback module:api/VoiceApi~apiRestV1VoiceMessageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceVoiceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get
     * Returns details for a single message
     * @param {String} messageId messageId
     * @param {module:api/VoiceApi~apiRestV1VoiceMessageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceVoiceMessage}
     */
    apiRestV1VoiceMessageIdGet(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1VoiceMessageIdGet");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceVoiceMessage;
      return this.apiClient.callApi(
        '/api/rest/v1/voice/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the singleAudio operation.
     * @callback module:api/VoiceApi~singleAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceSendVoiceMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * single-audio
     * Send a single audio voice message to one recipient. Note, Content-Type header must be set to multipart/form-data for this request.
     * @param {String} recipientNumber the phone number of the recipient to send to
     * @param {File} file audio file to play, supports MP3 or WAV format
     * @param {Object} opts Optional parameters
     * @param {String} [campaign] optional campaign name
     * @param {String} [dataField] optional extra data
     * @param {Number} [retryCount] optional number of times to retry unanswered call
     * @param {Number} [retryMinimumInterval] optional minimum interval in minutes between retry attempts
     * @param {Number} [retryMaximumInterval] optional maximum interval in minutes between retry attempts
     * @param {module:api/VoiceApi~singleAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceSendVoiceMessageResponse}
     */
    singleAudio(recipientNumber, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recipientNumber' is set
      if (recipientNumber === undefined || recipientNumber === null) {
        throw new Error("Missing the required parameter 'recipientNumber' when calling singleAudio");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling singleAudio");
      }

      let pathParams = {
      };
      let queryParams = {
        'recipientNumber': recipientNumber,
        'campaign': opts['campaign'],
        'dataField': opts['dataField'],
        'retryCount': opts['retryCount'],
        'retryMinimumInterval': opts['retryMinimumInterval'],
        'retryMaximumInterval': opts['retryMaximumInterval']
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceSendVoiceMessageResponse;
      return this.apiClient.callApi(
        '/api/rest/v1/voice/single-audio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the singleText operation.
     * @callback module:api/VoiceApi~singleTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceSendVoiceMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * single-text
     * Send a single text voice message to one recipient
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceVoiceMessageSendSingleTextRequest} [body] request
     * @param {module:api/VoiceApi~singleTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceSendVoiceMessageResponse}
     */
    singleText(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceSendVoiceMessageResponse;
      return this.apiClient.callApi(
        '/api/rest/v1/voice/single-text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
