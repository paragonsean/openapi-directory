/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebServiceAnalyseMessageRequestMessageAndRecipientNumber from '../model/WebServiceAnalyseMessageRequestMessageAndRecipientNumber';
import WebServiceAnalyseMessageRequestMessageOnly from '../model/WebServiceAnalyseMessageRequestMessageOnly';
import WebServiceAnalyseMessageResponse from '../model/WebServiceAnalyseMessageResponse';
import WebServiceMessage from '../model/WebServiceMessage';
import WebServiceMessages from '../model/WebServiceMessages';

/**
* Messages service.
* @module api/MessagesApi
* @version 1
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyse operation.
     * @callback module:api/MessagesApi~analyseCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * analyse-
     * Returns details for a single message
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceAnalyseMessageRequestMessageOnly} [body] request
     * @param {module:api/MessagesApi~analyseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    analyse(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/rest/v1/messages/analyse/message-length-within-max-allowed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyseFull operation.
     * @callback module:api/MessagesApi~analyseFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceAnalyseMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * analyse-full
     * Returns full analysis of message
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceAnalyseMessageRequestMessageAndRecipientNumber} [body] request
     * @param {module:api/MessagesApi~analyseFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceAnalyseMessageResponse}
     */
    analyseFull(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceAnalyseMessageResponse;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/analyse/full', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyseMessageCreditCost operation.
     * @callback module:api/MessagesApi~analyseMessageCreditCostCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * analyse-message-credit-cost
     * Returns the number of credit which would be required to send the request message to the requested recipient number
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceAnalyseMessageRequestMessageAndRecipientNumber} [body] request
     * @param {module:api/MessagesApi~analyseMessageCreditCostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    analyseMessageCreditCost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/rest/v1/messages/analyse/message-credit-cost', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyseMessageEncoding operation.
     * @callback module:api/MessagesApi~analyseMessageEncodingCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * analyse-message-encoding
     * Returns the message encoding that would be required to send the requested message
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceAnalyseMessageRequestMessageOnly} [body] request
     * @param {module:api/MessagesApi~analyseMessageEncodingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    analyseMessageEncoding(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rest/v1/messages/analyse/message-encoding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyseMessageLength operation.
     * @callback module:api/MessagesApi~analyseMessageLengthCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * analyse-message-length
     * Returns the number of characters the requested message consists of
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceAnalyseMessageRequestMessageOnly} [body] request
     * @param {module:api/MessagesApi~analyseMessageLengthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    analyseMessageLength(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/rest/v1/messages/analyse/message-length', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyseNumberOfMessages operation.
     * @callback module:api/MessagesApi~analyseNumberOfMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * analyse-number-of-messages
     * Returns the number of SMS parts which would be sent when sending the requested message
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceAnalyseMessageRequestMessageOnly} [body] request
     * @param {module:api/MessagesApi~analyseNumberOfMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    analyseNumberOfMessages(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/rest/v1/messages/analyse/number-of-messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesAllGet operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * all
     * Returns all messages
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 100)] number of elements to return at a time
     * @param {Number} [page = 1)] page number
     * @param {module:model/String} [type] filter by message type
     * @param {module:model/String} [status] filter by message status
     * @param {Date} [fromDateTimeSent] date format: yyyyMMdd
     * @param {Date} [toDateTimeSent] date format: yyyyMMdd
     * @param {Date} [fromDateTimeReceived] date format: yyyyMMdd
     * @param {Date} [toDateTimeReceived] date format: yyyyMMdd
     * @param {String} [fromNumber] phone number the message was sent from
     * @param {String} [toNumber] phone number the message was sent to
     * @param {String} [message] search matching message text
     * @param {String} [campaign] search by campaign
     * @param {String} [dataField] search by data field
     * @param {Boolean} [deleted] return only deleted / not deleted messages
     * @param {Boolean} [read] return only read / unread messages (inbox messages only)
     * @param {String} [repliesToMessageId] return only inbox messages which are a reply to the message with the given message id
     * @param {module:api/MessagesApi~apiRestV1MessagesAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceMessages}
     */
    apiRestV1MessagesAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'page': opts['page'],
        'type': opts['type'],
        'status': opts['status'],
        'fromDateTimeSent': opts['fromDateTimeSent'],
        'toDateTimeSent': opts['toDateTimeSent'],
        'fromDateTimeReceived': opts['fromDateTimeReceived'],
        'toDateTimeReceived': opts['toDateTimeReceived'],
        'fromNumber': opts['fromNumber'],
        'toNumber': opts['toNumber'],
        'message': opts['message'],
        'campaign': opts['campaign'],
        'dataField': opts['dataField'],
        'deleted': opts['deleted'],
        'read': opts['read'],
        'repliesToMessageId': opts['repliesToMessageId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceMessages;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesMessageIdDelete operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesMessageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * Deletes a  message
     * @param {String} messageId messageId
     * @param {module:api/MessagesApi~apiRestV1MessagesMessageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1MessagesMessageIdDelete(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1MessagesMessageIdDelete");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/{messageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesMessageIdGet operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesMessageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get
     * Returns details for a single message
     * @param {String} messageId messageId
     * @param {module:api/MessagesApi~apiRestV1MessagesMessageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceMessage}
     */
    apiRestV1MessagesMessageIdGet(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1MessagesMessageIdGet");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceMessage;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesMessageIdMarkReadPost operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesMessageIdMarkReadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * markRead
     * Marks a  message as read
     * @param {String} messageId messageId
     * @param {module:api/MessagesApi~apiRestV1MessagesMessageIdMarkReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceMessage}
     */
    apiRestV1MessagesMessageIdMarkReadPost(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1MessagesMessageIdMarkReadPost");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceMessage;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/{messageId}/markRead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesMessageIdMarkReadPut operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesMessageIdMarkReadPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * markRead
     * Marks a  message as read
     * @param {String} messageId messageId
     * @param {module:api/MessagesApi~apiRestV1MessagesMessageIdMarkReadPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceMessage}
     */
    apiRestV1MessagesMessageIdMarkReadPut(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1MessagesMessageIdMarkReadPut");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceMessage;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/{messageId}/markRead', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesMessageIdMarkUnreadPost operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesMessageIdMarkUnreadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * markUnread
     * Marks a  message as unread
     * @param {String} messageId messageId
     * @param {module:api/MessagesApi~apiRestV1MessagesMessageIdMarkUnreadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceMessage}
     */
    apiRestV1MessagesMessageIdMarkUnreadPost(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1MessagesMessageIdMarkUnreadPost");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceMessage;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/{messageId}/markUnread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1MessagesMessageIdMarkUnreadPut operation.
     * @callback module:api/MessagesApi~apiRestV1MessagesMessageIdMarkUnreadPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * markUnread
     * Marks a  message as unread
     * @param {String} messageId messageId
     * @param {module:api/MessagesApi~apiRestV1MessagesMessageIdMarkUnreadPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceMessage}
     */
    apiRestV1MessagesMessageIdMarkUnreadPut(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiRestV1MessagesMessageIdMarkUnreadPut");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceMessage;
      return this.apiClient.callApi(
        '/api/rest/v1/messages/{messageId}/markUnread', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
