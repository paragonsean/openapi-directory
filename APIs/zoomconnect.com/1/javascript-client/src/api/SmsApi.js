/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestErrorDTO from '../model/RestErrorDTO';
import WebServiceSendSmsRequest from '../model/WebServiceSendSmsRequest';
import WebServiceSendSmsRequests from '../model/WebServiceSendSmsRequests';
import WebServiceSendSmsResponse from '../model/WebServiceSendSmsResponse';
import WebServiceSendSmsResponses from '../model/WebServiceSendSmsResponses';

/**
* Sms service.
* @module api/SmsApi
* @version 1
*/
export default class SmsApi {

    /**
    * Constructs a new SmsApi. 
    * @alias module:api/SmsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRestV1SmsSendBulkGet operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendBulkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceSendSmsRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send-bulk
     * Returns an example of the data to POST to send multiple messages in one transaction.
     * @param {module:api/SmsApi~apiRestV1SmsSendBulkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceSendSmsRequests}
     */
    apiRestV1SmsSendBulkGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceSendSmsRequests;
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send-bulk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendBulkPost operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendBulkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceSendSmsResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send-bulk
     * Send multiple messages in one transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceSendSmsRequests} [body] requests
     * @param {module:api/SmsApi~apiRestV1SmsSendBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceSendSmsResponses}
     */
    apiRestV1SmsSendBulkPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceSendSmsResponses;
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send-bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendGet operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceSendSmsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send
     * Returns an example of the data to POST to send a single message.
     * @param {module:api/SmsApi~apiRestV1SmsSendGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceSendSmsRequest}
     */
    apiRestV1SmsSendGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceSendSmsRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendPost operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceSendSmsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send
     * Sends a single message. The <i>recipientNumber</i> and <i>message</i> fields are required. All other fields are optional.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceSendSmsRequest} [body] request
     * @param {module:api/SmsApi~apiRestV1SmsSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceSendSmsResponse}
     */
    apiRestV1SmsSendPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceSendSmsResponse;
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendUrlParametersGet operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendUrlParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send-url-parameters
     * Send a single message using URL parameters.The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional.
     * @param {String} recipientNumber the phone number of the recipient to send to
     * @param {String} message the message to send
     * @param {Object} opts Optional parameters
     * @param {Date} [dateToSend] date format: yyyyMMddHHmm
     * @param {String} [campaign] optional campaign name
     * @param {String} [dataField] optional extra data
     * @param {module:api/SmsApi~apiRestV1SmsSendUrlParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiRestV1SmsSendUrlParametersGet(recipientNumber, message, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recipientNumber' is set
      if (recipientNumber === undefined || recipientNumber === null) {
        throw new Error("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlParametersGet");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlParametersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'recipientNumber': recipientNumber,
        'message': message,
        'dateToSend': opts['dateToSend'],
        'campaign': opts['campaign'],
        'dataField': opts['dataField']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send-url-parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendUrlParametersPost operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendUrlParametersPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send-url-parameters
     * Send a single message using URL parameters.The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional.
     * @param {String} recipientNumber the phone number of the recipient to send to
     * @param {String} message the message to send
     * @param {Object} opts Optional parameters
     * @param {Date} [dateToSend] date format: yyyyMMddHHmm
     * @param {String} [campaign] optional campaign name
     * @param {String} [dataField] optional extra data
     * @param {module:api/SmsApi~apiRestV1SmsSendUrlParametersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiRestV1SmsSendUrlParametersPost(recipientNumber, message, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recipientNumber' is set
      if (recipientNumber === undefined || recipientNumber === null) {
        throw new Error("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlParametersPost");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlParametersPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'recipientNumber': recipientNumber,
        'message': message,
        'dateToSend': opts['dateToSend'],
        'campaign': opts['campaign'],
        'dataField': opts['dataField']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send-url-parameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendUrlTokenGet operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendUrlTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send-url
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional. Not that the token required here is 
     * @param {String} token token
     * @param {String} recipientNumber the phone number of the recipient to send to
     * @param {String} message the message to send
     * @param {Object} opts Optional parameters
     * @param {Date} [dateToSend] date format: yyyyMMddHHmm
     * @param {String} [campaign] optional campaign name
     * @param {String} [dataField] optional extra data
     * @param {module:api/SmsApi~apiRestV1SmsSendUrlTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiRestV1SmsSendUrlTokenGet(token, recipientNumber, message, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiRestV1SmsSendUrlTokenGet");
      }
      // verify the required parameter 'recipientNumber' is set
      if (recipientNumber === undefined || recipientNumber === null) {
        throw new Error("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlTokenGet");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlTokenGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'recipientNumber': recipientNumber,
        'message': message,
        'dateToSend': opts['dateToSend'],
        'campaign': opts['campaign'],
        'dataField': opts['dataField']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send-url/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1SmsSendUrlTokenPost operation.
     * @callback module:api/SmsApi~apiRestV1SmsSendUrlTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * send-url
     * Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional. Not that the token required here is 
     * @param {String} token token
     * @param {String} recipientNumber the phone number of the recipient to send to
     * @param {String} message the message to send
     * @param {Object} opts Optional parameters
     * @param {Date} [dateToSend] date format: yyyyMMddHHmm
     * @param {String} [campaign] optional campaign name
     * @param {String} [dataField] optional extra data
     * @param {module:api/SmsApi~apiRestV1SmsSendUrlTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiRestV1SmsSendUrlTokenPost(token, recipientNumber, message, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiRestV1SmsSendUrlTokenPost");
      }
      // verify the required parameter 'recipientNumber' is set
      if (recipientNumber === undefined || recipientNumber === null) {
        throw new Error("Missing the required parameter 'recipientNumber' when calling apiRestV1SmsSendUrlTokenPost");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling apiRestV1SmsSendUrlTokenPost");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'recipientNumber': recipientNumber,
        'message': message,
        'dateToSend': opts['dateToSend'],
        'campaign': opts['campaign'],
        'dataField': opts['dataField']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rest/v1/sms/send-url/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
