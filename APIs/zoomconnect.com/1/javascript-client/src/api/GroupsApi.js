/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebServiceGroup from '../model/WebServiceGroup';
import WebServiceGroups from '../model/WebServiceGroups';

/**
* Groups service.
* @module api/GroupsApi
* @version 1
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRestV1GroupsAllGet operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * all
     * Returns all groups
     * @param {module:api/GroupsApi~apiRestV1GroupsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceGroups}
     */
    apiRestV1GroupsAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceGroups;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsCreatePost operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * Create a  group
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceGroup} [body] webServiceGroup
     * @param {module:api/GroupsApi~apiRestV1GroupsCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceGroup}
     */
    apiRestV1GroupsCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceGroup;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdAddContactContactIdGet operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdAddContactContactIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addContact
     * Add a contact to a group
     * @param {String} groupId groupId
     * @param {String} contactId contactId
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdAddContactContactIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1GroupsGroupIdAddContactContactIdGet(groupId, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdAddContactContactIdGet");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1GroupsGroupIdAddContactContactIdGet");
      }

      let pathParams = {
        'groupId': groupId,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}/addContact/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdAddContactContactIdPost operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdAddContactContactIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addContact
     * Add a contact to a group
     * @param {String} groupId groupId
     * @param {String} contactId contactId
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdAddContactContactIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1GroupsGroupIdAddContactContactIdPost(groupId, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdAddContactContactIdPost");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1GroupsGroupIdAddContactContactIdPost");
      }

      let pathParams = {
        'groupId': groupId,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}/addContact/{contactId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdDelete operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * Deletes a  group
     * @param {String} groupId groupId
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1GroupsGroupIdDelete(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdDelete");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdGet operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get
     * Returns details for a single group
     * @param {String} groupId groupId
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceGroup}
     */
    apiRestV1GroupsGroupIdGet(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdGet");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceGroup;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdPost operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * Update a  group
     * @param {String} groupId groupId
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceGroup} [body] webServiceGroup
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceGroup}
     */
    apiRestV1GroupsGroupIdPost(groupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdPost");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceGroup;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdRemoveContactContactIdGet operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdRemoveContactContactIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeContact
     * Remove a contact from a group
     * @param {String} groupId groupId
     * @param {String} contactId contactId
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdRemoveContactContactIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1GroupsGroupIdRemoveContactContactIdGet(groupId, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdRemoveContactContactIdGet");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1GroupsGroupIdRemoveContactContactIdGet");
      }

      let pathParams = {
        'groupId': groupId,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}/removeContact/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1GroupsGroupIdRemoveContactContactIdPost operation.
     * @callback module:api/GroupsApi~apiRestV1GroupsGroupIdRemoveContactContactIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeContact
     * Remove a contact from a group
     * @param {String} groupId groupId
     * @param {String} contactId contactId
     * @param {module:api/GroupsApi~apiRestV1GroupsGroupIdRemoveContactContactIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1GroupsGroupIdRemoveContactContactIdPost(groupId, contactId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1GroupsGroupIdRemoveContactContactIdPost");
      }
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1GroupsGroupIdRemoveContactContactIdPost");
      }

      let pathParams = {
        'groupId': groupId,
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/groups/{groupId}/removeContact/{contactId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
