/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebServiceTemplate from '../model/WebServiceTemplate';
import WebServiceTemplates from '../model/WebServiceTemplates';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRestV1TemplatesAllGet operation.
     * @callback module:api/TemplatesApi~apiRestV1TemplatesAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceTemplates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * all
     * Returns all templates
     * @param {module:api/TemplatesApi~apiRestV1TemplatesAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceTemplates}
     */
    apiRestV1TemplatesAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceTemplates;
      return this.apiClient.callApi(
        '/api/rest/v1/templates/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1TemplatesTemplateIdDelete operation.
     * @callback module:api/TemplatesApi~apiRestV1TemplatesTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * Deletes a  template
     * @param {Number} templateId templateId
     * @param {module:api/TemplatesApi~apiRestV1TemplatesTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1TemplatesTemplateIdDelete(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling apiRestV1TemplatesTemplateIdDelete");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/templates/{templateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1TemplatesTemplateIdGet operation.
     * @callback module:api/TemplatesApi~apiRestV1TemplatesTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get
     * Returns details for a single template
     * @param {Number} templateId templateId
     * @param {module:api/TemplatesApi~apiRestV1TemplatesTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceTemplate}
     */
    apiRestV1TemplatesTemplateIdGet(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling apiRestV1TemplatesTemplateIdGet");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceTemplate;
      return this.apiClient.callApi(
        '/api/rest/v1/templates/{templateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
