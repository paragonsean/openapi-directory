/**
 * www.zoomconnect.com
 * The world's greatest SMS API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebServiceContact from '../model/WebServiceContact';
import WebServiceContacts from '../model/WebServiceContacts';

/**
* Contacts service.
* @module api/ContactsApi
* @version 1
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRestV1ContactsAllGet operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceContacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * all
     * Returns all contacts
     * @param {module:api/ContactsApi~apiRestV1ContactsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceContacts}
     */
    apiRestV1ContactsAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceContacts;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdAddFromGroupGroupIdGet operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdAddFromGroupGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeFromGroup
     * Remove a contact from a group
     * @param {String} contactId contactId
     * @param {String} groupId groupId
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdAddFromGroupGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1ContactsContactIdAddFromGroupGroupIdGet(contactId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdAddFromGroupGroupIdGet");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1ContactsContactIdAddFromGroupGroupIdGet");
      }

      let pathParams = {
        'contactId': contactId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}/addFromGroup/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdAddFromGroupGroupIdPost operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdAddFromGroupGroupIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeFromGroup
     * Remove a contact from a group
     * @param {String} contactId contactId
     * @param {String} groupId groupId
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdAddFromGroupGroupIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1ContactsContactIdAddFromGroupGroupIdPost(contactId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdAddFromGroupGroupIdPost");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1ContactsContactIdAddFromGroupGroupIdPost");
      }

      let pathParams = {
        'contactId': contactId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}/addFromGroup/{groupId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdAddToGroupGroupIdGet operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdAddToGroupGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addToGroup
     * Add a contact to a group
     * @param {String} contactId contactId
     * @param {String} groupId groupId
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdAddToGroupGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1ContactsContactIdAddToGroupGroupIdGet(contactId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdAddToGroupGroupIdGet");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1ContactsContactIdAddToGroupGroupIdGet");
      }

      let pathParams = {
        'contactId': contactId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}/addToGroup/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdAddToGroupGroupIdPost operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdAddToGroupGroupIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addToGroup
     * Add a contact to a group
     * @param {String} contactId contactId
     * @param {String} groupId groupId
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdAddToGroupGroupIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1ContactsContactIdAddToGroupGroupIdPost(contactId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdAddToGroupGroupIdPost");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiRestV1ContactsContactIdAddToGroupGroupIdPost");
      }

      let pathParams = {
        'contactId': contactId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}/addToGroup/{groupId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdDelete operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * Deletes a  contact
     * @param {String} contactId contactId
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRestV1ContactsContactIdDelete(contactId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdDelete");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdGet operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get
     * Returns details for a single contact
     * @param {String} contactId contactId
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceContact}
     */
    apiRestV1ContactsContactIdGet(contactId, callback) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdGet");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceContact;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsContactIdPost operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsContactIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * Updates a  contact
     * @param {String} contactId contactId
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceContact} [body] webServiceContact
     * @param {module:api/ContactsApi~apiRestV1ContactsContactIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceContact}
     */
    apiRestV1ContactsContactIdPost(contactId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling apiRestV1ContactsContactIdPost");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceContact;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/{contactId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestV1ContactsCreatePost operation.
     * @callback module:api/ContactsApi~apiRestV1ContactsCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * Creates a  contact
     * @param {Object} opts Optional parameters
     * @param {module:model/WebServiceContact} [body] webServiceContact
     * @param {module:api/ContactsApi~apiRestV1ContactsCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceContact}
     */
    apiRestV1ContactsCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebServiceContact;
      return this.apiClient.callApi(
        '/api/rest/v1/contacts/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
