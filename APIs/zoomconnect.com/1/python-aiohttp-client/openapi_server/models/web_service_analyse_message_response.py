# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebServiceAnalyseMessageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_analysis: List[List[object]]=None, message_credit_cost: float=None, message_encoding: str=None, message_length: int=None, message_length_within_maximum_allowed: bool=None, number_of_messages: int=None):
        """WebServiceAnalyseMessageResponse - a model defined in OpenAPI

        :param character_analysis: The character_analysis of this WebServiceAnalyseMessageResponse.
        :param message_credit_cost: The message_credit_cost of this WebServiceAnalyseMessageResponse.
        :param message_encoding: The message_encoding of this WebServiceAnalyseMessageResponse.
        :param message_length: The message_length of this WebServiceAnalyseMessageResponse.
        :param message_length_within_maximum_allowed: The message_length_within_maximum_allowed of this WebServiceAnalyseMessageResponse.
        :param number_of_messages: The number_of_messages of this WebServiceAnalyseMessageResponse.
        """
        self.openapi_types = {
            'character_analysis': List[List[object]],
            'message_credit_cost': float,
            'message_encoding': str,
            'message_length': int,
            'message_length_within_maximum_allowed': bool,
            'number_of_messages': int
        }

        self.attribute_map = {
            'character_analysis': 'characterAnalysis',
            'message_credit_cost': 'messageCreditCost',
            'message_encoding': 'messageEncoding',
            'message_length': 'messageLength',
            'message_length_within_maximum_allowed': 'messageLengthWithinMaximumAllowed',
            'number_of_messages': 'numberOfMessages'
        }

        self._character_analysis = character_analysis
        self._message_credit_cost = message_credit_cost
        self._message_encoding = message_encoding
        self._message_length = message_length
        self._message_length_within_maximum_allowed = message_length_within_maximum_allowed
        self._number_of_messages = number_of_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebServiceAnalyseMessageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebServiceAnalyseMessageResponse of this WebServiceAnalyseMessageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_analysis(self):
        """Gets the character_analysis of this WebServiceAnalyseMessageResponse.


        :return: The character_analysis of this WebServiceAnalyseMessageResponse.
        :rtype: List[List[object]]
        """
        return self._character_analysis

    @character_analysis.setter
    def character_analysis(self, character_analysis):
        """Sets the character_analysis of this WebServiceAnalyseMessageResponse.


        :param character_analysis: The character_analysis of this WebServiceAnalyseMessageResponse.
        :type character_analysis: List[List[object]]
        """

        self._character_analysis = character_analysis

    @property
    def message_credit_cost(self):
        """Gets the message_credit_cost of this WebServiceAnalyseMessageResponse.


        :return: The message_credit_cost of this WebServiceAnalyseMessageResponse.
        :rtype: float
        """
        return self._message_credit_cost

    @message_credit_cost.setter
    def message_credit_cost(self, message_credit_cost):
        """Sets the message_credit_cost of this WebServiceAnalyseMessageResponse.


        :param message_credit_cost: The message_credit_cost of this WebServiceAnalyseMessageResponse.
        :type message_credit_cost: float
        """

        self._message_credit_cost = message_credit_cost

    @property
    def message_encoding(self):
        """Gets the message_encoding of this WebServiceAnalyseMessageResponse.


        :return: The message_encoding of this WebServiceAnalyseMessageResponse.
        :rtype: str
        """
        return self._message_encoding

    @message_encoding.setter
    def message_encoding(self, message_encoding):
        """Sets the message_encoding of this WebServiceAnalyseMessageResponse.


        :param message_encoding: The message_encoding of this WebServiceAnalyseMessageResponse.
        :type message_encoding: str
        """

        self._message_encoding = message_encoding

    @property
    def message_length(self):
        """Gets the message_length of this WebServiceAnalyseMessageResponse.


        :return: The message_length of this WebServiceAnalyseMessageResponse.
        :rtype: int
        """
        return self._message_length

    @message_length.setter
    def message_length(self, message_length):
        """Sets the message_length of this WebServiceAnalyseMessageResponse.


        :param message_length: The message_length of this WebServiceAnalyseMessageResponse.
        :type message_length: int
        """

        self._message_length = message_length

    @property
    def message_length_within_maximum_allowed(self):
        """Gets the message_length_within_maximum_allowed of this WebServiceAnalyseMessageResponse.


        :return: The message_length_within_maximum_allowed of this WebServiceAnalyseMessageResponse.
        :rtype: bool
        """
        return self._message_length_within_maximum_allowed

    @message_length_within_maximum_allowed.setter
    def message_length_within_maximum_allowed(self, message_length_within_maximum_allowed):
        """Sets the message_length_within_maximum_allowed of this WebServiceAnalyseMessageResponse.


        :param message_length_within_maximum_allowed: The message_length_within_maximum_allowed of this WebServiceAnalyseMessageResponse.
        :type message_length_within_maximum_allowed: bool
        """

        self._message_length_within_maximum_allowed = message_length_within_maximum_allowed

    @property
    def number_of_messages(self):
        """Gets the number_of_messages of this WebServiceAnalyseMessageResponse.


        :return: The number_of_messages of this WebServiceAnalyseMessageResponse.
        :rtype: int
        """
        return self._number_of_messages

    @number_of_messages.setter
    def number_of_messages(self, number_of_messages):
        """Sets the number_of_messages of this WebServiceAnalyseMessageResponse.


        :param number_of_messages: The number_of_messages of this WebServiceAnalyseMessageResponse.
        :type number_of_messages: int
        """

        self._number_of_messages = number_of_messages
