/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionFeatureSectionCollection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionFeatureSectionCollection {
  public static final String SERIALIZED_NAME_CONCEPT_TOPICS = "concept_topics";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TOPICS)
  private Boolean conceptTopics;

  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private Boolean facets;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private Boolean mentions;

  public static final String SERIALIZED_NAME_NAMED_ENTITIES = "named_entities";
  @SerializedName(SERIALIZED_NAME_NAMED_ENTITIES)
  private Boolean namedEntities;

  public static final String SERIALIZED_NAME_QUERY_TOPICS = "query_topics";
  @SerializedName(SERIALIZED_NAME_QUERY_TOPICS)
  private Boolean queryTopics;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private Boolean themes;

  public static final String SERIALIZED_NAME_USER_ENTITIES = "user_entities";
  @SerializedName(SERIALIZED_NAME_USER_ENTITIES)
  private Boolean userEntities;

  public SubscriptionFeatureSectionCollection() {
  }

  public SubscriptionFeatureSectionCollection conceptTopics(Boolean conceptTopics) {
    this.conceptTopics = conceptTopics;
    return this;
  }

  /**
   * Indicates whether concept topics are allowed or not
   * @return conceptTopics
   */
  @javax.annotation.Nonnull
  public Boolean getConceptTopics() {
    return conceptTopics;
  }

  public void setConceptTopics(Boolean conceptTopics) {
    this.conceptTopics = conceptTopics;
  }


  public SubscriptionFeatureSectionCollection facets(Boolean facets) {
    this.facets = facets;
    return this;
  }

  /**
   * Indicates whether facets extraction feature is allowed or not
   * @return facets
   */
  @javax.annotation.Nonnull
  public Boolean getFacets() {
    return facets;
  }

  public void setFacets(Boolean facets) {
    this.facets = facets;
  }


  public SubscriptionFeatureSectionCollection mentions(Boolean mentions) {
    this.mentions = mentions;
    return this;
  }

  /**
   * Indicates whether mentions are allowed for facets and attributes or not
   * @return mentions
   */
  @javax.annotation.Nonnull
  public Boolean getMentions() {
    return mentions;
  }

  public void setMentions(Boolean mentions) {
    this.mentions = mentions;
  }


  public SubscriptionFeatureSectionCollection namedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  /**
   * Indicates whether named entities feature is allowed or not
   * @return namedEntities
   */
  @javax.annotation.Nonnull
  public Boolean getNamedEntities() {
    return namedEntities;
  }

  public void setNamedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
  }


  public SubscriptionFeatureSectionCollection queryTopics(Boolean queryTopics) {
    this.queryTopics = queryTopics;
    return this;
  }

  /**
   * Indicates whether query defined topics are allowed or not
   * @return queryTopics
   */
  @javax.annotation.Nonnull
  public Boolean getQueryTopics() {
    return queryTopics;
  }

  public void setQueryTopics(Boolean queryTopics) {
    this.queryTopics = queryTopics;
  }


  public SubscriptionFeatureSectionCollection themes(Boolean themes) {
    this.themes = themes;
    return this;
  }

  /**
   * Indicates whether themes extraction feature is allowed or not
   * @return themes
   */
  @javax.annotation.Nonnull
  public Boolean getThemes() {
    return themes;
  }

  public void setThemes(Boolean themes) {
    this.themes = themes;
  }


  public SubscriptionFeatureSectionCollection userEntities(Boolean userEntities) {
    this.userEntities = userEntities;
    return this;
  }

  /**
   * Indicates whether user entities feature is allowed or not
   * @return userEntities
   */
  @javax.annotation.Nonnull
  public Boolean getUserEntities() {
    return userEntities;
  }

  public void setUserEntities(Boolean userEntities) {
    this.userEntities = userEntities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionFeatureSectionCollection subscriptionFeatureSectionCollection = (SubscriptionFeatureSectionCollection) o;
    return Objects.equals(this.conceptTopics, subscriptionFeatureSectionCollection.conceptTopics) &&
        Objects.equals(this.facets, subscriptionFeatureSectionCollection.facets) &&
        Objects.equals(this.mentions, subscriptionFeatureSectionCollection.mentions) &&
        Objects.equals(this.namedEntities, subscriptionFeatureSectionCollection.namedEntities) &&
        Objects.equals(this.queryTopics, subscriptionFeatureSectionCollection.queryTopics) &&
        Objects.equals(this.themes, subscriptionFeatureSectionCollection.themes) &&
        Objects.equals(this.userEntities, subscriptionFeatureSectionCollection.userEntities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conceptTopics, facets, mentions, namedEntities, queryTopics, themes, userEntities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionFeatureSectionCollection {\n");
    sb.append("    conceptTopics: ").append(toIndentedString(conceptTopics)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    namedEntities: ").append(toIndentedString(namedEntities)).append("\n");
    sb.append("    queryTopics: ").append(toIndentedString(queryTopics)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    userEntities: ").append(toIndentedString(userEntities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concept_topics");
    openapiFields.add("facets");
    openapiFields.add("mentions");
    openapiFields.add("named_entities");
    openapiFields.add("query_topics");
    openapiFields.add("themes");
    openapiFields.add("user_entities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("concept_topics");
    openapiRequiredFields.add("facets");
    openapiRequiredFields.add("mentions");
    openapiRequiredFields.add("named_entities");
    openapiRequiredFields.add("query_topics");
    openapiRequiredFields.add("themes");
    openapiRequiredFields.add("user_entities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionFeatureSectionCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionFeatureSectionCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionFeatureSectionCollection is not found in the empty JSON string", SubscriptionFeatureSectionCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionFeatureSectionCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionFeatureSectionCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionFeatureSectionCollection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionFeatureSectionCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionFeatureSectionCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionFeatureSectionCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionFeatureSectionCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionFeatureSectionCollection>() {
           @Override
           public void write(JsonWriter out, SubscriptionFeatureSectionCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionFeatureSectionCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionFeatureSectionCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionFeatureSectionCollection
   * @throws IOException if the JSON string is invalid with respect to SubscriptionFeatureSectionCollection
   */
  public static SubscriptionFeatureSectionCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionFeatureSectionCollection.class);
  }

  /**
   * Convert an instance of SubscriptionFeatureSectionCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

