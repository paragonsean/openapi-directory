/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.Mention;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Facet {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<Attribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private List<Mention> mentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEGATIVE_COUNT = "negative_count";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_COUNT)
  private Integer negativeCount;

  public static final String SERIALIZED_NAME_NEUTRAL_COUNT = "neutral_count";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_COUNT)
  private Integer neutralCount;

  public static final String SERIALIZED_NAME_POSITIVE_COUNT = "positive_count";
  @SerializedName(SERIALIZED_NAME_POSITIVE_COUNT)
  private Integer positiveCount;

  public Facet() {
  }

  public Facet attributes(List<Attribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Facet addAttributesItem(Attribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Returns the attributes associated with this facet
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List<Attribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<Attribute> attributes) {
    this.attributes = attributes;
  }


  public Facet count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The count of occurrences of the facet in the text
   * minimum: 0
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public Facet label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The text of the facet
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public Facet mentions(List<Mention> mentions) {
    this.mentions = mentions;
    return this;
  }

  public Facet addMentionsItem(Mention mentionsItem) {
    if (this.mentions == null) {
      this.mentions = new ArrayList<>();
    }
    this.mentions.add(mentionsItem);
    return this;
  }

  /**
   * Returns genuine forms of facet mentioned across the documents
   * @return mentions
   */
  @javax.annotation.Nonnull
  public List<Mention> getMentions() {
    return mentions;
  }

  public void setMentions(List<Mention> mentions) {
    this.mentions = mentions;
  }


  public Facet negativeCount(Integer negativeCount) {
    this.negativeCount = negativeCount;
    return this;
  }

  /**
   * The count of negative occurrences of the facet across the documents
   * minimum: 0
   * @return negativeCount
   */
  @javax.annotation.Nonnull
  public Integer getNegativeCount() {
    return negativeCount;
  }

  public void setNegativeCount(Integer negativeCount) {
    this.negativeCount = negativeCount;
  }


  public Facet neutralCount(Integer neutralCount) {
    this.neutralCount = neutralCount;
    return this;
  }

  /**
   * The count of neutral occurrences of the facet across the documents
   * minimum: 0
   * @return neutralCount
   */
  @javax.annotation.Nonnull
  public Integer getNeutralCount() {
    return neutralCount;
  }

  public void setNeutralCount(Integer neutralCount) {
    this.neutralCount = neutralCount;
  }


  public Facet positiveCount(Integer positiveCount) {
    this.positiveCount = positiveCount;
    return this;
  }

  /**
   * The count of positive occurrences of the facet across the documents
   * minimum: 0
   * @return positiveCount
   */
  @javax.annotation.Nonnull
  public Integer getPositiveCount() {
    return positiveCount;
  }

  public void setPositiveCount(Integer positiveCount) {
    this.positiveCount = positiveCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Facet facet = (Facet) o;
    return Objects.equals(this.attributes, facet.attributes) &&
        Objects.equals(this.count, facet.count) &&
        Objects.equals(this.label, facet.label) &&
        Objects.equals(this.mentions, facet.mentions) &&
        Objects.equals(this.negativeCount, facet.negativeCount) &&
        Objects.equals(this.neutralCount, facet.neutralCount) &&
        Objects.equals(this.positiveCount, facet.positiveCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, count, label, mentions, negativeCount, neutralCount, positiveCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Facet {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    negativeCount: ").append(toIndentedString(negativeCount)).append("\n");
    sb.append("    neutralCount: ").append(toIndentedString(neutralCount)).append("\n");
    sb.append("    positiveCount: ").append(toIndentedString(positiveCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("count");
    openapiFields.add("label");
    openapiFields.add("mentions");
    openapiFields.add("negative_count");
    openapiFields.add("neutral_count");
    openapiFields.add("positive_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("mentions");
    openapiRequiredFields.add("negative_count");
    openapiRequiredFields.add("neutral_count");
    openapiRequiredFields.add("positive_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Facet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Facet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Facet is not found in the empty JSON string", Facet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Facet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Facet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Facet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        Attribute.validateJsonElement(jsonArrayattributes.get(i));
      };
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("mentions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentions` to be an array in the JSON string but got `%s`", jsonObj.get("mentions").toString()));
      }

      JsonArray jsonArraymentions = jsonObj.getAsJsonArray("mentions");
      // validate the required field `mentions` (array)
      for (int i = 0; i < jsonArraymentions.size(); i++) {
        Mention.validateJsonElement(jsonArraymentions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Facet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Facet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Facet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Facet.class));

       return (TypeAdapter<T>) new TypeAdapter<Facet>() {
           @Override
           public void write(JsonWriter out, Facet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Facet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Facet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Facet
   * @throws IOException if the JSON string is invalid with respect to Facet
   */
  public static Facet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Facet.class);
  }

  /**
   * Convert an instance of Facet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

