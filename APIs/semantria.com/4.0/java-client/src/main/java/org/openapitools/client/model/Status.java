/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Status {
  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  /**
   * Represents the availability of the service
   */
  @JsonAdapter(ServiceStatusEnum.Adapter.class)
  public enum ServiceStatusEnum {
    AVAILABLE("available"),
    
    PENDING("pending"),
    
    SOLD("sold");

    private String value;

    ServiceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceStatusEnum fromValue(String value) {
      for (ServiceStatusEnum b : ServiceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_STATUS = "service_status";
  @SerializedName(SERIALIZED_NAME_SERVICE_STATUS)
  private ServiceStatusEnum serviceStatus;

  public static final String SERIALIZED_NAME_SERVICE_VERSION = "service_version";
  @SerializedName(SERIALIZED_NAME_SERVICE_VERSION)
  private String serviceVersion;

  public static final String SERIALIZED_NAME_SUPPORTED_COMPRESSION = "supported_compression";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_COMPRESSION)
  private String supportedCompression;

  public static final String SERIALIZED_NAME_SUPPORTED_ENCODING = "supported_encoding";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ENCODING)
  private String supportedEncoding;

  public static final String SERIALIZED_NAME_SUPPORTED_LANGUAGES = "supported_languages";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_LANGUAGES)
  private List<String> supportedLanguages = new ArrayList<>();

  public Status() {
  }

  public Status apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Represents current version of the exposed API
   * @return apiVersion
   */
  @javax.annotation.Nonnull
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public Status serviceStatus(ServiceStatusEnum serviceStatus) {
    this.serviceStatus = serviceStatus;
    return this;
  }

  /**
   * Represents the availability of the service
   * @return serviceStatus
   */
  @javax.annotation.Nonnull
  public ServiceStatusEnum getServiceStatus() {
    return serviceStatus;
  }

  public void setServiceStatus(ServiceStatusEnum serviceStatus) {
    this.serviceStatus = serviceStatus;
  }


  public Status serviceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
    return this;
  }

  /**
   * Represents current version of the Semantria service
   * @return serviceVersion
   */
  @javax.annotation.Nonnull
  public String getServiceVersion() {
    return serviceVersion;
  }

  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
  }


  public Status supportedCompression(String supportedCompression) {
    this.supportedCompression = supportedCompression;
    return this;
  }

  /**
   * Exposes supported compression algorithms. Currently only gzip and deflate are supported
   * @return supportedCompression
   */
  @javax.annotation.Nonnull
  public String getSupportedCompression() {
    return supportedCompression;
  }

  public void setSupportedCompression(String supportedCompression) {
    this.supportedCompression = supportedCompression;
  }


  public Status supportedEncoding(String supportedEncoding) {
    this.supportedEncoding = supportedEncoding;
    return this;
  }

  /**
   * Exposes supported content encoding. Currently only UTF-8 is supported
   * @return supportedEncoding
   */
  @javax.annotation.Nonnull
  public String getSupportedEncoding() {
    return supportedEncoding;
  }

  public void setSupportedEncoding(String supportedEncoding) {
    this.supportedEncoding = supportedEncoding;
  }


  public Status supportedLanguages(List<String> supportedLanguages) {
    this.supportedLanguages = supportedLanguages;
    return this;
  }

  public Status addSupportedLanguagesItem(String supportedLanguagesItem) {
    if (this.supportedLanguages == null) {
      this.supportedLanguages = new ArrayList<>();
    }
    this.supportedLanguages.add(supportedLanguagesItem);
    return this;
  }

  /**
   * Exposes list of supported languages
   * @return supportedLanguages
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedLanguages() {
    return supportedLanguages;
  }

  public void setSupportedLanguages(List<String> supportedLanguages) {
    this.supportedLanguages = supportedLanguages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Status status = (Status) o;
    return Objects.equals(this.apiVersion, status.apiVersion) &&
        Objects.equals(this.serviceStatus, status.serviceStatus) &&
        Objects.equals(this.serviceVersion, status.serviceVersion) &&
        Objects.equals(this.supportedCompression, status.supportedCompression) &&
        Objects.equals(this.supportedEncoding, status.supportedEncoding) &&
        Objects.equals(this.supportedLanguages, status.supportedLanguages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, serviceStatus, serviceVersion, supportedCompression, supportedEncoding, supportedLanguages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Status {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    serviceStatus: ").append(toIndentedString(serviceStatus)).append("\n");
    sb.append("    serviceVersion: ").append(toIndentedString(serviceVersion)).append("\n");
    sb.append("    supportedCompression: ").append(toIndentedString(supportedCompression)).append("\n");
    sb.append("    supportedEncoding: ").append(toIndentedString(supportedEncoding)).append("\n");
    sb.append("    supportedLanguages: ").append(toIndentedString(supportedLanguages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_version");
    openapiFields.add("service_status");
    openapiFields.add("service_version");
    openapiFields.add("supported_compression");
    openapiFields.add("supported_encoding");
    openapiFields.add("supported_languages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api_version");
    openapiRequiredFields.add("service_status");
    openapiRequiredFields.add("service_version");
    openapiRequiredFields.add("supported_compression");
    openapiRequiredFields.add("supported_encoding");
    openapiRequiredFields.add("supported_languages");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Status
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Status.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Status is not found in the empty JSON string", Status.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Status.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Status` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Status.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      if (!jsonObj.get("service_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_status").toString()));
      }
      // validate the required field `service_status`
      ServiceStatusEnum.validateJsonElement(jsonObj.get("service_status"));
      if (!jsonObj.get("service_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_version").toString()));
      }
      if (!jsonObj.get("supported_compression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_compression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supported_compression").toString()));
      }
      if (!jsonObj.get("supported_encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supported_encoding").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_languages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_languages` to be an array in the JSON string but got `%s`", jsonObj.get("supported_languages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Status.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Status' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Status> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Status.class));

       return (TypeAdapter<T>) new TypeAdapter<Status>() {
           @Override
           public void write(JsonWriter out, Status value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Status read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Status given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Status
   * @throws IOException if the JSON string is invalid with respect to Status
   */
  public static Status fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Status.class);
  }

  /**
   * Convert an instance of Status to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

