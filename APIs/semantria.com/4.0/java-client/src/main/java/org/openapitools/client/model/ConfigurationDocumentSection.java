/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationDocumentSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationDocumentSection {
  public static final String SERIALIZED_NAME_AUTO_CATEGORIES_LIMIT = "auto_categories_limit";
  @SerializedName(SERIALIZED_NAME_AUTO_CATEGORIES_LIMIT)
  private Integer autoCategoriesLimit;

  public static final String SERIALIZED_NAME_CONCEPT_TOPICS_LIMIT = "concept_topics_limit";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TOPICS_LIMIT)
  private Integer conceptTopicsLimit;

  public static final String SERIALIZED_NAME_DETECT_LANGUAGE = "detect_language";
  @SerializedName(SERIALIZED_NAME_DETECT_LANGUAGE)
  private Boolean detectLanguage;

  public static final String SERIALIZED_NAME_ENTITY_THEMES_LIMIT = "entity_themes_limit";
  @SerializedName(SERIALIZED_NAME_ENTITY_THEMES_LIMIT)
  private Integer entityThemesLimit;

  public static final String SERIALIZED_NAME_INTENTIONS = "intentions";
  @SerializedName(SERIALIZED_NAME_INTENTIONS)
  private Boolean intentions;

  public static final String SERIALIZED_NAME_MODEL_SENTIMENT = "model_sentiment";
  @SerializedName(SERIALIZED_NAME_MODEL_SENTIMENT)
  private Boolean modelSentiment;

  public static final String SERIALIZED_NAME_NAMED_ENTITIES_LIMIT = "named_entities_limit";
  @SerializedName(SERIALIZED_NAME_NAMED_ENTITIES_LIMIT)
  private Integer namedEntitiesLimit;

  public static final String SERIALIZED_NAME_NAMED_MENTIONS_LIMIT = "named_mentions_limit";
  @SerializedName(SERIALIZED_NAME_NAMED_MENTIONS_LIMIT)
  private Integer namedMentionsLimit;

  public static final String SERIALIZED_NAME_NAMED_OPINIONS_LIMIT = "named_opinions_limit";
  @SerializedName(SERIALIZED_NAME_NAMED_OPINIONS_LIMIT)
  private Integer namedOpinionsLimit;

  public static final String SERIALIZED_NAME_NAMED_RELATIONS_LIMIT = "named_relations_limit";
  @SerializedName(SERIALIZED_NAME_NAMED_RELATIONS_LIMIT)
  private Integer namedRelationsLimit;

  public static final String SERIALIZED_NAME_PHRASES_LIMIT = "phrases_limit";
  @SerializedName(SERIALIZED_NAME_PHRASES_LIMIT)
  private Integer phrasesLimit;

  /**
   * Defines parts-of-speech which will be responded by the server
   */
  @JsonAdapter(PosTypesEnum.Adapter.class)
  public enum PosTypesEnum {
    ALL("All"),
    
    NOUN("Noun"),
    
    VERB("Verb"),
    
    ADJECTIVE("Adjective"),
    
    DETERMINER("Determiner"),
    
    MISC("Misc"),
    
    TWITTER("Twitter"),
    
    CHINESE("Chinese");

    private String value;

    PosTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PosTypesEnum fromValue(String value) {
      for (PosTypesEnum b : PosTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PosTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PosTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PosTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PosTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PosTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POS_TYPES = "pos_types";
  @SerializedName(SERIALIZED_NAME_POS_TYPES)
  private PosTypesEnum posTypes;

  public static final String SERIALIZED_NAME_POSSIBLE_PHRASES_LIMIT = "possible_phrases_limit";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_PHRASES_LIMIT)
  private Integer possiblePhrasesLimit;

  public static final String SERIALIZED_NAME_QUERY_TOPICS_LIMIT = "query_topics_limit";
  @SerializedName(SERIALIZED_NAME_QUERY_TOPICS_LIMIT)
  private Integer queryTopicsLimit;

  public static final String SERIALIZED_NAME_SUMMARY_LIMIT = "summary_limit";
  @SerializedName(SERIALIZED_NAME_SUMMARY_LIMIT)
  private Integer summaryLimit;

  public static final String SERIALIZED_NAME_THEME_MENTIONS_LIMIT = "theme_mentions_limit";
  @SerializedName(SERIALIZED_NAME_THEME_MENTIONS_LIMIT)
  private Integer themeMentionsLimit;

  public static final String SERIALIZED_NAME_THEMES_LIMIT = "themes_limit";
  @SerializedName(SERIALIZED_NAME_THEMES_LIMIT)
  private Integer themesLimit;

  public static final String SERIALIZED_NAME_USER_ENTITIES_LIMIT = "user_entities_limit";
  @SerializedName(SERIALIZED_NAME_USER_ENTITIES_LIMIT)
  private Integer userEntitiesLimit;

  public static final String SERIALIZED_NAME_USER_MENTIONS_LIMIT = "user_mentions_limit";
  @SerializedName(SERIALIZED_NAME_USER_MENTIONS_LIMIT)
  private Integer userMentionsLimit;

  public static final String SERIALIZED_NAME_USER_OPINIONS_LIMIT = "user_opinions_limit";
  @SerializedName(SERIALIZED_NAME_USER_OPINIONS_LIMIT)
  private Integer userOpinionsLimit;

  public static final String SERIALIZED_NAME_USER_RELATIONS_LIMIT = "user_relations_limit";
  @SerializedName(SERIALIZED_NAME_USER_RELATIONS_LIMIT)
  private Integer userRelationsLimit;

  public ConfigurationDocumentSection() {
  }

  public ConfigurationDocumentSection autoCategoriesLimit(Integer autoCategoriesLimit) {
    this.autoCategoriesLimit = autoCategoriesLimit;
    return this;
  }

  /**
   * Limits the number of auto categories the service responds. Default: 5
   * minimum: 0
   * maximum: 20
   * @return autoCategoriesLimit
   */
  @javax.annotation.Nonnull
  public Integer getAutoCategoriesLimit() {
    return autoCategoriesLimit;
  }

  public void setAutoCategoriesLimit(Integer autoCategoriesLimit) {
    this.autoCategoriesLimit = autoCategoriesLimit;
  }


  public ConfigurationDocumentSection conceptTopicsLimit(Integer conceptTopicsLimit) {
    this.conceptTopicsLimit = conceptTopicsLimit;
    return this;
  }

  /**
   * Limits the number of concept topics the service responds. Default: 5
   * minimum: 0
   * maximum: 20
   * @return conceptTopicsLimit
   */
  @javax.annotation.Nonnull
  public Integer getConceptTopicsLimit() {
    return conceptTopicsLimit;
  }

  public void setConceptTopicsLimit(Integer conceptTopicsLimit) {
    this.conceptTopicsLimit = conceptTopicsLimit;
  }


  public ConfigurationDocumentSection detectLanguage(Boolean detectLanguage) {
    this.detectLanguage = detectLanguage;
    return this;
  }

  /**
   * Switches on language detection feature. Default: true
   * @return detectLanguage
   */
  @javax.annotation.Nonnull
  public Boolean getDetectLanguage() {
    return detectLanguage;
  }

  public void setDetectLanguage(Boolean detectLanguage) {
    this.detectLanguage = detectLanguage;
  }


  public ConfigurationDocumentSection entityThemesLimit(Integer entityThemesLimit) {
    this.entityThemesLimit = entityThemesLimit;
    return this;
  }

  /**
   * Limits the number of entity themes the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return entityThemesLimit
   */
  @javax.annotation.Nonnull
  public Integer getEntityThemesLimit() {
    return entityThemesLimit;
  }

  public void setEntityThemesLimit(Integer entityThemesLimit) {
    this.entityThemesLimit = entityThemesLimit;
  }


  public ConfigurationDocumentSection intentions(Boolean intentions) {
    this.intentions = intentions;
    return this;
  }

  /**
   * Switches on intentions detection feature. Default: false
   * @return intentions
   */
  @javax.annotation.Nonnull
  public Boolean getIntentions() {
    return intentions;
  }

  public void setIntentions(Boolean intentions) {
    this.intentions = intentions;
  }


  public ConfigurationDocumentSection modelSentiment(Boolean modelSentiment) {
    this.modelSentiment = modelSentiment;
    return this;
  }

  /**
   * Switches on/off model-based sentiment feature. Default: false
   * @return modelSentiment
   */
  @javax.annotation.Nonnull
  public Boolean getModelSentiment() {
    return modelSentiment;
  }

  public void setModelSentiment(Boolean modelSentiment) {
    this.modelSentiment = modelSentiment;
  }


  public ConfigurationDocumentSection namedEntitiesLimit(Integer namedEntitiesLimit) {
    this.namedEntitiesLimit = namedEntitiesLimit;
    return this;
  }

  /**
   * Limits the number of named entities the service responds. Default: 5
   * minimum: 0
   * maximum: 20
   * @return namedEntitiesLimit
   */
  @javax.annotation.Nonnull
  public Integer getNamedEntitiesLimit() {
    return namedEntitiesLimit;
  }

  public void setNamedEntitiesLimit(Integer namedEntitiesLimit) {
    this.namedEntitiesLimit = namedEntitiesLimit;
  }


  public ConfigurationDocumentSection namedMentionsLimit(Integer namedMentionsLimit) {
    this.namedMentionsLimit = namedMentionsLimit;
    return this;
  }

  /**
   * Limits the number of named entity related mentions. Default: 0
   * minimum: 0
   * maximum: 20
   * @return namedMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getNamedMentionsLimit() {
    return namedMentionsLimit;
  }

  public void setNamedMentionsLimit(Integer namedMentionsLimit) {
    this.namedMentionsLimit = namedMentionsLimit;
  }


  public ConfigurationDocumentSection namedOpinionsLimit(Integer namedOpinionsLimit) {
    this.namedOpinionsLimit = namedOpinionsLimit;
    return this;
  }

  /**
   * Limits the number of named entity opinions the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return namedOpinionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getNamedOpinionsLimit() {
    return namedOpinionsLimit;
  }

  public void setNamedOpinionsLimit(Integer namedOpinionsLimit) {
    this.namedOpinionsLimit = namedOpinionsLimit;
  }


  public ConfigurationDocumentSection namedRelationsLimit(Integer namedRelationsLimit) {
    this.namedRelationsLimit = namedRelationsLimit;
    return this;
  }

  /**
   * Limits the number of named entity relations the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return namedRelationsLimit
   */
  @javax.annotation.Nonnull
  public Integer getNamedRelationsLimit() {
    return namedRelationsLimit;
  }

  public void setNamedRelationsLimit(Integer namedRelationsLimit) {
    this.namedRelationsLimit = namedRelationsLimit;
  }


  public ConfigurationDocumentSection phrasesLimit(Integer phrasesLimit) {
    this.phrasesLimit = phrasesLimit;
    return this;
  }

  /**
   * Limits the number of responded sentiment-bearing phrases for document. Default: 0
   * minimum: 0
   * maximum: 20
   * @return phrasesLimit
   */
  @javax.annotation.Nonnull
  public Integer getPhrasesLimit() {
    return phrasesLimit;
  }

  public void setPhrasesLimit(Integer phrasesLimit) {
    this.phrasesLimit = phrasesLimit;
  }


  public ConfigurationDocumentSection posTypes(PosTypesEnum posTypes) {
    this.posTypes = posTypes;
    return this;
  }

  /**
   * Defines parts-of-speech which will be responded by the server
   * @return posTypes
   */
  @javax.annotation.Nonnull
  public PosTypesEnum getPosTypes() {
    return posTypes;
  }

  public void setPosTypes(PosTypesEnum posTypes) {
    this.posTypes = posTypes;
  }


  public ConfigurationDocumentSection possiblePhrasesLimit(Integer possiblePhrasesLimit) {
    this.possiblePhrasesLimit = possiblePhrasesLimit;
    return this;
  }

  /**
   * Limits the number of responded possible phrases which may affect on sentiment score extraction. Default: 0
   * minimum: 0
   * maximum: 20
   * @return possiblePhrasesLimit
   */
  @javax.annotation.Nonnull
  public Integer getPossiblePhrasesLimit() {
    return possiblePhrasesLimit;
  }

  public void setPossiblePhrasesLimit(Integer possiblePhrasesLimit) {
    this.possiblePhrasesLimit = possiblePhrasesLimit;
  }


  public ConfigurationDocumentSection queryTopicsLimit(Integer queryTopicsLimit) {
    this.queryTopicsLimit = queryTopicsLimit;
    return this;
  }

  /**
   * Limits the number of query topics the service responds. Default: 5
   * minimum: 0
   * maximum: 20
   * @return queryTopicsLimit
   */
  @javax.annotation.Nonnull
  public Integer getQueryTopicsLimit() {
    return queryTopicsLimit;
  }

  public void setQueryTopicsLimit(Integer queryTopicsLimit) {
    this.queryTopicsLimit = queryTopicsLimit;
  }


  public ConfigurationDocumentSection summaryLimit(Integer summaryLimit) {
    this.summaryLimit = summaryLimit;
    return this;
  }

  /**
   * Limits the number of sentences for the document summary feature. Default: 3
   * minimum: 0
   * maximum: 20
   * @return summaryLimit
   */
  @javax.annotation.Nonnull
  public Integer getSummaryLimit() {
    return summaryLimit;
  }

  public void setSummaryLimit(Integer summaryLimit) {
    this.summaryLimit = summaryLimit;
  }


  public ConfigurationDocumentSection themeMentionsLimit(Integer themeMentionsLimit) {
    this.themeMentionsLimit = themeMentionsLimit;
    return this;
  }

  /**
   * Limits the number of document and entity related theme mentions. Default: 0
   * minimum: 0
   * maximum: 20
   * @return themeMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getThemeMentionsLimit() {
    return themeMentionsLimit;
  }

  public void setThemeMentionsLimit(Integer themeMentionsLimit) {
    this.themeMentionsLimit = themeMentionsLimit;
  }


  public ConfigurationDocumentSection themesLimit(Integer themesLimit) {
    this.themesLimit = themesLimit;
    return this;
  }

  /**
   * Limits the number of document themes the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return themesLimit
   */
  @javax.annotation.Nonnull
  public Integer getThemesLimit() {
    return themesLimit;
  }

  public void setThemesLimit(Integer themesLimit) {
    this.themesLimit = themesLimit;
  }


  public ConfigurationDocumentSection userEntitiesLimit(Integer userEntitiesLimit) {
    this.userEntitiesLimit = userEntitiesLimit;
    return this;
  }

  /**
   * Limits the number of user entities the service responds. Default: 5
   * minimum: 0
   * maximum: 20
   * @return userEntitiesLimit
   */
  @javax.annotation.Nonnull
  public Integer getUserEntitiesLimit() {
    return userEntitiesLimit;
  }

  public void setUserEntitiesLimit(Integer userEntitiesLimit) {
    this.userEntitiesLimit = userEntitiesLimit;
  }


  public ConfigurationDocumentSection userMentionsLimit(Integer userMentionsLimit) {
    this.userMentionsLimit = userMentionsLimit;
    return this;
  }

  /**
   * Limits the number of user entity related mentions. Default: 0
   * minimum: 0
   * maximum: 20
   * @return userMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getUserMentionsLimit() {
    return userMentionsLimit;
  }

  public void setUserMentionsLimit(Integer userMentionsLimit) {
    this.userMentionsLimit = userMentionsLimit;
  }


  public ConfigurationDocumentSection userOpinionsLimit(Integer userOpinionsLimit) {
    this.userOpinionsLimit = userOpinionsLimit;
    return this;
  }

  /**
   * Limits the number of concept topics the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return userOpinionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getUserOpinionsLimit() {
    return userOpinionsLimit;
  }

  public void setUserOpinionsLimit(Integer userOpinionsLimit) {
    this.userOpinionsLimit = userOpinionsLimit;
  }


  public ConfigurationDocumentSection userRelationsLimit(Integer userRelationsLimit) {
    this.userRelationsLimit = userRelationsLimit;
    return this;
  }

  /**
   * Limits the number of user entity relations the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return userRelationsLimit
   */
  @javax.annotation.Nonnull
  public Integer getUserRelationsLimit() {
    return userRelationsLimit;
  }

  public void setUserRelationsLimit(Integer userRelationsLimit) {
    this.userRelationsLimit = userRelationsLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationDocumentSection configurationDocumentSection = (ConfigurationDocumentSection) o;
    return Objects.equals(this.autoCategoriesLimit, configurationDocumentSection.autoCategoriesLimit) &&
        Objects.equals(this.conceptTopicsLimit, configurationDocumentSection.conceptTopicsLimit) &&
        Objects.equals(this.detectLanguage, configurationDocumentSection.detectLanguage) &&
        Objects.equals(this.entityThemesLimit, configurationDocumentSection.entityThemesLimit) &&
        Objects.equals(this.intentions, configurationDocumentSection.intentions) &&
        Objects.equals(this.modelSentiment, configurationDocumentSection.modelSentiment) &&
        Objects.equals(this.namedEntitiesLimit, configurationDocumentSection.namedEntitiesLimit) &&
        Objects.equals(this.namedMentionsLimit, configurationDocumentSection.namedMentionsLimit) &&
        Objects.equals(this.namedOpinionsLimit, configurationDocumentSection.namedOpinionsLimit) &&
        Objects.equals(this.namedRelationsLimit, configurationDocumentSection.namedRelationsLimit) &&
        Objects.equals(this.phrasesLimit, configurationDocumentSection.phrasesLimit) &&
        Objects.equals(this.posTypes, configurationDocumentSection.posTypes) &&
        Objects.equals(this.possiblePhrasesLimit, configurationDocumentSection.possiblePhrasesLimit) &&
        Objects.equals(this.queryTopicsLimit, configurationDocumentSection.queryTopicsLimit) &&
        Objects.equals(this.summaryLimit, configurationDocumentSection.summaryLimit) &&
        Objects.equals(this.themeMentionsLimit, configurationDocumentSection.themeMentionsLimit) &&
        Objects.equals(this.themesLimit, configurationDocumentSection.themesLimit) &&
        Objects.equals(this.userEntitiesLimit, configurationDocumentSection.userEntitiesLimit) &&
        Objects.equals(this.userMentionsLimit, configurationDocumentSection.userMentionsLimit) &&
        Objects.equals(this.userOpinionsLimit, configurationDocumentSection.userOpinionsLimit) &&
        Objects.equals(this.userRelationsLimit, configurationDocumentSection.userRelationsLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCategoriesLimit, conceptTopicsLimit, detectLanguage, entityThemesLimit, intentions, modelSentiment, namedEntitiesLimit, namedMentionsLimit, namedOpinionsLimit, namedRelationsLimit, phrasesLimit, posTypes, possiblePhrasesLimit, queryTopicsLimit, summaryLimit, themeMentionsLimit, themesLimit, userEntitiesLimit, userMentionsLimit, userOpinionsLimit, userRelationsLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationDocumentSection {\n");
    sb.append("    autoCategoriesLimit: ").append(toIndentedString(autoCategoriesLimit)).append("\n");
    sb.append("    conceptTopicsLimit: ").append(toIndentedString(conceptTopicsLimit)).append("\n");
    sb.append("    detectLanguage: ").append(toIndentedString(detectLanguage)).append("\n");
    sb.append("    entityThemesLimit: ").append(toIndentedString(entityThemesLimit)).append("\n");
    sb.append("    intentions: ").append(toIndentedString(intentions)).append("\n");
    sb.append("    modelSentiment: ").append(toIndentedString(modelSentiment)).append("\n");
    sb.append("    namedEntitiesLimit: ").append(toIndentedString(namedEntitiesLimit)).append("\n");
    sb.append("    namedMentionsLimit: ").append(toIndentedString(namedMentionsLimit)).append("\n");
    sb.append("    namedOpinionsLimit: ").append(toIndentedString(namedOpinionsLimit)).append("\n");
    sb.append("    namedRelationsLimit: ").append(toIndentedString(namedRelationsLimit)).append("\n");
    sb.append("    phrasesLimit: ").append(toIndentedString(phrasesLimit)).append("\n");
    sb.append("    posTypes: ").append(toIndentedString(posTypes)).append("\n");
    sb.append("    possiblePhrasesLimit: ").append(toIndentedString(possiblePhrasesLimit)).append("\n");
    sb.append("    queryTopicsLimit: ").append(toIndentedString(queryTopicsLimit)).append("\n");
    sb.append("    summaryLimit: ").append(toIndentedString(summaryLimit)).append("\n");
    sb.append("    themeMentionsLimit: ").append(toIndentedString(themeMentionsLimit)).append("\n");
    sb.append("    themesLimit: ").append(toIndentedString(themesLimit)).append("\n");
    sb.append("    userEntitiesLimit: ").append(toIndentedString(userEntitiesLimit)).append("\n");
    sb.append("    userMentionsLimit: ").append(toIndentedString(userMentionsLimit)).append("\n");
    sb.append("    userOpinionsLimit: ").append(toIndentedString(userOpinionsLimit)).append("\n");
    sb.append("    userRelationsLimit: ").append(toIndentedString(userRelationsLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_categories_limit");
    openapiFields.add("concept_topics_limit");
    openapiFields.add("detect_language");
    openapiFields.add("entity_themes_limit");
    openapiFields.add("intentions");
    openapiFields.add("model_sentiment");
    openapiFields.add("named_entities_limit");
    openapiFields.add("named_mentions_limit");
    openapiFields.add("named_opinions_limit");
    openapiFields.add("named_relations_limit");
    openapiFields.add("phrases_limit");
    openapiFields.add("pos_types");
    openapiFields.add("possible_phrases_limit");
    openapiFields.add("query_topics_limit");
    openapiFields.add("summary_limit");
    openapiFields.add("theme_mentions_limit");
    openapiFields.add("themes_limit");
    openapiFields.add("user_entities_limit");
    openapiFields.add("user_mentions_limit");
    openapiFields.add("user_opinions_limit");
    openapiFields.add("user_relations_limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_categories_limit");
    openapiRequiredFields.add("concept_topics_limit");
    openapiRequiredFields.add("detect_language");
    openapiRequiredFields.add("entity_themes_limit");
    openapiRequiredFields.add("intentions");
    openapiRequiredFields.add("model_sentiment");
    openapiRequiredFields.add("named_entities_limit");
    openapiRequiredFields.add("named_mentions_limit");
    openapiRequiredFields.add("named_opinions_limit");
    openapiRequiredFields.add("named_relations_limit");
    openapiRequiredFields.add("phrases_limit");
    openapiRequiredFields.add("pos_types");
    openapiRequiredFields.add("possible_phrases_limit");
    openapiRequiredFields.add("query_topics_limit");
    openapiRequiredFields.add("summary_limit");
    openapiRequiredFields.add("theme_mentions_limit");
    openapiRequiredFields.add("themes_limit");
    openapiRequiredFields.add("user_entities_limit");
    openapiRequiredFields.add("user_mentions_limit");
    openapiRequiredFields.add("user_opinions_limit");
    openapiRequiredFields.add("user_relations_limit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationDocumentSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationDocumentSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationDocumentSection is not found in the empty JSON string", ConfigurationDocumentSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationDocumentSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationDocumentSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigurationDocumentSection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pos_types").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pos_types` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pos_types").toString()));
      }
      // validate the required field `pos_types`
      PosTypesEnum.validateJsonElement(jsonObj.get("pos_types"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationDocumentSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationDocumentSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationDocumentSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationDocumentSection.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationDocumentSection>() {
           @Override
           public void write(JsonWriter out, ConfigurationDocumentSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationDocumentSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationDocumentSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationDocumentSection
   * @throws IOException if the JSON string is invalid with respect to ConfigurationDocumentSection
   */
  public static ConfigurationDocumentSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationDocumentSection.class);
  }

  /**
   * Convert an instance of ConfigurationDocumentSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

