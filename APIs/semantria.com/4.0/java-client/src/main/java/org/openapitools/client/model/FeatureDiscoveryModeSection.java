/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeatureDiscoveryModeSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeatureDiscoveryModeSection {
  public static final String SERIALIZED_NAME_ENTITY_MENTIONS = "entity_mentions";
  @SerializedName(SERIALIZED_NAME_ENTITY_MENTIONS)
  private Boolean entityMentions;

  public static final String SERIALIZED_NAME_FACET_ATTRIBUTES = "facet_attributes";
  @SerializedName(SERIALIZED_NAME_FACET_ATTRIBUTES)
  private Boolean facetAttributes;

  public static final String SERIALIZED_NAME_FACET_MENTIOINS = "facet_mentioins";
  @SerializedName(SERIALIZED_NAME_FACET_MENTIOINS)
  private Boolean facetMentioins;

  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private Boolean facets;

  public static final String SERIALIZED_NAME_NAMED_ENTITIES = "named_entities";
  @SerializedName(SERIALIZED_NAME_NAMED_ENTITIES)
  private Boolean namedEntities;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private Boolean queries;

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private Boolean taxonomy;

  public static final String SERIALIZED_NAME_THEME_MENTIONS = "theme_mentions";
  @SerializedName(SERIALIZED_NAME_THEME_MENTIONS)
  private Boolean themeMentions;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private Boolean themes;

  public static final String SERIALIZED_NAME_USER_CATEGORIES = "user_categories";
  @SerializedName(SERIALIZED_NAME_USER_CATEGORIES)
  private Boolean userCategories;

  public static final String SERIALIZED_NAME_USER_ENTITIES = "user_entities";
  @SerializedName(SERIALIZED_NAME_USER_ENTITIES)
  private Boolean userEntities;

  public FeatureDiscoveryModeSection() {
  }

  public FeatureDiscoveryModeSection entityMentions(Boolean entityMentions) {
    this.entityMentions = entityMentions;
    return this;
  }

  /**
   * Represents whether mentions of entities supported for certain language or not
   * @return entityMentions
   */
  @javax.annotation.Nonnull
  public Boolean getEntityMentions() {
    return entityMentions;
  }

  public void setEntityMentions(Boolean entityMentions) {
    this.entityMentions = entityMentions;
  }


  public FeatureDiscoveryModeSection facetAttributes(Boolean facetAttributes) {
    this.facetAttributes = facetAttributes;
    return this;
  }

  /**
   * Represents whether attributes of facets supported for certain language or not
   * @return facetAttributes
   */
  @javax.annotation.Nonnull
  public Boolean getFacetAttributes() {
    return facetAttributes;
  }

  public void setFacetAttributes(Boolean facetAttributes) {
    this.facetAttributes = facetAttributes;
  }


  public FeatureDiscoveryModeSection facetMentioins(Boolean facetMentioins) {
    this.facetMentioins = facetMentioins;
    return this;
  }

  /**
   * Represents whether mentions of facets supported for certain language or not
   * @return facetMentioins
   */
  @javax.annotation.Nonnull
  public Boolean getFacetMentioins() {
    return facetMentioins;
  }

  public void setFacetMentioins(Boolean facetMentioins) {
    this.facetMentioins = facetMentioins;
  }


  public FeatureDiscoveryModeSection facets(Boolean facets) {
    this.facets = facets;
    return this;
  }

  /**
   * Represents whether facets detection supported for certain language or not
   * @return facets
   */
  @javax.annotation.Nonnull
  public Boolean getFacets() {
    return facets;
  }

  public void setFacets(Boolean facets) {
    this.facets = facets;
  }


  public FeatureDiscoveryModeSection namedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  /**
   * Represents whether named entities extraction supported for certain language or not
   * @return namedEntities
   */
  @javax.annotation.Nonnull
  public Boolean getNamedEntities() {
    return namedEntities;
  }

  public void setNamedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
  }


  public FeatureDiscoveryModeSection queries(Boolean queries) {
    this.queries = queries;
    return this;
  }

  /**
   * Represents whether queries extraction supported for certain language or not
   * @return queries
   */
  @javax.annotation.Nonnull
  public Boolean getQueries() {
    return queries;
  }

  public void setQueries(Boolean queries) {
    this.queries = queries;
  }


  public FeatureDiscoveryModeSection taxonomy(Boolean taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  /**
   * Represents whether taxonomy feature supported for certain language or not
   * @return taxonomy
   */
  @javax.annotation.Nonnull
  public Boolean getTaxonomy() {
    return taxonomy;
  }

  public void setTaxonomy(Boolean taxonomy) {
    this.taxonomy = taxonomy;
  }


  public FeatureDiscoveryModeSection themeMentions(Boolean themeMentions) {
    this.themeMentions = themeMentions;
    return this;
  }

  /**
   * Represents whether mentions of themes supported for certain language or not
   * @return themeMentions
   */
  @javax.annotation.Nonnull
  public Boolean getThemeMentions() {
    return themeMentions;
  }

  public void setThemeMentions(Boolean themeMentions) {
    this.themeMentions = themeMentions;
  }


  public FeatureDiscoveryModeSection themes(Boolean themes) {
    this.themes = themes;
    return this;
  }

  /**
   * Represents whether themes extraction supported for certain language or not
   * @return themes
   */
  @javax.annotation.Nonnull
  public Boolean getThemes() {
    return themes;
  }

  public void setThemes(Boolean themes) {
    this.themes = themes;
  }


  public FeatureDiscoveryModeSection userCategories(Boolean userCategories) {
    this.userCategories = userCategories;
    return this;
  }

  /**
   * Represents whether user categories extraction supported for certain language or not
   * @return userCategories
   */
  @javax.annotation.Nonnull
  public Boolean getUserCategories() {
    return userCategories;
  }

  public void setUserCategories(Boolean userCategories) {
    this.userCategories = userCategories;
  }


  public FeatureDiscoveryModeSection userEntities(Boolean userEntities) {
    this.userEntities = userEntities;
    return this;
  }

  /**
   * Represents whether user entities extraction supported for certain language or not
   * @return userEntities
   */
  @javax.annotation.Nonnull
  public Boolean getUserEntities() {
    return userEntities;
  }

  public void setUserEntities(Boolean userEntities) {
    this.userEntities = userEntities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeatureDiscoveryModeSection featureDiscoveryModeSection = (FeatureDiscoveryModeSection) o;
    return Objects.equals(this.entityMentions, featureDiscoveryModeSection.entityMentions) &&
        Objects.equals(this.facetAttributes, featureDiscoveryModeSection.facetAttributes) &&
        Objects.equals(this.facetMentioins, featureDiscoveryModeSection.facetMentioins) &&
        Objects.equals(this.facets, featureDiscoveryModeSection.facets) &&
        Objects.equals(this.namedEntities, featureDiscoveryModeSection.namedEntities) &&
        Objects.equals(this.queries, featureDiscoveryModeSection.queries) &&
        Objects.equals(this.taxonomy, featureDiscoveryModeSection.taxonomy) &&
        Objects.equals(this.themeMentions, featureDiscoveryModeSection.themeMentions) &&
        Objects.equals(this.themes, featureDiscoveryModeSection.themes) &&
        Objects.equals(this.userCategories, featureDiscoveryModeSection.userCategories) &&
        Objects.equals(this.userEntities, featureDiscoveryModeSection.userEntities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityMentions, facetAttributes, facetMentioins, facets, namedEntities, queries, taxonomy, themeMentions, themes, userCategories, userEntities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeatureDiscoveryModeSection {\n");
    sb.append("    entityMentions: ").append(toIndentedString(entityMentions)).append("\n");
    sb.append("    facetAttributes: ").append(toIndentedString(facetAttributes)).append("\n");
    sb.append("    facetMentioins: ").append(toIndentedString(facetMentioins)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    namedEntities: ").append(toIndentedString(namedEntities)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    themeMentions: ").append(toIndentedString(themeMentions)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    userCategories: ").append(toIndentedString(userCategories)).append("\n");
    sb.append("    userEntities: ").append(toIndentedString(userEntities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_mentions");
    openapiFields.add("facet_attributes");
    openapiFields.add("facet_mentioins");
    openapiFields.add("facets");
    openapiFields.add("named_entities");
    openapiFields.add("queries");
    openapiFields.add("taxonomy");
    openapiFields.add("theme_mentions");
    openapiFields.add("themes");
    openapiFields.add("user_categories");
    openapiFields.add("user_entities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entity_mentions");
    openapiRequiredFields.add("facet_attributes");
    openapiRequiredFields.add("facet_mentioins");
    openapiRequiredFields.add("facets");
    openapiRequiredFields.add("named_entities");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("taxonomy");
    openapiRequiredFields.add("theme_mentions");
    openapiRequiredFields.add("themes");
    openapiRequiredFields.add("user_categories");
    openapiRequiredFields.add("user_entities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeatureDiscoveryModeSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeatureDiscoveryModeSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeatureDiscoveryModeSection is not found in the empty JSON string", FeatureDiscoveryModeSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeatureDiscoveryModeSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeatureDiscoveryModeSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeatureDiscoveryModeSection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeatureDiscoveryModeSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeatureDiscoveryModeSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeatureDiscoveryModeSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeatureDiscoveryModeSection.class));

       return (TypeAdapter<T>) new TypeAdapter<FeatureDiscoveryModeSection>() {
           @Override
           public void write(JsonWriter out, FeatureDiscoveryModeSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeatureDiscoveryModeSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeatureDiscoveryModeSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeatureDiscoveryModeSection
   * @throws IOException if the JSON string is invalid with respect to FeatureDiscoveryModeSection
   */
  public static FeatureDiscoveryModeSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeatureDiscoveryModeSection.class);
  }

  /**
   * Convert an instance of FeatureDiscoveryModeSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

