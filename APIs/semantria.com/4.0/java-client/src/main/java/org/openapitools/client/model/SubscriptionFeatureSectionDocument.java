/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionFeatureSectionDocument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionFeatureSectionDocument {
  public static final String SERIALIZED_NAME_AUTO_CATEGORIES = "auto_categories";
  @SerializedName(SERIALIZED_NAME_AUTO_CATEGORIES)
  private Boolean autoCategories;

  public static final String SERIALIZED_NAME_CONCEPT_TOPICS = "concept_topics";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TOPICS)
  private Boolean conceptTopics;

  public static final String SERIALIZED_NAME_ENTITY_THEMES = "entity_themes";
  @SerializedName(SERIALIZED_NAME_ENTITY_THEMES)
  private Boolean entityThemes;

  public static final String SERIALIZED_NAME_INTENTIONS = "intentions";
  @SerializedName(SERIALIZED_NAME_INTENTIONS)
  private Boolean intentions;

  public static final String SERIALIZED_NAME_LANGUAGE_DETECTION = "language_detection";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DETECTION)
  private Boolean languageDetection;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private Boolean mentions;

  public static final String SERIALIZED_NAME_MODEL_SENTIMENT = "model_sentiment";
  @SerializedName(SERIALIZED_NAME_MODEL_SENTIMENT)
  private Boolean modelSentiment;

  public static final String SERIALIZED_NAME_NAMED_ENTITIES = "named_entities";
  @SerializedName(SERIALIZED_NAME_NAMED_ENTITIES)
  private Boolean namedEntities;

  public static final String SERIALIZED_NAME_NAMED_RELATIONS = "named_relations";
  @SerializedName(SERIALIZED_NAME_NAMED_RELATIONS)
  private Boolean namedRelations;

  public static final String SERIALIZED_NAME_OPINIONS = "opinions";
  @SerializedName(SERIALIZED_NAME_OPINIONS)
  private Boolean opinions;

  public static final String SERIALIZED_NAME_PHRASES_DETECTION = "phrases_detection";
  @SerializedName(SERIALIZED_NAME_PHRASES_DETECTION)
  private Boolean phrasesDetection;

  public static final String SERIALIZED_NAME_POS_TAGGING = "pos_tagging";
  @SerializedName(SERIALIZED_NAME_POS_TAGGING)
  private Boolean posTagging;

  public static final String SERIALIZED_NAME_QUERY_TOPICS = "query_topics";
  @SerializedName(SERIALIZED_NAME_QUERY_TOPICS)
  private Boolean queryTopics;

  public static final String SERIALIZED_NAME_SENTIMENT_PHRASES = "sentiment_phrases";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_PHRASES)
  private Boolean sentimentPhrases;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private Boolean summary;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private Boolean themes;

  public static final String SERIALIZED_NAME_USER_ENTITIES = "user_entities";
  @SerializedName(SERIALIZED_NAME_USER_ENTITIES)
  private Boolean userEntities;

  public static final String SERIALIZED_NAME_USER_RELATIONS = "user_relations";
  @SerializedName(SERIALIZED_NAME_USER_RELATIONS)
  private Boolean userRelations;

  public SubscriptionFeatureSectionDocument() {
  }

  public SubscriptionFeatureSectionDocument autoCategories(Boolean autoCategories) {
    this.autoCategories = autoCategories;
    return this;
  }

  /**
   * Indicates whether auto categories feature is allowed or not
   * @return autoCategories
   */
  @javax.annotation.Nonnull
  public Boolean getAutoCategories() {
    return autoCategories;
  }

  public void setAutoCategories(Boolean autoCategories) {
    this.autoCategories = autoCategories;
  }


  public SubscriptionFeatureSectionDocument conceptTopics(Boolean conceptTopics) {
    this.conceptTopics = conceptTopics;
    return this;
  }

  /**
   * Indicates whether concept topics are allowed or not
   * @return conceptTopics
   */
  @javax.annotation.Nonnull
  public Boolean getConceptTopics() {
    return conceptTopics;
  }

  public void setConceptTopics(Boolean conceptTopics) {
    this.conceptTopics = conceptTopics;
  }


  public SubscriptionFeatureSectionDocument entityThemes(Boolean entityThemes) {
    this.entityThemes = entityThemes;
    return this;
  }

  /**
   * Indicates whether entity themes feature is allowed or not
   * @return entityThemes
   */
  @javax.annotation.Nonnull
  public Boolean getEntityThemes() {
    return entityThemes;
  }

  public void setEntityThemes(Boolean entityThemes) {
    this.entityThemes = entityThemes;
  }


  public SubscriptionFeatureSectionDocument intentions(Boolean intentions) {
    this.intentions = intentions;
    return this;
  }

  /**
   * Indicates whether intentions feature is allowed or not.
   * @return intentions
   */
  @javax.annotation.Nonnull
  public Boolean getIntentions() {
    return intentions;
  }

  public void setIntentions(Boolean intentions) {
    this.intentions = intentions;
  }


  public SubscriptionFeatureSectionDocument languageDetection(Boolean languageDetection) {
    this.languageDetection = languageDetection;
    return this;
  }

  /**
   * Indicates whether language detection feature is allowed or not
   * @return languageDetection
   */
  @javax.annotation.Nonnull
  public Boolean getLanguageDetection() {
    return languageDetection;
  }

  public void setLanguageDetection(Boolean languageDetection) {
    this.languageDetection = languageDetection;
  }


  public SubscriptionFeatureSectionDocument mentions(Boolean mentions) {
    this.mentions = mentions;
    return this;
  }

  /**
   * Indicates whether mentions for entities and themes are allowed or not
   * @return mentions
   */
  @javax.annotation.Nonnull
  public Boolean getMentions() {
    return mentions;
  }

  public void setMentions(Boolean mentions) {
    this.mentions = mentions;
  }


  public SubscriptionFeatureSectionDocument modelSentiment(Boolean modelSentiment) {
    this.modelSentiment = modelSentiment;
    return this;
  }

  /**
   * Indicates whether model-based sentiment feature is allowed or not
   * @return modelSentiment
   */
  @javax.annotation.Nonnull
  public Boolean getModelSentiment() {
    return modelSentiment;
  }

  public void setModelSentiment(Boolean modelSentiment) {
    this.modelSentiment = modelSentiment;
  }


  public SubscriptionFeatureSectionDocument namedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  /**
   * Indicates whether named entities feature is allowed or not
   * @return namedEntities
   */
  @javax.annotation.Nonnull
  public Boolean getNamedEntities() {
    return namedEntities;
  }

  public void setNamedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
  }


  public SubscriptionFeatureSectionDocument namedRelations(Boolean namedRelations) {
    this.namedRelations = namedRelations;
    return this;
  }

  /**
   * Indicates whether relations for named entities are allowed or not
   * @return namedRelations
   */
  @javax.annotation.Nonnull
  public Boolean getNamedRelations() {
    return namedRelations;
  }

  public void setNamedRelations(Boolean namedRelations) {
    this.namedRelations = namedRelations;
  }


  public SubscriptionFeatureSectionDocument opinions(Boolean opinions) {
    this.opinions = opinions;
    return this;
  }

  /**
   * Indicates whether opinions feature is allowed or not
   * @return opinions
   */
  @javax.annotation.Nonnull
  public Boolean getOpinions() {
    return opinions;
  }

  public void setOpinions(Boolean opinions) {
    this.opinions = opinions;
  }


  public SubscriptionFeatureSectionDocument phrasesDetection(Boolean phrasesDetection) {
    this.phrasesDetection = phrasesDetection;
    return this;
  }

  /**
   * Indicates whether possible phrases detection feature is allowed or not
   * @return phrasesDetection
   */
  @javax.annotation.Nonnull
  public Boolean getPhrasesDetection() {
    return phrasesDetection;
  }

  public void setPhrasesDetection(Boolean phrasesDetection) {
    this.phrasesDetection = phrasesDetection;
  }


  public SubscriptionFeatureSectionDocument posTagging(Boolean posTagging) {
    this.posTagging = posTagging;
    return this;
  }

  /**
   * Indicates whether part of speech tagging feature is allowed or not
   * @return posTagging
   */
  @javax.annotation.Nonnull
  public Boolean getPosTagging() {
    return posTagging;
  }

  public void setPosTagging(Boolean posTagging) {
    this.posTagging = posTagging;
  }


  public SubscriptionFeatureSectionDocument queryTopics(Boolean queryTopics) {
    this.queryTopics = queryTopics;
    return this;
  }

  /**
   * Indicates whether query defined topics are allowed or not
   * @return queryTopics
   */
  @javax.annotation.Nonnull
  public Boolean getQueryTopics() {
    return queryTopics;
  }

  public void setQueryTopics(Boolean queryTopics) {
    this.queryTopics = queryTopics;
  }


  public SubscriptionFeatureSectionDocument sentimentPhrases(Boolean sentimentPhrases) {
    this.sentimentPhrases = sentimentPhrases;
    return this;
  }

  /**
   * Indicates whether sentiment-bearing phrases output is allowed or not
   * @return sentimentPhrases
   */
  @javax.annotation.Nonnull
  public Boolean getSentimentPhrases() {
    return sentimentPhrases;
  }

  public void setSentimentPhrases(Boolean sentimentPhrases) {
    this.sentimentPhrases = sentimentPhrases;
  }


  public SubscriptionFeatureSectionDocument summary(Boolean summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Indicates whether summarization feature is allowed or not
   * @return summary
   */
  @javax.annotation.Nonnull
  public Boolean getSummary() {
    return summary;
  }

  public void setSummary(Boolean summary) {
    this.summary = summary;
  }


  public SubscriptionFeatureSectionDocument themes(Boolean themes) {
    this.themes = themes;
    return this;
  }

  /**
   * Indicates whether document themes feature is allowed or not
   * @return themes
   */
  @javax.annotation.Nonnull
  public Boolean getThemes() {
    return themes;
  }

  public void setThemes(Boolean themes) {
    this.themes = themes;
  }


  public SubscriptionFeatureSectionDocument userEntities(Boolean userEntities) {
    this.userEntities = userEntities;
    return this;
  }

  /**
   * Indicates whether user entities feature is allowed or not
   * @return userEntities
   */
  @javax.annotation.Nonnull
  public Boolean getUserEntities() {
    return userEntities;
  }

  public void setUserEntities(Boolean userEntities) {
    this.userEntities = userEntities;
  }


  public SubscriptionFeatureSectionDocument userRelations(Boolean userRelations) {
    this.userRelations = userRelations;
    return this;
  }

  /**
   * Indicates whether relations for user entities are allowed or not
   * @return userRelations
   */
  @javax.annotation.Nonnull
  public Boolean getUserRelations() {
    return userRelations;
  }

  public void setUserRelations(Boolean userRelations) {
    this.userRelations = userRelations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionFeatureSectionDocument subscriptionFeatureSectionDocument = (SubscriptionFeatureSectionDocument) o;
    return Objects.equals(this.autoCategories, subscriptionFeatureSectionDocument.autoCategories) &&
        Objects.equals(this.conceptTopics, subscriptionFeatureSectionDocument.conceptTopics) &&
        Objects.equals(this.entityThemes, subscriptionFeatureSectionDocument.entityThemes) &&
        Objects.equals(this.intentions, subscriptionFeatureSectionDocument.intentions) &&
        Objects.equals(this.languageDetection, subscriptionFeatureSectionDocument.languageDetection) &&
        Objects.equals(this.mentions, subscriptionFeatureSectionDocument.mentions) &&
        Objects.equals(this.modelSentiment, subscriptionFeatureSectionDocument.modelSentiment) &&
        Objects.equals(this.namedEntities, subscriptionFeatureSectionDocument.namedEntities) &&
        Objects.equals(this.namedRelations, subscriptionFeatureSectionDocument.namedRelations) &&
        Objects.equals(this.opinions, subscriptionFeatureSectionDocument.opinions) &&
        Objects.equals(this.phrasesDetection, subscriptionFeatureSectionDocument.phrasesDetection) &&
        Objects.equals(this.posTagging, subscriptionFeatureSectionDocument.posTagging) &&
        Objects.equals(this.queryTopics, subscriptionFeatureSectionDocument.queryTopics) &&
        Objects.equals(this.sentimentPhrases, subscriptionFeatureSectionDocument.sentimentPhrases) &&
        Objects.equals(this.summary, subscriptionFeatureSectionDocument.summary) &&
        Objects.equals(this.themes, subscriptionFeatureSectionDocument.themes) &&
        Objects.equals(this.userEntities, subscriptionFeatureSectionDocument.userEntities) &&
        Objects.equals(this.userRelations, subscriptionFeatureSectionDocument.userRelations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCategories, conceptTopics, entityThemes, intentions, languageDetection, mentions, modelSentiment, namedEntities, namedRelations, opinions, phrasesDetection, posTagging, queryTopics, sentimentPhrases, summary, themes, userEntities, userRelations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionFeatureSectionDocument {\n");
    sb.append("    autoCategories: ").append(toIndentedString(autoCategories)).append("\n");
    sb.append("    conceptTopics: ").append(toIndentedString(conceptTopics)).append("\n");
    sb.append("    entityThemes: ").append(toIndentedString(entityThemes)).append("\n");
    sb.append("    intentions: ").append(toIndentedString(intentions)).append("\n");
    sb.append("    languageDetection: ").append(toIndentedString(languageDetection)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    modelSentiment: ").append(toIndentedString(modelSentiment)).append("\n");
    sb.append("    namedEntities: ").append(toIndentedString(namedEntities)).append("\n");
    sb.append("    namedRelations: ").append(toIndentedString(namedRelations)).append("\n");
    sb.append("    opinions: ").append(toIndentedString(opinions)).append("\n");
    sb.append("    phrasesDetection: ").append(toIndentedString(phrasesDetection)).append("\n");
    sb.append("    posTagging: ").append(toIndentedString(posTagging)).append("\n");
    sb.append("    queryTopics: ").append(toIndentedString(queryTopics)).append("\n");
    sb.append("    sentimentPhrases: ").append(toIndentedString(sentimentPhrases)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    userEntities: ").append(toIndentedString(userEntities)).append("\n");
    sb.append("    userRelations: ").append(toIndentedString(userRelations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_categories");
    openapiFields.add("concept_topics");
    openapiFields.add("entity_themes");
    openapiFields.add("intentions");
    openapiFields.add("language_detection");
    openapiFields.add("mentions");
    openapiFields.add("model_sentiment");
    openapiFields.add("named_entities");
    openapiFields.add("named_relations");
    openapiFields.add("opinions");
    openapiFields.add("phrases_detection");
    openapiFields.add("pos_tagging");
    openapiFields.add("query_topics");
    openapiFields.add("sentiment_phrases");
    openapiFields.add("summary");
    openapiFields.add("themes");
    openapiFields.add("user_entities");
    openapiFields.add("user_relations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_categories");
    openapiRequiredFields.add("concept_topics");
    openapiRequiredFields.add("entity_themes");
    openapiRequiredFields.add("intentions");
    openapiRequiredFields.add("language_detection");
    openapiRequiredFields.add("mentions");
    openapiRequiredFields.add("model_sentiment");
    openapiRequiredFields.add("named_entities");
    openapiRequiredFields.add("named_relations");
    openapiRequiredFields.add("opinions");
    openapiRequiredFields.add("phrases_detection");
    openapiRequiredFields.add("pos_tagging");
    openapiRequiredFields.add("query_topics");
    openapiRequiredFields.add("sentiment_phrases");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("themes");
    openapiRequiredFields.add("user_entities");
    openapiRequiredFields.add("user_relations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionFeatureSectionDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionFeatureSectionDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionFeatureSectionDocument is not found in the empty JSON string", SubscriptionFeatureSectionDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionFeatureSectionDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionFeatureSectionDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionFeatureSectionDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionFeatureSectionDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionFeatureSectionDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionFeatureSectionDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionFeatureSectionDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionFeatureSectionDocument>() {
           @Override
           public void write(JsonWriter out, SubscriptionFeatureSectionDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionFeatureSectionDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionFeatureSectionDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionFeatureSectionDocument
   * @throws IOException if the JSON string is invalid with respect to SubscriptionFeatureSectionDocument
   */
  public static SubscriptionFeatureSectionDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionFeatureSectionDocument.class);
  }

  /**
   * Convert an instance of SubscriptionFeatureSectionDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

