/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelSentiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelSentiment {
  public static final String SERIALIZED_NAME_MIXED_SCORE = "mixed_score";
  @SerializedName(SERIALIZED_NAME_MIXED_SCORE)
  private Double mixedScore;

  public static final String SERIALIZED_NAME_MODEL_NAME = "model_name";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_NEGATIVE_SCORE = "negative_score";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_SCORE)
  private Double negativeScore;

  public static final String SERIALIZED_NAME_NEUTRAL_SCORE = "neutral_score";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_SCORE)
  private Double neutralScore;

  public static final String SERIALIZED_NAME_POSITIVE_SCORE = "positive_score";
  @SerializedName(SERIALIZED_NAME_POSITIVE_SCORE)
  private Double positiveScore;

  /**
   * Verbal representation of sentiment score that matches the best on the document. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   */
  @JsonAdapter(SentimentPolarityEnum.Adapter.class)
  public enum SentimentPolarityEnum {
    NEGATIVE("negative"),
    
    POSITIVE("positive"),
    
    NEUTRAL("neutral");

    private String value;

    SentimentPolarityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentPolarityEnum fromValue(String value) {
      for (SentimentPolarityEnum b : SentimentPolarityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentPolarityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentPolarityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentPolarityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentPolarityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SentimentPolarityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT_POLARITY = "sentiment_polarity";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_POLARITY)
  private SentimentPolarityEnum sentimentPolarity;

  public ModelSentiment() {
  }

  public ModelSentiment mixedScore(Double mixedScore) {
    this.mixedScore = mixedScore;
    return this;
  }

  /**
   * Mixed sentiment score associated with the document
   * @return mixedScore
   */
  @javax.annotation.Nonnull
  public Double getMixedScore() {
    return mixedScore;
  }

  public void setMixedScore(Double mixedScore) {
    this.mixedScore = mixedScore;
  }


  public ModelSentiment modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Name of the sentiment model used for scoring
   * @return modelName
   */
  @javax.annotation.Nonnull
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public ModelSentiment negativeScore(Double negativeScore) {
    this.negativeScore = negativeScore;
    return this;
  }

  /**
   * Negative (probable negative score) sentiment score associated with the document
   * @return negativeScore
   */
  @javax.annotation.Nonnull
  public Double getNegativeScore() {
    return negativeScore;
  }

  public void setNegativeScore(Double negativeScore) {
    this.negativeScore = negativeScore;
  }


  public ModelSentiment neutralScore(Double neutralScore) {
    this.neutralScore = neutralScore;
    return this;
  }

  /**
   * Neutral (probable neutral score) sentiment score associated with the document
   * @return neutralScore
   */
  @javax.annotation.Nonnull
  public Double getNeutralScore() {
    return neutralScore;
  }

  public void setNeutralScore(Double neutralScore) {
    this.neutralScore = neutralScore;
  }


  public ModelSentiment positiveScore(Double positiveScore) {
    this.positiveScore = positiveScore;
    return this;
  }

  /**
   * Positive (probable positive score) sentiment score associated with the document
   * @return positiveScore
   */
  @javax.annotation.Nonnull
  public Double getPositiveScore() {
    return positiveScore;
  }

  public void setPositiveScore(Double positiveScore) {
    this.positiveScore = positiveScore;
  }


  public ModelSentiment sentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
    return this;
  }

  /**
   * Verbal representation of sentiment score that matches the best on the document. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   * @return sentimentPolarity
   */
  @javax.annotation.Nonnull
  public SentimentPolarityEnum getSentimentPolarity() {
    return sentimentPolarity;
  }

  public void setSentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelSentiment modelSentiment = (ModelSentiment) o;
    return Objects.equals(this.mixedScore, modelSentiment.mixedScore) &&
        Objects.equals(this.modelName, modelSentiment.modelName) &&
        Objects.equals(this.negativeScore, modelSentiment.negativeScore) &&
        Objects.equals(this.neutralScore, modelSentiment.neutralScore) &&
        Objects.equals(this.positiveScore, modelSentiment.positiveScore) &&
        Objects.equals(this.sentimentPolarity, modelSentiment.sentimentPolarity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mixedScore, modelName, negativeScore, neutralScore, positiveScore, sentimentPolarity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelSentiment {\n");
    sb.append("    mixedScore: ").append(toIndentedString(mixedScore)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    negativeScore: ").append(toIndentedString(negativeScore)).append("\n");
    sb.append("    neutralScore: ").append(toIndentedString(neutralScore)).append("\n");
    sb.append("    positiveScore: ").append(toIndentedString(positiveScore)).append("\n");
    sb.append("    sentimentPolarity: ").append(toIndentedString(sentimentPolarity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mixed_score");
    openapiFields.add("model_name");
    openapiFields.add("negative_score");
    openapiFields.add("neutral_score");
    openapiFields.add("positive_score");
    openapiFields.add("sentiment_polarity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mixed_score");
    openapiRequiredFields.add("model_name");
    openapiRequiredFields.add("negative_score");
    openapiRequiredFields.add("neutral_score");
    openapiRequiredFields.add("positive_score");
    openapiRequiredFields.add("sentiment_polarity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelSentiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelSentiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelSentiment is not found in the empty JSON string", ModelSentiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelSentiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelSentiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelSentiment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_name").toString()));
      }
      if (!jsonObj.get("sentiment_polarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment_polarity").toString()));
      }
      // validate the required field `sentiment_polarity`
      SentimentPolarityEnum.validateJsonElement(jsonObj.get("sentiment_polarity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelSentiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelSentiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelSentiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelSentiment.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelSentiment>() {
           @Override
           public void write(JsonWriter out, ModelSentiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelSentiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelSentiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelSentiment
   * @throws IOException if the JSON string is invalid with respect to ModelSentiment
   */
  public static ModelSentiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelSentiment.class);
  }

  /**
   * Convert an instance of ModelSentiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

