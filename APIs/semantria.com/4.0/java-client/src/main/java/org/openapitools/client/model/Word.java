/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Word
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Word {
  public static final String SERIALIZED_NAME_IS_NEGATED = "is_negated";
  @SerializedName(SERIALIZED_NAME_IS_NEGATED)
  private Boolean isNegated;

  public static final String SERIALIZED_NAME_SENTIMENT_SCORE = "sentiment_score";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_SCORE)
  private Double sentimentScore;

  public static final String SERIALIZED_NAME_STEMMED = "stemmed";
  @SerializedName(SERIALIZED_NAME_STEMMED)
  private String stemmed;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Word() {
  }

  public Word isNegated(Boolean isNegated) {
    this.isNegated = isNegated;
    return this;
  }

  /**
   * A flag indicating if the token is or is part of a sentiment inverting construction
   * @return isNegated
   */
  @javax.annotation.Nonnull
  public Boolean getIsNegated() {
    return isNegated;
  }

  public void setIsNegated(Boolean isNegated) {
    this.isNegated = isNegated;
  }


  public Word sentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

  /**
   * The sentiment score associated with the word
   * @return sentimentScore
   */
  @javax.annotation.Nonnull
  public Double getSentimentScore() {
    return sentimentScore;
  }

  public void setSentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  public Word stemmed(String stemmed) {
    this.stemmed = stemmed;
    return this;
  }

  /**
   * The stemmed form of the word
   * @return stemmed
   */
  @javax.annotation.Nonnull
  public String getStemmed() {
    return stemmed;
  }

  public void setStemmed(String stemmed) {
    this.stemmed = stemmed;
  }


  public Word tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * POS marker of the word
   * @return tag
   */
  @javax.annotation.Nonnull
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public Word title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The original word representation in text
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Word type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Verbal representation of part of speech in addition to certain tag
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Word word = (Word) o;
    return Objects.equals(this.isNegated, word.isNegated) &&
        Objects.equals(this.sentimentScore, word.sentimentScore) &&
        Objects.equals(this.stemmed, word.stemmed) &&
        Objects.equals(this.tag, word.tag) &&
        Objects.equals(this.title, word.title) &&
        Objects.equals(this.type, word.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isNegated, sentimentScore, stemmed, tag, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Word {\n");
    sb.append("    isNegated: ").append(toIndentedString(isNegated)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("    stemmed: ").append(toIndentedString(stemmed)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_negated");
    openapiFields.add("sentiment_score");
    openapiFields.add("stemmed");
    openapiFields.add("tag");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_negated");
    openapiRequiredFields.add("sentiment_score");
    openapiRequiredFields.add("stemmed");
    openapiRequiredFields.add("tag");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Word
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Word.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Word is not found in the empty JSON string", Word.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Word.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Word` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Word.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("stemmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stemmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stemmed").toString()));
      }
      if (!jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Word.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Word' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Word> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Word.class));

       return (TypeAdapter<T>) new TypeAdapter<Word>() {
           @Override
           public void write(JsonWriter out, Word value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Word read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Word given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Word
   * @throws IOException if the JSON string is invalid with respect to Word
   */
  public static Word fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Word.class);
  }

  /**
   * Convert an instance of Word to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

