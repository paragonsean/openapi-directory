/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoCategory;
import org.openapitools.client.model.Details;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.Intention;
import org.openapitools.client.model.ModelSentiment;
import org.openapitools.client.model.Opinion;
import org.openapitools.client.model.Phrase;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.Theme;
import org.openapitools.client.model.Topic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentAnalyticData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentAnalyticData {
  public static final String SERIALIZED_NAME_AUTO_CATEGORIES = "auto_categories";
  @SerializedName(SERIALIZED_NAME_AUTO_CATEGORIES)
  private List<AutoCategory> autoCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIG_ID = "config_id";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private String configId;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<Details> details = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<Entity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTENTIONS = "intentions";
  @SerializedName(SERIALIZED_NAME_INTENTIONS)
  private List<Intention> intentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGE_SCORE = "language_score";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_SCORE)
  private Double languageScore;

  public static final String SERIALIZED_NAME_MODEL_SENTIMENT = "model_sentiment";
  @SerializedName(SERIALIZED_NAME_MODEL_SENTIMENT)
  private ModelSentiment modelSentiment;

  public static final String SERIALIZED_NAME_OPINIONS = "opinions";
  @SerializedName(SERIALIZED_NAME_OPINIONS)
  private List<Opinion> opinions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHRASES = "phrases";
  @SerializedName(SERIALIZED_NAME_PHRASES)
  private List<Phrase> phrases = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private List<Relation> relations = new ArrayList<>();

  /**
   * Verbal representation of sentiment score. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   */
  @JsonAdapter(SentimentPolarityEnum.Adapter.class)
  public enum SentimentPolarityEnum {
    NEGATIVE("negative"),
    
    POSITIVE("positive"),
    
    NEUTRAL("neutral");

    private String value;

    SentimentPolarityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentPolarityEnum fromValue(String value) {
      for (SentimentPolarityEnum b : SentimentPolarityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentPolarityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentPolarityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentPolarityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentPolarityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SentimentPolarityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT_POLARITY = "sentiment_polarity";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_POLARITY)
  private SentimentPolarityEnum sentimentPolarity;

  public static final String SERIALIZED_NAME_SENTIMENT_SCORE = "sentiment_score";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_SCORE)
  private Double sentimentScore;

  public static final String SERIALIZED_NAME_SOURCE_TEXT = "source_text";
  @SerializedName(SERIALIZED_NAME_SOURCE_TEXT)
  private String sourceText;

  /**
   * Status of the document
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("queued"),
    
    PROCESSED("processed"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private List<Topic> taxonomy = new ArrayList<>();

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<Theme> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Topic> topics = new ArrayList<>();

  public DocumentAnalyticData() {
  }

  public DocumentAnalyticData autoCategories(List<AutoCategory> autoCategories) {
    this.autoCategories = autoCategories;
    return this;
  }

  public DocumentAnalyticData addAutoCategoriesItem(AutoCategory autoCategoriesItem) {
    if (this.autoCategories == null) {
      this.autoCategories = new ArrayList<>();
    }
    this.autoCategories.add(autoCategoriesItem);
    return this;
  }

  /**
   * Auto-generated categories applicable for the document
   * @return autoCategories
   */
  @javax.annotation.Nonnull
  public List<AutoCategory> getAutoCategories() {
    return autoCategories;
  }

  public void setAutoCategories(List<AutoCategory> autoCategories) {
    this.autoCategories = autoCategories;
  }


  public DocumentAnalyticData configId(String configId) {
    this.configId = configId;
    return this;
  }

  /**
   * Unique configuration identifier. Usually 36 alphanumeric characters
   * @return configId
   */
  @javax.annotation.Nonnull
  public String getConfigId() {
    return configId;
  }

  public void setConfigId(String configId) {
    this.configId = configId;
  }


  public DocumentAnalyticData details(List<Details> details) {
    this.details = details;
    return this;
  }

  public DocumentAnalyticData addDetailsItem(Details detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Returns sentences from the original document with POS tags within
   * @return details
   */
  @javax.annotation.Nonnull
  public List<Details> getDetails() {
    return details;
  }

  public void setDetails(List<Details> details) {
    this.details = details;
  }


  public DocumentAnalyticData entities(List<Entity> entities) {
    this.entities = entities;
    return this;
  }

  public DocumentAnalyticData addEntitiesItem(Entity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Returns the named entities and user defined entities from the text
   * @return entities
   */
  @javax.annotation.Nonnull
  public List<Entity> getEntities() {
    return entities;
  }

  public void setEntities(List<Entity> entities) {
    this.entities = entities;
  }


  public DocumentAnalyticData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique document identifier. Can be up to 36 alphanumeric characters
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DocumentAnalyticData intentions(List<Intention> intentions) {
    this.intentions = intentions;
    return this;
  }

  public DocumentAnalyticData addIntentionsItem(Intention intentionsItem) {
    if (this.intentions == null) {
      this.intentions = new ArrayList<>();
    }
    this.intentions.add(intentionsItem);
    return this;
  }

  /**
   * Returns intentions list detected by the engine
   * @return intentions
   */
  @javax.annotation.Nonnull
  public List<Intention> getIntentions() {
    return intentions;
  }

  public void setIntentions(List<Intention> intentions) {
    this.intentions = intentions;
  }


  public DocumentAnalyticData jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Specific marker of a job document belongs to, can be used for documents ordering on client side
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DocumentAnalyticData language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Determined language of source text
   * @return language
   */
  @javax.annotation.Nonnull
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public DocumentAnalyticData languageScore(Double languageScore) {
    this.languageScore = languageScore;
    return this;
  }

  /**
   * The percentage score of the best match of language among detected languages
   * @return languageScore
   */
  @javax.annotation.Nonnull
  public Double getLanguageScore() {
    return languageScore;
  }

  public void setLanguageScore(Double languageScore) {
    this.languageScore = languageScore;
  }


  public DocumentAnalyticData modelSentiment(ModelSentiment modelSentiment) {
    this.modelSentiment = modelSentiment;
    return this;
  }

  /**
   * Get modelSentiment
   * @return modelSentiment
   */
  @javax.annotation.Nonnull
  public ModelSentiment getModelSentiment() {
    return modelSentiment;
  }

  public void setModelSentiment(ModelSentiment modelSentiment) {
    this.modelSentiment = modelSentiment;
  }


  public DocumentAnalyticData opinions(List<Opinion> opinions) {
    this.opinions = opinions;
    return this;
  }

  public DocumentAnalyticData addOpinionsItem(Opinion opinionsItem) {
    if (this.opinions == null) {
      this.opinions = new ArrayList<>();
    }
    this.opinions.add(opinionsItem);
    return this;
  }

  /**
   * Returns the list of opinions extracted from the source text
   * @return opinions
   */
  @javax.annotation.Nonnull
  public List<Opinion> getOpinions() {
    return opinions;
  }

  public void setOpinions(List<Opinion> opinions) {
    this.opinions = opinions;
  }


  public DocumentAnalyticData phrases(List<Phrase> phrases) {
    this.phrases = phrases;
    return this;
  }

  public DocumentAnalyticData addPhrasesItem(Phrase phrasesItem) {
    if (this.phrases == null) {
      this.phrases = new ArrayList<>();
    }
    this.phrases.add(phrasesItem);
    return this;
  }

  /**
   * Returns sentiment-bearing phrases of the document
   * @return phrases
   */
  @javax.annotation.Nonnull
  public List<Phrase> getPhrases() {
    return phrases;
  }

  public void setPhrases(List<Phrase> phrases) {
    this.phrases = phrases;
  }


  public DocumentAnalyticData relations(List<Relation> relations) {
    this.relations = relations;
    return this;
  }

  public DocumentAnalyticData addRelationsItem(Relation relationsItem) {
    if (this.relations == null) {
      this.relations = new ArrayList<>();
    }
    this.relations.add(relationsItem);
    return this;
  }

  /**
   * Returns relations which represent a connection between one or more Entity objects
   * @return relations
   */
  @javax.annotation.Nonnull
  public List<Relation> getRelations() {
    return relations;
  }

  public void setRelations(List<Relation> relations) {
    this.relations = relations;
  }


  public DocumentAnalyticData sentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
    return this;
  }

  /**
   * Verbal representation of sentiment score. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   * @return sentimentPolarity
   */
  @javax.annotation.Nonnull
  public SentimentPolarityEnum getSentimentPolarity() {
    return sentimentPolarity;
  }

  public void setSentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
  }


  public DocumentAnalyticData sentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

  /**
   * A sentiment analysis of the document text
   * @return sentimentScore
   */
  @javax.annotation.Nonnull
  public Double getSentimentScore() {
    return sentimentScore;
  }

  public void setSentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  public DocumentAnalyticData sourceText(String sourceText) {
    this.sourceText = sourceText;
    return this;
  }

  /**
   * Original source text passed by client for this document
   * @return sourceText
   */
  @javax.annotation.Nonnull
  public String getSourceText() {
    return sourceText;
  }

  public void setSourceText(String sourceText) {
    this.sourceText = sourceText;
  }


  public DocumentAnalyticData status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the document
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DocumentAnalyticData summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * A summary of the document text
   * @return summary
   */
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public DocumentAnalyticData taxonomy(List<Topic> taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  public DocumentAnalyticData addTaxonomyItem(Topic taxonomyItem) {
    if (this.taxonomy == null) {
      this.taxonomy = new ArrayList<>();
    }
    this.taxonomy.add(taxonomyItem);
    return this;
  }

  /**
   * Returns the taxonomy determined for the text
   * @return taxonomy
   */
  @javax.annotation.Nonnull
  public List<Topic> getTaxonomy() {
    return taxonomy;
  }

  public void setTaxonomy(List<Topic> taxonomy) {
    this.taxonomy = taxonomy;
  }


  public DocumentAnalyticData themes(List<Theme> themes) {
    this.themes = themes;
    return this;
  }

  public DocumentAnalyticData addThemesItem(Theme themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * Returns themes of the document
   * @return themes
   */
  @javax.annotation.Nonnull
  public List<Theme> getThemes() {
    return themes;
  }

  public void setThemes(List<Theme> themes) {
    this.themes = themes;
  }


  public DocumentAnalyticData topics(List<Topic> topics) {
    this.topics = topics;
    return this;
  }

  public DocumentAnalyticData addTopicsItem(Topic topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * Returns the concept and query defined topics determined for the text
   * @return topics
   */
  @javax.annotation.Nonnull
  public List<Topic> getTopics() {
    return topics;
  }

  public void setTopics(List<Topic> topics) {
    this.topics = topics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentAnalyticData documentAnalyticData = (DocumentAnalyticData) o;
    return Objects.equals(this.autoCategories, documentAnalyticData.autoCategories) &&
        Objects.equals(this.configId, documentAnalyticData.configId) &&
        Objects.equals(this.details, documentAnalyticData.details) &&
        Objects.equals(this.entities, documentAnalyticData.entities) &&
        Objects.equals(this.id, documentAnalyticData.id) &&
        Objects.equals(this.intentions, documentAnalyticData.intentions) &&
        Objects.equals(this.jobId, documentAnalyticData.jobId) &&
        Objects.equals(this.language, documentAnalyticData.language) &&
        Objects.equals(this.languageScore, documentAnalyticData.languageScore) &&
        Objects.equals(this.modelSentiment, documentAnalyticData.modelSentiment) &&
        Objects.equals(this.opinions, documentAnalyticData.opinions) &&
        Objects.equals(this.phrases, documentAnalyticData.phrases) &&
        Objects.equals(this.relations, documentAnalyticData.relations) &&
        Objects.equals(this.sentimentPolarity, documentAnalyticData.sentimentPolarity) &&
        Objects.equals(this.sentimentScore, documentAnalyticData.sentimentScore) &&
        Objects.equals(this.sourceText, documentAnalyticData.sourceText) &&
        Objects.equals(this.status, documentAnalyticData.status) &&
        Objects.equals(this.summary, documentAnalyticData.summary) &&
        Objects.equals(this.taxonomy, documentAnalyticData.taxonomy) &&
        Objects.equals(this.themes, documentAnalyticData.themes) &&
        Objects.equals(this.topics, documentAnalyticData.topics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCategories, configId, details, entities, id, intentions, jobId, language, languageScore, modelSentiment, opinions, phrases, relations, sentimentPolarity, sentimentScore, sourceText, status, summary, taxonomy, themes, topics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentAnalyticData {\n");
    sb.append("    autoCategories: ").append(toIndentedString(autoCategories)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intentions: ").append(toIndentedString(intentions)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languageScore: ").append(toIndentedString(languageScore)).append("\n");
    sb.append("    modelSentiment: ").append(toIndentedString(modelSentiment)).append("\n");
    sb.append("    opinions: ").append(toIndentedString(opinions)).append("\n");
    sb.append("    phrases: ").append(toIndentedString(phrases)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    sentimentPolarity: ").append(toIndentedString(sentimentPolarity)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("    sourceText: ").append(toIndentedString(sourceText)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_categories");
    openapiFields.add("config_id");
    openapiFields.add("details");
    openapiFields.add("entities");
    openapiFields.add("id");
    openapiFields.add("intentions");
    openapiFields.add("job_id");
    openapiFields.add("language");
    openapiFields.add("language_score");
    openapiFields.add("model_sentiment");
    openapiFields.add("opinions");
    openapiFields.add("phrases");
    openapiFields.add("relations");
    openapiFields.add("sentiment_polarity");
    openapiFields.add("sentiment_score");
    openapiFields.add("source_text");
    openapiFields.add("status");
    openapiFields.add("summary");
    openapiFields.add("taxonomy");
    openapiFields.add("themes");
    openapiFields.add("topics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_categories");
    openapiRequiredFields.add("config_id");
    openapiRequiredFields.add("details");
    openapiRequiredFields.add("entities");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("intentions");
    openapiRequiredFields.add("job_id");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("language_score");
    openapiRequiredFields.add("model_sentiment");
    openapiRequiredFields.add("opinions");
    openapiRequiredFields.add("phrases");
    openapiRequiredFields.add("relations");
    openapiRequiredFields.add("sentiment_polarity");
    openapiRequiredFields.add("sentiment_score");
    openapiRequiredFields.add("source_text");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("taxonomy");
    openapiRequiredFields.add("themes");
    openapiRequiredFields.add("topics");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentAnalyticData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentAnalyticData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentAnalyticData is not found in the empty JSON string", DocumentAnalyticData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentAnalyticData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentAnalyticData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentAnalyticData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("auto_categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_categories` to be an array in the JSON string but got `%s`", jsonObj.get("auto_categories").toString()));
      }

      JsonArray jsonArrayautoCategories = jsonObj.getAsJsonArray("auto_categories");
      // validate the required field `auto_categories` (array)
      for (int i = 0; i < jsonArrayautoCategories.size(); i++) {
        AutoCategory.validateJsonElement(jsonArrayautoCategories.get(i));
      };
      if (!jsonObj.get("config_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("details").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }

      JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
      // validate the required field `details` (array)
      for (int i = 0; i < jsonArraydetails.size(); i++) {
        Details.validateJsonElement(jsonArraydetails.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
      }

      JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
      // validate the required field `entities` (array)
      for (int i = 0; i < jsonArrayentities.size(); i++) {
        Entity.validateJsonElement(jsonArrayentities.get(i));
      };
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("intentions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `intentions` to be an array in the JSON string but got `%s`", jsonObj.get("intentions").toString()));
      }

      JsonArray jsonArrayintentions = jsonObj.getAsJsonArray("intentions");
      // validate the required field `intentions` (array)
      for (int i = 0; i < jsonArrayintentions.size(); i++) {
        Intention.validateJsonElement(jsonArrayintentions.get(i));
      };
      if (!jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the required field `model_sentiment`
      ModelSentiment.validateJsonElement(jsonObj.get("model_sentiment"));
      // ensure the json data is an array
      if (!jsonObj.get("opinions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `opinions` to be an array in the JSON string but got `%s`", jsonObj.get("opinions").toString()));
      }

      JsonArray jsonArrayopinions = jsonObj.getAsJsonArray("opinions");
      // validate the required field `opinions` (array)
      for (int i = 0; i < jsonArrayopinions.size(); i++) {
        Opinion.validateJsonElement(jsonArrayopinions.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("phrases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phrases` to be an array in the JSON string but got `%s`", jsonObj.get("phrases").toString()));
      }

      JsonArray jsonArrayphrases = jsonObj.getAsJsonArray("phrases");
      // validate the required field `phrases` (array)
      for (int i = 0; i < jsonArrayphrases.size(); i++) {
        Phrase.validateJsonElement(jsonArrayphrases.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("relations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relations` to be an array in the JSON string but got `%s`", jsonObj.get("relations").toString()));
      }

      JsonArray jsonArrayrelations = jsonObj.getAsJsonArray("relations");
      // validate the required field `relations` (array)
      for (int i = 0; i < jsonArrayrelations.size(); i++) {
        Relation.validateJsonElement(jsonArrayrelations.get(i));
      };
      if (!jsonObj.get("sentiment_polarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment_polarity").toString()));
      }
      // validate the required field `sentiment_polarity`
      SentimentPolarityEnum.validateJsonElement(jsonObj.get("sentiment_polarity"));
      if (!jsonObj.get("source_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_text").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("taxonomy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomy` to be an array in the JSON string but got `%s`", jsonObj.get("taxonomy").toString()));
      }

      JsonArray jsonArraytaxonomy = jsonObj.getAsJsonArray("taxonomy");
      // validate the required field `taxonomy` (array)
      for (int i = 0; i < jsonArraytaxonomy.size(); i++) {
        Topic.validateJsonElement(jsonArraytaxonomy.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("themes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
      }

      JsonArray jsonArraythemes = jsonObj.getAsJsonArray("themes");
      // validate the required field `themes` (array)
      for (int i = 0; i < jsonArraythemes.size(); i++) {
        Theme.validateJsonElement(jsonArraythemes.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }

      JsonArray jsonArraytopics = jsonObj.getAsJsonArray("topics");
      // validate the required field `topics` (array)
      for (int i = 0; i < jsonArraytopics.size(); i++) {
        Topic.validateJsonElement(jsonArraytopics.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentAnalyticData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentAnalyticData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentAnalyticData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentAnalyticData.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentAnalyticData>() {
           @Override
           public void write(JsonWriter out, DocumentAnalyticData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentAnalyticData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentAnalyticData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentAnalyticData
   * @throws IOException if the JSON string is invalid with respect to DocumentAnalyticData
   */
  public static DocumentAnalyticData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentAnalyticData.class);
  }

  /**
   * Convert an instance of DocumentAnalyticData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

