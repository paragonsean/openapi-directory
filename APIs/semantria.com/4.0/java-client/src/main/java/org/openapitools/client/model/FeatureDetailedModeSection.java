/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeatureDetailedModeSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeatureDetailedModeSection {
  public static final String SERIALIZED_NAME_AUTO_CATEGORIES = "auto_categories";
  @SerializedName(SERIALIZED_NAME_AUTO_CATEGORIES)
  private Boolean autoCategories;

  public static final String SERIALIZED_NAME_ENTITY_MENTIONS = "entity_mentions";
  @SerializedName(SERIALIZED_NAME_ENTITY_MENTIONS)
  private Boolean entityMentions;

  public static final String SERIALIZED_NAME_ENTITY_OPINIONS = "entity_opinions";
  @SerializedName(SERIALIZED_NAME_ENTITY_OPINIONS)
  private Boolean entityOpinions;

  public static final String SERIALIZED_NAME_ENTITY_RELATIONS = "entity_relations";
  @SerializedName(SERIALIZED_NAME_ENTITY_RELATIONS)
  private Boolean entityRelations;

  public static final String SERIALIZED_NAME_ENTITY_THEMES = "entity_themes";
  @SerializedName(SERIALIZED_NAME_ENTITY_THEMES)
  private Boolean entityThemes;

  public static final String SERIALIZED_NAME_INTENTIONS = "intentions";
  @SerializedName(SERIALIZED_NAME_INTENTIONS)
  private Boolean intentions;

  public static final String SERIALIZED_NAME_LANGUAGE_DETECTION = "language_detection";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DETECTION)
  private Boolean languageDetection;

  public static final String SERIALIZED_NAME_MODEL_SENTIMENT = "model_sentiment";
  @SerializedName(SERIALIZED_NAME_MODEL_SENTIMENT)
  private Boolean modelSentiment;

  public static final String SERIALIZED_NAME_NAMED_ENTITIES = "named_entities";
  @SerializedName(SERIALIZED_NAME_NAMED_ENTITIES)
  private Boolean namedEntities;

  public static final String SERIALIZED_NAME_POS_TAGGING = "pos_tagging";
  @SerializedName(SERIALIZED_NAME_POS_TAGGING)
  private Boolean posTagging;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private Boolean queries;

  public static final String SERIALIZED_NAME_SENTIMENT = "sentiment";
  @SerializedName(SERIALIZED_NAME_SENTIMENT)
  private Boolean sentiment;

  public static final String SERIALIZED_NAME_SENTIMENT_PHRASES = "sentiment_phrases";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_PHRASES)
  private Boolean sentimentPhrases;

  public static final String SERIALIZED_NAME_SUMMARIZATION = "summarization";
  @SerializedName(SERIALIZED_NAME_SUMMARIZATION)
  private Boolean summarization;

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private Boolean taxonomy;

  public static final String SERIALIZED_NAME_THEME_MENTIONS = "theme_mentions";
  @SerializedName(SERIALIZED_NAME_THEME_MENTIONS)
  private Boolean themeMentions;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private Boolean themes;

  public static final String SERIALIZED_NAME_USER_CATEGORIES = "user_categories";
  @SerializedName(SERIALIZED_NAME_USER_CATEGORIES)
  private Boolean userCategories;

  public static final String SERIALIZED_NAME_USER_ENTITIES = "user_entities";
  @SerializedName(SERIALIZED_NAME_USER_ENTITIES)
  private Boolean userEntities;

  public FeatureDetailedModeSection() {
  }

  public FeatureDetailedModeSection autoCategories(Boolean autoCategories) {
    this.autoCategories = autoCategories;
    return this;
  }

  /**
   * Represents whether auto-categories of entities supported for certain language or not
   * @return autoCategories
   */
  @javax.annotation.Nonnull
  public Boolean getAutoCategories() {
    return autoCategories;
  }

  public void setAutoCategories(Boolean autoCategories) {
    this.autoCategories = autoCategories;
  }


  public FeatureDetailedModeSection entityMentions(Boolean entityMentions) {
    this.entityMentions = entityMentions;
    return this;
  }

  /**
   * Represents whether mentions of entities supported for certain language or not
   * @return entityMentions
   */
  @javax.annotation.Nonnull
  public Boolean getEntityMentions() {
    return entityMentions;
  }

  public void setEntityMentions(Boolean entityMentions) {
    this.entityMentions = entityMentions;
  }


  public FeatureDetailedModeSection entityOpinions(Boolean entityOpinions) {
    this.entityOpinions = entityOpinions;
    return this;
  }

  /**
   * Represents whether opinions of entities supported for certain language or not
   * @return entityOpinions
   */
  @javax.annotation.Nonnull
  public Boolean getEntityOpinions() {
    return entityOpinions;
  }

  public void setEntityOpinions(Boolean entityOpinions) {
    this.entityOpinions = entityOpinions;
  }


  public FeatureDetailedModeSection entityRelations(Boolean entityRelations) {
    this.entityRelations = entityRelations;
    return this;
  }

  /**
   * Represents whether relations of entities supported for certain language or not
   * @return entityRelations
   */
  @javax.annotation.Nonnull
  public Boolean getEntityRelations() {
    return entityRelations;
  }

  public void setEntityRelations(Boolean entityRelations) {
    this.entityRelations = entityRelations;
  }


  public FeatureDetailedModeSection entityThemes(Boolean entityThemes) {
    this.entityThemes = entityThemes;
    return this;
  }

  /**
   * Represents whether themes of entities supported for certain language or not
   * @return entityThemes
   */
  @javax.annotation.Nonnull
  public Boolean getEntityThemes() {
    return entityThemes;
  }

  public void setEntityThemes(Boolean entityThemes) {
    this.entityThemes = entityThemes;
  }


  public FeatureDetailedModeSection intentions(Boolean intentions) {
    this.intentions = intentions;
    return this;
  }

  /**
   * Represents whether intentions detection supported for certain language or not
   * @return intentions
   */
  @javax.annotation.Nonnull
  public Boolean getIntentions() {
    return intentions;
  }

  public void setIntentions(Boolean intentions) {
    this.intentions = intentions;
  }


  public FeatureDetailedModeSection languageDetection(Boolean languageDetection) {
    this.languageDetection = languageDetection;
    return this;
  }

  /**
   * Represents whether language detection feature supported or not
   * @return languageDetection
   */
  @javax.annotation.Nonnull
  public Boolean getLanguageDetection() {
    return languageDetection;
  }

  public void setLanguageDetection(Boolean languageDetection) {
    this.languageDetection = languageDetection;
  }


  public FeatureDetailedModeSection modelSentiment(Boolean modelSentiment) {
    this.modelSentiment = modelSentiment;
    return this;
  }

  /**
   * Represents whether model-based sentiment supported for certain language or not
   * @return modelSentiment
   */
  @javax.annotation.Nonnull
  public Boolean getModelSentiment() {
    return modelSentiment;
  }

  public void setModelSentiment(Boolean modelSentiment) {
    this.modelSentiment = modelSentiment;
  }


  public FeatureDetailedModeSection namedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
    return this;
  }

  /**
   * Represents whether named entities extraction supported for certain language or not
   * @return namedEntities
   */
  @javax.annotation.Nonnull
  public Boolean getNamedEntities() {
    return namedEntities;
  }

  public void setNamedEntities(Boolean namedEntities) {
    this.namedEntities = namedEntities;
  }


  public FeatureDetailedModeSection posTagging(Boolean posTagging) {
    this.posTagging = posTagging;
    return this;
  }

  /**
   * Represents whether POS tagging supported for certain language or not
   * @return posTagging
   */
  @javax.annotation.Nonnull
  public Boolean getPosTagging() {
    return posTagging;
  }

  public void setPosTagging(Boolean posTagging) {
    this.posTagging = posTagging;
  }


  public FeatureDetailedModeSection queries(Boolean queries) {
    this.queries = queries;
    return this;
  }

  /**
   * Represents whether queries of entities supported for certain language or not
   * @return queries
   */
  @javax.annotation.Nonnull
  public Boolean getQueries() {
    return queries;
  }

  public void setQueries(Boolean queries) {
    this.queries = queries;
  }


  public FeatureDetailedModeSection sentiment(Boolean sentiment) {
    this.sentiment = sentiment;
    return this;
  }

  /**
   * Represents whether sentiment detection supported for certain language or not
   * @return sentiment
   */
  @javax.annotation.Nonnull
  public Boolean getSentiment() {
    return sentiment;
  }

  public void setSentiment(Boolean sentiment) {
    this.sentiment = sentiment;
  }


  public FeatureDetailedModeSection sentimentPhrases(Boolean sentimentPhrases) {
    this.sentimentPhrases = sentimentPhrases;
    return this;
  }

  /**
   * Represents whether sentiment phrases detection supported for certain language or not
   * @return sentimentPhrases
   */
  @javax.annotation.Nonnull
  public Boolean getSentimentPhrases() {
    return sentimentPhrases;
  }

  public void setSentimentPhrases(Boolean sentimentPhrases) {
    this.sentimentPhrases = sentimentPhrases;
  }


  public FeatureDetailedModeSection summarization(Boolean summarization) {
    this.summarization = summarization;
    return this;
  }

  /**
   * Represents whether summarization supported for certain language or not
   * @return summarization
   */
  @javax.annotation.Nonnull
  public Boolean getSummarization() {
    return summarization;
  }

  public void setSummarization(Boolean summarization) {
    this.summarization = summarization;
  }


  public FeatureDetailedModeSection taxonomy(Boolean taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  /**
   * Represents whether taxonomy feature supported for certain language or not
   * @return taxonomy
   */
  @javax.annotation.Nonnull
  public Boolean getTaxonomy() {
    return taxonomy;
  }

  public void setTaxonomy(Boolean taxonomy) {
    this.taxonomy = taxonomy;
  }


  public FeatureDetailedModeSection themeMentions(Boolean themeMentions) {
    this.themeMentions = themeMentions;
    return this;
  }

  /**
   * Represents whether mentions of themes supported for certain language or not
   * @return themeMentions
   */
  @javax.annotation.Nonnull
  public Boolean getThemeMentions() {
    return themeMentions;
  }

  public void setThemeMentions(Boolean themeMentions) {
    this.themeMentions = themeMentions;
  }


  public FeatureDetailedModeSection themes(Boolean themes) {
    this.themes = themes;
    return this;
  }

  /**
   * Represents whether themes extraction supported for certain language or not
   * @return themes
   */
  @javax.annotation.Nonnull
  public Boolean getThemes() {
    return themes;
  }

  public void setThemes(Boolean themes) {
    this.themes = themes;
  }


  public FeatureDetailedModeSection userCategories(Boolean userCategories) {
    this.userCategories = userCategories;
    return this;
  }

  /**
   * Represents whether user categories of entities supported for certain language or not
   * @return userCategories
   */
  @javax.annotation.Nonnull
  public Boolean getUserCategories() {
    return userCategories;
  }

  public void setUserCategories(Boolean userCategories) {
    this.userCategories = userCategories;
  }


  public FeatureDetailedModeSection userEntities(Boolean userEntities) {
    this.userEntities = userEntities;
    return this;
  }

  /**
   * Represents whether user entities extraction supported for certain language or not
   * @return userEntities
   */
  @javax.annotation.Nonnull
  public Boolean getUserEntities() {
    return userEntities;
  }

  public void setUserEntities(Boolean userEntities) {
    this.userEntities = userEntities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeatureDetailedModeSection featureDetailedModeSection = (FeatureDetailedModeSection) o;
    return Objects.equals(this.autoCategories, featureDetailedModeSection.autoCategories) &&
        Objects.equals(this.entityMentions, featureDetailedModeSection.entityMentions) &&
        Objects.equals(this.entityOpinions, featureDetailedModeSection.entityOpinions) &&
        Objects.equals(this.entityRelations, featureDetailedModeSection.entityRelations) &&
        Objects.equals(this.entityThemes, featureDetailedModeSection.entityThemes) &&
        Objects.equals(this.intentions, featureDetailedModeSection.intentions) &&
        Objects.equals(this.languageDetection, featureDetailedModeSection.languageDetection) &&
        Objects.equals(this.modelSentiment, featureDetailedModeSection.modelSentiment) &&
        Objects.equals(this.namedEntities, featureDetailedModeSection.namedEntities) &&
        Objects.equals(this.posTagging, featureDetailedModeSection.posTagging) &&
        Objects.equals(this.queries, featureDetailedModeSection.queries) &&
        Objects.equals(this.sentiment, featureDetailedModeSection.sentiment) &&
        Objects.equals(this.sentimentPhrases, featureDetailedModeSection.sentimentPhrases) &&
        Objects.equals(this.summarization, featureDetailedModeSection.summarization) &&
        Objects.equals(this.taxonomy, featureDetailedModeSection.taxonomy) &&
        Objects.equals(this.themeMentions, featureDetailedModeSection.themeMentions) &&
        Objects.equals(this.themes, featureDetailedModeSection.themes) &&
        Objects.equals(this.userCategories, featureDetailedModeSection.userCategories) &&
        Objects.equals(this.userEntities, featureDetailedModeSection.userEntities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCategories, entityMentions, entityOpinions, entityRelations, entityThemes, intentions, languageDetection, modelSentiment, namedEntities, posTagging, queries, sentiment, sentimentPhrases, summarization, taxonomy, themeMentions, themes, userCategories, userEntities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeatureDetailedModeSection {\n");
    sb.append("    autoCategories: ").append(toIndentedString(autoCategories)).append("\n");
    sb.append("    entityMentions: ").append(toIndentedString(entityMentions)).append("\n");
    sb.append("    entityOpinions: ").append(toIndentedString(entityOpinions)).append("\n");
    sb.append("    entityRelations: ").append(toIndentedString(entityRelations)).append("\n");
    sb.append("    entityThemes: ").append(toIndentedString(entityThemes)).append("\n");
    sb.append("    intentions: ").append(toIndentedString(intentions)).append("\n");
    sb.append("    languageDetection: ").append(toIndentedString(languageDetection)).append("\n");
    sb.append("    modelSentiment: ").append(toIndentedString(modelSentiment)).append("\n");
    sb.append("    namedEntities: ").append(toIndentedString(namedEntities)).append("\n");
    sb.append("    posTagging: ").append(toIndentedString(posTagging)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    sentimentPhrases: ").append(toIndentedString(sentimentPhrases)).append("\n");
    sb.append("    summarization: ").append(toIndentedString(summarization)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    themeMentions: ").append(toIndentedString(themeMentions)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    userCategories: ").append(toIndentedString(userCategories)).append("\n");
    sb.append("    userEntities: ").append(toIndentedString(userEntities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_categories");
    openapiFields.add("entity_mentions");
    openapiFields.add("entity_opinions");
    openapiFields.add("entity_relations");
    openapiFields.add("entity_themes");
    openapiFields.add("intentions");
    openapiFields.add("language_detection");
    openapiFields.add("model_sentiment");
    openapiFields.add("named_entities");
    openapiFields.add("pos_tagging");
    openapiFields.add("queries");
    openapiFields.add("sentiment");
    openapiFields.add("sentiment_phrases");
    openapiFields.add("summarization");
    openapiFields.add("taxonomy");
    openapiFields.add("theme_mentions");
    openapiFields.add("themes");
    openapiFields.add("user_categories");
    openapiFields.add("user_entities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_categories");
    openapiRequiredFields.add("entity_mentions");
    openapiRequiredFields.add("entity_opinions");
    openapiRequiredFields.add("entity_relations");
    openapiRequiredFields.add("entity_themes");
    openapiRequiredFields.add("intentions");
    openapiRequiredFields.add("language_detection");
    openapiRequiredFields.add("model_sentiment");
    openapiRequiredFields.add("named_entities");
    openapiRequiredFields.add("pos_tagging");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("sentiment");
    openapiRequiredFields.add("sentiment_phrases");
    openapiRequiredFields.add("summarization");
    openapiRequiredFields.add("taxonomy");
    openapiRequiredFields.add("theme_mentions");
    openapiRequiredFields.add("themes");
    openapiRequiredFields.add("user_categories");
    openapiRequiredFields.add("user_entities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeatureDetailedModeSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeatureDetailedModeSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeatureDetailedModeSection is not found in the empty JSON string", FeatureDetailedModeSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeatureDetailedModeSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeatureDetailedModeSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeatureDetailedModeSection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeatureDetailedModeSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeatureDetailedModeSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeatureDetailedModeSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeatureDetailedModeSection.class));

       return (TypeAdapter<T>) new TypeAdapter<FeatureDetailedModeSection>() {
           @Override
           public void write(JsonWriter out, FeatureDetailedModeSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeatureDetailedModeSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeatureDetailedModeSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeatureDetailedModeSection
   * @throws IOException if the JSON string is invalid with respect to FeatureDetailedModeSection
   */
  public static FeatureDetailedModeSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeatureDetailedModeSection.class);
  }

  /**
   * Convert an instance of FeatureDetailedModeSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

