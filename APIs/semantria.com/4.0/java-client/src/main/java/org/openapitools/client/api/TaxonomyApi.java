/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TaxonomyNodeResponseVersion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxonomyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaxonomyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxonomyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTaxonomy
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTaxonomyCall(String contentType, Object taxonomy, String configId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxonomy;

        // create path and map variables
        String localVarPath = "/taxonomy.{content_type}"
            .replace("{" + "content_type" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("config_id", configId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTaxonomyValidateBeforeCall(String contentType, Object taxonomy, String configId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling addTaxonomy(Async)");
        }

        // verify the required parameter 'taxonomy' is set
        if (taxonomy == null) {
            throw new ApiException("Missing the required parameter 'taxonomy' when calling addTaxonomy(Async)");
        }

        return addTaxonomyCall(contentType, taxonomy, configId, _callback);

    }

    /**
     * Add taxonomy nodes
     * This method adds taxonomy nodes on Semantria side.
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @return List&lt;TaxonomyNodeResponseVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public List<TaxonomyNodeResponseVersion> addTaxonomy(String contentType, Object taxonomy, String configId) throws ApiException {
        ApiResponse<List<TaxonomyNodeResponseVersion>> localVarResp = addTaxonomyWithHttpInfo(contentType, taxonomy, configId);
        return localVarResp.getData();
    }

    /**
     * Add taxonomy nodes
     * This method adds taxonomy nodes on Semantria side.
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @return ApiResponse&lt;List&lt;TaxonomyNodeResponseVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaxonomyNodeResponseVersion>> addTaxonomyWithHttpInfo(String contentType, Object taxonomy, String configId) throws ApiException {
        okhttp3.Call localVarCall = addTaxonomyValidateBeforeCall(contentType, taxonomy, configId, null);
        Type localVarReturnType = new TypeToken<List<TaxonomyNodeResponseVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add taxonomy nodes (asynchronously)
     * This method adds taxonomy nodes on Semantria side.
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTaxonomyAsync(String contentType, Object taxonomy, String configId, final ApiCallback<List<TaxonomyNodeResponseVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTaxonomyValidateBeforeCall(contentType, taxonomy, configId, _callback);
        Type localVarReturnType = new TypeToken<List<TaxonomyNodeResponseVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTaxonomy
     * @param contentType  (required)
     * @param taxonomyNodeIDs List of taxonomy node identifiers. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Server responds if client tries to remove primary configuration. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaxonomyCall(String contentType, List<String> taxonomyNodeIDs, String configId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxonomyNodeIDs;

        // create path and map variables
        String localVarPath = "/taxonomy.{content_type}"
            .replace("{" + "content_type" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("config_id", configId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaxonomyValidateBeforeCall(String contentType, List<String> taxonomyNodeIDs, String configId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteTaxonomy(Async)");
        }

        // verify the required parameter 'taxonomyNodeIDs' is set
        if (taxonomyNodeIDs == null) {
            throw new ApiException("Missing the required parameter 'taxonomyNodeIDs' when calling deleteTaxonomy(Async)");
        }

        return deleteTaxonomyCall(contentType, taxonomyNodeIDs, configId, _callback);

    }

    /**
     * Remove taxonomy nodes
     * This method removes certain taxonomy nodes by their IDs on Semantria side.
     * @param contentType  (required)
     * @param taxonomyNodeIDs List of taxonomy node identifiers. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Server responds if client tries to remove primary configuration. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTaxonomy(String contentType, List<String> taxonomyNodeIDs, String configId) throws ApiException {
        deleteTaxonomyWithHttpInfo(contentType, taxonomyNodeIDs, configId);
    }

    /**
     * Remove taxonomy nodes
     * This method removes certain taxonomy nodes by their IDs on Semantria side.
     * @param contentType  (required)
     * @param taxonomyNodeIDs List of taxonomy node identifiers. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Server responds if client tries to remove primary configuration. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTaxonomyWithHttpInfo(String contentType, List<String> taxonomyNodeIDs, String configId) throws ApiException {
        okhttp3.Call localVarCall = deleteTaxonomyValidateBeforeCall(contentType, taxonomyNodeIDs, configId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove taxonomy nodes (asynchronously)
     * This method removes certain taxonomy nodes by their IDs on Semantria side.
     * @param contentType  (required)
     * @param taxonomyNodeIDs List of taxonomy node identifiers. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Server responds if client tries to remove primary configuration. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaxonomyAsync(String contentType, List<String> taxonomyNodeIDs, String configId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaxonomyValidateBeforeCall(contentType, taxonomyNodeIDs, configId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxonomy
     * @param contentType  (required)
     * @param configId Identifier of configuration taxonomy linked to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client request accepted and queued. Server responds with the taxonomy list. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and no taxonomy found. Server responds with empty body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxonomyCall(String contentType, String configId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxonomy.{content_type}"
            .replace("{" + "content_type" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("config_id", configId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxonomyValidateBeforeCall(String contentType, String configId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getTaxonomy(Async)");
        }

        return getTaxonomyCall(contentType, configId, _callback);

    }

    /**
     * Retrieve taxonomy
     * This method retrieves list of taxonomy available on Semantria side.
     * @param contentType  (required)
     * @param configId Identifier of configuration taxonomy linked to. (optional)
     * @return List&lt;TaxonomyNodeResponseVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client request accepted and queued. Server responds with the taxonomy list. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and no taxonomy found. Server responds with empty body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public List<TaxonomyNodeResponseVersion> getTaxonomy(String contentType, String configId) throws ApiException {
        ApiResponse<List<TaxonomyNodeResponseVersion>> localVarResp = getTaxonomyWithHttpInfo(contentType, configId);
        return localVarResp.getData();
    }

    /**
     * Retrieve taxonomy
     * This method retrieves list of taxonomy available on Semantria side.
     * @param contentType  (required)
     * @param configId Identifier of configuration taxonomy linked to. (optional)
     * @return ApiResponse&lt;List&lt;TaxonomyNodeResponseVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client request accepted and queued. Server responds with the taxonomy list. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and no taxonomy found. Server responds with empty body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaxonomyNodeResponseVersion>> getTaxonomyWithHttpInfo(String contentType, String configId) throws ApiException {
        okhttp3.Call localVarCall = getTaxonomyValidateBeforeCall(contentType, configId, null);
        Type localVarReturnType = new TypeToken<List<TaxonomyNodeResponseVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve taxonomy (asynchronously)
     * This method retrieves list of taxonomy available on Semantria side.
     * @param contentType  (required)
     * @param configId Identifier of configuration taxonomy linked to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client request accepted and queued. Server responds with the taxonomy list. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and no taxonomy found. Server responds with empty body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxonomyAsync(String contentType, String configId, final ApiCallback<List<TaxonomyNodeResponseVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxonomyValidateBeforeCall(contentType, configId, _callback);
        Type localVarReturnType = new TypeToken<List<TaxonomyNodeResponseVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaxonomy
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaxonomyCall(String contentType, Object taxonomy, String configId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taxonomy;

        // create path and map variables
        String localVarPath = "/taxonomy.{content_type}"
            .replace("{" + "content_type" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("config_id", configId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaxonomyValidateBeforeCall(String contentType, Object taxonomy, String configId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateTaxonomy(Async)");
        }

        // verify the required parameter 'taxonomy' is set
        if (taxonomy == null) {
            throw new ApiException("Missing the required parameter 'taxonomy' when calling updateTaxonomy(Async)");
        }

        return updateTaxonomyCall(contentType, taxonomy, configId, _callback);

    }

    /**
     * Update taxonomy nodes
     * This method updates taxonomy nodes on Semantria side.
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @return List&lt;TaxonomyNodeResponseVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public List<TaxonomyNodeResponseVersion> updateTaxonomy(String contentType, Object taxonomy, String configId) throws ApiException {
        ApiResponse<List<TaxonomyNodeResponseVersion>> localVarResp = updateTaxonomyWithHttpInfo(contentType, taxonomy, configId);
        return localVarResp.getData();
    }

    /**
     * Update taxonomy nodes
     * This method updates taxonomy nodes on Semantria side.
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @return ApiResponse&lt;List&lt;TaxonomyNodeResponseVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaxonomyNodeResponseVersion>> updateTaxonomyWithHttpInfo(String contentType, Object taxonomy, String configId) throws ApiException {
        okhttp3.Call localVarCall = updateTaxonomyValidateBeforeCall(contentType, taxonomy, configId, null);
        Type localVarReturnType = new TypeToken<List<TaxonomyNodeResponseVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update taxonomy nodes (asynchronously)
     * This method updates taxonomy nodes on Semantria side.
     * @param contentType  (required)
     * @param taxonomy List of parametrized JSON or XML objects. (required)
     * @param configId Identifier of configuration queries linked to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Client request accepted and queued. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incoming request body is incorrect. Server responds with details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Unauthorized. Limit of system calls is reached or subscription is expired. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Number of allowed queries per configuration achieved. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server side issue. Server may respond with the details in response body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaxonomyAsync(String contentType, Object taxonomy, String configId, final ApiCallback<List<TaxonomyNodeResponseVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaxonomyValidateBeforeCall(contentType, taxonomy, configId, _callback);
        Type localVarReturnType = new TypeToken<List<TaxonomyNodeResponseVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
