/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationCollectionSection;
import org.openapitools.client.model.ConfigurationDocumentSection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationInsertVersion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationInsertVersion {
  public static final String SERIALIZED_NAME_AUTO_RESPONSE = "auto_response";
  @SerializedName(SERIALIZED_NAME_AUTO_RESPONSE)
  private Boolean autoResponse;

  public static final String SERIALIZED_NAME_CALLBACK = "callback";
  @SerializedName(SERIALIZED_NAME_CALLBACK)
  private String callback;

  public static final String SERIALIZED_NAME_CATEGORIES_THRESHOLD = "categories_threshold";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_THRESHOLD)
  private Double categoriesThreshold;

  public static final String SERIALIZED_NAME_CHARS_THRESHOLD = "chars_threshold";
  @SerializedName(SERIALIZED_NAME_CHARS_THRESHOLD)
  private Integer charsThreshold;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private ConfigurationCollectionSection collection;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private ConfigurationDocumentSection document;

  public static final String SERIALIZED_NAME_ENTITIES_THRESHOLD = "entities_threshold";
  @SerializedName(SERIALIZED_NAME_ENTITIES_THRESHOLD)
  private Integer entitiesThreshold;

  public static final String SERIALIZED_NAME_IS_PRIMARY = "is_primary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONE_SENTENCE = "one_sentence";
  @SerializedName(SERIALIZED_NAME_ONE_SENTENCE)
  private Boolean oneSentence;

  public static final String SERIALIZED_NAME_PROCESS_HTML = "process_html";
  @SerializedName(SERIALIZED_NAME_PROCESS_HTML)
  private Boolean processHtml;

  public ConfigurationInsertVersion() {
  }

  public ConfigurationInsertVersion autoResponse(Boolean autoResponse) {
    this.autoResponse = autoResponse;
    return this;
  }

  /**
   * Defines whether or not the service should respond with processed results automatically. Default: false
   * @return autoResponse
   */
  @javax.annotation.Nonnull
  public Boolean getAutoResponse() {
    return autoResponse;
  }

  public void setAutoResponse(Boolean autoResponse) {
    this.autoResponse = autoResponse;
  }


  public ConfigurationInsertVersion callback(String callback) {
    this.callback = callback;
    return this;
  }

  /**
   * Defines a callback URL for automatic data responding
   * @return callback
   */
  @javax.annotation.Nonnull
  public String getCallback() {
    return callback;
  }

  public void setCallback(String callback) {
    this.callback = callback;
  }


  public ConfigurationInsertVersion categoriesThreshold(Double categoriesThreshold) {
    this.categoriesThreshold = categoriesThreshold;
    return this;
  }

  /**
   * Defines low threshold for strength score of user categories to be reported in the output. Default: 0.45
   * @return categoriesThreshold
   */
  @javax.annotation.Nonnull
  public Double getCategoriesThreshold() {
    return categoriesThreshold;
  }

  public void setCategoriesThreshold(Double categoriesThreshold) {
    this.categoriesThreshold = categoriesThreshold;
  }


  public ConfigurationInsertVersion charsThreshold(Integer charsThreshold) {
    this.charsThreshold = charsThreshold;
    return this;
  }

  /**
   * Defines the threshold for alphanumeric characters in the text in percent. Default: 80
   * minimum: 0
   * maximum: 100
   * @return charsThreshold
   */
  @javax.annotation.Nonnull
  public Integer getCharsThreshold() {
    return charsThreshold;
  }

  public void setCharsThreshold(Integer charsThreshold) {
    this.charsThreshold = charsThreshold;
  }


  public ConfigurationInsertVersion collection(ConfigurationCollectionSection collection) {
    this.collection = collection;
    return this;
  }

  /**
   * Get collection
   * @return collection
   */
  @javax.annotation.Nonnull
  public ConfigurationCollectionSection getCollection() {
    return collection;
  }

  public void setCollection(ConfigurationCollectionSection collection) {
    this.collection = collection;
  }


  public ConfigurationInsertVersion document(ConfigurationDocumentSection document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nonnull
  public ConfigurationDocumentSection getDocument() {
    return document;
  }

  public void setDocument(ConfigurationDocumentSection document) {
    this.document = document;
  }


  public ConfigurationInsertVersion entitiesThreshold(Integer entitiesThreshold) {
    this.entitiesThreshold = entitiesThreshold;
    return this;
  }

  /**
   * Defines low threshold for evidence score of named and user entities to be reported in the output.
   * @return entitiesThreshold
   */
  @javax.annotation.Nonnull
  public Integer getEntitiesThreshold() {
    return entitiesThreshold;
  }

  public void setEntitiesThreshold(Integer entitiesThreshold) {
    this.entitiesThreshold = entitiesThreshold;
  }


  public ConfigurationInsertVersion isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

  /**
   * Identifies whether the current configuration is primary or not. Default: false
   * @return isPrimary
   */
  @javax.annotation.Nonnull
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public ConfigurationInsertVersion language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Defines target language that will be used for task processing. Default: English
   * @return language
   */
  @javax.annotation.Nonnull
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public ConfigurationInsertVersion name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Configuration name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConfigurationInsertVersion oneSentence(Boolean oneSentence) {
    this.oneSentence = oneSentence;
    return this;
  }

  /**
   * Leads the service to consider the entire document as single sentence. Default: false
   * @return oneSentence
   */
  @javax.annotation.Nonnull
  public Boolean getOneSentence() {
    return oneSentence;
  }

  public void setOneSentence(Boolean oneSentence) {
    this.oneSentence = oneSentence;
  }


  public ConfigurationInsertVersion processHtml(Boolean processHtml) {
    this.processHtml = processHtml;
    return this;
  }

  /**
   * Leads the service to clean HTML tags before processing. Default: false
   * @return processHtml
   */
  @javax.annotation.Nonnull
  public Boolean getProcessHtml() {
    return processHtml;
  }

  public void setProcessHtml(Boolean processHtml) {
    this.processHtml = processHtml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationInsertVersion configurationInsertVersion = (ConfigurationInsertVersion) o;
    return Objects.equals(this.autoResponse, configurationInsertVersion.autoResponse) &&
        Objects.equals(this.callback, configurationInsertVersion.callback) &&
        Objects.equals(this.categoriesThreshold, configurationInsertVersion.categoriesThreshold) &&
        Objects.equals(this.charsThreshold, configurationInsertVersion.charsThreshold) &&
        Objects.equals(this.collection, configurationInsertVersion.collection) &&
        Objects.equals(this.document, configurationInsertVersion.document) &&
        Objects.equals(this.entitiesThreshold, configurationInsertVersion.entitiesThreshold) &&
        Objects.equals(this.isPrimary, configurationInsertVersion.isPrimary) &&
        Objects.equals(this.language, configurationInsertVersion.language) &&
        Objects.equals(this.name, configurationInsertVersion.name) &&
        Objects.equals(this.oneSentence, configurationInsertVersion.oneSentence) &&
        Objects.equals(this.processHtml, configurationInsertVersion.processHtml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoResponse, callback, categoriesThreshold, charsThreshold, collection, document, entitiesThreshold, isPrimary, language, name, oneSentence, processHtml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationInsertVersion {\n");
    sb.append("    autoResponse: ").append(toIndentedString(autoResponse)).append("\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("    categoriesThreshold: ").append(toIndentedString(categoriesThreshold)).append("\n");
    sb.append("    charsThreshold: ").append(toIndentedString(charsThreshold)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    entitiesThreshold: ").append(toIndentedString(entitiesThreshold)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneSentence: ").append(toIndentedString(oneSentence)).append("\n");
    sb.append("    processHtml: ").append(toIndentedString(processHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_response");
    openapiFields.add("callback");
    openapiFields.add("categories_threshold");
    openapiFields.add("chars_threshold");
    openapiFields.add("collection");
    openapiFields.add("document");
    openapiFields.add("entities_threshold");
    openapiFields.add("is_primary");
    openapiFields.add("language");
    openapiFields.add("name");
    openapiFields.add("one_sentence");
    openapiFields.add("process_html");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_response");
    openapiRequiredFields.add("callback");
    openapiRequiredFields.add("categories_threshold");
    openapiRequiredFields.add("chars_threshold");
    openapiRequiredFields.add("collection");
    openapiRequiredFields.add("document");
    openapiRequiredFields.add("entities_threshold");
    openapiRequiredFields.add("is_primary");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("one_sentence");
    openapiRequiredFields.add("process_html");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationInsertVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationInsertVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationInsertVersion is not found in the empty JSON string", ConfigurationInsertVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationInsertVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationInsertVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigurationInsertVersion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("callback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback").toString()));
      }
      // validate the required field `collection`
      ConfigurationCollectionSection.validateJsonElement(jsonObj.get("collection"));
      // validate the required field `document`
      ConfigurationDocumentSection.validateJsonElement(jsonObj.get("document"));
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationInsertVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationInsertVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationInsertVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationInsertVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationInsertVersion>() {
           @Override
           public void write(JsonWriter out, ConfigurationInsertVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationInsertVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationInsertVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationInsertVersion
   * @throws IOException if the JSON string is invalid with respect to ConfigurationInsertVersion
   */
  public static ConfigurationInsertVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationInsertVersion.class);
  }

  /**
   * Convert an instance of ConfigurationInsertVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

