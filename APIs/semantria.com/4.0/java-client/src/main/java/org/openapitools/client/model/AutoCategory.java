/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoCategory {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<SubCategory> categories = new ArrayList<>();

  /**
   * Verbal representation of sentiment score. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   */
  @JsonAdapter(SentimentPolarityEnum.Adapter.class)
  public enum SentimentPolarityEnum {
    NEGATIVE("negative"),
    
    POSITIVE("positive"),
    
    NEUTRAL("neutral");

    private String value;

    SentimentPolarityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentPolarityEnum fromValue(String value) {
      for (SentimentPolarityEnum b : SentimentPolarityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentPolarityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentPolarityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentPolarityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentPolarityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SentimentPolarityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT_POLARITY = "sentiment_polarity";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_POLARITY)
  private SentimentPolarityEnum sentimentPolarity;

  public static final String SERIALIZED_NAME_SENTIMENT_SCORE = "sentiment_score";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_SCORE)
  private Double sentimentScore;

  public static final String SERIALIZED_NAME_STRENGTH_SCORE = "strength_score";
  @SerializedName(SERIALIZED_NAME_STRENGTH_SCORE)
  private Double strengthScore;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AutoCategory() {
  }

  public AutoCategory categories(List<SubCategory> categories) {
    this.categories = categories;
    return this;
  }

  public AutoCategory addCategoriesItem(SubCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * List of sub-categories of the current category if applicable
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<SubCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<SubCategory> categories) {
    this.categories = categories;
  }


  public AutoCategory sentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
    return this;
  }

  /**
   * Verbal representation of sentiment score. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   * @return sentimentPolarity
   */
  @javax.annotation.Nonnull
  public SentimentPolarityEnum getSentimentPolarity() {
    return sentimentPolarity;
  }

  public void setSentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
  }


  public AutoCategory sentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

  /**
   * The sentiment score associated with this category
   * @return sentimentScore
   */
  @javax.annotation.Nonnull
  public Double getSentimentScore() {
    return sentimentScore;
  }

  public void setSentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  public AutoCategory strengthScore(Double strengthScore) {
    this.strengthScore = strengthScore;
    return this;
  }

  /**
   * Strength of the category matches with the document content
   * @return strengthScore
   */
  @javax.annotation.Nonnull
  public Double getStrengthScore() {
    return strengthScore;
  }

  public void setStrengthScore(Double strengthScore) {
    this.strengthScore = strengthScore;
  }


  public AutoCategory title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The category title, which is its label in the text
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AutoCategory type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of category; can be either \&quot;node\&quot; (root level) or \&quot;leaf\&quot; (nested) value
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoCategory autoCategory = (AutoCategory) o;
    return Objects.equals(this.categories, autoCategory.categories) &&
        Objects.equals(this.sentimentPolarity, autoCategory.sentimentPolarity) &&
        Objects.equals(this.sentimentScore, autoCategory.sentimentScore) &&
        Objects.equals(this.strengthScore, autoCategory.strengthScore) &&
        Objects.equals(this.title, autoCategory.title) &&
        Objects.equals(this.type, autoCategory.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, sentimentPolarity, sentimentScore, strengthScore, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoCategory {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    sentimentPolarity: ").append(toIndentedString(sentimentPolarity)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("    strengthScore: ").append(toIndentedString(strengthScore)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("sentiment_polarity");
    openapiFields.add("sentiment_score");
    openapiFields.add("strength_score");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("sentiment_polarity");
    openapiRequiredFields.add("sentiment_score");
    openapiRequiredFields.add("strength_score");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoCategory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoCategory is not found in the empty JSON string", AutoCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoCategory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        SubCategory.validateJsonElement(jsonArraycategories.get(i));
      };
      if (!jsonObj.get("sentiment_polarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment_polarity").toString()));
      }
      // validate the required field `sentiment_polarity`
      SentimentPolarityEnum.validateJsonElement(jsonObj.get("sentiment_polarity"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoCategory>() {
           @Override
           public void write(JsonWriter out, AutoCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoCategory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoCategory
   * @throws IOException if the JSON string is invalid with respect to AutoCategory
   */
  public static AutoCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoCategory.class);
  }

  /**
   * Convert an instance of AutoCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

