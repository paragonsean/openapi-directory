/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.Facet;
import org.openapitools.client.model.Theme;
import org.openapitools.client.model.Topic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CollectionAnalyticData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectionAnalyticData {
  public static final String SERIALIZED_NAME_CONFIG_ID = "config_id";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private String configId;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<Entity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private List<Facet> facets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  /**
   * Status of the collection
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("queued"),
    
    PROCESSED("processed"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TAXONOMY = "taxonomy";
  @SerializedName(SERIALIZED_NAME_TAXONOMY)
  private List<Topic> taxonomy = new ArrayList<>();

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<Theme> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Topic> topics = new ArrayList<>();

  public CollectionAnalyticData() {
  }

  public CollectionAnalyticData configId(String configId) {
    this.configId = configId;
    return this;
  }

  /**
   * Unique configuration identifier. Usually 36 alphanumeric characters
   * @return configId
   */
  @javax.annotation.Nonnull
  public String getConfigId() {
    return configId;
  }

  public void setConfigId(String configId) {
    this.configId = configId;
  }


  public CollectionAnalyticData entities(List<Entity> entities) {
    this.entities = entities;
    return this;
  }

  public CollectionAnalyticData addEntitiesItem(Entity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Returns the named entities and user defined entities from the text
   * @return entities
   */
  @javax.annotation.Nonnull
  public List<Entity> getEntities() {
    return entities;
  }

  public void setEntities(List<Entity> entities) {
    this.entities = entities;
  }


  public CollectionAnalyticData facets(List<Facet> facets) {
    this.facets = facets;
    return this;
  }

  public CollectionAnalyticData addFacetsItem(Facet facetsItem) {
    if (this.facets == null) {
      this.facets = new ArrayList<>();
    }
    this.facets.add(facetsItem);
    return this;
  }

  /**
   * Returns the facets extracted across all documents in the collection
   * @return facets
   */
  @javax.annotation.Nonnull
  public List<Facet> getFacets() {
    return facets;
  }

  public void setFacets(List<Facet> facets) {
    this.facets = facets;
  }


  public CollectionAnalyticData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique collection identifier. Can be up to 36 alphanumeric characters
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CollectionAnalyticData jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Specific marker of a job collection belongs to, can be used for collections ordering on client side.
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public CollectionAnalyticData status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the collection
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CollectionAnalyticData tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Any text of up to 50 characters used like marker
   * @return tag
   */
  @javax.annotation.Nonnull
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public CollectionAnalyticData taxonomy(List<Topic> taxonomy) {
    this.taxonomy = taxonomy;
    return this;
  }

  public CollectionAnalyticData addTaxonomyItem(Topic taxonomyItem) {
    if (this.taxonomy == null) {
      this.taxonomy = new ArrayList<>();
    }
    this.taxonomy.add(taxonomyItem);
    return this;
  }

  /**
   * Returns the taxonomy determined for the text
   * @return taxonomy
   */
  @javax.annotation.Nonnull
  public List<Topic> getTaxonomy() {
    return taxonomy;
  }

  public void setTaxonomy(List<Topic> taxonomy) {
    this.taxonomy = taxonomy;
  }


  public CollectionAnalyticData themes(List<Theme> themes) {
    this.themes = themes;
    return this;
  }

  public CollectionAnalyticData addThemesItem(Theme themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * Returns themes across the documents
   * @return themes
   */
  @javax.annotation.Nonnull
  public List<Theme> getThemes() {
    return themes;
  }

  public void setThemes(List<Theme> themes) {
    this.themes = themes;
  }


  public CollectionAnalyticData topics(List<Topic> topics) {
    this.topics = topics;
    return this;
  }

  public CollectionAnalyticData addTopicsItem(Topic topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * Returns the concept and query defined topics determined for the text
   * @return topics
   */
  @javax.annotation.Nonnull
  public List<Topic> getTopics() {
    return topics;
  }

  public void setTopics(List<Topic> topics) {
    this.topics = topics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionAnalyticData collectionAnalyticData = (CollectionAnalyticData) o;
    return Objects.equals(this.configId, collectionAnalyticData.configId) &&
        Objects.equals(this.entities, collectionAnalyticData.entities) &&
        Objects.equals(this.facets, collectionAnalyticData.facets) &&
        Objects.equals(this.id, collectionAnalyticData.id) &&
        Objects.equals(this.jobId, collectionAnalyticData.jobId) &&
        Objects.equals(this.status, collectionAnalyticData.status) &&
        Objects.equals(this.tag, collectionAnalyticData.tag) &&
        Objects.equals(this.taxonomy, collectionAnalyticData.taxonomy) &&
        Objects.equals(this.themes, collectionAnalyticData.themes) &&
        Objects.equals(this.topics, collectionAnalyticData.topics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configId, entities, facets, id, jobId, status, tag, taxonomy, themes, topics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionAnalyticData {\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    taxonomy: ").append(toIndentedString(taxonomy)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config_id");
    openapiFields.add("entities");
    openapiFields.add("facets");
    openapiFields.add("id");
    openapiFields.add("job_id");
    openapiFields.add("status");
    openapiFields.add("tag");
    openapiFields.add("taxonomy");
    openapiFields.add("themes");
    openapiFields.add("topics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("config_id");
    openapiRequiredFields.add("entities");
    openapiRequiredFields.add("facets");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("job_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("tag");
    openapiRequiredFields.add("taxonomy");
    openapiRequiredFields.add("themes");
    openapiRequiredFields.add("topics");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectionAnalyticData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectionAnalyticData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectionAnalyticData is not found in the empty JSON string", CollectionAnalyticData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectionAnalyticData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectionAnalyticData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CollectionAnalyticData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("config_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
      }

      JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
      // validate the required field `entities` (array)
      for (int i = 0; i < jsonArrayentities.size(); i++) {
        Entity.validateJsonElement(jsonArrayentities.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("facets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facets` to be an array in the JSON string but got `%s`", jsonObj.get("facets").toString()));
      }

      JsonArray jsonArrayfacets = jsonObj.getAsJsonArray("facets");
      // validate the required field `facets` (array)
      for (int i = 0; i < jsonArrayfacets.size(); i++) {
        Facet.validateJsonElement(jsonArrayfacets.get(i));
      };
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("taxonomy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxonomy` to be an array in the JSON string but got `%s`", jsonObj.get("taxonomy").toString()));
      }

      JsonArray jsonArraytaxonomy = jsonObj.getAsJsonArray("taxonomy");
      // validate the required field `taxonomy` (array)
      for (int i = 0; i < jsonArraytaxonomy.size(); i++) {
        Topic.validateJsonElement(jsonArraytaxonomy.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("themes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
      }

      JsonArray jsonArraythemes = jsonObj.getAsJsonArray("themes");
      // validate the required field `themes` (array)
      for (int i = 0; i < jsonArraythemes.size(); i++) {
        Theme.validateJsonElement(jsonArraythemes.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }

      JsonArray jsonArraytopics = jsonObj.getAsJsonArray("topics");
      // validate the required field `topics` (array)
      for (int i = 0; i < jsonArraytopics.size(); i++) {
        Topic.validateJsonElement(jsonArraytopics.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectionAnalyticData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectionAnalyticData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectionAnalyticData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectionAnalyticData.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectionAnalyticData>() {
           @Override
           public void write(JsonWriter out, CollectionAnalyticData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectionAnalyticData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectionAnalyticData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectionAnalyticData
   * @throws IOException if the JSON string is invalid with respect to CollectionAnalyticData
   */
  public static CollectionAnalyticData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectionAnalyticData.class);
  }

  /**
   * Convert an instance of CollectionAnalyticData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

