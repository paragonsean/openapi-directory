/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Mention;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Theme
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Theme {
  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private List<Mention> mentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NORMALIZED = "normalized";
  @SerializedName(SERIALIZED_NAME_NORMALIZED)
  private String normalized;

  public static final String SERIALIZED_NAME_PHRASES_COUNT = "phrases_count";
  @SerializedName(SERIALIZED_NAME_PHRASES_COUNT)
  private Integer phrasesCount;

  /**
   * Verbal representation of sentiment score. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   */
  @JsonAdapter(SentimentPolarityEnum.Adapter.class)
  public enum SentimentPolarityEnum {
    NEGATIVE("negative"),
    
    POSITIVE("positive"),
    
    NEUTRAL("neutral");

    private String value;

    SentimentPolarityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentPolarityEnum fromValue(String value) {
      for (SentimentPolarityEnum b : SentimentPolarityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentPolarityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentPolarityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentPolarityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentPolarityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SentimentPolarityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT_POLARITY = "sentiment_polarity";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_POLARITY)
  private SentimentPolarityEnum sentimentPolarity;

  public static final String SERIALIZED_NAME_SENTIMENT_SCORE = "sentiment_score";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_SCORE)
  private Double sentimentScore;

  public static final String SERIALIZED_NAME_STEMMED = "stemmed";
  @SerializedName(SERIALIZED_NAME_STEMMED)
  private String stemmed;

  public static final String SERIALIZED_NAME_THEMES_COUNT = "themes_count";
  @SerializedName(SERIALIZED_NAME_THEMES_COUNT)
  private Integer themesCount;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Theme() {
  }

  public Theme mentions(List<Mention> mentions) {
    this.mentions = mentions;
    return this;
  }

  public Theme addMentionsItem(Mention mentionsItem) {
    if (this.mentions == null) {
      this.mentions = new ArrayList<>();
    }
    this.mentions.add(mentionsItem);
    return this;
  }

  /**
   * Returns the concept and query defined topics determined for the text
   * @return mentions
   */
  @javax.annotation.Nonnull
  public List<Mention> getMentions() {
    return mentions;
  }

  public void setMentions(List<Mention> mentions) {
    this.mentions = mentions;
  }


  public Theme normalized(String normalized) {
    this.normalized = normalized;
    return this;
  }

  /**
   * The normalized form of the theme
   * @return normalized
   */
  @javax.annotation.Nonnull
  public String getNormalized() {
    return normalized;
  }

  public void setNormalized(String normalized) {
    this.normalized = normalized;
  }


  public Theme phrasesCount(Integer phrasesCount) {
    this.phrasesCount = phrasesCount;
    return this;
  }

  /**
   * Count of sentiment-bearing phrases was used in calculating theme&#39;s sentiment
   * minimum: 0
   * @return phrasesCount
   */
  @javax.annotation.Nonnull
  public Integer getPhrasesCount() {
    return phrasesCount;
  }

  public void setPhrasesCount(Integer phrasesCount) {
    this.phrasesCount = phrasesCount;
  }


  public Theme sentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
    return this;
  }

  /**
   * Verbal representation of sentiment score. Can be \&quot;negative\&quot;, \&quot;positive\&quot; or \&quot;neutral\&quot;
   * @return sentimentPolarity
   */
  @javax.annotation.Nonnull
  public SentimentPolarityEnum getSentimentPolarity() {
    return sentimentPolarity;
  }

  public void setSentimentPolarity(SentimentPolarityEnum sentimentPolarity) {
    this.sentimentPolarity = sentimentPolarity;
  }


  public Theme sentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

  /**
   * Sentiment score for themeâ€™s sentences across the documents
   * @return sentimentScore
   */
  @javax.annotation.Nonnull
  public Double getSentimentScore() {
    return sentimentScore;
  }

  public void setSentimentScore(Double sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  public Theme stemmed(String stemmed) {
    this.stemmed = stemmed;
    return this;
  }

  /**
   * The stemmed form of the theme
   * @return stemmed
   */
  @javax.annotation.Nonnull
  public String getStemmed() {
    return stemmed;
  }

  public void setStemmed(String stemmed) {
    this.stemmed = stemmed;
  }


  public Theme themesCount(Integer themesCount) {
    this.themesCount = themesCount;
    return this;
  }

  /**
   * Count of themes across the documents that got rolled into this one
   * minimum: 0
   * @return themesCount
   */
  @javax.annotation.Nonnull
  public Integer getThemesCount() {
    return themesCount;
  }

  public void setThemesCount(Integer themesCount) {
    this.themesCount = themesCount;
  }


  public Theme title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The text of the theme across the documents
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Theme theme = (Theme) o;
    return Objects.equals(this.mentions, theme.mentions) &&
        Objects.equals(this.normalized, theme.normalized) &&
        Objects.equals(this.phrasesCount, theme.phrasesCount) &&
        Objects.equals(this.sentimentPolarity, theme.sentimentPolarity) &&
        Objects.equals(this.sentimentScore, theme.sentimentScore) &&
        Objects.equals(this.stemmed, theme.stemmed) &&
        Objects.equals(this.themesCount, theme.themesCount) &&
        Objects.equals(this.title, theme.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mentions, normalized, phrasesCount, sentimentPolarity, sentimentScore, stemmed, themesCount, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Theme {\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    normalized: ").append(toIndentedString(normalized)).append("\n");
    sb.append("    phrasesCount: ").append(toIndentedString(phrasesCount)).append("\n");
    sb.append("    sentimentPolarity: ").append(toIndentedString(sentimentPolarity)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("    stemmed: ").append(toIndentedString(stemmed)).append("\n");
    sb.append("    themesCount: ").append(toIndentedString(themesCount)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mentions");
    openapiFields.add("normalized");
    openapiFields.add("phrases_count");
    openapiFields.add("sentiment_polarity");
    openapiFields.add("sentiment_score");
    openapiFields.add("stemmed");
    openapiFields.add("themes_count");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mentions");
    openapiRequiredFields.add("normalized");
    openapiRequiredFields.add("phrases_count");
    openapiRequiredFields.add("sentiment_polarity");
    openapiRequiredFields.add("sentiment_score");
    openapiRequiredFields.add("stemmed");
    openapiRequiredFields.add("themes_count");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Theme
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Theme.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Theme is not found in the empty JSON string", Theme.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Theme.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Theme` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Theme.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("mentions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentions` to be an array in the JSON string but got `%s`", jsonObj.get("mentions").toString()));
      }

      JsonArray jsonArraymentions = jsonObj.getAsJsonArray("mentions");
      // validate the required field `mentions` (array)
      for (int i = 0; i < jsonArraymentions.size(); i++) {
        Mention.validateJsonElement(jsonArraymentions.get(i));
      };
      if (!jsonObj.get("normalized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalized").toString()));
      }
      if (!jsonObj.get("sentiment_polarity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment_polarity").toString()));
      }
      // validate the required field `sentiment_polarity`
      SentimentPolarityEnum.validateJsonElement(jsonObj.get("sentiment_polarity"));
      if (!jsonObj.get("stemmed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stemmed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stemmed").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Theme.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Theme' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Theme> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Theme.class));

       return (TypeAdapter<T>) new TypeAdapter<Theme>() {
           @Override
           public void write(JsonWriter out, Theme value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Theme read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Theme given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Theme
   * @throws IOException if the JSON string is invalid with respect to Theme
   */
  public static Theme fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Theme.class);
  }

  /**
   * Convert an instance of Theme to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

