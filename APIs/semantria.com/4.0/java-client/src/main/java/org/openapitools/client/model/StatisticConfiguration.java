/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatisticConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatisticConfiguration {
  public static final String SERIALIZED_NAME_CALLS_DATA = "calls_data";
  @SerializedName(SERIALIZED_NAME_CALLS_DATA)
  private Integer callsData;

  public static final String SERIALIZED_NAME_CALLS_POLLING = "calls_polling";
  @SerializedName(SERIALIZED_NAME_CALLS_POLLING)
  private Integer callsPolling;

  public static final String SERIALIZED_NAME_CALLS_SETTINGS = "calls_settings";
  @SerializedName(SERIALIZED_NAME_CALLS_SETTINGS)
  private Integer callsSettings;

  public static final String SERIALIZED_NAME_COLLS_FAILED = "colls_failed";
  @SerializedName(SERIALIZED_NAME_COLLS_FAILED)
  private Integer collsFailed;

  public static final String SERIALIZED_NAME_COLLS_PROCESSED = "colls_processed";
  @SerializedName(SERIALIZED_NAME_COLLS_PROCESSED)
  private Integer collsProcessed;

  public static final String SERIALIZED_NAME_COLLS_RESPONDED = "colls_responded";
  @SerializedName(SERIALIZED_NAME_COLLS_RESPONDED)
  private Integer collsResponded;

  public static final String SERIALIZED_NAME_CONFIG_ID = "config_id";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private String configId;

  public static final String SERIALIZED_NAME_DOCS_FAILED = "docs_failed";
  @SerializedName(SERIALIZED_NAME_DOCS_FAILED)
  private Integer docsFailed;

  public static final String SERIALIZED_NAME_DOCS_PROCESSED = "docs_processed";
  @SerializedName(SERIALIZED_NAME_DOCS_PROCESSED)
  private Integer docsProcessed;

  public static final String SERIALIZED_NAME_DOCS_RESPONDED = "docs_responded";
  @SerializedName(SERIALIZED_NAME_DOCS_RESPONDED)
  private Integer docsResponded;

  public static final String SERIALIZED_NAME_LATEST_USED_APP = "latest_used_app";
  @SerializedName(SERIALIZED_NAME_LATEST_USED_APP)
  private String latestUsedApp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERALL_BATCHES = "overall_batches";
  @SerializedName(SERIALIZED_NAME_OVERALL_BATCHES)
  private Integer overallBatches;

  public static final String SERIALIZED_NAME_OVERALL_CALLS = "overall_calls";
  @SerializedName(SERIALIZED_NAME_OVERALL_CALLS)
  private Integer overallCalls;

  public static final String SERIALIZED_NAME_OVERALL_DOCS = "overall_docs";
  @SerializedName(SERIALIZED_NAME_OVERALL_DOCS)
  private Integer overallDocs;

  public static final String SERIALIZED_NAME_OVERALL_EXCEEDED = "overall_exceeded";
  @SerializedName(SERIALIZED_NAME_OVERALL_EXCEEDED)
  private Integer overallExceeded;

  public static final String SERIALIZED_NAME_OVERALL_TEXTS = "overall_texts";
  @SerializedName(SERIALIZED_NAME_OVERALL_TEXTS)
  private Integer overallTexts;

  public static final String SERIALIZED_NAME_OVERCALL_COLLS = "overcall_colls";
  @SerializedName(SERIALIZED_NAME_OVERCALL_COLLS)
  private Integer overcallColls;

  public static final String SERIALIZED_NAME_USED_APPS = "used_apps";
  @SerializedName(SERIALIZED_NAME_USED_APPS)
  private String usedApps;

  public StatisticConfiguration() {
  }

  public StatisticConfiguration callsData(Integer callsData) {
    this.callsData = callsData;
    return this;
  }

  /**
   * Total number of data API calls made. These affect you API balance
   * minimum: 0
   * @return callsData
   */
  @javax.annotation.Nonnull
  public Integer getCallsData() {
    return callsData;
  }

  public void setCallsData(Integer callsData) {
    this.callsData = callsData;
  }


  public StatisticConfiguration callsPolling(Integer callsPolling) {
    this.callsPolling = callsPolling;
    return this;
  }

  /**
   * Total number of polling API calls made. These do not affect API balance
   * minimum: 0
   * @return callsPolling
   */
  @javax.annotation.Nonnull
  public Integer getCallsPolling() {
    return callsPolling;
  }

  public void setCallsPolling(Integer callsPolling) {
    this.callsPolling = callsPolling;
  }


  public StatisticConfiguration callsSettings(Integer callsSettings) {
    this.callsSettings = callsSettings;
    return this;
  }

  /**
   * Total number of settings API calls made. These do not affect API balance
   * minimum: 0
   * @return callsSettings
   */
  @javax.annotation.Nonnull
  public Integer getCallsSettings() {
    return callsSettings;
  }

  public void setCallsSettings(Integer callsSettings) {
    this.callsSettings = callsSettings;
  }


  public StatisticConfiguration collsFailed(Integer collsFailed) {
    this.collsFailed = collsFailed;
    return this;
  }

  /**
   * Total number of collections that have failed to be processed
   * minimum: 0
   * @return collsFailed
   */
  @javax.annotation.Nonnull
  public Integer getCollsFailed() {
    return collsFailed;
  }

  public void setCollsFailed(Integer collsFailed) {
    this.collsFailed = collsFailed;
  }


  public StatisticConfiguration collsProcessed(Integer collsProcessed) {
    this.collsProcessed = collsProcessed;
    return this;
  }

  /**
   * Total numbers of collections that have been successfully processed
   * minimum: 0
   * @return collsProcessed
   */
  @javax.annotation.Nonnull
  public Integer getCollsProcessed() {
    return collsProcessed;
  }

  public void setCollsProcessed(Integer collsProcessed) {
    this.collsProcessed = collsProcessed;
  }


  public StatisticConfiguration collsResponded(Integer collsResponded) {
    this.collsResponded = collsResponded;
    return this;
  }

  /**
   * Total number of successfully processed collections that have been returned
   * minimum: 0
   * @return collsResponded
   */
  @javax.annotation.Nonnull
  public Integer getCollsResponded() {
    return collsResponded;
  }

  public void setCollsResponded(Integer collsResponded) {
    this.collsResponded = collsResponded;
  }


  public StatisticConfiguration configId(String configId) {
    this.configId = configId;
    return this;
  }

  /**
   * Unique identifier of configuration
   * @return configId
   */
  @javax.annotation.Nonnull
  public String getConfigId() {
    return configId;
  }

  public void setConfigId(String configId) {
    this.configId = configId;
  }


  public StatisticConfiguration docsFailed(Integer docsFailed) {
    this.docsFailed = docsFailed;
    return this;
  }

  /**
   * Total number of documents that have failed to be processed
   * minimum: 0
   * @return docsFailed
   */
  @javax.annotation.Nonnull
  public Integer getDocsFailed() {
    return docsFailed;
  }

  public void setDocsFailed(Integer docsFailed) {
    this.docsFailed = docsFailed;
  }


  public StatisticConfiguration docsProcessed(Integer docsProcessed) {
    this.docsProcessed = docsProcessed;
    return this;
  }

  /**
   * Total number of documents that have been successfully processed
   * minimum: 0
   * @return docsProcessed
   */
  @javax.annotation.Nonnull
  public Integer getDocsProcessed() {
    return docsProcessed;
  }

  public void setDocsProcessed(Integer docsProcessed) {
    this.docsProcessed = docsProcessed;
  }


  public StatisticConfiguration docsResponded(Integer docsResponded) {
    this.docsResponded = docsResponded;
    return this;
  }

  /**
   * Total number of successfully processed documents that have been returned
   * minimum: 0
   * @return docsResponded
   */
  @javax.annotation.Nonnull
  public Integer getDocsResponded() {
    return docsResponded;
  }

  public void setDocsResponded(Integer docsResponded) {
    this.docsResponded = docsResponded;
  }


  public StatisticConfiguration latestUsedApp(String latestUsedApp) {
    this.latestUsedApp = latestUsedApp;
    return this;
  }

  /**
   * The latest application that used the API on this account
   * @return latestUsedApp
   */
  @javax.annotation.Nonnull
  public String getLatestUsedApp() {
    return latestUsedApp;
  }

  public void setLatestUsedApp(String latestUsedApp) {
    this.latestUsedApp = latestUsedApp;
  }


  public StatisticConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of configuration
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StatisticConfiguration overallBatches(Integer overallBatches) {
    this.overallBatches = overallBatches;
    return this;
  }

  /**
   * Total number of queued batches of texts processed
   * minimum: 0
   * @return overallBatches
   */
  @javax.annotation.Nonnull
  public Integer getOverallBatches() {
    return overallBatches;
  }

  public void setOverallBatches(Integer overallBatches) {
    this.overallBatches = overallBatches;
  }


  public StatisticConfiguration overallCalls(Integer overallCalls) {
    this.overallCalls = overallCalls;
    return this;
  }

  /**
   * Total number of API calls made
   * minimum: 0
   * @return overallCalls
   */
  @javax.annotation.Nonnull
  public Integer getOverallCalls() {
    return overallCalls;
  }

  public void setOverallCalls(Integer overallCalls) {
    this.overallCalls = overallCalls;
  }


  public StatisticConfiguration overallDocs(Integer overallDocs) {
    this.overallDocs = overallDocs;
    return this;
  }

  /**
   * Total number of documents that have been queued
   * minimum: 0
   * @return overallDocs
   */
  @javax.annotation.Nonnull
  public Integer getOverallDocs() {
    return overallDocs;
  }

  public void setOverallDocs(Integer overallDocs) {
    this.overallDocs = overallDocs;
  }


  public StatisticConfiguration overallExceeded(Integer overallExceeded) {
    this.overallExceeded = overallExceeded;
    return this;
  }

  /**
   * Total number of documents that have exceeded the favorable (suggested) limit
   * minimum: 0
   * @return overallExceeded
   */
  @javax.annotation.Nonnull
  public Integer getOverallExceeded() {
    return overallExceeded;
  }

  public void setOverallExceeded(Integer overallExceeded) {
    this.overallExceeded = overallExceeded;
  }


  public StatisticConfiguration overallTexts(Integer overallTexts) {
    this.overallTexts = overallTexts;
    return this;
  }

  /**
   * Total number of texts processed
   * minimum: 0
   * @return overallTexts
   */
  @javax.annotation.Nonnull
  public Integer getOverallTexts() {
    return overallTexts;
  }

  public void setOverallTexts(Integer overallTexts) {
    this.overallTexts = overallTexts;
  }


  public StatisticConfiguration overcallColls(Integer overcallColls) {
    this.overcallColls = overcallColls;
    return this;
  }

  /**
   * Total numbers of collections that have been queued
   * minimum: 0
   * @return overcallColls
   */
  @javax.annotation.Nonnull
  public Integer getOvercallColls() {
    return overcallColls;
  }

  public void setOvercallColls(Integer overcallColls) {
    this.overcallColls = overcallColls;
  }


  public StatisticConfiguration usedApps(String usedApps) {
    this.usedApps = usedApps;
    return this;
  }

  /**
   * A list of all the applications that have used the API on this account
   * @return usedApps
   */
  @javax.annotation.Nonnull
  public String getUsedApps() {
    return usedApps;
  }

  public void setUsedApps(String usedApps) {
    this.usedApps = usedApps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatisticConfiguration statisticConfiguration = (StatisticConfiguration) o;
    return Objects.equals(this.callsData, statisticConfiguration.callsData) &&
        Objects.equals(this.callsPolling, statisticConfiguration.callsPolling) &&
        Objects.equals(this.callsSettings, statisticConfiguration.callsSettings) &&
        Objects.equals(this.collsFailed, statisticConfiguration.collsFailed) &&
        Objects.equals(this.collsProcessed, statisticConfiguration.collsProcessed) &&
        Objects.equals(this.collsResponded, statisticConfiguration.collsResponded) &&
        Objects.equals(this.configId, statisticConfiguration.configId) &&
        Objects.equals(this.docsFailed, statisticConfiguration.docsFailed) &&
        Objects.equals(this.docsProcessed, statisticConfiguration.docsProcessed) &&
        Objects.equals(this.docsResponded, statisticConfiguration.docsResponded) &&
        Objects.equals(this.latestUsedApp, statisticConfiguration.latestUsedApp) &&
        Objects.equals(this.name, statisticConfiguration.name) &&
        Objects.equals(this.overallBatches, statisticConfiguration.overallBatches) &&
        Objects.equals(this.overallCalls, statisticConfiguration.overallCalls) &&
        Objects.equals(this.overallDocs, statisticConfiguration.overallDocs) &&
        Objects.equals(this.overallExceeded, statisticConfiguration.overallExceeded) &&
        Objects.equals(this.overallTexts, statisticConfiguration.overallTexts) &&
        Objects.equals(this.overcallColls, statisticConfiguration.overcallColls) &&
        Objects.equals(this.usedApps, statisticConfiguration.usedApps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callsData, callsPolling, callsSettings, collsFailed, collsProcessed, collsResponded, configId, docsFailed, docsProcessed, docsResponded, latestUsedApp, name, overallBatches, overallCalls, overallDocs, overallExceeded, overallTexts, overcallColls, usedApps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatisticConfiguration {\n");
    sb.append("    callsData: ").append(toIndentedString(callsData)).append("\n");
    sb.append("    callsPolling: ").append(toIndentedString(callsPolling)).append("\n");
    sb.append("    callsSettings: ").append(toIndentedString(callsSettings)).append("\n");
    sb.append("    collsFailed: ").append(toIndentedString(collsFailed)).append("\n");
    sb.append("    collsProcessed: ").append(toIndentedString(collsProcessed)).append("\n");
    sb.append("    collsResponded: ").append(toIndentedString(collsResponded)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    docsFailed: ").append(toIndentedString(docsFailed)).append("\n");
    sb.append("    docsProcessed: ").append(toIndentedString(docsProcessed)).append("\n");
    sb.append("    docsResponded: ").append(toIndentedString(docsResponded)).append("\n");
    sb.append("    latestUsedApp: ").append(toIndentedString(latestUsedApp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overallBatches: ").append(toIndentedString(overallBatches)).append("\n");
    sb.append("    overallCalls: ").append(toIndentedString(overallCalls)).append("\n");
    sb.append("    overallDocs: ").append(toIndentedString(overallDocs)).append("\n");
    sb.append("    overallExceeded: ").append(toIndentedString(overallExceeded)).append("\n");
    sb.append("    overallTexts: ").append(toIndentedString(overallTexts)).append("\n");
    sb.append("    overcallColls: ").append(toIndentedString(overcallColls)).append("\n");
    sb.append("    usedApps: ").append(toIndentedString(usedApps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calls_data");
    openapiFields.add("calls_polling");
    openapiFields.add("calls_settings");
    openapiFields.add("colls_failed");
    openapiFields.add("colls_processed");
    openapiFields.add("colls_responded");
    openapiFields.add("config_id");
    openapiFields.add("docs_failed");
    openapiFields.add("docs_processed");
    openapiFields.add("docs_responded");
    openapiFields.add("latest_used_app");
    openapiFields.add("name");
    openapiFields.add("overall_batches");
    openapiFields.add("overall_calls");
    openapiFields.add("overall_docs");
    openapiFields.add("overall_exceeded");
    openapiFields.add("overall_texts");
    openapiFields.add("overcall_colls");
    openapiFields.add("used_apps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calls_data");
    openapiRequiredFields.add("calls_polling");
    openapiRequiredFields.add("calls_settings");
    openapiRequiredFields.add("colls_failed");
    openapiRequiredFields.add("colls_processed");
    openapiRequiredFields.add("colls_responded");
    openapiRequiredFields.add("config_id");
    openapiRequiredFields.add("docs_failed");
    openapiRequiredFields.add("docs_processed");
    openapiRequiredFields.add("docs_responded");
    openapiRequiredFields.add("latest_used_app");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("overall_batches");
    openapiRequiredFields.add("overall_calls");
    openapiRequiredFields.add("overall_docs");
    openapiRequiredFields.add("overall_exceeded");
    openapiRequiredFields.add("overall_texts");
    openapiRequiredFields.add("overcall_colls");
    openapiRequiredFields.add("used_apps");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatisticConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatisticConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatisticConfiguration is not found in the empty JSON string", StatisticConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatisticConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatisticConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatisticConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("config_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_id").toString()));
      }
      if (!jsonObj.get("latest_used_app").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_used_app` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_used_app").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("used_apps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `used_apps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("used_apps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatisticConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatisticConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatisticConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatisticConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<StatisticConfiguration>() {
           @Override
           public void write(JsonWriter out, StatisticConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatisticConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatisticConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatisticConfiguration
   * @throws IOException if the JSON string is invalid with respect to StatisticConfiguration
   */
  public static StatisticConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatisticConfiguration.class);
  }

  /**
   * Convert an instance of StatisticConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

