/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FeatureDetailedModeSection;
import org.openapitools.client.model.FeatureDiscoveryModeSection;
import org.openapitools.client.model.FeatureSettingsSection;
import org.openapitools.client.model.FeatureTemplateSection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Feature
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feature {
  public static final String SERIALIZED_NAME_DETAILED_MODE = "detailed_mode";
  @SerializedName(SERIALIZED_NAME_DETAILED_MODE)
  private FeatureDetailedModeSection detailedMode;

  public static final String SERIALIZED_NAME_DISCOVERY_MODE = "discovery_mode";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_MODE)
  private FeatureDiscoveryModeSection discoveryMode;

  public static final String SERIALIZED_NAME_HTML_PROCESSING = "html_processing";
  @SerializedName(SERIALIZED_NAME_HTML_PROCESSING)
  private Boolean htmlProcessing;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_ONE_SENTENCE_MODE = "one_sentence_mode";
  @SerializedName(SERIALIZED_NAME_ONE_SENTENCE_MODE)
  private Boolean oneSentenceMode;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private FeatureSettingsSection settings;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private FeatureTemplateSection templates;

  public Feature() {
  }

  public Feature detailedMode(FeatureDetailedModeSection detailedMode) {
    this.detailedMode = detailedMode;
    return this;
  }

  /**
   * Get detailedMode
   * @return detailedMode
   */
  @javax.annotation.Nonnull
  public FeatureDetailedModeSection getDetailedMode() {
    return detailedMode;
  }

  public void setDetailedMode(FeatureDetailedModeSection detailedMode) {
    this.detailedMode = detailedMode;
  }


  public Feature discoveryMode(FeatureDiscoveryModeSection discoveryMode) {
    this.discoveryMode = discoveryMode;
    return this;
  }

  /**
   * Get discoveryMode
   * @return discoveryMode
   */
  @javax.annotation.Nonnull
  public FeatureDiscoveryModeSection getDiscoveryMode() {
    return discoveryMode;
  }

  public void setDiscoveryMode(FeatureDiscoveryModeSection discoveryMode) {
    this.discoveryMode = discoveryMode;
  }


  public Feature htmlProcessing(Boolean htmlProcessing) {
    this.htmlProcessing = htmlProcessing;
    return this;
  }

  /**
   * Represents whether HTML processing supported for certain language or not
   * @return htmlProcessing
   */
  @javax.annotation.Nonnull
  public Boolean getHtmlProcessing() {
    return htmlProcessing;
  }

  public void setHtmlProcessing(Boolean htmlProcessing) {
    this.htmlProcessing = htmlProcessing;
  }


  public Feature id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique language identifier
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Feature language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Represents language following options relevant to
   * @return language
   */
  @javax.annotation.Nonnull
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Feature oneSentenceMode(Boolean oneSentenceMode) {
    this.oneSentenceMode = oneSentenceMode;
    return this;
  }

  /**
   * Considers entire text as one sentence and uses optimized chunker for short content like tweets.
   * @return oneSentenceMode
   */
  @javax.annotation.Nonnull
  public Boolean getOneSentenceMode() {
    return oneSentenceMode;
  }

  public void setOneSentenceMode(Boolean oneSentenceMode) {
    this.oneSentenceMode = oneSentenceMode;
  }


  public Feature settings(FeatureSettingsSection settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nonnull
  public FeatureSettingsSection getSettings() {
    return settings;
  }

  public void setSettings(FeatureSettingsSection settings) {
    this.settings = settings;
  }


  public Feature templates(FeatureTemplateSection templates) {
    this.templates = templates;
    return this;
  }

  /**
   * Get templates
   * @return templates
   */
  @javax.annotation.Nonnull
  public FeatureTemplateSection getTemplates() {
    return templates;
  }

  public void setTemplates(FeatureTemplateSection templates) {
    this.templates = templates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feature feature = (Feature) o;
    return Objects.equals(this.detailedMode, feature.detailedMode) &&
        Objects.equals(this.discoveryMode, feature.discoveryMode) &&
        Objects.equals(this.htmlProcessing, feature.htmlProcessing) &&
        Objects.equals(this.id, feature.id) &&
        Objects.equals(this.language, feature.language) &&
        Objects.equals(this.oneSentenceMode, feature.oneSentenceMode) &&
        Objects.equals(this.settings, feature.settings) &&
        Objects.equals(this.templates, feature.templates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detailedMode, discoveryMode, htmlProcessing, id, language, oneSentenceMode, settings, templates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feature {\n");
    sb.append("    detailedMode: ").append(toIndentedString(detailedMode)).append("\n");
    sb.append("    discoveryMode: ").append(toIndentedString(discoveryMode)).append("\n");
    sb.append("    htmlProcessing: ").append(toIndentedString(htmlProcessing)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    oneSentenceMode: ").append(toIndentedString(oneSentenceMode)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detailed_mode");
    openapiFields.add("discovery_mode");
    openapiFields.add("html_processing");
    openapiFields.add("id");
    openapiFields.add("language");
    openapiFields.add("one_sentence_mode");
    openapiFields.add("settings");
    openapiFields.add("templates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("detailed_mode");
    openapiRequiredFields.add("discovery_mode");
    openapiRequiredFields.add("html_processing");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("one_sentence_mode");
    openapiRequiredFields.add("settings");
    openapiRequiredFields.add("templates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feature is not found in the empty JSON string", Feature.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feature` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Feature.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `detailed_mode`
      FeatureDetailedModeSection.validateJsonElement(jsonObj.get("detailed_mode"));
      // validate the required field `discovery_mode`
      FeatureDiscoveryModeSection.validateJsonElement(jsonObj.get("discovery_mode"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the required field `settings`
      FeatureSettingsSection.validateJsonElement(jsonObj.get("settings"));
      // validate the required field `templates`
      FeatureTemplateSection.validateJsonElement(jsonObj.get("templates"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feature.class));

       return (TypeAdapter<T>) new TypeAdapter<Feature>() {
           @Override
           public void write(JsonWriter out, Feature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feature
   * @throws IOException if the JSON string is invalid with respect to Feature
   */
  public static Feature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feature.class);
  }

  /**
   * Convert an instance of Feature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

