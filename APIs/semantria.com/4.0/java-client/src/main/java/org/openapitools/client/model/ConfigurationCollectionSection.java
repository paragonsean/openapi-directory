/*
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationCollectionSection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:53.720541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationCollectionSection {
  public static final String SERIALIZED_NAME_ATTRIBUTE_MENTIONS_LIMIT = "attribute_mentions_limit";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_MENTIONS_LIMIT)
  private Integer attributeMentionsLimit;

  public static final String SERIALIZED_NAME_CONCEPT_TOPICS_LIMIT = "concept_topics_limit";
  @SerializedName(SERIALIZED_NAME_CONCEPT_TOPICS_LIMIT)
  private Integer conceptTopicsLimit;

  public static final String SERIALIZED_NAME_FACET_ATTS_LIMIT = "facet_atts_limit";
  @SerializedName(SERIALIZED_NAME_FACET_ATTS_LIMIT)
  private Integer facetAttsLimit;

  public static final String SERIALIZED_NAME_FACET_MENTIONS_LIMIT = "facet_mentions_limit";
  @SerializedName(SERIALIZED_NAME_FACET_MENTIONS_LIMIT)
  private Integer facetMentionsLimit;

  public static final String SERIALIZED_NAME_FACETS_LIMIT = "facets_limit";
  @SerializedName(SERIALIZED_NAME_FACETS_LIMIT)
  private Integer facetsLimit;

  public static final String SERIALIZED_NAME_NAMED_ENTITIES_LIMIT = "named_entities_limit";
  @SerializedName(SERIALIZED_NAME_NAMED_ENTITIES_LIMIT)
  private Integer namedEntitiesLimit;

  public static final String SERIALIZED_NAME_NAMED_MENTIONS_LIMIT = "named_mentions_limit";
  @SerializedName(SERIALIZED_NAME_NAMED_MENTIONS_LIMIT)
  private Integer namedMentionsLimit;

  public static final String SERIALIZED_NAME_QUERY_TOPICS_LIMIT = "query_topics_limit";
  @SerializedName(SERIALIZED_NAME_QUERY_TOPICS_LIMIT)
  private Integer queryTopicsLimit;

  public static final String SERIALIZED_NAME_THEME_MENTIONS_LIMIT = "theme_mentions_limit";
  @SerializedName(SERIALIZED_NAME_THEME_MENTIONS_LIMIT)
  private Integer themeMentionsLimit;

  public static final String SERIALIZED_NAME_THEMES_LIMIT = "themes_limit";
  @SerializedName(SERIALIZED_NAME_THEMES_LIMIT)
  private Integer themesLimit;

  public static final String SERIALIZED_NAME_USER_ENTITIES_LIMIT = "user_entities_limit";
  @SerializedName(SERIALIZED_NAME_USER_ENTITIES_LIMIT)
  private Integer userEntitiesLimit;

  public static final String SERIALIZED_NAME_USER_MENTIONS_LIMIT = "user_mentions_limit";
  @SerializedName(SERIALIZED_NAME_USER_MENTIONS_LIMIT)
  private Integer userMentionsLimit;

  public ConfigurationCollectionSection() {
  }

  public ConfigurationCollectionSection attributeMentionsLimit(Integer attributeMentionsLimit) {
    this.attributeMentionsLimit = attributeMentionsLimit;
    return this;
  }

  /**
   * Limits the number of mentions of attribute responded from the server. Default: 0
   * minimum: 0
   * maximum: 20
   * @return attributeMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getAttributeMentionsLimit() {
    return attributeMentionsLimit;
  }

  public void setAttributeMentionsLimit(Integer attributeMentionsLimit) {
    this.attributeMentionsLimit = attributeMentionsLimit;
  }


  public ConfigurationCollectionSection conceptTopicsLimit(Integer conceptTopicsLimit) {
    this.conceptTopicsLimit = conceptTopicsLimit;
    return this;
  }

  /**
   * Limits the number of concept topics responded from the service. Default: 5
   * minimum: 0
   * maximum: 20
   * @return conceptTopicsLimit
   */
  @javax.annotation.Nonnull
  public Integer getConceptTopicsLimit() {
    return conceptTopicsLimit;
  }

  public void setConceptTopicsLimit(Integer conceptTopicsLimit) {
    this.conceptTopicsLimit = conceptTopicsLimit;
  }


  public ConfigurationCollectionSection facetAttsLimit(Integer facetAttsLimit) {
    this.facetAttsLimit = facetAttsLimit;
    return this;
  }

  /**
   * Limits the number of facets which will be responded from the server. Default: 5
   * minimum: 0
   * maximum: 20
   * @return facetAttsLimit
   */
  @javax.annotation.Nonnull
  public Integer getFacetAttsLimit() {
    return facetAttsLimit;
  }

  public void setFacetAttsLimit(Integer facetAttsLimit) {
    this.facetAttsLimit = facetAttsLimit;
  }


  public ConfigurationCollectionSection facetMentionsLimit(Integer facetMentionsLimit) {
    this.facetMentionsLimit = facetMentionsLimit;
    return this;
  }

  /**
   * Limits the number of mentions of facet responded from the server. Default: 0
   * minimum: 0
   * maximum: 20
   * @return facetMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getFacetMentionsLimit() {
    return facetMentionsLimit;
  }

  public void setFacetMentionsLimit(Integer facetMentionsLimit) {
    this.facetMentionsLimit = facetMentionsLimit;
  }


  public ConfigurationCollectionSection facetsLimit(Integer facetsLimit) {
    this.facetsLimit = facetsLimit;
    return this;
  }

  /**
   * Limits the number of facets which will be responded from the server.  Default: 15
   * minimum: 0
   * maximum: 20
   * @return facetsLimit
   */
  @javax.annotation.Nonnull
  public Integer getFacetsLimit() {
    return facetsLimit;
  }

  public void setFacetsLimit(Integer facetsLimit) {
    this.facetsLimit = facetsLimit;
  }


  public ConfigurationCollectionSection namedEntitiesLimit(Integer namedEntitiesLimit) {
    this.namedEntitiesLimit = namedEntitiesLimit;
    return this;
  }

  /**
   * Limits the number of named entities responded from the service. Default: 5
   * minimum: 0
   * maximum: 20
   * @return namedEntitiesLimit
   */
  @javax.annotation.Nonnull
  public Integer getNamedEntitiesLimit() {
    return namedEntitiesLimit;
  }

  public void setNamedEntitiesLimit(Integer namedEntitiesLimit) {
    this.namedEntitiesLimit = namedEntitiesLimit;
  }


  public ConfigurationCollectionSection namedMentionsLimit(Integer namedMentionsLimit) {
    this.namedMentionsLimit = namedMentionsLimit;
    return this;
  }

  /**
   * Limits the number of mentions of theme responded from the server. Default: 0
   * minimum: 0
   * maximum: 20
   * @return namedMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getNamedMentionsLimit() {
    return namedMentionsLimit;
  }

  public void setNamedMentionsLimit(Integer namedMentionsLimit) {
    this.namedMentionsLimit = namedMentionsLimit;
  }


  public ConfigurationCollectionSection queryTopicsLimit(Integer queryTopicsLimit) {
    this.queryTopicsLimit = queryTopicsLimit;
    return this;
  }

  /**
   * Limits the number of query topics responded from the service. Default: 5
   * minimum: 0
   * maximum: 20
   * @return queryTopicsLimit
   */
  @javax.annotation.Nonnull
  public Integer getQueryTopicsLimit() {
    return queryTopicsLimit;
  }

  public void setQueryTopicsLimit(Integer queryTopicsLimit) {
    this.queryTopicsLimit = queryTopicsLimit;
  }


  public ConfigurationCollectionSection themeMentionsLimit(Integer themeMentionsLimit) {
    this.themeMentionsLimit = themeMentionsLimit;
    return this;
  }

  /**
   * Limits the number of entity mentions responded from the server. Default: 0
   * minimum: 0
   * maximum: 20
   * @return themeMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getThemeMentionsLimit() {
    return themeMentionsLimit;
  }

  public void setThemeMentionsLimit(Integer themeMentionsLimit) {
    this.themeMentionsLimit = themeMentionsLimit;
  }


  public ConfigurationCollectionSection themesLimit(Integer themesLimit) {
    this.themesLimit = themesLimit;
    return this;
  }

  /**
   * Limits the number of themes responded from the service. Default: 5
   * minimum: 0
   * maximum: 20
   * @return themesLimit
   */
  @javax.annotation.Nonnull
  public Integer getThemesLimit() {
    return themesLimit;
  }

  public void setThemesLimit(Integer themesLimit) {
    this.themesLimit = themesLimit;
  }


  public ConfigurationCollectionSection userEntitiesLimit(Integer userEntitiesLimit) {
    this.userEntitiesLimit = userEntitiesLimit;
    return this;
  }

  /**
   * Limits the number of user entities the service responds. Default: 15
   * minimum: 0
   * maximum: 20
   * @return userEntitiesLimit
   */
  @javax.annotation.Nonnull
  public Integer getUserEntitiesLimit() {
    return userEntitiesLimit;
  }

  public void setUserEntitiesLimit(Integer userEntitiesLimit) {
    this.userEntitiesLimit = userEntitiesLimit;
  }


  public ConfigurationCollectionSection userMentionsLimit(Integer userMentionsLimit) {
    this.userMentionsLimit = userMentionsLimit;
    return this;
  }

  /**
   * Limits the number of user entity mentions the service responds. Default: 0
   * minimum: 0
   * maximum: 20
   * @return userMentionsLimit
   */
  @javax.annotation.Nonnull
  public Integer getUserMentionsLimit() {
    return userMentionsLimit;
  }

  public void setUserMentionsLimit(Integer userMentionsLimit) {
    this.userMentionsLimit = userMentionsLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationCollectionSection configurationCollectionSection = (ConfigurationCollectionSection) o;
    return Objects.equals(this.attributeMentionsLimit, configurationCollectionSection.attributeMentionsLimit) &&
        Objects.equals(this.conceptTopicsLimit, configurationCollectionSection.conceptTopicsLimit) &&
        Objects.equals(this.facetAttsLimit, configurationCollectionSection.facetAttsLimit) &&
        Objects.equals(this.facetMentionsLimit, configurationCollectionSection.facetMentionsLimit) &&
        Objects.equals(this.facetsLimit, configurationCollectionSection.facetsLimit) &&
        Objects.equals(this.namedEntitiesLimit, configurationCollectionSection.namedEntitiesLimit) &&
        Objects.equals(this.namedMentionsLimit, configurationCollectionSection.namedMentionsLimit) &&
        Objects.equals(this.queryTopicsLimit, configurationCollectionSection.queryTopicsLimit) &&
        Objects.equals(this.themeMentionsLimit, configurationCollectionSection.themeMentionsLimit) &&
        Objects.equals(this.themesLimit, configurationCollectionSection.themesLimit) &&
        Objects.equals(this.userEntitiesLimit, configurationCollectionSection.userEntitiesLimit) &&
        Objects.equals(this.userMentionsLimit, configurationCollectionSection.userMentionsLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeMentionsLimit, conceptTopicsLimit, facetAttsLimit, facetMentionsLimit, facetsLimit, namedEntitiesLimit, namedMentionsLimit, queryTopicsLimit, themeMentionsLimit, themesLimit, userEntitiesLimit, userMentionsLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationCollectionSection {\n");
    sb.append("    attributeMentionsLimit: ").append(toIndentedString(attributeMentionsLimit)).append("\n");
    sb.append("    conceptTopicsLimit: ").append(toIndentedString(conceptTopicsLimit)).append("\n");
    sb.append("    facetAttsLimit: ").append(toIndentedString(facetAttsLimit)).append("\n");
    sb.append("    facetMentionsLimit: ").append(toIndentedString(facetMentionsLimit)).append("\n");
    sb.append("    facetsLimit: ").append(toIndentedString(facetsLimit)).append("\n");
    sb.append("    namedEntitiesLimit: ").append(toIndentedString(namedEntitiesLimit)).append("\n");
    sb.append("    namedMentionsLimit: ").append(toIndentedString(namedMentionsLimit)).append("\n");
    sb.append("    queryTopicsLimit: ").append(toIndentedString(queryTopicsLimit)).append("\n");
    sb.append("    themeMentionsLimit: ").append(toIndentedString(themeMentionsLimit)).append("\n");
    sb.append("    themesLimit: ").append(toIndentedString(themesLimit)).append("\n");
    sb.append("    userEntitiesLimit: ").append(toIndentedString(userEntitiesLimit)).append("\n");
    sb.append("    userMentionsLimit: ").append(toIndentedString(userMentionsLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute_mentions_limit");
    openapiFields.add("concept_topics_limit");
    openapiFields.add("facet_atts_limit");
    openapiFields.add("facet_mentions_limit");
    openapiFields.add("facets_limit");
    openapiFields.add("named_entities_limit");
    openapiFields.add("named_mentions_limit");
    openapiFields.add("query_topics_limit");
    openapiFields.add("theme_mentions_limit");
    openapiFields.add("themes_limit");
    openapiFields.add("user_entities_limit");
    openapiFields.add("user_mentions_limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute_mentions_limit");
    openapiRequiredFields.add("concept_topics_limit");
    openapiRequiredFields.add("facet_atts_limit");
    openapiRequiredFields.add("facet_mentions_limit");
    openapiRequiredFields.add("facets_limit");
    openapiRequiredFields.add("named_entities_limit");
    openapiRequiredFields.add("named_mentions_limit");
    openapiRequiredFields.add("query_topics_limit");
    openapiRequiredFields.add("theme_mentions_limit");
    openapiRequiredFields.add("themes_limit");
    openapiRequiredFields.add("user_entities_limit");
    openapiRequiredFields.add("user_mentions_limit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationCollectionSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationCollectionSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationCollectionSection is not found in the empty JSON string", ConfigurationCollectionSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationCollectionSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationCollectionSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigurationCollectionSection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationCollectionSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationCollectionSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationCollectionSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationCollectionSection.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationCollectionSection>() {
           @Override
           public void write(JsonWriter out, ConfigurationCollectionSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationCollectionSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationCollectionSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationCollectionSection
   * @throws IOException if the JSON string is invalid with respect to ConfigurationCollectionSection
   */
  public static ConfigurationCollectionSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationCollectionSection.class);
  }

  /**
   * Convert an instance of ConfigurationCollectionSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

