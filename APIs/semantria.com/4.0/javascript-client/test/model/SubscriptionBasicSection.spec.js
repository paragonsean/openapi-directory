/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Semantria);
  }
}(this, function(expect, Semantria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Semantria.SubscriptionBasicSection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubscriptionBasicSection', function() {
    it('should create an instance of SubscriptionBasicSection', function() {
      // uncomment below and update the code to test SubscriptionBasicSection
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be.a(Semantria.SubscriptionBasicSection);
    });

    it('should have the property autoResponseLimit (base name: "auto_response_limit")', function() {
      // uncomment below and update the code to test the property autoResponseLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property batchLimit (base name: "batch_limit")', function() {
      // uncomment below and update the code to test the property batchLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property blacklistLimit (base name: "blacklist_limit")', function() {
      // uncomment below and update the code to test the property blacklistLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property callbackBatchLimit (base name: "callback_batch_limit")', function() {
      // uncomment below and update the code to test the property callbackBatchLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property categoriesLimit (base name: "categories_limit")', function() {
      // uncomment below and update the code to test the property categoriesLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property categorySamplesLimit (base name: "category_samples_limit")', function() {
      // uncomment below and update the code to test the property categorySamplesLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property charactersLimit (base name: "characters_limit")', function() {
      // uncomment below and update the code to test the property charactersLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property collectionLimit (base name: "collection_limit")', function() {
      // uncomment below and update the code to test the property collectionLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property configurationsLimit (base name: "configurations_limit")', function() {
      // uncomment below and update the code to test the property configurationsLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property entitiesLimit (base name: "entities_limit")', function() {
      // uncomment below and update the code to test the property entitiesLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property outputDataLimit (base name: "output_data_limit")', function() {
      // uncomment below and update the code to test the property outputDataLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property processedBatchLimit (base name: "processed_batch_limit")', function() {
      // uncomment below and update the code to test the property processedBatchLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property queriesLimit (base name: "queries_limit")', function() {
      // uncomment below and update the code to test the property queriesLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property returnSourceText (base name: "return_source_text")', function() {
      // uncomment below and update the code to test the property returnSourceText
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

    it('should have the property sentimentLimit (base name: "sentiment_limit")', function() {
      // uncomment below and update the code to test the property sentimentLimit
      //var instance = new Semantria.SubscriptionBasicSection();
      //expect(instance).to.be();
    });

  });

}));
