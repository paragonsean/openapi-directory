/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Semantria);
  }
}(this, function(expect, Semantria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Semantria.Statistic();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Statistic', function() {
    it('should create an instance of Statistic', function() {
      // uncomment below and update the code to test Statistic
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be.a(Semantria.Statistic);
    });

    it('should have the property callsData (base name: "calls_data")', function() {
      // uncomment below and update the code to test the property callsData
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property callsPolling (base name: "calls_polling")', function() {
      // uncomment below and update the code to test the property callsPolling
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property callsSettings (base name: "calls_settings")', function() {
      // uncomment below and update the code to test the property callsSettings
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property collsDocuments (base name: "colls_documents")', function() {
      // uncomment below and update the code to test the property collsDocuments
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property collsFailed (base name: "colls_failed")', function() {
      // uncomment below and update the code to test the property collsFailed
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property collsProcessed (base name: "colls_processed")', function() {
      // uncomment below and update the code to test the property collsProcessed
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property collsResponded (base name: "colls_responded")', function() {
      // uncomment below and update the code to test the property collsResponded
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property configurations (base name: "configurations")', function() {
      // uncomment below and update the code to test the property configurations
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property docsFailed (base name: "docs_failed")', function() {
      // uncomment below and update the code to test the property docsFailed
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property docsProcessed (base name: "docs_processed")', function() {
      // uncomment below and update the code to test the property docsProcessed
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property docsResponded (base name: "docs_responded")', function() {
      // uncomment below and update the code to test the property docsResponded
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property latestUsedApp (base name: "latest_used_app")', function() {
      // uncomment below and update the code to test the property latestUsedApp
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property overallBatches (base name: "overall_batches")', function() {
      // uncomment below and update the code to test the property overallBatches
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property overallCalls (base name: "overall_calls")', function() {
      // uncomment below and update the code to test the property overallCalls
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property overallDocs (base name: "overall_docs")', function() {
      // uncomment below and update the code to test the property overallDocs
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property overallExceeded (base name: "overall_exceeded")', function() {
      // uncomment below and update the code to test the property overallExceeded
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property overallTexts (base name: "overall_texts")', function() {
      // uncomment below and update the code to test the property overallTexts
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property overcallColls (base name: "overcall_colls")', function() {
      // uncomment below and update the code to test the property overcallColls
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

    it('should have the property usedApps (base name: "used_apps")', function() {
      // uncomment below and update the code to test the property usedApps
      //var instance = new Semantria.Statistic();
      //expect(instance).to.be();
    });

  });

}));
