/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Semantria);
  }
}(this, function(expect, Semantria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Semantria.ConfigurationResponseVersion();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConfigurationResponseVersion', function() {
    it('should create an instance of ConfigurationResponseVersion', function() {
      // uncomment below and update the code to test ConfigurationResponseVersion
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be.a(Semantria.ConfigurationResponseVersion);
    });

    it('should have the property autoResponse (base name: "auto_response")', function() {
      // uncomment below and update the code to test the property autoResponse
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property callback (base name: "callback")', function() {
      // uncomment below and update the code to test the property callback
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property categoriesThreshold (base name: "categories_threshold")', function() {
      // uncomment below and update the code to test the property categoriesThreshold
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property charsThreshold (base name: "chars_threshold")', function() {
      // uncomment below and update the code to test the property charsThreshold
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property collection (base name: "collection")', function() {
      // uncomment below and update the code to test the property collection
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property configId (base name: "config_id")', function() {
      // uncomment below and update the code to test the property configId
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property document (base name: "document")', function() {
      // uncomment below and update the code to test the property document
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property entitiesThreshold (base name: "entities_threshold")', function() {
      // uncomment below and update the code to test the property entitiesThreshold
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property fromTemplateConfigId (base name: "from_template_config_id")', function() {
      // uncomment below and update the code to test the property fromTemplateConfigId
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property isPrimary (base name: "is_primary")', function() {
      // uncomment below and update the code to test the property isPrimary
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property oneSentence (base name: "one_sentence")', function() {
      // uncomment below and update the code to test the property oneSentence
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property processHtml (base name: "process_html")', function() {
      // uncomment below and update the code to test the property processHtml
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new Semantria.ConfigurationResponseVersion();
      //expect(instance).to.be();
    });

  });

}));
