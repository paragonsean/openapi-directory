/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Semantria);
  }
}(this, function(expect, Semantria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Semantria.DocumentAnalyticData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DocumentAnalyticData', function() {
    it('should create an instance of DocumentAnalyticData', function() {
      // uncomment below and update the code to test DocumentAnalyticData
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be.a(Semantria.DocumentAnalyticData);
    });

    it('should have the property autoCategories (base name: "auto_categories")', function() {
      // uncomment below and update the code to test the property autoCategories
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property configId (base name: "config_id")', function() {
      // uncomment below and update the code to test the property configId
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property entities (base name: "entities")', function() {
      // uncomment below and update the code to test the property entities
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property intentions (base name: "intentions")', function() {
      // uncomment below and update the code to test the property intentions
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property jobId (base name: "job_id")', function() {
      // uncomment below and update the code to test the property jobId
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property languageScore (base name: "language_score")', function() {
      // uncomment below and update the code to test the property languageScore
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property modelSentiment (base name: "model_sentiment")', function() {
      // uncomment below and update the code to test the property modelSentiment
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property opinions (base name: "opinions")', function() {
      // uncomment below and update the code to test the property opinions
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property phrases (base name: "phrases")', function() {
      // uncomment below and update the code to test the property phrases
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property relations (base name: "relations")', function() {
      // uncomment below and update the code to test the property relations
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property sentimentPolarity (base name: "sentiment_polarity")', function() {
      // uncomment below and update the code to test the property sentimentPolarity
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property sentimentScore (base name: "sentiment_score")', function() {
      // uncomment below and update the code to test the property sentimentScore
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property sourceText (base name: "source_text")', function() {
      // uncomment below and update the code to test the property sourceText
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property taxonomy (base name: "taxonomy")', function() {
      // uncomment below and update the code to test the property taxonomy
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property themes (base name: "themes")', function() {
      // uncomment below and update the code to test the property themes
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

    it('should have the property topics (base name: "topics")', function() {
      // uncomment below and update the code to test the property topics
      //var instance = new Semantria.DocumentAnalyticData();
      //expect(instance).to.be();
    });

  });

}));
