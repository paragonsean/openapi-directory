/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Semantria);
  }
}(this, function(expect, Semantria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Semantria.SubscriptionBillingSection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubscriptionBillingSection', function() {
    it('should create an instance of SubscriptionBillingSection', function() {
      // uncomment below and update the code to test SubscriptionBillingSection
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be.a(Semantria.SubscriptionBillingSection);
    });

    it('should have the property appSeatsAllocated (base name: "app_seats_allocated")', function() {
      // uncomment below and update the code to test the property appSeatsAllocated
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property appSeatsPermitted (base name: "app_seats_permitted")', function() {
      // uncomment below and update the code to test the property appSeatsPermitted
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property dataCallsBalance (base name: "data_calls_balance")', function() {
      // uncomment below and update the code to test the property dataCallsBalance
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property dataCallsLimit (base name: "data_calls_limit")', function() {
      // uncomment below and update the code to test the property dataCallsLimit
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property dataCallsLimitInterval (base name: "data_calls_limit_interval")', function() {
      // uncomment below and update the code to test the property dataCallsLimitInterval
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property docsBalance (base name: "docs_balance")', function() {
      // uncomment below and update the code to test the property docsBalance
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property docsLimit (base name: "docs_limit")', function() {
      // uncomment below and update the code to test the property docsLimit
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property docsLimitInterval (base name: "docs_limit_interval")', function() {
      // uncomment below and update the code to test the property docsLimitInterval
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property docsSuggested (base name: "docs_suggested")', function() {
      // uncomment below and update the code to test the property docsSuggested
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property docsSuggestedInterval (base name: "docs_suggested_interval")', function() {
      // uncomment below and update the code to test the property docsSuggestedInterval
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expiration_date")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property limitType (base name: "limit_type")', function() {
      // uncomment below and update the code to test the property limitType
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property pollingCallsBalance (base name: "polling_calls_balance")', function() {
      // uncomment below and update the code to test the property pollingCallsBalance
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property pollingCallsLimit (base name: "polling_calls_limit")', function() {
      // uncomment below and update the code to test the property pollingCallsLimit
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property pollingCallsLimitInterval (base name: "polling_calls_limit_interval")', function() {
      // uncomment below and update the code to test the property pollingCallsLimitInterval
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property settingsCallsBalance (base name: "settings_calls_balance")', function() {
      // uncomment below and update the code to test the property settingsCallsBalance
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property settingsCallsLimit (base name: "settings_calls_limit")', function() {
      // uncomment below and update the code to test the property settingsCallsLimit
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

    it('should have the property settingsCallsLimitInterval (base name: "settings_calls_limit_interval")', function() {
      // uncomment below and update the code to test the property settingsCallsLimitInterval
      //var instance = new Semantria.SubscriptionBillingSection();
      //expect(instance).to.be();
    });

  });

}));
