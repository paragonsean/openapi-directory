/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Semantria);
  }
}(this, function(expect, Semantria) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Semantria.FeatureDetailedModeSection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FeatureDetailedModeSection', function() {
    it('should create an instance of FeatureDetailedModeSection', function() {
      // uncomment below and update the code to test FeatureDetailedModeSection
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be.a(Semantria.FeatureDetailedModeSection);
    });

    it('should have the property autoCategories (base name: "auto_categories")', function() {
      // uncomment below and update the code to test the property autoCategories
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property entityMentions (base name: "entity_mentions")', function() {
      // uncomment below and update the code to test the property entityMentions
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property entityOpinions (base name: "entity_opinions")', function() {
      // uncomment below and update the code to test the property entityOpinions
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property entityRelations (base name: "entity_relations")', function() {
      // uncomment below and update the code to test the property entityRelations
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property entityThemes (base name: "entity_themes")', function() {
      // uncomment below and update the code to test the property entityThemes
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property intentions (base name: "intentions")', function() {
      // uncomment below and update the code to test the property intentions
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property languageDetection (base name: "language_detection")', function() {
      // uncomment below and update the code to test the property languageDetection
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property modelSentiment (base name: "model_sentiment")', function() {
      // uncomment below and update the code to test the property modelSentiment
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property namedEntities (base name: "named_entities")', function() {
      // uncomment below and update the code to test the property namedEntities
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property posTagging (base name: "pos_tagging")', function() {
      // uncomment below and update the code to test the property posTagging
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property queries (base name: "queries")', function() {
      // uncomment below and update the code to test the property queries
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property sentiment (base name: "sentiment")', function() {
      // uncomment below and update the code to test the property sentiment
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property sentimentPhrases (base name: "sentiment_phrases")', function() {
      // uncomment below and update the code to test the property sentimentPhrases
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property summarization (base name: "summarization")', function() {
      // uncomment below and update the code to test the property summarization
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property taxonomy (base name: "taxonomy")', function() {
      // uncomment below and update the code to test the property taxonomy
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property themeMentions (base name: "theme_mentions")', function() {
      // uncomment below and update the code to test the property themeMentions
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property themes (base name: "themes")', function() {
      // uncomment below and update the code to test the property themes
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property userCategories (base name: "user_categories")', function() {
      // uncomment below and update the code to test the property userCategories
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

    it('should have the property userEntities (base name: "user_entities")', function() {
      // uncomment below and update the code to test the property userEntities
      //var instance = new Semantria.FeatureDetailedModeSection();
      //expect(instance).to.be();
    });

  });

}));
