/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryResponseVersion from '../model/QueryResponseVersion';

/**
* Queries service.
* @module api/QueriesApi
* @version 4.0
*/
export default class QueriesApi {

    /**
    * Constructs a new QueriesApi. 
    * @alias module:api/QueriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addQueries operation.
     * @callback module:api/QueriesApi~addQueriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QueryResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update queries
     * This method adds queries on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} queries List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/QueriesApi~addQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QueryResponseVersion>}
     */
    addQueries(contentType, queries, opts, callback) {
      opts = opts || {};
      let postBody = queries;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addQueries");
      }
      // verify the required parameter 'queries' is set
      if (queries === undefined || queries === null) {
        throw new Error("Missing the required parameter 'queries' when calling addQueries");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [QueryResponseVersion];
      return this.apiClient.callApi(
        '/queries.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQueries operation.
     * @callback module:api/QueriesApi~deleteQueriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove queries
     * This method removes certain queries by their IDs on Semantria side.
     * @param {String} contentType 
     * @param {Array.<String>} queryIDs List of query identifiers.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/QueriesApi~deleteQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQueries(contentType, queryIDs, opts, callback) {
      opts = opts || {};
      let postBody = queryIDs;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteQueries");
      }
      // verify the required parameter 'queryIDs' is set
      if (queryIDs === undefined || queryIDs === null) {
        throw new Error("Missing the required parameter 'queryIDs' when calling deleteQueries");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queries.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueries operation.
     * @callback module:api/QueriesApi~getQueriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QueryResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve queries
     * This method retrieves list of queries available on Semantria side.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/QueriesApi~getQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QueryResponseVersion>}
     */
    getQueries(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getQueries");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [QueryResponseVersion];
      return this.apiClient.callApi(
        '/queries.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueries operation.
     * @callback module:api/QueriesApi~updateQueriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QueryResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update queries
     * This method updates queries by unique IDs on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} queries List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/QueriesApi~updateQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QueryResponseVersion>}
     */
    updateQueries(contentType, queries, opts, callback) {
      opts = opts || {};
      let postBody = queries;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateQueries");
      }
      // verify the required parameter 'queries' is set
      if (queries === undefined || queries === null) {
        throw new Error("Missing the required parameter 'queries' when calling updateQueries");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [QueryResponseVersion];
      return this.apiClient.callApi(
        '/queries.{content_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
