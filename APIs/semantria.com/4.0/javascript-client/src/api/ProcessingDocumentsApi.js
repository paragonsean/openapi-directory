/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Document from '../model/Document';
import DocumentAnalyticData from '../model/DocumentAnalyticData';

/**
* ProcessingDocuments service.
* @module api/ProcessingDocumentsApi
* @version 4.0
*/
export default class ProcessingDocumentsApi {

    /**
    * Constructs a new ProcessingDocumentsApi. 
    * @alias module:api/ProcessingDocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelDocument operation.
     * @callback module:api/ProcessingDocumentsApi~cancelDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel document analysis
     * This method cancels document analysis by unique ID on Semantria side if it is waiting for analysis in queue.
     * @param {String} documentId Document ID
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingDocumentsApi~cancelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelDocument(documentId, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling cancelDocument");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelDocument");
      }

      let pathParams = {
        'document_id': documentId,
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/document/{document_id}.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueBatchOfDocuments operation.
     * @callback module:api/ProcessingDocumentsApi~queueBatchOfDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue batch of documents for analysis
     * This method queues batch of documents for analysis. The rules are the same as for single document mode but here the documents ordered into the batch.
     * @param {String} contentType 
     * @param {Object.<String, Object>} batchOfDocuments List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingDocumentsApi~queueBatchOfDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    queueBatchOfDocuments(contentType, batchOfDocuments, opts, callback) {
      opts = opts || {};
      let postBody = batchOfDocuments;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling queueBatchOfDocuments");
      }
      // verify the required parameter 'batchOfDocuments' is set
      if (batchOfDocuments === undefined || batchOfDocuments === null) {
        throw new Error("Missing the required parameter 'batchOfDocuments' when calling queueBatchOfDocuments");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/document/batch.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueDocument operation.
     * @callback module:api/ProcessingDocumentsApi~queueDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue document for analysis
     * This method queues document onto the server for analysis. Queued document analyzes individually and will have its own set of results. If unique configuration ID provided, Semantria uses settings of that configuration during analysis, in opposite the primary configuration uses. Document IDs are unique in scope of configuration. If the same ID appears twice, Semantria overrides existing document with the new Data.
     * @param {String} contentType 
     * @param {Object.<String, Object>} document Parametrized JSON or XML object.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingDocumentsApi~queueDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    queueDocument(contentType, document, opts, callback) {
      opts = opts || {};
      let postBody = document;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling queueDocument");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling queueDocument");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/document.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the receiveDocumentAnalyticData operation.
     * @callback module:api/ProcessingDocumentsApi~receiveDocumentAnalyticDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentAnalyticData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve document analysis or its status in queue
     * This method retrieves analysis results for the single document by its unique ID or the documentâ€™s status in queue if it did not analyzed yet. Semantria guarantees delivering of all documents back to the client even if they FAILED on Semantria side due to some reason.
     * @param {String} documentId Document ID
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingDocumentsApi~receiveDocumentAnalyticDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentAnalyticData}
     */
    receiveDocumentAnalyticData(documentId, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling receiveDocumentAnalyticData");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling receiveDocumentAnalyticData");
      }

      let pathParams = {
        'document_id': documentId,
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DocumentAnalyticData;
      return this.apiClient.callApi(
        '/document/{document_id}.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveProcessedDocuments operation.
     * @callback module:api/ProcessingDocumentsApi~retrieveProcessedDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentAnalyticData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve documents analysis
     * This method retrieves analysis results for processed documents from Semantria. FAILED documents will have FAILED status in response. Semantria responds with limited amount of results per API call. If configuration ID provided, Semantria responds with the document, which were queued using the same configuration ID, in opposite Primary.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingDocumentsApi~retrieveProcessedDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentAnalyticData}
     */
    retrieveProcessedDocuments(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrieveProcessedDocuments");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DocumentAnalyticData;
      return this.apiClient.callApi(
        '/document/processed.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
