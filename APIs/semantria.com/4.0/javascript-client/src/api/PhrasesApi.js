/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PhraseResponseVersion from '../model/PhraseResponseVersion';

/**
* Phrases service.
* @module api/PhrasesApi
* @version 4.0
*/
export default class PhrasesApi {

    /**
    * Constructs a new PhrasesApi. 
    * @alias module:api/PhrasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPhrases operation.
     * @callback module:api/PhrasesApi~addPhrasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhraseResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add sentiment-bearing phrases
     * This method adds sentiment-bearing phrases on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} sentimentPhrases List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration phrases linked to.
     * @param {module:api/PhrasesApi~addPhrasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhraseResponseVersion>}
     */
    addPhrases(contentType, sentimentPhrases, opts, callback) {
      opts = opts || {};
      let postBody = sentimentPhrases;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addPhrases");
      }
      // verify the required parameter 'sentimentPhrases' is set
      if (sentimentPhrases === undefined || sentimentPhrases === null) {
        throw new Error("Missing the required parameter 'sentimentPhrases' when calling addPhrases");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [PhraseResponseVersion];
      return this.apiClient.callApi(
        '/phrases.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePhrases operation.
     * @callback module:api/PhrasesApi~deletePhrasesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove sentiment-bearing phrases
     * This method removes certain sentiment-bearing phrases by their names on Semantria side.
     * @param {String} contentType 
     * @param {Array.<String>} sentimentPhraseIDs List of sentiment-bearing phrase identifiers.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration phrases linked to.
     * @param {module:api/PhrasesApi~deletePhrasesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePhrases(contentType, sentimentPhraseIDs, opts, callback) {
      opts = opts || {};
      let postBody = sentimentPhraseIDs;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deletePhrases");
      }
      // verify the required parameter 'sentimentPhraseIDs' is set
      if (sentimentPhraseIDs === undefined || sentimentPhraseIDs === null) {
        throw new Error("Missing the required parameter 'sentimentPhraseIDs' when calling deletePhrases");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/phrases.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhrases operation.
     * @callback module:api/PhrasesApi~getPhrasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhraseResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve sentiment-bearing phrases
     * This method retrieves list of sentiment-bearing phrases available on Semantria side.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration phrases linked to.
     * @param {module:api/PhrasesApi~getPhrasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhraseResponseVersion>}
     */
    getPhrases(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getPhrases");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [PhraseResponseVersion];
      return this.apiClient.callApi(
        '/phrases.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePhrases operation.
     * @callback module:api/PhrasesApi~updatePhrasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhraseResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates sentiment-bearing phrases
     * This method updates sentiment-bearing phrases by unique IDs on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} sentimentPhrases List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration phrases linked to.
     * @param {module:api/PhrasesApi~updatePhrasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhraseResponseVersion>}
     */
    updatePhrases(contentType, sentimentPhrases, opts, callback) {
      opts = opts || {};
      let postBody = sentimentPhrases;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updatePhrases");
      }
      // verify the required parameter 'sentimentPhrases' is set
      if (sentimentPhrases === undefined || sentimentPhrases === null) {
        throw new Error("Missing the required parameter 'sentimentPhrases' when calling updatePhrases");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [PhraseResponseVersion];
      return this.apiClient.callApi(
        '/phrases.{content_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
