/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TaxonomyNodeResponseVersion from '../model/TaxonomyNodeResponseVersion';

/**
* Taxonomy service.
* @module api/TaxonomyApi
* @version 4.0
*/
export default class TaxonomyApi {

    /**
    * Constructs a new TaxonomyApi. 
    * @alias module:api/TaxonomyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTaxonomy operation.
     * @callback module:api/TaxonomyApi~addTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxonomyNodeResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add taxonomy nodes
     * This method adds taxonomy nodes on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} taxonomy List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/TaxonomyApi~addTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxonomyNodeResponseVersion>}
     */
    addTaxonomy(contentType, taxonomy, opts, callback) {
      opts = opts || {};
      let postBody = taxonomy;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addTaxonomy");
      }
      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling addTaxonomy");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [TaxonomyNodeResponseVersion];
      return this.apiClient.callApi(
        '/taxonomy.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaxonomy operation.
     * @callback module:api/TaxonomyApi~deleteTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove taxonomy nodes
     * This method removes certain taxonomy nodes by their IDs on Semantria side.
     * @param {String} contentType 
     * @param {Array.<String>} taxonomyNodeIDs List of taxonomy node identifiers.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/TaxonomyApi~deleteTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaxonomy(contentType, taxonomyNodeIDs, opts, callback) {
      opts = opts || {};
      let postBody = taxonomyNodeIDs;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteTaxonomy");
      }
      // verify the required parameter 'taxonomyNodeIDs' is set
      if (taxonomyNodeIDs === undefined || taxonomyNodeIDs === null) {
        throw new Error("Missing the required parameter 'taxonomyNodeIDs' when calling deleteTaxonomy");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/taxonomy.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxonomy operation.
     * @callback module:api/TaxonomyApi~getTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxonomyNodeResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve taxonomy
     * This method retrieves list of taxonomy available on Semantria side.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration taxonomy linked to.
     * @param {module:api/TaxonomyApi~getTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxonomyNodeResponseVersion>}
     */
    getTaxonomy(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getTaxonomy");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [TaxonomyNodeResponseVersion];
      return this.apiClient.callApi(
        '/taxonomy.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxonomy operation.
     * @callback module:api/TaxonomyApi~updateTaxonomyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TaxonomyNodeResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update taxonomy nodes
     * This method updates taxonomy nodes on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} taxonomy List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration queries linked to.
     * @param {module:api/TaxonomyApi~updateTaxonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TaxonomyNodeResponseVersion>}
     */
    updateTaxonomy(contentType, taxonomy, opts, callback) {
      opts = opts || {};
      let postBody = taxonomy;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateTaxonomy");
      }
      // verify the required parameter 'taxonomy' is set
      if (taxonomy === undefined || taxonomy === null) {
        throw new Error("Missing the required parameter 'taxonomy' when calling updateTaxonomy");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [TaxonomyNodeResponseVersion];
      return this.apiClient.callApi(
        '/taxonomy.{content_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
