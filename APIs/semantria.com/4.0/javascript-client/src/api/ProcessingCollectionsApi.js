/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';
import CollectionAnalyticData from '../model/CollectionAnalyticData';

/**
* ProcessingCollections service.
* @module api/ProcessingCollectionsApi
* @version 4.0
*/
export default class ProcessingCollectionsApi {

    /**
    * Constructs a new ProcessingCollectionsApi. 
    * @alias module:api/ProcessingCollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelCollection operation.
     * @callback module:api/ProcessingCollectionsApi~cancelCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel collection analysis
     * This method cancels collection analysis by unique ID on Semantria side if it is waiting for analysis in queue.
     * @param {String} collectionId Collection ID
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingCollectionsApi~cancelCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelCollection(collectionId, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling cancelCollection");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelCollection");
      }

      let pathParams = {
        'collection_id': collectionId,
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collection/{collection_id}.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueCollection operation.
     * @callback module:api/ProcessingCollectionsApi~queueCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue collection for analysis
     * This method queues collection of documents onto the server for analysis. Queued collection of documents analyzes in common context as entire thing. If unique configuration ID provided, Semantria uses settings of that configuration during analysis, in opposite the primary configuration uses. Collection IDs are unique in scope of configuration. If the same ID appears twice, Semantria overrides existing collection with the new Data
     * @param {String} contentType 
     * @param {Object.<String, Object>} collection Parametrized JSON or XML object.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingCollectionsApi~queueCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    queueCollection(contentType, collection, opts, callback) {
      opts = opts || {};
      let postBody = collection;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling queueCollection");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling queueCollection");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collection.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the receiveCollectionAnalyticData operation.
     * @callback module:api/ProcessingCollectionsApi~receiveCollectionAnalyticDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionAnalyticData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve collection analysis or its status in queue
     * This method retrieves analysis results for documents collection by its unique ID or the collectionâ€™s status in queue if it did not analyzed yet. Semantria guarantees delivering of all collections back to the client even if they FAILED on Semantria side due to some reason.
     * @param {String} collectionId Collection ID
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingCollectionsApi~receiveCollectionAnalyticDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionAnalyticData}
     */
    receiveCollectionAnalyticData(collectionId, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling receiveCollectionAnalyticData");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling receiveCollectionAnalyticData");
      }

      let pathParams = {
        'collection_id': collectionId,
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CollectionAnalyticData;
      return this.apiClient.callApi(
        '/collection/{collection_id}.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveProcessedCollections operation.
     * @callback module:api/ProcessingCollectionsApi~retrieveProcessedCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionAnalyticData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve collections analysis
     * This method retrieves analysis results for processed collections from Semantria. FAILED collections will have FAILED status in response. Semantria responds with limited amount of results per API call. If configuration ID provided, Semantria responds with the collections, which were queued using the same configuration ID, in opposite Primary configuration uses.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration used for analysis.
     * @param {module:api/ProcessingCollectionsApi~retrieveProcessedCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionAnalyticData}
     */
    retrieveProcessedCollections(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrieveProcessedCollections");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CollectionAnalyticData;
      return this.apiClient.callApi(
        '/collection/processed.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
