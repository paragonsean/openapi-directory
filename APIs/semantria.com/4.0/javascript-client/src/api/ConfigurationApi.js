/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationResponseVersion from '../model/ConfigurationResponseVersion';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version 4.0
*/
export default class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addConfigurations operation.
     * @callback module:api/ConfigurationApi~addConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user configurations
     * This method creates configurations on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} configurations List of parametrized JSON or XML objects.
     * @param {module:api/ConfigurationApi~addConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationResponseVersion>}
     */
    addConfigurations(contentType, configurations, callback) {
      let postBody = configurations;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addConfigurations");
      }
      // verify the required parameter 'configurations' is set
      if (configurations === undefined || configurations === null) {
        throw new Error("Missing the required parameter 'configurations' when calling addConfigurations");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConfigurationResponseVersion];
      return this.apiClient.callApi(
        '/configurations.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurations operation.
     * @callback module:api/ConfigurationApi~deleteConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user configurations
     * This method removes certain configuration by unique ID on Semantria side.
     * @param {String} contentType 
     * @param {Array.<String>} configurationIDs List of configuration identifiers.
     * @param {module:api/ConfigurationApi~deleteConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConfigurations(contentType, configurationIDs, callback) {
      let postBody = configurationIDs;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteConfigurations");
      }
      // verify the required parameter 'configurationIDs' is set
      if (configurationIDs === undefined || configurationIDs === null) {
        throw new Error("Missing the required parameter 'configurationIDs' when calling deleteConfigurations");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configurations.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurations operation.
     * @callback module:api/ConfigurationApi~getConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user configurations
     * This method retrieves all user configurations available on Semantria side.
     * @param {String} contentType 
     * @param {module:api/ConfigurationApi~getConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationResponseVersion>}
     */
    getConfigurations(contentType, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getConfigurations");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConfigurationResponseVersion];
      return this.apiClient.callApi(
        '/configurations.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurations operation.
     * @callback module:api/ConfigurationApi~updateConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user configurations
     * This method updates specific configurations by unique IDs on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} configurations List of parametrized JSON or XML objects.
     * @param {module:api/ConfigurationApi~updateConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationResponseVersion>}
     */
    updateConfigurations(contentType, configurations, callback) {
      let postBody = configurations;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateConfigurations");
      }
      // verify the required parameter 'configurations' is set
      if (configurations === undefined || configurations === null) {
        throw new Error("Missing the required parameter 'configurations' when calling updateConfigurations");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConfigurationResponseVersion];
      return this.apiClient.callApi(
        '/configurations.{content_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
