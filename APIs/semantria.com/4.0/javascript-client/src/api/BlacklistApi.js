/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlacklistItemResponseVersion from '../model/BlacklistItemResponseVersion';

/**
* Blacklist service.
* @module api/BlacklistApi
* @version 4.0
*/
export default class BlacklistApi {

    /**
    * Constructs a new BlacklistApi. 
    * @alias module:api/BlacklistApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBlacklist operation.
     * @callback module:api/BlacklistApi~addBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BlacklistItemResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add items to blacklist
     * This method adds new unique items to the backlist on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} blacklistedItems List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration blacklist linked to.
     * @param {module:api/BlacklistApi~addBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BlacklistItemResponseVersion>}
     */
    addBlacklist(contentType, blacklistedItems, opts, callback) {
      opts = opts || {};
      let postBody = blacklistedItems;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addBlacklist");
      }
      // verify the required parameter 'blacklistedItems' is set
      if (blacklistedItems === undefined || blacklistedItems === null) {
        throw new Error("Missing the required parameter 'blacklistedItems' when calling addBlacklist");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [BlacklistItemResponseVersion];
      return this.apiClient.callApi(
        '/blacklist.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlacklistItems operation.
     * @callback module:api/BlacklistApi~deleteBlacklistItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove items from blacklist
     * This method removes certain blacklisted items by their values on Semantria side.
     * @param {String} contentType 
     * @param {Array.<String>} blacklistedItemIDs List of unique blacklisted item identifiers (string).
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration blacklist items linked to.
     * @param {module:api/BlacklistApi~deleteBlacklistItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBlacklistItems(contentType, blacklistedItemIDs, opts, callback) {
      opts = opts || {};
      let postBody = blacklistedItemIDs;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteBlacklistItems");
      }
      // verify the required parameter 'blacklistedItemIDs' is set
      if (blacklistedItemIDs === undefined || blacklistedItemIDs === null) {
        throw new Error("Missing the required parameter 'blacklistedItemIDs' when calling deleteBlacklistItems");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blacklist.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlacklist operation.
     * @callback module:api/BlacklistApi~getBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BlacklistItemResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve blacklisted items
     * This method retrieves all backlisted items available on Semantria side.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration blacklist linked to.
     * @param {module:api/BlacklistApi~getBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BlacklistItemResponseVersion>}
     */
    getBlacklist(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getBlacklist");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [BlacklistItemResponseVersion];
      return this.apiClient.callApi(
        '/blacklist.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlacklist operation.
     * @callback module:api/BlacklistApi~updateBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BlacklistItemResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update items in blacklist
     * This method updates existing items by unique IDs in the backlist on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} blacklistedItems List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration blacklist linked to.
     * @param {module:api/BlacklistApi~updateBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BlacklistItemResponseVersion>}
     */
    updateBlacklist(contentType, blacklistedItems, opts, callback) {
      opts = opts || {};
      let postBody = blacklistedItems;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateBlacklist");
      }
      // verify the required parameter 'blacklistedItems' is set
      if (blacklistedItems === undefined || blacklistedItems === null) {
        throw new Error("Missing the required parameter 'blacklistedItems' when calling updateBlacklist");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [BlacklistItemResponseVersion];
      return this.apiClient.callApi(
        '/blacklist.{content_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
