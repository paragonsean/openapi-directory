/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryResponseVersion from '../model/CategoryResponseVersion';

/**
* Categories service.
* @module api/CategoriesApi
* @version 4.0
*/
export default class CategoriesApi {

    /**
    * Constructs a new CategoriesApi. 
    * @alias module:api/CategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCategories operation.
     * @callback module:api/CategoriesApi~addCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user categories
     * This method adds user categories on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} categories List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration user categories linked to.
     * @param {module:api/CategoriesApi~addCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryResponseVersion>}
     */
    addCategories(contentType, categories, opts, callback) {
      opts = opts || {};
      let postBody = categories;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addCategories");
      }
      // verify the required parameter 'categories' is set
      if (categories === undefined || categories === null) {
        throw new Error("Missing the required parameter 'categories' when calling addCategories");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [CategoryResponseVersion];
      return this.apiClient.callApi(
        '/categories.{content_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategories operation.
     * @callback module:api/CategoriesApi~deleteCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user categories
     * This method removes certain user categories by their IDs on Semantria side.
     * @param {String} contentType 
     * @param {Array.<String>} categoryIDs List of user category identifiers.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration user categories linked to.
     * @param {module:api/CategoriesApi~deleteCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCategories(contentType, categoryIDs, opts, callback) {
      opts = opts || {};
      let postBody = categoryIDs;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteCategories");
      }
      // verify the required parameter 'categoryIDs' is set
      if (categoryIDs === undefined || categoryIDs === null) {
        throw new Error("Missing the required parameter 'categoryIDs' when calling deleteCategories");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/categories.{content_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:api/CategoriesApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user categories
     * This method retrieves list of user categories available on Semantria side.
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration user categories linked to.
     * @param {module:api/CategoriesApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryResponseVersion>}
     */
    getCategories(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getCategories");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [CategoryResponseVersion];
      return this.apiClient.callApi(
        '/categories.{content_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategories operation.
     * @callback module:api/CategoriesApi~updateCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryResponseVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates user categories
     * This method updates user categories by unique IDs on Semantria side.
     * @param {String} contentType 
     * @param {Object.<String, Object>} categories List of parametrized JSON or XML objects.
     * @param {Object} opts Optional parameters
     * @param {String} [configId] Identifier of configuration user categories linked to.
     * @param {module:api/CategoriesApi~updateCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryResponseVersion>}
     */
    updateCategories(contentType, categories, opts, callback) {
      opts = opts || {};
      let postBody = categories;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateCategories");
      }
      // verify the required parameter 'categories' is set
      if (categories === undefined || categories === null) {
        throw new Error("Missing the required parameter 'categories' when calling updateCategories");
      }

      let pathParams = {
        'content_type': contentType
      };
      let queryParams = {
        'config_id': opts['configId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [CategoryResponseVersion];
      return this.apiClient.callApi(
        '/categories.{content_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
