/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionFeatureSectionCollection from './SubscriptionFeatureSectionCollection';
import SubscriptionFeatureSectionDocument from './SubscriptionFeatureSectionDocument';
import SubscriptionFeatureSectionTemplate from './SubscriptionFeatureSectionTemplate';

/**
 * The SubscriptionFeatureSection model module.
 * @module model/SubscriptionFeatureSection
 * @version 4.0
 */
class SubscriptionFeatureSection {
    /**
     * Constructs a new <code>SubscriptionFeatureSection</code>.
     * @alias module:model/SubscriptionFeatureSection
     * @param collection {module:model/SubscriptionFeatureSectionCollection} 
     * @param document {module:model/SubscriptionFeatureSectionDocument} 
     * @param htmlProcessing {Boolean} Identifies whether HTML processing feature is supported or not
     * @param supportedLanguages {String} Lists all languages which are allowed for current subscription
     * @param templates {module:model/SubscriptionFeatureSectionTemplate} 
     */
    constructor(collection, document, htmlProcessing, supportedLanguages, templates) { 
        
        SubscriptionFeatureSection.initialize(this, collection, document, htmlProcessing, supportedLanguages, templates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, collection, document, htmlProcessing, supportedLanguages, templates) { 
        obj['collection'] = collection;
        obj['document'] = document;
        obj['html_processing'] = htmlProcessing;
        obj['supported_languages'] = supportedLanguages;
        obj['templates'] = templates;
    }

    /**
     * Constructs a <code>SubscriptionFeatureSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionFeatureSection} obj Optional instance to populate.
     * @return {module:model/SubscriptionFeatureSection} The populated <code>SubscriptionFeatureSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionFeatureSection();

            if (data.hasOwnProperty('collection')) {
                obj['collection'] = SubscriptionFeatureSectionCollection.constructFromObject(data['collection']);
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = SubscriptionFeatureSectionDocument.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('html_processing')) {
                obj['html_processing'] = ApiClient.convertToType(data['html_processing'], 'Boolean');
            }
            if (data.hasOwnProperty('supported_languages')) {
                obj['supported_languages'] = ApiClient.convertToType(data['supported_languages'], 'String');
            }
            if (data.hasOwnProperty('templates')) {
                obj['templates'] = SubscriptionFeatureSectionTemplate.constructFromObject(data['templates']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionFeatureSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionFeatureSection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionFeatureSection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `collection`
        if (data['collection']) { // data not null
          SubscriptionFeatureSectionCollection.validateJSON(data['collection']);
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          SubscriptionFeatureSectionDocument.validateJSON(data['document']);
        }
        // ensure the json data is a string
        if (data['supported_languages'] && !(typeof data['supported_languages'] === 'string' || data['supported_languages'] instanceof String)) {
            throw new Error("Expected the field `supported_languages` to be a primitive type in the JSON string but got " + data['supported_languages']);
        }
        // validate the optional field `templates`
        if (data['templates']) { // data not null
          SubscriptionFeatureSectionTemplate.validateJSON(data['templates']);
        }

        return true;
    }


}

SubscriptionFeatureSection.RequiredProperties = ["collection", "document", "html_processing", "supported_languages", "templates"];

/**
 * @member {module:model/SubscriptionFeatureSectionCollection} collection
 */
SubscriptionFeatureSection.prototype['collection'] = undefined;

/**
 * @member {module:model/SubscriptionFeatureSectionDocument} document
 */
SubscriptionFeatureSection.prototype['document'] = undefined;

/**
 * Identifies whether HTML processing feature is supported or not
 * @member {Boolean} html_processing
 */
SubscriptionFeatureSection.prototype['html_processing'] = undefined;

/**
 * Lists all languages which are allowed for current subscription
 * @member {String} supported_languages
 */
SubscriptionFeatureSection.prototype['supported_languages'] = undefined;

/**
 * @member {module:model/SubscriptionFeatureSectionTemplate} templates
 */
SubscriptionFeatureSection.prototype['templates'] = undefined;






export default SubscriptionFeatureSection;

