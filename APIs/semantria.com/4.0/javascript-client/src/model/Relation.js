/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelationEntity from './RelationEntity';

/**
 * The Relation model module.
 * @module model/Relation
 * @version 4.0
 */
class Relation {
    /**
     * Constructs a new <code>Relation</code>.
     * @alias module:model/Relation
     * @param confidenceScore {Number} A measure of confidence in the relationship extraction
     * @param entities {Array.<module:model/RelationEntity>} Returns entities which presents parent relationship
     * @param extra {String} Extra information that has been extracted about the relationship
     * @param relationType {String} A label describing the nature of the relationship
     * @param type {module:model/Relation.TypeEnum} Type of relation according to extracted entities
     */
    constructor(confidenceScore, entities, extra, relationType, type) { 
        
        Relation.initialize(this, confidenceScore, entities, extra, relationType, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, confidenceScore, entities, extra, relationType, type) { 
        obj['confidence_score'] = confidenceScore;
        obj['entities'] = entities;
        obj['extra'] = extra;
        obj['relation_type'] = relationType;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Relation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relation} obj Optional instance to populate.
     * @return {module:model/Relation} The populated <code>Relation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relation();

            if (data.hasOwnProperty('confidence_score')) {
                obj['confidence_score'] = ApiClient.convertToType(data['confidence_score'], 'Number');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [RelationEntity]);
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], 'String');
            }
            if (data.hasOwnProperty('relation_type')) {
                obj['relation_type'] = ApiClient.convertToType(data['relation_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Relation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                RelationEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['extra'] && !(typeof data['extra'] === 'string' || data['extra'] instanceof String)) {
            throw new Error("Expected the field `extra` to be a primitive type in the JSON string but got " + data['extra']);
        }
        // ensure the json data is a string
        if (data['relation_type'] && !(typeof data['relation_type'] === 'string' || data['relation_type'] instanceof String)) {
            throw new Error("Expected the field `relation_type` to be a primitive type in the JSON string but got " + data['relation_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Relation.RequiredProperties = ["confidence_score", "entities", "extra", "relation_type", "type"];

/**
 * A measure of confidence in the relationship extraction
 * @member {Number} confidence_score
 */
Relation.prototype['confidence_score'] = undefined;

/**
 * Returns entities which presents parent relationship
 * @member {Array.<module:model/RelationEntity>} entities
 */
Relation.prototype['entities'] = undefined;

/**
 * Extra information that has been extracted about the relationship
 * @member {String} extra
 */
Relation.prototype['extra'] = undefined;

/**
 * A label describing the nature of the relationship
 * @member {String} relation_type
 */
Relation.prototype['relation_type'] = undefined;

/**
 * Type of relation according to extracted entities
 * @member {module:model/Relation.TypeEnum} type
 */
Relation.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Relation['TypeEnum'] = {

    /**
     * value: "named"
     * @const
     */
    "named": "named",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default Relation;

