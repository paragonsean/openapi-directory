/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Status model module.
 * @module model/Status
 * @version 4.0
 */
class Status {
    /**
     * Constructs a new <code>Status</code>.
     * @alias module:model/Status
     * @param apiVersion {String} Represents current version of the exposed API
     * @param serviceStatus {module:model/Status.ServiceStatusEnum} Represents the availability of the service
     * @param serviceVersion {String} Represents current version of the Semantria service
     * @param supportedCompression {String} Exposes supported compression algorithms. Currently only gzip and deflate are supported
     * @param supportedEncoding {String} Exposes supported content encoding. Currently only UTF-8 is supported
     * @param supportedLanguages {Array.<String>} Exposes list of supported languages
     */
    constructor(apiVersion, serviceStatus, serviceVersion, supportedCompression, supportedEncoding, supportedLanguages) { 
        
        Status.initialize(this, apiVersion, serviceStatus, serviceVersion, supportedCompression, supportedEncoding, supportedLanguages);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiVersion, serviceStatus, serviceVersion, supportedCompression, supportedEncoding, supportedLanguages) { 
        obj['api_version'] = apiVersion;
        obj['service_status'] = serviceStatus;
        obj['service_version'] = serviceVersion;
        obj['supported_compression'] = supportedCompression;
        obj['supported_encoding'] = supportedEncoding;
        obj['supported_languages'] = supportedLanguages;
    }

    /**
     * Constructs a <code>Status</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Status} obj Optional instance to populate.
     * @return {module:model/Status} The populated <code>Status</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Status();

            if (data.hasOwnProperty('api_version')) {
                obj['api_version'] = ApiClient.convertToType(data['api_version'], 'String');
            }
            if (data.hasOwnProperty('service_status')) {
                obj['service_status'] = ApiClient.convertToType(data['service_status'], 'String');
            }
            if (data.hasOwnProperty('service_version')) {
                obj['service_version'] = ApiClient.convertToType(data['service_version'], 'String');
            }
            if (data.hasOwnProperty('supported_compression')) {
                obj['supported_compression'] = ApiClient.convertToType(data['supported_compression'], 'String');
            }
            if (data.hasOwnProperty('supported_encoding')) {
                obj['supported_encoding'] = ApiClient.convertToType(data['supported_encoding'], 'String');
            }
            if (data.hasOwnProperty('supported_languages')) {
                obj['supported_languages'] = ApiClient.convertToType(data['supported_languages'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Status</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Status</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Status.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['api_version'] && !(typeof data['api_version'] === 'string' || data['api_version'] instanceof String)) {
            throw new Error("Expected the field `api_version` to be a primitive type in the JSON string but got " + data['api_version']);
        }
        // ensure the json data is a string
        if (data['service_status'] && !(typeof data['service_status'] === 'string' || data['service_status'] instanceof String)) {
            throw new Error("Expected the field `service_status` to be a primitive type in the JSON string but got " + data['service_status']);
        }
        // ensure the json data is a string
        if (data['service_version'] && !(typeof data['service_version'] === 'string' || data['service_version'] instanceof String)) {
            throw new Error("Expected the field `service_version` to be a primitive type in the JSON string but got " + data['service_version']);
        }
        // ensure the json data is a string
        if (data['supported_compression'] && !(typeof data['supported_compression'] === 'string' || data['supported_compression'] instanceof String)) {
            throw new Error("Expected the field `supported_compression` to be a primitive type in the JSON string but got " + data['supported_compression']);
        }
        // ensure the json data is a string
        if (data['supported_encoding'] && !(typeof data['supported_encoding'] === 'string' || data['supported_encoding'] instanceof String)) {
            throw new Error("Expected the field `supported_encoding` to be a primitive type in the JSON string but got " + data['supported_encoding']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supported_languages'])) {
            throw new Error("Expected the field `supported_languages` to be an array in the JSON data but got " + data['supported_languages']);
        }

        return true;
    }


}

Status.RequiredProperties = ["api_version", "service_status", "service_version", "supported_compression", "supported_encoding", "supported_languages"];

/**
 * Represents current version of the exposed API
 * @member {String} api_version
 */
Status.prototype['api_version'] = undefined;

/**
 * Represents the availability of the service
 * @member {module:model/Status.ServiceStatusEnum} service_status
 */
Status.prototype['service_status'] = undefined;

/**
 * Represents current version of the Semantria service
 * @member {String} service_version
 */
Status.prototype['service_version'] = undefined;

/**
 * Exposes supported compression algorithms. Currently only gzip and deflate are supported
 * @member {String} supported_compression
 */
Status.prototype['supported_compression'] = undefined;

/**
 * Exposes supported content encoding. Currently only UTF-8 is supported
 * @member {String} supported_encoding
 */
Status.prototype['supported_encoding'] = undefined;

/**
 * Exposes list of supported languages
 * @member {Array.<String>} supported_languages
 */
Status.prototype['supported_languages'] = undefined;





/**
 * Allowed values for the <code>service_status</code> property.
 * @enum {String}
 * @readonly
 */
Status['ServiceStatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "sold"
     * @const
     */
    "sold": "sold"
};



export default Status;

