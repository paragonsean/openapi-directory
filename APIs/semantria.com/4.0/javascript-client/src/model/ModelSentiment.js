/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelSentiment model module.
 * @module model/ModelSentiment
 * @version 4.0
 */
class ModelSentiment {
    /**
     * Constructs a new <code>ModelSentiment</code>.
     * @alias module:model/ModelSentiment
     * @param mixedScore {Number} Mixed sentiment score associated with the document
     * @param modelName {String} Name of the sentiment model used for scoring
     * @param negativeScore {Number} Negative (probable negative score) sentiment score associated with the document
     * @param neutralScore {Number} Neutral (probable neutral score) sentiment score associated with the document
     * @param positiveScore {Number} Positive (probable positive score) sentiment score associated with the document
     * @param sentimentPolarity {module:model/ModelSentiment.SentimentPolarityEnum} Verbal representation of sentiment score that matches the best on the document. Can be \"negative\", \"positive\" or \"neutral\"
     */
    constructor(mixedScore, modelName, negativeScore, neutralScore, positiveScore, sentimentPolarity) { 
        
        ModelSentiment.initialize(this, mixedScore, modelName, negativeScore, neutralScore, positiveScore, sentimentPolarity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mixedScore, modelName, negativeScore, neutralScore, positiveScore, sentimentPolarity) { 
        obj['mixed_score'] = mixedScore;
        obj['model_name'] = modelName;
        obj['negative_score'] = negativeScore;
        obj['neutral_score'] = neutralScore;
        obj['positive_score'] = positiveScore;
        obj['sentiment_polarity'] = sentimentPolarity;
    }

    /**
     * Constructs a <code>ModelSentiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelSentiment} obj Optional instance to populate.
     * @return {module:model/ModelSentiment} The populated <code>ModelSentiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelSentiment();

            if (data.hasOwnProperty('mixed_score')) {
                obj['mixed_score'] = ApiClient.convertToType(data['mixed_score'], 'Number');
            }
            if (data.hasOwnProperty('model_name')) {
                obj['model_name'] = ApiClient.convertToType(data['model_name'], 'String');
            }
            if (data.hasOwnProperty('negative_score')) {
                obj['negative_score'] = ApiClient.convertToType(data['negative_score'], 'Number');
            }
            if (data.hasOwnProperty('neutral_score')) {
                obj['neutral_score'] = ApiClient.convertToType(data['neutral_score'], 'Number');
            }
            if (data.hasOwnProperty('positive_score')) {
                obj['positive_score'] = ApiClient.convertToType(data['positive_score'], 'Number');
            }
            if (data.hasOwnProperty('sentiment_polarity')) {
                obj['sentiment_polarity'] = ApiClient.convertToType(data['sentiment_polarity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelSentiment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelSentiment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModelSentiment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['model_name'] && !(typeof data['model_name'] === 'string' || data['model_name'] instanceof String)) {
            throw new Error("Expected the field `model_name` to be a primitive type in the JSON string but got " + data['model_name']);
        }
        // ensure the json data is a string
        if (data['sentiment_polarity'] && !(typeof data['sentiment_polarity'] === 'string' || data['sentiment_polarity'] instanceof String)) {
            throw new Error("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got " + data['sentiment_polarity']);
        }

        return true;
    }


}

ModelSentiment.RequiredProperties = ["mixed_score", "model_name", "negative_score", "neutral_score", "positive_score", "sentiment_polarity"];

/**
 * Mixed sentiment score associated with the document
 * @member {Number} mixed_score
 */
ModelSentiment.prototype['mixed_score'] = undefined;

/**
 * Name of the sentiment model used for scoring
 * @member {String} model_name
 */
ModelSentiment.prototype['model_name'] = undefined;

/**
 * Negative (probable negative score) sentiment score associated with the document
 * @member {Number} negative_score
 */
ModelSentiment.prototype['negative_score'] = undefined;

/**
 * Neutral (probable neutral score) sentiment score associated with the document
 * @member {Number} neutral_score
 */
ModelSentiment.prototype['neutral_score'] = undefined;

/**
 * Positive (probable positive score) sentiment score associated with the document
 * @member {Number} positive_score
 */
ModelSentiment.prototype['positive_score'] = undefined;

/**
 * Verbal representation of sentiment score that matches the best on the document. Can be \"negative\", \"positive\" or \"neutral\"
 * @member {module:model/ModelSentiment.SentimentPolarityEnum} sentiment_polarity
 */
ModelSentiment.prototype['sentiment_polarity'] = undefined;





/**
 * Allowed values for the <code>sentiment_polarity</code> property.
 * @enum {String}
 * @readonly
 */
ModelSentiment['SentimentPolarityEnum'] = {

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral"
};



export default ModelSentiment;

