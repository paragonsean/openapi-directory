/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';

/**
 * The Mention model module.
 * @module model/Mention
 * @version 4.0
 */
class Mention {
    /**
     * Constructs a new <code>Mention</code>.
     * @alias module:model/Mention
     * @param isNegated {Boolean} Indicates whether or not the mention has been negated
     * @param label {String} The text of the attribute mention
     * @param locations {Array.<module:model/Location>} List of coordinates of the mentions found within the collection
     * @param negatingPhrase {String} If the mention has been negated, this gives the negating phrase
     */
    constructor(isNegated, label, locations, negatingPhrase) { 
        
        Mention.initialize(this, isNegated, label, locations, negatingPhrase);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isNegated, label, locations, negatingPhrase) { 
        obj['is_negated'] = isNegated;
        obj['label'] = label;
        obj['locations'] = locations;
        obj['negating_phrase'] = negatingPhrase;
    }

    /**
     * Constructs a <code>Mention</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mention} obj Optional instance to populate.
     * @return {module:model/Mention} The populated <code>Mention</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mention();

            if (data.hasOwnProperty('is_negated')) {
                obj['is_negated'] = ApiClient.convertToType(data['is_negated'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [Location]);
            }
            if (data.hasOwnProperty('negating_phrase')) {
                obj['negating_phrase'] = ApiClient.convertToType(data['negating_phrase'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mention</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mention</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Mention.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                Location.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['negating_phrase'] && !(typeof data['negating_phrase'] === 'string' || data['negating_phrase'] instanceof String)) {
            throw new Error("Expected the field `negating_phrase` to be a primitive type in the JSON string but got " + data['negating_phrase']);
        }

        return true;
    }


}

Mention.RequiredProperties = ["is_negated", "label", "locations", "negating_phrase"];

/**
 * Indicates whether or not the mention has been negated
 * @member {Boolean} is_negated
 */
Mention.prototype['is_negated'] = undefined;

/**
 * The text of the attribute mention
 * @member {String} label
 */
Mention.prototype['label'] = undefined;

/**
 * List of coordinates of the mentions found within the collection
 * @member {Array.<module:model/Location>} locations
 */
Mention.prototype['locations'] = undefined;

/**
 * If the mention has been negated, this gives the negating phrase
 * @member {String} negating_phrase
 */
Mention.prototype['negating_phrase'] = undefined;






export default Mention;

