/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RelationEntity model module.
 * @module model/RelationEntity
 * @version 4.0
 */
class RelationEntity {
    /**
     * Constructs a new <code>RelationEntity</code>.
     * @alias module:model/RelationEntity
     * @param entityType {String} Type of the entity (Company, Person, Place, Product, etc.)
     * @param title {String} Normalized entity title based on existing entity normalization rules
     */
    constructor(entityType, title) { 
        
        RelationEntity.initialize(this, entityType, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entityType, title) { 
        obj['entity_type'] = entityType;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>RelationEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationEntity} obj Optional instance to populate.
     * @return {module:model/RelationEntity} The populated <code>RelationEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationEntity();

            if (data.hasOwnProperty('entity_type')) {
                obj['entity_type'] = ApiClient.convertToType(data['entity_type'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RelationEntity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['entity_type'] && !(typeof data['entity_type'] === 'string' || data['entity_type'] instanceof String)) {
            throw new Error("Expected the field `entity_type` to be a primitive type in the JSON string but got " + data['entity_type']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

RelationEntity.RequiredProperties = ["entity_type", "title"];

/**
 * Type of the entity (Company, Person, Place, Product, etc.)
 * @member {String} entity_type
 */
RelationEntity.prototype['entity_type'] = undefined;

/**
 * Normalized entity title based on existing entity normalization rules
 * @member {String} title
 */
RelationEntity.prototype['title'] = undefined;






export default RelationEntity;

