/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionBasicSection from './SubscriptionBasicSection';
import SubscriptionBillingSection from './SubscriptionBillingSection';
import SubscriptionFeatureSection from './SubscriptionFeatureSection';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 4.0
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * @alias module:model/Subscription
     * @param basicSettings {module:model/SubscriptionBasicSection} 
     * @param billingSettings {module:model/SubscriptionBillingSection} 
     * @param featureSettings {module:model/SubscriptionFeatureSection} 
     * @param name {String} Semantria subscriber name. Usually email
     * @param status {String} Semantria subscriber status. Can be active, expired, disabled, etc
     */
    constructor(basicSettings, billingSettings, featureSettings, name, status) { 
        
        Subscription.initialize(this, basicSettings, billingSettings, featureSettings, name, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, basicSettings, billingSettings, featureSettings, name, status) { 
        obj['basic_settings'] = basicSettings;
        obj['billing_settings'] = billingSettings;
        obj['feature_settings'] = featureSettings;
        obj['name'] = name;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('basic_settings')) {
                obj['basic_settings'] = SubscriptionBasicSection.constructFromObject(data['basic_settings']);
            }
            if (data.hasOwnProperty('billing_settings')) {
                obj['billing_settings'] = SubscriptionBillingSection.constructFromObject(data['billing_settings']);
            }
            if (data.hasOwnProperty('feature_settings')) {
                obj['feature_settings'] = SubscriptionFeatureSection.constructFromObject(data['feature_settings']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Subscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `basic_settings`
        if (data['basic_settings']) { // data not null
          SubscriptionBasicSection.validateJSON(data['basic_settings']);
        }
        // validate the optional field `billing_settings`
        if (data['billing_settings']) { // data not null
          SubscriptionBillingSection.validateJSON(data['billing_settings']);
        }
        // validate the optional field `feature_settings`
        if (data['feature_settings']) { // data not null
          SubscriptionFeatureSection.validateJSON(data['feature_settings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Subscription.RequiredProperties = ["basic_settings", "billing_settings", "feature_settings", "name", "status"];

/**
 * @member {module:model/SubscriptionBasicSection} basic_settings
 */
Subscription.prototype['basic_settings'] = undefined;

/**
 * @member {module:model/SubscriptionBillingSection} billing_settings
 */
Subscription.prototype['billing_settings'] = undefined;

/**
 * @member {module:model/SubscriptionFeatureSection} feature_settings
 */
Subscription.prototype['feature_settings'] = undefined;

/**
 * Semantria subscriber name. Usually email
 * @member {String} name
 */
Subscription.prototype['name'] = undefined;

/**
 * Semantria subscriber status. Can be active, expired, disabled, etc
 * @member {String} status
 */
Subscription.prototype['status'] = undefined;






export default Subscription;

