/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mention from './Mention';

/**
 * The Theme model module.
 * @module model/Theme
 * @version 4.0
 */
class Theme {
    /**
     * Constructs a new <code>Theme</code>.
     * @alias module:model/Theme
     * @param mentions {Array.<module:model/Mention>} Returns the concept and query defined topics determined for the text
     * @param normalized {String} The normalized form of the theme
     * @param phrasesCount {Number} Count of sentiment-bearing phrases was used in calculating theme's sentiment
     * @param sentimentPolarity {module:model/Theme.SentimentPolarityEnum} Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
     * @param sentimentScore {Number} Sentiment score for theme’s sentences across the documents
     * @param stemmed {String} The stemmed form of the theme
     * @param themesCount {Number} Count of themes across the documents that got rolled into this one
     * @param title {String} The text of the theme across the documents
     */
    constructor(mentions, normalized, phrasesCount, sentimentPolarity, sentimentScore, stemmed, themesCount, title) { 
        
        Theme.initialize(this, mentions, normalized, phrasesCount, sentimentPolarity, sentimentScore, stemmed, themesCount, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mentions, normalized, phrasesCount, sentimentPolarity, sentimentScore, stemmed, themesCount, title) { 
        obj['mentions'] = mentions;
        obj['normalized'] = normalized;
        obj['phrases_count'] = phrasesCount;
        obj['sentiment_polarity'] = sentimentPolarity;
        obj['sentiment_score'] = sentimentScore;
        obj['stemmed'] = stemmed;
        obj['themes_count'] = themesCount;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Theme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Theme} obj Optional instance to populate.
     * @return {module:model/Theme} The populated <code>Theme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Theme();

            if (data.hasOwnProperty('mentions')) {
                obj['mentions'] = ApiClient.convertToType(data['mentions'], [Mention]);
            }
            if (data.hasOwnProperty('normalized')) {
                obj['normalized'] = ApiClient.convertToType(data['normalized'], 'String');
            }
            if (data.hasOwnProperty('phrases_count')) {
                obj['phrases_count'] = ApiClient.convertToType(data['phrases_count'], 'Number');
            }
            if (data.hasOwnProperty('sentiment_polarity')) {
                obj['sentiment_polarity'] = ApiClient.convertToType(data['sentiment_polarity'], 'String');
            }
            if (data.hasOwnProperty('sentiment_score')) {
                obj['sentiment_score'] = ApiClient.convertToType(data['sentiment_score'], 'Number');
            }
            if (data.hasOwnProperty('stemmed')) {
                obj['stemmed'] = ApiClient.convertToType(data['stemmed'], 'String');
            }
            if (data.hasOwnProperty('themes_count')) {
                obj['themes_count'] = ApiClient.convertToType(data['themes_count'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Theme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Theme</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Theme.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['mentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mentions'])) {
                throw new Error("Expected the field `mentions` to be an array in the JSON data but got " + data['mentions']);
            }
            // validate the optional field `mentions` (array)
            for (const item of data['mentions']) {
                Mention.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['normalized'] && !(typeof data['normalized'] === 'string' || data['normalized'] instanceof String)) {
            throw new Error("Expected the field `normalized` to be a primitive type in the JSON string but got " + data['normalized']);
        }
        // ensure the json data is a string
        if (data['sentiment_polarity'] && !(typeof data['sentiment_polarity'] === 'string' || data['sentiment_polarity'] instanceof String)) {
            throw new Error("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got " + data['sentiment_polarity']);
        }
        // ensure the json data is a string
        if (data['stemmed'] && !(typeof data['stemmed'] === 'string' || data['stemmed'] instanceof String)) {
            throw new Error("Expected the field `stemmed` to be a primitive type in the JSON string but got " + data['stemmed']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Theme.RequiredProperties = ["mentions", "normalized", "phrases_count", "sentiment_polarity", "sentiment_score", "stemmed", "themes_count", "title"];

/**
 * Returns the concept and query defined topics determined for the text
 * @member {Array.<module:model/Mention>} mentions
 */
Theme.prototype['mentions'] = undefined;

/**
 * The normalized form of the theme
 * @member {String} normalized
 */
Theme.prototype['normalized'] = undefined;

/**
 * Count of sentiment-bearing phrases was used in calculating theme's sentiment
 * @member {Number} phrases_count
 */
Theme.prototype['phrases_count'] = undefined;

/**
 * Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
 * @member {module:model/Theme.SentimentPolarityEnum} sentiment_polarity
 */
Theme.prototype['sentiment_polarity'] = undefined;

/**
 * Sentiment score for theme’s sentences across the documents
 * @member {Number} sentiment_score
 */
Theme.prototype['sentiment_score'] = undefined;

/**
 * The stemmed form of the theme
 * @member {String} stemmed
 */
Theme.prototype['stemmed'] = undefined;

/**
 * Count of themes across the documents that got rolled into this one
 * @member {Number} themes_count
 */
Theme.prototype['themes_count'] = undefined;

/**
 * The text of the theme across the documents
 * @member {String} title
 */
Theme.prototype['title'] = undefined;





/**
 * Allowed values for the <code>sentiment_polarity</code> property.
 * @enum {String}
 * @readonly
 */
Theme['SentimentPolarityEnum'] = {

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral"
};



export default Theme;

