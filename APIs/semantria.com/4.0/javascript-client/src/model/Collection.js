/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Collection model module.
 * @module model/Collection
 * @version 4.0
 */
class Collection {
    /**
     * Constructs a new <code>Collection</code>.
     * @alias module:model/Collection
     * @param documents {Array.<String>} List of documents text that need to be analyzed by the service
     * @param id {String} Up to 32 symbols unique identifier of document assigned and tracked by client
     * @param jobId {String} Specific marker of incoming job that can be used then for collections retrieving
     * @param tag {String} Any text of up to 50 characters used like marker
     */
    constructor(documents, id, jobId, tag) { 
        
        Collection.initialize(this, documents, id, jobId, tag);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documents, id, jobId, tag) { 
        obj['documents'] = documents;
        obj['id'] = id;
        obj['job_id'] = jobId;
        obj['tag'] = tag;
    }

    /**
     * Constructs a <code>Collection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Collection} obj Optional instance to populate.
     * @return {module:model/Collection} The populated <code>Collection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Collection();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('job_id')) {
                obj['job_id'] = ApiClient.convertToType(data['job_id'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Collection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Collection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Collection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documents'])) {
            throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['job_id'] && !(typeof data['job_id'] === 'string' || data['job_id'] instanceof String)) {
            throw new Error("Expected the field `job_id` to be a primitive type in the JSON string but got " + data['job_id']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}

Collection.RequiredProperties = ["documents", "id", "job_id", "tag"];

/**
 * List of documents text that need to be analyzed by the service
 * @member {Array.<String>} documents
 */
Collection.prototype['documents'] = undefined;

/**
 * Up to 32 symbols unique identifier of document assigned and tracked by client
 * @member {String} id
 */
Collection.prototype['id'] = undefined;

/**
 * Specific marker of incoming job that can be used then for collections retrieving
 * @member {String} job_id
 */
Collection.prototype['job_id'] = undefined;

/**
 * Any text of up to 50 characters used like marker
 * @member {String} tag
 */
Collection.prototype['tag'] = undefined;






export default Collection;

