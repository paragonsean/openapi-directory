/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeatureDiscoveryModeSection model module.
 * @module model/FeatureDiscoveryModeSection
 * @version 4.0
 */
class FeatureDiscoveryModeSection {
    /**
     * Constructs a new <code>FeatureDiscoveryModeSection</code>.
     * @alias module:model/FeatureDiscoveryModeSection
     * @param entityMentions {Boolean} Represents whether mentions of entities supported for certain language or not
     * @param facetAttributes {Boolean} Represents whether attributes of facets supported for certain language or not
     * @param facetMentioins {Boolean} Represents whether mentions of facets supported for certain language or not
     * @param facets {Boolean} Represents whether facets detection supported for certain language or not
     * @param namedEntities {Boolean} Represents whether named entities extraction supported for certain language or not
     * @param queries {Boolean} Represents whether queries extraction supported for certain language or not
     * @param taxonomy {Boolean} Represents whether taxonomy feature supported for certain language or not
     * @param themeMentions {Boolean} Represents whether mentions of themes supported for certain language or not
     * @param themes {Boolean} Represents whether themes extraction supported for certain language or not
     * @param userCategories {Boolean} Represents whether user categories extraction supported for certain language or not
     * @param userEntities {Boolean} Represents whether user entities extraction supported for certain language or not
     */
    constructor(entityMentions, facetAttributes, facetMentioins, facets, namedEntities, queries, taxonomy, themeMentions, themes, userCategories, userEntities) { 
        
        FeatureDiscoveryModeSection.initialize(this, entityMentions, facetAttributes, facetMentioins, facets, namedEntities, queries, taxonomy, themeMentions, themes, userCategories, userEntities);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entityMentions, facetAttributes, facetMentioins, facets, namedEntities, queries, taxonomy, themeMentions, themes, userCategories, userEntities) { 
        obj['entity_mentions'] = entityMentions;
        obj['facet_attributes'] = facetAttributes;
        obj['facet_mentioins'] = facetMentioins;
        obj['facets'] = facets;
        obj['named_entities'] = namedEntities;
        obj['queries'] = queries;
        obj['taxonomy'] = taxonomy;
        obj['theme_mentions'] = themeMentions;
        obj['themes'] = themes;
        obj['user_categories'] = userCategories;
        obj['user_entities'] = userEntities;
    }

    /**
     * Constructs a <code>FeatureDiscoveryModeSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureDiscoveryModeSection} obj Optional instance to populate.
     * @return {module:model/FeatureDiscoveryModeSection} The populated <code>FeatureDiscoveryModeSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureDiscoveryModeSection();

            if (data.hasOwnProperty('entity_mentions')) {
                obj['entity_mentions'] = ApiClient.convertToType(data['entity_mentions'], 'Boolean');
            }
            if (data.hasOwnProperty('facet_attributes')) {
                obj['facet_attributes'] = ApiClient.convertToType(data['facet_attributes'], 'Boolean');
            }
            if (data.hasOwnProperty('facet_mentioins')) {
                obj['facet_mentioins'] = ApiClient.convertToType(data['facet_mentioins'], 'Boolean');
            }
            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], 'Boolean');
            }
            if (data.hasOwnProperty('named_entities')) {
                obj['named_entities'] = ApiClient.convertToType(data['named_entities'], 'Boolean');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], 'Boolean');
            }
            if (data.hasOwnProperty('taxonomy')) {
                obj['taxonomy'] = ApiClient.convertToType(data['taxonomy'], 'Boolean');
            }
            if (data.hasOwnProperty('theme_mentions')) {
                obj['theme_mentions'] = ApiClient.convertToType(data['theme_mentions'], 'Boolean');
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], 'Boolean');
            }
            if (data.hasOwnProperty('user_categories')) {
                obj['user_categories'] = ApiClient.convertToType(data['user_categories'], 'Boolean');
            }
            if (data.hasOwnProperty('user_entities')) {
                obj['user_entities'] = ApiClient.convertToType(data['user_entities'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureDiscoveryModeSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureDiscoveryModeSection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureDiscoveryModeSection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

FeatureDiscoveryModeSection.RequiredProperties = ["entity_mentions", "facet_attributes", "facet_mentioins", "facets", "named_entities", "queries", "taxonomy", "theme_mentions", "themes", "user_categories", "user_entities"];

/**
 * Represents whether mentions of entities supported for certain language or not
 * @member {Boolean} entity_mentions
 */
FeatureDiscoveryModeSection.prototype['entity_mentions'] = undefined;

/**
 * Represents whether attributes of facets supported for certain language or not
 * @member {Boolean} facet_attributes
 */
FeatureDiscoveryModeSection.prototype['facet_attributes'] = undefined;

/**
 * Represents whether mentions of facets supported for certain language or not
 * @member {Boolean} facet_mentioins
 */
FeatureDiscoveryModeSection.prototype['facet_mentioins'] = undefined;

/**
 * Represents whether facets detection supported for certain language or not
 * @member {Boolean} facets
 */
FeatureDiscoveryModeSection.prototype['facets'] = undefined;

/**
 * Represents whether named entities extraction supported for certain language or not
 * @member {Boolean} named_entities
 */
FeatureDiscoveryModeSection.prototype['named_entities'] = undefined;

/**
 * Represents whether queries extraction supported for certain language or not
 * @member {Boolean} queries
 */
FeatureDiscoveryModeSection.prototype['queries'] = undefined;

/**
 * Represents whether taxonomy feature supported for certain language or not
 * @member {Boolean} taxonomy
 */
FeatureDiscoveryModeSection.prototype['taxonomy'] = undefined;

/**
 * Represents whether mentions of themes supported for certain language or not
 * @member {Boolean} theme_mentions
 */
FeatureDiscoveryModeSection.prototype['theme_mentions'] = undefined;

/**
 * Represents whether themes extraction supported for certain language or not
 * @member {Boolean} themes
 */
FeatureDiscoveryModeSection.prototype['themes'] = undefined;

/**
 * Represents whether user categories extraction supported for certain language or not
 * @member {Boolean} user_categories
 */
FeatureDiscoveryModeSection.prototype['user_categories'] = undefined;

/**
 * Represents whether user entities extraction supported for certain language or not
 * @member {Boolean} user_entities
 */
FeatureDiscoveryModeSection.prototype['user_entities'] = undefined;






export default FeatureDiscoveryModeSection;

