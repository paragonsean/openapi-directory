/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Opinion model module.
 * @module model/Opinion
 * @version 4.0
 */
class Opinion {
    /**
     * Constructs a new <code>Opinion</code>.
     * @alias module:model/Opinion
     * @param quotation {String} The text of the expressed opinion
     * @param sentimentPolarity {module:model/Opinion.SentimentPolarityEnum} Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
     * @param sentimentScore {Number} The sentiment score associated with the opinion
     * @param speaker {Number} An entity title identifying the author of the opinion
     * @param topic {String} An entity title identifying the subject of the opinion, if applicable
     * @param type {module:model/Opinion.TypeEnum} Type of opinion according to extracted entity
     */
    constructor(quotation, sentimentPolarity, sentimentScore, speaker, topic, type) { 
        
        Opinion.initialize(this, quotation, sentimentPolarity, sentimentScore, speaker, topic, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, quotation, sentimentPolarity, sentimentScore, speaker, topic, type) { 
        obj['quotation'] = quotation;
        obj['sentiment_polarity'] = sentimentPolarity;
        obj['sentiment_score'] = sentimentScore;
        obj['speaker'] = speaker;
        obj['topic'] = topic;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Opinion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Opinion} obj Optional instance to populate.
     * @return {module:model/Opinion} The populated <code>Opinion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Opinion();

            if (data.hasOwnProperty('quotation')) {
                obj['quotation'] = ApiClient.convertToType(data['quotation'], 'String');
            }
            if (data.hasOwnProperty('sentiment_polarity')) {
                obj['sentiment_polarity'] = ApiClient.convertToType(data['sentiment_polarity'], 'String');
            }
            if (data.hasOwnProperty('sentiment_score')) {
                obj['sentiment_score'] = ApiClient.convertToType(data['sentiment_score'], 'Number');
            }
            if (data.hasOwnProperty('speaker')) {
                obj['speaker'] = ApiClient.convertToType(data['speaker'], 'Number');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Opinion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Opinion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Opinion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['quotation'] && !(typeof data['quotation'] === 'string' || data['quotation'] instanceof String)) {
            throw new Error("Expected the field `quotation` to be a primitive type in the JSON string but got " + data['quotation']);
        }
        // ensure the json data is a string
        if (data['sentiment_polarity'] && !(typeof data['sentiment_polarity'] === 'string' || data['sentiment_polarity'] instanceof String)) {
            throw new Error("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got " + data['sentiment_polarity']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Opinion.RequiredProperties = ["quotation", "sentiment_polarity", "sentiment_score", "speaker", "topic", "type"];

/**
 * The text of the expressed opinion
 * @member {String} quotation
 */
Opinion.prototype['quotation'] = undefined;

/**
 * Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
 * @member {module:model/Opinion.SentimentPolarityEnum} sentiment_polarity
 */
Opinion.prototype['sentiment_polarity'] = undefined;

/**
 * The sentiment score associated with the opinion
 * @member {Number} sentiment_score
 */
Opinion.prototype['sentiment_score'] = undefined;

/**
 * An entity title identifying the author of the opinion
 * @member {Number} speaker
 */
Opinion.prototype['speaker'] = undefined;

/**
 * An entity title identifying the subject of the opinion, if applicable
 * @member {String} topic
 */
Opinion.prototype['topic'] = undefined;

/**
 * Type of opinion according to extracted entity
 * @member {module:model/Opinion.TypeEnum} type
 */
Opinion.prototype['type'] = undefined;





/**
 * Allowed values for the <code>sentiment_polarity</code> property.
 * @enum {String}
 * @readonly
 */
Opinion['SentimentPolarityEnum'] = {

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Opinion['TypeEnum'] = {

    /**
     * value: "named"
     * @const
     */
    "named": "named",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default Opinion;

