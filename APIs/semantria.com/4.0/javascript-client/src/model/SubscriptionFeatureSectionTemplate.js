/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionFeatureSectionTemplate model module.
 * @module model/SubscriptionFeatureSectionTemplate
 * @version 4.0
 */
class SubscriptionFeatureSectionTemplate {
    /**
     * Constructs a new <code>SubscriptionFeatureSectionTemplate</code>.
     * @alias module:model/SubscriptionFeatureSectionTemplate
     * @param configId {String} Unique identifier of configuration associated with the vertical pack. Required for cloning
     * @param description {String} Verbal description of template features, belonging to domain area, etc.
     * @param id {String} Unique document identifier. Can be up to 36 alphanumeric characters
     * @param isFree {Boolean} Shows whether Vertical pack is free or requires subscription
     * @param language {String} The language supported by the vertical pack
     * @param name {String} Name of the vertical pack
     * @param type {module:model/SubscriptionFeatureSectionTemplate.TypeEnum} The type of the vertical pack, can be either \"vertical-pack\" or \"language-default\"
     * @param version {String} Version of the vertical pack, for versioning purposes.
     */
    constructor(configId, description, id, isFree, language, name, type, version) { 
        
        SubscriptionFeatureSectionTemplate.initialize(this, configId, description, id, isFree, language, name, type, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configId, description, id, isFree, language, name, type, version) { 
        obj['config_id'] = configId;
        obj['description'] = description;
        obj['id'] = id;
        obj['is_free'] = isFree;
        obj['language'] = language;
        obj['name'] = name;
        obj['type'] = type;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>SubscriptionFeatureSectionTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionFeatureSectionTemplate} obj Optional instance to populate.
     * @return {module:model/SubscriptionFeatureSectionTemplate} The populated <code>SubscriptionFeatureSectionTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionFeatureSectionTemplate();

            if (data.hasOwnProperty('config_id')) {
                obj['config_id'] = ApiClient.convertToType(data['config_id'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_free')) {
                obj['is_free'] = ApiClient.convertToType(data['is_free'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionFeatureSectionTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionFeatureSectionTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionFeatureSectionTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['config_id'] && !(typeof data['config_id'] === 'string' || data['config_id'] instanceof String)) {
            throw new Error("Expected the field `config_id` to be a primitive type in the JSON string but got " + data['config_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

SubscriptionFeatureSectionTemplate.RequiredProperties = ["config_id", "description", "id", "is_free", "language", "name", "type", "version"];

/**
 * Unique identifier of configuration associated with the vertical pack. Required for cloning
 * @member {String} config_id
 */
SubscriptionFeatureSectionTemplate.prototype['config_id'] = undefined;

/**
 * Verbal description of template features, belonging to domain area, etc.
 * @member {String} description
 */
SubscriptionFeatureSectionTemplate.prototype['description'] = undefined;

/**
 * Unique document identifier. Can be up to 36 alphanumeric characters
 * @member {String} id
 */
SubscriptionFeatureSectionTemplate.prototype['id'] = undefined;

/**
 * Shows whether Vertical pack is free or requires subscription
 * @member {Boolean} is_free
 */
SubscriptionFeatureSectionTemplate.prototype['is_free'] = undefined;

/**
 * The language supported by the vertical pack
 * @member {String} language
 */
SubscriptionFeatureSectionTemplate.prototype['language'] = undefined;

/**
 * Name of the vertical pack
 * @member {String} name
 */
SubscriptionFeatureSectionTemplate.prototype['name'] = undefined;

/**
 * The type of the vertical pack, can be either \"vertical-pack\" or \"language-default\"
 * @member {module:model/SubscriptionFeatureSectionTemplate.TypeEnum} type
 */
SubscriptionFeatureSectionTemplate.prototype['type'] = undefined;

/**
 * Version of the vertical pack, for versioning purposes.
 * @member {String} version
 */
SubscriptionFeatureSectionTemplate.prototype['version'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionFeatureSectionTemplate['TypeEnum'] = {

    /**
     * value: "language-default"
     * @const
     */
    "language-default": "language-default",

    /**
     * value: "vertical-pack"
     * @const
     */
    "vertical-pack": "vertical-pack"
};



export default SubscriptionFeatureSectionTemplate;

