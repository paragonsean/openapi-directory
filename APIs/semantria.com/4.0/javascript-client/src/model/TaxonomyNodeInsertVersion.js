/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaxonomyTopic from './TaxonomyTopic';

/**
 * The TaxonomyNodeInsertVersion model module.
 * @module model/TaxonomyNodeInsertVersion
 * @version 4.0
 */
class TaxonomyNodeInsertVersion {
    /**
     * Constructs a new <code>TaxonomyNodeInsertVersion</code>.
     * @alias module:model/TaxonomyNodeInsertVersion
     * @param name {String} Taxonomy name
     */
    constructor(name) { 
        
        TaxonomyNodeInsertVersion.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>TaxonomyNodeInsertVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxonomyNodeInsertVersion} obj Optional instance to populate.
     * @return {module:model/TaxonomyNodeInsertVersion} The populated <code>TaxonomyNodeInsertVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxonomyNodeInsertVersion();

            if (data.hasOwnProperty('enforce_parent_matching')) {
                obj['enforce_parent_matching'] = ApiClient.convertToType(data['enforce_parent_matching'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], [Object]);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [TaxonomyTopic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxonomyNodeInsertVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxonomyNodeInsertVersion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaxonomyNodeInsertVersion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nodes'])) {
            throw new Error("Expected the field `nodes` to be an array in the JSON data but got " + data['nodes']);
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                TaxonomyTopic.validateJSON(item);
            };
        }

        return true;
    }


}

TaxonomyNodeInsertVersion.RequiredProperties = ["name"];

/**
 * Enforces parent nodes to match on a content if the current node matches
 * @member {Boolean} enforce_parent_matching
 */
TaxonomyNodeInsertVersion.prototype['enforce_parent_matching'] = undefined;

/**
 * Taxonomy name
 * @member {String} name
 */
TaxonomyNodeInsertVersion.prototype['name'] = undefined;

/**
 * The list of sub-nodes associated with the current taxonomy node
 * @member {Array.<Object>} nodes
 */
TaxonomyNodeInsertVersion.prototype['nodes'] = undefined;

/**
 * The list of the topics associated with the current taxonomy node
 * @member {Array.<module:model/TaxonomyTopic>} topics
 */
TaxonomyNodeInsertVersion.prototype['topics'] = undefined;






export default TaxonomyNodeInsertVersion;

