/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionBasicSection model module.
 * @module model/SubscriptionBasicSection
 * @version 4.0
 */
class SubscriptionBasicSection {
    /**
     * Constructs a new <code>SubscriptionBasicSection</code>.
     * @alias module:model/SubscriptionBasicSection
     * @param autoResponseLimit {Number} Represents the maximum size of outgoing batch for auto-response feature
     * @param batchLimit {Number} Represents the maximum size of the incoming batch in documents
     * @param blacklistLimit {Number} Represents the maximum number of allowed blacklist items
     * @param callbackBatchLimit {Number} Represents the maximum size of outgoing batch for callback data retrieving mode
     * @param categoriesLimit {Number} Represents the maximum number of allowed categories
     * @param categorySamplesLimit {Number} Represents the maximum number of allowed category samples
     * @param charactersLimit {Number} Represents the maximum length of the document allowed for processing
     * @param collectionLimit {Number} Represents the maximum size of collection in documents
     * @param configurationsLimit {Number} Represents the maximum number of allowed configurations
     * @param entitiesLimit {Number} Represents the maximum number of allowed entities
     * @param outputDataLimit {Number} Represent the maximum number allowed as output limit of configuration
     * @param processedBatchLimit {Number} Represents the maximum size of outgoing batch for pulling data retrieving mode
     * @param queriesLimit {Number} Represents the maximum number of allowed queries
     * @param returnSourceText {Boolean} Indicates whether responding of source text along with the analysis data is allowed or not
     * @param sentimentLimit {Number} Represents the maximum number of allowed sentiment-bearing phrases
     */
    constructor(autoResponseLimit, batchLimit, blacklistLimit, callbackBatchLimit, categoriesLimit, categorySamplesLimit, charactersLimit, collectionLimit, configurationsLimit, entitiesLimit, outputDataLimit, processedBatchLimit, queriesLimit, returnSourceText, sentimentLimit) { 
        
        SubscriptionBasicSection.initialize(this, autoResponseLimit, batchLimit, blacklistLimit, callbackBatchLimit, categoriesLimit, categorySamplesLimit, charactersLimit, collectionLimit, configurationsLimit, entitiesLimit, outputDataLimit, processedBatchLimit, queriesLimit, returnSourceText, sentimentLimit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoResponseLimit, batchLimit, blacklistLimit, callbackBatchLimit, categoriesLimit, categorySamplesLimit, charactersLimit, collectionLimit, configurationsLimit, entitiesLimit, outputDataLimit, processedBatchLimit, queriesLimit, returnSourceText, sentimentLimit) { 
        obj['auto_response_limit'] = autoResponseLimit;
        obj['batch_limit'] = batchLimit;
        obj['blacklist_limit'] = blacklistLimit;
        obj['callback_batch_limit'] = callbackBatchLimit;
        obj['categories_limit'] = categoriesLimit;
        obj['category_samples_limit'] = categorySamplesLimit;
        obj['characters_limit'] = charactersLimit;
        obj['collection_limit'] = collectionLimit;
        obj['configurations_limit'] = configurationsLimit;
        obj['entities_limit'] = entitiesLimit;
        obj['output_data_limit'] = outputDataLimit;
        obj['processed_batch_limit'] = processedBatchLimit;
        obj['queries_limit'] = queriesLimit;
        obj['return_source_text'] = returnSourceText;
        obj['sentiment_limit'] = sentimentLimit;
    }

    /**
     * Constructs a <code>SubscriptionBasicSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionBasicSection} obj Optional instance to populate.
     * @return {module:model/SubscriptionBasicSection} The populated <code>SubscriptionBasicSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionBasicSection();

            if (data.hasOwnProperty('auto_response_limit')) {
                obj['auto_response_limit'] = ApiClient.convertToType(data['auto_response_limit'], 'Number');
            }
            if (data.hasOwnProperty('batch_limit')) {
                obj['batch_limit'] = ApiClient.convertToType(data['batch_limit'], 'Number');
            }
            if (data.hasOwnProperty('blacklist_limit')) {
                obj['blacklist_limit'] = ApiClient.convertToType(data['blacklist_limit'], 'Number');
            }
            if (data.hasOwnProperty('callback_batch_limit')) {
                obj['callback_batch_limit'] = ApiClient.convertToType(data['callback_batch_limit'], 'Number');
            }
            if (data.hasOwnProperty('categories_limit')) {
                obj['categories_limit'] = ApiClient.convertToType(data['categories_limit'], 'Number');
            }
            if (data.hasOwnProperty('category_samples_limit')) {
                obj['category_samples_limit'] = ApiClient.convertToType(data['category_samples_limit'], 'Number');
            }
            if (data.hasOwnProperty('characters_limit')) {
                obj['characters_limit'] = ApiClient.convertToType(data['characters_limit'], 'Number');
            }
            if (data.hasOwnProperty('collection_limit')) {
                obj['collection_limit'] = ApiClient.convertToType(data['collection_limit'], 'Number');
            }
            if (data.hasOwnProperty('configurations_limit')) {
                obj['configurations_limit'] = ApiClient.convertToType(data['configurations_limit'], 'Number');
            }
            if (data.hasOwnProperty('entities_limit')) {
                obj['entities_limit'] = ApiClient.convertToType(data['entities_limit'], 'Number');
            }
            if (data.hasOwnProperty('output_data_limit')) {
                obj['output_data_limit'] = ApiClient.convertToType(data['output_data_limit'], 'Number');
            }
            if (data.hasOwnProperty('processed_batch_limit')) {
                obj['processed_batch_limit'] = ApiClient.convertToType(data['processed_batch_limit'], 'Number');
            }
            if (data.hasOwnProperty('queries_limit')) {
                obj['queries_limit'] = ApiClient.convertToType(data['queries_limit'], 'Number');
            }
            if (data.hasOwnProperty('return_source_text')) {
                obj['return_source_text'] = ApiClient.convertToType(data['return_source_text'], 'Boolean');
            }
            if (data.hasOwnProperty('sentiment_limit')) {
                obj['sentiment_limit'] = ApiClient.convertToType(data['sentiment_limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionBasicSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionBasicSection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionBasicSection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

SubscriptionBasicSection.RequiredProperties = ["auto_response_limit", "batch_limit", "blacklist_limit", "callback_batch_limit", "categories_limit", "category_samples_limit", "characters_limit", "collection_limit", "configurations_limit", "entities_limit", "output_data_limit", "processed_batch_limit", "queries_limit", "return_source_text", "sentiment_limit"];

/**
 * Represents the maximum size of outgoing batch for auto-response feature
 * @member {Number} auto_response_limit
 */
SubscriptionBasicSection.prototype['auto_response_limit'] = undefined;

/**
 * Represents the maximum size of the incoming batch in documents
 * @member {Number} batch_limit
 */
SubscriptionBasicSection.prototype['batch_limit'] = undefined;

/**
 * Represents the maximum number of allowed blacklist items
 * @member {Number} blacklist_limit
 */
SubscriptionBasicSection.prototype['blacklist_limit'] = undefined;

/**
 * Represents the maximum size of outgoing batch for callback data retrieving mode
 * @member {Number} callback_batch_limit
 */
SubscriptionBasicSection.prototype['callback_batch_limit'] = undefined;

/**
 * Represents the maximum number of allowed categories
 * @member {Number} categories_limit
 */
SubscriptionBasicSection.prototype['categories_limit'] = undefined;

/**
 * Represents the maximum number of allowed category samples
 * @member {Number} category_samples_limit
 */
SubscriptionBasicSection.prototype['category_samples_limit'] = undefined;

/**
 * Represents the maximum length of the document allowed for processing
 * @member {Number} characters_limit
 */
SubscriptionBasicSection.prototype['characters_limit'] = undefined;

/**
 * Represents the maximum size of collection in documents
 * @member {Number} collection_limit
 */
SubscriptionBasicSection.prototype['collection_limit'] = undefined;

/**
 * Represents the maximum number of allowed configurations
 * @member {Number} configurations_limit
 */
SubscriptionBasicSection.prototype['configurations_limit'] = undefined;

/**
 * Represents the maximum number of allowed entities
 * @member {Number} entities_limit
 */
SubscriptionBasicSection.prototype['entities_limit'] = undefined;

/**
 * Represent the maximum number allowed as output limit of configuration
 * @member {Number} output_data_limit
 */
SubscriptionBasicSection.prototype['output_data_limit'] = undefined;

/**
 * Represents the maximum size of outgoing batch for pulling data retrieving mode
 * @member {Number} processed_batch_limit
 */
SubscriptionBasicSection.prototype['processed_batch_limit'] = undefined;

/**
 * Represents the maximum number of allowed queries
 * @member {Number} queries_limit
 */
SubscriptionBasicSection.prototype['queries_limit'] = undefined;

/**
 * Indicates whether responding of source text along with the analysis data is allowed or not
 * @member {Boolean} return_source_text
 */
SubscriptionBasicSection.prototype['return_source_text'] = undefined;

/**
 * Represents the maximum number of allowed sentiment-bearing phrases
 * @member {Number} sentiment_limit
 */
SubscriptionBasicSection.prototype['sentiment_limit'] = undefined;






export default SubscriptionBasicSection;

