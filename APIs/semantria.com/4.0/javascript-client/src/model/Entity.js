/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mention from './Mention';

/**
 * The Entity model module.
 * @module model/Entity
 * @version 4.0
 */
class Entity {
    /**
     * Constructs a new <code>Entity</code>.
     * @alias module:model/Entity
     * @param count {Number} The count of occurrences of the entity across the documents
     * @param entityType {String} Type of the entity (Company, Person, Place, Product, etc.)
     * @param label {String} Descriptive label for the entity, if applicable
     * @param mentions {Array.<module:model/Mention>} Returns the genuine forms of entity mentioned across the documents
     * @param negativeCount {Number} The count of negative occurrences of the entity across the documents
     * @param neutralCount {Number} The count of neutral occurrences of the entity across the documents
     * @param positiveCount {Number} The count of positive occurrences of the entity across the documents
     * @param title {String} Normalized form of the entity. It is the normalized entity title
     * @param type {module:model/Entity.TypeEnum} Type of the entity; can be either “named” or “user” (reserved for future usage)
     */
    constructor(count, entityType, label, mentions, negativeCount, neutralCount, positiveCount, title, type) { 
        
        Entity.initialize(this, count, entityType, label, mentions, negativeCount, neutralCount, positiveCount, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, entityType, label, mentions, negativeCount, neutralCount, positiveCount, title, type) { 
        obj['count'] = count;
        obj['entity_type'] = entityType;
        obj['label'] = label;
        obj['mentions'] = mentions;
        obj['negative_count'] = negativeCount;
        obj['neutral_count'] = neutralCount;
        obj['positive_count'] = positiveCount;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Entity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entity} obj Optional instance to populate.
     * @return {module:model/Entity} The populated <code>Entity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entity();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('entity_type')) {
                obj['entity_type'] = ApiClient.convertToType(data['entity_type'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('mentions')) {
                obj['mentions'] = ApiClient.convertToType(data['mentions'], [Mention]);
            }
            if (data.hasOwnProperty('negative_count')) {
                obj['negative_count'] = ApiClient.convertToType(data['negative_count'], 'Number');
            }
            if (data.hasOwnProperty('neutral_count')) {
                obj['neutral_count'] = ApiClient.convertToType(data['neutral_count'], 'Number');
            }
            if (data.hasOwnProperty('positive_count')) {
                obj['positive_count'] = ApiClient.convertToType(data['positive_count'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Entity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['entity_type'] && !(typeof data['entity_type'] === 'string' || data['entity_type'] instanceof String)) {
            throw new Error("Expected the field `entity_type` to be a primitive type in the JSON string but got " + data['entity_type']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        if (data['mentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mentions'])) {
                throw new Error("Expected the field `mentions` to be an array in the JSON data but got " + data['mentions']);
            }
            // validate the optional field `mentions` (array)
            for (const item of data['mentions']) {
                Mention.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Entity.RequiredProperties = ["count", "entity_type", "label", "mentions", "negative_count", "neutral_count", "positive_count", "title", "type"];

/**
 * The count of occurrences of the entity across the documents
 * @member {Number} count
 */
Entity.prototype['count'] = undefined;

/**
 * Type of the entity (Company, Person, Place, Product, etc.)
 * @member {String} entity_type
 */
Entity.prototype['entity_type'] = undefined;

/**
 * Descriptive label for the entity, if applicable
 * @member {String} label
 */
Entity.prototype['label'] = undefined;

/**
 * Returns the genuine forms of entity mentioned across the documents
 * @member {Array.<module:model/Mention>} mentions
 */
Entity.prototype['mentions'] = undefined;

/**
 * The count of negative occurrences of the entity across the documents
 * @member {Number} negative_count
 */
Entity.prototype['negative_count'] = undefined;

/**
 * The count of neutral occurrences of the entity across the documents
 * @member {Number} neutral_count
 */
Entity.prototype['neutral_count'] = undefined;

/**
 * The count of positive occurrences of the entity across the documents
 * @member {Number} positive_count
 */
Entity.prototype['positive_count'] = undefined;

/**
 * Normalized form of the entity. It is the normalized entity title
 * @member {String} title
 */
Entity.prototype['title'] = undefined;

/**
 * Type of the entity; can be either “named” or “user” (reserved for future usage)
 * @member {module:model/Entity.TypeEnum} type
 */
Entity.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Entity['TypeEnum'] = {

    /**
     * value: "named"
     * @const
     */
    "named": "named",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default Entity;

