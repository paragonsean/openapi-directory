/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StatisticConfiguration model module.
 * @module model/StatisticConfiguration
 * @version 4.0
 */
class StatisticConfiguration {
    /**
     * Constructs a new <code>StatisticConfiguration</code>.
     * @alias module:model/StatisticConfiguration
     * @param callsData {Number} Total number of data API calls made. These affect you API balance
     * @param callsPolling {Number} Total number of polling API calls made. These do not affect API balance
     * @param callsSettings {Number} Total number of settings API calls made. These do not affect API balance
     * @param collsFailed {Number} Total number of collections that have failed to be processed
     * @param collsProcessed {Number} Total numbers of collections that have been successfully processed
     * @param collsResponded {Number} Total number of successfully processed collections that have been returned
     * @param configId {String} Unique identifier of configuration
     * @param docsFailed {Number} Total number of documents that have failed to be processed
     * @param docsProcessed {Number} Total number of documents that have been successfully processed
     * @param docsResponded {Number} Total number of successfully processed documents that have been returned
     * @param latestUsedApp {String} The latest application that used the API on this account
     * @param name {String} The name of configuration
     * @param overallBatches {Number} Total number of queued batches of texts processed
     * @param overallCalls {Number} Total number of API calls made
     * @param overallDocs {Number} Total number of documents that have been queued
     * @param overallExceeded {Number} Total number of documents that have exceeded the favorable (suggested) limit
     * @param overallTexts {Number} Total number of texts processed
     * @param overcallColls {Number} Total numbers of collections that have been queued
     * @param usedApps {String} A list of all the applications that have used the API on this account
     */
    constructor(callsData, callsPolling, callsSettings, collsFailed, collsProcessed, collsResponded, configId, docsFailed, docsProcessed, docsResponded, latestUsedApp, name, overallBatches, overallCalls, overallDocs, overallExceeded, overallTexts, overcallColls, usedApps) { 
        
        StatisticConfiguration.initialize(this, callsData, callsPolling, callsSettings, collsFailed, collsProcessed, collsResponded, configId, docsFailed, docsProcessed, docsResponded, latestUsedApp, name, overallBatches, overallCalls, overallDocs, overallExceeded, overallTexts, overcallColls, usedApps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callsData, callsPolling, callsSettings, collsFailed, collsProcessed, collsResponded, configId, docsFailed, docsProcessed, docsResponded, latestUsedApp, name, overallBatches, overallCalls, overallDocs, overallExceeded, overallTexts, overcallColls, usedApps) { 
        obj['calls_data'] = callsData;
        obj['calls_polling'] = callsPolling;
        obj['calls_settings'] = callsSettings;
        obj['colls_failed'] = collsFailed;
        obj['colls_processed'] = collsProcessed;
        obj['colls_responded'] = collsResponded;
        obj['config_id'] = configId;
        obj['docs_failed'] = docsFailed;
        obj['docs_processed'] = docsProcessed;
        obj['docs_responded'] = docsResponded;
        obj['latest_used_app'] = latestUsedApp;
        obj['name'] = name;
        obj['overall_batches'] = overallBatches;
        obj['overall_calls'] = overallCalls;
        obj['overall_docs'] = overallDocs;
        obj['overall_exceeded'] = overallExceeded;
        obj['overall_texts'] = overallTexts;
        obj['overcall_colls'] = overcallColls;
        obj['used_apps'] = usedApps;
    }

    /**
     * Constructs a <code>StatisticConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatisticConfiguration} obj Optional instance to populate.
     * @return {module:model/StatisticConfiguration} The populated <code>StatisticConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatisticConfiguration();

            if (data.hasOwnProperty('calls_data')) {
                obj['calls_data'] = ApiClient.convertToType(data['calls_data'], 'Number');
            }
            if (data.hasOwnProperty('calls_polling')) {
                obj['calls_polling'] = ApiClient.convertToType(data['calls_polling'], 'Number');
            }
            if (data.hasOwnProperty('calls_settings')) {
                obj['calls_settings'] = ApiClient.convertToType(data['calls_settings'], 'Number');
            }
            if (data.hasOwnProperty('colls_failed')) {
                obj['colls_failed'] = ApiClient.convertToType(data['colls_failed'], 'Number');
            }
            if (data.hasOwnProperty('colls_processed')) {
                obj['colls_processed'] = ApiClient.convertToType(data['colls_processed'], 'Number');
            }
            if (data.hasOwnProperty('colls_responded')) {
                obj['colls_responded'] = ApiClient.convertToType(data['colls_responded'], 'Number');
            }
            if (data.hasOwnProperty('config_id')) {
                obj['config_id'] = ApiClient.convertToType(data['config_id'], 'String');
            }
            if (data.hasOwnProperty('docs_failed')) {
                obj['docs_failed'] = ApiClient.convertToType(data['docs_failed'], 'Number');
            }
            if (data.hasOwnProperty('docs_processed')) {
                obj['docs_processed'] = ApiClient.convertToType(data['docs_processed'], 'Number');
            }
            if (data.hasOwnProperty('docs_responded')) {
                obj['docs_responded'] = ApiClient.convertToType(data['docs_responded'], 'Number');
            }
            if (data.hasOwnProperty('latest_used_app')) {
                obj['latest_used_app'] = ApiClient.convertToType(data['latest_used_app'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overall_batches')) {
                obj['overall_batches'] = ApiClient.convertToType(data['overall_batches'], 'Number');
            }
            if (data.hasOwnProperty('overall_calls')) {
                obj['overall_calls'] = ApiClient.convertToType(data['overall_calls'], 'Number');
            }
            if (data.hasOwnProperty('overall_docs')) {
                obj['overall_docs'] = ApiClient.convertToType(data['overall_docs'], 'Number');
            }
            if (data.hasOwnProperty('overall_exceeded')) {
                obj['overall_exceeded'] = ApiClient.convertToType(data['overall_exceeded'], 'Number');
            }
            if (data.hasOwnProperty('overall_texts')) {
                obj['overall_texts'] = ApiClient.convertToType(data['overall_texts'], 'Number');
            }
            if (data.hasOwnProperty('overcall_colls')) {
                obj['overcall_colls'] = ApiClient.convertToType(data['overcall_colls'], 'Number');
            }
            if (data.hasOwnProperty('used_apps')) {
                obj['used_apps'] = ApiClient.convertToType(data['used_apps'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatisticConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatisticConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatisticConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['config_id'] && !(typeof data['config_id'] === 'string' || data['config_id'] instanceof String)) {
            throw new Error("Expected the field `config_id` to be a primitive type in the JSON string but got " + data['config_id']);
        }
        // ensure the json data is a string
        if (data['latest_used_app'] && !(typeof data['latest_used_app'] === 'string' || data['latest_used_app'] instanceof String)) {
            throw new Error("Expected the field `latest_used_app` to be a primitive type in the JSON string but got " + data['latest_used_app']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['used_apps'] && !(typeof data['used_apps'] === 'string' || data['used_apps'] instanceof String)) {
            throw new Error("Expected the field `used_apps` to be a primitive type in the JSON string but got " + data['used_apps']);
        }

        return true;
    }


}

StatisticConfiguration.RequiredProperties = ["calls_data", "calls_polling", "calls_settings", "colls_failed", "colls_processed", "colls_responded", "config_id", "docs_failed", "docs_processed", "docs_responded", "latest_used_app", "name", "overall_batches", "overall_calls", "overall_docs", "overall_exceeded", "overall_texts", "overcall_colls", "used_apps"];

/**
 * Total number of data API calls made. These affect you API balance
 * @member {Number} calls_data
 */
StatisticConfiguration.prototype['calls_data'] = undefined;

/**
 * Total number of polling API calls made. These do not affect API balance
 * @member {Number} calls_polling
 */
StatisticConfiguration.prototype['calls_polling'] = undefined;

/**
 * Total number of settings API calls made. These do not affect API balance
 * @member {Number} calls_settings
 */
StatisticConfiguration.prototype['calls_settings'] = undefined;

/**
 * Total number of collections that have failed to be processed
 * @member {Number} colls_failed
 */
StatisticConfiguration.prototype['colls_failed'] = undefined;

/**
 * Total numbers of collections that have been successfully processed
 * @member {Number} colls_processed
 */
StatisticConfiguration.prototype['colls_processed'] = undefined;

/**
 * Total number of successfully processed collections that have been returned
 * @member {Number} colls_responded
 */
StatisticConfiguration.prototype['colls_responded'] = undefined;

/**
 * Unique identifier of configuration
 * @member {String} config_id
 */
StatisticConfiguration.prototype['config_id'] = undefined;

/**
 * Total number of documents that have failed to be processed
 * @member {Number} docs_failed
 */
StatisticConfiguration.prototype['docs_failed'] = undefined;

/**
 * Total number of documents that have been successfully processed
 * @member {Number} docs_processed
 */
StatisticConfiguration.prototype['docs_processed'] = undefined;

/**
 * Total number of successfully processed documents that have been returned
 * @member {Number} docs_responded
 */
StatisticConfiguration.prototype['docs_responded'] = undefined;

/**
 * The latest application that used the API on this account
 * @member {String} latest_used_app
 */
StatisticConfiguration.prototype['latest_used_app'] = undefined;

/**
 * The name of configuration
 * @member {String} name
 */
StatisticConfiguration.prototype['name'] = undefined;

/**
 * Total number of queued batches of texts processed
 * @member {Number} overall_batches
 */
StatisticConfiguration.prototype['overall_batches'] = undefined;

/**
 * Total number of API calls made
 * @member {Number} overall_calls
 */
StatisticConfiguration.prototype['overall_calls'] = undefined;

/**
 * Total number of documents that have been queued
 * @member {Number} overall_docs
 */
StatisticConfiguration.prototype['overall_docs'] = undefined;

/**
 * Total number of documents that have exceeded the favorable (suggested) limit
 * @member {Number} overall_exceeded
 */
StatisticConfiguration.prototype['overall_exceeded'] = undefined;

/**
 * Total number of texts processed
 * @member {Number} overall_texts
 */
StatisticConfiguration.prototype['overall_texts'] = undefined;

/**
 * Total numbers of collections that have been queued
 * @member {Number} overcall_colls
 */
StatisticConfiguration.prototype['overcall_colls'] = undefined;

/**
 * A list of all the applications that have used the API on this account
 * @member {String} used_apps
 */
StatisticConfiguration.prototype['used_apps'] = undefined;






export default StatisticConfiguration;

