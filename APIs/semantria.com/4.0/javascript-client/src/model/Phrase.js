/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Phrase model module.
 * @module model/Phrase
 * @version 4.0
 */
class Phrase {
    /**
     * Constructs a new <code>Phrase</code>.
     * @alias module:model/Phrase
     * @param intensifyingPhrase {String} If the phrase has been intensified, this gives the intensifying phrase
     * @param isIntensified {Boolean} Specifies whether the phrase has been intensified or not
     * @param isNegated {Boolean} Specifies whether the phrase has been negated or not
     * @param negatingPhrase {String} If the phrase has been negated, this gives the negating phrase
     * @param sentimentPolarity {module:model/Phrase.SentimentPolarityEnum} Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
     * @param sentimentScore {Number} The sentiment score associated with this phrase
     * @param title {String} The text of the sentiment-bearing phrase
     * @param type {String} Type of phrase; can be either \"possible\" or \"detected\" value
     */
    constructor(intensifyingPhrase, isIntensified, isNegated, negatingPhrase, sentimentPolarity, sentimentScore, title, type) { 
        
        Phrase.initialize(this, intensifyingPhrase, isIntensified, isNegated, negatingPhrase, sentimentPolarity, sentimentScore, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, intensifyingPhrase, isIntensified, isNegated, negatingPhrase, sentimentPolarity, sentimentScore, title, type) { 
        obj['intensifying_phrase'] = intensifyingPhrase;
        obj['is_intensified'] = isIntensified;
        obj['is_negated'] = isNegated;
        obj['negating_phrase'] = negatingPhrase;
        obj['sentiment_polarity'] = sentimentPolarity;
        obj['sentiment_score'] = sentimentScore;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Phrase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Phrase} obj Optional instance to populate.
     * @return {module:model/Phrase} The populated <code>Phrase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Phrase();

            if (data.hasOwnProperty('intensifying_phrase')) {
                obj['intensifying_phrase'] = ApiClient.convertToType(data['intensifying_phrase'], 'String');
            }
            if (data.hasOwnProperty('is_intensified')) {
                obj['is_intensified'] = ApiClient.convertToType(data['is_intensified'], 'Boolean');
            }
            if (data.hasOwnProperty('is_negated')) {
                obj['is_negated'] = ApiClient.convertToType(data['is_negated'], 'Boolean');
            }
            if (data.hasOwnProperty('negating_phrase')) {
                obj['negating_phrase'] = ApiClient.convertToType(data['negating_phrase'], 'String');
            }
            if (data.hasOwnProperty('sentiment_polarity')) {
                obj['sentiment_polarity'] = ApiClient.convertToType(data['sentiment_polarity'], 'String');
            }
            if (data.hasOwnProperty('sentiment_score')) {
                obj['sentiment_score'] = ApiClient.convertToType(data['sentiment_score'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Phrase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Phrase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Phrase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['intensifying_phrase'] && !(typeof data['intensifying_phrase'] === 'string' || data['intensifying_phrase'] instanceof String)) {
            throw new Error("Expected the field `intensifying_phrase` to be a primitive type in the JSON string but got " + data['intensifying_phrase']);
        }
        // ensure the json data is a string
        if (data['negating_phrase'] && !(typeof data['negating_phrase'] === 'string' || data['negating_phrase'] instanceof String)) {
            throw new Error("Expected the field `negating_phrase` to be a primitive type in the JSON string but got " + data['negating_phrase']);
        }
        // ensure the json data is a string
        if (data['sentiment_polarity'] && !(typeof data['sentiment_polarity'] === 'string' || data['sentiment_polarity'] instanceof String)) {
            throw new Error("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got " + data['sentiment_polarity']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Phrase.RequiredProperties = ["intensifying_phrase", "is_intensified", "is_negated", "negating_phrase", "sentiment_polarity", "sentiment_score", "title", "type"];

/**
 * If the phrase has been intensified, this gives the intensifying phrase
 * @member {String} intensifying_phrase
 */
Phrase.prototype['intensifying_phrase'] = undefined;

/**
 * Specifies whether the phrase has been intensified or not
 * @member {Boolean} is_intensified
 */
Phrase.prototype['is_intensified'] = undefined;

/**
 * Specifies whether the phrase has been negated or not
 * @member {Boolean} is_negated
 */
Phrase.prototype['is_negated'] = undefined;

/**
 * If the phrase has been negated, this gives the negating phrase
 * @member {String} negating_phrase
 */
Phrase.prototype['negating_phrase'] = undefined;

/**
 * Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
 * @member {module:model/Phrase.SentimentPolarityEnum} sentiment_polarity
 */
Phrase.prototype['sentiment_polarity'] = undefined;

/**
 * The sentiment score associated with this phrase
 * @member {Number} sentiment_score
 */
Phrase.prototype['sentiment_score'] = undefined;

/**
 * The text of the sentiment-bearing phrase
 * @member {String} title
 */
Phrase.prototype['title'] = undefined;

/**
 * Type of phrase; can be either \"possible\" or \"detected\" value
 * @member {String} type
 */
Phrase.prototype['type'] = undefined;





/**
 * Allowed values for the <code>sentiment_polarity</code> property.
 * @enum {String}
 * @readonly
 */
Phrase['SentimentPolarityEnum'] = {

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral"
};



export default Phrase;

