/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoCategory from './AutoCategory';
import Details from './Details';
import Entity from './Entity';
import Intention from './Intention';
import ModelSentiment from './ModelSentiment';
import Opinion from './Opinion';
import Phrase from './Phrase';
import Relation from './Relation';
import Theme from './Theme';
import Topic from './Topic';

/**
 * The DocumentAnalyticData model module.
 * @module model/DocumentAnalyticData
 * @version 4.0
 */
class DocumentAnalyticData {
    /**
     * Constructs a new <code>DocumentAnalyticData</code>.
     * @alias module:model/DocumentAnalyticData
     * @param autoCategories {Array.<module:model/AutoCategory>} Auto-generated categories applicable for the document
     * @param configId {String} Unique configuration identifier. Usually 36 alphanumeric characters
     * @param details {Array.<module:model/Details>} Returns sentences from the original document with POS tags within
     * @param entities {Array.<module:model/Entity>} Returns the named entities and user defined entities from the text
     * @param id {String} Unique document identifier. Can be up to 36 alphanumeric characters
     * @param intentions {Array.<module:model/Intention>} Returns intentions list detected by the engine
     * @param jobId {String} Specific marker of a job document belongs to, can be used for documents ordering on client side
     * @param language {String} Determined language of source text
     * @param languageScore {Number} The percentage score of the best match of language among detected languages
     * @param modelSentiment {module:model/ModelSentiment} 
     * @param opinions {Array.<module:model/Opinion>} Returns the list of opinions extracted from the source text
     * @param phrases {Array.<module:model/Phrase>} Returns sentiment-bearing phrases of the document
     * @param relations {Array.<module:model/Relation>} Returns relations which represent a connection between one or more Entity objects
     * @param sentimentPolarity {module:model/DocumentAnalyticData.SentimentPolarityEnum} Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
     * @param sentimentScore {Number} A sentiment analysis of the document text
     * @param sourceText {String} Original source text passed by client for this document
     * @param status {module:model/DocumentAnalyticData.StatusEnum} Status of the document
     * @param summary {String} A summary of the document text
     * @param taxonomy {Array.<module:model/Topic>} Returns the taxonomy determined for the text
     * @param themes {Array.<module:model/Theme>} Returns themes of the document
     * @param topics {Array.<module:model/Topic>} Returns the concept and query defined topics determined for the text
     */
    constructor(autoCategories, configId, details, entities, id, intentions, jobId, language, languageScore, modelSentiment, opinions, phrases, relations, sentimentPolarity, sentimentScore, sourceText, status, summary, taxonomy, themes, topics) { 
        
        DocumentAnalyticData.initialize(this, autoCategories, configId, details, entities, id, intentions, jobId, language, languageScore, modelSentiment, opinions, phrases, relations, sentimentPolarity, sentimentScore, sourceText, status, summary, taxonomy, themes, topics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoCategories, configId, details, entities, id, intentions, jobId, language, languageScore, modelSentiment, opinions, phrases, relations, sentimentPolarity, sentimentScore, sourceText, status, summary, taxonomy, themes, topics) { 
        obj['auto_categories'] = autoCategories;
        obj['config_id'] = configId;
        obj['details'] = details;
        obj['entities'] = entities;
        obj['id'] = id;
        obj['intentions'] = intentions;
        obj['job_id'] = jobId;
        obj['language'] = language;
        obj['language_score'] = languageScore;
        obj['model_sentiment'] = modelSentiment;
        obj['opinions'] = opinions;
        obj['phrases'] = phrases;
        obj['relations'] = relations;
        obj['sentiment_polarity'] = sentimentPolarity;
        obj['sentiment_score'] = sentimentScore;
        obj['source_text'] = sourceText;
        obj['status'] = status;
        obj['summary'] = summary;
        obj['taxonomy'] = taxonomy;
        obj['themes'] = themes;
        obj['topics'] = topics;
    }

    /**
     * Constructs a <code>DocumentAnalyticData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentAnalyticData} obj Optional instance to populate.
     * @return {module:model/DocumentAnalyticData} The populated <code>DocumentAnalyticData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentAnalyticData();

            if (data.hasOwnProperty('auto_categories')) {
                obj['auto_categories'] = ApiClient.convertToType(data['auto_categories'], [AutoCategory]);
            }
            if (data.hasOwnProperty('config_id')) {
                obj['config_id'] = ApiClient.convertToType(data['config_id'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [Details]);
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [Entity]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('intentions')) {
                obj['intentions'] = ApiClient.convertToType(data['intentions'], [Intention]);
            }
            if (data.hasOwnProperty('job_id')) {
                obj['job_id'] = ApiClient.convertToType(data['job_id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('language_score')) {
                obj['language_score'] = ApiClient.convertToType(data['language_score'], 'Number');
            }
            if (data.hasOwnProperty('model_sentiment')) {
                obj['model_sentiment'] = ModelSentiment.constructFromObject(data['model_sentiment']);
            }
            if (data.hasOwnProperty('opinions')) {
                obj['opinions'] = ApiClient.convertToType(data['opinions'], [Opinion]);
            }
            if (data.hasOwnProperty('phrases')) {
                obj['phrases'] = ApiClient.convertToType(data['phrases'], [Phrase]);
            }
            if (data.hasOwnProperty('relations')) {
                obj['relations'] = ApiClient.convertToType(data['relations'], [Relation]);
            }
            if (data.hasOwnProperty('sentiment_polarity')) {
                obj['sentiment_polarity'] = ApiClient.convertToType(data['sentiment_polarity'], 'String');
            }
            if (data.hasOwnProperty('sentiment_score')) {
                obj['sentiment_score'] = ApiClient.convertToType(data['sentiment_score'], 'Number');
            }
            if (data.hasOwnProperty('source_text')) {
                obj['source_text'] = ApiClient.convertToType(data['source_text'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('taxonomy')) {
                obj['taxonomy'] = ApiClient.convertToType(data['taxonomy'], [Topic]);
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], [Theme]);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [Topic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentAnalyticData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentAnalyticData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentAnalyticData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['auto_categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auto_categories'])) {
                throw new Error("Expected the field `auto_categories` to be an array in the JSON data but got " + data['auto_categories']);
            }
            // validate the optional field `auto_categories` (array)
            for (const item of data['auto_categories']) {
                AutoCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['config_id'] && !(typeof data['config_id'] === 'string' || data['config_id'] instanceof String)) {
            throw new Error("Expected the field `config_id` to be a primitive type in the JSON string but got " + data['config_id']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                Details.validateJSON(item);
            };
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                Entity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['intentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intentions'])) {
                throw new Error("Expected the field `intentions` to be an array in the JSON data but got " + data['intentions']);
            }
            // validate the optional field `intentions` (array)
            for (const item of data['intentions']) {
                Intention.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['job_id'] && !(typeof data['job_id'] === 'string' || data['job_id'] instanceof String)) {
            throw new Error("Expected the field `job_id` to be a primitive type in the JSON string but got " + data['job_id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `model_sentiment`
        if (data['model_sentiment']) { // data not null
          ModelSentiment.validateJSON(data['model_sentiment']);
        }
        if (data['opinions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['opinions'])) {
                throw new Error("Expected the field `opinions` to be an array in the JSON data but got " + data['opinions']);
            }
            // validate the optional field `opinions` (array)
            for (const item of data['opinions']) {
                Opinion.validateJSON(item);
            };
        }
        if (data['phrases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phrases'])) {
                throw new Error("Expected the field `phrases` to be an array in the JSON data but got " + data['phrases']);
            }
            // validate the optional field `phrases` (array)
            for (const item of data['phrases']) {
                Phrase.validateJSON(item);
            };
        }
        if (data['relations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relations'])) {
                throw new Error("Expected the field `relations` to be an array in the JSON data but got " + data['relations']);
            }
            // validate the optional field `relations` (array)
            for (const item of data['relations']) {
                Relation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sentiment_polarity'] && !(typeof data['sentiment_polarity'] === 'string' || data['sentiment_polarity'] instanceof String)) {
            throw new Error("Expected the field `sentiment_polarity` to be a primitive type in the JSON string but got " + data['sentiment_polarity']);
        }
        // ensure the json data is a string
        if (data['source_text'] && !(typeof data['source_text'] === 'string' || data['source_text'] instanceof String)) {
            throw new Error("Expected the field `source_text` to be a primitive type in the JSON string but got " + data['source_text']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        if (data['taxonomy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxonomy'])) {
                throw new Error("Expected the field `taxonomy` to be an array in the JSON data but got " + data['taxonomy']);
            }
            // validate the optional field `taxonomy` (array)
            for (const item of data['taxonomy']) {
                Topic.validateJSON(item);
            };
        }
        if (data['themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themes'])) {
                throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
            }
            // validate the optional field `themes` (array)
            for (const item of data['themes']) {
                Theme.validateJSON(item);
            };
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                Topic.validateJSON(item);
            };
        }

        return true;
    }


}

DocumentAnalyticData.RequiredProperties = ["auto_categories", "config_id", "details", "entities", "id", "intentions", "job_id", "language", "language_score", "model_sentiment", "opinions", "phrases", "relations", "sentiment_polarity", "sentiment_score", "source_text", "status", "summary", "taxonomy", "themes", "topics"];

/**
 * Auto-generated categories applicable for the document
 * @member {Array.<module:model/AutoCategory>} auto_categories
 */
DocumentAnalyticData.prototype['auto_categories'] = undefined;

/**
 * Unique configuration identifier. Usually 36 alphanumeric characters
 * @member {String} config_id
 */
DocumentAnalyticData.prototype['config_id'] = undefined;

/**
 * Returns sentences from the original document with POS tags within
 * @member {Array.<module:model/Details>} details
 */
DocumentAnalyticData.prototype['details'] = undefined;

/**
 * Returns the named entities and user defined entities from the text
 * @member {Array.<module:model/Entity>} entities
 */
DocumentAnalyticData.prototype['entities'] = undefined;

/**
 * Unique document identifier. Can be up to 36 alphanumeric characters
 * @member {String} id
 */
DocumentAnalyticData.prototype['id'] = undefined;

/**
 * Returns intentions list detected by the engine
 * @member {Array.<module:model/Intention>} intentions
 */
DocumentAnalyticData.prototype['intentions'] = undefined;

/**
 * Specific marker of a job document belongs to, can be used for documents ordering on client side
 * @member {String} job_id
 */
DocumentAnalyticData.prototype['job_id'] = undefined;

/**
 * Determined language of source text
 * @member {String} language
 */
DocumentAnalyticData.prototype['language'] = undefined;

/**
 * The percentage score of the best match of language among detected languages
 * @member {Number} language_score
 */
DocumentAnalyticData.prototype['language_score'] = undefined;

/**
 * @member {module:model/ModelSentiment} model_sentiment
 */
DocumentAnalyticData.prototype['model_sentiment'] = undefined;

/**
 * Returns the list of opinions extracted from the source text
 * @member {Array.<module:model/Opinion>} opinions
 */
DocumentAnalyticData.prototype['opinions'] = undefined;

/**
 * Returns sentiment-bearing phrases of the document
 * @member {Array.<module:model/Phrase>} phrases
 */
DocumentAnalyticData.prototype['phrases'] = undefined;

/**
 * Returns relations which represent a connection between one or more Entity objects
 * @member {Array.<module:model/Relation>} relations
 */
DocumentAnalyticData.prototype['relations'] = undefined;

/**
 * Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"
 * @member {module:model/DocumentAnalyticData.SentimentPolarityEnum} sentiment_polarity
 */
DocumentAnalyticData.prototype['sentiment_polarity'] = undefined;

/**
 * A sentiment analysis of the document text
 * @member {Number} sentiment_score
 */
DocumentAnalyticData.prototype['sentiment_score'] = undefined;

/**
 * Original source text passed by client for this document
 * @member {String} source_text
 */
DocumentAnalyticData.prototype['source_text'] = undefined;

/**
 * Status of the document
 * @member {module:model/DocumentAnalyticData.StatusEnum} status
 */
DocumentAnalyticData.prototype['status'] = undefined;

/**
 * A summary of the document text
 * @member {String} summary
 */
DocumentAnalyticData.prototype['summary'] = undefined;

/**
 * Returns the taxonomy determined for the text
 * @member {Array.<module:model/Topic>} taxonomy
 */
DocumentAnalyticData.prototype['taxonomy'] = undefined;

/**
 * Returns themes of the document
 * @member {Array.<module:model/Theme>} themes
 */
DocumentAnalyticData.prototype['themes'] = undefined;

/**
 * Returns the concept and query defined topics determined for the text
 * @member {Array.<module:model/Topic>} topics
 */
DocumentAnalyticData.prototype['topics'] = undefined;





/**
 * Allowed values for the <code>sentiment_polarity</code> property.
 * @enum {String}
 * @readonly
 */
DocumentAnalyticData['SentimentPolarityEnum'] = {

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DocumentAnalyticData['StatusEnum'] = {

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default DocumentAnalyticData;

