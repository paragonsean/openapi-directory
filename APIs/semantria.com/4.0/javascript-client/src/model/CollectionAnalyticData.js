/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entity from './Entity';
import Facet from './Facet';
import Theme from './Theme';
import Topic from './Topic';

/**
 * The CollectionAnalyticData model module.
 * @module model/CollectionAnalyticData
 * @version 4.0
 */
class CollectionAnalyticData {
    /**
     * Constructs a new <code>CollectionAnalyticData</code>.
     * @alias module:model/CollectionAnalyticData
     * @param configId {String} Unique configuration identifier. Usually 36 alphanumeric characters
     * @param entities {Array.<module:model/Entity>} Returns the named entities and user defined entities from the text
     * @param facets {Array.<module:model/Facet>} Returns the facets extracted across all documents in the collection
     * @param id {String} Unique collection identifier. Can be up to 36 alphanumeric characters
     * @param jobId {String} Specific marker of a job collection belongs to, can be used for collections ordering on client side.
     * @param status {module:model/CollectionAnalyticData.StatusEnum} Status of the collection
     * @param tag {String} Any text of up to 50 characters used like marker
     * @param taxonomy {Array.<module:model/Topic>} Returns the taxonomy determined for the text
     * @param themes {Array.<module:model/Theme>} Returns themes across the documents
     * @param topics {Array.<module:model/Topic>} Returns the concept and query defined topics determined for the text
     */
    constructor(configId, entities, facets, id, jobId, status, tag, taxonomy, themes, topics) { 
        
        CollectionAnalyticData.initialize(this, configId, entities, facets, id, jobId, status, tag, taxonomy, themes, topics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configId, entities, facets, id, jobId, status, tag, taxonomy, themes, topics) { 
        obj['config_id'] = configId;
        obj['entities'] = entities;
        obj['facets'] = facets;
        obj['id'] = id;
        obj['job_id'] = jobId;
        obj['status'] = status;
        obj['tag'] = tag;
        obj['taxonomy'] = taxonomy;
        obj['themes'] = themes;
        obj['topics'] = topics;
    }

    /**
     * Constructs a <code>CollectionAnalyticData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectionAnalyticData} obj Optional instance to populate.
     * @return {module:model/CollectionAnalyticData} The populated <code>CollectionAnalyticData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectionAnalyticData();

            if (data.hasOwnProperty('config_id')) {
                obj['config_id'] = ApiClient.convertToType(data['config_id'], 'String');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [Entity]);
            }
            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], [Facet]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('job_id')) {
                obj['job_id'] = ApiClient.convertToType(data['job_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('taxonomy')) {
                obj['taxonomy'] = ApiClient.convertToType(data['taxonomy'], [Topic]);
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], [Theme]);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [Topic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectionAnalyticData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectionAnalyticData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CollectionAnalyticData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['config_id'] && !(typeof data['config_id'] === 'string' || data['config_id'] instanceof String)) {
            throw new Error("Expected the field `config_id` to be a primitive type in the JSON string but got " + data['config_id']);
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                Entity.validateJSON(item);
            };
        }
        if (data['facets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facets'])) {
                throw new Error("Expected the field `facets` to be an array in the JSON data but got " + data['facets']);
            }
            // validate the optional field `facets` (array)
            for (const item of data['facets']) {
                Facet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['job_id'] && !(typeof data['job_id'] === 'string' || data['job_id'] instanceof String)) {
            throw new Error("Expected the field `job_id` to be a primitive type in the JSON string but got " + data['job_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        if (data['taxonomy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxonomy'])) {
                throw new Error("Expected the field `taxonomy` to be an array in the JSON data but got " + data['taxonomy']);
            }
            // validate the optional field `taxonomy` (array)
            for (const item of data['taxonomy']) {
                Topic.validateJSON(item);
            };
        }
        if (data['themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themes'])) {
                throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
            }
            // validate the optional field `themes` (array)
            for (const item of data['themes']) {
                Theme.validateJSON(item);
            };
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                Topic.validateJSON(item);
            };
        }

        return true;
    }


}

CollectionAnalyticData.RequiredProperties = ["config_id", "entities", "facets", "id", "job_id", "status", "tag", "taxonomy", "themes", "topics"];

/**
 * Unique configuration identifier. Usually 36 alphanumeric characters
 * @member {String} config_id
 */
CollectionAnalyticData.prototype['config_id'] = undefined;

/**
 * Returns the named entities and user defined entities from the text
 * @member {Array.<module:model/Entity>} entities
 */
CollectionAnalyticData.prototype['entities'] = undefined;

/**
 * Returns the facets extracted across all documents in the collection
 * @member {Array.<module:model/Facet>} facets
 */
CollectionAnalyticData.prototype['facets'] = undefined;

/**
 * Unique collection identifier. Can be up to 36 alphanumeric characters
 * @member {String} id
 */
CollectionAnalyticData.prototype['id'] = undefined;

/**
 * Specific marker of a job collection belongs to, can be used for collections ordering on client side.
 * @member {String} job_id
 */
CollectionAnalyticData.prototype['job_id'] = undefined;

/**
 * Status of the collection
 * @member {module:model/CollectionAnalyticData.StatusEnum} status
 */
CollectionAnalyticData.prototype['status'] = undefined;

/**
 * Any text of up to 50 characters used like marker
 * @member {String} tag
 */
CollectionAnalyticData.prototype['tag'] = undefined;

/**
 * Returns the taxonomy determined for the text
 * @member {Array.<module:model/Topic>} taxonomy
 */
CollectionAnalyticData.prototype['taxonomy'] = undefined;

/**
 * Returns themes across the documents
 * @member {Array.<module:model/Theme>} themes
 */
CollectionAnalyticData.prototype['themes'] = undefined;

/**
 * Returns the concept and query defined topics determined for the text
 * @member {Array.<module:model/Topic>} topics
 */
CollectionAnalyticData.prototype['topics'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CollectionAnalyticData['StatusEnum'] = {

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default CollectionAnalyticData;

