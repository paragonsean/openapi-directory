/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeatureSettingsSection model module.
 * @module model/FeatureSettingsSection
 * @version 4.0
 */
class FeatureSettingsSection {
    /**
     * Constructs a new <code>FeatureSettingsSection</code>.
     * @alias module:model/FeatureSettingsSection
     * @param blacklist {Boolean} Represents whether blacklist feature supported for certain language or not
     * @param queries {Boolean} Represents whether queries definition supported for certain language or not
     * @param sentimentPhrases {Boolean} Represents whether sentiment-bearing phrases adjustmment supported for certain language or not
     * @param taxonomy {Boolean} Represents whether taxonomy feature supported for certain language or not
     * @param userCategories {Boolean} Represents whether user categories definition supported for certain language or not
     * @param userEntities {Boolean} Represents whether user entities definition supported for certain language or not
     */
    constructor(blacklist, queries, sentimentPhrases, taxonomy, userCategories, userEntities) { 
        
        FeatureSettingsSection.initialize(this, blacklist, queries, sentimentPhrases, taxonomy, userCategories, userEntities);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blacklist, queries, sentimentPhrases, taxonomy, userCategories, userEntities) { 
        obj['blacklist'] = blacklist;
        obj['queries'] = queries;
        obj['sentiment_phrases'] = sentimentPhrases;
        obj['taxonomy'] = taxonomy;
        obj['user_categories'] = userCategories;
        obj['user_entities'] = userEntities;
    }

    /**
     * Constructs a <code>FeatureSettingsSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureSettingsSection} obj Optional instance to populate.
     * @return {module:model/FeatureSettingsSection} The populated <code>FeatureSettingsSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureSettingsSection();

            if (data.hasOwnProperty('blacklist')) {
                obj['blacklist'] = ApiClient.convertToType(data['blacklist'], 'Boolean');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], 'Boolean');
            }
            if (data.hasOwnProperty('sentiment_phrases')) {
                obj['sentiment_phrases'] = ApiClient.convertToType(data['sentiment_phrases'], 'Boolean');
            }
            if (data.hasOwnProperty('taxonomy')) {
                obj['taxonomy'] = ApiClient.convertToType(data['taxonomy'], 'Boolean');
            }
            if (data.hasOwnProperty('user_categories')) {
                obj['user_categories'] = ApiClient.convertToType(data['user_categories'], 'Boolean');
            }
            if (data.hasOwnProperty('user_entities')) {
                obj['user_entities'] = ApiClient.convertToType(data['user_entities'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureSettingsSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureSettingsSection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureSettingsSection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

FeatureSettingsSection.RequiredProperties = ["blacklist", "queries", "sentiment_phrases", "taxonomy", "user_categories", "user_entities"];

/**
 * Represents whether blacklist feature supported for certain language or not
 * @member {Boolean} blacklist
 */
FeatureSettingsSection.prototype['blacklist'] = undefined;

/**
 * Represents whether queries definition supported for certain language or not
 * @member {Boolean} queries
 */
FeatureSettingsSection.prototype['queries'] = undefined;

/**
 * Represents whether sentiment-bearing phrases adjustmment supported for certain language or not
 * @member {Boolean} sentiment_phrases
 */
FeatureSettingsSection.prototype['sentiment_phrases'] = undefined;

/**
 * Represents whether taxonomy feature supported for certain language or not
 * @member {Boolean} taxonomy
 */
FeatureSettingsSection.prototype['taxonomy'] = undefined;

/**
 * Represents whether user categories definition supported for certain language or not
 * @member {Boolean} user_categories
 */
FeatureSettingsSection.prototype['user_categories'] = undefined;

/**
 * Represents whether user entities definition supported for certain language or not
 * @member {Boolean} user_entities
 */
FeatureSettingsSection.prototype['user_entities'] = undefined;






export default FeatureSettingsSection;

