/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Word from './Word';

/**
 * The Details model module.
 * @module model/Details
 * @version 4.0
 */
class Details {
    /**
     * Constructs a new <code>Details</code>.
     * @alias module:model/Details
     * @param isImperative {Boolean} Represents whether sentence (group of words) is imperative or not
     * @param isPolar {Boolean} Represents whether or not sentence content contains sentiment polarity
     * @param words {Array.<module:model/Word>} Returns list of words grouped by the parent sentence
     */
    constructor(isImperative, isPolar, words) { 
        
        Details.initialize(this, isImperative, isPolar, words);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isImperative, isPolar, words) { 
        obj['is_imperative'] = isImperative;
        obj['is_polar'] = isPolar;
        obj['words'] = words;
    }

    /**
     * Constructs a <code>Details</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Details} obj Optional instance to populate.
     * @return {module:model/Details} The populated <code>Details</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Details();

            if (data.hasOwnProperty('is_imperative')) {
                obj['is_imperative'] = ApiClient.convertToType(data['is_imperative'], 'Boolean');
            }
            if (data.hasOwnProperty('is_polar')) {
                obj['is_polar'] = ApiClient.convertToType(data['is_polar'], 'Boolean');
            }
            if (data.hasOwnProperty('words')) {
                obj['words'] = ApiClient.convertToType(data['words'], [Word]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Details</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Details</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Details.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['words']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['words'])) {
                throw new Error("Expected the field `words` to be an array in the JSON data but got " + data['words']);
            }
            // validate the optional field `words` (array)
            for (const item of data['words']) {
                Word.validateJSON(item);
            };
        }

        return true;
    }


}

Details.RequiredProperties = ["is_imperative", "is_polar", "words"];

/**
 * Represents whether sentence (group of words) is imperative or not
 * @member {Boolean} is_imperative
 */
Details.prototype['is_imperative'] = undefined;

/**
 * Represents whether or not sentence content contains sentiment polarity
 * @member {Boolean} is_polar
 */
Details.prototype['is_polar'] = undefined;

/**
 * Returns list of words grouped by the parent sentence
 * @member {Array.<module:model/Word>} words
 */
Details.prototype['words'] = undefined;






export default Details;

