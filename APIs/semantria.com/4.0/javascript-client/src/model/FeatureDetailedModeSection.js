/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeatureDetailedModeSection model module.
 * @module model/FeatureDetailedModeSection
 * @version 4.0
 */
class FeatureDetailedModeSection {
    /**
     * Constructs a new <code>FeatureDetailedModeSection</code>.
     * @alias module:model/FeatureDetailedModeSection
     * @param autoCategories {Boolean} Represents whether auto-categories of entities supported for certain language or not
     * @param entityMentions {Boolean} Represents whether mentions of entities supported for certain language or not
     * @param entityOpinions {Boolean} Represents whether opinions of entities supported for certain language or not
     * @param entityRelations {Boolean} Represents whether relations of entities supported for certain language or not
     * @param entityThemes {Boolean} Represents whether themes of entities supported for certain language or not
     * @param intentions {Boolean} Represents whether intentions detection supported for certain language or not
     * @param languageDetection {Boolean} Represents whether language detection feature supported or not
     * @param modelSentiment {Boolean} Represents whether model-based sentiment supported for certain language or not
     * @param namedEntities {Boolean} Represents whether named entities extraction supported for certain language or not
     * @param posTagging {Boolean} Represents whether POS tagging supported for certain language or not
     * @param queries {Boolean} Represents whether queries of entities supported for certain language or not
     * @param sentiment {Boolean} Represents whether sentiment detection supported for certain language or not
     * @param sentimentPhrases {Boolean} Represents whether sentiment phrases detection supported for certain language or not
     * @param summarization {Boolean} Represents whether summarization supported for certain language or not
     * @param taxonomy {Boolean} Represents whether taxonomy feature supported for certain language or not
     * @param themeMentions {Boolean} Represents whether mentions of themes supported for certain language or not
     * @param themes {Boolean} Represents whether themes extraction supported for certain language or not
     * @param userCategories {Boolean} Represents whether user categories of entities supported for certain language or not
     * @param userEntities {Boolean} Represents whether user entities extraction supported for certain language or not
     */
    constructor(autoCategories, entityMentions, entityOpinions, entityRelations, entityThemes, intentions, languageDetection, modelSentiment, namedEntities, posTagging, queries, sentiment, sentimentPhrases, summarization, taxonomy, themeMentions, themes, userCategories, userEntities) { 
        
        FeatureDetailedModeSection.initialize(this, autoCategories, entityMentions, entityOpinions, entityRelations, entityThemes, intentions, languageDetection, modelSentiment, namedEntities, posTagging, queries, sentiment, sentimentPhrases, summarization, taxonomy, themeMentions, themes, userCategories, userEntities);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoCategories, entityMentions, entityOpinions, entityRelations, entityThemes, intentions, languageDetection, modelSentiment, namedEntities, posTagging, queries, sentiment, sentimentPhrases, summarization, taxonomy, themeMentions, themes, userCategories, userEntities) { 
        obj['auto_categories'] = autoCategories;
        obj['entity_mentions'] = entityMentions;
        obj['entity_opinions'] = entityOpinions;
        obj['entity_relations'] = entityRelations;
        obj['entity_themes'] = entityThemes;
        obj['intentions'] = intentions;
        obj['language_detection'] = languageDetection;
        obj['model_sentiment'] = modelSentiment;
        obj['named_entities'] = namedEntities;
        obj['pos_tagging'] = posTagging;
        obj['queries'] = queries;
        obj['sentiment'] = sentiment;
        obj['sentiment_phrases'] = sentimentPhrases;
        obj['summarization'] = summarization;
        obj['taxonomy'] = taxonomy;
        obj['theme_mentions'] = themeMentions;
        obj['themes'] = themes;
        obj['user_categories'] = userCategories;
        obj['user_entities'] = userEntities;
    }

    /**
     * Constructs a <code>FeatureDetailedModeSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureDetailedModeSection} obj Optional instance to populate.
     * @return {module:model/FeatureDetailedModeSection} The populated <code>FeatureDetailedModeSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureDetailedModeSection();

            if (data.hasOwnProperty('auto_categories')) {
                obj['auto_categories'] = ApiClient.convertToType(data['auto_categories'], 'Boolean');
            }
            if (data.hasOwnProperty('entity_mentions')) {
                obj['entity_mentions'] = ApiClient.convertToType(data['entity_mentions'], 'Boolean');
            }
            if (data.hasOwnProperty('entity_opinions')) {
                obj['entity_opinions'] = ApiClient.convertToType(data['entity_opinions'], 'Boolean');
            }
            if (data.hasOwnProperty('entity_relations')) {
                obj['entity_relations'] = ApiClient.convertToType(data['entity_relations'], 'Boolean');
            }
            if (data.hasOwnProperty('entity_themes')) {
                obj['entity_themes'] = ApiClient.convertToType(data['entity_themes'], 'Boolean');
            }
            if (data.hasOwnProperty('intentions')) {
                obj['intentions'] = ApiClient.convertToType(data['intentions'], 'Boolean');
            }
            if (data.hasOwnProperty('language_detection')) {
                obj['language_detection'] = ApiClient.convertToType(data['language_detection'], 'Boolean');
            }
            if (data.hasOwnProperty('model_sentiment')) {
                obj['model_sentiment'] = ApiClient.convertToType(data['model_sentiment'], 'Boolean');
            }
            if (data.hasOwnProperty('named_entities')) {
                obj['named_entities'] = ApiClient.convertToType(data['named_entities'], 'Boolean');
            }
            if (data.hasOwnProperty('pos_tagging')) {
                obj['pos_tagging'] = ApiClient.convertToType(data['pos_tagging'], 'Boolean');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], 'Boolean');
            }
            if (data.hasOwnProperty('sentiment')) {
                obj['sentiment'] = ApiClient.convertToType(data['sentiment'], 'Boolean');
            }
            if (data.hasOwnProperty('sentiment_phrases')) {
                obj['sentiment_phrases'] = ApiClient.convertToType(data['sentiment_phrases'], 'Boolean');
            }
            if (data.hasOwnProperty('summarization')) {
                obj['summarization'] = ApiClient.convertToType(data['summarization'], 'Boolean');
            }
            if (data.hasOwnProperty('taxonomy')) {
                obj['taxonomy'] = ApiClient.convertToType(data['taxonomy'], 'Boolean');
            }
            if (data.hasOwnProperty('theme_mentions')) {
                obj['theme_mentions'] = ApiClient.convertToType(data['theme_mentions'], 'Boolean');
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], 'Boolean');
            }
            if (data.hasOwnProperty('user_categories')) {
                obj['user_categories'] = ApiClient.convertToType(data['user_categories'], 'Boolean');
            }
            if (data.hasOwnProperty('user_entities')) {
                obj['user_entities'] = ApiClient.convertToType(data['user_entities'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureDetailedModeSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureDetailedModeSection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureDetailedModeSection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

FeatureDetailedModeSection.RequiredProperties = ["auto_categories", "entity_mentions", "entity_opinions", "entity_relations", "entity_themes", "intentions", "language_detection", "model_sentiment", "named_entities", "pos_tagging", "queries", "sentiment", "sentiment_phrases", "summarization", "taxonomy", "theme_mentions", "themes", "user_categories", "user_entities"];

/**
 * Represents whether auto-categories of entities supported for certain language or not
 * @member {Boolean} auto_categories
 */
FeatureDetailedModeSection.prototype['auto_categories'] = undefined;

/**
 * Represents whether mentions of entities supported for certain language or not
 * @member {Boolean} entity_mentions
 */
FeatureDetailedModeSection.prototype['entity_mentions'] = undefined;

/**
 * Represents whether opinions of entities supported for certain language or not
 * @member {Boolean} entity_opinions
 */
FeatureDetailedModeSection.prototype['entity_opinions'] = undefined;

/**
 * Represents whether relations of entities supported for certain language or not
 * @member {Boolean} entity_relations
 */
FeatureDetailedModeSection.prototype['entity_relations'] = undefined;

/**
 * Represents whether themes of entities supported for certain language or not
 * @member {Boolean} entity_themes
 */
FeatureDetailedModeSection.prototype['entity_themes'] = undefined;

/**
 * Represents whether intentions detection supported for certain language or not
 * @member {Boolean} intentions
 */
FeatureDetailedModeSection.prototype['intentions'] = undefined;

/**
 * Represents whether language detection feature supported or not
 * @member {Boolean} language_detection
 */
FeatureDetailedModeSection.prototype['language_detection'] = undefined;

/**
 * Represents whether model-based sentiment supported for certain language or not
 * @member {Boolean} model_sentiment
 */
FeatureDetailedModeSection.prototype['model_sentiment'] = undefined;

/**
 * Represents whether named entities extraction supported for certain language or not
 * @member {Boolean} named_entities
 */
FeatureDetailedModeSection.prototype['named_entities'] = undefined;

/**
 * Represents whether POS tagging supported for certain language or not
 * @member {Boolean} pos_tagging
 */
FeatureDetailedModeSection.prototype['pos_tagging'] = undefined;

/**
 * Represents whether queries of entities supported for certain language or not
 * @member {Boolean} queries
 */
FeatureDetailedModeSection.prototype['queries'] = undefined;

/**
 * Represents whether sentiment detection supported for certain language or not
 * @member {Boolean} sentiment
 */
FeatureDetailedModeSection.prototype['sentiment'] = undefined;

/**
 * Represents whether sentiment phrases detection supported for certain language or not
 * @member {Boolean} sentiment_phrases
 */
FeatureDetailedModeSection.prototype['sentiment_phrases'] = undefined;

/**
 * Represents whether summarization supported for certain language or not
 * @member {Boolean} summarization
 */
FeatureDetailedModeSection.prototype['summarization'] = undefined;

/**
 * Represents whether taxonomy feature supported for certain language or not
 * @member {Boolean} taxonomy
 */
FeatureDetailedModeSection.prototype['taxonomy'] = undefined;

/**
 * Represents whether mentions of themes supported for certain language or not
 * @member {Boolean} theme_mentions
 */
FeatureDetailedModeSection.prototype['theme_mentions'] = undefined;

/**
 * Represents whether themes extraction supported for certain language or not
 * @member {Boolean} themes
 */
FeatureDetailedModeSection.prototype['themes'] = undefined;

/**
 * Represents whether user categories of entities supported for certain language or not
 * @member {Boolean} user_categories
 */
FeatureDetailedModeSection.prototype['user_categories'] = undefined;

/**
 * Represents whether user entities extraction supported for certain language or not
 * @member {Boolean} user_entities
 */
FeatureDetailedModeSection.prototype['user_entities'] = undefined;






export default FeatureDetailedModeSection;

