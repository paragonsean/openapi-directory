/**
 * Semantria
 * Semantria applies Text and Sentiment Analysis to tweets, facebook posts, surveys, reviews or enterprise content.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureDetailedModeSection from './FeatureDetailedModeSection';
import FeatureDiscoveryModeSection from './FeatureDiscoveryModeSection';
import FeatureSettingsSection from './FeatureSettingsSection';
import FeatureTemplateSection from './FeatureTemplateSection';

/**
 * The Feature model module.
 * @module model/Feature
 * @version 4.0
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * @alias module:model/Feature
     * @param detailedMode {module:model/FeatureDetailedModeSection} 
     * @param discoveryMode {module:model/FeatureDiscoveryModeSection} 
     * @param htmlProcessing {Boolean} Represents whether HTML processing supported for certain language or not
     * @param id {String} Unique language identifier
     * @param language {String} Represents language following options relevant to
     * @param oneSentenceMode {Boolean} Considers entire text as one sentence and uses optimized chunker for short content like tweets.
     * @param settings {module:model/FeatureSettingsSection} 
     * @param templates {module:model/FeatureTemplateSection} 
     */
    constructor(detailedMode, discoveryMode, htmlProcessing, id, language, oneSentenceMode, settings, templates) { 
        
        Feature.initialize(this, detailedMode, discoveryMode, htmlProcessing, id, language, oneSentenceMode, settings, templates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detailedMode, discoveryMode, htmlProcessing, id, language, oneSentenceMode, settings, templates) { 
        obj['detailed_mode'] = detailedMode;
        obj['discovery_mode'] = discoveryMode;
        obj['html_processing'] = htmlProcessing;
        obj['id'] = id;
        obj['language'] = language;
        obj['one_sentence_mode'] = oneSentenceMode;
        obj['settings'] = settings;
        obj['templates'] = templates;
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('detailed_mode')) {
                obj['detailed_mode'] = FeatureDetailedModeSection.constructFromObject(data['detailed_mode']);
            }
            if (data.hasOwnProperty('discovery_mode')) {
                obj['discovery_mode'] = FeatureDiscoveryModeSection.constructFromObject(data['discovery_mode']);
            }
            if (data.hasOwnProperty('html_processing')) {
                obj['html_processing'] = ApiClient.convertToType(data['html_processing'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('one_sentence_mode')) {
                obj['one_sentence_mode'] = ApiClient.convertToType(data['one_sentence_mode'], 'Boolean');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = FeatureSettingsSection.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('templates')) {
                obj['templates'] = FeatureTemplateSection.constructFromObject(data['templates']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feature</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Feature.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `detailed_mode`
        if (data['detailed_mode']) { // data not null
          FeatureDetailedModeSection.validateJSON(data['detailed_mode']);
        }
        // validate the optional field `discovery_mode`
        if (data['discovery_mode']) { // data not null
          FeatureDiscoveryModeSection.validateJSON(data['discovery_mode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          FeatureSettingsSection.validateJSON(data['settings']);
        }
        // validate the optional field `templates`
        if (data['templates']) { // data not null
          FeatureTemplateSection.validateJSON(data['templates']);
        }

        return true;
    }


}

Feature.RequiredProperties = ["detailed_mode", "discovery_mode", "html_processing", "id", "language", "one_sentence_mode", "settings", "templates"];

/**
 * @member {module:model/FeatureDetailedModeSection} detailed_mode
 */
Feature.prototype['detailed_mode'] = undefined;

/**
 * @member {module:model/FeatureDiscoveryModeSection} discovery_mode
 */
Feature.prototype['discovery_mode'] = undefined;

/**
 * Represents whether HTML processing supported for certain language or not
 * @member {Boolean} html_processing
 */
Feature.prototype['html_processing'] = undefined;

/**
 * Unique language identifier
 * @member {String} id
 */
Feature.prototype['id'] = undefined;

/**
 * Represents language following options relevant to
 * @member {String} language
 */
Feature.prototype['language'] = undefined;

/**
 * Considers entire text as one sentence and uses optimized chunker for short content like tweets.
 * @member {Boolean} one_sentence_mode
 */
Feature.prototype['one_sentence_mode'] = undefined;

/**
 * @member {module:model/FeatureSettingsSection} settings
 */
Feature.prototype['settings'] = undefined;

/**
 * @member {module:model/FeatureTemplateSection} templates
 */
Feature.prototype['templates'] = undefined;






export default Feature;

