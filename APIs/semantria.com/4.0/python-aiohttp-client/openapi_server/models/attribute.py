# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mention import Mention
from openapi_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, label: str=None, mentions: List[Mention]=None):
        """Attribute - a model defined in OpenAPI

        :param count: The count of this Attribute.
        :param label: The label of this Attribute.
        :param mentions: The mentions of this Attribute.
        """
        self.openapi_types = {
            'count': int,
            'label': str,
            'mentions': List[Mention]
        }

        self.attribute_map = {
            'count': 'count',
            'label': 'label',
            'mentions': 'mentions'
        }

        self._count = count
        self._label = label
        self._mentions = mentions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute of this Attribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Attribute.

        The count of occurrences of the attribute across the documents

        :return: The count of this Attribute.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Attribute.

        The count of occurrences of the attribute across the documents

        :param count: The count of this Attribute.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")
        if count is not None and count < 0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")

        self._count = count

    @property
    def label(self):
        """Gets the label of this Attribute.

        The text of the attribute

        :return: The label of this Attribute.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Attribute.

        The text of the attribute

        :param label: The label of this Attribute.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def mentions(self):
        """Gets the mentions of this Attribute.

        Returns genuine forms of attribute mentioned across the documents

        :return: The mentions of this Attribute.
        :rtype: List[Mention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Attribute.

        Returns genuine forms of attribute mentioned across the documents

        :param mentions: The mentions of this Attribute.
        :type mentions: List[Mention]
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")

        self._mentions = mentions
