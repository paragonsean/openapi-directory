# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionFeatureSectionCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concept_topics: bool=None, facets: bool=None, mentions: bool=None, named_entities: bool=None, query_topics: bool=None, themes: bool=None, user_entities: bool=None):
        """SubscriptionFeatureSectionCollection - a model defined in OpenAPI

        :param concept_topics: The concept_topics of this SubscriptionFeatureSectionCollection.
        :param facets: The facets of this SubscriptionFeatureSectionCollection.
        :param mentions: The mentions of this SubscriptionFeatureSectionCollection.
        :param named_entities: The named_entities of this SubscriptionFeatureSectionCollection.
        :param query_topics: The query_topics of this SubscriptionFeatureSectionCollection.
        :param themes: The themes of this SubscriptionFeatureSectionCollection.
        :param user_entities: The user_entities of this SubscriptionFeatureSectionCollection.
        """
        self.openapi_types = {
            'concept_topics': bool,
            'facets': bool,
            'mentions': bool,
            'named_entities': bool,
            'query_topics': bool,
            'themes': bool,
            'user_entities': bool
        }

        self.attribute_map = {
            'concept_topics': 'concept_topics',
            'facets': 'facets',
            'mentions': 'mentions',
            'named_entities': 'named_entities',
            'query_topics': 'query_topics',
            'themes': 'themes',
            'user_entities': 'user_entities'
        }

        self._concept_topics = concept_topics
        self._facets = facets
        self._mentions = mentions
        self._named_entities = named_entities
        self._query_topics = query_topics
        self._themes = themes
        self._user_entities = user_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionFeatureSectionCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionFeatureSectionCollection of this SubscriptionFeatureSectionCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concept_topics(self):
        """Gets the concept_topics of this SubscriptionFeatureSectionCollection.

        Indicates whether concept topics are allowed or not

        :return: The concept_topics of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._concept_topics

    @concept_topics.setter
    def concept_topics(self, concept_topics):
        """Sets the concept_topics of this SubscriptionFeatureSectionCollection.

        Indicates whether concept topics are allowed or not

        :param concept_topics: The concept_topics of this SubscriptionFeatureSectionCollection.
        :type concept_topics: bool
        """
        if concept_topics is None:
            raise ValueError("Invalid value for `concept_topics`, must not be `None`")

        self._concept_topics = concept_topics

    @property
    def facets(self):
        """Gets the facets of this SubscriptionFeatureSectionCollection.

        Indicates whether facets extraction feature is allowed or not

        :return: The facets of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this SubscriptionFeatureSectionCollection.

        Indicates whether facets extraction feature is allowed or not

        :param facets: The facets of this SubscriptionFeatureSectionCollection.
        :type facets: bool
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")

        self._facets = facets

    @property
    def mentions(self):
        """Gets the mentions of this SubscriptionFeatureSectionCollection.

        Indicates whether mentions are allowed for facets and attributes or not

        :return: The mentions of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this SubscriptionFeatureSectionCollection.

        Indicates whether mentions are allowed for facets and attributes or not

        :param mentions: The mentions of this SubscriptionFeatureSectionCollection.
        :type mentions: bool
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")

        self._mentions = mentions

    @property
    def named_entities(self):
        """Gets the named_entities of this SubscriptionFeatureSectionCollection.

        Indicates whether named entities feature is allowed or not

        :return: The named_entities of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._named_entities

    @named_entities.setter
    def named_entities(self, named_entities):
        """Sets the named_entities of this SubscriptionFeatureSectionCollection.

        Indicates whether named entities feature is allowed or not

        :param named_entities: The named_entities of this SubscriptionFeatureSectionCollection.
        :type named_entities: bool
        """
        if named_entities is None:
            raise ValueError("Invalid value for `named_entities`, must not be `None`")

        self._named_entities = named_entities

    @property
    def query_topics(self):
        """Gets the query_topics of this SubscriptionFeatureSectionCollection.

        Indicates whether query defined topics are allowed or not

        :return: The query_topics of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._query_topics

    @query_topics.setter
    def query_topics(self, query_topics):
        """Sets the query_topics of this SubscriptionFeatureSectionCollection.

        Indicates whether query defined topics are allowed or not

        :param query_topics: The query_topics of this SubscriptionFeatureSectionCollection.
        :type query_topics: bool
        """
        if query_topics is None:
            raise ValueError("Invalid value for `query_topics`, must not be `None`")

        self._query_topics = query_topics

    @property
    def themes(self):
        """Gets the themes of this SubscriptionFeatureSectionCollection.

        Indicates whether themes extraction feature is allowed or not

        :return: The themes of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this SubscriptionFeatureSectionCollection.

        Indicates whether themes extraction feature is allowed or not

        :param themes: The themes of this SubscriptionFeatureSectionCollection.
        :type themes: bool
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes

    @property
    def user_entities(self):
        """Gets the user_entities of this SubscriptionFeatureSectionCollection.

        Indicates whether user entities feature is allowed or not

        :return: The user_entities of this SubscriptionFeatureSectionCollection.
        :rtype: bool
        """
        return self._user_entities

    @user_entities.setter
    def user_entities(self, user_entities):
        """Sets the user_entities of this SubscriptionFeatureSectionCollection.

        Indicates whether user entities feature is allowed or not

        :param user_entities: The user_entities of this SubscriptionFeatureSectionCollection.
        :type user_entities: bool
        """
        if user_entities is None:
            raise ValueError("Invalid value for `user_entities`, must not be `None`")

        self._user_entities = user_entities
