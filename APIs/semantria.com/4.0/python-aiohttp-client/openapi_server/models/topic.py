# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hitcount: int=None, id: str=None, sentiment_polarity: str=None, sentiment_score: float=None, title: str=None, type: str=None):
        """Topic - a model defined in OpenAPI

        :param hitcount: The hitcount of this Topic.
        :param id: The id of this Topic.
        :param sentiment_polarity: The sentiment_polarity of this Topic.
        :param sentiment_score: The sentiment_score of this Topic.
        :param title: The title of this Topic.
        :param type: The type of this Topic.
        """
        self.openapi_types = {
            'hitcount': int,
            'id': str,
            'sentiment_polarity': str,
            'sentiment_score': float,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'hitcount': 'hitcount',
            'id': 'id',
            'sentiment_polarity': 'sentiment_polarity',
            'sentiment_score': 'sentiment_score',
            'title': 'title',
            'type': 'type'
        }

        self._hitcount = hitcount
        self._id = id
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_score = sentiment_score
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topic of this Topic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hitcount(self):
        """Gets the hitcount of this Topic.

        The number of documents within the collection that match the topic

        :return: The hitcount of this Topic.
        :rtype: int
        """
        return self._hitcount

    @hitcount.setter
    def hitcount(self, hitcount):
        """Sets the hitcount of this Topic.

        The number of documents within the collection that match the topic

        :param hitcount: The hitcount of this Topic.
        :type hitcount: int
        """
        if hitcount is None:
            raise ValueError("Invalid value for `hitcount`, must not be `None`")
        if hitcount is not None and hitcount < 0:
            raise ValueError("Invalid value for `hitcount`, must be a value greater than or equal to `0`")

        self._hitcount = hitcount

    @property
    def id(self):
        """Gets the id of this Topic.

        Unique topic identifier

        :return: The id of this Topic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Topic.

        Unique topic identifier

        :param id: The id of this Topic.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this Topic.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :return: The sentiment_polarity of this Topic.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this Topic.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :param sentiment_polarity: The sentiment_polarity of this Topic.
        :type sentiment_polarity: str
        """
        allowed_values = ["negative", "positive", "neutral"]  # noqa: E501
        if sentiment_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment_polarity` ({0}), must be one of {1}"
                .format(sentiment_polarity, allowed_values)
            )

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this Topic.

        The sentiment score for documents content associated with the topic

        :return: The sentiment_score of this Topic.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this Topic.

        The sentiment score for documents content associated with the topic

        :param sentiment_score: The sentiment_score of this Topic.
        :type sentiment_score: float
        """
        if sentiment_score is None:
            raise ValueError("Invalid value for `sentiment_score`, must not be `None`")

        self._sentiment_score = sentiment_score

    @property
    def title(self):
        """Gets the title of this Topic.

        The topic title, which is its label in the text

        :return: The title of this Topic.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Topic.

        The topic title, which is its label in the text

        :param title: The title of this Topic.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Topic.

        Type of the topic; can be either \"concept\" or \"query\"

        :return: The type of this Topic.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Topic.

        Type of the topic; can be either \"concept\" or \"query\"

        :param type: The type of this Topic.
        :type type: str
        """
        allowed_values = ["concept", "query"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
