# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity import Entity
from openapi_server.models.facet import Facet
from openapi_server.models.theme import Theme
from openapi_server.models.topic import Topic
from openapi_server import util


class CollectionAnalyticData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_id: str=None, entities: List[Entity]=None, facets: List[Facet]=None, id: str=None, job_id: str=None, status: str=None, tag: str=None, taxonomy: List[Topic]=None, themes: List[Theme]=None, topics: List[Topic]=None):
        """CollectionAnalyticData - a model defined in OpenAPI

        :param config_id: The config_id of this CollectionAnalyticData.
        :param entities: The entities of this CollectionAnalyticData.
        :param facets: The facets of this CollectionAnalyticData.
        :param id: The id of this CollectionAnalyticData.
        :param job_id: The job_id of this CollectionAnalyticData.
        :param status: The status of this CollectionAnalyticData.
        :param tag: The tag of this CollectionAnalyticData.
        :param taxonomy: The taxonomy of this CollectionAnalyticData.
        :param themes: The themes of this CollectionAnalyticData.
        :param topics: The topics of this CollectionAnalyticData.
        """
        self.openapi_types = {
            'config_id': str,
            'entities': List[Entity],
            'facets': List[Facet],
            'id': str,
            'job_id': str,
            'status': str,
            'tag': str,
            'taxonomy': List[Topic],
            'themes': List[Theme],
            'topics': List[Topic]
        }

        self.attribute_map = {
            'config_id': 'config_id',
            'entities': 'entities',
            'facets': 'facets',
            'id': 'id',
            'job_id': 'job_id',
            'status': 'status',
            'tag': 'tag',
            'taxonomy': 'taxonomy',
            'themes': 'themes',
            'topics': 'topics'
        }

        self._config_id = config_id
        self._entities = entities
        self._facets = facets
        self._id = id
        self._job_id = job_id
        self._status = status
        self._tag = tag
        self._taxonomy = taxonomy
        self._themes = themes
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionAnalyticData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionAnalyticData of this CollectionAnalyticData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_id(self):
        """Gets the config_id of this CollectionAnalyticData.

        Unique configuration identifier. Usually 36 alphanumeric characters

        :return: The config_id of this CollectionAnalyticData.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this CollectionAnalyticData.

        Unique configuration identifier. Usually 36 alphanumeric characters

        :param config_id: The config_id of this CollectionAnalyticData.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def entities(self):
        """Gets the entities of this CollectionAnalyticData.

        Returns the named entities and user defined entities from the text

        :return: The entities of this CollectionAnalyticData.
        :rtype: List[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this CollectionAnalyticData.

        Returns the named entities and user defined entities from the text

        :param entities: The entities of this CollectionAnalyticData.
        :type entities: List[Entity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def facets(self):
        """Gets the facets of this CollectionAnalyticData.

        Returns the facets extracted across all documents in the collection

        :return: The facets of this CollectionAnalyticData.
        :rtype: List[Facet]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this CollectionAnalyticData.

        Returns the facets extracted across all documents in the collection

        :param facets: The facets of this CollectionAnalyticData.
        :type facets: List[Facet]
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")

        self._facets = facets

    @property
    def id(self):
        """Gets the id of this CollectionAnalyticData.

        Unique collection identifier. Can be up to 36 alphanumeric characters

        :return: The id of this CollectionAnalyticData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionAnalyticData.

        Unique collection identifier. Can be up to 36 alphanumeric characters

        :param id: The id of this CollectionAnalyticData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def job_id(self):
        """Gets the job_id of this CollectionAnalyticData.

        Specific marker of a job collection belongs to, can be used for collections ordering on client side.

        :return: The job_id of this CollectionAnalyticData.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CollectionAnalyticData.

        Specific marker of a job collection belongs to, can be used for collections ordering on client side.

        :param job_id: The job_id of this CollectionAnalyticData.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def status(self):
        """Gets the status of this CollectionAnalyticData.

        Status of the collection

        :return: The status of this CollectionAnalyticData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CollectionAnalyticData.

        Status of the collection

        :param status: The status of this CollectionAnalyticData.
        :type status: str
        """
        allowed_values = ["queued", "processed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this CollectionAnalyticData.

        Any text of up to 50 characters used like marker

        :return: The tag of this CollectionAnalyticData.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CollectionAnalyticData.

        Any text of up to 50 characters used like marker

        :param tag: The tag of this CollectionAnalyticData.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag

    @property
    def taxonomy(self):
        """Gets the taxonomy of this CollectionAnalyticData.

        Returns the taxonomy determined for the text

        :return: The taxonomy of this CollectionAnalyticData.
        :rtype: List[Topic]
        """
        return self._taxonomy

    @taxonomy.setter
    def taxonomy(self, taxonomy):
        """Sets the taxonomy of this CollectionAnalyticData.

        Returns the taxonomy determined for the text

        :param taxonomy: The taxonomy of this CollectionAnalyticData.
        :type taxonomy: List[Topic]
        """
        if taxonomy is None:
            raise ValueError("Invalid value for `taxonomy`, must not be `None`")

        self._taxonomy = taxonomy

    @property
    def themes(self):
        """Gets the themes of this CollectionAnalyticData.

        Returns themes across the documents

        :return: The themes of this CollectionAnalyticData.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this CollectionAnalyticData.

        Returns themes across the documents

        :param themes: The themes of this CollectionAnalyticData.
        :type themes: List[Theme]
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes

    @property
    def topics(self):
        """Gets the topics of this CollectionAnalyticData.

        Returns the concept and query defined topics determined for the text

        :return: The topics of this CollectionAnalyticData.
        :rtype: List[Topic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this CollectionAnalyticData.

        Returns the concept and query defined topics determined for the text

        :param topics: The topics of this CollectionAnalyticData.
        :type topics: List[Topic]
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")

        self._topics = topics
