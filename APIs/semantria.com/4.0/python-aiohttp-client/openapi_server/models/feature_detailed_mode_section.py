# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureDetailedModeSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_categories: bool=None, entity_mentions: bool=None, entity_opinions: bool=None, entity_relations: bool=None, entity_themes: bool=None, intentions: bool=None, language_detection: bool=None, model_sentiment: bool=None, named_entities: bool=None, pos_tagging: bool=None, queries: bool=None, sentiment: bool=None, sentiment_phrases: bool=None, summarization: bool=None, taxonomy: bool=None, theme_mentions: bool=None, themes: bool=None, user_categories: bool=None, user_entities: bool=None):
        """FeatureDetailedModeSection - a model defined in OpenAPI

        :param auto_categories: The auto_categories of this FeatureDetailedModeSection.
        :param entity_mentions: The entity_mentions of this FeatureDetailedModeSection.
        :param entity_opinions: The entity_opinions of this FeatureDetailedModeSection.
        :param entity_relations: The entity_relations of this FeatureDetailedModeSection.
        :param entity_themes: The entity_themes of this FeatureDetailedModeSection.
        :param intentions: The intentions of this FeatureDetailedModeSection.
        :param language_detection: The language_detection of this FeatureDetailedModeSection.
        :param model_sentiment: The model_sentiment of this FeatureDetailedModeSection.
        :param named_entities: The named_entities of this FeatureDetailedModeSection.
        :param pos_tagging: The pos_tagging of this FeatureDetailedModeSection.
        :param queries: The queries of this FeatureDetailedModeSection.
        :param sentiment: The sentiment of this FeatureDetailedModeSection.
        :param sentiment_phrases: The sentiment_phrases of this FeatureDetailedModeSection.
        :param summarization: The summarization of this FeatureDetailedModeSection.
        :param taxonomy: The taxonomy of this FeatureDetailedModeSection.
        :param theme_mentions: The theme_mentions of this FeatureDetailedModeSection.
        :param themes: The themes of this FeatureDetailedModeSection.
        :param user_categories: The user_categories of this FeatureDetailedModeSection.
        :param user_entities: The user_entities of this FeatureDetailedModeSection.
        """
        self.openapi_types = {
            'auto_categories': bool,
            'entity_mentions': bool,
            'entity_opinions': bool,
            'entity_relations': bool,
            'entity_themes': bool,
            'intentions': bool,
            'language_detection': bool,
            'model_sentiment': bool,
            'named_entities': bool,
            'pos_tagging': bool,
            'queries': bool,
            'sentiment': bool,
            'sentiment_phrases': bool,
            'summarization': bool,
            'taxonomy': bool,
            'theme_mentions': bool,
            'themes': bool,
            'user_categories': bool,
            'user_entities': bool
        }

        self.attribute_map = {
            'auto_categories': 'auto_categories',
            'entity_mentions': 'entity_mentions',
            'entity_opinions': 'entity_opinions',
            'entity_relations': 'entity_relations',
            'entity_themes': 'entity_themes',
            'intentions': 'intentions',
            'language_detection': 'language_detection',
            'model_sentiment': 'model_sentiment',
            'named_entities': 'named_entities',
            'pos_tagging': 'pos_tagging',
            'queries': 'queries',
            'sentiment': 'sentiment',
            'sentiment_phrases': 'sentiment_phrases',
            'summarization': 'summarization',
            'taxonomy': 'taxonomy',
            'theme_mentions': 'theme_mentions',
            'themes': 'themes',
            'user_categories': 'user_categories',
            'user_entities': 'user_entities'
        }

        self._auto_categories = auto_categories
        self._entity_mentions = entity_mentions
        self._entity_opinions = entity_opinions
        self._entity_relations = entity_relations
        self._entity_themes = entity_themes
        self._intentions = intentions
        self._language_detection = language_detection
        self._model_sentiment = model_sentiment
        self._named_entities = named_entities
        self._pos_tagging = pos_tagging
        self._queries = queries
        self._sentiment = sentiment
        self._sentiment_phrases = sentiment_phrases
        self._summarization = summarization
        self._taxonomy = taxonomy
        self._theme_mentions = theme_mentions
        self._themes = themes
        self._user_categories = user_categories
        self._user_entities = user_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureDetailedModeSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureDetailedModeSection of this FeatureDetailedModeSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_categories(self):
        """Gets the auto_categories of this FeatureDetailedModeSection.

        Represents whether auto-categories of entities supported for certain language or not

        :return: The auto_categories of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._auto_categories

    @auto_categories.setter
    def auto_categories(self, auto_categories):
        """Sets the auto_categories of this FeatureDetailedModeSection.

        Represents whether auto-categories of entities supported for certain language or not

        :param auto_categories: The auto_categories of this FeatureDetailedModeSection.
        :type auto_categories: bool
        """
        if auto_categories is None:
            raise ValueError("Invalid value for `auto_categories`, must not be `None`")

        self._auto_categories = auto_categories

    @property
    def entity_mentions(self):
        """Gets the entity_mentions of this FeatureDetailedModeSection.

        Represents whether mentions of entities supported for certain language or not

        :return: The entity_mentions of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._entity_mentions

    @entity_mentions.setter
    def entity_mentions(self, entity_mentions):
        """Sets the entity_mentions of this FeatureDetailedModeSection.

        Represents whether mentions of entities supported for certain language or not

        :param entity_mentions: The entity_mentions of this FeatureDetailedModeSection.
        :type entity_mentions: bool
        """
        if entity_mentions is None:
            raise ValueError("Invalid value for `entity_mentions`, must not be `None`")

        self._entity_mentions = entity_mentions

    @property
    def entity_opinions(self):
        """Gets the entity_opinions of this FeatureDetailedModeSection.

        Represents whether opinions of entities supported for certain language or not

        :return: The entity_opinions of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._entity_opinions

    @entity_opinions.setter
    def entity_opinions(self, entity_opinions):
        """Sets the entity_opinions of this FeatureDetailedModeSection.

        Represents whether opinions of entities supported for certain language or not

        :param entity_opinions: The entity_opinions of this FeatureDetailedModeSection.
        :type entity_opinions: bool
        """
        if entity_opinions is None:
            raise ValueError("Invalid value for `entity_opinions`, must not be `None`")

        self._entity_opinions = entity_opinions

    @property
    def entity_relations(self):
        """Gets the entity_relations of this FeatureDetailedModeSection.

        Represents whether relations of entities supported for certain language or not

        :return: The entity_relations of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._entity_relations

    @entity_relations.setter
    def entity_relations(self, entity_relations):
        """Sets the entity_relations of this FeatureDetailedModeSection.

        Represents whether relations of entities supported for certain language or not

        :param entity_relations: The entity_relations of this FeatureDetailedModeSection.
        :type entity_relations: bool
        """
        if entity_relations is None:
            raise ValueError("Invalid value for `entity_relations`, must not be `None`")

        self._entity_relations = entity_relations

    @property
    def entity_themes(self):
        """Gets the entity_themes of this FeatureDetailedModeSection.

        Represents whether themes of entities supported for certain language or not

        :return: The entity_themes of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._entity_themes

    @entity_themes.setter
    def entity_themes(self, entity_themes):
        """Sets the entity_themes of this FeatureDetailedModeSection.

        Represents whether themes of entities supported for certain language or not

        :param entity_themes: The entity_themes of this FeatureDetailedModeSection.
        :type entity_themes: bool
        """
        if entity_themes is None:
            raise ValueError("Invalid value for `entity_themes`, must not be `None`")

        self._entity_themes = entity_themes

    @property
    def intentions(self):
        """Gets the intentions of this FeatureDetailedModeSection.

        Represents whether intentions detection supported for certain language or not

        :return: The intentions of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._intentions

    @intentions.setter
    def intentions(self, intentions):
        """Sets the intentions of this FeatureDetailedModeSection.

        Represents whether intentions detection supported for certain language or not

        :param intentions: The intentions of this FeatureDetailedModeSection.
        :type intentions: bool
        """
        if intentions is None:
            raise ValueError("Invalid value for `intentions`, must not be `None`")

        self._intentions = intentions

    @property
    def language_detection(self):
        """Gets the language_detection of this FeatureDetailedModeSection.

        Represents whether language detection feature supported or not

        :return: The language_detection of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._language_detection

    @language_detection.setter
    def language_detection(self, language_detection):
        """Sets the language_detection of this FeatureDetailedModeSection.

        Represents whether language detection feature supported or not

        :param language_detection: The language_detection of this FeatureDetailedModeSection.
        :type language_detection: bool
        """
        if language_detection is None:
            raise ValueError("Invalid value for `language_detection`, must not be `None`")

        self._language_detection = language_detection

    @property
    def model_sentiment(self):
        """Gets the model_sentiment of this FeatureDetailedModeSection.

        Represents whether model-based sentiment supported for certain language or not

        :return: The model_sentiment of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._model_sentiment

    @model_sentiment.setter
    def model_sentiment(self, model_sentiment):
        """Sets the model_sentiment of this FeatureDetailedModeSection.

        Represents whether model-based sentiment supported for certain language or not

        :param model_sentiment: The model_sentiment of this FeatureDetailedModeSection.
        :type model_sentiment: bool
        """
        if model_sentiment is None:
            raise ValueError("Invalid value for `model_sentiment`, must not be `None`")

        self._model_sentiment = model_sentiment

    @property
    def named_entities(self):
        """Gets the named_entities of this FeatureDetailedModeSection.

        Represents whether named entities extraction supported for certain language or not

        :return: The named_entities of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._named_entities

    @named_entities.setter
    def named_entities(self, named_entities):
        """Sets the named_entities of this FeatureDetailedModeSection.

        Represents whether named entities extraction supported for certain language or not

        :param named_entities: The named_entities of this FeatureDetailedModeSection.
        :type named_entities: bool
        """
        if named_entities is None:
            raise ValueError("Invalid value for `named_entities`, must not be `None`")

        self._named_entities = named_entities

    @property
    def pos_tagging(self):
        """Gets the pos_tagging of this FeatureDetailedModeSection.

        Represents whether POS tagging supported for certain language or not

        :return: The pos_tagging of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._pos_tagging

    @pos_tagging.setter
    def pos_tagging(self, pos_tagging):
        """Sets the pos_tagging of this FeatureDetailedModeSection.

        Represents whether POS tagging supported for certain language or not

        :param pos_tagging: The pos_tagging of this FeatureDetailedModeSection.
        :type pos_tagging: bool
        """
        if pos_tagging is None:
            raise ValueError("Invalid value for `pos_tagging`, must not be `None`")

        self._pos_tagging = pos_tagging

    @property
    def queries(self):
        """Gets the queries of this FeatureDetailedModeSection.

        Represents whether queries of entities supported for certain language or not

        :return: The queries of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this FeatureDetailedModeSection.

        Represents whether queries of entities supported for certain language or not

        :param queries: The queries of this FeatureDetailedModeSection.
        :type queries: bool
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def sentiment(self):
        """Gets the sentiment of this FeatureDetailedModeSection.

        Represents whether sentiment detection supported for certain language or not

        :return: The sentiment of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this FeatureDetailedModeSection.

        Represents whether sentiment detection supported for certain language or not

        :param sentiment: The sentiment of this FeatureDetailedModeSection.
        :type sentiment: bool
        """
        if sentiment is None:
            raise ValueError("Invalid value for `sentiment`, must not be `None`")

        self._sentiment = sentiment

    @property
    def sentiment_phrases(self):
        """Gets the sentiment_phrases of this FeatureDetailedModeSection.

        Represents whether sentiment phrases detection supported for certain language or not

        :return: The sentiment_phrases of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._sentiment_phrases

    @sentiment_phrases.setter
    def sentiment_phrases(self, sentiment_phrases):
        """Sets the sentiment_phrases of this FeatureDetailedModeSection.

        Represents whether sentiment phrases detection supported for certain language or not

        :param sentiment_phrases: The sentiment_phrases of this FeatureDetailedModeSection.
        :type sentiment_phrases: bool
        """
        if sentiment_phrases is None:
            raise ValueError("Invalid value for `sentiment_phrases`, must not be `None`")

        self._sentiment_phrases = sentiment_phrases

    @property
    def summarization(self):
        """Gets the summarization of this FeatureDetailedModeSection.

        Represents whether summarization supported for certain language or not

        :return: The summarization of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._summarization

    @summarization.setter
    def summarization(self, summarization):
        """Sets the summarization of this FeatureDetailedModeSection.

        Represents whether summarization supported for certain language or not

        :param summarization: The summarization of this FeatureDetailedModeSection.
        :type summarization: bool
        """
        if summarization is None:
            raise ValueError("Invalid value for `summarization`, must not be `None`")

        self._summarization = summarization

    @property
    def taxonomy(self):
        """Gets the taxonomy of this FeatureDetailedModeSection.

        Represents whether taxonomy feature supported for certain language or not

        :return: The taxonomy of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._taxonomy

    @taxonomy.setter
    def taxonomy(self, taxonomy):
        """Sets the taxonomy of this FeatureDetailedModeSection.

        Represents whether taxonomy feature supported for certain language or not

        :param taxonomy: The taxonomy of this FeatureDetailedModeSection.
        :type taxonomy: bool
        """
        if taxonomy is None:
            raise ValueError("Invalid value for `taxonomy`, must not be `None`")

        self._taxonomy = taxonomy

    @property
    def theme_mentions(self):
        """Gets the theme_mentions of this FeatureDetailedModeSection.

        Represents whether mentions of themes supported for certain language or not

        :return: The theme_mentions of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._theme_mentions

    @theme_mentions.setter
    def theme_mentions(self, theme_mentions):
        """Sets the theme_mentions of this FeatureDetailedModeSection.

        Represents whether mentions of themes supported for certain language or not

        :param theme_mentions: The theme_mentions of this FeatureDetailedModeSection.
        :type theme_mentions: bool
        """
        if theme_mentions is None:
            raise ValueError("Invalid value for `theme_mentions`, must not be `None`")

        self._theme_mentions = theme_mentions

    @property
    def themes(self):
        """Gets the themes of this FeatureDetailedModeSection.

        Represents whether themes extraction supported for certain language or not

        :return: The themes of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this FeatureDetailedModeSection.

        Represents whether themes extraction supported for certain language or not

        :param themes: The themes of this FeatureDetailedModeSection.
        :type themes: bool
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes

    @property
    def user_categories(self):
        """Gets the user_categories of this FeatureDetailedModeSection.

        Represents whether user categories of entities supported for certain language or not

        :return: The user_categories of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._user_categories

    @user_categories.setter
    def user_categories(self, user_categories):
        """Sets the user_categories of this FeatureDetailedModeSection.

        Represents whether user categories of entities supported for certain language or not

        :param user_categories: The user_categories of this FeatureDetailedModeSection.
        :type user_categories: bool
        """
        if user_categories is None:
            raise ValueError("Invalid value for `user_categories`, must not be `None`")

        self._user_categories = user_categories

    @property
    def user_entities(self):
        """Gets the user_entities of this FeatureDetailedModeSection.

        Represents whether user entities extraction supported for certain language or not

        :return: The user_entities of this FeatureDetailedModeSection.
        :rtype: bool
        """
        return self._user_entities

    @user_entities.setter
    def user_entities(self, user_entities):
        """Sets the user_entities of this FeatureDetailedModeSection.

        Represents whether user entities extraction supported for certain language or not

        :param user_entities: The user_entities of this FeatureDetailedModeSection.
        :type user_entities: bool
        """
        if user_entities is None:
            raise ValueError("Invalid value for `user_entities`, must not be `None`")

        self._user_entities = user_entities
