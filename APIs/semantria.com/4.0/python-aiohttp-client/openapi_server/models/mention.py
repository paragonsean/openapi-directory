# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class Mention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_negated: bool=None, label: str=None, locations: List[Location]=None, negating_phrase: str=None):
        """Mention - a model defined in OpenAPI

        :param is_negated: The is_negated of this Mention.
        :param label: The label of this Mention.
        :param locations: The locations of this Mention.
        :param negating_phrase: The negating_phrase of this Mention.
        """
        self.openapi_types = {
            'is_negated': bool,
            'label': str,
            'locations': List[Location],
            'negating_phrase': str
        }

        self.attribute_map = {
            'is_negated': 'is_negated',
            'label': 'label',
            'locations': 'locations',
            'negating_phrase': 'negating_phrase'
        }

        self._is_negated = is_negated
        self._label = label
        self._locations = locations
        self._negating_phrase = negating_phrase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mention of this Mention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_negated(self):
        """Gets the is_negated of this Mention.

        Indicates whether or not the mention has been negated

        :return: The is_negated of this Mention.
        :rtype: bool
        """
        return self._is_negated

    @is_negated.setter
    def is_negated(self, is_negated):
        """Sets the is_negated of this Mention.

        Indicates whether or not the mention has been negated

        :param is_negated: The is_negated of this Mention.
        :type is_negated: bool
        """
        if is_negated is None:
            raise ValueError("Invalid value for `is_negated`, must not be `None`")

        self._is_negated = is_negated

    @property
    def label(self):
        """Gets the label of this Mention.

        The text of the attribute mention

        :return: The label of this Mention.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Mention.

        The text of the attribute mention

        :param label: The label of this Mention.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def locations(self):
        """Gets the locations of this Mention.

        List of coordinates of the mentions found within the collection

        :return: The locations of this Mention.
        :rtype: List[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Mention.

        List of coordinates of the mentions found within the collection

        :param locations: The locations of this Mention.
        :type locations: List[Location]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def negating_phrase(self):
        """Gets the negating_phrase of this Mention.

        If the mention has been negated, this gives the negating phrase

        :return: The negating_phrase of this Mention.
        :rtype: str
        """
        return self._negating_phrase

    @negating_phrase.setter
    def negating_phrase(self, negating_phrase):
        """Sets the negating_phrase of this Mention.

        If the mention has been negated, this gives the negating phrase

        :param negating_phrase: The negating_phrase of this Mention.
        :type negating_phrase: str
        """
        if negating_phrase is None:
            raise ValueError("Invalid value for `negating_phrase`, must not be `None`")

        self._negating_phrase = negating_phrase
