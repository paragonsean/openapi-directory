# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mention import Mention
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, entity_type: str=None, label: str=None, mentions: List[Mention]=None, negative_count: int=None, neutral_count: int=None, positive_count: int=None, title: str=None, type: str=None):
        """Entity - a model defined in OpenAPI

        :param count: The count of this Entity.
        :param entity_type: The entity_type of this Entity.
        :param label: The label of this Entity.
        :param mentions: The mentions of this Entity.
        :param negative_count: The negative_count of this Entity.
        :param neutral_count: The neutral_count of this Entity.
        :param positive_count: The positive_count of this Entity.
        :param title: The title of this Entity.
        :param type: The type of this Entity.
        """
        self.openapi_types = {
            'count': int,
            'entity_type': str,
            'label': str,
            'mentions': List[Mention],
            'negative_count': int,
            'neutral_count': int,
            'positive_count': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'entity_type': 'entity_type',
            'label': 'label',
            'mentions': 'mentions',
            'negative_count': 'negative_count',
            'neutral_count': 'neutral_count',
            'positive_count': 'positive_count',
            'title': 'title',
            'type': 'type'
        }

        self._count = count
        self._entity_type = entity_type
        self._label = label
        self._mentions = mentions
        self._negative_count = negative_count
        self._neutral_count = neutral_count
        self._positive_count = positive_count
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Entity.

        The count of occurrences of the entity across the documents

        :return: The count of this Entity.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Entity.

        The count of occurrences of the entity across the documents

        :param count: The count of this Entity.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")
        if count is not None and count < 0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")

        self._count = count

    @property
    def entity_type(self):
        """Gets the entity_type of this Entity.

        Type of the entity (Company, Person, Place, Product, etc.)

        :return: The entity_type of this Entity.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Entity.

        Type of the entity (Company, Person, Place, Product, etc.)

        :param entity_type: The entity_type of this Entity.
        :type entity_type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def label(self):
        """Gets the label of this Entity.

        Descriptive label for the entity, if applicable

        :return: The label of this Entity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Entity.

        Descriptive label for the entity, if applicable

        :param label: The label of this Entity.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def mentions(self):
        """Gets the mentions of this Entity.

        Returns the genuine forms of entity mentioned across the documents

        :return: The mentions of this Entity.
        :rtype: List[Mention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Entity.

        Returns the genuine forms of entity mentioned across the documents

        :param mentions: The mentions of this Entity.
        :type mentions: List[Mention]
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")

        self._mentions = mentions

    @property
    def negative_count(self):
        """Gets the negative_count of this Entity.

        The count of negative occurrences of the entity across the documents

        :return: The negative_count of this Entity.
        :rtype: int
        """
        return self._negative_count

    @negative_count.setter
    def negative_count(self, negative_count):
        """Sets the negative_count of this Entity.

        The count of negative occurrences of the entity across the documents

        :param negative_count: The negative_count of this Entity.
        :type negative_count: int
        """
        if negative_count is None:
            raise ValueError("Invalid value for `negative_count`, must not be `None`")
        if negative_count is not None and negative_count < 0:
            raise ValueError("Invalid value for `negative_count`, must be a value greater than or equal to `0`")

        self._negative_count = negative_count

    @property
    def neutral_count(self):
        """Gets the neutral_count of this Entity.

        The count of neutral occurrences of the entity across the documents

        :return: The neutral_count of this Entity.
        :rtype: int
        """
        return self._neutral_count

    @neutral_count.setter
    def neutral_count(self, neutral_count):
        """Sets the neutral_count of this Entity.

        The count of neutral occurrences of the entity across the documents

        :param neutral_count: The neutral_count of this Entity.
        :type neutral_count: int
        """
        if neutral_count is None:
            raise ValueError("Invalid value for `neutral_count`, must not be `None`")
        if neutral_count is not None and neutral_count < 0:
            raise ValueError("Invalid value for `neutral_count`, must be a value greater than or equal to `0`")

        self._neutral_count = neutral_count

    @property
    def positive_count(self):
        """Gets the positive_count of this Entity.

        The count of positive occurrences of the entity across the documents

        :return: The positive_count of this Entity.
        :rtype: int
        """
        return self._positive_count

    @positive_count.setter
    def positive_count(self, positive_count):
        """Sets the positive_count of this Entity.

        The count of positive occurrences of the entity across the documents

        :param positive_count: The positive_count of this Entity.
        :type positive_count: int
        """
        if positive_count is None:
            raise ValueError("Invalid value for `positive_count`, must not be `None`")
        if positive_count is not None and positive_count < 0:
            raise ValueError("Invalid value for `positive_count`, must be a value greater than or equal to `0`")

        self._positive_count = positive_count

    @property
    def title(self):
        """Gets the title of this Entity.

        Normalized form of the entity. It is the normalized entity title

        :return: The title of this Entity.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Entity.

        Normalized form of the entity. It is the normalized entity title

        :param title: The title of this Entity.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Entity.

        Type of the entity; can be either “named” or “user” (reserved for future usage)

        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.

        Type of the entity; can be either “named” or “user” (reserved for future usage)

        :param type: The type of this Entity.
        :type type: str
        """
        allowed_values = ["named", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
