# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureSettingsSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklist: bool=None, queries: bool=None, sentiment_phrases: bool=None, taxonomy: bool=None, user_categories: bool=None, user_entities: bool=None):
        """FeatureSettingsSection - a model defined in OpenAPI

        :param blacklist: The blacklist of this FeatureSettingsSection.
        :param queries: The queries of this FeatureSettingsSection.
        :param sentiment_phrases: The sentiment_phrases of this FeatureSettingsSection.
        :param taxonomy: The taxonomy of this FeatureSettingsSection.
        :param user_categories: The user_categories of this FeatureSettingsSection.
        :param user_entities: The user_entities of this FeatureSettingsSection.
        """
        self.openapi_types = {
            'blacklist': bool,
            'queries': bool,
            'sentiment_phrases': bool,
            'taxonomy': bool,
            'user_categories': bool,
            'user_entities': bool
        }

        self.attribute_map = {
            'blacklist': 'blacklist',
            'queries': 'queries',
            'sentiment_phrases': 'sentiment_phrases',
            'taxonomy': 'taxonomy',
            'user_categories': 'user_categories',
            'user_entities': 'user_entities'
        }

        self._blacklist = blacklist
        self._queries = queries
        self._sentiment_phrases = sentiment_phrases
        self._taxonomy = taxonomy
        self._user_categories = user_categories
        self._user_entities = user_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureSettingsSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureSettingsSection of this FeatureSettingsSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklist(self):
        """Gets the blacklist of this FeatureSettingsSection.

        Represents whether blacklist feature supported for certain language or not

        :return: The blacklist of this FeatureSettingsSection.
        :rtype: bool
        """
        return self._blacklist

    @blacklist.setter
    def blacklist(self, blacklist):
        """Sets the blacklist of this FeatureSettingsSection.

        Represents whether blacklist feature supported for certain language or not

        :param blacklist: The blacklist of this FeatureSettingsSection.
        :type blacklist: bool
        """
        if blacklist is None:
            raise ValueError("Invalid value for `blacklist`, must not be `None`")

        self._blacklist = blacklist

    @property
    def queries(self):
        """Gets the queries of this FeatureSettingsSection.

        Represents whether queries definition supported for certain language or not

        :return: The queries of this FeatureSettingsSection.
        :rtype: bool
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this FeatureSettingsSection.

        Represents whether queries definition supported for certain language or not

        :param queries: The queries of this FeatureSettingsSection.
        :type queries: bool
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def sentiment_phrases(self):
        """Gets the sentiment_phrases of this FeatureSettingsSection.

        Represents whether sentiment-bearing phrases adjustmment supported for certain language or not

        :return: The sentiment_phrases of this FeatureSettingsSection.
        :rtype: bool
        """
        return self._sentiment_phrases

    @sentiment_phrases.setter
    def sentiment_phrases(self, sentiment_phrases):
        """Sets the sentiment_phrases of this FeatureSettingsSection.

        Represents whether sentiment-bearing phrases adjustmment supported for certain language or not

        :param sentiment_phrases: The sentiment_phrases of this FeatureSettingsSection.
        :type sentiment_phrases: bool
        """
        if sentiment_phrases is None:
            raise ValueError("Invalid value for `sentiment_phrases`, must not be `None`")

        self._sentiment_phrases = sentiment_phrases

    @property
    def taxonomy(self):
        """Gets the taxonomy of this FeatureSettingsSection.

        Represents whether taxonomy feature supported for certain language or not

        :return: The taxonomy of this FeatureSettingsSection.
        :rtype: bool
        """
        return self._taxonomy

    @taxonomy.setter
    def taxonomy(self, taxonomy):
        """Sets the taxonomy of this FeatureSettingsSection.

        Represents whether taxonomy feature supported for certain language or not

        :param taxonomy: The taxonomy of this FeatureSettingsSection.
        :type taxonomy: bool
        """
        if taxonomy is None:
            raise ValueError("Invalid value for `taxonomy`, must not be `None`")

        self._taxonomy = taxonomy

    @property
    def user_categories(self):
        """Gets the user_categories of this FeatureSettingsSection.

        Represents whether user categories definition supported for certain language or not

        :return: The user_categories of this FeatureSettingsSection.
        :rtype: bool
        """
        return self._user_categories

    @user_categories.setter
    def user_categories(self, user_categories):
        """Sets the user_categories of this FeatureSettingsSection.

        Represents whether user categories definition supported for certain language or not

        :param user_categories: The user_categories of this FeatureSettingsSection.
        :type user_categories: bool
        """
        if user_categories is None:
            raise ValueError("Invalid value for `user_categories`, must not be `None`")

        self._user_categories = user_categories

    @property
    def user_entities(self):
        """Gets the user_entities of this FeatureSettingsSection.

        Represents whether user entities definition supported for certain language or not

        :return: The user_entities of this FeatureSettingsSection.
        :rtype: bool
        """
        return self._user_entities

    @user_entities.setter
    def user_entities(self, user_entities):
        """Sets the user_entities of this FeatureSettingsSection.

        Represents whether user entities definition supported for certain language or not

        :param user_entities: The user_entities of this FeatureSettingsSection.
        :type user_entities: bool
        """
        if user_entities is None:
            raise ValueError("Invalid value for `user_entities`, must not be `None`")

        self._user_entities = user_entities
