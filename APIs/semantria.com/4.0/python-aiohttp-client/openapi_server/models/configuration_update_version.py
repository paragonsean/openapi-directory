# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_collection_section import ConfigurationCollectionSection
from openapi_server.models.configuration_document_section import ConfigurationDocumentSection
from openapi_server import util


class ConfigurationUpdateVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_response: bool=None, callback: str=None, categories_threshold: float=None, chars_threshold: int=None, collection: ConfigurationCollectionSection=None, config_id: str=None, document: ConfigurationDocumentSection=None, entities_threshold: int=None, is_primary: bool=None, language: str=None, name: str=None, one_sentence: bool=None, process_html: bool=None):
        """ConfigurationUpdateVersion - a model defined in OpenAPI

        :param auto_response: The auto_response of this ConfigurationUpdateVersion.
        :param callback: The callback of this ConfigurationUpdateVersion.
        :param categories_threshold: The categories_threshold of this ConfigurationUpdateVersion.
        :param chars_threshold: The chars_threshold of this ConfigurationUpdateVersion.
        :param collection: The collection of this ConfigurationUpdateVersion.
        :param config_id: The config_id of this ConfigurationUpdateVersion.
        :param document: The document of this ConfigurationUpdateVersion.
        :param entities_threshold: The entities_threshold of this ConfigurationUpdateVersion.
        :param is_primary: The is_primary of this ConfigurationUpdateVersion.
        :param language: The language of this ConfigurationUpdateVersion.
        :param name: The name of this ConfigurationUpdateVersion.
        :param one_sentence: The one_sentence of this ConfigurationUpdateVersion.
        :param process_html: The process_html of this ConfigurationUpdateVersion.
        """
        self.openapi_types = {
            'auto_response': bool,
            'callback': str,
            'categories_threshold': float,
            'chars_threshold': int,
            'collection': ConfigurationCollectionSection,
            'config_id': str,
            'document': ConfigurationDocumentSection,
            'entities_threshold': int,
            'is_primary': bool,
            'language': str,
            'name': str,
            'one_sentence': bool,
            'process_html': bool
        }

        self.attribute_map = {
            'auto_response': 'auto_response',
            'callback': 'callback',
            'categories_threshold': 'categories_threshold',
            'chars_threshold': 'chars_threshold',
            'collection': 'collection',
            'config_id': 'config_id',
            'document': 'document',
            'entities_threshold': 'entities_threshold',
            'is_primary': 'is_primary',
            'language': 'language',
            'name': 'name',
            'one_sentence': 'one_sentence',
            'process_html': 'process_html'
        }

        self._auto_response = auto_response
        self._callback = callback
        self._categories_threshold = categories_threshold
        self._chars_threshold = chars_threshold
        self._collection = collection
        self._config_id = config_id
        self._document = document
        self._entities_threshold = entities_threshold
        self._is_primary = is_primary
        self._language = language
        self._name = name
        self._one_sentence = one_sentence
        self._process_html = process_html

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationUpdateVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Configuration_UpdateVersion of this ConfigurationUpdateVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_response(self):
        """Gets the auto_response of this ConfigurationUpdateVersion.

        Defines whether or not the service should respond with processed results automatically. Default: false

        :return: The auto_response of this ConfigurationUpdateVersion.
        :rtype: bool
        """
        return self._auto_response

    @auto_response.setter
    def auto_response(self, auto_response):
        """Sets the auto_response of this ConfigurationUpdateVersion.

        Defines whether or not the service should respond with processed results automatically. Default: false

        :param auto_response: The auto_response of this ConfigurationUpdateVersion.
        :type auto_response: bool
        """
        if auto_response is None:
            raise ValueError("Invalid value for `auto_response`, must not be `None`")

        self._auto_response = auto_response

    @property
    def callback(self):
        """Gets the callback of this ConfigurationUpdateVersion.

        Defines a callback URL for automatic data responding

        :return: The callback of this ConfigurationUpdateVersion.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this ConfigurationUpdateVersion.

        Defines a callback URL for automatic data responding

        :param callback: The callback of this ConfigurationUpdateVersion.
        :type callback: str
        """
        if callback is None:
            raise ValueError("Invalid value for `callback`, must not be `None`")

        self._callback = callback

    @property
    def categories_threshold(self):
        """Gets the categories_threshold of this ConfigurationUpdateVersion.

        Defines low threshold for strength score of user categories to be reported in the output. Default: 0.45

        :return: The categories_threshold of this ConfigurationUpdateVersion.
        :rtype: float
        """
        return self._categories_threshold

    @categories_threshold.setter
    def categories_threshold(self, categories_threshold):
        """Sets the categories_threshold of this ConfigurationUpdateVersion.

        Defines low threshold for strength score of user categories to be reported in the output. Default: 0.45

        :param categories_threshold: The categories_threshold of this ConfigurationUpdateVersion.
        :type categories_threshold: float
        """
        if categories_threshold is None:
            raise ValueError("Invalid value for `categories_threshold`, must not be `None`")

        self._categories_threshold = categories_threshold

    @property
    def chars_threshold(self):
        """Gets the chars_threshold of this ConfigurationUpdateVersion.

        Defines the threshold for alphanumeric characters in the text in percent. Default: 80

        :return: The chars_threshold of this ConfigurationUpdateVersion.
        :rtype: int
        """
        return self._chars_threshold

    @chars_threshold.setter
    def chars_threshold(self, chars_threshold):
        """Sets the chars_threshold of this ConfigurationUpdateVersion.

        Defines the threshold for alphanumeric characters in the text in percent. Default: 80

        :param chars_threshold: The chars_threshold of this ConfigurationUpdateVersion.
        :type chars_threshold: int
        """
        if chars_threshold is None:
            raise ValueError("Invalid value for `chars_threshold`, must not be `None`")
        if chars_threshold is not None and chars_threshold > 100:
            raise ValueError("Invalid value for `chars_threshold`, must be a value less than or equal to `100`")
        if chars_threshold is not None and chars_threshold < 0:
            raise ValueError("Invalid value for `chars_threshold`, must be a value greater than or equal to `0`")

        self._chars_threshold = chars_threshold

    @property
    def collection(self):
        """Gets the collection of this ConfigurationUpdateVersion.


        :return: The collection of this ConfigurationUpdateVersion.
        :rtype: ConfigurationCollectionSection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ConfigurationUpdateVersion.


        :param collection: The collection of this ConfigurationUpdateVersion.
        :type collection: ConfigurationCollectionSection
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")

        self._collection = collection

    @property
    def config_id(self):
        """Gets the config_id of this ConfigurationUpdateVersion.

        Unique configuration identifier

        :return: The config_id of this ConfigurationUpdateVersion.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this ConfigurationUpdateVersion.

        Unique configuration identifier

        :param config_id: The config_id of this ConfigurationUpdateVersion.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def document(self):
        """Gets the document of this ConfigurationUpdateVersion.


        :return: The document of this ConfigurationUpdateVersion.
        :rtype: ConfigurationDocumentSection
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ConfigurationUpdateVersion.


        :param document: The document of this ConfigurationUpdateVersion.
        :type document: ConfigurationDocumentSection
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def entities_threshold(self):
        """Gets the entities_threshold of this ConfigurationUpdateVersion.

        Defines low threshold for evidence score of named and user entities to be reported in the output. Default: 55

        :return: The entities_threshold of this ConfigurationUpdateVersion.
        :rtype: int
        """
        return self._entities_threshold

    @entities_threshold.setter
    def entities_threshold(self, entities_threshold):
        """Sets the entities_threshold of this ConfigurationUpdateVersion.

        Defines low threshold for evidence score of named and user entities to be reported in the output. Default: 55

        :param entities_threshold: The entities_threshold of this ConfigurationUpdateVersion.
        :type entities_threshold: int
        """
        if entities_threshold is None:
            raise ValueError("Invalid value for `entities_threshold`, must not be `None`")

        self._entities_threshold = entities_threshold

    @property
    def is_primary(self):
        """Gets the is_primary of this ConfigurationUpdateVersion.

        Identifies whether the current configuration is primary or not. Default: false

        :return: The is_primary of this ConfigurationUpdateVersion.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this ConfigurationUpdateVersion.

        Identifies whether the current configuration is primary or not. Default: false

        :param is_primary: The is_primary of this ConfigurationUpdateVersion.
        :type is_primary: bool
        """
        if is_primary is None:
            raise ValueError("Invalid value for `is_primary`, must not be `None`")

        self._is_primary = is_primary

    @property
    def language(self):
        """Gets the language of this ConfigurationUpdateVersion.

        Defines target language that will be used for task processing. Default: English

        :return: The language of this ConfigurationUpdateVersion.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ConfigurationUpdateVersion.

        Defines target language that will be used for task processing. Default: English

        :param language: The language of this ConfigurationUpdateVersion.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this ConfigurationUpdateVersion.

        Configuration name

        :return: The name of this ConfigurationUpdateVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigurationUpdateVersion.

        Configuration name

        :param name: The name of this ConfigurationUpdateVersion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def one_sentence(self):
        """Gets the one_sentence of this ConfigurationUpdateVersion.

        Leads the service to consider the entire document as single sentence. Default: false

        :return: The one_sentence of this ConfigurationUpdateVersion.
        :rtype: bool
        """
        return self._one_sentence

    @one_sentence.setter
    def one_sentence(self, one_sentence):
        """Sets the one_sentence of this ConfigurationUpdateVersion.

        Leads the service to consider the entire document as single sentence. Default: false

        :param one_sentence: The one_sentence of this ConfigurationUpdateVersion.
        :type one_sentence: bool
        """
        if one_sentence is None:
            raise ValueError("Invalid value for `one_sentence`, must not be `None`")

        self._one_sentence = one_sentence

    @property
    def process_html(self):
        """Gets the process_html of this ConfigurationUpdateVersion.

        Leads the service to clean HTML tags before processing. Default: false

        :return: The process_html of this ConfigurationUpdateVersion.
        :rtype: bool
        """
        return self._process_html

    @process_html.setter
    def process_html(self, process_html):
        """Sets the process_html of this ConfigurationUpdateVersion.

        Leads the service to clean HTML tags before processing. Default: false

        :param process_html: The process_html of this ConfigurationUpdateVersion.
        :type process_html: bool
        """
        if process_html is None:
            raise ValueError("Invalid value for `process_html`, must not be `None`")

        self._process_html = process_html
