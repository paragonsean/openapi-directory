# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Phrase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intensifying_phrase: str=None, is_intensified: bool=None, is_negated: bool=None, negating_phrase: str=None, sentiment_polarity: str=None, sentiment_score: float=None, title: str=None, type: str=None):
        """Phrase - a model defined in OpenAPI

        :param intensifying_phrase: The intensifying_phrase of this Phrase.
        :param is_intensified: The is_intensified of this Phrase.
        :param is_negated: The is_negated of this Phrase.
        :param negating_phrase: The negating_phrase of this Phrase.
        :param sentiment_polarity: The sentiment_polarity of this Phrase.
        :param sentiment_score: The sentiment_score of this Phrase.
        :param title: The title of this Phrase.
        :param type: The type of this Phrase.
        """
        self.openapi_types = {
            'intensifying_phrase': str,
            'is_intensified': bool,
            'is_negated': bool,
            'negating_phrase': str,
            'sentiment_polarity': str,
            'sentiment_score': float,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'intensifying_phrase': 'intensifying_phrase',
            'is_intensified': 'is_intensified',
            'is_negated': 'is_negated',
            'negating_phrase': 'negating_phrase',
            'sentiment_polarity': 'sentiment_polarity',
            'sentiment_score': 'sentiment_score',
            'title': 'title',
            'type': 'type'
        }

        self._intensifying_phrase = intensifying_phrase
        self._is_intensified = is_intensified
        self._is_negated = is_negated
        self._negating_phrase = negating_phrase
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_score = sentiment_score
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phrase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phrase of this Phrase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intensifying_phrase(self):
        """Gets the intensifying_phrase of this Phrase.

        If the phrase has been intensified, this gives the intensifying phrase

        :return: The intensifying_phrase of this Phrase.
        :rtype: str
        """
        return self._intensifying_phrase

    @intensifying_phrase.setter
    def intensifying_phrase(self, intensifying_phrase):
        """Sets the intensifying_phrase of this Phrase.

        If the phrase has been intensified, this gives the intensifying phrase

        :param intensifying_phrase: The intensifying_phrase of this Phrase.
        :type intensifying_phrase: str
        """
        if intensifying_phrase is None:
            raise ValueError("Invalid value for `intensifying_phrase`, must not be `None`")

        self._intensifying_phrase = intensifying_phrase

    @property
    def is_intensified(self):
        """Gets the is_intensified of this Phrase.

        Specifies whether the phrase has been intensified or not

        :return: The is_intensified of this Phrase.
        :rtype: bool
        """
        return self._is_intensified

    @is_intensified.setter
    def is_intensified(self, is_intensified):
        """Sets the is_intensified of this Phrase.

        Specifies whether the phrase has been intensified or not

        :param is_intensified: The is_intensified of this Phrase.
        :type is_intensified: bool
        """
        if is_intensified is None:
            raise ValueError("Invalid value for `is_intensified`, must not be `None`")

        self._is_intensified = is_intensified

    @property
    def is_negated(self):
        """Gets the is_negated of this Phrase.

        Specifies whether the phrase has been negated or not

        :return: The is_negated of this Phrase.
        :rtype: bool
        """
        return self._is_negated

    @is_negated.setter
    def is_negated(self, is_negated):
        """Sets the is_negated of this Phrase.

        Specifies whether the phrase has been negated or not

        :param is_negated: The is_negated of this Phrase.
        :type is_negated: bool
        """
        if is_negated is None:
            raise ValueError("Invalid value for `is_negated`, must not be `None`")

        self._is_negated = is_negated

    @property
    def negating_phrase(self):
        """Gets the negating_phrase of this Phrase.

        If the phrase has been negated, this gives the negating phrase

        :return: The negating_phrase of this Phrase.
        :rtype: str
        """
        return self._negating_phrase

    @negating_phrase.setter
    def negating_phrase(self, negating_phrase):
        """Sets the negating_phrase of this Phrase.

        If the phrase has been negated, this gives the negating phrase

        :param negating_phrase: The negating_phrase of this Phrase.
        :type negating_phrase: str
        """
        if negating_phrase is None:
            raise ValueError("Invalid value for `negating_phrase`, must not be `None`")

        self._negating_phrase = negating_phrase

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this Phrase.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :return: The sentiment_polarity of this Phrase.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this Phrase.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :param sentiment_polarity: The sentiment_polarity of this Phrase.
        :type sentiment_polarity: str
        """
        allowed_values = ["negative", "positive", "neutral"]  # noqa: E501
        if sentiment_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment_polarity` ({0}), must be one of {1}"
                .format(sentiment_polarity, allowed_values)
            )

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this Phrase.

        The sentiment score associated with this phrase

        :return: The sentiment_score of this Phrase.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this Phrase.

        The sentiment score associated with this phrase

        :param sentiment_score: The sentiment_score of this Phrase.
        :type sentiment_score: float
        """
        if sentiment_score is None:
            raise ValueError("Invalid value for `sentiment_score`, must not be `None`")

        self._sentiment_score = sentiment_score

    @property
    def title(self):
        """Gets the title of this Phrase.

        The text of the sentiment-bearing phrase

        :return: The title of this Phrase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Phrase.

        The text of the sentiment-bearing phrase

        :param title: The title of this Phrase.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Phrase.

        Type of phrase; can be either \"possible\" or \"detected\" value

        :return: The type of this Phrase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Phrase.

        Type of phrase; can be either \"possible\" or \"detected\" value

        :param type: The type of this Phrase.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
