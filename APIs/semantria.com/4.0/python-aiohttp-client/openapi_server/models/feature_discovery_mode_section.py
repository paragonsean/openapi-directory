# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureDiscoveryModeSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_mentions: bool=None, facet_attributes: bool=None, facet_mentioins: bool=None, facets: bool=None, named_entities: bool=None, queries: bool=None, taxonomy: bool=None, theme_mentions: bool=None, themes: bool=None, user_categories: bool=None, user_entities: bool=None):
        """FeatureDiscoveryModeSection - a model defined in OpenAPI

        :param entity_mentions: The entity_mentions of this FeatureDiscoveryModeSection.
        :param facet_attributes: The facet_attributes of this FeatureDiscoveryModeSection.
        :param facet_mentioins: The facet_mentioins of this FeatureDiscoveryModeSection.
        :param facets: The facets of this FeatureDiscoveryModeSection.
        :param named_entities: The named_entities of this FeatureDiscoveryModeSection.
        :param queries: The queries of this FeatureDiscoveryModeSection.
        :param taxonomy: The taxonomy of this FeatureDiscoveryModeSection.
        :param theme_mentions: The theme_mentions of this FeatureDiscoveryModeSection.
        :param themes: The themes of this FeatureDiscoveryModeSection.
        :param user_categories: The user_categories of this FeatureDiscoveryModeSection.
        :param user_entities: The user_entities of this FeatureDiscoveryModeSection.
        """
        self.openapi_types = {
            'entity_mentions': bool,
            'facet_attributes': bool,
            'facet_mentioins': bool,
            'facets': bool,
            'named_entities': bool,
            'queries': bool,
            'taxonomy': bool,
            'theme_mentions': bool,
            'themes': bool,
            'user_categories': bool,
            'user_entities': bool
        }

        self.attribute_map = {
            'entity_mentions': 'entity_mentions',
            'facet_attributes': 'facet_attributes',
            'facet_mentioins': 'facet_mentioins',
            'facets': 'facets',
            'named_entities': 'named_entities',
            'queries': 'queries',
            'taxonomy': 'taxonomy',
            'theme_mentions': 'theme_mentions',
            'themes': 'themes',
            'user_categories': 'user_categories',
            'user_entities': 'user_entities'
        }

        self._entity_mentions = entity_mentions
        self._facet_attributes = facet_attributes
        self._facet_mentioins = facet_mentioins
        self._facets = facets
        self._named_entities = named_entities
        self._queries = queries
        self._taxonomy = taxonomy
        self._theme_mentions = theme_mentions
        self._themes = themes
        self._user_categories = user_categories
        self._user_entities = user_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureDiscoveryModeSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureDiscoveryModeSection of this FeatureDiscoveryModeSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_mentions(self):
        """Gets the entity_mentions of this FeatureDiscoveryModeSection.

        Represents whether mentions of entities supported for certain language or not

        :return: The entity_mentions of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._entity_mentions

    @entity_mentions.setter
    def entity_mentions(self, entity_mentions):
        """Sets the entity_mentions of this FeatureDiscoveryModeSection.

        Represents whether mentions of entities supported for certain language or not

        :param entity_mentions: The entity_mentions of this FeatureDiscoveryModeSection.
        :type entity_mentions: bool
        """
        if entity_mentions is None:
            raise ValueError("Invalid value for `entity_mentions`, must not be `None`")

        self._entity_mentions = entity_mentions

    @property
    def facet_attributes(self):
        """Gets the facet_attributes of this FeatureDiscoveryModeSection.

        Represents whether attributes of facets supported for certain language or not

        :return: The facet_attributes of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._facet_attributes

    @facet_attributes.setter
    def facet_attributes(self, facet_attributes):
        """Sets the facet_attributes of this FeatureDiscoveryModeSection.

        Represents whether attributes of facets supported for certain language or not

        :param facet_attributes: The facet_attributes of this FeatureDiscoveryModeSection.
        :type facet_attributes: bool
        """
        if facet_attributes is None:
            raise ValueError("Invalid value for `facet_attributes`, must not be `None`")

        self._facet_attributes = facet_attributes

    @property
    def facet_mentioins(self):
        """Gets the facet_mentioins of this FeatureDiscoveryModeSection.

        Represents whether mentions of facets supported for certain language or not

        :return: The facet_mentioins of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._facet_mentioins

    @facet_mentioins.setter
    def facet_mentioins(self, facet_mentioins):
        """Sets the facet_mentioins of this FeatureDiscoveryModeSection.

        Represents whether mentions of facets supported for certain language or not

        :param facet_mentioins: The facet_mentioins of this FeatureDiscoveryModeSection.
        :type facet_mentioins: bool
        """
        if facet_mentioins is None:
            raise ValueError("Invalid value for `facet_mentioins`, must not be `None`")

        self._facet_mentioins = facet_mentioins

    @property
    def facets(self):
        """Gets the facets of this FeatureDiscoveryModeSection.

        Represents whether facets detection supported for certain language or not

        :return: The facets of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this FeatureDiscoveryModeSection.

        Represents whether facets detection supported for certain language or not

        :param facets: The facets of this FeatureDiscoveryModeSection.
        :type facets: bool
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")

        self._facets = facets

    @property
    def named_entities(self):
        """Gets the named_entities of this FeatureDiscoveryModeSection.

        Represents whether named entities extraction supported for certain language or not

        :return: The named_entities of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._named_entities

    @named_entities.setter
    def named_entities(self, named_entities):
        """Sets the named_entities of this FeatureDiscoveryModeSection.

        Represents whether named entities extraction supported for certain language or not

        :param named_entities: The named_entities of this FeatureDiscoveryModeSection.
        :type named_entities: bool
        """
        if named_entities is None:
            raise ValueError("Invalid value for `named_entities`, must not be `None`")

        self._named_entities = named_entities

    @property
    def queries(self):
        """Gets the queries of this FeatureDiscoveryModeSection.

        Represents whether queries extraction supported for certain language or not

        :return: The queries of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this FeatureDiscoveryModeSection.

        Represents whether queries extraction supported for certain language or not

        :param queries: The queries of this FeatureDiscoveryModeSection.
        :type queries: bool
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries

    @property
    def taxonomy(self):
        """Gets the taxonomy of this FeatureDiscoveryModeSection.

        Represents whether taxonomy feature supported for certain language or not

        :return: The taxonomy of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._taxonomy

    @taxonomy.setter
    def taxonomy(self, taxonomy):
        """Sets the taxonomy of this FeatureDiscoveryModeSection.

        Represents whether taxonomy feature supported for certain language or not

        :param taxonomy: The taxonomy of this FeatureDiscoveryModeSection.
        :type taxonomy: bool
        """
        if taxonomy is None:
            raise ValueError("Invalid value for `taxonomy`, must not be `None`")

        self._taxonomy = taxonomy

    @property
    def theme_mentions(self):
        """Gets the theme_mentions of this FeatureDiscoveryModeSection.

        Represents whether mentions of themes supported for certain language or not

        :return: The theme_mentions of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._theme_mentions

    @theme_mentions.setter
    def theme_mentions(self, theme_mentions):
        """Sets the theme_mentions of this FeatureDiscoveryModeSection.

        Represents whether mentions of themes supported for certain language or not

        :param theme_mentions: The theme_mentions of this FeatureDiscoveryModeSection.
        :type theme_mentions: bool
        """
        if theme_mentions is None:
            raise ValueError("Invalid value for `theme_mentions`, must not be `None`")

        self._theme_mentions = theme_mentions

    @property
    def themes(self):
        """Gets the themes of this FeatureDiscoveryModeSection.

        Represents whether themes extraction supported for certain language or not

        :return: The themes of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this FeatureDiscoveryModeSection.

        Represents whether themes extraction supported for certain language or not

        :param themes: The themes of this FeatureDiscoveryModeSection.
        :type themes: bool
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes

    @property
    def user_categories(self):
        """Gets the user_categories of this FeatureDiscoveryModeSection.

        Represents whether user categories extraction supported for certain language or not

        :return: The user_categories of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._user_categories

    @user_categories.setter
    def user_categories(self, user_categories):
        """Sets the user_categories of this FeatureDiscoveryModeSection.

        Represents whether user categories extraction supported for certain language or not

        :param user_categories: The user_categories of this FeatureDiscoveryModeSection.
        :type user_categories: bool
        """
        if user_categories is None:
            raise ValueError("Invalid value for `user_categories`, must not be `None`")

        self._user_categories = user_categories

    @property
    def user_entities(self):
        """Gets the user_entities of this FeatureDiscoveryModeSection.

        Represents whether user entities extraction supported for certain language or not

        :return: The user_entities of this FeatureDiscoveryModeSection.
        :rtype: bool
        """
        return self._user_entities

    @user_entities.setter
    def user_entities(self, user_entities):
        """Sets the user_entities of this FeatureDiscoveryModeSection.

        Represents whether user entities extraction supported for certain language or not

        :param user_entities: The user_entities of this FeatureDiscoveryModeSection.
        :type user_entities: bool
        """
        if user_entities is None:
            raise ValueError("Invalid value for `user_entities`, must not be `None`")

        self._user_entities = user_entities
