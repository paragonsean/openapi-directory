# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Intention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_phrase: str=None, type: str=None, what: str=None, who: str=None):
        """Intention - a model defined in OpenAPI

        :param evidence_phrase: The evidence_phrase of this Intention.
        :param type: The type of this Intention.
        :param what: The what of this Intention.
        :param who: The who of this Intention.
        """
        self.openapi_types = {
            'evidence_phrase': str,
            'type': str,
            'what': str,
            'who': str
        }

        self.attribute_map = {
            'evidence_phrase': 'evidence_phrase',
            'type': 'type',
            'what': 'what',
            'who': 'who'
        }

        self._evidence_phrase = evidence_phrase
        self._type = type
        self._what = what
        self._who = who

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Intention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Intention of this Intention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_phrase(self):
        """Gets the evidence_phrase of this Intention.

        The phrase which expressed the intention

        :return: The evidence_phrase of this Intention.
        :rtype: str
        """
        return self._evidence_phrase

    @evidence_phrase.setter
    def evidence_phrase(self, evidence_phrase):
        """Sets the evidence_phrase of this Intention.

        The phrase which expressed the intention

        :param evidence_phrase: The evidence_phrase of this Intention.
        :type evidence_phrase: str
        """
        if evidence_phrase is None:
            raise ValueError("Invalid value for `evidence_phrase`, must not be `None`")

        self._evidence_phrase = evidence_phrase

    @property
    def type(self):
        """Gets the type of this Intention.

        The classification of the intention detected (buy, quit, etc.)

        :return: The type of this Intention.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Intention.

        The classification of the intention detected (buy, quit, etc.)

        :param type: The type of this Intention.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def what(self):
        """Gets the what of this Intention.

        The object of the intention (if detected)

        :return: The what of this Intention.
        :rtype: str
        """
        return self._what

    @what.setter
    def what(self, what):
        """Sets the what of this Intention.

        The object of the intention (if detected)

        :param what: The what of this Intention.
        :type what: str
        """
        if what is None:
            raise ValueError("Invalid value for `what`, must not be `None`")

        self._what = what

    @property
    def who(self):
        """Gets the who of this Intention.

        The author of the intention (if detected)

        :return: The who of this Intention.
        :rtype: str
        """
        return self._who

    @who.setter
    def who(self, who):
        """Sets the who of this Intention.

        The author of the intention (if detected)

        :param who: The who of this Intention.
        :type who: str
        """
        if who is None:
            raise ValueError("Invalid value for `who`, must not be `None`")

        self._who = who
