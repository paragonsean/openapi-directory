# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_category import AutoCategory
from openapi_server.models.details import Details
from openapi_server.models.entity import Entity
from openapi_server.models.intention import Intention
from openapi_server.models.model_sentiment import ModelSentiment
from openapi_server.models.opinion import Opinion
from openapi_server.models.phrase import Phrase
from openapi_server.models.relation import Relation
from openapi_server.models.theme import Theme
from openapi_server.models.topic import Topic
from openapi_server import util


class DocumentAnalyticData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_categories: List[AutoCategory]=None, config_id: str=None, details: List[Details]=None, entities: List[Entity]=None, id: str=None, intentions: List[Intention]=None, job_id: str=None, language: str=None, language_score: float=None, model_sentiment: ModelSentiment=None, opinions: List[Opinion]=None, phrases: List[Phrase]=None, relations: List[Relation]=None, sentiment_polarity: str=None, sentiment_score: float=None, source_text: str=None, status: str=None, summary: str=None, taxonomy: List[Topic]=None, themes: List[Theme]=None, topics: List[Topic]=None):
        """DocumentAnalyticData - a model defined in OpenAPI

        :param auto_categories: The auto_categories of this DocumentAnalyticData.
        :param config_id: The config_id of this DocumentAnalyticData.
        :param details: The details of this DocumentAnalyticData.
        :param entities: The entities of this DocumentAnalyticData.
        :param id: The id of this DocumentAnalyticData.
        :param intentions: The intentions of this DocumentAnalyticData.
        :param job_id: The job_id of this DocumentAnalyticData.
        :param language: The language of this DocumentAnalyticData.
        :param language_score: The language_score of this DocumentAnalyticData.
        :param model_sentiment: The model_sentiment of this DocumentAnalyticData.
        :param opinions: The opinions of this DocumentAnalyticData.
        :param phrases: The phrases of this DocumentAnalyticData.
        :param relations: The relations of this DocumentAnalyticData.
        :param sentiment_polarity: The sentiment_polarity of this DocumentAnalyticData.
        :param sentiment_score: The sentiment_score of this DocumentAnalyticData.
        :param source_text: The source_text of this DocumentAnalyticData.
        :param status: The status of this DocumentAnalyticData.
        :param summary: The summary of this DocumentAnalyticData.
        :param taxonomy: The taxonomy of this DocumentAnalyticData.
        :param themes: The themes of this DocumentAnalyticData.
        :param topics: The topics of this DocumentAnalyticData.
        """
        self.openapi_types = {
            'auto_categories': List[AutoCategory],
            'config_id': str,
            'details': List[Details],
            'entities': List[Entity],
            'id': str,
            'intentions': List[Intention],
            'job_id': str,
            'language': str,
            'language_score': float,
            'model_sentiment': ModelSentiment,
            'opinions': List[Opinion],
            'phrases': List[Phrase],
            'relations': List[Relation],
            'sentiment_polarity': str,
            'sentiment_score': float,
            'source_text': str,
            'status': str,
            'summary': str,
            'taxonomy': List[Topic],
            'themes': List[Theme],
            'topics': List[Topic]
        }

        self.attribute_map = {
            'auto_categories': 'auto_categories',
            'config_id': 'config_id',
            'details': 'details',
            'entities': 'entities',
            'id': 'id',
            'intentions': 'intentions',
            'job_id': 'job_id',
            'language': 'language',
            'language_score': 'language_score',
            'model_sentiment': 'model_sentiment',
            'opinions': 'opinions',
            'phrases': 'phrases',
            'relations': 'relations',
            'sentiment_polarity': 'sentiment_polarity',
            'sentiment_score': 'sentiment_score',
            'source_text': 'source_text',
            'status': 'status',
            'summary': 'summary',
            'taxonomy': 'taxonomy',
            'themes': 'themes',
            'topics': 'topics'
        }

        self._auto_categories = auto_categories
        self._config_id = config_id
        self._details = details
        self._entities = entities
        self._id = id
        self._intentions = intentions
        self._job_id = job_id
        self._language = language
        self._language_score = language_score
        self._model_sentiment = model_sentiment
        self._opinions = opinions
        self._phrases = phrases
        self._relations = relations
        self._sentiment_polarity = sentiment_polarity
        self._sentiment_score = sentiment_score
        self._source_text = source_text
        self._status = status
        self._summary = summary
        self._taxonomy = taxonomy
        self._themes = themes
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentAnalyticData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentAnalyticData of this DocumentAnalyticData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_categories(self):
        """Gets the auto_categories of this DocumentAnalyticData.

        Auto-generated categories applicable for the document

        :return: The auto_categories of this DocumentAnalyticData.
        :rtype: List[AutoCategory]
        """
        return self._auto_categories

    @auto_categories.setter
    def auto_categories(self, auto_categories):
        """Sets the auto_categories of this DocumentAnalyticData.

        Auto-generated categories applicable for the document

        :param auto_categories: The auto_categories of this DocumentAnalyticData.
        :type auto_categories: List[AutoCategory]
        """
        if auto_categories is None:
            raise ValueError("Invalid value for `auto_categories`, must not be `None`")

        self._auto_categories = auto_categories

    @property
    def config_id(self):
        """Gets the config_id of this DocumentAnalyticData.

        Unique configuration identifier. Usually 36 alphanumeric characters

        :return: The config_id of this DocumentAnalyticData.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this DocumentAnalyticData.

        Unique configuration identifier. Usually 36 alphanumeric characters

        :param config_id: The config_id of this DocumentAnalyticData.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def details(self):
        """Gets the details of this DocumentAnalyticData.

        Returns sentences from the original document with POS tags within

        :return: The details of this DocumentAnalyticData.
        :rtype: List[Details]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DocumentAnalyticData.

        Returns sentences from the original document with POS tags within

        :param details: The details of this DocumentAnalyticData.
        :type details: List[Details]
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def entities(self):
        """Gets the entities of this DocumentAnalyticData.

        Returns the named entities and user defined entities from the text

        :return: The entities of this DocumentAnalyticData.
        :rtype: List[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this DocumentAnalyticData.

        Returns the named entities and user defined entities from the text

        :param entities: The entities of this DocumentAnalyticData.
        :type entities: List[Entity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def id(self):
        """Gets the id of this DocumentAnalyticData.

        Unique document identifier. Can be up to 36 alphanumeric characters

        :return: The id of this DocumentAnalyticData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentAnalyticData.

        Unique document identifier. Can be up to 36 alphanumeric characters

        :param id: The id of this DocumentAnalyticData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def intentions(self):
        """Gets the intentions of this DocumentAnalyticData.

        Returns intentions list detected by the engine

        :return: The intentions of this DocumentAnalyticData.
        :rtype: List[Intention]
        """
        return self._intentions

    @intentions.setter
    def intentions(self, intentions):
        """Sets the intentions of this DocumentAnalyticData.

        Returns intentions list detected by the engine

        :param intentions: The intentions of this DocumentAnalyticData.
        :type intentions: List[Intention]
        """
        if intentions is None:
            raise ValueError("Invalid value for `intentions`, must not be `None`")

        self._intentions = intentions

    @property
    def job_id(self):
        """Gets the job_id of this DocumentAnalyticData.

        Specific marker of a job document belongs to, can be used for documents ordering on client side

        :return: The job_id of this DocumentAnalyticData.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DocumentAnalyticData.

        Specific marker of a job document belongs to, can be used for documents ordering on client side

        :param job_id: The job_id of this DocumentAnalyticData.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def language(self):
        """Gets the language of this DocumentAnalyticData.

        Determined language of source text

        :return: The language of this DocumentAnalyticData.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DocumentAnalyticData.

        Determined language of source text

        :param language: The language of this DocumentAnalyticData.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def language_score(self):
        """Gets the language_score of this DocumentAnalyticData.

        The percentage score of the best match of language among detected languages

        :return: The language_score of this DocumentAnalyticData.
        :rtype: float
        """
        return self._language_score

    @language_score.setter
    def language_score(self, language_score):
        """Sets the language_score of this DocumentAnalyticData.

        The percentage score of the best match of language among detected languages

        :param language_score: The language_score of this DocumentAnalyticData.
        :type language_score: float
        """
        if language_score is None:
            raise ValueError("Invalid value for `language_score`, must not be `None`")

        self._language_score = language_score

    @property
    def model_sentiment(self):
        """Gets the model_sentiment of this DocumentAnalyticData.


        :return: The model_sentiment of this DocumentAnalyticData.
        :rtype: ModelSentiment
        """
        return self._model_sentiment

    @model_sentiment.setter
    def model_sentiment(self, model_sentiment):
        """Sets the model_sentiment of this DocumentAnalyticData.


        :param model_sentiment: The model_sentiment of this DocumentAnalyticData.
        :type model_sentiment: ModelSentiment
        """
        if model_sentiment is None:
            raise ValueError("Invalid value for `model_sentiment`, must not be `None`")

        self._model_sentiment = model_sentiment

    @property
    def opinions(self):
        """Gets the opinions of this DocumentAnalyticData.

        Returns the list of opinions extracted from the source text

        :return: The opinions of this DocumentAnalyticData.
        :rtype: List[Opinion]
        """
        return self._opinions

    @opinions.setter
    def opinions(self, opinions):
        """Sets the opinions of this DocumentAnalyticData.

        Returns the list of opinions extracted from the source text

        :param opinions: The opinions of this DocumentAnalyticData.
        :type opinions: List[Opinion]
        """
        if opinions is None:
            raise ValueError("Invalid value for `opinions`, must not be `None`")

        self._opinions = opinions

    @property
    def phrases(self):
        """Gets the phrases of this DocumentAnalyticData.

        Returns sentiment-bearing phrases of the document

        :return: The phrases of this DocumentAnalyticData.
        :rtype: List[Phrase]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this DocumentAnalyticData.

        Returns sentiment-bearing phrases of the document

        :param phrases: The phrases of this DocumentAnalyticData.
        :type phrases: List[Phrase]
        """
        if phrases is None:
            raise ValueError("Invalid value for `phrases`, must not be `None`")

        self._phrases = phrases

    @property
    def relations(self):
        """Gets the relations of this DocumentAnalyticData.

        Returns relations which represent a connection between one or more Entity objects

        :return: The relations of this DocumentAnalyticData.
        :rtype: List[Relation]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this DocumentAnalyticData.

        Returns relations which represent a connection between one or more Entity objects

        :param relations: The relations of this DocumentAnalyticData.
        :type relations: List[Relation]
        """
        if relations is None:
            raise ValueError("Invalid value for `relations`, must not be `None`")

        self._relations = relations

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this DocumentAnalyticData.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :return: The sentiment_polarity of this DocumentAnalyticData.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this DocumentAnalyticData.

        Verbal representation of sentiment score. Can be \"negative\", \"positive\" or \"neutral\"

        :param sentiment_polarity: The sentiment_polarity of this DocumentAnalyticData.
        :type sentiment_polarity: str
        """
        allowed_values = ["negative", "positive", "neutral"]  # noqa: E501
        if sentiment_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment_polarity` ({0}), must be one of {1}"
                .format(sentiment_polarity, allowed_values)
            )

        self._sentiment_polarity = sentiment_polarity

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this DocumentAnalyticData.

        A sentiment analysis of the document text

        :return: The sentiment_score of this DocumentAnalyticData.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this DocumentAnalyticData.

        A sentiment analysis of the document text

        :param sentiment_score: The sentiment_score of this DocumentAnalyticData.
        :type sentiment_score: float
        """
        if sentiment_score is None:
            raise ValueError("Invalid value for `sentiment_score`, must not be `None`")

        self._sentiment_score = sentiment_score

    @property
    def source_text(self):
        """Gets the source_text of this DocumentAnalyticData.

        Original source text passed by client for this document

        :return: The source_text of this DocumentAnalyticData.
        :rtype: str
        """
        return self._source_text

    @source_text.setter
    def source_text(self, source_text):
        """Sets the source_text of this DocumentAnalyticData.

        Original source text passed by client for this document

        :param source_text: The source_text of this DocumentAnalyticData.
        :type source_text: str
        """
        if source_text is None:
            raise ValueError("Invalid value for `source_text`, must not be `None`")

        self._source_text = source_text

    @property
    def status(self):
        """Gets the status of this DocumentAnalyticData.

        Status of the document

        :return: The status of this DocumentAnalyticData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentAnalyticData.

        Status of the document

        :param status: The status of this DocumentAnalyticData.
        :type status: str
        """
        allowed_values = ["queued", "processed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this DocumentAnalyticData.

        A summary of the document text

        :return: The summary of this DocumentAnalyticData.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DocumentAnalyticData.

        A summary of the document text

        :param summary: The summary of this DocumentAnalyticData.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def taxonomy(self):
        """Gets the taxonomy of this DocumentAnalyticData.

        Returns the taxonomy determined for the text

        :return: The taxonomy of this DocumentAnalyticData.
        :rtype: List[Topic]
        """
        return self._taxonomy

    @taxonomy.setter
    def taxonomy(self, taxonomy):
        """Sets the taxonomy of this DocumentAnalyticData.

        Returns the taxonomy determined for the text

        :param taxonomy: The taxonomy of this DocumentAnalyticData.
        :type taxonomy: List[Topic]
        """
        if taxonomy is None:
            raise ValueError("Invalid value for `taxonomy`, must not be `None`")

        self._taxonomy = taxonomy

    @property
    def themes(self):
        """Gets the themes of this DocumentAnalyticData.

        Returns themes of the document

        :return: The themes of this DocumentAnalyticData.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this DocumentAnalyticData.

        Returns themes of the document

        :param themes: The themes of this DocumentAnalyticData.
        :type themes: List[Theme]
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes

    @property
    def topics(self):
        """Gets the topics of this DocumentAnalyticData.

        Returns the concept and query defined topics determined for the text

        :return: The topics of this DocumentAnalyticData.
        :rtype: List[Topic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this DocumentAnalyticData.

        Returns the concept and query defined topics determined for the text

        :param topics: The topics of this DocumentAnalyticData.
        :type topics: List[Topic]
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")

        self._topics = topics
