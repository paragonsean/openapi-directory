# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.taxonomy_topic import TaxonomyTopic
from openapi_server import util


class TaxonomyNodeResponseVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforce_parent_matching: bool=None, id: str=None, modified: str=None, name: str=None, nodes: List[object]=None, topics: List[TaxonomyTopic]=None):
        """TaxonomyNodeResponseVersion - a model defined in OpenAPI

        :param enforce_parent_matching: The enforce_parent_matching of this TaxonomyNodeResponseVersion.
        :param id: The id of this TaxonomyNodeResponseVersion.
        :param modified: The modified of this TaxonomyNodeResponseVersion.
        :param name: The name of this TaxonomyNodeResponseVersion.
        :param nodes: The nodes of this TaxonomyNodeResponseVersion.
        :param topics: The topics of this TaxonomyNodeResponseVersion.
        """
        self.openapi_types = {
            'enforce_parent_matching': bool,
            'id': str,
            'modified': str,
            'name': str,
            'nodes': List[object],
            'topics': List[TaxonomyTopic]
        }

        self.attribute_map = {
            'enforce_parent_matching': 'enforce_parent_matching',
            'id': 'id',
            'modified': 'modified',
            'name': 'name',
            'nodes': 'nodes',
            'topics': 'topics'
        }

        self._enforce_parent_matching = enforce_parent_matching
        self._id = id
        self._modified = modified
        self._name = name
        self._nodes = nodes
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxonomyNodeResponseVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxonomyNode_ResponseVersion of this TaxonomyNodeResponseVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforce_parent_matching(self):
        """Gets the enforce_parent_matching of this TaxonomyNodeResponseVersion.

        Enforces parent nodes to match on a content if the current node matches

        :return: The enforce_parent_matching of this TaxonomyNodeResponseVersion.
        :rtype: bool
        """
        return self._enforce_parent_matching

    @enforce_parent_matching.setter
    def enforce_parent_matching(self, enforce_parent_matching):
        """Sets the enforce_parent_matching of this TaxonomyNodeResponseVersion.

        Enforces parent nodes to match on a content if the current node matches

        :param enforce_parent_matching: The enforce_parent_matching of this TaxonomyNodeResponseVersion.
        :type enforce_parent_matching: bool
        """

        self._enforce_parent_matching = enforce_parent_matching

    @property
    def id(self):
        """Gets the id of this TaxonomyNodeResponseVersion.

        Unique taxonomy node identifier

        :return: The id of this TaxonomyNodeResponseVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxonomyNodeResponseVersion.

        Unique taxonomy node identifier

        :param id: The id of this TaxonomyNodeResponseVersion.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this TaxonomyNodeResponseVersion.

        The timestamp of the latest update of the record. Creation date of update didn't occur

        :return: The modified of this TaxonomyNodeResponseVersion.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this TaxonomyNodeResponseVersion.

        The timestamp of the latest update of the record. Creation date of update didn't occur

        :param modified: The modified of this TaxonomyNodeResponseVersion.
        :type modified: str
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this TaxonomyNodeResponseVersion.

        Taxonomy name

        :return: The name of this TaxonomyNodeResponseVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxonomyNodeResponseVersion.

        Taxonomy name

        :param name: The name of this TaxonomyNodeResponseVersion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nodes(self):
        """Gets the nodes of this TaxonomyNodeResponseVersion.

        The list of sub-nodes associated with the current taxonomy node

        :return: The nodes of this TaxonomyNodeResponseVersion.
        :rtype: List[object]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this TaxonomyNodeResponseVersion.

        The list of sub-nodes associated with the current taxonomy node

        :param nodes: The nodes of this TaxonomyNodeResponseVersion.
        :type nodes: List[object]
        """

        self._nodes = nodes

    @property
    def topics(self):
        """Gets the topics of this TaxonomyNodeResponseVersion.

        The list of the topics associated with the current taxonomy node

        :return: The topics of this TaxonomyNodeResponseVersion.
        :rtype: List[TaxonomyTopic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this TaxonomyNodeResponseVersion.

        The list of the topics associated with the current taxonomy node

        :param topics: The topics of this TaxonomyNodeResponseVersion.
        :type topics: List[TaxonomyTopic]
        """

        self._topics = topics
