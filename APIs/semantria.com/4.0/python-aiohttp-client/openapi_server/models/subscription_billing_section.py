# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionBillingSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_seats_allocated: int=None, app_seats_permitted: int=None, data_calls_balance: int=None, data_calls_limit: int=None, data_calls_limit_interval: int=None, docs_balance: int=None, docs_limit: int=None, docs_limit_interval: int=None, docs_suggested: int=None, docs_suggested_interval: int=None, expiration_date: str=None, limit_type: str=None, polling_calls_balance: int=None, polling_calls_limit: int=None, polling_calls_limit_interval: int=None, priority: str=None, settings_calls_balance: int=None, settings_calls_limit: int=None, settings_calls_limit_interval: int=None):
        """SubscriptionBillingSection - a model defined in OpenAPI

        :param app_seats_allocated: The app_seats_allocated of this SubscriptionBillingSection.
        :param app_seats_permitted: The app_seats_permitted of this SubscriptionBillingSection.
        :param data_calls_balance: The data_calls_balance of this SubscriptionBillingSection.
        :param data_calls_limit: The data_calls_limit of this SubscriptionBillingSection.
        :param data_calls_limit_interval: The data_calls_limit_interval of this SubscriptionBillingSection.
        :param docs_balance: The docs_balance of this SubscriptionBillingSection.
        :param docs_limit: The docs_limit of this SubscriptionBillingSection.
        :param docs_limit_interval: The docs_limit_interval of this SubscriptionBillingSection.
        :param docs_suggested: The docs_suggested of this SubscriptionBillingSection.
        :param docs_suggested_interval: The docs_suggested_interval of this SubscriptionBillingSection.
        :param expiration_date: The expiration_date of this SubscriptionBillingSection.
        :param limit_type: The limit_type of this SubscriptionBillingSection.
        :param polling_calls_balance: The polling_calls_balance of this SubscriptionBillingSection.
        :param polling_calls_limit: The polling_calls_limit of this SubscriptionBillingSection.
        :param polling_calls_limit_interval: The polling_calls_limit_interval of this SubscriptionBillingSection.
        :param priority: The priority of this SubscriptionBillingSection.
        :param settings_calls_balance: The settings_calls_balance of this SubscriptionBillingSection.
        :param settings_calls_limit: The settings_calls_limit of this SubscriptionBillingSection.
        :param settings_calls_limit_interval: The settings_calls_limit_interval of this SubscriptionBillingSection.
        """
        self.openapi_types = {
            'app_seats_allocated': int,
            'app_seats_permitted': int,
            'data_calls_balance': int,
            'data_calls_limit': int,
            'data_calls_limit_interval': int,
            'docs_balance': int,
            'docs_limit': int,
            'docs_limit_interval': int,
            'docs_suggested': int,
            'docs_suggested_interval': int,
            'expiration_date': str,
            'limit_type': str,
            'polling_calls_balance': int,
            'polling_calls_limit': int,
            'polling_calls_limit_interval': int,
            'priority': str,
            'settings_calls_balance': int,
            'settings_calls_limit': int,
            'settings_calls_limit_interval': int
        }

        self.attribute_map = {
            'app_seats_allocated': 'app_seats_allocated',
            'app_seats_permitted': 'app_seats_permitted',
            'data_calls_balance': 'data_calls_balance',
            'data_calls_limit': 'data_calls_limit',
            'data_calls_limit_interval': 'data_calls_limit_interval',
            'docs_balance': 'docs_balance',
            'docs_limit': 'docs_limit',
            'docs_limit_interval': 'docs_limit_interval',
            'docs_suggested': 'docs_suggested',
            'docs_suggested_interval': 'docs_suggested_interval',
            'expiration_date': 'expiration_date',
            'limit_type': 'limit_type',
            'polling_calls_balance': 'polling_calls_balance',
            'polling_calls_limit': 'polling_calls_limit',
            'polling_calls_limit_interval': 'polling_calls_limit_interval',
            'priority': 'priority',
            'settings_calls_balance': 'settings_calls_balance',
            'settings_calls_limit': 'settings_calls_limit',
            'settings_calls_limit_interval': 'settings_calls_limit_interval'
        }

        self._app_seats_allocated = app_seats_allocated
        self._app_seats_permitted = app_seats_permitted
        self._data_calls_balance = data_calls_balance
        self._data_calls_limit = data_calls_limit
        self._data_calls_limit_interval = data_calls_limit_interval
        self._docs_balance = docs_balance
        self._docs_limit = docs_limit
        self._docs_limit_interval = docs_limit_interval
        self._docs_suggested = docs_suggested
        self._docs_suggested_interval = docs_suggested_interval
        self._expiration_date = expiration_date
        self._limit_type = limit_type
        self._polling_calls_balance = polling_calls_balance
        self._polling_calls_limit = polling_calls_limit
        self._polling_calls_limit_interval = polling_calls_limit_interval
        self._priority = priority
        self._settings_calls_balance = settings_calls_balance
        self._settings_calls_limit = settings_calls_limit
        self._settings_calls_limit_interval = settings_calls_limit_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionBillingSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionBillingSection of this SubscriptionBillingSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_seats_allocated(self):
        """Gets the app_seats_allocated of this SubscriptionBillingSection.

        Number of allocated application cells permitted to work with the API

        :return: The app_seats_allocated of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._app_seats_allocated

    @app_seats_allocated.setter
    def app_seats_allocated(self, app_seats_allocated):
        """Sets the app_seats_allocated of this SubscriptionBillingSection.

        Number of allocated application cells permitted to work with the API

        :param app_seats_allocated: The app_seats_allocated of this SubscriptionBillingSection.
        :type app_seats_allocated: int
        """
        if app_seats_allocated is None:
            raise ValueError("Invalid value for `app_seats_allocated`, must not be `None`")
        if app_seats_allocated is not None and app_seats_allocated < 0:
            raise ValueError("Invalid value for `app_seats_allocated`, must be a value greater than or equal to `0`")

        self._app_seats_allocated = app_seats_allocated

    @property
    def app_seats_permitted(self):
        """Gets the app_seats_permitted of this SubscriptionBillingSection.

        Number of permitted application to work with the same API account

        :return: The app_seats_permitted of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._app_seats_permitted

    @app_seats_permitted.setter
    def app_seats_permitted(self, app_seats_permitted):
        """Sets the app_seats_permitted of this SubscriptionBillingSection.

        Number of permitted application to work with the same API account

        :param app_seats_permitted: The app_seats_permitted of this SubscriptionBillingSection.
        :type app_seats_permitted: int
        """
        if app_seats_permitted is None:
            raise ValueError("Invalid value for `app_seats_permitted`, must not be `None`")
        if app_seats_permitted is not None and app_seats_permitted < 0:
            raise ValueError("Invalid value for `app_seats_permitted`, must be a value greater than or equal to `0`")

        self._app_seats_permitted = app_seats_permitted

    @property
    def data_calls_balance(self):
        """Gets the data_calls_balance of this SubscriptionBillingSection.

        Represents actual value of remained data API calls

        :return: The data_calls_balance of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._data_calls_balance

    @data_calls_balance.setter
    def data_calls_balance(self, data_calls_balance):
        """Sets the data_calls_balance of this SubscriptionBillingSection.

        Represents actual value of remained data API calls

        :param data_calls_balance: The data_calls_balance of this SubscriptionBillingSection.
        :type data_calls_balance: int
        """
        if data_calls_balance is None:
            raise ValueError("Invalid value for `data_calls_balance`, must not be `None`")
        if data_calls_balance is not None and data_calls_balance < 0:
            raise ValueError("Invalid value for `data_calls_balance`, must be a value greater than or equal to `0`")

        self._data_calls_balance = data_calls_balance

    @property
    def data_calls_limit(self):
        """Gets the data_calls_limit of this SubscriptionBillingSection.

        Represents the limit of data API calls per \"data_calls_limit_interval\" value

        :return: The data_calls_limit of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._data_calls_limit

    @data_calls_limit.setter
    def data_calls_limit(self, data_calls_limit):
        """Sets the data_calls_limit of this SubscriptionBillingSection.

        Represents the limit of data API calls per \"data_calls_limit_interval\" value

        :param data_calls_limit: The data_calls_limit of this SubscriptionBillingSection.
        :type data_calls_limit: int
        """
        if data_calls_limit is None:
            raise ValueError("Invalid value for `data_calls_limit`, must not be `None`")
        if data_calls_limit is not None and data_calls_limit < 0:
            raise ValueError("Invalid value for `data_calls_limit`, must be a value greater than or equal to `0`")

        self._data_calls_limit = data_calls_limit

    @property
    def data_calls_limit_interval(self):
        """Gets the data_calls_limit_interval of this SubscriptionBillingSection.

        Represents an interval for the \"data_calls_limit\" value of current subscription

        :return: The data_calls_limit_interval of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._data_calls_limit_interval

    @data_calls_limit_interval.setter
    def data_calls_limit_interval(self, data_calls_limit_interval):
        """Sets the data_calls_limit_interval of this SubscriptionBillingSection.

        Represents an interval for the \"data_calls_limit\" value of current subscription

        :param data_calls_limit_interval: The data_calls_limit_interval of this SubscriptionBillingSection.
        :type data_calls_limit_interval: int
        """
        if data_calls_limit_interval is None:
            raise ValueError("Invalid value for `data_calls_limit_interval`, must not be `None`")
        if data_calls_limit_interval is not None and data_calls_limit_interval < 0:
            raise ValueError("Invalid value for `data_calls_limit_interval`, must be a value greater than or equal to `0`")

        self._data_calls_limit_interval = data_calls_limit_interval

    @property
    def docs_balance(self):
        """Gets the docs_balance of this SubscriptionBillingSection.

        Current transaction balance. Applicable for pay-as-you-go subscriptions only

        :return: The docs_balance of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._docs_balance

    @docs_balance.setter
    def docs_balance(self, docs_balance):
        """Sets the docs_balance of this SubscriptionBillingSection.

        Current transaction balance. Applicable for pay-as-you-go subscriptions only

        :param docs_balance: The docs_balance of this SubscriptionBillingSection.
        :type docs_balance: int
        """
        if docs_balance is None:
            raise ValueError("Invalid value for `docs_balance`, must not be `None`")
        if docs_balance is not None and docs_balance < 0:
            raise ValueError("Invalid value for `docs_balance`, must be a value greater than or equal to `0`")

        self._docs_balance = docs_balance

    @property
    def docs_limit(self):
        """Gets the docs_limit of this SubscriptionBillingSection.

        Represents the transactions limit per \"docs_limit_interval\" value

        :return: The docs_limit of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._docs_limit

    @docs_limit.setter
    def docs_limit(self, docs_limit):
        """Sets the docs_limit of this SubscriptionBillingSection.

        Represents the transactions limit per \"docs_limit_interval\" value

        :param docs_limit: The docs_limit of this SubscriptionBillingSection.
        :type docs_limit: int
        """
        if docs_limit is None:
            raise ValueError("Invalid value for `docs_limit`, must not be `None`")
        if docs_limit is not None and docs_limit < 0:
            raise ValueError("Invalid value for `docs_limit`, must be a value greater than or equal to `0`")

        self._docs_limit = docs_limit

    @property
    def docs_limit_interval(self):
        """Gets the docs_limit_interval of this SubscriptionBillingSection.

        Represents the timeframe for the \"docs_limit\" value of current subscription

        :return: The docs_limit_interval of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._docs_limit_interval

    @docs_limit_interval.setter
    def docs_limit_interval(self, docs_limit_interval):
        """Sets the docs_limit_interval of this SubscriptionBillingSection.

        Represents the timeframe for the \"docs_limit\" value of current subscription

        :param docs_limit_interval: The docs_limit_interval of this SubscriptionBillingSection.
        :type docs_limit_interval: int
        """
        if docs_limit_interval is None:
            raise ValueError("Invalid value for `docs_limit_interval`, must not be `None`")
        if docs_limit_interval is not None and docs_limit_interval < 0:
            raise ValueError("Invalid value for `docs_limit_interval`, must be a value greater than or equal to `0`")

        self._docs_limit_interval = docs_limit_interval

    @property
    def docs_suggested(self):
        """Gets the docs_suggested of this SubscriptionBillingSection.

        Represents the amount of favorable documents suggested for throughput subscriptions

        :return: The docs_suggested of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._docs_suggested

    @docs_suggested.setter
    def docs_suggested(self, docs_suggested):
        """Sets the docs_suggested of this SubscriptionBillingSection.

        Represents the amount of favorable documents suggested for throughput subscriptions

        :param docs_suggested: The docs_suggested of this SubscriptionBillingSection.
        :type docs_suggested: int
        """
        if docs_suggested is None:
            raise ValueError("Invalid value for `docs_suggested`, must not be `None`")
        if docs_suggested is not None and docs_suggested < 0:
            raise ValueError("Invalid value for `docs_suggested`, must be a value greater than or equal to `0`")

        self._docs_suggested = docs_suggested

    @property
    def docs_suggested_interval(self):
        """Gets the docs_suggested_interval of this SubscriptionBillingSection.

        Represents the timeframe for the “docs_suggested” value of the current subscription

        :return: The docs_suggested_interval of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._docs_suggested_interval

    @docs_suggested_interval.setter
    def docs_suggested_interval(self, docs_suggested_interval):
        """Sets the docs_suggested_interval of this SubscriptionBillingSection.

        Represents the timeframe for the “docs_suggested” value of the current subscription

        :param docs_suggested_interval: The docs_suggested_interval of this SubscriptionBillingSection.
        :type docs_suggested_interval: int
        """
        if docs_suggested_interval is None:
            raise ValueError("Invalid value for `docs_suggested_interval`, must not be `None`")
        if docs_suggested_interval is not None and docs_suggested_interval < 0:
            raise ValueError("Invalid value for `docs_suggested_interval`, must be a value greater than or equal to `0`")

        self._docs_suggested_interval = docs_suggested_interval

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SubscriptionBillingSection.

        Expiration date of current subscription. Defined as a Unix time stamp

        :return: The expiration_date of this SubscriptionBillingSection.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SubscriptionBillingSection.

        Expiration date of current subscription. Defined as a Unix time stamp

        :param expiration_date: The expiration_date of this SubscriptionBillingSection.
        :type expiration_date: str
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def limit_type(self):
        """Gets the limit_type of this SubscriptionBillingSection.

        Subscription type can have either pay-as-you-go or throughput value

        :return: The limit_type of this SubscriptionBillingSection.
        :rtype: str
        """
        return self._limit_type

    @limit_type.setter
    def limit_type(self, limit_type):
        """Sets the limit_type of this SubscriptionBillingSection.

        Subscription type can have either pay-as-you-go or throughput value

        :param limit_type: The limit_type of this SubscriptionBillingSection.
        :type limit_type: str
        """
        if limit_type is None:
            raise ValueError("Invalid value for `limit_type`, must not be `None`")

        self._limit_type = limit_type

    @property
    def polling_calls_balance(self):
        """Gets the polling_calls_balance of this SubscriptionBillingSection.

        Represents actual value of remained polling API calls

        :return: The polling_calls_balance of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._polling_calls_balance

    @polling_calls_balance.setter
    def polling_calls_balance(self, polling_calls_balance):
        """Sets the polling_calls_balance of this SubscriptionBillingSection.

        Represents actual value of remained polling API calls

        :param polling_calls_balance: The polling_calls_balance of this SubscriptionBillingSection.
        :type polling_calls_balance: int
        """
        if polling_calls_balance is None:
            raise ValueError("Invalid value for `polling_calls_balance`, must not be `None`")
        if polling_calls_balance is not None and polling_calls_balance < 0:
            raise ValueError("Invalid value for `polling_calls_balance`, must be a value greater than or equal to `0`")

        self._polling_calls_balance = polling_calls_balance

    @property
    def polling_calls_limit(self):
        """Gets the polling_calls_limit of this SubscriptionBillingSection.

        Represents the limit of polling API calls per \"polling_calls_limit_interval\" value

        :return: The polling_calls_limit of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._polling_calls_limit

    @polling_calls_limit.setter
    def polling_calls_limit(self, polling_calls_limit):
        """Sets the polling_calls_limit of this SubscriptionBillingSection.

        Represents the limit of polling API calls per \"polling_calls_limit_interval\" value

        :param polling_calls_limit: The polling_calls_limit of this SubscriptionBillingSection.
        :type polling_calls_limit: int
        """
        if polling_calls_limit is None:
            raise ValueError("Invalid value for `polling_calls_limit`, must not be `None`")
        if polling_calls_limit is not None and polling_calls_limit < 0:
            raise ValueError("Invalid value for `polling_calls_limit`, must be a value greater than or equal to `0`")

        self._polling_calls_limit = polling_calls_limit

    @property
    def polling_calls_limit_interval(self):
        """Gets the polling_calls_limit_interval of this SubscriptionBillingSection.

        Represents an interval for the \"polling_calls_limit\" value of current subscription

        :return: The polling_calls_limit_interval of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._polling_calls_limit_interval

    @polling_calls_limit_interval.setter
    def polling_calls_limit_interval(self, polling_calls_limit_interval):
        """Sets the polling_calls_limit_interval of this SubscriptionBillingSection.

        Represents an interval for the \"polling_calls_limit\" value of current subscription

        :param polling_calls_limit_interval: The polling_calls_limit_interval of this SubscriptionBillingSection.
        :type polling_calls_limit_interval: int
        """
        if polling_calls_limit_interval is None:
            raise ValueError("Invalid value for `polling_calls_limit_interval`, must not be `None`")
        if polling_calls_limit_interval is not None and polling_calls_limit_interval < 0:
            raise ValueError("Invalid value for `polling_calls_limit_interval`, must be a value greater than or equal to `0`")

        self._polling_calls_limit_interval = polling_calls_limit_interval

    @property
    def priority(self):
        """Gets the priority of this SubscriptionBillingSection.

        Processing priority of current subscriber. Can have low, normal or high value

        :return: The priority of this SubscriptionBillingSection.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SubscriptionBillingSection.

        Processing priority of current subscriber. Can have low, normal or high value

        :param priority: The priority of this SubscriptionBillingSection.
        :type priority: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def settings_calls_balance(self):
        """Gets the settings_calls_balance of this SubscriptionBillingSection.

        Represents actual value of remained settings API calls

        :return: The settings_calls_balance of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._settings_calls_balance

    @settings_calls_balance.setter
    def settings_calls_balance(self, settings_calls_balance):
        """Sets the settings_calls_balance of this SubscriptionBillingSection.

        Represents actual value of remained settings API calls

        :param settings_calls_balance: The settings_calls_balance of this SubscriptionBillingSection.
        :type settings_calls_balance: int
        """
        if settings_calls_balance is None:
            raise ValueError("Invalid value for `settings_calls_balance`, must not be `None`")
        if settings_calls_balance is not None and settings_calls_balance < 0:
            raise ValueError("Invalid value for `settings_calls_balance`, must be a value greater than or equal to `0`")

        self._settings_calls_balance = settings_calls_balance

    @property
    def settings_calls_limit(self):
        """Gets the settings_calls_limit of this SubscriptionBillingSection.

        Represents the limit of settings API calls per \"settings_calls_limit_interval\" value

        :return: The settings_calls_limit of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._settings_calls_limit

    @settings_calls_limit.setter
    def settings_calls_limit(self, settings_calls_limit):
        """Sets the settings_calls_limit of this SubscriptionBillingSection.

        Represents the limit of settings API calls per \"settings_calls_limit_interval\" value

        :param settings_calls_limit: The settings_calls_limit of this SubscriptionBillingSection.
        :type settings_calls_limit: int
        """
        if settings_calls_limit is None:
            raise ValueError("Invalid value for `settings_calls_limit`, must not be `None`")
        if settings_calls_limit is not None and settings_calls_limit < 0:
            raise ValueError("Invalid value for `settings_calls_limit`, must be a value greater than or equal to `0`")

        self._settings_calls_limit = settings_calls_limit

    @property
    def settings_calls_limit_interval(self):
        """Gets the settings_calls_limit_interval of this SubscriptionBillingSection.

        Represents an interval for the \"settings_calls_limit\" value of current subscription

        :return: The settings_calls_limit_interval of this SubscriptionBillingSection.
        :rtype: int
        """
        return self._settings_calls_limit_interval

    @settings_calls_limit_interval.setter
    def settings_calls_limit_interval(self, settings_calls_limit_interval):
        """Sets the settings_calls_limit_interval of this SubscriptionBillingSection.

        Represents an interval for the \"settings_calls_limit\" value of current subscription

        :param settings_calls_limit_interval: The settings_calls_limit_interval of this SubscriptionBillingSection.
        :type settings_calls_limit_interval: int
        """
        if settings_calls_limit_interval is None:
            raise ValueError("Invalid value for `settings_calls_limit_interval`, must not be `None`")
        if settings_calls_limit_interval is not None and settings_calls_limit_interval < 0:
            raise ValueError("Invalid value for `settings_calls_limit_interval`, must be a value greater than or equal to `0`")

        self._settings_calls_limit_interval = settings_calls_limit_interval
