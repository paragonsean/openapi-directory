# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_detailed_mode_section import FeatureDetailedModeSection
from openapi_server.models.feature_discovery_mode_section import FeatureDiscoveryModeSection
from openapi_server.models.feature_settings_section import FeatureSettingsSection
from openapi_server.models.feature_template_section import FeatureTemplateSection
from openapi_server import util


class Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detailed_mode: FeatureDetailedModeSection=None, discovery_mode: FeatureDiscoveryModeSection=None, html_processing: bool=None, id: str=None, language: str=None, one_sentence_mode: bool=None, settings: FeatureSettingsSection=None, templates: FeatureTemplateSection=None):
        """Feature - a model defined in OpenAPI

        :param detailed_mode: The detailed_mode of this Feature.
        :param discovery_mode: The discovery_mode of this Feature.
        :param html_processing: The html_processing of this Feature.
        :param id: The id of this Feature.
        :param language: The language of this Feature.
        :param one_sentence_mode: The one_sentence_mode of this Feature.
        :param settings: The settings of this Feature.
        :param templates: The templates of this Feature.
        """
        self.openapi_types = {
            'detailed_mode': FeatureDetailedModeSection,
            'discovery_mode': FeatureDiscoveryModeSection,
            'html_processing': bool,
            'id': str,
            'language': str,
            'one_sentence_mode': bool,
            'settings': FeatureSettingsSection,
            'templates': FeatureTemplateSection
        }

        self.attribute_map = {
            'detailed_mode': 'detailed_mode',
            'discovery_mode': 'discovery_mode',
            'html_processing': 'html_processing',
            'id': 'id',
            'language': 'language',
            'one_sentence_mode': 'one_sentence_mode',
            'settings': 'settings',
            'templates': 'templates'
        }

        self._detailed_mode = detailed_mode
        self._discovery_mode = discovery_mode
        self._html_processing = html_processing
        self._id = id
        self._language = language
        self._one_sentence_mode = one_sentence_mode
        self._settings = settings
        self._templates = templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feature of this Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detailed_mode(self):
        """Gets the detailed_mode of this Feature.


        :return: The detailed_mode of this Feature.
        :rtype: FeatureDetailedModeSection
        """
        return self._detailed_mode

    @detailed_mode.setter
    def detailed_mode(self, detailed_mode):
        """Sets the detailed_mode of this Feature.


        :param detailed_mode: The detailed_mode of this Feature.
        :type detailed_mode: FeatureDetailedModeSection
        """
        if detailed_mode is None:
            raise ValueError("Invalid value for `detailed_mode`, must not be `None`")

        self._detailed_mode = detailed_mode

    @property
    def discovery_mode(self):
        """Gets the discovery_mode of this Feature.


        :return: The discovery_mode of this Feature.
        :rtype: FeatureDiscoveryModeSection
        """
        return self._discovery_mode

    @discovery_mode.setter
    def discovery_mode(self, discovery_mode):
        """Sets the discovery_mode of this Feature.


        :param discovery_mode: The discovery_mode of this Feature.
        :type discovery_mode: FeatureDiscoveryModeSection
        """
        if discovery_mode is None:
            raise ValueError("Invalid value for `discovery_mode`, must not be `None`")

        self._discovery_mode = discovery_mode

    @property
    def html_processing(self):
        """Gets the html_processing of this Feature.

        Represents whether HTML processing supported for certain language or not

        :return: The html_processing of this Feature.
        :rtype: bool
        """
        return self._html_processing

    @html_processing.setter
    def html_processing(self, html_processing):
        """Sets the html_processing of this Feature.

        Represents whether HTML processing supported for certain language or not

        :param html_processing: The html_processing of this Feature.
        :type html_processing: bool
        """
        if html_processing is None:
            raise ValueError("Invalid value for `html_processing`, must not be `None`")

        self._html_processing = html_processing

    @property
    def id(self):
        """Gets the id of this Feature.

        Unique language identifier

        :return: The id of this Feature.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feature.

        Unique language identifier

        :param id: The id of this Feature.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def language(self):
        """Gets the language of this Feature.

        Represents language following options relevant to

        :return: The language of this Feature.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Feature.

        Represents language following options relevant to

        :param language: The language of this Feature.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def one_sentence_mode(self):
        """Gets the one_sentence_mode of this Feature.

        Considers entire text as one sentence and uses optimized chunker for short content like tweets.

        :return: The one_sentence_mode of this Feature.
        :rtype: bool
        """
        return self._one_sentence_mode

    @one_sentence_mode.setter
    def one_sentence_mode(self, one_sentence_mode):
        """Sets the one_sentence_mode of this Feature.

        Considers entire text as one sentence and uses optimized chunker for short content like tweets.

        :param one_sentence_mode: The one_sentence_mode of this Feature.
        :type one_sentence_mode: bool
        """
        if one_sentence_mode is None:
            raise ValueError("Invalid value for `one_sentence_mode`, must not be `None`")

        self._one_sentence_mode = one_sentence_mode

    @property
    def settings(self):
        """Gets the settings of this Feature.


        :return: The settings of this Feature.
        :rtype: FeatureSettingsSection
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Feature.


        :param settings: The settings of this Feature.
        :type settings: FeatureSettingsSection
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def templates(self):
        """Gets the templates of this Feature.


        :return: The templates of this Feature.
        :rtype: FeatureTemplateSection
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this Feature.


        :param templates: The templates of this Feature.
        :type templates: FeatureTemplateSection
        """
        if templates is None:
            raise ValueError("Invalid value for `templates`, must not be `None`")

        self._templates = templates
