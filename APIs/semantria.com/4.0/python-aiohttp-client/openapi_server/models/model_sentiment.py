# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelSentiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mixed_score: float=None, model_name: str=None, negative_score: float=None, neutral_score: float=None, positive_score: float=None, sentiment_polarity: str=None):
        """ModelSentiment - a model defined in OpenAPI

        :param mixed_score: The mixed_score of this ModelSentiment.
        :param model_name: The model_name of this ModelSentiment.
        :param negative_score: The negative_score of this ModelSentiment.
        :param neutral_score: The neutral_score of this ModelSentiment.
        :param positive_score: The positive_score of this ModelSentiment.
        :param sentiment_polarity: The sentiment_polarity of this ModelSentiment.
        """
        self.openapi_types = {
            'mixed_score': float,
            'model_name': str,
            'negative_score': float,
            'neutral_score': float,
            'positive_score': float,
            'sentiment_polarity': str
        }

        self.attribute_map = {
            'mixed_score': 'mixed_score',
            'model_name': 'model_name',
            'negative_score': 'negative_score',
            'neutral_score': 'neutral_score',
            'positive_score': 'positive_score',
            'sentiment_polarity': 'sentiment_polarity'
        }

        self._mixed_score = mixed_score
        self._model_name = model_name
        self._negative_score = negative_score
        self._neutral_score = neutral_score
        self._positive_score = positive_score
        self._sentiment_polarity = sentiment_polarity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelSentiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelSentiment of this ModelSentiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mixed_score(self):
        """Gets the mixed_score of this ModelSentiment.

        Mixed sentiment score associated with the document

        :return: The mixed_score of this ModelSentiment.
        :rtype: float
        """
        return self._mixed_score

    @mixed_score.setter
    def mixed_score(self, mixed_score):
        """Sets the mixed_score of this ModelSentiment.

        Mixed sentiment score associated with the document

        :param mixed_score: The mixed_score of this ModelSentiment.
        :type mixed_score: float
        """
        if mixed_score is None:
            raise ValueError("Invalid value for `mixed_score`, must not be `None`")

        self._mixed_score = mixed_score

    @property
    def model_name(self):
        """Gets the model_name of this ModelSentiment.

        Name of the sentiment model used for scoring

        :return: The model_name of this ModelSentiment.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ModelSentiment.

        Name of the sentiment model used for scoring

        :param model_name: The model_name of this ModelSentiment.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def negative_score(self):
        """Gets the negative_score of this ModelSentiment.

        Negative (probable negative score) sentiment score associated with the document

        :return: The negative_score of this ModelSentiment.
        :rtype: float
        """
        return self._negative_score

    @negative_score.setter
    def negative_score(self, negative_score):
        """Sets the negative_score of this ModelSentiment.

        Negative (probable negative score) sentiment score associated with the document

        :param negative_score: The negative_score of this ModelSentiment.
        :type negative_score: float
        """
        if negative_score is None:
            raise ValueError("Invalid value for `negative_score`, must not be `None`")

        self._negative_score = negative_score

    @property
    def neutral_score(self):
        """Gets the neutral_score of this ModelSentiment.

        Neutral (probable neutral score) sentiment score associated with the document

        :return: The neutral_score of this ModelSentiment.
        :rtype: float
        """
        return self._neutral_score

    @neutral_score.setter
    def neutral_score(self, neutral_score):
        """Sets the neutral_score of this ModelSentiment.

        Neutral (probable neutral score) sentiment score associated with the document

        :param neutral_score: The neutral_score of this ModelSentiment.
        :type neutral_score: float
        """
        if neutral_score is None:
            raise ValueError("Invalid value for `neutral_score`, must not be `None`")

        self._neutral_score = neutral_score

    @property
    def positive_score(self):
        """Gets the positive_score of this ModelSentiment.

        Positive (probable positive score) sentiment score associated with the document

        :return: The positive_score of this ModelSentiment.
        :rtype: float
        """
        return self._positive_score

    @positive_score.setter
    def positive_score(self, positive_score):
        """Sets the positive_score of this ModelSentiment.

        Positive (probable positive score) sentiment score associated with the document

        :param positive_score: The positive_score of this ModelSentiment.
        :type positive_score: float
        """
        if positive_score is None:
            raise ValueError("Invalid value for `positive_score`, must not be `None`")

        self._positive_score = positive_score

    @property
    def sentiment_polarity(self):
        """Gets the sentiment_polarity of this ModelSentiment.

        Verbal representation of sentiment score that matches the best on the document. Can be \"negative\", \"positive\" or \"neutral\"

        :return: The sentiment_polarity of this ModelSentiment.
        :rtype: str
        """
        return self._sentiment_polarity

    @sentiment_polarity.setter
    def sentiment_polarity(self, sentiment_polarity):
        """Sets the sentiment_polarity of this ModelSentiment.

        Verbal representation of sentiment score that matches the best on the document. Can be \"negative\", \"positive\" or \"neutral\"

        :param sentiment_polarity: The sentiment_polarity of this ModelSentiment.
        :type sentiment_polarity: str
        """
        allowed_values = ["negative", "positive", "neutral"]  # noqa: E501
        if sentiment_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment_polarity` ({0}), must be one of {1}"
                .format(sentiment_polarity, allowed_values)
            )

        self._sentiment_polarity = sentiment_polarity
